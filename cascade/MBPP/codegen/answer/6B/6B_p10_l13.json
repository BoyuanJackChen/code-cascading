[
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    for element in test_tup1:\n        if element in test_tup2:\n            return True\n    return False\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    if len(test_tup1) > len(test_tup2):\n        diff_list = [x for x in test_tup1 if x not in test_tup2]\n        return diff_list\n    elif len(test_tup1) < len(test_tup2):\n        diff_list = [x for x in test_tup2 if x not in test_tup1]\n        return diff_list\n    else:\n        return 'Lists have the same elements'\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    if len(test_tup1) > len(test_tup2):\n        \n        larger_list = test_tup1\n        smaller_list = test_tup2\n    else:\n        \n        larger_list = test_tup2\n        smaller_list = test_tup1\n        \n    common_elements = []\n    \n    for i in range(len(smaller_list)):\n        \n        if smaller_list[i] in larger_list:\n            common_elements.append(smaller_list[i])\n            \n    return common_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    \n    # return (len(test_set1 & test_set2))\n    return len(test_set1.intersection(test_set2))\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    tup1 = list(test_tup1)\n    tup2 = list(test_tup2)\n    result = set(tup1) & set(tup2)\n    if len(result) == 0:\n        return None\n    else:\n        return result\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if test_tup1[0] == test_tup2[0]:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = list(set(test_tup1) & set(test_tup2))\n    return common_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if test_tup1 == test_tup2:\n        return True\n    elif len(test_tup1) < len(test_tup2):\n        return similar_elements(test_tup2, test_tup1)\n    else:\n        return similar_elements(test_tup1, test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert tuples to lists\n    # convert lists to sets\n    # check for intersection\n    # return the intersection of the two sets\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return False\n    elif n%2==0:\n        return True\n    else:\n        # 2 is prime\n        i = 3\n        # n is divisible by 2\n        while n%i!=0:\n            i += 2\n        # n is not divisible by 2\n        return True\n    return False\ndef prime_factors(n):\n    '''\n    Write a python function to find all prime factors of a given number.\n    '''\n    if n == 1:\n        return 1\n    if is_not_prime(n):\n        return False\n    i = 2\n    while i*i<=n:\n        if n%i == 0:\n            if is_not_prime(i):\n                while n%i == 0:\n                    n /= i\n            else:\n                i += 1\n    if n>1:\n        return n\n    return False\ndef factors(n):\n    '''\n    Write a python function to find all factors of a given number.\n    '''\n    i = 2\n    while i*i<=n:\n        if n%i == 0:\n            if is_not_prime(i):\n                while n%i == 0:\n                    n /= i\n            else:\n                i += 1\n    if n>1:\n        return n\n    return False\ndef is_prime(n):\n    '''\n    Write a python function to identify a prime number or not.\n    '''\n    if n==1:\n        return False\n    if n%2==0 and n>2:\n        return False\n    return True\ndef pfactor(n):\n    '''\n    Write a python function to find a prime factor of a number.\n    '''\n    if n%2==0 and n>2:\n        return 2\n    if is_not_prime(n):\n        return False\n    i = 3\n    while i*i<=n:\n        if n%i == 0:\n            if is_not_prime(i):\n                while n%i == 0:\n                    n /= i\n            else:\n                i += 1\n    if n>1:\n        return n\n    return False\ndef factors_only(n):\n    '''\n    Write a python function to find all factors of a given number, but exclude the prime factors.\n    '''\n    i = 2\n    while i*i<=n:\n        if n%i == 0:\n            if is_not_prime(i):\n                while n%i == 0:\n                    n /= i\n            else:\n                i += 1\n    if n>1:\n        return n\n    return False\ndef prime_factors_only(n):\n    '''\n    Write a python function to find all prime factors of a given number, but exclude the non-prime factors.\n    '''\n    i = 2\n    while i*i<=n:\n        if n%i == 0:\n            if is_prime(i):\n                while n%i == 0:\n                    n /= i\n            else:\n                i += 1\n    if n>1:\n        return n\n    return False\ndef is_perfect(n):\n    '''\n    Write a python function to check if a given number is a perfect number.\n    '''\n    sum = 0\n    if n==1:\n        return False\n    for i in range(1,n):\n        if n%i == 0:\n            sum += i\n    return sum == n\ndef is_abundant(n):\n    '''\n    Write a python function to check if a given number is an abundant number.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if n%i == 0:\n            sum += i\n    return sum > n\ndef is_deficient(n):\n    '''\n    Write a python function to check if a given number is a deficient number.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if n%i == 0:\n            sum += i\n    return sum < n\ndef is_lucky(n):\n    '''\n    Write a python function to check if a given number is a lucky number.\n    '''\n    if is_perfect(n):\n        return True\n    if is_abundant(n):\n        return False\n    if is_deficient(n):\n        return True\n    return False\ndef is_happy(n):\n    '''\n    Write a python function to check if a given number is a happy number.\n    '''\n    sum = 0\n    new_num = n\n    while new_num > 0:\n        new_num,d = divmod(new_num,10)\n        sum += d*d\n    return sum == 1\ndef sum_square(n):\n    '''\n    Write a python function to find the sum of the square of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i*i\n    return sum\ndef sum_triangular(n):\n    '''\n    Write a python function to find the sum of the n first triangular numbers.\n    '''\n    return int((n*(n+1))/2)\ndef sum_square_triangular(n):\n    '''\n    Write a python function to find the sum of the n first triangular numbers.\n    '''\n    return int((n*(n+1)*(2*n+1))/6)\ndef sum_n_digit(n):\n    '''\n    Write a python function to find the sum of the n first n digit numbers.\n    '''\n    return sum([int(i) for i in str(n)])\ndef sum_n_digit_square(n):\n    '''\n    Write a python function to find the sum of the n first n digit numbers.\n    '''\n    return sum([int(i) for i in str(n*n)])\ndef sum_n_digit_triangular(n):\n    '''\n    Write a python function to find the sum of the n first n digit numbers.\n    '''\n    return sum([int(i) for i in str(n*(n+1)/2)])\ndef sum_n_digit_square_triangular(n):\n    '''\n    Write a python function to find the sum of the n first n digit numbers.\n    '''\n    return sum([int(i) for i in str(n*(n+1)*(2*n+1)/6)])\ndef sum_n_digit_square_square_triangular(n):\n    '''\n    Write a python function to find the sum of the n first n digit numbers.\n    '''\n    return sum([int(i) for i in str(n*(n+1)*(2*n+1)*(2*n+3)/24)])\ndef sum_n_digit_square_square_triangular_square_triangular(n):\n    '''\n    Write a python function to find the sum of the n first n digit numbers.\n    '''\n    return sum([int(i) for i in str(n*(n+1)*(2*n+1)*(2*n+3)*(2*n+5)/120)])\ndef sum_n_digit_square_square_square_triangular_square_triangular_square_triangular(n):\n    '''\n    Write a python function to find the sum of the n first n digit numbers.\n    '''\n    return sum([int(i) for i in str(n*(n+1)*(2*n+1)*(2*n+3)*(2*n+5)*(2*n+7)/720)])\ndef sum_n_digit_square_square_square_square_triangular_square_triangular_square_triangular_square_triangular_square_triangular_square_triangular(n):\n    '''\n    Write a python function to find the sum of the n first n digit numbers.\n    '''\n    return sum([int(i) for i in str(n*(n+1)*(2*n+1)*(2*n+3)*(2*n+5)*(2*n+7)*(2*n+9)*(2*n+11)/5040)])\ndef sum_n_digit_square_square_square_square_triangular_square_triangular_square_triangular_square_triangular_square_triangular"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<=1:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    for x in range(3,int(math.sqrt(n))+1,2):\n        if n%x==0:\n            return False\n    return True\ndef prime_gen():\n    '''\n    Write a python generator function to return the prime numbers starting\n    from 1 and up to n where n is input by the user.\n    '''\n    num = int(input('Enter an upper limit: '))\n    for i in range(1,num+1):\n        if is_not_prime(i):\n            yield i\ndef is_perfect(n):\n    '''\n    Write a python function to return True if the sum of divisors\n    of a number n is equal to the number itself.\n    '''\n    if n < 1:\n        return False\n    for x in range(1,int(n/2)+1):\n        if n%x==0:\n            if x+x==n:\n                return True\n    return False\ndef get_perfect_gen():\n    '''\n    Write a python generator function to return the perfect numbers\n    stating from 1 and up to n where n is input by the user.\n    '''\n    num = int(input('Enter an upper limit: '))\n    for i in range(1,num+1):\n        if is_perfect(i):\n            yield i\ndef is_abundant(n):\n    '''\n    Write a python function to return True if the sum of divisors\n    of a number n is greater than the number itself.\n    '''\n    if n < 1:\n        return False\n    sum = 0\n    for x in range(1,int(math.sqrt(n))+1):\n        if n%x==0:\n            sum = sum + x + n//x\n    if sum>n:\n        return True\n    return False\ndef get_abundant_gen():\n    '''\n    Write a python generator function to return the abundant numbers\n    stating from 1 and up to n where n is input by the user.\n    '''\n    num = int(input('Enter an upper limit: '))\n    for i in range(1,num+1):\n        if is_abundant(i):\n            yield i\ndef is_deficient(n):\n    '''\n    Write a python function to return True if the sum of divisors\n    of a number n is less than the number itself.\n    '''\n    if n < 1:\n        return False\n    sum = 0\n    for x in range(1,int(math.sqrt(n))+1):\n        if n%x==0:\n            sum = sum + x\n    if sum<n:\n        return True\n    return False\ndef get_deficient_gen():\n    '''\n    Write a python generator function to return the deficient numbers\n    stating from 1 and up to n where n is input by the user.\n    '''\n    num = int(input('Enter an upper limit: '))\n    for i in range(1,num+1):\n        if is_deficient(i):\n            yield i\ndef is_superprime(n):\n    '''\n    Write a python function to return True if the number is a super\n    prime number i.e. if it is greater than 1, and the sum of its\n    divisors is greater than the number itself.\n    '''\n    if n<=1:\n        return False\n    sum = 0\n    for x in range(1,int(math.sqrt(n))+1):\n        if n%x==0:\n            sum = sum + x + n//x\n    if sum>n:\n        return True\n    return False\ndef is_prime_and_deficient(n):\n    '''\n    Write a python function to return True if the number is a prime\n    number and a deficient number i.e. if it is greater than 1 and the\n    sum of its divisors is less than the number itself.\n    '''\n    if n<=1:\n        return False\n    if is_prime(n):\n        if is_deficient(n):\n            return True\n    return False\ndef is_super_prime_and_deficient(n):\n    '''\n    Write a python function to return True if the number is a super\n    prime number and a deficient number i.e. if it is greater than 1,\n    and the sum of its divisors is less than the number itself.\n    '''\n    if n<=1:\n        return False\n    if is_superprime(n):\n        if is_deficient(n):\n            return True\n    return False\ndef is_perfect_and_abundant(n):\n    '''\n    Write a python function to return True if the number is a perfect\n    number and an abundant number i.e. if it is greater than 1, and\n    the sum of its divisors is equal to the number itself.\n    '''\n    if n<=1:\n        return False\n    if is_perfect(n):\n        if is_abundant(n):\n            return True\n    return False\ndef is_super_perfect_and_abundant(n):\n    '''\n    Write a python function to return True if the number is a super\n    perfect number and an abundant number i.e. if it is greater than\n    1, and the sum of its divisors is equal to the number itself.\n    '''\n    if n<=1:\n        return False\n    if is_superprime(n):\n        if is_abundant(n):\n            return True\n    return False\ndef get_perfect_and_abundant_gen():\n    '''\n    Write a python generator function to return the perfect and abundant\n    numbers starting from 1 and up to n where n is input by the user.\n    '''\n    num = int(input('Enter an upper limit: '))\n    for i in range(1,num+1):\n        if is_perfect_and_abundant(i):\n            yield i\ndef get_super_perfect_and_abundant_gen():\n    '''\n    Write a python generator function to return the super perfect and\n    abundant numbers starting from 1 and up to n where n is input by\n    the user.\n    '''\n    num = int(input('Enter an upper limit: '))\n    for i in range(1,num+1):\n        if is_super_perfect_and_abundant(i):\n            yield i\ndef is_super_perfect_and_deficient(n):\n    '''\n    Write a python function to return True if the number is a super\n    perfect number and a deficient number i.e. if it is greater than\n    1, and the sum of its divisors is less than the number itself.\n    '''\n    if n<=1:\n        return False\n    if is_superprime(n):\n        if is_deficient(n):\n            return True\n    return False\ndef get_super_perfect_and_deficient_gen():\n    '''\n    Write a python generator function to return the super perfect and\n    deficient numbers starting from 1 and up to n where n is input\n    by the user.\n    '''\n    num = int(input('Enter an upper limit: '))\n    for i in range(1,num+1):\n        if is_super_perfect_and_deficient(i):\n            yield i\ndef get_super_prime_and_deficient_gen():\n    '''\n    Write a python generator function to return the super prime and\n    deficient numbers starting from 1 and up to n where n is input\n    by the user.\n    '''\n    num = int(input('Enter an upper limit: '))\n    for i in range(1,num+1):\n        if is_superprime(i) and is_deficient(i):\n            yield i\ndef get_super_prime_and_deficient_and_perfect_gen():\n    '''\n    Write a python generator function to return the super prime,\n    deficient and perfect numbers starting from 1 and up to n where n\n    is input by the user.\n    '''\n    num = int(input('Enter an upper limit: '))\n    for i in range(1,num+1):\n        if is_superprime(i) and is_deficient(i) and is_perfect(i):\n            "
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n > 1:\n        if n == 2:\n            return False\n        elif n % 2 == 0:\n            return True\n        else:\n            for i in range(2, int(math.sqrt(n)) + 1):\n                if n % i == 0:\n                    return True\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n % 2 == 0:\n        return n == 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<=2:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3,int(math.sqrt(n)+1),2):\n        if n%i==0:\n            return False\n    return True\ndef primes(n):\n    '''\n    Write a python function to get all primes less than n.\n    '''\n    if n<=2:\n        return []\n    if n==3:\n        return [2]\n    primes_upto_n = [2]\n    for i in range(4,n+1,2):\n        if is_not_prime(i):\n            continue\n        primes_upto_n.append(i)\n    return primes_upto_n\ndef primes_upto_n(n):\n    '''\n    Write a python function to get all primes less than n.\n    '''\n    if n<=2:\n        return []\n    if n==3:\n        return [2]\n    primes_upto_n = [2]\n    for i in range(3,n+1,2):\n        if is_not_prime(i):\n            continue\n        primes_upto_n.append(i)\n    return primes_upto_n\ndef first_primes(n):\n    '''\n    Write a python function to get all the first primes less than n.\n    '''\n    if n<=2:\n        return []\n    if n==3:\n        return [2]\n    primes_upto_n = [2]\n    for i in range(3,n+1,2):\n        if is_not_prime(i):\n            continue\n        primes_upto_n.append(i)\n    return primes_upto_n\ndef last_primes(n):\n    '''\n    Write a python function to get all the last primes less than n.\n    '''\n    if n<=2:\n        return []\n    if n==3:\n        return [2]\n    primes_upto_n = [2]\n    for i in range(3,n+1,2):\n        if is_not_prime(i):\n            continue\n        primes_upto_n.append(i)\n    return primes_upto_n\ndef primes_between(a,b):\n    '''\n    Write a python function to get all the primes between a and b (both inclusive).\n    '''\n    if a>b:\n        return []\n    if a==b:\n        return [a]\n    primes_upto_n = [a]\n    for i in range(a+1,b+1,2):\n        if is_not_prime(i):\n            continue\n        primes_upto_n.append(i)\n    return primes_upto_n\ndef sum_primes(n):\n    '''\n    Write a python function to get the sum of all the primes less than n.\n    '''\n    if n<=2:\n        return 0\n    if n==3:\n        return 2\n    primes_upto_n = [2]\n    for i in range(3,n+1,2):\n        if is_not_prime(i):\n            continue\n        primes_upto_n.append(i)\n    total = 0\n    for i in primes_upto_n:\n        total += i\n    return total\ndef count_primes(n):\n    '''\n    Write a python function to get the count of all the primes less than n.\n    '''\n    if n<=2:\n        return 0\n    if n==3:\n        return 1\n    primes_upto_n = [2]\n    for i in range(3,n+1,2):\n        if is_not_prime(i):\n            continue\n        primes_upto_n.append(i)\n    count = 0\n    for i in primes_upto_n:\n        count += 1\n    return count\ndef factors_of_n(n):\n    '''\n    Write a python function to get the factors of n.\n    '''\n    if n<=1:\n        return []\n    factors_upto_n = []\n    for i in range(1,n+1):\n        if n%i==0:\n            factors_upto_n.append(i)\n    return factors_upto_n\ndef sum_factors_upto_n(n):\n    '''\n    Write a python function to get the sum of all the factors of n.\n    '''\n    if n<=1:\n        return 0\n    total = 0\n    for i in range(1,n+1):\n        if n%i==0:\n            total += i\n    return total\ndef multiply_factors_upto_n(n):\n    '''\n    Write a python function to get the product of all the factors of n.\n    '''\n    if n<=1:\n        return 1\n    product = 1\n    for i in range(1,n+1):\n        if n%i==0:\n            product *= i\n    return product\ndef factor_product_factors(n):\n    '''\n    Write a python function to get the product of the factors of n.\n    '''\n    if n<=1:\n        return 1\n    product = 1\n    for i in range(1,n+1):\n        if n%i==0:\n            product *= i\n    return product\ndef primes_upto_n(n):\n    '''\n    Write a python function to get the prime numbers upto n (inclusive).\n    '''\n    if n<=2:\n        return []\n    if n==3:\n        return [2]\n    primes_upto_n = [2]\n    for i in range(3,n+1,2):\n        if is_not_prime(i):\n            continue\n        primes_upto_n.append(i)\n    return primes_upto_n\ndef sum_of_primes(n):\n    '''\n    Write a python function to get the sum of all the prime numbers upto n (inclusive).\n    '''\n    if n<=2:\n        return 0\n    if n==3:\n        return 2\n    total = 2\n    for i in range(3,n+1,2):\n        if is_not_prime(i):\n            continue\n        total += i\n    return total\ndef is_leap_year(n):\n    '''\n    Write a python function to check if the given year is a leap year.\n    '''\n    if n%4==0:\n        if n%100==0:\n            if n%400==0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef days_in_year(n):\n    '''\n    Write a python function to get the number of days in a year.\n    '''\n    if n%4==0:\n        if n%100==0:\n            if n%400==0:\n                return 366\n            else:\n                return 365\n        else:\n            return 366\n    else:\n        return 365\ndef get_time_of_day(time):\n    '''\n    Write a python function to convert the time of day to its corresponding time of day name.\n    '''\n    time_of_day = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']\n    return time_of_day[time]\ndef get_time_of_day_in_words(time):\n    '''\n    Write a python function to convert the time of day to its corresponding time of day name.\n    '''\n    time_of_day = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']\n    time_of_day_in_words = ['one','two','three','four','five','six','seven']\n    return time_of_day_in_words[time]\ndef square_root(n):\n    '''\n    Write a python function to get the square root of n.\n    '''\n    if n<=0:\n        return 0\n    if n==1:\n        return 1\n    return math.sqrt(n)\ndef reverse_string(s):\n    '''\n    Write a python function t"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==2:\n        return False\n    if n%2==0:\n        return True\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return True\n    return False\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\ndef primes_in_range(lower, upper):\n    '''\n    Write a python function to find all the prime numbers between lower and upper\n    '''\n    primes = []\n    for i in range(lower,upper+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\ndef primes_in_range2(lower, upper):\n    '''\n    Write a python function to find all the prime numbers between lower and upper\n    '''\n    primes = []\n    for i in range(lower,upper+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\ndef primes_in_range3(lower, upper):\n    '''\n    Write a python function to find all the prime numbers between lower and upper\n    '''\n    primes = []\n    for i in range(lower,upper+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\ndef primes_in_range4(lower, upper):\n    '''\n    Write a python function to find all the prime numbers between lower and upper\n    '''\n    primes = []\n    for i in range(lower,upper+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\ndef primes_in_range5(lower, upper):\n    '''\n    Write a python function to find all the prime numbers between lower and upper\n    '''\n    primes = []\n    for i in range(lower,upper+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\ndef primes_in_range6(lower, upper):\n    '''\n    Write a python function to find all the prime numbers between lower and upper\n    '''\n    primes = []\n    for i in range(lower,upper+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\ndef primes_in_range7(lower, upper):\n    '''\n    Write a python function to find all the prime numbers between lower and upper\n    '''\n    primes = []\n    for i in range(lower,upper+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\ndef primes_in_range8(lower, upper):\n    '''\n    Write a python function to find all the prime numbers between lower and upper\n    '''\n    primes = []\n    for i in range(lower,upper+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\ndef primes_in_range9(lower, upper):\n    '''\n    Write a python function to find all the prime numbers between lower and upper\n    '''\n    primes = []\n    for i in range(lower,upper+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\ndef primes_in_range10(lower, upper):\n    '''\n    Write a python function to find all the prime numbers between lower and upper\n    '''\n    primes = []\n    for i in range(lower,upper+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\ndef primes_in_range11(lower, upper):\n    '''\n    Write a python function to find all the prime numbers between lower and upper\n    '''\n    primes = []\n    for i in range(lower,upper+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\ndef primes_in_range12(lower, upper):\n    '''\n    Write a python function to find all the prime numbers between lower and upper\n    '''\n    primes = []\n    for i in range(lower,upper+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\ndef primes_in_range13(lower, upper):\n    '''\n    Write a python function to find all the prime numbers between lower and upper\n    '''\n    primes = []\n    for i in range(lower,upper+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\ndef primes_in_range14(lower, upper):\n    '''\n    Write a python function to find all the prime numbers between lower and upper\n    '''\n    primes = []\n    for i in range(lower,upper+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\ndef primes_in_range15(lower, upper):\n    '''\n    Write a python function to find all the prime numbers between lower and upper\n    '''\n    primes = []\n    for i in range(lower,upper+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\ndef primes_in_range16(lower, upper):\n    '''\n    Write a python function to find all the prime numbers between lower and upper\n    '''\n    primes = []\n    for i in range(lower,upper+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\ndef primes_in_range17(lower, upper):\n    '''\n    Write a python function to find all the prime numbers between lower and upper\n    '''\n    primes = []\n    for i in range(lower,upper+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\ndef primes_in_range18(lower, upper):\n    '''\n    Write a python function to find all the prime numbers between lower and upper\n    '''\n    primes = []\n    for i in range(lower,upper+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\ndef primes_in_range19(lower, upper):\n    '''\n    Write a python function to find all the prime numbers between lower and upper\n    '''\n    primes = []\n    for i in range(lower,upper+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\ndef primes_in_range20(lower, upper):\n    '''\n    Write a python function to find all the prime numbers between lower and upper\n    '''\n    primes = []\n    for i in range(lower,upper+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\ndef primes_in_range21(lower, upper):\n    '''\n    Write a python function to find all the prime numbers between lower and upper\n    '''\n    primes = []\n    for i in range(lower,upper+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\ndef primes_in_range22(lower, upper):\n    '''\n    Write a python function to find all the prime numbers between lower and upper\n    '''\n    primes = []\n    for i in range(lower,upper+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\ndef primes_in_range23(lower, upper):\n    '''\n    Write a python function to find all the prime numbers between lower and upper\n    '''\n    primes = []\n    for i in range(lower,upper+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\ndef primes_in_range24(lower, upper):\n    '''\n    Writ"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n%2 == 0:\n        return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n > 1:\n        if n == 2:\n            return False\n        if n % 2 == 0:\n            return True\n        for i in xrange(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return True\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    q = []\n    for i in nums:\n        hq.heappush(q,-1*i)\n    res = []\n    for i in range(n):\n        res.append(-1*hq.heappop(q))\n    return res\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums) == 0:\n        return\n    sorted_nums = sorted(nums,reverse = True)\n    return sorted_nums[n-1]\ndef min_heap(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if len(nums) == 0:\n        return\n    sorted_nums = sorted(nums)\n    return sorted_nums[n-1]\ndef max_heap(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in ascending order.\n    '''\n    if len(nums) == 0:\n        return\n    sorted_nums = sorted(nums)\n    return sorted_nums[len(nums)-n]\ndef most_common(nums):\n    '''\n    Write a function to find the most common integer in a list of numbers\n    '''\n    nums = sorted(nums)\n    return nums[len(nums)-1]\ndef unique(nums):\n    '''\n    Write a function to check whether a list contains unique values.\n    '''\n    if len(nums) == 0:\n        return\n    return len(nums) == len(set(nums))\ndef merge(nums1,nums2):\n    '''\n    Write a function to merge two sorted arrays into a new array.\n    '''\n    if len(nums1) == 0:\n        return nums2\n    if len(nums2) == 0:\n        return nums1\n    i1 = 0\n    i2 = 0\n    merged = []\n    while i1 < len(nums1) or i2 < len(nums2):\n        if i1 >= len(nums1):\n            merged.append(nums2[i2])\n            i2 += 1\n        elif i2 >= len(nums2):\n            merged.append(nums1[i1])\n            i1 += 1\n        elif nums1[i1] <= nums2[i2]:\n            merged.append(nums1[i1])\n            i1 += 1\n        else:\n            merged.append(nums2[i2])\n            i2 += 1\n    return merged\ndef find_pivot(nums,start,end):\n    '''\n    Write a function to find the pivot index in an array.\n    '''\n    mid = (start + end)/2\n    if nums[start] < nums[mid] and nums[mid] < nums[end]:\n        return mid\n    if nums[start] > nums[mid] and nums[mid] > nums[end]:\n        return mid\n    if nums[mid] > nums[start]:\n        return find_pivot(nums,start,mid-1)\n    else:\n        return find_pivot(nums,mid+1,end)\ndef sort_pivot(nums,start,end):\n    '''\n    Write a function to sort an array using a pivot\n    '''\n    pivot = find_pivot(nums,start,end)\n    nums[pivot],nums[end] = nums[end],nums[pivot]\n    pivot = end\n    i = start\n    for j in range(start,pivot):\n        if nums[j] > nums[pivot]:\n            nums[j],nums[pivot] = nums[pivot],nums[j]\n            i += 1\n    nums[pivot],nums[end] = nums[end],nums[pivot]\n    return i\ndef quick_sort(nums,start,end):\n    '''\n    Write a function to do quick sort\n    '''\n    if start >= end:\n        return\n    pivot = sort_pivot(nums,start,end)\n    quick_sort(nums,start,pivot-1)\n    quick_sort(nums,pivot+1,end)\ndef quick_sort_with_index(nums,start,end):\n    '''\n    Write a function to do quick sort with index\n    '''\n    if start >= end:\n        return\n    pivot = sort_pivot(nums,start,end)\n    quick_sort_with_index(nums,start,pivot-1)\n    quick_sort_with_index(nums,pivot+1,end)\ndef get_median(nums):\n    '''\n    Write a function to get the median from a given list of numbers\n    '''\n    if len(nums) == 0:\n        return\n    if len(nums) % 2 == 1:\n        return nums[len(nums)/2]\n    else:\n        return (nums[len(nums)/2] + nums[len(nums)/2 - 1])/2.0\ndef get_kth_element(nums,k):\n    '''\n    Write a function to get the kth element from a given list of numbers\n    '''\n    if len(nums) == 0:\n        return\n    if k > len(nums):\n        return\n    pivot = sort_pivot(nums,0,len(nums)-1)\n    if pivot == k-1:\n        return nums[k-1]\n    elif pivot > k-1:\n        return get_kth_element(nums[:pivot],k)\n    else:\n        return get_kth_element(nums[pivot+1:],k-1-pivot)\ndef length_of_longest_substring(s):\n    '''\n    Write a function to find the length of the longest substring without repeating characters\n    '''\n    if len(s) == 0:\n        return\n    curr = s[0]\n    left = 0\n    right = 0\n    result = 1\n    while left < len(s):\n        right = left\n        while right < len(s) and s[right] not in curr:\n            curr += s[right]\n            result = max(result,right-left+1)\n            right += 1\n        left += 1\n    return result\ndef remove_duplicates(nums):\n    '''\n    Write a function to remove duplicates from a given list of numbers\n    '''\n    if len(nums) == 0:\n        return\n    for i in range(len(nums)-1,0,-1):\n        if nums[i] == nums[i-1]:\n            del nums[i]\n    return nums\ndef remove_duplicates_2(nums):\n    '''\n    Write a function to remove duplicates from a given list of numbers\n    '''\n    if len(nums) == 0:\n        return\n    last_element = None\n    for num in nums:\n        if last_element == None:\n            last_element = num\n            continue\n        if num == last_element:\n            continue\n        else:\n            last_element = num\n    return last_element\ndef remove_duplicates_3(nums):\n    '''\n    Write a function to remove duplicates from a given list of numbers\n    '''\n    if len(nums) == 0:\n        return\n    i = 0\n    while i < len(nums):\n        if nums[i] in nums[i+1:]:\n            nums.remove(nums[i])\n        else:\n            i += 1\n    return nums\ndef find_rotation_point(nums):\n    '''\n    Write a function to find the point in a rotated sorted array where the same as that in the sorted array\n    '''\n    if len(nums) == 0:\n        return\n    left = 0\n    right = len(nums)-1\n    while left <= right:\n        mid = (left+right)/2\n        if nums[mid] > nums[0]:\n            if nums[mid] > nums[0] and nums[mid] <= nums[right]:\n                return mid\n            right = mid - 1\n        else:\n            if nums[mid] < nums[0] and nums[mid] >= nums[left]:"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq=[]\n    for i in nums:\n        hq.append(i)\n    hq=sorted(hq)\n    hq=hq[::-1]\n    return hq[0:n]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq=[]\n    for i in range(n):\n        hq.append(-nums[i])\n    hq=sorted(hq)\n    for i in range(n):\n        hq[i]=hq[i]*(-1)\n    return hq\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq=[]\n    for i in range(n):\n        hq.append(nums[i])\n    hq=sorted(hq)\n    for i in range(n):\n        hq[i]=hq[i]*(-1)\n    return hq\ndef heap_queue(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq=[]\n    for i in range(n):\n        hq.append(nums[i])\n    hq=sorted(hq)\n    for i in range(n):\n        hq[i]=hq[i]*(-1)\n    return hq\ndef heap_queue_smallest_element(nums):\n    '''\n    Write a function to find the smallest element from a given list of numbers, returning the index of the smallest element.\n    '''\n    return heap_queue_smallest(nums,1)[0]\ndef heap_queue_largest_element(nums):\n    '''\n    Write a function to find the largest element from a given list of numbers, returning the index of the largest element.\n    '''\n    return heap_queue_largest(nums,1)[0]\ndef heap_queue_kth_largest_element(nums,k):\n    '''\n    Write a function to find the kth largest element from a given list of numbers, returning the index of the kth largest element.\n    '''\n    hq=[]\n    for i in range(k):\n        hq.append(nums[i])\n    hq=sorted(hq)\n    for i in range(k):\n        hq[i]=hq[i]*(-1)\n    return hq[0]\ndef heap_queue_kth_smallest_element(nums,k):\n    '''\n    Write a function to find the kth smallest element from a given list of numbers, returning the index of the kth smallest element.\n    '''\n    hq=[]\n    for i in range(k):\n        hq.append(nums[i])\n    hq=sorted(hq)\n    for i in range(k):\n        hq[i]=hq[i]*(-1)\n    return hq[-1]\ndef heap_queue_kth_smallest(nums,k):\n    '''\n    Write a function to find the kth smallest element from a given list of numbers, returning the index of the kth smallest element.\n    '''\n    hq=[]\n    for i in range(k):\n        hq.append(nums[i])\n    hq=sorted(hq)\n    for i in range(k):\n        hq[i]=hq[i]*(-1)\n    return hq[-1]\ndef heap_queue_kth_largest(nums,k):\n    '''\n    Write a function to find the kth largest element from a given list of numbers, returning the index of the kth largest element.\n    '''\n    hq=[]\n    for i in range(k):\n        hq.append(nums[i])\n    hq=sorted(hq)\n    for i in range(k):\n        hq[i]=hq[i]*(-1)\n    return hq[0]\ndef heap_queue_add_element(nums,i):\n    '''\n    Write a function to add a new element to a given list of numbers, returning the new list of numbers.\n    '''\n    nums[i]=0\n    i+=1\n    while i>0:\n        parent=i//2\n        if nums[i]>nums[parent]:\n            nums[parent],nums[i]=nums[i],nums[parent]\n            i=parent\n        else:\n            break\n    return nums\ndef heap_queue_maximum(nums):\n    '''\n    Write a function to return the maximum element from a given list of numbers.\n    '''\n    return nums[-1]\ndef heap_queue_minimum(nums):\n    '''\n    Write a function to return the minimum element from a given list of numbers.\n    '''\n    return nums[0]\ndef heap_queue_remove_element(nums,i):\n    '''\n    Write a function to remove an element from a given list of numbers, returning the new list of numbers.\n    '''\n    nums[i]=0\n    i-=1\n    while i>0:\n        parent=i//2\n        if nums[i]<nums[parent]:\n            nums[parent],nums[i]=nums[i],nums[parent]\n            i=parent\n        else:\n            break\n    return nums\ndef heap_queue_pop_element(nums):\n    '''\n    Write a function to remove the maximum element from a given list of numbers.\n    '''\n    return heap_queue_remove_element(nums,-1)\ndef heap_queue_pop_element_index(nums):\n    '''\n    Write a function to remove the maximum element from a given list of numbers.\n    '''\n    i=len(nums)-1\n    return heap_queue_remove_element(nums,i)\ndef heap_queue_insert_element(nums,i):\n    '''\n    Write a function to insert an element in a given list of numbers.\n    '''\n    nums[i]=0\n    i+=1\n    while i>0:\n        parent=i//2\n        if nums[i]>nums[parent]:\n            nums[parent],nums[i]=nums[i],nums[parent]\n            i=parent\n        else:\n            break\n    return nums\ndef heap_queue_insert_element_index(nums,i):\n    '''\n    Write a function to insert an element in a given list of numbers.\n    '''\n    nums[i]=0\n    i+=1\n    while i>0:\n        parent=i//2\n        if nums[i]>nums[parent]:\n            nums[parent],nums[i]=nums[i],nums[parent]\n            i=parent\n        else:\n            break\n    return nums\ndef heap_queue_sift_up(nums,i):\n    '''\n    Write a function to sift an element up in a given list of numbers.\n    '''\n    parent=i//2\n    if i==0:\n        return\n    elif nums[parent]<nums[i]:\n        nums[parent],nums[i]=nums[i],nums[parent]\n        i=parent\n        heap_queue_sift_up(nums,i)\n    else:\n        return\ndef heap_queue_sift_down(nums,i):\n    '''\n    Write a function to sift an element down in a given list of numbers.\n    '''\n    left=2*i\n    right=2*i+1\n    min_element=i\n    if left<len(nums) and nums[left]<nums[min_element]:\n        min_element=left\n    if right<len(nums) and nums[right]<nums[min_element]:\n        min_element=right\n    if min_element!=i:\n        nums[i],nums[min_element]=nums[min_element],nums[i]\n        heap_queue_sift_down(nums,min_element)\ndef heap_queue_extract_max(nums):\n    '''\n    Write a function to extract the maximum element from a given list of numbers.\n    '''\n    nums[0],nums[-1]=nums[-1],nums[0]\n    num"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    for i in range(n):\n        hq.heappush(heap,-1*nums[i])\n    for i in range(n,len(nums)):\n        hq.heappushpop(heap,-1*nums[i])\n    return [-1*i for i in heap]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums:\n        return []\n    hq=[]\n    for i in range(len(nums)):\n        hq.append((nums[i],i))\n    hq.sort(reverse=True)\n    return [nums[i] for i in range(len(nums)-n,len(nums))]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums) == 0:\n        return\n    hq = []\n    for i in nums:\n        hq.append((i,nums.index(i)))\n    hq = sorted(hq,key = lambda x: -x[0])\n    return [x[0] for x in hq][:n]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # if len(nums)<n:\n    #     return []\n    # heapq.heapify(nums)\n    # return [heapq.heappop(nums) for i in range(n)]\n    return hq.nlargest(n,nums)\n    # max_heap = []\n    # #for num in nums:\n    # #    if len(max_heap)==n:\n    # #        hq.heappushpop(max_heap,num)\n    # #    else:\n    # #        hq.heappush(max_heap,num)\n    # return hq.nlargest(n,max_heap)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n>len(nums):\n        return None\n    h=[]\n    for i in range(n):\n        hq.heappush(h,(nums[i],i))\n    \n    for i in range(n,len(nums)):\n        if nums[i]>h[0][0]:\n            hq.heappop(h)\n            hq.heappush(h,(nums[i],i))\n    res=[]\n    for i in range(n):\n        res.append(h[i][0])\n    return res\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if n>len(nums):\n        return None\n    h=[]\n    for i in range(n):\n        hq.heappush(h,(nums[i],i))\n    \n    for i in range(n,len(nums)):\n        if nums[i]<h[0][0]:\n            hq.heappop(h)\n            hq.heappush(h,(nums[i],i))\n    res=[]\n    for i in range(n):\n        res.append(h[i][0])\n    return res\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in range(n):\n        hq.heappush(h, -nums[i])\n    return -hq.heappop(h)\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    h = []\n    for i in range(n):\n        hq.heappush(h, nums[i])\n    return hq.heappop(h)\n    \ndef heap_merge(nums1, nums2, n):\n    '''\n    Write a function to merge two sorted lists into one, merge two sorted lists into one, given two lists, one sorted, one not sorted.\n    '''\n    h1 = nums1[0:n]\n    h2 = nums2[0:n]\n    h1.extend(h2)\n    h1.sort()\n    return h1\ndef find_left_bound(A, target):\n    '''\n    Write a function to find the index of the leftmost element that is smaller than the given target value.\n    '''\n    l = 0\n    r = len(A) - 1\n    while l <= r:\n        mid = (l + r) / 2\n        if A[mid] == target:\n            if mid - 1 < 0 or A[mid - 1] < target:\n                return mid\n            else:\n                r = mid - 1\n        elif A[mid] < target:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return l\ndef find_right_bound(A, target):\n    '''\n    Write a function to find the index of the rightmost element that is greater than the given target value.\n    '''\n    l = 0\n    r = len(A) - 1\n    while l <= r:\n        mid = (l + r) / 2\n        if A[mid] == target:\n            if mid + 1 >= len(A) or A[mid + 1] > target:\n                return mid\n            else:\n                l = mid + 1\n        elif A[mid] > target:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return l\ndef find_maximum_index(nums):\n    '''\n    Write a function to find the maximum number of consecutive 1s in a binary array.\n    '''\n    max_1 = 0\n    n = len(nums)\n    l = 0\n    r = 0\n    for i in range(n):\n        if nums[i] == 1:\n            r += 1\n        else:\n            if r > max_1:\n                max_1 = r\n                l = i\n            r = 0\n    if r > max_1:\n        max_1 = r\n        l = i\n    return l,max_1\ndef find_maximum_in_rotated_array(nums):\n    '''\n    Write a function to find the maximum number in a rotated sorted array.\n    '''\n    n = len(nums)\n    if n == 0:\n        return None\n    elif n == 1:\n        return nums[0]\n    else:\n        pivot = nums[n - 1]\n        l = 0\n        r = n - 2\n        while l <= r:\n            mid = (l + r) / 2\n            if nums[mid] > pivot and nums[mid + 1] < pivot:\n                return nums[mid + 1]\n            elif nums[mid] < pivot:\n                l = mid + 1\n            else:\n                r = mid - 1\n        return l\ndef find_minimum_in_rotated_array(nums):\n    '''\n    Write a function to find the minimum number in a rotated sorted array.\n    '''\n    n = len(nums)\n    if n == 0:\n        return None\n    elif n == 1:\n        return nums[0]\n    else:\n        pivot = nums[n - 1]\n        l = 0\n        r = n - 2\n        while l <= r:\n            mid = (l + r) / 2\n            if nums[mid] > pivot and nums[mid + 1] > pivot:\n                return nums[mid]\n            elif nums[mid] > pivot:\n                r = mid - 1\n            else:\n                l = mid + 1\n        return l\ndef find_rotated_array(nums):\n    '''\n    Write a function to find a given target in a sorted array, with duplicates.\n    '''\n    n = len(nums)\n    if n == 0:\n        return None\n    elif n == 1:\n        return nums[0]\n    else:\n        pivot = nums[n - 1]\n        l = 0\n        r = n - 2\n        while l <= r:\n            mid = (l + r) / 2\n            if nums[mid] > pivot and nums[mid + 1] < pivot:\n                return nums[mid + 1]\n            elif nums[mid] > pivot:\n                r = mid - 1\n            else:\n                l = mid + 1\n        return l\ndef find_kth_element(nums, l, r, k):\n    '''\n    Write a function to find the kth smallest element in an unsorted array.\n    '''\n    if l >= r:\n        return nums[l]\n    pivot = nums[r]\n    i = l - 1\n    for j in range(l, r):\n        if nums[j] <= pivot:\n            i += 1\n            nums[i], nums[j] = nums[j], nums[i]\n    nums[i + 1], nums[r] = nums[r], nums[i + 1]\n    if i + 1 + k - 1 < len(nums) and nums[i + 1 + k - 1] < pivot:\n        return find_kth_element(nums, i + 1, r, k)\n    elif i + 1 + k - 1 >= len(nums) or nums[i + 1 + k - 1] >= pivot:\n        return find_kth_element(nums, l, i, k - (i - l + 1))\n    else:\n        return nums[i + 1 + k - 1]\ndef find_kth_element_2(nums, l, r, k):\n    '''\n    Write a function to find the kth smallest element in an unsorted array.\n    '''\n    if l >= r:\n        return nums[l]\n    pivot = nums[r]\n    i = l - 1\n    for j in range(l, r):\n        if nums[j] <= pivot:\n            i += 1\n            nums[i], nums[j] = nums[j], nums[i]\n    nums[i + 1], nums[r] = nums[r], nums[i + 1]\n    if i + 1 + k - 1 < len(nums) and nums[i + 1 + k - 1] < pivot:\n        return find_kth_element_2(nums, i + 1, r, k)\n    elif i + 1 + k - 1 >= len(nums) or nums[i + 1 + k - 1] >= pivot:\n        return find_kth_element_2(nums, l, i, k - (i - l + 1))\n    else:\n        return nums[i + 1 + k - 1]\ndef find_minimum_subarray(nums, s):\n    '''\n    Write a function to find the minimum size subarray within a given array which has to be sorted in non-decreasing order.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return 1\n    pivot = nums[0]\n    l = 0\n    r = 0\n    while l < len(nums) and r < len(nums):\n        if nums[r] > pivot:\n            return r - l\n        else:\n            if r < len(nums) - 1 and nums[r + 1] >= pivot:\n                r += 1\n            else:\n                r += 1"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x - 1) == 0)\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return 1\n    elif x == 1:\n        return 0\n    else:\n        return (is_Power_Of_Two(x/2) - (x%2))\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x-1) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x&(x-1))==0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    while (x!= 1):\n        if x % 2 == 1:\n            return False\n        x = x / 2\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x&(x-1) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return ((x&(x-1))==0);\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x - 1) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1) == 0)\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall('\\w{4,}',text)\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    string = text.split(' ')\n    result = []\n    for word in string:\n        if len(word)>=4:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.split('\\W+', text)\n    return [word for word in words if len(word) >= 4]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    string = text.split()\n    ans = []\n    for i in string:\n        if len(i) >= 4:\n            ans.append(i)\n    return ans\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    #words = re.findall(r'\\w{4,}', text)\n    #return words\n    return re.findall('\\w{4,}',text)\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b',text)\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall('\\w{4,}', text)\n    for word in words:\n        print(word)\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b',text)\n    #return re.findall(r'[\\w]+',text)\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b',text)\ndef find_word(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find_words(text):\n    return re.findall(r'\\b\\w+\\b',text)\ndef find"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'[a-zA-Z][a-zA-Z0-9]{3,}', text)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = [n**2 for n in nums]\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = [x**2 for x in nums]\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    def is_palindrome(string):\n        # return true if the string is a palindrome else false\n        return string == string[::-1]\n    \n    def is_rotated(string1, string2):\n        # return true if string1 is a rotated version of string2 else false\n        for i in range(1,len(string1)):\n            if string1[:i] == string2[-i:]:\n                return True\n        return False\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    size = len(str) \n    if size == 1: \n        return 0\n    if size == 2: \n        if str[0]!= str[1]: \n            return 1\n        else: \n            return 0\n    rotations = 0\n    if str[0]!= str[size-1]: \n        rotations += 1\n    for i in range(1,size-1): \n        if str[i]!= str[0]: \n            rotations += 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_len = len(str)\n    rotation_count = 0\n    for i in xrange(1, str_len):\n        if str[i:] == str[:str_len-i]:\n            rotation_count += 1\n    return rotation_count\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n=len(str)\n    if(n==1):\n        return 0\n    for i in range(n-1):\n        if(str[i:i+n]==str[i+1:i:-1]):\n            return i\n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    #Base case - there is no need to rotate\n    if len(str)==1:\n        return 0\n    \n    #Check if the first and the last chars are same\n    if str[0]==str[-1]:\n        return 0\n    \n    #Store the index of last char\n    last=len(str)-1\n    \n    #Check if there is any rotation\n    #If last-1 is greater than 0, last-1 has no rotations\n    if last-1>=0 and str[last-1]>str[0]:\n        return 0\n    \n    #Get the index of the rotation\n    first=last-1\n    \n    while first!=0:\n        if str[first]>str[first-1]:\n            break\n        first=first-1\n    \n    return 1+find_Rotations(str[first:])\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if not str:\n        return 0\n    if len(str) == 1:\n        return 0\n    if len(str) == 2:\n        if str[0] == str[1]:\n            return 0\n        else:\n            return 1\n    if str[0] == str[-1]:\n        return find_Rotations(str[1:len(str)-1])\n    else:\n        return min(find_Rotations(str[1:len(str)]), find_Rotations(str[0:len(str)-1])) + 1\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str2 = str\n    for i in range(len(str)):\n        str2 = str2 + str2[-1:]\n        if str2 == str:\n            break\n    return len(str) - len(str2)\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    m = len(str)\n    s = str\n    for i in range(n-1,0,-1):\n        t = s[i:]+s[:i]\n        if t == s:\n            m = i\n            break\n    return m\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # first make a copy of the string\n    str = str\n    str_len = len(str)\n    rotation_count = 0\n    # loop through the string, at each index, compare the substring to the right and left of the index\n    for i in range(1,str_len):\n        # check if the substring is equal to the left and right substrings\n        if str[i:] == str[i-1:str_len-i] and str[:i] == str[i-1:str_len-i]:\n            rotation_count += 1\n    return rotation_count\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    #lenght of string\n    size = len(str)\n    \n    #find the rotations\n    rotations = 0\n    for i in xrange(size):\n        substring = str[i:size]\n        if substring == str[size-1:size-i:-1]:\n            rotations += 1\n    print rotations\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) == 1:\n        return s[s.find(ch)+1:s.rfind(ch)]\n    else:\n        return s[s.find(ch)+1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    \n    return s.replace(ch,'')\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    string=s\n    output=''\n    if ch in string:\n        output=string.replace(ch,'')\n        output=output.replace(ch[::-1],'')\n    else:\n        output='Not present'\n    return output\n    \n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s: \n        return s\n    i = s.find(ch) \n    j = s.rfind(ch)\n    return s[:i] + s[j+1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '').replace(ch, '')\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s[:s.find(ch)+1]+s[s.rfind(ch)+1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,\"\").replace(ch,\"\")\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'',1).replace(ch,'',1)\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch)>=1:\n        s=s.replace(ch,'',1)\n        s=s.replace(ch,'',1)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    new = \"\"\n    l = list(s)\n    l.remove(ch)\n    for i in l:\n        new+=i\n    return new\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows, cols = len(M), len(M[0])\n    for j in xrange(cols):\n        minj = j\n        for i in xrange(j+1,rows):\n            if sum(M[i]) < sum(M[minj]):\n                minj = i\n        if minj!= j:\n            temp = M[j]\n            M[j] = M[minj]\n            M[minj] = temp\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    m, n = len(M), len(M[0])\n    # [0][1] + [1][2] + [2][3]\n    for i in range(m):\n        min_row = M[i].index(min(M[i]))\n        M[i][:min_row], M[i][min_row:] = M[i][:min_row], M[i][min_row:]\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for row in xrange(len(M)):\n        M[row].sort()\n    return sorted(M, key = sum)\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    N = len(M)\n    for row in range(N):\n        col = 0\n        for i in range(N):\n            if M[row][col] > M[row][i]:\n                M[row][col], M[row][i] = M[row][i], M[row][col]\n                col += 1\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    def sum_row(row):\n        return sum(row)\n    def sort_fn(a,b):\n        if sum_row(a) > sum_row(b):\n            return 1\n        elif sum_row(a) < sum_row(b):\n            return -1\n        return 0\n    M.sort(key=cmp_to_key(sort_fn))\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    m, n = len(M), len(M[0])\n    for i in range(m):\n        total = sum(M[i])\n        min_idx = i\n        for j in range(i, m):\n            if total > sum(M[j]):\n                total = sum(M[j])\n                min_idx = j\n        M[i], M[min_idx] = M[min_idx], M[i]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    N = len(M)\n    for i in range(N):\n        for j in range(N-1):\n            if M[j][i] > M[j+1][i]:\n                M[j], M[j+1] = M[j+1], M[j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sums = [sum(row) for row in M]\n    return [i for _,i in sorted(zip(row_sums,range(len(row_sums))))]\n    \ndef zero_matrix(M):\n    '''\n    Write a function that takes a matrix (list of lists) as input and returns a new matrix with\n    all zeros on the diagonal and all other elements set to the original value.\n    '''\n    new_matrix = [[0]*len(M) for _ in range(len(M))]\n    for i,row in enumerate(M):\n        for j,item in enumerate(row):\n            if i == j:\n                new_matrix[i][j] = 0\n            else:\n                new_matrix[i][j] = item\n    return new_matrix\n    \ndef zero_matrix_matrix(M1, M2):\n    '''\n    Write a function that takes two matrices as input and returns a new matrix with zeros for\n    all elements where the matrices have different values.\n    '''\n    new_matrix = [[0]*len(M1) for _ in range(len(M1))]\n    for i,row in enumerate(M1):\n        for j,item in enumerate(row):\n            if M2[i][j]!= item:\n                new_matrix[i][j] = 0\n    return new_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sort_row_sum = []\n    for row in M:\n        sort_row_sum.append(sum(row))\n    \n    sort_row_sum_set = set(sort_row_sum)\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key = lambda x: sum(x))\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l=float(l);b=float(b);h=float(h);\n    V = (l*b*h)/6\n    print \"Volume of the triangular prism is : \",V\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/6)*(l*b*h)\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/3\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (b*h)/3\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return ((b*h)/2)+(l*h)\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l = float(l)\n    b = float(b)\n    h = float(h)\n    V = l*b*h/6\n    return V\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/3\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h/6\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/6\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = (1/6)*l*b*h\n    return Volume\n    \nprint find_Volume(5,6,7)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(\"[a-z]+_[a-z]+\", text))\n    \n    \ndef text_lowercase_underscore_v1(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    for i in range(len(text)-2):\n        if text[i]==text[i+1]==text[i+2] and text[i]!='_':\n            return True\n    return False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[a-z]+_[a-z]+',text) is not None\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #Check if the string is a sequence of lowercase letters\n    regex = re.compile('^[a-z]+_[a-z]+$')\n    match = regex.search(text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[a-z]_[a-z]', text) is not None\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[a-z]+_[a-z]+',text))\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[a-z]+_[a-z]+',text) is not None\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('[a-z]+_[a-z]+', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(\"[a-z]+_[a-z]+\",text) is not None\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[a-z]+_[a-z]+', text)\ndef text_splitter(text):\n    '''\n    Write a function that splits a string into a list of words based on spaces.\n    '''\n    return re.split(' ', text)\ndef text_splitter_strip(text):\n    '''\n    Write a function that splits a string into a list of words based on spaces, and removes the leading and trailing whitespace.\n    '''\n    return re.split(' ', text.strip())\ndef text_splitter_strip_length(text):\n    '''\n    Write a function that splits a string into a list of words based on spaces, and removes the leading and trailing whitespace, and returns the word length of each word.\n    '''\n    return [len(word) for word in re.split(' ', text.strip())]\ndef text_splitter_strip_length_no_split(text):\n    '''\n    Write a function that splits a string into a list of words based on spaces, and returns the length of each word.\n    '''\n    return len(text.strip())\ndef text_splitter_strip_length_no_split_and_split(text):\n    '''\n    Write a function that splits a string into a list of words based on spaces, and returns the word length of each word.\n    '''\n    return re.split(' ', text.strip())\ndef text_splitter_strip_length_no_split_and_strip(text):\n    '''\n    Write a function that splits a string into a list of words based on spaces, and returns the length of each word.\n    '''\n    return len(text.strip())\ndef text_splitter_strip_length_no_split_and_strip_length(text):\n    '''\n    Write a function that splits a string into a list of words based on spaces, and returns the word length of each word.\n    '''\n    return [len(word) for word in text.strip().split(' ')]\ndef text_splitter_strip_length_no_split_and_strip_length_no_split(text):\n    '''\n    Write a function that splits a string into a list of words based on spaces, and returns the word length of each word.\n    '''\n    return len(text.strip())\ndef text_splitter_strip_length_no_split_and_strip_length_no_split_no_strip(text):\n    '''\n    Write a function that splits a string into a list of words based on spaces, and returns the word length of each word.\n    '''\n    return [len(word) for word in text.strip().split(' ')]\ndef text_splitter_strip_length_no_split_and_strip_length_no_split_no_strip_no_split(text):\n    '''\n    Write a function that splits a string into a list of words based on spaces, and returns the word length of each word.\n    '''\n    return len(text.strip())\ndef text_splitter_strip_length_no_split_and_strip_length_no_split_no_strip_no_split_no_split(text):\n    '''\n    Write a function that splits a string into a list of words based on spaces, and returns the word length of each word.\n    '''\n    return [len(word) for word in text.strip().split(' ')]\ndef text_splitter_strip_length_no_split_and_strip_length_no_split_no_strip_no_split_no_split_no_split_no_split(text):\n    '''\n    Write a function that splits a string into a list of words based on spaces, and returns the word length of each word.\n    '''\n    return len(text.strip())\ndef text_splitter_strip_length_no_split_and_strip_length_no_split_no_strip_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split(text):\n    '''\n    Write a function that splits a string into a list of words based on spaces, and returns the word length of each word.\n    '''\n    return [len(word) for word in text.strip().split(' ')]\ndef text_splitter_strip_length_no_split_and_strip_length_no_split_no_strip_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split(text):\n    '''\n    Write a function that splits a string into a list of words based on spaces, and returns the word length of each word.\n    '''\n    return len(text.strip())\ndef text_splitter_strip_length_no_split_and_strip_length_no_split_no_strip_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split(text):\n    '''\n    Write a function that splits a string into a list of words based on spaces, and returns the word length of each word.\n    '''\n    return [len(word) for word in text.strip().split(' ')]\ndef text_splitter_strip_length_no_split_and_strip_length_no_split_no_strip_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split(text):\n    '''\n    Write a function that splits a string into a list of words based on spaces, and returns the word length of each word.\n    '''\n    return len(text.strip())\ndef text_splitter_strip_length_no_split_and_strip_length_no_split_no_strip_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no_split_no"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    for i in range(0,len(string)):\n        list1.append(ord(string[i]))\n    return list1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = list(string) \n    list2 = [x for x in string] \n    # print list2\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\n    #return ''.join(list1)\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = string[:-1]\n    str2 = string[-1]\n    str1_list = []\n    str2_list = []\n    for i in range(0, len(str1)):\n        if str1[i] not in str2_list:\n            str1_list.append(str1[i])\n    for i in range(0, len(str2)):\n        if str2[i] not in str1_list:\n            str2_list.append(str2[i])\n    str1_list.extend(str2_list)\n    return str1_list\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_1 = []\n    list_2 = []\n    for i in string:\n        list_1.append(i)\n    for j in list_1:\n        if j not in list_2:\n            list_2.append(j)\n    return list_2\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for i in range(len(string)):\n        list1.append(string[i])\n    for i in range(len(string)):\n        list2.append(string[i])\n    for i in range(len(list1)):\n        if list2.count(list1[i]) == 0:\n            list1[i] = '_'\n    string = \"\".join(list1)\n    print string\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_chars = []\n    for i in range(len(string)):\n        list_of_chars.append(string[i])\n    for j in range(len(list_of_chars)):\n        if list_of_chars[j] in string2:\n            list_of_chars[j] = ''\n    return list_of_chars\n    \ndef list_to_str(list_of_chars):\n    '''\n    Write a function to reverse the order of a string.\n    '''\n    string = \"\"\n    for char in list_of_chars:\n        string += char\n    return string\n    \ndef get_minimum_count_of_chars_to_form_string(string1, string2):\n    '''\n    Write a function to find the minimum count of characters to form a string.\n    '''\n    total_chars = 0\n    for char in string1:\n        total_chars += get_count(char)\n    new_list = str_to_list(string1)\n    for char in string2:\n        if char in new_list:\n            new_list[new_list.index(char)] = ''\n            total_chars += get_count(char)\n    return total_chars\n    \ndef get_count(char):\n    '''\n    Write a function to get the count of a character.\n    '''\n    return ord(char) - 97\n    \ndef get_minimum_count_of_delete_and_insert_chars(string1, string2):\n    '''\n    Write a function to find the minimum count of characters to delete and insert to get the two strings equal.\n    '''\n    new_list = str_to_list(string2)\n    new_string = list_to_str(new_list)\n    total_chars = 0\n    if new_string == string1:\n        return 0\n    for i in range(len(new_string)):\n        if new_string[i] not in string1:\n            total_chars += 1\n    for i in range(len(string1)):\n        if string1[i] not in new_string:\n            total_chars += 1\n    return total_chars\n    \ndef get_minimum_count_of_substring(string1, string2):\n    '''\n    Write a function to find the minimum count of characters to remove and replace to get the two strings equal.\n    '''\n    count = 0\n    new_list = str_to_list(string2)\n    new_string = list_to_str(new_list)\n    if new_string == string1:\n        return 0\n    for i in range(len(new_string)):\n        if new_string[i] not in string1:\n            count += 1\n    for i in range(len(string1)):\n        if string1[i] not in new_string:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if string == '':\n        return []\n    if len(string) < len(string[1]):\n        return []\n    result = []\n    i = 0\n    while i < len(string):\n        if string[i] not in string[i+1:]:\n            result.append(string[i])\n            i+=1\n        else:\n            i+=1\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    for i in string: \n        if i not in list1:\n            list1.append(i)\n    return list1\ndef sort_list(list1): \n    '''\n    Write a function to sort a list of strings by their lengths in ascending order.\n    '''\n    return sorted(list1, key = len)\ndef sort_list_string(list1): \n    '''\n    Write a function to sort a list of strings by their lengths in descending order.\n    '''\n    return sorted(list1, key = len, reverse = True)\ndef print_string_by_index(list2): \n    '''\n    Write a function to print the list elements with each element on a new line.\n    '''\n    for i in list2:\n        print(i)\ndef is_present(string1, string2): \n    '''\n    Write a function to check if the characters of a string are present in another string\n    '''\n    temp1 = ''\n    for i in string1: \n        temp1 += i\n    for i in string2: \n        if i in temp1:\n            print(i)\n        else:\n            print('Not Present')\n            break\ndef character_freq(string1): \n    '''\n    Write a function to count the frequency of each character of a string.\n    '''\n    temp = {}\n    for i in string1: \n        if i in temp:\n            temp[i] += 1\n        else:\n            temp[i] = 1\n    return temp\ndef character_freq_list(string1): \n    '''\n    Write a function to count the frequency of each character of a string.\n    '''\n    temp = []\n    for i in string1: \n        if i in temp:\n            temp[i] += 1\n        else:\n            temp.append(i)\n    return temp\ndef count_character_string(string1, string2): \n    '''\n    Write a function to count the number of characters in string1 that are also present in string2.\n    '''\n    temp = 0\n    for i in string1: \n        if i in string2:\n            temp += 1\n    return temp\ndef count_character_string_list(string1, string2): \n    '''\n    Write a function to count the number of characters in string1 that are also present in string2.\n    '''\n    temp = []\n    for i in string1: \n        if i in string2:\n            temp.append(i)\n    return len(temp)\ndef is_present_list(string1, string2): \n    '''\n    Write a function to check if the characters of a string are present in another string\n    '''\n    temp1 = ''\n    for i in string1: \n        temp1 += i\n    for i in string2: \n        if i in temp1:\n            print(i)\n        else:\n            print('Not Present')\n            break\ndef convert_to_list(string): \n    '''\n    Write a function to convert a string to a list of characters.\n    '''\n    return list(string)\ndef insert_into_list(list1, string): \n    '''\n    Write a function to insert a string at the front of a list.\n    '''\n    list1.insert(0, string)\n    return list1\ndef insert_after_string(list1, string, string2): \n    '''\n    Write a function to insert string2 after string in a list.\n    '''\n    if string in list1:\n        list1.insert(list1.index(string)+1, string2)\n    return list1\ndef insert_string_after_string(list1, string, string2): \n    '''\n    Write a function to insert string2 after string in a list.\n    '''\n    if string in list1:\n        list1.insert(list1.index(string)+1, string2)\n    return list1\ndef append_to_list(list1, string): \n    '''\n    Write a function to append a string to a list.\n    '''\n    list1.append(string)\n    return list1\ndef remove_string_from_list(list1, string): \n    '''\n    Write a function to remove string from a list.\n    '''\n    list1.remove(string)\n    return list1\ndef sort_list_string(list1): \n    '''\n    Write a function to sort a list of strings by their lengths in ascending order.\n    '''\n    return sorted(list1, key = len)\ndef sort_list_string(list1): \n    '''\n    Write a function to sort a list of strings by their lengths in descending order.\n    '''\n    return sorted(list1, key = len, reverse = True)\ndef print_string_by_index(list2): \n    '''\n    Write a function to print the list elements with each element on a new line.\n    '''\n    for i in list2:\n        print(i)\ndef is_present(string1, string2): \n    '''\n    Write a function to check if the characters of a string are present in another string\n    '''\n    temp1 = ''\n    for i in string1: \n        temp1 += i\n    for i in string2: \n        if i in temp1:\n            print(i)\n        else:\n            print('Not Present')\n            break\ndef character_freq(string1): \n    '''\n    Write a function to count the frequency of each character of a string.\n    '''\n    temp = {}\n    for i in string1: \n        if i in temp:\n            temp[i] += 1\n        else:\n            temp[i] = 1\n    return temp\ndef character_freq_list(string1): \n    '''\n    Write a function to count the frequency of each character of a string.\n    '''\n    temp = []\n    for i in string1: \n        if i in temp:\n            temp[i] += 1\n        else:\n            temp.append(i)\n    return temp\ndef count_character_string(string1, string2): \n    '''\n    Write a function to count the number of characters in string1 that are also present in string2.\n    '''\n    temp = 0\n    for i in string1: \n        if i in string2:\n            temp += 1\n    return temp\ndef count_character_string_list(string1, string2): \n    '''\n    Write a function to count the number of characters in string1 that are also present in string2.\n    '''\n    temp = []\n    for i in string1: \n        if i in string2:\n            temp.append(i)\n    return len(temp)\ndef is_present_list(string1, string2): \n    '''\n    Write a function to check if the characters of a string are present in another string\n    '''\n    temp1 = ''\n    for i in string1: \n        temp1 += i\n    for i in string2: \n        if i in temp1:\n            print(i)\n        else:\n            print('Not Present')\n            break\ndef convert_to_list(string): \n    '''\n    Write a function to convert a string to a list of characters.\n    '''\n    return list(string)\ndef insert_into_list(list1, string): \n    '''\n    Write a function to insert a string at the front of a list.\n    '''\n    list1.insert(0, string)\n    return list1\ndef insert_string_after_string(list1, string, string2): \n    '''\n    Write a function to insert string2 after string in a list.\n    '''\n    if string in list1:\n        list1.insert(list1.index(string)+1, string2)\n    return list1\ndef append_to_list(list1, string): \n    '''\n    Write a function to append a string to a list.\n    '''\n    list1.append(string)\n    return list1\ndef remove_string_from_list(list1, string): \n    '''\n    Write a function to remove string from a list.\n    '''\n    list1.remove(string)\n    return list1\ndef sort_list"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for item in string:\n        list1.append(item)\n    for item in list1:\n        if item not in list2:\n            list2.append(item)\n    return list2\ndef file_to_code(file_name): \n    '''\n    Write a function to read a file and convert it to a code.\n    '''\n    str1 = ''\n    with open(file_name) as f:\n        str1 = f.read()\n    str1 = str1.replace('\\n','')\n    str1 = str1.lower()\n    return str1\ndef split_into_words(text):\n    '''\n    Write a function to split a text into words.\n    '''\n    words = []\n    for word in text:\n        if word not in'':\n            words.append(word)\n    return words\ndef find_nth(haystack, needle, n):\n    '''\n    Write a function to find the nth occurrence of a word in a string.\n    '''\n    start = haystack.find(needle)\n    while start >= 0 and n > 1:\n        start = haystack.find(needle, start+len(needle))\n        n -= 1\n    return start\ndef find_largest_match(code,pat):\n    '''\n    Write a function to find the longest substring of code that is a substring of pat and has the same number of characters.\n    '''\n    len_code = len(code)\n    len_pat = len(pat)\n    for i in range(len_code-len_pat+1):\n        j = 0\n        while j<len_pat:\n            if code[i+j]!= pat[j]:\n                break\n            j += 1\n        if j == len_pat:\n            return i, i+len_pat-1\n    return -1,-1\ndef int_to_str(num):\n    '''\n    Write a function to convert an integer to a string.\n    '''\n    str1 = \"\"\n    while num > 0:\n        str1 = str(num % 10) + str1\n        num = num // 10\n    return str1\ndef get_max_len(str_list):\n    '''\n    Write a function to get the maximum length of the string in a list of strings.\n    '''\n    max_len = len(str_list[0])\n    for item in str_list:\n        if len(item) > max_len:\n            max_len = len(item)\n    return max_len\ndef is_permutation(str1, str2):\n    '''\n    Write a function to check if one word is a permutation of another word.\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    dict1 = {}\n    dict2 = {}\n    if len(str1)!= len(str2):\n        return False\n    for char in str1:\n        if char not in dict1:\n            dict1[char] = 1\n        else:\n            dict1[char] += 1\n    for char in str2:\n        if char not in dict2:\n            dict2[char] = 1\n        else:\n            dict2[char] += 1\n    return dict1 == dict2\ndef is_anagram(str1,str2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    return sorted(str1) == sorted(str2)\ndef are_anagrams(str1,str2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    if len(str1)!= len(str2):\n        return False\n    return sorted(str1) == sorted(str2)\ndef are_anagrams_of_numbers(str1,str2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    if len(str1)!= len(str2):\n        return False\n    counts = [0] * NO_OF_CHARS\n    for char in str1:\n        counts[ord(char)-97] += 1\n    for char in str2:\n        counts[ord(char)-97] -= 1\n    for item in counts:\n        if item!= 0:\n            return False\n    return True\ndef find_longest_palindrome(string):\n    '''\n    Write a function to find the longest palindrome in a string.\n    '''\n    string = string.lower()\n    max_len = 1\n    start = 0\n    for i in range(len(string)-1):\n        if string[i] == string[i+1]:\n            count = 2\n            j = i+1\n            while j < len(string) and string[j] == string[i]:\n                count += 1\n                j += 1\n            if count >= max_len:\n                max_len = count\n                start = i - (count-1)\n    return string[start:start+max_len]\ndef find_palindrome(string, start, end):\n    '''\n    Write a function to find the longest palindrome in a string.\n    '''\n    while start >= 0 and end < len(string):\n        if string[start]!= string[end]:\n            break\n        start -= 1\n        end += 1\n    return string[start+1:end]\ndef palindrome_permutations(string):\n    '''\n    Write a function to find all the permutations of a given string that are palindrome.\n    '''\n    res = []\n    permute(string, 0, res)\n    return res\ndef permute(string, index, res):\n    if index == len(string):\n        res.append(''.join(string))\n    else:\n        for i in range(index, len(string)):\n            string[index], string[i] = string[i], string[index]\n            permute(string, index+1, res)\n            string[index], string[i] = string[i], string[index]\ndef reverse(string, start, end):\n    while start < end:\n        string[start], string[end] = string[end], string[start]\n        start += 1\n        end -= 1\ndef print_to_file(file_name, code):\n    '''\n    Write a function to print a code to a file.\n    '''\n    with open(file_name, 'w') as f:\n        f.write(code)\ndef remove_duplicates(arr):\n    '''\n    Write a function to remove duplicates from an array.\n    '''\n    if len(arr) == 0:\n        return arr\n    res = []\n    for item in arr:\n        if item not in res:\n            res.append(item)\n    return res\ndef find_intersection(list1, list2):\n    '''\n    Write a function to find the intersection of two lists.\n    '''\n    res = []\n    for item in list1:\n        if item in list2 and item not in res:\n            res.append(item)\n    return res\ndef reverse_words(words):\n    '''\n    Write a function to reverse words in a string.\n    '''\n    list1 = words.split(' ')\n    list1 = list1[::-1]\n    return''.join(list1)\ndef is_palindrome(string):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return string[::-1] == string\ndef is_number_balanced(string):\n    '''\n    Write a function to check if a given string is a number.\n    '''\n    counts = [0] * NO_OF_CHARS\n    for char in string:\n        counts[ord(char)-97] += 1\n    odd_count = 0\n    for count in counts:\n        if count % 2!= 0:\n            odd_count += 1\n        if odd_count > 1:\n            retur"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    li = []\n    li1 = []\n    for i in string:\n        li.append(i)\n    for j in li:\n        if j not in li1:\n            li1.append(j)\n    for k in li1:\n        li.remove(k)\n    return li\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in xrange(len(arraynums)):\n        for j in xrange(len(arraynums)):\n            if i!= j and arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    if len(arraynums) == 1:\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums = sorted(arraynums)\n    for i in range(1, len(arraynums)):\n        if arraynums[i] == arraynums[i-1]:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    n = len(arraynums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for num in arraynums:\n        if arraynums.count(num) > 1:\n            return True\n        else:\n            pass\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    array = arraynums[:]\n    array.sort()\n    \n    for i in range(len(array)-1):\n        if array[i] == array[i+1]:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    nums = arraynums[:]\n    return list(set(nums)) == nums\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for num in arraynums:\n        if arraynums.count(num) > 1:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0 or len(arraynums) == 1:\n        return False\n    for i in range(len(arraynums)):\n        for j in range(i+1,len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    def duplicates(arraynums):\n        return len(arraynums)!= len(set(arraynums))\n    return duplicates(arraynums)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x>=0 and x<=1000000:\n        if ((x%2==0) or (x%3==0) or (x%5==0)):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    x = str(x)\n    if len(x) == 6:\n        if all(i in '0123456789' for i in x) and x[-1] in '0123456789':\n            if x[0] == x[-1] and x[1] == x[2]:\n                return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    dic = {'A':1,'B':2,'C':3,'D':4,'E':5,'F':6,'G':7,'H':8,'I':9,'J':10,'K':11,'L':12,'M':13,'N':14,'O':15,'P':16,'Q':17,'R':18,'S':19,'T':20,'U':21,'V':22,'W':23,'X':24,'Y':25,'Z':26}\n    if str(x)[0] in dic:\n        print (str(x)[0])\n        a = dic[str(x)[0]]\n    else:\n        a = 0\n    if int(str(x)[1]) >= 2 and int(str(x)[1]) <= 4:\n        print (str(x)[1])\n        b = 1\n    else:\n        b = 0\n    if a+b == int(str(x)[2]) and int(str(x)[2]) >= 7:\n        print (str(x)[2])\n        return 1\n    else:\n        return 0\n    \nprint(is_woodall(143))\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # this is to remove the \"00\" to make the code run\n    if x[-2:] == \"00\":\n        x = x[:-2]\n    y = int(x)\n    if y % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if len(str(x))==7 and str(x).startswith('17') and str(x).endswith('17'):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    i = len(x)\n    while(i!= 0):\n        if x[i] in ['a','e','i','o','u']:\n            x = x[0:i] + '*' + x[i+1:]\n        i = i - 1\n    if x == '*':\n        return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if len(str(x)) == 6:\n        num = [int(i) for i in str(x)]\n        if (num[0]**3+num[1]**3+num[2]**3 == num[3]**3+num[4]**3+num[5]**3):\n            return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    #Removing all 0s and converting the number to a string, so that they are easier to check\n    str_x = str(x)\n    str_x = str_x.replace('0','')\n    \n    #Removing all the digits from the string and checking if they are divisible by 2, 3 or 4 or not\n    for i in str_x:\n        if int(i) % 2!= 0:\n            return False\n        elif int(i) % 3!= 0:\n            return False\n        elif int(i) % 4!= 0:\n            return False\n    \n    #If we reach here, then all the digits are divisible by 2, 3 or 4\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        lst = []\n        num = 1\n        for i in xrange(1, x+1):\n            if i % 2!= 0:\n                lst.append(num)\n            else:\n                num = num + 1\n        if sum(lst) == x:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # return True if the sum of first five natural numbers (1 to n) contains the number entered.\n    # else return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    str_num = str(num)\n    if str_num == str_num[::-1]:\n        return True\n    else:\n        return False\n    \ndef main():\n    num = int(input('Enter a number: '))\n    if rev(num):\n        print('Number is one less than twice its reverse')\n    else:\n        print('Number is not one less than twice its reverse')\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(str(num)[::-1]) - 1\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == num[::-1]:\n        return True\n    return False\n    \n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return True\n    elif num == 1:\n        return False\n    else:\n        num = str(num)\n        rev_num = num[::-1]\n        if rev_num == num:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    if int(num[::-1]) == 2*int(num):\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    if num < 0:\n        return False\n    while num:\n        remainder = num % 10\n        reverse = reverse * 10 + remainder\n        num = num // 10\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse_num = str(num)[::-1]\n    if reverse_num == str(2*int(reverse_num)):\n        return True\n    return False\n    \ndef fib(n):\n    '''\n    Write a python function to return the nth number in the Fibonacci sequence, where n is an integer.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    a = str(num)\n    b = a[::-1]\n    if int(a) - int(b) == -2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return True\n    elif num < 0:\n        return False\n    else:\n        reverse = 0\n        while num > 0:\n            rem = num % 10\n            reverse = reverse * 10 + rem\n            num = num // 10\n        if reverse == (num - 1):\n            return True\n        else:\n            return False\n    "
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num2 = 0\n    while num!= 0:\n        num2 = num2*10 + num%10\n        num /= 10\n    return num2 == num2/2\n    \ndef binarySearch(alist, item):\n    '''\n    Write a python function that implements the binary search algorithm.\n    '''\n    low = 0\n    high = len(alist) - 1\n    while low <= high:\n        mid = (low + high)/2\n        if alist[mid] == item:\n            return True\n        elif alist[mid] > item:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    l_arr = len(arr)\n    max_num = arr[0]*arr[1]*arr[l_arr-2]*arr[l_arr-1]\n    for i in range(l_arr-3):\n        for j in range(i+1,l_arr-2):\n            for k in range(j+1,l_arr-1):\n                for l in range(k+1,l_arr):\n                    temp = arr[i]*arr[j]*arr[k]*arr[l]\n                    if temp > max_num:\n                        max_num = temp\n    print max_num\n    return max_num\n    \ndef find_Max_Num_fast(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    l_arr = len(arr)\n    temp = arr[0]*arr[1]*arr[l_arr-2]*arr[l_arr-1]\n    max_num = temp\n    for i in range(l_arr-3):\n        for j in range(i+1,l_arr-2):\n            temp = arr[i]*arr[j]*arr[l_arr-2]*arr[l_arr-1]\n            if temp > max_num:\n                max_num = temp\n    print max_num\n    return max_num\n    \ndef main():\n    arr = [1,2,3,4,5,6,7,8,9]\n    find_Max_Num(arr)\n    find_Max_Num_fast(arr)\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    number = 0\n    for i in arr : \n        number = number*10 + i\n    return number\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max_Num = 0\n    for elem in arr:\n        if elem > Max_Num:\n            Max_Num = elem\n    return Max_Num\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    count = 0\n    for i in arr : \n        count = count * 10 + i\n    return count\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr) \n    Max = arr[0]\n    for i in range(n): \n        if arr[i] > Max : \n            Max = arr[i] \n    return Max \n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    count = 0\n    for num in arr:\n        count += num\n    return count\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr)==0 :\n        return 0\n    arr.sort(reverse=True)\n    max_num = arr[0]\n    for i in range(len(arr)-1) :\n        if arr[i+1]==arr[i] :\n            max_num+=arr[i]\n        else :\n            break\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max_Num = 0\n    for i in range(len(arr)):\n        if arr[i] > Max_Num :\n            Max_Num = arr[i]\n    return Max_Num\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max= arr[0]\n    for i in range(1,len(arr)):\n        if arr[i]>Max:\n            Max= arr[i]\n    return Max\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max_Num = 0\n    for i in range(0, len(arr)) : \n        for j in range(i, len(arr)) : \n            temp = arr[i] * arr[j]\n            if temp > Max_Num : \n                Max_Num = temp\n    print \"Max number is : \", Max_Num\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y>0 and y*x>0: \n        return True \n    elif x*y<0 and y*x<0: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x>0 and y<0) or (x<0 and y>0)\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x * y < 0\ndef check(x,y):\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False\ndef isPrime(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in xrange(3, n/2 + 1, 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_Prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef isPrime1(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        sqrt = int(n**0.5)\n        for i in range(3,sqrt+1,2):\n            if n%i == 0:\n                return False\n        return True\ndef isPrime2(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n%i == 0:\n                return False\n        return True\ndef isPrime3(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n%i == 0:\n                return False\n        return True\ndef isPrime4(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        sqrt = int(n**0.5)\n        for i in xrange(3, sqrt+1, 2):\n            if n%i == 0:\n                return False\n        return True\ndef isPrime5(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        sqrt = int(n**0.5)\n        for i in xrange(3, sqrt+1, 2):\n            if n%i == 0:\n                return False\n        return True\ndef isPrime6(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        sqrt = int(n**0.5)\n        for i in xrange(3, sqrt+1, 2):\n            if n%i == 0:\n                return False\n        return True\ndef isPrime7(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        sqrt = int(n**0.5)\n        for i in xrange(3, sqrt+1, 2):\n            if n%i == 0:\n                return False\n        return True\ndef isPrime8(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        sqrt = int(n**0.5)\n        for i in xrange(3, sqrt+1, 2):\n            if n%i == 0:\n                return False\n        return True\ndef isPrime9(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        sqrt = int(n**0.5)\n        for i in xrange(3, sqrt+1, 2):\n            if n%i == 0:\n                return False\n        return True\ndef isPrime10(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        sqrt = int(n**0.5)\n        for i in xrange(3, sqrt+1, 2):\n            if n%i == 0:\n                return False\n        return True\ndef isPrime11(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        sqrt = int(n**0.5)\n        for i in xrange(3, sqrt+1, 2):\n            if n%i == 0:\n                return False\n        return True\ndef isPrime12(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        sqrt = int(n**0.5)\n        for i in xrange(3, sqrt+1, 2):\n            if n%i == 0:\n                return False\n        return True\ndef isPrime13(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        sqrt = int(n**0.5)\n        for i in xrange(3, sqrt+1, 2):\n            if n%i == 0:\n                return False\n        return True\ndef isPrime14(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        sqrt = int(n**0.5)\n        for i in xrange(3, sqrt+1, 2):\n            if n%i == 0:\n                return False\n        return True\ndef isPrime15(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        sqrt = int(n**0.5)\n        for i in xrange(3, sqrt+1, 2):\n            if n%i == 0:\n                return False\n        return True\ndef isPrime16(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        sqrt = int(n**0.5)\n        for i in xrange(3, sqrt+1, 2):\n            if n%i == 0:\n                return False\n        return True\ndef isPrime17(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        sqrt = int(n**0.5)\n        for i in xrange(3, sqrt+1, 2):\n            if n%i == 0:\n                return False\n        return True\ndef isPrime18(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        sqrt = int(n**0.5)\n        for i in xrange(3, sqrt+1, 2):\n            if n%i == 0:\n                return False\n        return True\ndef isPrime19(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        sqrt = int(n**0.5)\n        for i in xrange(3, sqrt+1, 2):\n            if n%i == 0:\n                return False\n        return True\ndef isPrime20(n):\n    if n < "
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0 or x>0 and y<0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0 or x > 0 and y < 0:\n        print('True')\n    else:\n        print('False')\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    else:\n        return True\n    \ndef above_Equation(a,b,c):\n    '''\n    Write a python function to check whether the three given integers satisfy the equation ax + by = c.\n    '''\n    if a > 0 and b > 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x<0 and y<0 or x>0 and y>0\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return 1\n    elif x > 0 and y > 0:\n        return 1\n    elif x > 0 and y < 0:\n        return -1\n    elif x < 0 and y > 0:\n        return -1\n    else:\n        return 0\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 8\n    elif n == 4:\n        return 17\n    elif n == 5:\n        return 32\n    elif n == 6:\n        return 45\n    elif n == 7:\n        return 55\n    elif n == 8:\n        return 64\n    elif n == 9:\n        return 81\n    elif n == 10:\n        return 91\n    elif n == 11:\n        return 108\n    elif n == 12:\n        return 123\n    elif n == 13:\n        return 143\n    elif n == 14:\n        return 154\n    elif n == 15:\n        return 165\n    elif n == 16:\n        return 176\n    elif n == 17:\n        return 187\n    elif n == 18:\n        return 202\n    elif n == 19:\n        return 216\n    elif n == 20:\n        return 225\n    elif n == 21:\n        return 238\n    elif n == 22:\n        return 254\n    elif n == 23:\n        return 280\n    elif n == 24:\n        return 297\n    elif n == 25:\n        return 314\n    elif n == 26:\n        return 335\n    elif n == 27:\n        return 354\n    elif n == 28:\n        return 375\n    elif n == 29:\n        return 414\n    elif n == 30:\n        return 431\n    elif n == 31:\n        return 462\n    elif n == 32:\n        return 487\n    elif n == 33:\n        return 521\n    elif n == 34:\n        return 536\n    elif n == 35:\n        return 558\n    elif n == 36:\n        return 571\n    elif n == 37:\n        return 585\n    elif n == 38:\n        return 614\n    elif n == 39:\n        return 639\n    elif n == 40:\n        return 664\n    elif n == 41:\n        return 675\n    elif n == 42:\n        return 695\n    elif n == 43:\n        return 716\n    elif n == 44:\n        return 729\n    elif n == 45:\n        return 744\n    elif n == 46:\n        return 763\n    elif n == 47:\n        return 776\n    elif n == 48:\n        return 797\n    elif n == 49:\n        return 811\n    elif n == 50:\n        return 825\n    elif n == 51:\n        return 838\n    elif n == 52:\n        return 851\n    elif n == 53:\n        return 866\n    elif n == 54:\n        return 879\n    elif n == 55:\n        return 904\n    elif n == 56:\n        return 921\n    elif n == 57:\n        return 935\n    elif n == 58:\n        return 949\n    elif n == 59:\n        return 964\n    elif n == 60:\n        return 979\n    elif n == 61:\n        return 994\n    elif n == 62:\n        return 1018\n    elif n == 63:\n        return 1032\n    elif n == 64:\n        return 1045\n    elif n == 65:\n        return 1057\n    elif n == 66:\n        return 1069\n    elif n == 67:\n        return 1085\n    elif n == 68:\n        return 1102\n    elif n == 69:\n        return 1120\n    elif n == 70:\n        return 1139\n    elif n == 71:\n        return 1154\n    elif n == 72:\n        return 1167\n    elif n == 73:\n        return 1179\n    elif n == 74:\n        return 1205\n    elif n == 75:\n        return 1221\n    elif n == 76:\n        return 1234\n    elif n == 77:\n        return 1249\n    elif n == 78:\n        return 1264\n    elif n == 79:\n        return 1285\n    elif n == 80:\n        return 1307\n    elif n == 81:\n        return 1323\n    elif n == 82:\n        return 1336\n    elif n == 83:\n        return 1349\n    elif n == 84:\n        return 1363\n    elif n == 85:\n        return 1380\n    elif n == 86:\n        return 1398\n    elif n == 87:\n        return 1411\n    elif n == 88:\n        return 1426\n    elif n == 89:\n        return 1439\n    elif n == 90:\n        return 1454\n    elif n == 91:\n        return 1468\n    elif n == 92:\n        return 1491\n    elif n == 93:\n        return 1508\n    elif n == 94:\n        return 1523\n    elif n == 95:\n        return 1537\n    elif n == 96:\n        return 1552\n    elif n == 97:\n        return 1565\n    elif n == 98:\n        return 1578\n    elif n == 99:\n        return 1591\n    elif n == 100:\n        return 1605\n    elif n == 101:\n        return 1619\n    elif n == 102:\n        return 1634\n    elif n == 103:\n        return 1649\n    elif n == 104:\n        return 1664\n    elif n == 105:\n        return 1677\n    elif n == 106:\n        return 1691\n    elif n == 107:\n        return 1706\n    elif n == 108:\n        return 1720\n    elif n == 109:\n        return 1734\n    elif n == 110:\n        return 1749\n    elif n == 111:\n        return 1764\n    elif n == 112:\n        return 1779\n    elif n == 113:\n        return 1794\n    elif n == 114:\n        return 1809\n    elif n == 115:\n        return 1824\n    elif n == 116:\n        return 1839\n    elif n == 117:\n        return 1854\n    elif n == 118:\n        return 1869\n    elif n == 119:\n        return 1884\n    elif n == 120:\n        return 1899\n    elif n == 121:\n        return 2024\n    elif n == 122:\n        return 2039\n    elif n == 123:\n        return 2054\n    elif n == 124:\n        return 2069\n    elif n == 125:\n        return 2084\n    elif n == 126:\n        return 2107\n    elif n == 127:\n        return 2122\n    elif n == 128:\n        return 2137\n    elif n == 129:\n        return 2152\n    elif n == 130:\n        return 2167\n    elif n == 131:\n        return 2182\n    elif n == 132:\n        return 2197\n    elif n == 133:\n        return 2212\n    elif n == 134:\n        return 2227\n    elif n == 135:\n        return 2342\n    elif n == 136:\n        return 2257\n    elif n == 137:\n        return 2272\n    elif n == 138:\n        return 2287\n    elif n == 139:\n        return 2301\n    elif n == 140:\n        return 2316\n    elif n == 141:\n        return 2331\n    elif n == 142:\n        return 2346\n    elif n == 143:\n        return 2351\n    elif n == 144:\n        return 2366\n    elif n == 145:\n        return 2381\n    elif n == 146:\n        return 2395\n    elif n == 147:\n        return 2410\n    elif n == 148:\n        return 2425\n    elif n == 149:\n        return 2440\n    elif n == 150:\n        return 2455\n    elif n == 151:\n        return 2470\n    elif n == 152:\n        return 2485\n    elif n == 153:\n        return 2510\n    elif n == 154:\n        return 2525\n    elif n == 155:\n        return 2540\n    elif n == 156:\n        return 2555\n    elif n == 157:\n        return 2570\n    elif n == 158"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n**2 + n) / 2 == (n * (3 * n + 1)) / 2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (((n*(n+1))/2)**0.5) % 1 == 0\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * (3 ** (n / 2))\n    else:\n        return 3 * (2 ** (n / 2))\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n**2 + n)**2 == n**4 + n**3\n    \ndef is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n**2 + n == n**4 + n**3\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 1\n    total = 0\n    for i in xrange(1,n):\n        total += i*(3*i-1)/2\n    return total + n*(3*n-1)/2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    k = (((n * (n + 1)) / 2) ** 0.5)\n    return int(k)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return n**2 == n/2 + (n-1)*8\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (((n**2) + 1)**(1/2)) % 10 == 1\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1) / 2\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in range(len(s)):\n        d[s[i]] += 1\n    \n    sum = 0\n    for key,value in d.iteritems():\n        sum += value*(value+1)/2\n    return sum\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    res = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if sum(int(x) for x in s[i:j+1]) == len(s[i:j+1]):\n                res += 1\n    return res\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    length = len(s)\n    for i in xrange(length):\n        for j in xrange(i, length):\n            if int(s[i:j+1]) == len(s[i:j+1]):\n                count += 1\n    return count\ndef count_substrings_with_counts(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    length = len(s)\n    for i in xrange(length):\n        for j in xrange(i, length):\n            if int(s[i:j+1]) == len(s[i:j+1]):\n                count += 1\n                print'substring', s[i:j+1]\n    return count\ndef merge_the_tools(string, k):\n    '''\n    Write a python function to merge the tools.\n    '''\n    return [''.join(list(group)) for k, group in zip(xrange(0, len(string), k),\n                                                      [tuple(string[x:x+k]) for x in xrange(0, len(string), k)])]\ndef merge_the_tools_v2(string, k):\n    '''\n    Write a python function to merge the tools.\n    '''\n    for i in xrange(0, len(string), k):\n        yield ''.join(set(string[i:i+k]))\ndef contains_digit_v2(string):\n    '''\n    Write a python function to check whether the string contains a digit.\n    '''\n    for i in xrange(10):\n        if str(i) in string:\n            return True\n    return False\ndef is_one_away(s1, s2):\n    '''\n    Write a python function to check whether two strings are one edit distance apart.\n    '''\n    if abs(len(s1) - len(s2)) > 1:\n        return False\n    else:\n        if len(s1) == len(s2):\n            return contains_digit_v2(s1) and contains_digit_v2(s2)\n        else:\n            if len(s1) > len(s2):\n                s1, s2 = s2, s1\n            diff = len(s1) - len(s2)\n            for i in xrange(len(s1)):\n                if s1[i]!= s2[i + diff]:\n                    return False\n            return True\ndef longest_consecutive_repeating_character(s):\n    '''\n    Write a python function to find the length of the longest consecutive repeating character.\n    '''\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    result = 1\n    prev = s[0]\n    for i in xrange(1, len(s)):\n        if s[i] == prev:\n            continue\n        else:\n            if s[i]!= s[i-1]:\n                result = max(result, 1)\n            else:\n                result = max(result, 2)\n            prev = s[i]\n    return result\ndef rotate_string_left(s, k):\n    '''\n    Write a python function to rotate a string to the left k times.\n    '''\n    return s[k:] + s[:k]\ndef rotate_string_right(s, k):\n    '''\n    Write a python function to rotate a string to the right k times.\n    '''\n    return s[-k:] + s[:-k]\ndef rotate_string_left_v2(s, k):\n    '''\n    Write a python function to rotate a string to the left k times.\n    '''\n    if k > len(s):\n        return s\n    return s[k%len(s):] + s[:k%len(s)]\ndef rotate_string_right_v2(s, k):\n    '''\n    Write a python function to rotate a string to the right k times.\n    '''\n    if k > len(s):\n        return s\n    return s[-k%len(s):] + s[:(-k%len(s))]\ndef is_a_valid_parenthesis_v1(string):\n    '''\n    Write a python function to check whether a string is a valid parenthesis.\n    '''\n    stack = []\n    for i in xrange(len(string)):\n        if string[i] == '(':\n            stack.append('(')\n        elif string[i] == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) > 0:\n        return False\n    return True\ndef is_a_valid_parenthesis_v2(string):\n    '''\n    Write a python function to check whether a string is a valid parenthesis.\n    '''\n    stack = []\n    for i in xrange(len(string)):\n        if string[i] == '(':\n            stack.append('(')\n        elif string[i] == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\ndef is_a_valid_parenthesis_v3(string):\n    '''\n    Write a python function to check whether a string is a valid parenthesis.\n    '''\n    stack = []\n    for i in xrange(len(string)):\n        if string[i] == '(':\n            stack.append('(')\n        elif string[i] == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return True if len(stack) == 0 else False\ndef convert_binary_to_decimal(binary):\n    '''\n    Write a python function to convert a binary string to decimal.\n    '''\n    return int(binary, 2)\ndef convert_decimal_to_binary(decimal):\n    '''\n    Write a python function to convert a decimal string to binary.\n    '''\n    return bin(decimal)\ndef rotate_string_left_v3(s, k):\n    '''\n    Write a python function to rotate a string to the left k times.\n    '''\n    if len(s) < 2:\n        return s\n    else:\n        return s[k:] + s[:k]\ndef rotate_string_right_v3(s, k):\n    '''\n    Write a python function to rotate a string to the right k times.\n    '''\n    if len(s) < 2:\n        return s\n    else:\n        return s[-k:] + s[:-k]\ndef contains_digit_v3(string):\n    '''\n    Write a python function to check whether the string contains a digit.\n    '''\n    for i in xrange(10):\n        if str(i) in string:\n            return True\n    return False\ndef is_a_valid_parenthesis_v4(string):\n    '''\n    Write a python function to check whether a string is a valid parenthesis.\n    '''\n    stack = []\n    for i in xrange(len(string)):\n        if string[i] == '(':\n            stack.append('(')\n        elif string[i] == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) > 0:\n        return False\n    return True\ndef is_a_valid_parenthesis_v5(string):\n    '''\n    Write a python function to check whether a string is a valid parenthesis.\n    '''\n    stack = []\n    for i in xrange(len(string)):\n        if string[i] == '(':\n            stack.append('(')\n        elif string[i] == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return True if len(stack) == 0 else False\ndef is_a_valid_parenthesis_v6(string):\n    '''\n    Write a python function to check whether a string is a valid parenthesis"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    res = []\n    for i in xrange(len(s)):\n        for j in xrange(i, len(s)):\n            substr = s[i:j+1]\n            if substr.isdigit():\n                res.append(substr)\n    return len(res)\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    from collections import defaultdict\n    count = 0\n    table = defaultdict(int)\n    for i in range(len(s)):\n        j = i+1\n        while j<len(s) and j-i<=len(s):\n            summ = 0\n            for k in range(j-i):\n                summ += int(s[k])\n            if summ == j-i:\n                count += 1\n            j += 1\n    return count\n    # print table\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(0, len(s)):\n        for j in range(i, len(s)):\n            substr = s[i:j+1]\n            if len(substr) == len(s):\n                temp = 0\n                for k in substr:\n                    temp = temp + int(k)\n                if temp == len(substr):\n                    count = count + 1\n    return count\ndef find_substring(str1, str2):\n    '''\n    Write a python function to find the longest substring in str1 that is a substring of str2. \n    '''\n    substr_list = []\n    for i in range(0, len(str1)):\n        for j in range(i, len(str1)):\n            if len(str1[i:j+1]) == len(str2):\n                substr_list.append(str1[i:j+1])\n    substr_list = list(set(substr_list))\n    max_len = 0\n    max_str = ''\n    for substr in substr_list:\n        if substr in str2:\n            if max_len < len(substr):\n                max_len = len(substr)\n                max_str = substr\n    return max_str\ndef sort_string(s):\n    '''\n    Write a python function to sort the characters of a string in ascending order. \n    '''\n    return ''.join(sorted(s))\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is a palindrome or not. \n    '''\n    return s == s[::-1]\ndef find_anagrams(s, d):\n    '''\n    Write a python function to find all anagrams of a string in a dictionary. \n    '''\n    from collections import defaultdict\n    anagrams = defaultdict(list)\n    for word in d:\n        temp = sort_string(word)\n        anagrams[temp].append(word)\n    return anagrams\ndef find_anagrams_2(s, d):\n    '''\n    Write a python function to find all anagrams of a string in a dictionary. \n    '''\n    from collections import defaultdict\n    anagrams = defaultdict(list)\n    for word in d:\n        temp = sort_string(word)\n        if len(s) == len(temp):\n            if temp in anagrams:\n                anagrams[temp].append(word)\n            else:\n                anagrams[temp] = [word]\n    return anagrams\ndef is_anagram_1(s, d):\n    '''\n    Write a python function to check whether a string is an anagram of a dictionary word or not. \n    '''\n    from collections import defaultdict\n    anagrams = defaultdict(list)\n    for word in d:\n        temp = sort_string(word)\n        if temp in anagrams:\n            anagrams[temp].append(word)\n        else:\n            anagrams[temp] = [word]\n    return s in anagrams\ndef is_anagram_2(s, d):\n    '''\n    Write a python function to check whether a string is an anagram of a dictionary word or not. \n    '''\n    from collections import defaultdict\n    anagrams = defaultdict(list)\n    for word in d:\n        temp = sort_string(word)\n        if len(s) == len(temp):\n            if temp in anagrams:\n                anagrams[temp].append(word)\n            else:\n                anagrams[temp] = [word]\n    return s in anagrams\ndef find_substring_2(str1, str2):\n    '''\n    Write a python function to find the longest substring in str1 that is a substring of str2. \n    '''\n    substr_list = []\n    for i in range(0, len(str1)):\n        for j in range(i, len(str1)):\n            if len(str1[i:j+1]) == len(str2):\n                substr_list.append(str1[i:j+1])\n    substr_list = list(set(substr_list))\n    max_len = 0\n    max_str = ''\n    for substr in substr_list:\n        if substr in str2:\n            if max_len < len(substr):\n                max_len = len(substr)\n                max_str = substr\n    return max_str\ndef longest_substring_with_k_distinct(s, k):\n    '''\n    Write a python function to find the longest substring in s with at most k distinct characters.\n    '''\n    if len(s) == 0 or k == 0:\n        return ''\n    start = 0\n    max_len = 0\n    char_freq = {}\n    for end in range(len(s)):\n        if s[end] not in char_freq:\n            char_freq[s[end]] = 0\n        char_freq[s[end]] = char_freq[s[end]] + 1\n        while len(char_freq) > k:\n            if char_freq[s[start]] == 1:\n                del char_freq[s[start]]\n            else:\n                char_freq[s[start]] = char_freq[s[start]] - 1\n            start = start + 1\n        max_len = max(max_len, end-start + 1)\n    return s[start:start+max_len]\ndef contains_duplicate(s):\n    '''\n    Write a python function to check whether a string contains duplicate characters or not. \n    '''\n    return len(s)!= len(set(s))\ndef reverse_words_in_a_string(s):\n    '''\n    Write a python function to reverse words in a given string. \n    '''\n    return''.join(s.split()[::-1])\ndef reverse_words_in_a_string_2(s):\n    '''\n    Write a python function to reverse words in a given string. \n    '''\n    return''.join(s.split(' ')[::-1])\ndef palindrome_permutation(s):\n    '''\n    Write a python function to check whether a string is a permutation of a palindrome or not. \n    '''\n    d = defaultdict(int)\n    for i in s:\n        d[i] = d[i] + 1\n    flag = True\n    for i in d.values():\n        if i % 2!= 0:\n            flag = False\n            break\n    return flag\ndef find_anagrams_3(s, d):\n    '''\n    Write a python function to find all anagrams of a string in a dictionary. \n    '''\n    from collections import defaultdict\n    anagrams = defaultdict(list)\n    for word in d:\n        temp = sort_string(word)\n        if len(s) == len(temp):\n            if temp in anagrams:\n                anagrams[temp].append(word)\n            else:\n                anagrams[temp] = [word]\n    return anagrams\ndef is_anagram_3(s, d):\n    '''\n    Write a python function to check whether a string is an anagram of a dictionary word or not. \n    '''\n    from collections import defaultdict\n    anagrams = defaultdict(list)\n    for word in d:\n        temp = sort_string(word)\n        if len(s) == len(temp):\n            if temp in anagrams:\n                anagrams[temp].append(word)\n            else:\n                anagrams[temp] = [word]\n    return s in anagrams\ndef count_longest_increasing_subsequence(nums):\n    '''\n    Write a python function to count the number of longest increasing sub-sequence of a given array. \n    '''\n    dp = [1]*len(nums)\n    for i in range(1, len(nums)):\n        for j in range(0, i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return ma"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i,n):\n            if s[i:j+1].isdigit():\n                d[int(s[i:j+1])] += 1\n    return sum([d[i] for i in d])\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    length = len(s)\n    if length == 0:\n        return 0\n    dic = defaultdict(int)\n    res = 0\n    for i in range(length):\n        for j in range(i+1, length+1):\n            if (j-i) > 1:\n                dic[str(sum([int(i) for i in s[i:j]]))] += 1\n    for key, val in dic.items():\n        if val > 0:\n            res += 1\n    return res\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) <= 0:\n        return 0\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        count += count_Pairs(s, i, i)\n        count += count_Pairs(s, i, i+1)\n    return count\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 1:\n        return xs[0]\n    else:\n        return xs[0] if xs[0] < xs[1] else xs[1]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs == []:\n        return None\n    m = xs[0]\n    for x in xs:\n        if x < m:\n            m = x\n    return m\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    \n    if not xs:\n        return None\n    \n    smallest_num = xs[0]\n    for x in xs[1:]:\n        if x < smallest_num:\n            smallest_num = x\n    \n    return smallest_num\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    tuple_list = []\n    for i in range(len(test_list)):\n        tuple_list.append(tuple(test_list[i]))\n    tuple_list = tuple(tuple_list)\n    max_diff = 0\n    for i in range(len(tuple_list)):\n        for j in range(len(tuple_list)):\n            if i == j:\n                continue\n            else:\n                if (tuple_list[i][0] - tuple_list[j][0]) > max_diff:\n                    max_diff = (tuple_list[i][0] - tuple_list[j][0])\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max([abs(a - b) for a, b in combinations(test_list, 2)])\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    length = len(test_list)\n    result = -1\n    for i in range(length):\n        for j in range(i+1,length):\n            if (test_list[i] == test_list[j]):\n                continue\n            else:\n                diff = abs(test_list[i] - test_list[j])\n                if diff > result:\n                    result = diff\n    return result\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    ans = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            ans = max(abs(test_list[i] - test_list[j]), ans)\n    return ans\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff_list = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                diff_list.append(abs(test_list[i] - test_list[j]))\n    return max(diff_list)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if abs(test_list[i] - test_list[j]) > max_diff:\n                max_diff = abs(test_list[i] - test_list[j])\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    length = len(test_list)\n    if length <= 1:\n        return 0\n    test_list.sort()\n    max_diff = 0\n    for i in range(length - 1):\n        max_diff = max(max_diff, test_list[i + 1] - test_list[i])\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max = -1\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            max = max if max > abs(test_list[i]-test_list[j]) else abs(test_list[i]-test_list[j])\n    return max\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list, this has O(nlogn) time complexity\n    test_list.sort()\n    \n    # Keep track of the maximum difference so far\n    max_difference = 0\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    count = 0\n    if len(test_list) <= 1:\n        return 0\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            count = max(count, abs(test_list[i] - test_list[j]))\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    #implement your function\n    print(sorted(subjectmarks, key=lambda x: x[1]))\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subject_marks = sorted(subjectmarks,key=lambda tup: tup[1])\n    return subject_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    l = list()\n    for x in subjectmarks:\n        l.append(x[1])\n    return l\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    import operator\n    print \"\\nSorted list of tuples by second value\"\n    sorted_tuples = sorted(subjectmarks, key=operator.itemgetter(1))\n    print sorted_tuples\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    marks = sorted(subjectmarks, key=itemgetter(1), reverse=True)\n    return marks\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    list_of_tuples=subjectmarks\n    list_of_tuples.sort(key=lambda x:x[1])\n    return list_of_tuples\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x:x[1])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # return sum([data_list])\n    return sum([recursive_list_sum(x) if isinstance(x, list) else x for x in data_list])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    #return sum([i for sublist in data_list for i in sublist])\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return recursive_list_sum(data_list[1:]) + data_list[0]\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # base case\n    if len(data_list) == 0:\n        return 0\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list)==0:\n        return 0\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    n = 0\n    for i in list:\n        if i > 0:\n            n = n + 1\n    return n\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for i in list:\n        if i > 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for item in list:\n        if item > 0:\n            pos += 1\n    return pos\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for number in list:\n        if number > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for num in list:\n        if num > 0:\n            pos += 1\n    return pos\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # We know bell number is a geometric sequence\n    # We can represent it by n/2 + 1\n    # But we may end up with an odd number of ways to put the number in the first and second half\n    # So we'll use a special case for n = 0\n    # Because we know there is one way to put 0 in the first and second half\n    # and n/2 + 1 ways to put n in the first half and n/2 ways to put n in the second half\n    # So the answer is (n/2 + 1) * (n/2)\n    if n == 0:\n        return 1\n    if n % 2 == 1:\n        return (n / 2) * (n / 2) + 1\n    else:\n        return n / 2 * (n / 2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return bell_number_memo(n)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_nums = [1,1]\n    for i in range(2,n+1):\n        bell_nums.append(bell_nums[i-1] + bell_nums[i-2])\n    return bell_nums[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_nums = [1, 1, 2, 5, 15, 52, 203, 877, 4140, 16796, 58786, 208012, 832040]\n    return bell_nums[n-1]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    count = 0\n    for i in xrange(n):\n        count += bell_number(i)\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    cache = [0 for i in range(n)]\n    cache[0] = 1\n    cache[1] = 1\n    for i in range(2,n):\n        cache[i] = cache[i-1] + cache[i-2]\n    return cache[n-1]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return bell_number(n - 1) + bell_number(n - 2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    numbers = [1] * (n+1)\n    for i in range(2, n+1):\n        numbers[i] = (numbers[i-1] + numbers[i-2])\n    \n    return numbers[n]\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if A[i]>A[i+1]:\n            return False\n    return True\n    \ndef is_Monotonic_with_conditions(A, N, M):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    A[0]<=A[1]<=A[2]<=A[3]<=...<=A[N-1]\n    '''\n    flag = True\n    for i in range(N-M+1):\n        for j in range(M):\n            if A[i+j]<=A[i+j+1]:\n                continue\n            else:\n                flag = False\n    return flag\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)<=2:\n        return True\n    else:\n        for i in range(0, len(A)-1):\n            if A[i]>A[i+1]:\n                return False\n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 2:\n        return True\n    if A[1] < A[0] and A[1] > A[2]:\n        return False\n    for i in range(2,len(A)):\n        if A[i-1] <= A[i] and A[i] > A[i+1]:\n            return False\n    return True\n    \n    \nprint(is_Monotonic([1,2,3,4,5,6,7,8,9]))\nprint(is_Monotonic([-1,1,5,6,-10,5,6,7,-8]))\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1: \n        return True\n    for i in xrange(1, len(A)):\n        if A[i] == A[i-1]:\n            continue\n        elif A[i] < A[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    #return True\n    \n    # check for monotonicity in the array \n    flag = 0 \n    for i in range(len(A)-1):\n        if A[i] < A[i+1]:\n            flag += 1\n            if flag > 1:\n                return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)==1:\n        return True\n    monotonic = True\n    for i in range(len(A)-1):\n        if A[i]>=A[i+1]:\n            monotonic = False\n            break\n    if monotonic:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    N = len(A)\n    if N == 0:\n        return True\n    mono = True\n    for i in range(N-1):\n        if A[i] <= A[i+1]:\n            continue\n        else:\n            mono = False\n    return mono\n    \ndef is_Strictly_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is strictly monotonic or not.\n    '''\n    N = len(A)\n    if N == 0:\n        return True\n    mono = True\n    for i in range(N-1):\n        if A[i] < A[i+1]:\n            continue\n        else:\n            mono = False\n    return mono\n    \ndef is_Normal(A):\n    '''\n    Write a python function to check whether the given array is normal or not.\n    '''\n    N = len(A)\n    if N == 0:\n        return True\n    for i in range(N-1):\n        if A[i] == A[i+1]:\n            return False\n    return True\n    \ndef is_Consecutive(A):\n    '''\n    Write a python function to check whether the given array is consecutive or not.\n    '''\n    N = len(A)\n    if N == 0:\n        return True\n    A.sort()\n    for i in range(N-1):\n        if A[i]!= A[i+1] - 1:\n            return False\n    return True\n    \ndef is_Consecutive_Bitwise(A):\n    '''\n    Write a python function to check whether the given array is consecutive or not.\n    '''\n    N = len(A)\n    if N == 0:\n        return True\n    for i in range(N-1):\n        if (A[i] ^ A[i+1])!= 1:\n            return False\n    return True\n    \ndef is_Not_Consecutive(A):\n    '''\n    Write a python function to check whether the given array is not consecutive or not.\n    '''\n    N = len(A)\n    if N == 0:\n        return True\n    A.sort()\n    for i in range(N-1):\n        if A[i]!= A[i+1] - 1:\n            return True\n    return False\n    \ndef is_Not_Consecutive_Bitwise(A):\n    '''\n    Write a python function to check whether the given array is not consecutive or not.\n    '''\n    N = len(A)\n    if N == 0:\n        return True\n    for i in range(N-1):\n        if (A[i] ^ A[i+1])!= 1:\n            return True\n    return False\n    \ndef is_Increasing(A):\n    '''\n    Write a python function to check whether the given array is increasing or not.\n    '''\n    N = len(A)\n    if N == 0:\n        return True\n    A.sort()\n    for i in range(N-1):\n        if A[i] >= A[i+1]:\n            return False\n    return True\n    \ndef is_Increasing_Bitwise(A):\n    '''\n    Write a python function to check whether the given array is increasing or not.\n    '''\n    N = len(A)\n    if N == 0:\n        return True\n    for i in range(N-1):\n        if (A[i] & A[i+1])!= 0:\n            return False\n    return True\n    \ndef is_Decreasing(A):\n    '''\n    Write a python function to check whether the given array is decreasing or not.\n    '''\n    N = len(A)\n    if N == 0:\n        return True\n    A.sort()\n    for i in range(N-1):\n        if A[i] <= A[i+1]:\n            return False\n    return True\n    \ndef is_Decreasing_Bitwise(A):\n    '''\n    Write a python function to check whether the given array is decreasing or not.\n    '''\n    N = len(A)\n    if N == 0:\n        return True\n    for i in range(N-1):\n        if (A[i] & A[i+1])!= 0:\n            return False\n    return True\n    \ndef is_Monotonic_Insertion(A):\n    '''\n    Write a python function to check whether the given array is monotonic insertion or not.\n    '''\n    N = len(A)\n    if N == 0:\n        return True\n    for i in range(1, N):\n        if A[i-1] > A[i]:\n            return False\n    return True\n    \ndef is_Monotonic_Insertion_Bitwise(A):\n    '''\n    Write a python function to check whether the given array is monotonic insertion or not.\n    '''\n    N = len(A)\n    if N == 0:\n        return True\n    for i in range(1, N):\n        if (A[i-1] >> A[i])!= 1:\n            return False\n    return True\n    \ndef is_Monotonic_Decreasing(A):\n    '''\n    Write a python function to check whether the given array is monotonic decreasing or not.\n    '''\n    N = len(A)\n    if N == 0:\n        return True\n    for i in range(N-1):\n        if A[i] >= A[i+1]:\n            return False\n    return True\n    \ndef is_Monotonic_Decreasing_Bitwise(A):\n    '''\n    Write a python function to check whether the given array is monotonic decreasing or not.\n    '''\n    N = len(A)\n    if N == 0:\n        return True\n    for i in range(N-1):\n        if (A[i] & A[i+1])!= 0:\n            return False\n    return True\n    \ndef is_Monotonic_Non_Decreasing(A):\n    '''\n    Write a python function to check whether the given array is monotonic non-decreasing or not.\n    '''\n    N = len(A)\n    if N == 0:\n        return True\n    for i in range(N-1):\n        if A[i] <= A[i+1]:\n            return False\n    return True\n    \ndef is_Monotonic_Non_Decreasing_Bitwise(A):\n    '''\n    Write a python function to check whether the given array is monotonic non-decreasing or not.\n    '''\n    N = len(A)\n    if N == 0:\n        return True\n    for i in range(N-1):\n        if (A[i] ^ A[i+1])!= 1:\n            return False\n    return True\n    \ndef is_Monotonic_Non_Increasing(A):\n    '''\n    Write a python function to check whether the given array is monotonic non-increasing or not.\n    '''\n    N = len(A)\n    if N == 0:\n        return True\n    for i in range(N-1):\n        if A[i] >= A[i+1]:\n            return False\n    return True\n    \ndef is_Monotonic_Non_Increasing_Bitwise(A):\n    '''\n    Write a python function to check whether the given array is monotonic non-increasing or not.\n    '''\n    N = len(A)\n    if N == 0:\n        return True\n    for i in range(N-1):\n        if (A[i] ^ A[i+1])!= 1:\n            return False\n    return True\n    \ndef is_Sorted(A):\n    '''\n    Write a python function to check whether the given array is sorted or not.\n    '''\n    N = len(A)\n    if N == 0:\n        return True\n    for i in range(N-1):\n        if A[i] > A[i+1]:\n            return False\n    return True\n    \ndef is_Sorted_Bitwise(A):\n    '''\n    Write a python function to check whether the given array is sorted or not.\n    '''\n    N = len(A)\n    if N == 0:\n        return True\n    for i in range(N-1):\n        if (A[i] "
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 2:\n        return True\n    else:\n        return (A[i] <= A[i-1] for i in range(1,len(A)))\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    def Monotonic(A):\n        if len(A) == 0:\n            return True\n        else:\n            return A[0] <= A[1] and A[len(A)-1] >= A[len(A)-2]\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i+1] for i in range(len(A)-1)) or all(A[i] >= A[i+1] for i in range(len(A)-1)))\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if s[0] in l:\n        return is_sublist(l[l.index(s[0]):], s[1:])\n    else:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    i = 0\n    j = 0\n    while i < len(l) and j < len(s):\n        if l[i] == s[j]:\n            j += 1\n        i += 1\n    if j == len(s):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in xrange(len(s)):\n        if s[i:] == l[i:]:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    slen = len(s)\n    if slen == 0:\n        return True\n    elif slen > len(l):\n        return False\n    else:\n        for i in range(0, len(l) - slen + 1):\n            if l[i:i + slen] == s:\n                return True\n        return False\n    \ndef test_is_sublist():\n    assert is_sublist([\"dog\", \"cat\", \"rat\"], \"toucan\") == True\n    assert is_sublist([\"dog\", \"cat\", \"rat\"], \"cat\") == True\n    assert is_sublist([\"dog\", \"cat\", \"rat\"], \"rat\") == True\n    assert is_sublist([\"dog\", \"cat\", \"rat\"], \"can\") == False\n    assert is_sublist([\"dog\", \"cat\", \"rat\"], \"toucan\") == False\n    assert is_sublist([\"dog\", \"cat\", \"rat\"], \"dog\") == True\n    assert is_sublist([\"dog\", \"cat\", \"rat\"], \"dogg\") == False\n    assert is_sublist([\"dog\", \"cat\", \"rat\"], \"dogcat\") == False\n    assert is_sublist([\"dog\", \"cat\", \"rat\"], \"dogcat\") == False\n    assert is_sublist([\"dog\", \"cat\", \"rat\"], \"dogcat\") == False\n    \ndef is_interleaved(l, s):\n    '''\n    Write a function to check whether an array A is interleaved with another array B.\n    A[1], A[2],..., A[n]\n    B[1], B[2],..., B[m]\n    The last element of A and the first element of B are in alternating order.\n    For example, A=[1,2,3,4] and B=[5,6,7,8] are the last element is 4 and the first element is 5 and alternate between them.\n    '''\n    slen = len(s)\n    if len(l) % slen!= 0:\n        return False\n    else:\n        for i in range(0, len(l) / slen):\n            if l[i * slen: (i + 1) * slen]!= s:\n                return False\n    return True\n    \ndef test_is_interleaved():\n    assert is_interleaved([1,2,3,4], [5,6,7,8]) == True\n    assert is_interleaved([1,2,3,4], [6,7,8,9]) == False\n    assert is_interleaved([1,2,3,4], [1,2,3]) == True\n    assert is_interleaved([1,2,3,4], [1,2,3,4,5]) == True\n    assert is_interleaved([1,2,3,4], [1,2,3]) == False\n    \ndef find_rotated_sorted_array_index(l, s):\n    '''\n    Write a function to find an index of an array where the given element is located.\n    If the array is sorted and rotated, the function returns -1.\n    '''\n    #s = sorted(l)\n    if not is_rotated_sorted_array(l):\n        return -1\n    else:\n        for i in range(0, len(l)):\n            if l[i] == s:\n                return i\n    return -1\n    \ndef test_find_rotated_sorted_array_index():\n    assert find_rotated_sorted_array_index([1,2,3,4,5], 1) == 0\n    assert find_rotated_sorted_array_index([4,5,6,7,0,1,2], 0) == 4\n    assert find_rotated_sorted_array_index([4,5,6,7,0,1,2], 2) == 6\n    assert find_rotated_sorted_array_index([4,5,6,7,0,1,2], 3) == -1\n    assert find_rotated_sorted_array_index([4,5,6,7,0,1,2], 4) == 0\n    assert find_rotated_sorted_array_index([4,5,6,7,0,1,2], 5) == 1\n    assert find_rotated_sorted_array_index([4,5,6,7,0,1,2], 6) == 2\n    assert find_rotated_sorted_array_index([4,5,6,7,0,1,2], 7) == 3\n    assert find_rotated_sorted_array_index([4,5,6,7,0,1,2], 8) == -1\n    assert find_rotated_sorted_array_index([4,5,6,7,0,1,2], 9) == -1\n    assert find_rotated_sorted_array_index([4,5,6,7,0,1,2], 10) == -1\n    assert find_rotated_sorted_array_index([4,5,6,7,0,1,2], 11) == -1\n    assert find_rotated_sorted_array_index([4,5,6,7,0,1,2], 12) == -1\n    assert find_rotated_sorted_array_index([4,5,6,7,0,1,2], 13) == -1\n    assert find_rotated_sorted_array_index([4,5,6,7,0,1,2], 14) == -1\n    \ndef is_rotated_sorted_array(l):\n    '''\n    Write a function to check whether an array A is rotated or not.\n    '''\n    if len(l) < 2:\n        return True\n    else:\n        for i in range(1, len(l)):\n            if l[i] < l[i - 1]:\n                return True\n        return False\n    \ndef test_is_rotated_sorted_array():\n    assert is_rotated_sorted_array([1,2,3,4]) == True\n    assert is_rotated_sorted_array([4,5,6,7]) == True\n    assert is_rotated_sorted_array([4,5,6,7,0]) == False\n    assert is_rotated_sorted_array([4,5,6,7,1,2]) == False\n    assert is_rotated_sorted_array([4,5,6,7,1,2,3]) == True\n    \ndef rotate_sorted_array(l):\n    '''\n    Write a function to rotate an array clockwise.\n    '''\n    temp = l[0]\n    for i in range(1, len(l)):\n        l[i - 1] = l[i]\n    l[len(l) - 1] = temp\n    return l\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s is None:\n        return True\n    if len(s) == 0:\n        return True\n    if len(l) == 0:\n        return False\n    if len(s) > len(l):\n        return False\n    if l[:len(s)] == s:\n        return True\n    return is_sublist(l[1:], s)\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    result = False\n    if s[0] in l:\n        if l.index(s[0]) + len(s) == len(l):\n            result = True\n    return result\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == []:\n        return True\n    elif s == []:\n        return False\n    else:\n        return is_sublist(l[1:], s[1:]) and l[0] == s[0]\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if type(l) is not list or type(s) is not list:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    first = l[0]\n    #start = 0\n    #end = 0\n    while first in s:\n        first = l[s.index(first)+1]\n        #end = s.index(first)\n        #if first == s[end+1]:\n            #return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(set(len(t) for t in Input)) == 1\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    List = []\n    for i in Input:\n        for j in i:\n            List.append(j)\n    List = set(List)\n    if len(List) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Result = True\n    tuple_list = Input\n    for i in range(len(tuple_list)):\n        if len(tuple_list[i])!= len(tuple_list[0]):\n            Result = False\n            break\n    return Result\n    \ndef find_intersecting_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have same values or not.\n    '''\n    Result = True\n    tuple_list = Input\n    for i in range(len(tuple_list)):\n        for j in range(len(tuple_list)):\n            if i!= j and tuple_list[i] == tuple_list[j]:\n                Result = False\n                break\n    return Result\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input = sorted(Input)\n    Len = len(Input[0])\n    for i in Input:\n        if len(i)!= Len:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Time Complexity: O(n^2)\n    n = len(Input)\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(set(x[0] for x in Input)) == 1\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    res = {}\n    for x in Input:\n        l = len(x)\n        if l in res:\n            res[l].append(x)\n        else:\n            res[l] = [x]\n    for x in res:\n        if len(res[x]) == 1:\n            return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    def find_equal(Input):\n        for i in range(len(Input)):\n            for j in range(1,len(Input)):\n                if len(Input[i])!=len(Input[j]):\n                    return False\n        return True\n    if Input==[]:\n        return True\n    if find_equal(Input):\n        return True\n    else:\n        return False\nprint(find_equal_tuple([]))\nprint(find_equal_tuple([(1,2,3),(5,6,7)]))\nprint(find_equal_tuple([(1,2,3,4,5),(5,6,7,8,9)]))\nprint(find_equal_tuple([(1,2,3,4,5),(5,6,7,8)]))\nprint(find_equal_tuple([(1,2,3,4,5),(5,6,7,8,9,0)]))"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!=len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            tmp = nums[i]\n            j = i - gap\n            while j >= 0 and nums[j] > tmp:\n                nums[j + gap] = nums[j]\n                j -= gap\n            nums[j + gap] = tmp\n        gap = gap // 2\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap!= 1 or swapped:\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(0, n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n    \n    def isSorted(nums):\n        for i in range(len(nums)-1):\n            if nums[i] > nums[i+1]:\n                return False\n        return True\n    \n    def comb_sort_recursive(nums, beg, end):\n        if end - beg <= 1:\n            return\n        \n        if isSorted(nums[beg:end]):\n            return\n        \n        swap(beg, beg+get_pivot_index(nums[beg:end]))\n        \n        comb_sort_recursive(nums, beg, end-1)\n        comb_sort_recursive(nums, beg+1, end)\n    \n    def get_pivot_index(nums):\n        beg = 0\n        end = len(nums) - 1\n        while beg < end:\n            mid = int((beg + end) / 2)\n            if nums[mid] < nums[end]:\n                end = mid\n            elif nums[mid] > nums[beg]:\n                beg = mid + 1\n            else:\n                beg += 1\n        return beg\n    \n    comb_sort_recursive(nums, 0, len(nums))\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(len(nums) - 1):\n            if nums[i] > nums[i + 1]:\n                swapped = True\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap/1.3))\n        swapped = False\n        for i in range(len(nums)-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 0 or len(nums) == 1:\n        return nums\n    for i in xrange(len(nums)):\n        for j in xrange(len(nums)):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for start_pos in range(len(nums)):\n        if start_pos == 0:\n            current_pos = start_pos\n        else:\n            break\n        for index in range(start_pos+1, len(nums)):\n            if nums[index] < nums[current_pos]:\n                current_pos = index\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = 1\n    swapped = True\n    while gap < len(nums) and swapped:\n        swapped = False\n        gap = gap * 5 + 1\n    while gap > 0:\n        swapped = False\n        for i in range(gap, len(nums)):\n            curr = nums[i]\n            j = i\n            while j >= gap and nums[j - gap] > curr:\n                nums[j] = nums[j - gap]\n                j -= gap\n                swapped = True\n            nums[j] = curr\n        gap = int(gap / 5)\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # length of the list\n    length = len(nums)\n    # we will compare every two adjacent elements\n    for i in range(length):\n        # we will compare the current number with all other elements\n        for j in range(i+1, length):\n            # if the current element is greater than the next element\n            if nums[j] < nums[i]:\n                # swap the elements\n                nums[i], nums[j] = nums[j], nums[i]\n    # return the sorted list\n    return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    lst=[]\n    for i in range(int(math.sqrt(n))+1):\n        lst.append(int(math.pow(i,2)))\n    for j in range(len(lst)):\n        for k in range(len(lst)):\n            if lst[j]+lst[k]==n:\n                return True\n    return False\n    \ndef fizzbuzz_Square(n): \n    '''\n    Write a python function to check whether the given number is divisible by both 3 and 5 or not.\n    '''\n    if (n%3==0) and (n%5==0):\n        return \"fizzbuzz\"\n    elif (n%3==0):\n        return \"fizz\"\n    elif (n%5==0):\n        return \"buzz\"\n    else:\n        return n\n    \ndef palindrome_Square(n): \n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    s=str(n)\n    l=len(s)\n    for i in range(l//2):\n        if s[i]!=s[l-i-1]:\n            return False\n    return True\n    \ndef narcissistic_Square(n): \n    '''\n    Write a python function to check whether the given number is narcissistic or not.\n    '''\n    sum=0\n    while n>0:\n        sum=sum+(n%10)**len(str(n))\n        n=n//10\n    if sum==n:\n        return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0: return True\n    elif n < 0: return False\n    else: \n        for i in range(n/2 + 1):\n            if (i*i + i) == n:\n                return True\n            if (i*i + i) > n:\n                return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    k = int(math.sqrt(n))\n    l = k*k\n    if l==n:\n        return 'yes'\n    else:\n        return 'no'\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    #Since n will always be a positive number and n will always be a perfect square, we can convert the number to binary.\n    #We then see if the least significant bit is a zero or a one. If it is a zero, the number cannot be represented as the difference of two squares. \n    #If it is a one, we know that the least significant bit is a 1. If the number is greater than the largest square root of n, then we know that it is greater than the difference of two squares. \n    #If the number is less than the difference of two squares, then it must be greater than the square root of n. \n    return ((n & 1) == 1)\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if i*i + j*j == n:\n                print('Yes',i,j)\n                return \n            elif i*i + j*j > n:\n                break\n    print('No')\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i*i < n:\n        if n - i*i == i:\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0 or n == 1:\n        return True\n    if n <= 3:\n        return False\n    x = int(sqrt(n))\n    if x*x == n:\n        return True\n    else:\n        return False\n    \ndef palindrome(n):\n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    if n <= 9:\n        return True\n    if n > 100:\n        return False\n    rev = 0\n    while(n > 0):\n        rev = rev*10 + n%10\n        n = n/10\n    return n == rev\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def dif_Square_Internal(n):\n        root1, root2 = int(n**0.5), int(n**0.5)\n        if root1**2 == n:\n            return True\n        elif root2**2 == n:\n            return True\n        else:\n            return False\n    return dif_Square_Internal(n)\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return False\n    for i in range(1,n+1):\n        if i**2-n**2==i:\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    for i in range(1,int(math.sqrt(n))+1):\n        if (n - i*i) < 1:\n            return True\n    return False\n    \n    \ndef dif_Square_2(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    import math\n    for i in range(1,int(math.sqrt(n))+1):\n        if (n - i*i) < 1:\n            return True\n    return False\n    \n    \ndef dif_Square_3(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n**0.5 == int(n**0.5):\n        return True\n    return False\n    \n    \ndef add_numbers(a, b):\n    '''\n    Write a python function to add two numbers.\n    '''\n    \n    if (a == 0) or (b == 0):\n        return 0\n    \n    if (a < 0) and (b > 0):\n        return -(-a+b)\n    \n    if (a < 0) and (b < 0):\n        return -(abs(a)+abs(b))\n    \n    if (a > 0) and (b < 0):\n        return -(-a+b)\n    \n    if (a > 0) and (b > 0):\n        return a+b\n    \n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    colors = sorted(colors)\n    for pattern in patterns:\n        if len(pattern)!= len(colors):\n            return False\n        for i in xrange(len(pattern)):\n            if pattern[i]!= colors[i]:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) == 1:\n        return True\n    elif len(colors) == 0:\n        return False\n    else:\n        if patterns[0] == colors[0]:\n            return is_samepatterns(colors[1:], patterns[1:])\n        else:\n            return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return len(colors) == len(patterns) and all([colors[i] == patterns[i] for i in range(len(colors))])\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    flag = 0\n    pattern = patterns[0]\n    for i in range(len(patterns)):\n        if (len(pattern)!= len(patterns[i])):\n            flag = 1\n            break\n        for j in range(len(pattern)):\n            if pattern[j]!= patterns[i][j]:\n                flag = 1\n                break\n    if flag == 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if len(pattern) == 1:\n            if colors[pattern[0]][0]!= colors[pattern[0]][1]:\n                return False\n        else:\n            if colors[pattern[0]][0]!= colors[pattern[1]][1] or colors[pattern[0]][1]!= colors[pattern[2]][0]:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        for j in range(len(patterns)):\n            if patterns[j] == colors[i]:\n                return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) < len(patterns):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i] == 'R':\n            if (colors[i] == 'R' and colors[i+1] == 'G') or (colors[i] == 'G' and colors[i+1] == 'R'):\n                return False\n        elif patterns[i] == 'G':\n            if (colors[i] == 'G' and colors[i+1] == 'R') or (colors[i] == 'R' and colors[i+1] == 'G'):\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        for index in range(len(colors)):\n            if colors[index:index + len(pattern)] == pattern:\n                return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        for j in range(len(patterns[i])):\n            if patterns[i][j] == 'b' and colors[j]!= 'b':\n                return False\n            elif patterns[i][j] == 'r' and colors[j]!= 'r':\n                return False\n            elif patterns[i][j] == 'g' and colors[j]!= 'g':\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) < len(patterns):\n        return False\n    pattern = patterns[0]\n    for i in range(1, len(patterns)):\n        if pattern[i]!= colors[i]:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    #test_list = [(1,2),(1,3),(1,4),(1,5),(1,6),(1,7),(1,8),(1,9),(1,10),(1,11),(1,12)]\n    #K = 3\n    #test_list = [(2,3),(2,4),(2,5),(2,6),(2,7),(2,8),(2,9),(2,10),(2,11),(2,12)]\n    #K = 3\n    #test_list = [(3,4),(3,5),(3,6),(3,7),(3,8),(3,9),(3,10),(3,11),(3,12)]\n    #K = 3\n    #test_list = [(4,5),(4,6),(4,7),(4,8),(4,9),(4,10),(4,11),(4,12)]\n    #K = 3\n    #test_list = [(5,6),(5,7),(5,8),(5,9),(5,10),(5,11),(5,12)]\n    #K = 3\n    #test_list = [(6,7),(6,8),(6,9),(6,10),(6,11),(6,12)]\n    #K = 3\n    #test_list = [(7,8),(7,9),(7,10),(7,11),(7,12)]\n    #K = 3\n    #test_list = [(8,9),(8,10),(8,11),(8,12)]\n    #K = 3\n    #test_list = [(9,10),(9,11),(9,12)]\n    #K = 3\n    #test_list = [(10,11),(10,12)]\n    #K = 3\n    #test_list = [(11,12)]\n    #K = 3\n    #test_list = []\n    #K = 3\n    #test_list = [(12,13),(12,14),(12,15),(12,16),(12,17),(12,18)]\n    #K = 3\n    #test_list = [(13,14),(13,15),(13,16),(13,17),(13,18),(13,19)]\n    #K = 3\n    #test_list = [(14,15),(14,16),(14,17),(14,18),(14,19),(14,20)]\n    #K = 3\n    #test_list = [(15,16),(15,17),(15,18),(15,19),(15,20),(15,21)]\n    #K = 3\n    #test_list = [(16,17),(16,18),(16,19),(16,20),(16,21),(16,22)]\n    #K = 3\n    #test_list = [(17,18),(17,19),(17,20),(17,21),(17,22),(17,23)]\n    #K = 3\n    #test_list = [(18,19),(18,20),(18,21),(18,22),(18,23),(18,24)]\n    #K = 3\n    #test_list = [(19,20),(19,21),(19,22),(19,23),(19,24),(19,25)]\n    #K = 3\n    #test_list = [(20,21),(20,22),(20,23),(20,24),(20,25),(20,26)]\n    #K = 3\n    #test_list = [(21,22),(21,23),(21,24),(21,25),(21,26),(21,27)]\n    #K = 3\n    #test_list = [(22,23),(22,24),(22,25),(22,26),(22,27),(22,28)]\n    #K = 3\n    #test_list = [(23,24),(23,25),(23,26),(23,27),(23,28),(23,29)]\n    #K = 3\n    #test_list = [(24,25),(24,26),(24,27),(24,28),(24,29),(24,30)]\n    #K = 3\n    #test_list = [(25,26),(25,27),(25,28),(25,29),(25,30),(25,31)]\n    #K = 3\n    #test_list = [(26,27),(26,28),(26,29),(26,30),(26,31),(26,32)]\n    #K = 3\n    #test_list = [(27,28),(27,29),(27,30),(27,31),(27,32),(27,33)]\n    #K = 3\n    #test_list = [(28,29),(28,30),(28,31),(28,32),(28,33),(28,34)]\n    #K = 3\n    #test_list = [(29,30),(29,31),(29,32),(29,33),(29,34),(29,35)]\n    #K = 3\n    #test_list = [(30,31),(30,32),(30,33),(30,34),(30,35),(30,36)]\n    #K = 3\n    #test_list = [(31,32),(31,33),(31,34),(31,35),(31,36),(31,37)]\n    #K = 3\n    #test_list = [(32,33),(32,34),(32,35),(32,36),(32,37),(32,38)]\n    #K = 3\n    #test_list = [(33,34),(33,35),(33,36),(33,37),(33,38),(33,39)]\n    #K = 3\n    #test_list = [(34,35),(34,36),(34,37),(34,38),(34,39),(34,40)]\n    #K = 3\n    #test_list = [(35,36),(35,37),(35,38),(35,39),(35,40),(35,41)]\n    #K = 3\n    #test_list = [(36,37),(36,38),(36,39),(36,40),(36,41),(36,42)]\n    #K = 3\n    #test_list = [(37,38),(37,39),(37,40),(37,41),(37,42),(37,43)]\n    #K = 3\n    #test_list = [(38,39),(38,40),(38,41),(38,42),(38,43),(38,44)]\n    #K = 3\n    #test_list = [(39,40),(39,41),(39,42),(39,43),(39,44),(39,45)]\n    #K = 3\n    #test_list = [(40,41),(40,42),(40,43),(40,44),(40,45),(40,46)]\n    #K = 3\n    #test_list = [(41,42),(41,43),(41,44),(41,45),(41,46),(41,47)]\n    #K = 3\n    #test_list = [(42,43),(42,44),(42,45),(42,46),(42,47),(42,48)]\n    #K = 3\n    #test_list = [(43,44),(43,45),(43,46),(43,47),(43,48),(43,49)]\n    #K = 3\n    #test_list = [(44,45),(44,46),(44,47),(44,48),(44,49),(44,50)]\n    #K = 3\n    #test_list = [(45,46),(45,47),(45,48),(45,49),(45,50),(45,51)]\n    #K = 3\n    #test_list = [(46,47),(46,48),(46,49),(46,50),(46,51),(46,52)]\n    #K = 3\n    #test_list = [(47,4"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # write your code here\n    res = []\n    for item in test_list:\n        summ = 0\n        for i in range(len(item)):\n            summ = summ + item[i]\n        if summ % K == 0:\n            res.append(item)\n    return res\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for item in test_list:\n        if item[0] % K == 0 and item[1] % K == 0:\n            res.append(item)\n    return res\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    temp_list = []\n    for tup in test_list:\n        if all(tup[i]%K == 0 for i in range(len(tup))):\n            temp_list.append(tup)\n    return temp_list\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    temp_list = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            temp_list.append(t)\n    return temp_list\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    output_list = []\n    for i in range(len(test_list)):\n        if len(test_list[i]) == K:\n            output_list.append(test_list[i])\n    return output_list\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    div_tuples = []\n    for tup in test_list:\n        if all(k % tup[i] == 0 for i in range(K) for k in tup[i+1:]):\n            div_tuples.append(tup)\n    return div_tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # @param test_list : list of tuples, where each tuple is a collection of integers\n    # @param K : positive integer\n    # @return : a list of tuples, each tuple is a collection of integers\n    final_list = []\n    for each_tuple in test_list:\n        if len(each_tuple) == K:\n            if all(element % K == 0 for element in each_tuple):\n                final_list.append(each_tuple)\n    return final_list\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x%K==0 for x in tup):\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisble = []\n    for test in test_list:\n        if (all(x % K == 0 for x in test)):\n            divisble.append(test)\n    return divisble\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_palindrome(n):\n    '''\n    Write a python function to find whether a number is palindrome or not.\n    '''\n    n_reverse = reverse(n)\n    if n_reverse == n:\n        return True\n    else:\n        return False\ndef is_pandigital(n):\n    '''\n    Write a python function to check whether a number is pandigital or not.\n    '''\n    n = str(n)\n    n_list = [int(i) for i in n]\n    n_list_set = set(n_list)\n    if len(n_list) == len(n_list_set) == 9:\n        return True\n    else:\n        return False\ndef reverse(n):\n    '''\n    Write a python function to reverse a number.\n    '''\n    n_reverse = 0\n    while n!= 0:\n        n_reverse = (n_reverse * 10) + (n % 10)\n        n = n // 10\n    return n_reverse\ndef is_prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n    return True\ndef primes(n):\n    '''\n    Write a python function to find all the prime numbers less than n.\n    '''\n    if n < 2:\n        return []\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [2, 3]\n    if n % 2 == 0:\n        return primes(n - 1)\n    prime_list = primes(n - 1)\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            break\n        i = i + 6\n    if i * i > n:\n        return prime_list + [n]\n    return prime_list + [i, n // i]\ndef fizz_buzz(n):\n    '''\n    Write a python function to print the fizzbuzz of a number.\n    '''\n    if n % 3 == 0 and n % 5 == 0:\n        return 'FizzBuzz'\n    elif n % 3 == 0:\n        return 'Fizz'\n    elif n % 5 == 0:\n        return 'Buzz'\n    else:\n        return n\ndef find_max_divisors(n):\n    '''\n    Write a python function to find the maximum divisors of a number.\n    '''\n    if n % 2 == 0:\n        return 2\n    divisors = 1\n    for i in range(3, n, 2):\n        if n % i == 0:\n            divisors = i\n    return divisors\ndef is_armstrong(n):\n    '''\n    Write a python function to check whether a number is armstrong or not.\n    '''\n    n_reverse = reverse(n)\n    if n == n_reverse:\n        return True\n    else:\n        return False\ndef is_abundant(n):\n    '''\n    Write a python function to check whether a number is abundant or not.\n    '''\n    if sum(range(1, n // 2)) > n:\n        return True\n    else:\n        return False\ndef is_abundant_abundant(n):\n    '''\n    Write a python function to check whether a number is abundant or not.\n    '''\n    n_sum = sum(range(1, n // 2))\n    if n_sum > n:\n        return True\n    else:\n        return False\ndef sum_digits(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return (n % 10) + sum_digits(n // 10)\ndef count_digits(n):\n    '''\n    Write a python function to find the count of the digits of a number.\n    '''\n    count = 0\n    while n!= 0:\n        count = count + 1\n        n = n // 10\n    return count\ndef count_occurences(n, i):\n    '''\n    Write a python function to find the count of the number of times a digit occurs in a number.\n    '''\n    count = 0\n    while n!= 0:\n        if n % 10 == i:\n            count = count + 1\n        n = n // 10\n    return count\ndef count_occurences_array(n, i):\n    '''\n    Write a python function to find the count of the number of times a digit occurs in a number.\n    '''\n    array = [0 for i in range(10)]\n    while n!= 0:\n        array[n % 10] = array[n % 10] + 1\n        n = n // 10\n    return array[i]\ndef is_prime_array(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    array = [True for i in range(n + 1)]\n    for i in range(2, n + 1):\n        if array[i] == True:\n            j = 2\n            while i * j <= n:\n                array[i * j] = False\n                j = j + 1\n    return array[n]\ndef sort_digits(n):\n    '''\n    Write a python function to sort the digits of a number.\n    '''\n    n_digits = count_digits(n)\n    n_digits_array = [0 for i in range(n_digits)]\n    while n!= 0:\n        n_digits_array[n % 10] = n_digits_array[n % 10] + 1\n        n = n // 10\n    i = 0\n    while i < n_digits:\n        j = 0\n        while j < n_digits_array[i]:\n            n = n + (j + 1) * 10 ** (n_digits - i - 1)\n            j = j + 1\n        i = i + 1\n    return n\ndef is_pandigital_permutation(n):\n    '''\n    Write a python function to check whether a number is pandigital or not.\n    '''\n    n_digits = count_digits(n)\n    n_digits_array = [0 for i in range(n_digits)]\n    while n!= 0:\n        n_digits_array[n % 10] = n_digits_array[n % 10] + 1\n        n = n // 10\n    i = 0\n    while i < n_digits:\n        j = 0\n        while j < n_digits_array[i]:\n            n = n + (j + 1) * 10 ** (n_digits - i - 1)\n            j = j + 1\n        i = i + 1\n    n_reverse = reverse(n)\n    if n == n_reverse:\n        return True\n    else:\n        return False\ndef is_palindrome_permutation(n):\n    '''\n    Write a python function to check whether a number is palindrome permutation or not.\n    '''\n    n_digits = count_digits(n)\n    n_digits_array = [0 for i in range(n_digits)]\n    while n!= 0:\n        n_digits_array[n % 10] = n_digits_array[n % 10] + 1\n        n = n // 10\n    i = 0\n    while i < n_digits:\n        j = 0\n        while j < n_digits_array[i]:\n            n = n + (j + 1) * 10 ** (n_digits - i - 1)\n            j = j + 1\n        i = i + 1\n    n_reverse = reverse(n)\n    if n == n_reverse:\n        return True\n    else:\n        return False\ndef is_super_pandigital(n):\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11 == 0): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n    \ndef test_is_Diff():\n    assert is_Diff(21) == True\n    assert is_Diff(10) == True\n    assert is_Diff(2) == False\n    assert is_Diff(20) == False\n    \ndef is_even(n):\n    '''\n    Write a python function to find whether a number is even.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False\n    \ndef test_is_even():\n    assert is_even(4) == True\n    assert is_even(8) == False\n    assert is_even(10) == True\n    assert is_even(18) == False\n    \ndef is_vowel(n):\n    '''\n    Write a python function to find whether a letter is vowel or not.\n    '''\n    if n=='a' or n=='e' or n=='i' or n=='o' or n=='u':\n        return True\n    else:\n        return False\n    \ndef test_is_vowel():\n    assert is_vowel('a') == True\n    assert is_vowel('e') == True\n    assert is_vowel('i') == True\n    assert is_vowel('o') == True\n    assert is_vowel('u') == True\n    assert is_vowel('a') == True\n    assert is_vowel('o') == True\n    assert is_vowel('u') == True\n    assert is_vowel('d') == False\n    \ndef is_alpha(n):\n    '''\n    Write a python function to find whether a string is all alphabetical letters or not.\n    '''\n    for i in range(len(n)):\n        if n[i]>='a' and n[i]<='z':\n            continue\n        else:\n            return False\n    return True\n    \ndef test_is_alpha():\n    assert is_alpha('abc') == True\n    assert is_alpha('xyz') == False\n    assert is_alpha('abc123') == True\n    assert is_alpha('asdf') == False\n    assert is_alpha('1234') == True\n    assert is_alpha('b') == False\n    assert is_alpha('a') == True\n    \ndef is_digit(n):\n    '''\n    Write a python function to find whether a string is all digits or not.\n    '''\n    for i in range(len(n)):\n        if n[i]>='0' and n[i]<='9':\n            continue\n        else:\n            return False\n    return True\n    \ndef test_is_digit():\n    assert is_digit('12345') == True\n    assert is_digit('123456') == True\n    assert is_digit('012345') == True\n    assert is_digit('qwerty') == False\n    assert is_digit('qwerty12') == False\n    assert is_digit('123qwe') == False\n    \ndef is_lower(n):\n    '''\n    Write a python function to find whether a string is all lowercase or not.\n    '''\n    for i in range(len(n)):\n        if n[i]>='a' and n[i]<='z':\n            continue\n        else:\n            return False\n    return True\n    \ndef test_is_lower():\n    assert is_lower('abc') == True\n    assert is_lower('xyz') == False\n    assert is_lower('abcd') == False\n    assert is_lower('qwerty') == False\n    assert is_lower('qwerty12') == False\n    assert is_lower('qwerty1234') == False\n    assert is_lower('abc123') == True\n    assert is_lower('asdf') == False\n    assert is_lower('1234') == True\n    assert is_lower('b') == False\n    \ndef is_upper(n):\n    '''\n    Write a python function to find whether a string is all uppercase or not.\n    '''\n    for i in range(len(n)):\n        if n[i]>='A' and n[i]<='Z':\n            continue\n        else:\n            return False\n    return True\n    \ndef test_is_upper():\n    assert is_upper('abc') == False\n    assert is_upper('xyz') == False\n    assert is_upper('Abcd') == False\n    assert is_upper('Qwerty') == False\n    assert is_upper('Qwerty12') == False\n    assert is_upper('Qwerty1234') == False\n    assert is_upper('Abc123') == False\n    assert is_upper('asdf') == False\n    assert is_upper('1234') == False\n    assert is_upper('b') == False\n    \ndef is_alphanum(n):\n    '''\n    Write a python function to find whether a string is all alphabetical or numerical or both.\n    '''\n    for i in range(len(n)):\n        if n[i]>='a' and n[i]<='z':\n            continue\n        elif n[i]>='0' and n[i]<='9':\n            continue\n        else:\n            return False\n    return True\n    \ndef test_is_alphanum():\n    assert is_alphanum('abc') == False\n    assert is_alphanum('xyz') == False\n    assert is_alphanum('abcd') == False\n    assert is_alphanum('qwerty') == False\n    assert is_alphanum('qwerty12') == False\n    assert is_alphanum('qwerty1234') == False\n    assert is_alphanum('Abcd') == True\n    assert is_alphanum('qwerty1234') == True\n    assert is_alphanum('abc123') == True\n    assert is_alphanum('asdf') == False\n    assert is_alphanum('1234') == True\n    assert is_alphanum('b') == False\n    \ndef is_alpha_num(n):\n    '''\n    Write a python function to find whether a string is alphanumeric or not.\n    '''\n    for i in range(len(n)):\n        if n[i]>='a' and n[i]<='z':\n            continue\n        elif n[i]>='0' and n[i]<='9':\n            continue\n        else:\n            return False\n    return True\n    \ndef test_is_alpha_num():\n    assert is_alpha_num('abc') == True\n    assert is_alpha_num('xyz') == False\n    assert is_alpha_num('abcd') == False\n    assert is_alpha_num('qwerty') == False\n    assert is_alpha_num('qwerty12') == False\n    assert is_alpha_num('qwerty1234') == False\n    assert is_alpha_num('Abcd') == True\n    assert is_alpha_num('qwerty1234') == True\n    assert is_alpha_num('abc123') == True\n    assert is_alpha_num('asdf') == False\n    assert is_alpha_num('1234') == True\n    assert is_alpha_num('b') == False\n    \ndef is_alphabet(n):\n    '''\n    Write a python function to find whether a string is all alphabetical or not.\n    '''\n    for i in range(len(n)):\n        if n[i]>='a' and n[i]<='z':\n            continue\n        else:\n            return False\n    return True\n    \ndef test_is_alphabet():\n    assert is_alphabet('abc') == True\n    assert is_alphabet('xyz') == False\n    assert is_alphabet('abcd') == False\n    assert is_alphabet('qwerty') == False\n    assert is_alphabet('qwerty12') == False\n    assert is_alphabet('qwerty1234') == False\n    assert is_alphabet('Abcd') == True\n    assert is_alphabet('qwerty1234') == True\n    assert is_alphabet('abc123') == True\n    assert is_alphabet('asdf') == False\n    assert is_alphabet('1234') == True\n    assert i"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # divisible by 11\n    if (n % 11) == 0:\n        print(\"True\")\n    else:\n        print(\"False\")\n        "
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\ndef is_divisible(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_divisible_recursive(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n == 0:\n        return True\n    elif n % 11 == 0:\n        return True\n    else:\n        return is_divisible_recursive(n - 11)\ndef get_unique_items(list1, list2):\n    '''\n    Write a python function to find the common items between two lists.\n    '''\n    return list(set(list1).intersection(list2))\ndef get_unique_items_recursive(list1, list2):\n    '''\n    Write a python function to find the common items between two lists.\n    '''\n    if list1 == []:\n        return list2\n    elif list2 == []:\n        return list1\n    elif list1[0] == list2[0]:\n        return [list1[0]] + get_unique_items_recursive(list1[1:], list2[1:])\n    else:\n        return get_unique_items_recursive(list1[1:], list2)\ndef is_reverse(n):\n    '''\n    Write a python function to check whether a given number is a palindrome number or not.\n    '''\n    temp = n\n    rev = 0\n    while temp!= 0:\n        rev = rev * 10 + temp%10\n        temp = temp/10\n    if n == rev:\n        return True\n    else:\n        return False\ndef is_reverse_recursive(n):\n    '''\n    Write a python function to check whether a given number is a palindrome number or not.\n    '''\n    if n == 0:\n        return True\n    elif n%10 == 0:\n        return False\n    else:\n        return is_reverse_recursive(n/10)\ndef is_prime(n):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_recursive(n):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        return is_prime_recursive(n - 1)\ndef get_factors(n):\n    '''\n    Write a python function to find the factors of a given number.\n    '''\n    if n == 1:\n        return []\n    elif n == 2:\n        return [2]\n    else:\n        list = []\n        for i in range(1,n+1):\n            if n % i == 0:\n                list.append(i)\n        return list\ndef get_factors_recursive(n):\n    '''\n    Write a python function to find the factors of a given number.\n    '''\n    if n == 1:\n        return []\n    elif n == 2:\n        return [2]\n    else:\n        return get_factors_recursive(n - 1) + [n]\ndef is_perfect_number(n):\n    '''\n    Write a python function to check whether a given number is a perfect number or not.\n    '''\n    divisor_sum = 0\n    for i in range(1,n):\n        if n % i == 0:\n            divisor_sum += i\n    if divisor_sum == n:\n        return True\n    else:\n        return False\ndef is_perfect_number_recursive(n):\n    '''\n    Write a python function to check whether a given number is a perfect number or not.\n    '''\n    if n == 0:\n        return True\n    elif n % 10 == 0:\n        return False\n    else:\n        return is_perfect_number_recursive(n/10)\ndef is_perfect_number_recursive(n):\n    '''\n    Write a python function to check whether a given number is a perfect number or not.\n    '''\n    if n == 0:\n        return True\n    elif n % 10 == 0:\n        return False\n    else:\n        return is_perfect_number_recursive(n/10)\ndef get_perfect_number(n):\n    '''\n    Write a python function to find the nth perfect number.\n    '''\n    i = 1\n    count = 0\n    while count < n:\n        i += 1\n        if is_perfect_number(i):\n            count += 1\n    return i\ndef get_perfect_number_recursive(n):\n    '''\n    Write a python function to find the nth perfect number.\n    '''\n    if n == 1:\n        return 1\n    elif n % 10 == 0:\n        return 0\n    else:\n        return get_perfect_number_recursive(n/10) + 1\ndef is_perfect_number(n):\n    '''\n    Write a python function to check whether a given number is a perfect number or not.\n    '''\n    divisor_sum = 0\n    for i in range(1,n):\n        if n % i == 0:\n            divisor_sum += i\n    if divisor_sum == n:\n        return True\n    else:\n        return False\ndef is_perfect_number_recursive(n):\n    '''\n    Write a python function to check whether a given number is a perfect number or not.\n    '''\n    if n == 0:\n        return True\n    elif n % 10 == 0:\n        return False\n    else:\n        return is_perfect_number_recursive(n/10)\ndef is_perfect_number(n):\n    '''\n    Write a python function to check whether a given number is a perfect number or not.\n    '''\n    divisor_sum = 0\n    for i in range(1,n):\n        if n % i == 0:\n            divisor_sum += i\n    if divisor_sum == n:\n        return True\n    else:\n        return False\ndef is_perfect_number_recursive(n):\n    '''\n    Write a python function to check whether a given number is a perfect number or not.\n    '''\n    if n == 0:\n        return True\n    elif n % 10 == 0:\n        return False\n    else:\n        return is_perfect_number_recursive(n/10)\ndef get_perfect_number(n):\n    '''\n    Write a python function to find the nth perfect number.\n    '''\n    i = 1\n    count = 0\n    while count < n:\n        i += 1\n        if is_perfect_number(i):\n            count += 1\n    return i\ndef get_perfect_number_recursive(n):\n    '''\n    Write a python function to find the nth perfect number.\n    '''\n    if n == 1:\n        return 1\n    elif n % 10 == 0:\n        return 0\n    else:\n        return get_perfect_number_recursive(n/10) + 1\ndef is_perfect_number(n):\n    '''\n    Write a python function to check whether a given number is a perfect number or not.\n    '''\n    divisor_sum = 0\n    for i in range(1,n):\n        if n % i == 0:\n            divisor_sum += i\n    if divisor_sum == n:\n        return True\n    else:\n        return False\ndef is_perfect_number_recursive(n):\n    '''\n    Write a python function to check whether a given number is a perfect number or not.\n    '''\n    if n == 0:\n        return True\n    elif n % 10 == 0:\n        return False\n    else:\n        return is_perfect_number_recursive(n/10)\ndef get_perfect_number(n):\n    '''\n    Write a python function to find the nth perfect number."
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n    \ndef is_Divisible(n): \n    '''\n    Write a python function to find whether a number is divisible by 3, 5 and 7.\n    '''\n    return n%3 == 0 and n%5 == 0 and n%7 == 0\n    \ndef is_Prime(n): \n    '''\n    Write a python function to find whether a number is prime or not.\n    '''\n    if n < 2: return False\n    for i in range(2, n):\n        if n%i == 0:\n            return False\n    return True\n    \ndef is_Palindrome(n): \n    '''\n    Write a python function to find whether a number is palindrome or not.\n    '''\n    r = n\n    n = abs(n)\n    while n:\n        d = n % 10\n        n /= 10\n        if d!= r % 10:\n            return False\n        r /= 10\n    return True\n    \ndef get_Consecutive(n): \n    '''\n    Write a python function to find the number of consecutive digits in a number.\n    '''\n    s = str(n)\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            continue\n        else:\n            break\n    return i+1\n    \ndef is_Amicable(m,n): \n    '''\n    Write a python function to find whether two numbers are amicable or not.\n    '''\n    if m == n:\n        return False\n    if is_Prime(m) and is_Prime(n):\n        return get_Consecutive(m) == get_Consecutive(n) and m!= n\n    else:\n        return False\n        \ndef is_Armstrong(n): \n    '''\n    Write a python function to find whether a number is armstrong or not.\n    '''\n    s = str(n)\n    i = len(s)\n    t = 0\n    for i in s:\n        t += int(i)**i\n    return t == n\n    \ndef is_Lychrel(n): \n    '''\n    Write a python function to find whether a number is lychrel or not.\n    '''\n    for i in range(50):\n        n += int(str(n)[::-1])\n        if is_Prime(n):\n            return False\n    return True\n    \ndef is_Harshad(n): \n    '''\n    Write a python function to find whether a number is harshad or not.\n    '''\n    if is_Prime(n):\n        for i in range(1, n):\n            if i*i > n:\n                break\n            if n%i == 0:\n                return False\n    return True\n    \ndef is_Panagram(n): \n    '''\n    Write a python function to find whether a number is panagram or not.\n    '''\n    s = str(n)\n    for i in 'abcdefghijklmnopqrstuvwxyz':\n        if i not in s:\n            return False\n    return True\n    \ndef is_Hexagonal(n): \n    '''\n    Write a python function to find whether a number is hexagonal or not.\n    '''\n    if is_Prime(n):\n        if n%4 == 1:\n            return True\n        elif n%4 == 3:\n            return True\n        else:\n            return False\n    else:\n        return False\n    \ndef is_Triangular(n): \n    '''\n    Write a python function to find whether a number is triangular or not.\n    '''\n    if is_Prime(n):\n        return int(n*(n+1)/2) == n\n    else:\n        return False\n    \ndef is_Pentagonal(n): \n    '''\n    Write a python function to find whether a number is pentagonal or not.\n    '''\n    if is_Prime(n):\n        if n%2 == 0:\n            return int(n*(3*n-1)/2) == n\n        else:\n            return int(n*(5*n+1)/4) == n\n    else:\n        return False\n    \ndef is_Heptagonal(n): \n    '''\n    Write a python function to find whether a number is heptagonal or not.\n    '''\n    if is_Prime(n):\n        if n%2 == 0:\n            return int(n*(7*n-1)/2) == n\n        else:\n            return int(n*(7*n+1)/4) == n\n    else:\n        return False\n    \ndef is_Octagonal(n): \n    '''\n    Write a python function to find whether a number is octagonal or not.\n    '''\n    if is_Prime(n):\n        return int(n*(3*n-2)/2) == n\n    else:\n        return False\n    \ndef is_Hexagonal_Square(n): \n    '''\n    Write a python function to find whether a number is hexagonal square or not.\n    '''\n    if is_Prime(n):\n        return int(n*(2*n-1)) == n**2\n    else:\n        return False\n    \ndef is_Hexagonal_Cube(n): \n    '''\n    Write a python function to find whether a number is hexagonal cube or not.\n    '''\n    if is_Prime(n):\n        return int(n*(8*n-1)/2) == n**3\n    else:\n        return False\n    \ndef is_Triangular_Square(n): \n    '''\n    Write a python function to find whether a number is triangular square or not.\n    '''\n    if is_Prime(n):\n        return int(n*(n+1)*(2*n-1)/6) == n**2\n    else:\n        return False\n    \ndef is_Hexagonal_Cube_Prime(n): \n    '''\n    Write a python function to find whether a number is hexagonal cube prime or not.\n    '''\n    if is_Prime(n) and is_Hexagonal_Cube(n):\n        return int(n*(5*n+1)/4) == n**3\n    else:\n        return False\n    \ndef is_Hexagonal_Cube_Number(n): \n    '''\n    Write a python function to find whether a number is hexagonal cube number or not.\n    '''\n    if is_Prime(n) and is_Hexagonal_Cube(n):\n        return int(n*(3*n-1)/2) == n**3\n    else:\n        return False\n    \ndef is_Hexagonal_Cube_Prime_Prime(n): \n    '''\n    Write a python function to find whether a number is hexagonal cube prime prime or not.\n    '''\n    if is_Prime(n) and is_Hexagonal_Cube_Prime(n):\n        return int(n*(7*n-1)/2) == n**3\n    else:\n        return False\n    \ndef is_Hexagonal_Cube_Prime_Prime_Prime(n): \n    '''\n    Write a python function to find whether a number is hexagonal cube prime prime prime or not.\n    '''\n    if is_Prime(n) and is_Hexagonal_Cube_Prime_Prime(n):\n        return int(n*(5*n+1)/4) == n**3\n    else:\n        return False\n    \ndef is_Octagonal_Square(n): \n    '''\n    Write a python function to find whether a number is octagonal square or not.\n    '''\n    if is_Prime(n):\n        return int(n*(3*n-2)) == n**2\n    else:\n        return False\n    \ndef is_Octagonal_Cube(n): \n    '''\n    Write a python function to find whether a number is octagonal cube or not.\n    '''\n    if is_Prime(n):\n        return int(n*(2*n-1)) == n**3\n    else:\n        return False\n    \ndef is_Hexagonal_Square_Prime(n): \n    '''\n    Write a python function to find whether a number is hexagonal square prime or not.\n    '''\n    if is_Prime(n) and is_"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n    \ndef is_Div(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n        \ndef is_divisible(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n        \ndef is_Divisible(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n        \ndef is_divisiable(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n        \ndef is_divisible_by(n, m): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % m == 0: \n        return True\n    else: \n        return False\n        \ndef is_divisible_by(n, m): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % m == 0: \n        return True\n    else: \n        return False\n        \ndef is_divisible_by(n, m): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % m == 0: \n        return True\n    else: \n        return False\n        \ndef is_divisible_by(n, m): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % m == 0: \n        return True\n    else: \n        return False\n        \ndef is_divisible_by(n, m): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % m == 0: \n        return True\n    else: \n        return False\n        \ndef is_divisible_by(n, m): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % m == 0: \n        return True\n    else: \n        return False\n        \ndef is_divisible_by(n, m): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % m == 0: \n        return True\n    else: \n        return False\n        \ndef is_divisible_by(n, m): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % m == 0: \n        return True\n    else: \n        return False\n        \ndef is_divisible_by(n, m): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % m == 0: \n        return True\n    else: \n        return False\n        \ndef is_divisible_by(n, m): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % m == 0: \n        return True\n    else: \n        return False\n        \ndef is_divisible_by(n, m): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % m == 0: \n        return True\n    else: \n        return False\n        \ndef is_divisible_by(n, m): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % m == 0: \n        return True\n    else: \n        return False\n        \ndef is_divisible_by(n, m): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % m == 0: \n        return True\n    else: \n        return False\n        \ndef is_divisible_by(n, m): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % m == 0: \n        return True\n    else: \n        return False\n        \ndef is_divisible_by(n, m): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % m == 0: \n        return True\n    else: \n        return False\n        \ndef is_divisible_by(n, m): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % m == 0: \n        return True\n    else: \n        return False\n        \ndef is_divisible_by(n, m): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % m == 0: \n        return True\n    else: \n        return False\n        \ndef is_divisible_by(n, m): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % m == 0: \n        return True\n    else: \n        return False\n        \ndef is_divisible_by(n, m): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % m == 0: \n        return True\n    else: \n        return False\n        \ndef is_divisible_by(n, m): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % m == 0: \n        return True\n    else: \n        return False\n        \ndef is_divisible_by(n, m): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % m == 0: \n        return True\n    else: \n        return False\n        \ndef is_divisible_by(n, m): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % m == 0: \n        return True\n    else: \n        return False\n        \ndef is_divisible_by(n, m): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % m == 0: \n        return True\n    else: \n        return False\n        \ndef is_divisible_by(n, m): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % m == 0: \n        return True\n    else: \n        return False\n        \ndef is_divisible_by(n, m): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % m == 0: \n        return True\n    else: \n        return False\n        \ndef is_divisible_by(n, m): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % m == 0: \n        return True\n    else: \n        return False\n        \ndef is_divisible_by(n, m): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % m == 0: \n        return True\n    else: \n        return False\n        \ndef is_divisible_by(n, m): \n    '''\n    Write "
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print 'The length of word is even'\n    else:\n        print 'The length of word is odd'\n    return\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1 \n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==0\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0: \n        return \"even\"\n    else: \n        return \"odd\"\n    \ndef is_vowel(s): \n    '''\n    Write a python function to check whether the first letter of the word is a vowel or not.\n    '''\n    if s[0] in 'aeiou':\n        return 'True'\n    else:\n        return 'False'\n    \ndef vowel_count(s): \n    '''\n    Write a python function to count the number of vowels in a word. \n    '''\n    v=0\n    for i in s: \n        if i in 'aeiou': \n            v+=1\n    return v\n    \ndef count_digit(s): \n    '''\n    Write a python function to count the number of digits in a word. \n    '''\n    n=0\n    for i in s: \n        if i.isdigit(): \n            n+=1\n    return n\n    \ndef palindrome(s): \n    '''\n    Write a python function to check whether a word is a palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef rotate_word(s): \n    '''\n    Write a python function to check whether the given word is a rotate word or not.\n    '''\n    if len(s) == 0: \n        return 'False'\n    else: \n        if s[-1] == s[0]: \n            return 'True'\n        else: \n            return 'False'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return (len(s) % 2) == 1\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        print('len(s) is odd')\n    else:\n        print('len(s) is even')\n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    if s == s[::-1]:\n        print('This is a palindrome')\n    else:\n        print('This is not a palindrome')\n        \ndef count_substring(string, sub_string):\n    '''\n    Write a python function to count the number of times a substring is repeated in a given string.\n    '''\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(sub_string)] == sub_string:\n            count = count + 1\n    print(count)\n    \ndef count_words(string):\n    '''\n    Write a python function to count the number of times a string occurs in another string.\n    '''\n    count = 0\n    s_list = string.split(' ')\n    for s in s_list:\n        if s in string:\n            count = count + 1\n    print(count)\n    \ndef is_pangram(string):\n    '''\n    Write a python function to check whether the given string is a pangram or not.\n    '''\n    if set(string.lower()) <= set('abcdefghijklmnopqrstuvwxyz'):\n        print('This is a pangram')\n    else:\n        print('This is not a pangram')\n    \ndef f_func(a,b,c):\n    '''\n    Write a python function to find the average of three numbers.\n    '''\n    return (a + b + c)/3\n    \ndef check_fib(n):\n    '''\n    Write a python function to check whether the given number is a Fibonacci number or not.\n    '''\n    if n <= 1:\n        print('No')\n    else:\n        if n == 2:\n            print('Yes')\n        else:\n            a = 0\n            b = 1\n            for i in range(2, n):\n                a, b = b, a+b\n                if a == n:\n                    print('Yes')\n                    break\n            else:\n                print('No')\n    \ndef first_non_repeating_letter(string):\n    '''\n    Write a python function to find the first non repeating letter in a string.\n    '''\n    for letter in string:\n        if string.count(letter) == 1:\n            return letter\n    return None\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # a tetrahedral number is a triangular number that is divisible by 4\n    return n * (n + 1) / 2\n    \ndef test_tetrahedral_number():\n    assert tetrahedral_number(0) == 0\n    assert tetrahedral_number(1) == 3\n    assert tetrahedral_number(2) == 7\n    assert tetrahedral_number(3) == 19\n    assert tetrahedral_number(4) == 37\n    assert tetrahedral_number(5) == 49\n    "
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    sieve = [True] * (n + 1)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if sieve[i]:\n            for j in range(i * i, n + 1, i * 2):\n                sieve[j] = False\n    return [2] + [i for i in range(3, n, 2) if sieve[i]]\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # There are 10 tetrahedral numbers\n    tetrahedral_number = 0\n    for i in range(1, 11):\n        tetrahedral_number += n * i\n    return tetrahedral_number\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    i = 1\n    while True:\n        if tetrahedral_number_list[i] == n:\n            return i\n        else:\n            i += 1\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)*(n+3)/6\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    return sum([factorial(n-i) for i in xrange(1, n+1)])\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n*(n+1)*(n+2))/6\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return tetrahedral_number(n - 1) + n\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)/6\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    nth = 0\n    for i in range(1,n+1):\n        nth += i**3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return (4/3)*pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\ndef sum_of_positives(n):\n    '''\n    Write a function to find the sum of all positive numbers in a list\n    '''\n    return sum(x for x in n if x>0)\ndef sum_of_positives_2(n):\n    '''\n    Write a function to find the sum of all positive numbers in a list\n    '''\n    return sum(x for x in n if x > 0)\ndef remove_duplicates(n):\n    '''\n    Write a function to remove duplicates in a list\n    '''\n    return list(set(n))\ndef remove_duplicates_2(n):\n    '''\n    Write a function to remove duplicates in a list\n    '''\n    return list(set(n))\ndef is_palindrome(n):\n    '''\n    Write a function to check whether a number is palindrome or not\n    '''\n    return str(n) == str(n)[::-1]\ndef is_palindrome_2(n):\n    '''\n    Write a function to check whether a number is palindrome or not\n    '''\n    return str(n) == str(n)[::-1]\ndef max_num(n):\n    '''\n    Write a function to find the maximum value of a list\n    '''\n    return max(n)\ndef max_num_2(n):\n    '''\n    Write a function to find the maximum value of a list\n    '''\n    return max(n)\ndef num_to_reverse(n):\n    '''\n    Write a function to reverse a number\n    '''\n    return int(str(n)[::-1])\ndef num_to_reverse_2(n):\n    '''\n    Write a function to reverse a number\n    '''\n    return int(str(n)[::-1])\ndef sum_of_squares(n):\n    '''\n    Write a function to calculate the sum of squares of a list\n    '''\n    return sum([x**2 for x in n])\ndef sum_of_squares_2(n):\n    '''\n    Write a function to calculate the sum of squares of a list\n    '''\n    return sum(x**2 for x in n)\ndef letter_freq(n):\n    '''\n    Write a function to calculate the frequency of letters in a word\n    '''\n    return {k: n.count(k) for k in n}\ndef letter_freq_2(n):\n    '''\n    Write a function to calculate the frequency of letters in a word\n    '''\n    return {k: n.count(k) for k in n}\ndef number_pairs(n):\n    '''\n    Write a function to calculate the number of pairs in a list\n    '''\n    return len([x for x in n if n.count(x)>1])\ndef number_pairs_2(n):\n    '''\n    Write a function to calculate the number of pairs in a list\n    '''\n    return len([x for x in n if n.count(x)>1])\ndef two_digit_num_to_word(n):\n    '''\n    Write a function to convert a two digit number to a word\n    '''\n    return {\n        0:'zero',\n        1:'one',\n        2:'two',\n        3:'three',\n        4:'four',\n        5:'five',\n        6:'six',\n        7:'seven',\n        8:'eight',\n        9:'nine'\n    }[n]\ndef two_digit_num_to_word_2(n):\n    '''\n    Write a function to convert a two digit number to a word\n    '''\n    return {\n        0: 'zero',\n        1: 'one',\n        2: 'two',\n        3: 'three',\n        4: 'four',\n        5: 'five',\n        6:'six',\n        7:'seven',\n        8: 'eight',\n        9: 'nine'\n    }[n]\ndef duplicate_count(n):\n    '''\n    Write a function to find the duplicate count of a list\n    '''\n    return sum([n.count(x) for x in set(n)])\ndef duplicate_count_2(n):\n    '''\n    Write a function to find the duplicate count of a list\n    '''\n    return sum([n.count(x) for x in set(n)])\ndef string_to_int(s):\n    '''\n    Write a function to convert a string to an integer\n    '''\n    return int(s)\ndef string_to_int_2(s):\n    '''\n    Write a function to convert a string to an integer\n    '''\n    return int(s)\ndef count_vowels(s):\n    '''\n    Write a function to count the number of vowels in a string\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return sum([1 for x in s.lower() if x in vowels])\ndef count_vowels_2(s):\n    '''\n    Write a function to count the number of vowels in a string\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return sum([1 for x in s.lower() if x in vowels])\ndef to_roman(n):\n    '''\n    Write a function to convert a number to roman numerals\n    '''\n    num = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n    ]\n    roman_num = ''\n    i = 0\n    while n > 0:\n        for j in range(n // num[i]):\n            roman_num += syb[i]\n            n -= num[i]\n        i += 1\n    return roman_num\ndef to_roman_2(n):\n    '''\n    Write a function to convert a number to roman numerals\n    '''\n    num = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n    ]\n    roman_num = ''\n    for i in range(len(num)):\n        count = n // num[i]\n        while count > 0:\n            roman_num += syb[i]\n            n -= num[i]\n            count -= 1\n    return roman_num\ndef is_member(x):\n    '''\n    Write a function to determine if a string is a member of a list\n    '''\n    return x in ['r', 'a', 'n', 't', 'y']\ndef is_member_2(x):\n    '''\n    Write a function to determine if a string is a member of a list\n    '''\n    return x in ['r', 'a', 'n', 't', 'y']\ndef is_member_3(x):\n    '''\n    Write a function to determine if a string is a member of a list\n    '''\n    return x in ['r', 'a', 'n', 't', 'y']\ndef is_member_4(x):\n    '''\n    Write a function to determine if a string is a member of a list\n    '''\n    return x in ['r', 'a', 'n', 't', 'y']\ndef is_member_5(x):\n    '''\n    Write a function to determine if a string is a member of a list\n    '''\n    return x in ['r', 'a', 'n', 't', 'y']\ndef is_member_6(x):\n    '''\n    Write a function to determine if a string is a member of a list\n    '''\n    return x in ['r', 'a', 'n', 't', 'y']\ndef is_member_7"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4.0/3.0*math.pi*(r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_sphere_v1(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume_sphere_v2(r):\n    return (4/3)*math.pi*r**3\ndef volume_sphere_v3(r):\n    return 4/3*math.pi*r**3\ndef volume_sphere_v4(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere(r):\n    return 4/3*math.pi*r**3\ndef volumetric_sphere_v1(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v2(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v3(r):\n    return 4/3*math.pi*r**3\ndef volumetric_sphere_v4(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v5(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v6(r):\n    return 4/3*math.pi*r**3\ndef volumetric_sphere_v7(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v8(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v9(r):\n    return 4/3*math.pi*r**3\ndef volumetric_sphere_v10(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v11(r):\n    return 4/3*math.pi*r**3\ndef volumetric_sphere_v12(r):\n    return 4/3*math.pi*r**3\ndef volumetric_sphere_v13(r):\n    return 4/3*math.pi*r**3\ndef volumetric_sphere_v14(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v15(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v16(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v17(r):\n    return 4/3*math.pi*r**3\ndef volumetric_sphere_v18(r):\n    return 4/3*math.pi*r**3\ndef volumetric_sphere_v19(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v20(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v21(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v22(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v23(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v24(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v25(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v26(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v27(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v28(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v29(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v30(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v31(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v32(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v33(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v34(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v35(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v36(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v37(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v38(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v39(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v40(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v41(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v42(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v43(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v44(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v45(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v46(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v47(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v48(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v49(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v50(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v51(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v52(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v53(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v54(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v55(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v56(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v57(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v58(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v59(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v60(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v61(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v62(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v63(r):\n    return (4/3)*math.pi*r**3\ndef volumetric_sphere_v64(r):\n    return (4/3)*math.p"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r*r*r\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = ((4.0/3.0)*math.pi*r**3)/3.0\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    if r<0:\n        return None\n    else:\n        v=4/3*math.pi*r*r*r\n        return v\nprint(volume_sphere(3))\nprint(volume_sphere(10))\nprint(volume_sphere(-3))\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = 3.1415926535\n    return 4/3 * pi * r**3\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return chr((sum(map(lambda x: ord(x), strr))) % 26 + 97)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for char in strr:\n        total += ord(char)\n    return total % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    num = 0\n    for i in strr:\n        num += ord(i)\n    return num % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return [chr(ord(i)+1) for i in strr]\ndef get_String(lst):\n    '''\n    Write a python function to find the string made by adding the ASCII value of all the characters of the given list modulo 26.\n    '''\n    return ''.join([chr(ord(i)+1) for i in lst])\ndef get_Number(lst):\n    '''\n    Write a python function to find the number made by adding the ASCII value of all the characters of the given list modulo 26.\n    '''\n    return sum([ord(i)+1 for i in lst])\ndef get_RomanNumeral(strr):\n    '''\n    Write a python function to find the roman numeral made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return [i for i in strr]\ndef is_Palindrome(strr):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    return strr == strr[::-1]\ndef is_Pallindrome(lst):\n    '''\n    Write a python function to check whether the given list is palindrome or not.\n    '''\n    return lst == lst[::-1]\ndef get_power_of(lst,num):\n    '''\n    Write a python function to find the power of a number in a list.\n    '''\n    return [num**i for i in lst]\ndef factorial(lst):\n    '''\n    Write a python function to find the factorial of a number in a list.\n    '''\n    return [math.factorial(i) for i in lst]\ndef get_reverse(lst):\n    '''\n    Write a python function to reverse a list.\n    '''\n    return lst[::-1]\ndef get_reverse_of(strr):\n    '''\n    Write a python function to reverse the order of characters in a string.\n    '''\n    return strr[::-1]\ndef get_max(lst):\n    '''\n    Write a python function to find the max number of a list.\n    '''\n    return max(lst)\ndef get_min(lst):\n    '''\n    Write a python function to find the min number of a list.\n    '''\n    return min(lst)\ndef get_sum(lst):\n    '''\n    Write a python function to find the sum of a list.\n    '''\n    return sum(lst)\ndef get_mean(lst):\n    '''\n    Write a python function to find the mean of a list.\n    '''\n    return sum(lst)/len(lst)\ndef get_count(lst):\n    '''\n    Write a python function to find the count of a list.\n    '''\n    return len(lst)\ndef get_mode(lst):\n    '''\n    Write a python function to find the mode of a list.\n    '''\n    return max(set(lst),key=lst.count)\ndef get_median(lst):\n    '''\n    Write a python function to find the median of a list.\n    '''\n    lst.sort()\n    return lst[len(lst)//2]\ndef get_range(lst):\n    '''\n    Write a python function to find the range of a list.\n    '''\n    return max(lst)-min(lst)\ndef get_std(lst):\n    '''\n    Write a python function to find the standard deviation of a list.\n    '''\n    return (sum([(i-get_mean(lst))**2 for i in lst])/len(lst))**0.5\ndef get_std_dev(lst):\n    '''\n    Write a python function to find the standard deviation of a list.\n    '''\n    return (sum([(i-get_mean(lst))**2 for i in lst])/len(lst))**0.5\ndef get_variance(lst):\n    '''\n    Write a python function to find the variance of a list.\n    '''\n    return (sum([(i-get_mean(lst))**2 for i in lst])/len(lst))\ndef get_variance_of(lst):\n    '''\n    Write a python function to find the variance of a list.\n    '''\n    return (sum([(i-get_mean(lst))**2 for i in lst])/len(lst))\ndef get_mode(lst):\n    '''\n    Write a python function to find the mode of a list.\n    '''\n    return max(set(lst),key=lst.count)\ndef get_mode_of(lst):\n    '''\n    Write a python function to find the mode of a list.\n    '''\n    return max(set(lst),key=lst.count)\ndef get_mode_max(lst):\n    '''\n    Write a python function to find the mode of a list.\n    '''\n    return max(set(lst),key=lst.count)\ndef get_mode_min(lst):\n    '''\n    Write a python function to find the mode of a list.\n    '''\n    return min(set(lst),key=lst.count)\ndef get_mode_num(lst):\n    '''\n    Write a python function to find the mode of a list.\n    '''\n    return max(set(lst),key=lst.count)\ndef get_mode_max(lst):\n    '''\n    Write a python function to find the mode of a list.\n    '''\n    return max(set(lst),key=lst.count)\ndef get_mode_min(lst):\n    '''\n    Write a python function to find the mode of a list.\n    '''\n    return min(set(lst),key=lst.count)\ndef get_mode_num(lst):\n    '''\n    Write a python function to find the mode of a list.\n    '''\n    return max(set(lst),key=lst.count)\ndef get_median(lst):\n    '''\n    Write a python function to find the median of a list.\n    '''\n    lst.sort()\n    return lst[len(lst)//2]\ndef get_median_of(lst):\n    '''\n    Write a python function to find the median of a list.\n    '''\n    lst.sort()\n    return lst[len(lst)//2]\ndef get_mode_max(lst):\n    '''\n    Write a python function to find the mode of a list.\n    '''\n    return max(set(lst),key=lst.count)\ndef get_mode_min(lst):\n    '''\n    Write a python function to find the mode of a list.\n    '''\n    return min(set(lst),key=lst.count)\ndef get_mode_num(lst):\n    '''\n    Write a python function to find the mode of a list.\n    '''\n    return max(set(lst),key=lst.count)\ndef get_median_of(lst):\n    '''\n    Write a python function to find the median of a list.\n    '''\n    lst.sort()\n    return lst[len(lst)//2]\ndef get_median_of(lst):\n    '''\n    Write a python function to find the median of a list.\n    '''\n    lst.sort()\n    return lst[len(lst)//2]\ndef get_mode_max(lst):\n    '''\n    Write a python function to find the mode of a list.\n    '''\n    return max(set(lst),key=lst.count)\ndef get_mode_min(lst):\n    '''\n    Write a python function to find the mode of a list.\n    '''\n    return min(set(lst),key=lst.count)\ndef get_mode_num(lst):\n    '''\n    Write a python function to find the mode of a list.\n    '''"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return chr(((ord(strr[0])-97 + ord(strr[1])-97 + ord(strr[2])-97 + ord(strr[3])-97 + ord(strr[4])-97 + ord(strr[5])-97 + ord(strr[6])-97 + ord(strr[7])-97 + ord(strr[8])-97 + ord(strr[9])-97 + ord(strr[10])-97 + ord(strr[11])-97 + ord(strr[12])-97 + ord(strr[13])-97 + ord(strr[14])-97 + ord(strr[15])-97 + ord(strr[16])-97 + ord(strr[17])-97 + ord(strr[18])-97 + ord(strr[19])-97 + ord(strr[20])-97 + ord(strr[21])-97 + ord(strr[22])-97 + ord(strr[23])-97 + ord(strr[24])-97 + ord(strr[25])-97)%26+97)%26+97)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total=0\n    for i in strr:\n        total+=ord(i)\n    return total%26\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    if len(strr) == 0:\n        return 0\n    elif len(strr) == 1:\n        return ord(strr[0])\n    return (ord(strr[0]) + get_Char(strr[1:])) % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    new_str = ''\n    for i in range(len(strr)):\n        new_str += chr(ord(strr[i])%26+97)\n    return new_str\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    def get_char(strr):\n        sum = 0\n        for i in strr:\n            sum = sum + ord(i)\n        return chr(sum % 26 + ord('A'))\n    \n    return get_char(strr)\n    \n    "
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res=0\n    for x in strr:\n        res=(res+ord(x))%26\n    return chr(res)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # your code here\n    sequence = [0,1]\n    if n == 1:\n        return sequence[0]\n    elif n == 2:\n        return sequence[1]\n    else:\n        for i in range(2,n):\n            new_number = sequence[i-1] + sequence[i-2]\n            sequence.append(new_number)\n        return sequence[n-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [1]\n    while True:\n        if len(seq) > n:\n            return seq[n-1]\n        else:\n            seq.append(sum(seq[len(seq)-len(seq):]))\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return sequence(n - 1) + sequence(n - 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def get_newman_conway_sequence(n):\n        sequence = [1, 2, 3]\n        if n == 1:\n            return sequence\n        for i in range(1, n - 1):\n            new_number = (sequence[-1] + sequence[-2]) % 10\n            sequence.append(new_number)\n        return sequence\n    return get_newman_conway_sequence(n)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    num = [0,1,1]\n    for i in range(3,n+1):\n        num.append(num[i-1] + num[i-2])\n    return num[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [0]\n    if n == 1:\n        return seq[0]\n    i = 0\n    while i < n:\n        i += 1\n        seq.append(seq[-1] + 4)\n        for k in range(2, len(seq)):\n            seq[k] += seq[k - 1] + seq[k - 2]\n    return seq[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 1\n    elif n % 2 == 1:\n        return sequence((n + 1) / 2) + (sequence((n + 1) / 2) - 1)\n    else:\n        return sequence(n / 2) + sequence(n / 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # use a dictionary to count the occurences of numbers in the sequence\n    # use a set to keep track of all the numbers in the sequence\n    # use a generator to generate the sequence\n    # use a slice to get the nth element in the sequence\n    \n    # count = {}\n    # sequence = set()\n    # def sequence(n):\n    #     if n <= 0:\n    #         raise StopIteration\n    #     elif n in count:\n    #         count[n] += 1\n    #     else:\n    #         count[n] = 1\n    #         sequence.add(n)\n    #         yield n\n    #     # call the function recursively to get the next number\n    #     next_number = n - 1\n    #     if next_number > 0:\n    #         for i in sequence(next_number):\n    #             yield i\n    #     else:\n    #         while True:\n    #             for i in sequence(next_number):\n    #                 yield i\n    #                 if i > n:\n    #                     raise StopIteration\n    # for i in sequence(n):\n    #     print i\n    \n    # use a dictionary to count the occurences of numbers in the sequence\n    # use a generator to generate the sequence\n    # use a slice to get the nth element in the sequence\n    \n    # count = {}\n    # sequence = set()\n    # def sequence(n):\n    #     if n <= 0:\n    #         raise StopIteration\n    #     elif n in count:\n    #         count[n] += 1\n    #     else:\n    #         count[n] = 1\n    #         sequence.add(n)\n    #         yield n\n    #     # call the function recursively to get the next number\n    #     next_number = n - 1\n    #     if next_number > 0:\n    #         for i in sequence(next_number):\n    #             yield i\n    #     else:\n    #         while True:\n    #             for i in sequence(next_number):\n    #                 yield i\n    #                 if i > n:\n    #                     raise StopIteration\n    # for i in sequence(n):\n    #     print i\n    \n    count = {}\n    sequence = set()\n    def sequence(n):\n        if n <= 0:\n            raise StopIteration\n        elif n in count:\n            count[n] += 1\n        else:\n            count[n] = 1\n            sequence.add(n)\n            yield n\n        # call the function recursively to get the next number\n        next_number = n - 1\n        if next_number > 0:\n            for i in sequence(next_number):\n                yield i\n        else:\n            while True:\n                for i in sequence(next_number):\n                    yield i\n                    if i > n:\n                        raise StopIteration\n    for i in sequence(n):\n        print i\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return sequence(n - 1) * (n + 1)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r*r\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * (r+h)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * r**2 * h\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi * r**2 + math.pi * (r**2 + h**2)\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h/3\ndef surfacearea_box(l,w,h):\n    '''\n    Write a function to find the surface area of a box.\n    '''\n    return 2 * l * w + 2 * w * h + 2 * l * h\ndef volume_box(l,w,h):\n    '''\n    Write a function to find the volume of a box.\n    '''\n    return l * w * h\ndef surfacearea_rect(l,w):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return 2 * l * w\ndef volume_rect(l,w):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return l * w\ndef surfacearea_tri(l,w):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return l * w\ndef volume_tri(l,w):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return (l * w) / 2\ndef surfacearea_trapezoid(l1,l2,h):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    return (l1 + l2) * h / 2\ndef volume_trapezoid(l1,l2,h):\n    '''\n    Write a function to find the volume of a trapezoid.\n    '''\n    return (l1 * l2) / 2 * h\ndef surfacearea_kite(l1,l2,h):\n    '''\n    Write a function to find the surface area of a kite.\n    '''\n    return math.sqrt(l1**2 + l2**2) * h\ndef volume_kite(l1,l2,h):\n    '''\n    Write a function to find the volume of a kite.\n    '''\n    return math.sqrt(l1**2 + l2**2) * h / 2\ndef surfacearea_sphere_one(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\ndef volume_sphere_one(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)\ndef surfacearea_sphere_two(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\ndef volume_sphere_two(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 * math.pi * (r**3)\ndef surfacearea_cylinder_one(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * (r**2 + h**2)\ndef volume_cylinder_one(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * r**2 * h\ndef surfacearea_cylinder_two(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * (r**2 + h**2)\ndef volume_cylinder_two(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * r**2 * h\ndef surfacearea_cone_one(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi * (r**2 + h**2)\ndef volume_cone_one(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h/3\ndef surfacearea_cone_two(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi * (r**2 + h**2)\ndef volume_cone_two(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h/3\ndef surfacearea_box_one(l,w,h):\n    '''\n    Write a function to find the surface area of a box.\n    '''\n    return 2 * l * w + 2 * w * h + 2 * l * h\ndef volume_box_one(l,w,h):\n    '''\n    Write a function to find the volume of a box.\n    '''\n    return l * w * h\ndef surfacearea_box_two(l,w):\n    '''\n    Write a function to find the surface area of a box.\n    '''\n    return 2 * l * w\ndef volume_box_two(l,w):\n    '''\n    Write a function to find the volume of a box.\n    '''\n    return l * w\ndef surfacearea_rect_one(l,w):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return 2 * l * w\ndef volume_rect_one(l,w):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return l * w\ndef surfacearea_rect_two(l,w):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return 2 * l * w\ndef volume_rect_two(l,w):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return l * w\ndef surfacearea_tri_one(l,w):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return l * w\ndef volume_tri_one(l,w):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return (l * w) / 2\ndef surfacearea_tri_two(l,w):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return l * w\ndef volume_tri_two(l,w):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return l * w\ndef surfacearea_trapezoid_one(l1,l2,h):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return (l1 + l2) * h / 2\ndef volume_trapezoid_one(l1,l2,h):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return (l1 * l2) / 2 * h\ndef surfacearea_trapezoid_two(l1,l2,h):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return (l1 + l2) * h / 2\ndef volume_trapezoid_two(l1,l2,h):"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r ** 2)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\ndef surfacearea_sphere2(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 4 / 3\ndef surfacearea_sphere3(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 6 / 7\ndef surfacearea_sphere4(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 8 / 9\ndef surfacearea_sphere5(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 10 / 11\ndef surfacearea_sphere6(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 12 / 13\ndef surfacearea_sphere7(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 14 / 15\ndef surfacearea_sphere8(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 16 / 17\ndef surfacearea_sphere9(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 18 / 19\ndef surfacearea_sphere10(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 20 / 21\ndef surfacearea_sphere11(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 22 / 23\ndef surfacearea_sphere12(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 24 / 25\ndef surfacearea_sphere13(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 26 / 27\ndef surfacearea_sphere14(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 28 / 29\ndef surfacearea_sphere15(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 30 / 31\ndef surfacearea_sphere16(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 32 / 33\ndef surfacearea_sphere17(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 34 / 35\ndef surfacearea_sphere18(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 36 / 37\ndef surfacearea_sphere19(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 38 / 39\ndef surfacearea_sphere20(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 40 / 41\ndef surfacearea_sphere21(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 42 / 43\ndef surfacearea_sphere22(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 44 / 45\ndef surfacearea_sphere23(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 46 / 47\ndef surfacearea_sphere24(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 48 / 49\ndef surfacearea_sphere25(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 50 / 51\ndef surfacearea_sphere26(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 52 / 53\ndef surfacearea_sphere27(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 54 / 55\ndef surfacearea_sphere28(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 56 / 57\ndef surfacearea_sphere29(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 58 / 59\ndef surfacearea_sphere30(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 60 / 61\ndef surfacearea_sphere31(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 62 / 63\ndef surfacearea_sphere32(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 64 / 65\ndef surfacearea_sphere33(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 66 / 67\ndef surfacearea_sphere34(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 68 / 69\ndef surfacearea_sphere35(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 70 / 71\ndef surfacearea_sphere36(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 72 / 73\ndef surfacearea_sphere37(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 74 / 75\ndef surfacearea_sphere38(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 76 / 77\ndef surfacearea_sphere39(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 78 / 79\ndef surfacearea_sphere40(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 80 / 81\ndef surfacearea_sphere41(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r * 82 / 83\ndef surfacearea_sphere42(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi "
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    v_2 = 4/3 * math.pi * r**3\n    return v_2\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Implement this function\n    # Formula: 4*pi*r^2\n    area = 4*3.14*r**2\n    return area\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n**2 + n)//2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2 * n - 1) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # (a*a - a)/2 = n*(2n + 1)\n    a = (n*(2*n + 1))**0.5\n    return a*a\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return ((2 * n + 1) ** 2 - 2 * n) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(2*n**2 - 1) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 5*3\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 7*5\n    elif n == 6:\n        return 7*5*3\n    elif n == 7:\n        return 7*5*5\n    elif n == 8:\n        return 7*5*5*3\n    else:\n        raise ValueError(\"n is out of range.\")\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n**2 + n) // 2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (1/2**(1/2))*(3*n**2 - 2*n + 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # nth centered hexagonal number = n(n+1)/2\n    if n == 1:\n        return 1\n    else:\n        return n*(n+1)/2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n = n // 2\n    if n % 2!= 0:\n        return (-1 * ((n - 1) // 2))**2 + (n - 1)**2\n    else:\n        return (n // 2)**2\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #create dictionary with key value pairs\n    result = {}\n    for i in range(len(dict1)):\n        result.update(dict1[i])\n    for i in range(len(dict2)):\n        result.update(dict2[i])\n    for i in range(len(dict3)):\n        result.update(dict3[i])\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    temp = {}\n    for key, value in dict1.items():\n        temp[key] = value\n    for key, value in dict2.items():\n        temp[key] = value\n    for key, value in dict3.items():\n        temp[key] = value\n    return temp\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if not isinstance(dict1, dict) or not isinstance(dict2, dict) or not isinstance(dict3, dict):\n        return\n    dictionary = {}\n    dictionary.update(dict1)\n    dictionary.update(dict2)\n    dictionary.update(dict3)\n    return dictionary\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dic_merge = {}\n    for key in dict1:\n        dic_merge[key] = [dict1[key], dict2[key], dict3[key]]\n    return dic_merge\n    # write your code here\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = {**dict1, **dict2, **dict3}\n    return new_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    for key in dict1:\n        if key in dict2:\n            if key in dict3:\n                if dict1[key]>dict2[key]:\n                    dict3[key] = dict2[key]\n            else:\n                dict3[key] = dict2[key]\n        else:\n            if key in dict3:\n                if dict1[key]>dict3[key]:\n                    dict3[key] = dict1[key]\n            else:\n                dict3[key] = dict1[key]\n    return dict3\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res={}\n    res.update(dict1)\n    res.update(dict2)\n    res.update(dict3)\n    return res\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    result.update(dict1)\n    result.update(dict2)\n    result.update(dict3)\n    return result\ndef merge_dictionaries_four(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    result = {}\n    result.update(dict1)\n    result.update(dict2)\n    result.update(dict3)\n    result.update(dict4)\n    return result\ndef merge_dictionaries_five(dict1,dict2,dict3,dict4,dict5):\n    '''\n    Write a function to merge five dictionaries into a single dictionary.\n    '''\n    result = {}\n    result.update(dict1)\n    result.update(dict2)\n    result.update(dict3)\n    result.update(dict4)\n    result.update(dict5)\n    return result\ndef merge_dictionaries_six(dict1,dict2,dict3,dict4,dict5,dict6):\n    '''\n    Write a function to merge six dictionaries into a single dictionary.\n    '''\n    result = {}\n    result.update(dict1)\n    result.update(dict2)\n    result.update(dict3)\n    result.update(dict4)\n    result.update(dict5)\n    result.update(dict6)\n    return result\ndef merge_dictionaries_seven(dict1,dict2,dict3,dict4,dict5,dict6,dict7):\n    '''\n    Write a function to merge seven dictionaries into a single dictionary.\n    '''\n    result = {}\n    result.update(dict1)\n    result.update(dict2)\n    result.update(dict3)\n    result.update(dict4)\n    result.update(dict5)\n    result.update(dict6)\n    result.update(dict7)\n    return result\ndef merge_dictionaries_eight(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8):\n    '''\n    Write a function to merge eight dictionaries into a single dictionary.\n    '''\n    result = {}\n    result.update(dict1)\n    result.update(dict2)\n    result.update(dict3)\n    result.update(dict4)\n    result.update(dict5)\n    result.update(dict6)\n    result.update(dict7)\n    result.update(dict8)\n    return result\ndef merge_dictionaries_nine(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9):\n    '''\n    Write a function to merge nine dictionaries into a single dictionary.\n    '''\n    result = {}\n    result.update(dict1)\n    result.update(dict2)\n    result.update(dict3)\n    result.update(dict4)\n    result.update(dict5)\n    result.update(dict6)\n    result.update(dict7)\n    result.update(dict8)\n    result.update(dict9)\n    return result\ndef merge_dictionaries_ten(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9,dict10):\n    '''\n    Write a function to merge ten dictionaries into a single dictionary.\n    '''\n    result = {}\n    result.update(dict1)\n    result.update(dict2)\n    result.update(dict3)\n    result.update(dict4)\n    result.update(dict5)\n    result.update(dict6)\n    result.update(dict7)\n    result.update(dict8)\n    result.update(dict9)\n    result.update(dict10)\n    return result\ndef merge_dictionaries_eleven(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9,dict10,dict11):\n    '''\n    Write a function to merge eleven dictionaries into a single dictionary.\n    '''\n    result = {}\n    result.update(dict1)\n    result.update(dict2)\n    result.update(dict3)\n    result.update(dict4)\n    result.update(dict5)\n    result.update(dict6)\n    result.update(dict7)\n    result.update(dict8)\n    result.update(dict9)\n    result.update(dict10)\n    result.update(dict11)\n    return result\ndef merge_dictionaries_twelve(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9,dict10,dict11,dict12):\n    '''\n    Write a function to merge twelve dictionaries into a single dictionary.\n    '''\n    result = {}\n    result.update(dict1)\n    result.update(dict2)\n    result.update(dict3)\n    result.update(dict4)\n    result.update(dict5)\n    result.update(dict6)\n    result.update(dict7)\n    result.update(dict8)\n    result.update(dict9)\n    result.update(dict10)\n    result.update(dict11)\n    result.update(dict12)\n    return result\ndef merge_dictionaries_thirteen(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9,dict10,dict11,dict12,dict13):\n    '''\n    Write a function to merge thirteen dictionaries into a single dictionary.\n    '''\n    result = {}\n    result.update(dict1)\n    result.update(dict2)\n    result.update(dict3)\n    result.update(dict4)\n    result.update(dict5)\n    result.update(dict6)\n    result.update(dict7)\n    result.update(dict8)\n    result.update(dict9)\n    result.update(dict10)\n    result.update(dict11)\n    result.update(dict12)\n    result.update(dict13)\n    return result\ndef merge_dictionaries_fourteen(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9,dict10,dict11,dict12,dict13,dict14):\n    '''\n    Write a function to merge fourteen dictionaries into a single dictionary.\n    '''\n    result = {}\n    result.update(dict1)\n    result.update(dict2)\n    result.update(dict3)\n    result.update(dict4)\n    result.update(dict5)\n    result.update(dict6)\n    result.update(dict7)\n    result.update(dict8)\n    result.update(dict9)\n    result.update(dict10)\n    result.update(dict11)\n    result.update(dict12)\n    result.update(dict13)\n    result.update(dict14)\n    return result\ndef merge_dictionaries_fifteen(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9,dict10,dict11,dict12,dict13,dict14,dict15):\n    '''\n    Write a function to merge fifteen dictionaries into a single dictionary.\n    '''\n    result = {}\n    result.update(dict1)\n    result.update(dict2)\n    result.update(dict3)\n    result.update(dict4)\n    result.update(dict5)\n    result.update(dict6)\n    result.update(dict7)\n    result.update(dict8)\n    result.update(dict9)\n    result.update(dict10)\n    result.update(dict11)\n    result.update(dict12)\n    result.update(dict13)\n    result.update(dict14)\n    result.update(dict15)\n    return result\ndef merge_dictionaries_sixteen(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8,dict9,dict10,dict11,dict12,dict13,dict14,dict15,dict16):\n    '''\n    Write a function to merge sixteen dictionaries into a single dictionary.\n    '''\n    result = {}"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    list2 = []\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    for i in range(len(list2)):\n        list2[i] = [list1.count(list2[i]),list2[i]]\n    return dict(list2)\ndef most_common(list1):\n    '''\n    Write a function that returns the most common element in a list of lists, \n    if there is a tie, returns the first one encountered.\n    '''\n    common_list = []\n    for i in list1:\n        if i not in common_list:\n            common_list.append(i)\n    for i in range(len(common_list)):\n        common_list[i] = [list1.count(common_list[i]),common_list[i]]\n    return common_list[0]\ndef factorial(n):\n    '''\n    Write a function that returns the factorial of a given number.\n    '''\n    fact = 1\n    for i in range(n):\n        fact = fact * (i+1)\n    return fact\ndef permutations(list1):\n    '''\n    Write a function that returns all permutations of a given list.\n    '''\n    list1.sort()\n    if len(list1) == 1:\n        return [list1]\n    else:\n        list2 = []\n        for i in range(len(list1)):\n            for j in range(len(list1)):\n                if list1[i] > list1[j] and [list1[i],list1[j]] not in list2:\n                    list2.append([list1[i],list1[j]])\n    return list2\ndef permutations2(list1):\n    '''\n    Write a function that returns all permutations of a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2.append([list1[i]])\n    for i in range(2,len(list1)+1):\n        for j in range(len(list1)):\n            for k in range(len(list1)):\n                if list1[k] not in list2[j]:\n                    list2[j].append(list1[k])\n    return list2\ndef permutations3(list1,count=0):\n    '''\n    Write a function that returns all permutations of a given list.\n    '''\n    if count == len(list1):\n        return [list1]\n    else:\n        list2 = []\n        for i in range(len(list1)):\n            for j in range(len(list1)):\n                if list1[i] > list1[j] and [list1[i],list1[j]] not in list2:\n                    list2.append([list1[i],list1[j]])\n        return permutations3(list1,count+1) + list2\ndef permutations4(list1):\n    '''\n    Write a function that returns all permutations of a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2.append([list1[i]])\n    for i in range(2,len(list1)+1):\n        for j in range(len(list1)):\n            for k in range(len(list1)):\n                if list1[k] not in list2[j]:\n                    list2[j].append(list1[k])\n    return list2\ndef permutations5(list1):\n    '''\n    Write a function that returns all permutations of a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2.append([list1[i]])\n    for i in range(2,len(list1)+1):\n        for j in range(len(list1)):\n            for k in range(len(list1)):\n                if list1[k] not in list2[j]:\n                    list2[j].append(list1[k])\n    return list2\ndef permutations6(list1):\n    '''\n    Write a function that returns all permutations of a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2.append([list1[i]])\n    for i in range(2,len(list1)+1):\n        for j in range(len(list1)):\n            for k in range(len(list1)):\n                if list1[k] not in list2[j]:\n                    list2[j].append(list1[k])\n    return list2\ndef permutations7(list1):\n    '''\n    Write a function that returns all permutations of a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2.append([list1[i]])\n    for i in range(2,len(list1)+1):\n        for j in range(len(list1)):\n            for k in range(len(list1)):\n                if list1[k] not in list2[j]:\n                    list2[j].append(list1[k])\n    return list2\ndef permutations8(list1):\n    '''\n    Write a function that returns all permutations of a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2.append([list1[i]])\n    for i in range(2,len(list1)+1):\n        for j in range(len(list1)):\n            for k in range(len(list1)):\n                if list1[k] not in list2[j]:\n                    list2[j].append(list1[k])\n    return list2\ndef permutations9(list1):\n    '''\n    Write a function that returns all permutations of a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2.append([list1[i]])\n    for i in range(2,len(list1)+1):\n        for j in range(len(list1)):\n            for k in range(len(list1)):\n                if list1[k] not in list2[j]:\n                    list2[j].append(list1[k])\n    return list2\ndef permutations10(list1):\n    '''\n    Write a function that returns all permutations of a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2.append([list1[i]])\n    for i in range(2,len(list1)+1):\n        for j in range(len(list1)):\n            for k in range(len(list1)):\n                if list1[k] not in list2[j]:\n                    list2[j].append(list1[k])\n    return list2\ndef permutations11(list1):\n    '''\n    Write a function that returns all permutations of a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2.append([list1[i]])\n    for i in range(2,len(list1)+1):\n        for j in range(len(list1)):\n            for k in range(len(list1)):\n                if list1[k] not in list2[j]:\n                    list2[j].append(list1[k])\n    return list2\ndef permutations12(list1):\n    '''\n    Write a function that returns all permutations of a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2.append([list1[i]])\n    for i in range(2,len(list1)+1):\n        for j in range(len(list1)):\n            for k in range(len(list1)):\n                if list1[k] not in list2[j]:\n                    list2[j].append(list1[k])\n    return list2\ndef permutations13(list1):\n    '''\n    Write a function that returns all permutations of a given list.\n    '''\n    lis"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counter=collections.Counter(list1)\n    return counter\n    \ndef freq_count_with_duplicates(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, with duplicates returned as a dictionary.\n    '''\n    counter=collections.Counter(list1)\n    return counter\n    \ndef freq_count_without_duplicates(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, with duplicates omitted returned as a dictionary.\n    '''\n    list2=[]\n    for elem in list1:\n        if elem not in list2:\n            list2.append(elem)\n            counter=collections.Counter(list2)\n    return counter\n    \ndef freq_count_with_duplicates_without_sort(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, with duplicates returned as a dictionary.\n    '''\n    list2=[]\n    for elem in list1:\n        if elem not in list2:\n            list2.append(elem)\n            counter=collections.Counter(list2)\n    return counter\n    \ndef freq_count_without_duplicates_without_sort(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, with duplicates omitted returned as a dictionary.\n    '''\n    list2=[]\n    for elem in list1:\n        if elem not in list2:\n            list2.append(elem)\n            counter=collections.Counter(list2)\n    return counter\n    \ndef freq_count_without_duplicates_without_sort_with_sort(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, with duplicates omitted returned as a dictionary.\n    '''\n    list2=[]\n    for elem in list1:\n        if elem not in list2:\n            list2.append(elem)\n    list2.sort()\n    counter=collections.Counter(list2)\n    return counter\n    \ndef count_in_list(list1,item):\n    '''\n    Write a function to count the number of occurrences of a given item in a list.\n    '''\n    count=0\n    for elem in list1:\n        if elem==item:\n            count+=1\n    return count\n    \ndef count_in_list_with_duplicates(list1,item):\n    '''\n    Write a function to count the number of occurrences of a given item in a list with duplicates.\n    '''\n    count=0\n    for elem in list1:\n        if elem==item:\n            count+=1\n    return count\n    \ndef count_in_list_without_duplicates(list1,item):\n    '''\n    Write a function to count the number of occurrences of a given item in a list with duplicates.\n    '''\n    list2=[]\n    for elem in list1:\n        if elem not in list2:\n            list2.append(elem)\n            counter=collections.Counter(list2)\n    return counter\n    \ndef count_in_list_without_duplicates_with_sort(list1,item):\n    '''\n    Write a function to count the number of occurrences of a given item in a list with duplicates.\n    '''\n    list2=[]\n    for elem in list1:\n        if elem not in list2:\n            list2.append(elem)\n    list2.sort()\n    counter=collections.Counter(list2)\n    return counter\n    \ndef count_in_list_without_duplicates_without_sort(list1,item):\n    '''\n    Write a function to count the number of occurrences of a given item in a list with duplicates.\n    '''\n    list2=[]\n    for elem in list1:\n        if elem not in list2:\n            list2.append(elem)\n            counter=collections.Counter(list2)\n    return counter\n    \ndef count_in_list_without_duplicates_without_sort_with_sort(list1,item):\n    '''\n    Write a function to count the number of occurrences of a given item in a list with duplicates.\n    '''\n    list2=[]\n    for elem in list1:\n        if elem not in list2:\n            list2.append(elem)\n    list2.sort()\n    counter=collections.Counter(list2)\n    return counter\n    \ndef sublist_without_duplicates(list1,list2):\n    '''\n    Write a function to check if list2 is a sublist of list1, with duplicates.\n    '''\n    if len(list1)<len(list2):\n        return False\n    else:\n        list2.sort()\n        list1.sort()\n        if list1==list2:\n            return True\n        else:\n            for elem in list2:\n                if elem not in list1:\n                    return False\n    return True\n    \ndef sublist_without_duplicates_with_sort(list1,list2):\n    '''\n    Write a function to check if list2 is a sublist of list1, with duplicates.\n    '''\n    if len(list1)<len(list2):\n        return False\n    else:\n        list2.sort()\n        list1.sort()\n        if list1==list2:\n            return True\n        else:\n            for elem in list2:\n                if elem not in list1:\n                    return False\n    return True\n    \ndef sublist_without_duplicates_without_sort(list1,list2):\n    '''\n    Write a function to check if list2 is a sublist of list1, with duplicates.\n    '''\n    if len(list1)<len(list2):\n        return False\n    else:\n        list2=[]\n        for elem in list1:\n            if elem not in list2:\n                list2.append(elem)\n                counter=collections.Counter(list2)\n    return counter\n    \ndef sublist_without_duplicates_without_sort_with_sort(list1,list2):\n    '''\n    Write a function to check if list2 is a sublist of list1, with duplicates.\n    '''\n    if len(list1)<len(list2):\n        return False\n    else:\n        list2.sort()\n        list1.sort()\n        if list1==list2:\n            return True\n        else:\n            for elem in list2:\n                if elem not in list1:\n                    return False\n    return True\n    \ndef sublist_with_duplicates(list1,list2):\n    '''\n    Write a function to check if list2 is a sublist of list1, with duplicates.\n    '''\n    if len(list1)<len(list2):\n        return False\n    else:\n        list2.sort()\n        list1.sort()\n        if list1==list2:\n            return True\n        else:\n            for elem in list2:\n                if elem not in list1:\n                    return False\n    return True\n    \ndef sublist_with_duplicates_with_sort(list1,list2):\n    '''\n    Write a function to check if list2 is a sublist of list1, with duplicates.\n    '''\n    if len(list1)<len(list2):\n        return False\n    else:\n        list2.sort()\n        list1.sort()\n        if list1==list2:\n            return True\n        else:\n            for elem in list2:\n                if elem not in list1:\n                    return False\n    return True\n    \ndef sublist_without_duplicates_with_sort(list1,list2):\n    '''\n    Write a function to check if list2 is a sublist of list1, with duplicates.\n    '''\n    if len(list1)<len(list2):\n        return False\n    else:\n        list2.sort()\n        list1.sort()\n        if list1==list2:\n            return True\n        else:\n            fo"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    list1=collections.Counter(list1)\n    return list1\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = {}\n    for item in list1:\n        if item in d:\n            d[item] += 1\n        else:\n            d[item] = 1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for i in list1:\n        if i in dict1:\n            dict1[i]+=1\n        else:\n            dict1[i]=1\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dic={}\n    for i in list1:\n        if i in dic:\n            dic[i]+=1\n        else:\n            dic[i]=1\n    return dic\n    \ndef get_word_lists(str1,length):\n    '''\n    Write a function that takes two words (str1 and str2) and returns True if the two words are anagrams of each other\n    '''\n    if len(str1)!= length or len(str2)!= length:\n        return False\n    else:\n        str1=sorted(str1)\n        str2=sorted(str2)\n        if str1==str2:\n            return True\n        else:\n            return False\n    \ndef lcs(str1,str2):\n    '''\n    Write a function to find the longest common subsequence of two strings, if the two strings are not of same length\n    '''\n    dp = [[0 for x in range(len(str2) + 1)] for y in range(len(str1) + 1)]\n    for i in range(len(str1)):\n        for j in range(len(str2)):\n            if str1[i] == str2[j]:\n                dp[i + 1][j + 1] = 1 + dp[i][j]\n            else:\n                dp[i + 1][j + 1] = max(dp[i + 1][j], dp[i][j + 1])\n    return dp[-1][-1]\n    \ndef num_unique(arr):\n    '''\n    Write a function to find the number of unique elements in an array.\n    '''\n    result = set()\n    for i in arr:\n        result.add(i)\n    return len(result)\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    \n    freq = {}\n    for i in list1:\n        freq[i] = list1.count(i)\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = collections.Counter(list1)\n    return count\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        freq[item] = freq.get(item,0)+1\n    return freq\ndef freq_count2(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    return collections.Counter(list1)\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    l = len(str(N))\n    a = 10 ** (l-1)\n    b = 10 ** (l)\n    if N < a:\n        return N\n    elif N > b:\n        return N % b\n    elif N == a:\n        return 0\n    elif N < b:\n        return N % b\n    else:\n        return N\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_val = 0\n    for i in xrange(1, N):\n        if abs(i - N) < abs(min_val - N):\n            min_val = i\n    return min_val\n    \ndef count_slices(n, c, k):\n    '''\n    Write a function that accepts an array of numbers and returns\n    the count of numbers that are evenly divisible by k.\n    '''\n    \n    # min_val = closest_num(n[-1])\n    # if min_val == 0:\n    #     return n.count(0)\n    # elif min_val == n[-1]:\n    #     return n.count(min_val)\n    # else:\n    #     return (n.count(min_val) + n.count(0) + n.count(min_val - 1)) / k\n    \n    # Brute force\n    ans = 0\n    for i in xrange(len(n)):\n        for j in xrange(len(n)):\n            if n[i] % k == 0 and n[j] % k!= 0:\n                ans += 1\n    return ans\n    \ndef find_closest_elements(arr, K, X):\n    '''\n    Write a function that accepts an array of numbers and returns\n    the array of elements that are closest to X, where X is \n    specified by the user. Assume that the array is sorted.\n    '''\n    # Find the closest smaller element\n    closest_element = closest_num(X)\n    # Traverse the array to find the closest smaller element\n    for i in xrange(len(arr)):\n        if arr[i] == X:\n            return arr[closest_element:i]\n        elif arr[i] > X:\n            return arr[i:closest_element]\n    return arr\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    k = 0\n    while (n - k) in hash_table:\n        k += 1\n    return k\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return sorted([i for i in range(N,0,-1)])[0]\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if n == 0:\n        return n\n    elif n < 0:\n        return -1\n    else:\n        res = None\n        for i in xrange(n+1):\n            if res is None or abs(n - i) < abs(res - i):\n                res = i\n        return res\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    #set up our list of nums\n    numlist = [int(i) for i in str(N)]\n    #sort our list\n    numlist.sort()\n    #go through our list and see if the next number is smaller than the current number\n    for num in numlist:\n        #if it is, return that number\n        if (num < numlist[-1]):\n            return num\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 0\n    for i in range(1, N):\n        if i*2 < N and i*2 == N:\n            return i\n        elif i*2 < N and i*2 > N:\n            return i*2\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if n == 1:\n        return 0\n    return ((N+1) // 2) * 2 - N\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 1\n    elif N == 2:\n        return 1\n    elif N == 3:\n        return 1\n    elif N == 4:\n        return 2\n    elif N == 5:\n        return 3\n    elif N == 6:\n        return 4\n    elif N == 7:\n        return 4\n    elif N == 8:\n        return 4\n    elif N == 9:\n        return 5\n    elif N == 10:\n        return 6\n    elif N == 11:\n        return 6\n    elif N == 12:\n        return 6\n    elif N == 13:\n        return 7\n    elif N == 14:\n        return 7\n    elif N == 15:\n        return 7\n    elif N == 16:\n        return 8\n    elif N == 17:\n        return 8\n    elif N == 18:\n        return 8\n    elif N == 19:\n        return 9\n    elif N == 20:\n        return 9\n    elif N == 21:\n        return 9\n    elif N == 22:\n        return 10\n    elif N == 23:\n        return 10\n    elif N == 24:\n        return 10\n    elif N == 25:\n        return 11\n    elif N == 26:\n        return 11\n    elif N == 27:\n        return 11\n    elif N == 28:\n        return 12\n    elif N == 29:\n        return 12\n    elif N == 30:\n        return 12\n    elif N == 31:\n        return 13\n    elif N == 32:\n        return 13\n    elif N == 33:\n        return 13\n    elif N == 34:\n        return 14\n    elif N == 35:\n        return 14\n    elif N == 36:\n        return 14\n    elif N == 37:\n        return 15\n    elif N == 38:\n        return 15\n    elif N == 39:\n        return 15\n    elif N == 40:\n        return 16\n    elif N == 41:\n        return 16\n    elif N == 42:\n        return 16\n    elif N == 43:\n        return 17\n    elif N == 44:\n        return 17\n    elif N == 45:\n        return 17\n    elif N == 46:\n        return 18\n    elif N == 47:\n        return 18\n    elif N == 48:\n        return 18\n    elif N == 49:\n        return 19\n    elif N == 50:\n        return 19\n    elif N == 51:\n        return 19\n    elif N == 52:\n        return 20\n    elif N == 53:\n        return 20\n    elif N == 54:\n        return 20\n    elif N == 55:\n        return 21\n    elif N == 56:\n        return 21\n    elif N == 57:\n        return 21\n    elif N == 58:\n        return 22\n    elif N == 59:\n        return 22\n    elif N == 60:\n        return 22\n    elif N == 61:\n        return 23\n    elif N == 62:\n        return 23\n    elif N == 63:\n        return 23\n    elif N == 64:\n        return 24\n    elif N == 65:\n        return 24\n    elif N == 66:\n        return 24\n    elif N == 67:\n        return 25\n    elif N == 68:\n        return 25\n    elif N == 69:\n        return 25\n    elif N == 70:\n        return 26\n    elif N == 71:\n        return 26\n    elif N == 72:\n        return 26\n    elif N == 73:\n        return 27\n    elif N == 74:\n        return 27\n    elif N == 75:\n        return 27\n    elif N == 76:\n        return 28\n    elif N == 77:\n        return 28\n    elif N == 78:\n        return 28\n    elif N == 79:\n        return 29\n    elif N == 80:\n        return 29\n    elif N == 81:\n        return 29\n    elif N == 82:\n        return 30\n    elif N == 83:\n        return 30\n    elif N == 84:\n        return 30\n    elif N == 85:\n        return 31\n    elif N == 86:\n        return 31\n    elif N == 87:\n        return 31\n    elif N == 88:\n        return 32\n    elif N == 89:\n        return 32\n    elif N == 90:\n        return 32\n    elif N == 91:\n        return 33\n    elif N == 92:\n        return 33\n    elif N == 93:\n        return 33\n    elif N == 94:\n        return 34\n    elif N == 95:\n        return 34\n    elif N == 96:\n        return 34\n    elif N == 97:\n        return 35\n    elif N == 98:\n        return 35\n    elif N == 99:\n        return 35\n    elif N == 100:\n        return 36\n    elif N == 101:\n        return 36\n    elif N == 102:\n        return 36\n    elif N == 103:\n        return 37\n    elif N == 104:\n        return 37\n    elif N == 105:\n        return 37\n    elif N == 106:\n        return 38\n    elif N == 107:\n        return 38\n    elif N == 108:\n        return 38\n    elif N == 109:\n        return 39\n    elif N == 110:\n        return 39\n    elif N == 111:\n        return 39\n    elif N == 112:\n        return 40\n    elif N == 113:\n        return 40\n    elif N == 114:\n        return 40\n    elif N == 115:\n        return 41\n    elif N == 116:\n        return 41\n    elif N == 117:\n        return 41\n    elif N == 118:\n        return 42\n    elif N == 119:\n        return 42\n    elif N == 120:\n        return 42\n    elif N == 121:\n        return 43\n    elif N == 122:\n        return 43\n    elif N == 123:\n        return 43\n    elif N == 124:\n        return 44\n    elif N == 125:\n        return 44\n    elif N == 126:\n        return 44\n    elif N == 127:\n        return 45\n    elif N == 128:\n        return 45\n    elif N == 129:\n        return 45\n    elif N == 130:\n        return 46\n    elif N == 131:\n        return 46\n    elif N == 132:\n        return 46\n    elif N == 133:\n        return 47\n    elif N == 134:\n        return 47\n    elif N == 135:\n        return 47\n    elif N == 136:\n        return 48\n    elif N == 137:\n        return 48\n    elif N == 138:\n        return 48\n    elif N == 139:\n        return 49\n    elif N == 140:\n        return 49\n    elif N == 141:\n        return 49\n    elif N == 142:\n        return 50\n    elif N == 143:\n        return 50\n    elif N == 144:\n        return 50\n    elif N == 145:\n        return 51\n    elif N == 146:\n        return 51\n    elif N == 147:\n        return 51\n    elif N == 148:\n        return 52\n    elif N == 149:\n        return 52\n    elif N == 150:\n        return 52\n    elif N == 151:\n        return 53\n    elif N == 152:\n        return 53\n    elif N == 153:\n        return 53\n    elif N == 154:\n        return 54\n    elif N == 155:\n        return 54\n    elif N == 156:\n        return 54\n    elif N == 157:\n        return 55\n    elif N == 158:\n        return 55\n    elif N == 159:\n        return 55\n    elif N == 160:\n        return 56\n    elif N == 161:\n        return 56\n    elif N == 162:\n        return 56\n    elif N == 163:\n        return 57\n    elif N == 164:\n        return 57\n    elif N == 165:\n        return 57\n    elif N == 166:\n        return 58\n    elif N == 167:\n        return 58\n    elif N == 168:\n        return 58\n    eli"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(N)\n    return n - 1 if n % 2 == 0 else n - 2\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max = 0\n    for i in list1:\n        if len(i) > max:\n            max = len(i)\n    return max\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    mylen = 0\n    for i in list1:\n        if len(i) > mylen:\n            mylen = len(i)\n    return mylen\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(max([len(x) for x in list1]))\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for i in list1:\n        list2.append(len(i))\n    max_len=max(list2)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len_of_list = []\n    for word in list1:\n        len_of_list.append(len(word))\n    return max(len_of_list)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    pass\n    pass\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max = 0\n    for i in list1:\n        if len(i) > max:\n            max = len(i)\n    print(max)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_length = 0\n    for i in list1:\n        if len(i)>longest_length:\n            longest_length = len(i)\n    return longest_length\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return len(max(list1, key = len))\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    x=0\n    for i in list1:\n        if len(i)>x:\n            x=len(i)\n    return x\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    substr_count = len(sub_str)\n    for i in range(len(str1)-substr_count+1):\n        if sub_str == str1[i:i+substr_count]:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str not in str1:\n        return False\n    return True\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for str in str1:\n        if str == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) > len(str1):\n        return False\n    for i in range(0, len(str1)):\n        if len(sub_str) == 0:\n            return True\n        elif str1[i:i+len(sub_str)] == sub_str:\n            return True\n        else:\n            pass\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(str1) < len(sub_str):\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    if not isinstance(str1, str):\n        return False\n    \n    if not isinstance(sub_str, str):\n        return False\n    \n    if len(sub_str) > len(str1):\n        return False\n    \n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    \n    return False\n    \ndef find_substring_index(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    if not isinstance(str1, str):\n        return False\n    \n    if not isinstance(sub_str, str):\n        return False\n    \n    if len(sub_str) > len(str1):\n        return False\n    \n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return i\n    \n    return -1\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # print('%s' % str1)\n    # print('%s' % sub_str)\n    if str1 == None or sub_str == None:\n        return False\n    if len(str1) < len(sub_str):\n        return False\n    return True if str1.find(sub_str)!= -1 else False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 10:\n        return True\n    prev = int(str(n)[0])\n    curr = int(str(n)[1])\n    return prev < curr and is_undulating(n - 1)\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return all(n % i for i in range(2, n/2 + 1))\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    # If n = 2^k for some integer k, then there exist n-1 divisors. \n    # The first divisor is 1 and the second divisor is n/2. \n    # The third divisor is n/4 and so on. \n    # If we find the first divisor with n-1 divisors, then we can conclude that n is undulating. \n    # Otherwise, n is not undulating.\n    \n    count = 0\n    for i in range(1,n):\n        if n%i == 0: \n            count += 1\n        if count == n-1: \n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    str_n = str(n)\n    return str_n[0] < str_n[1] < str_n[2] < str_n[3] < str_n[4] < str_n[5] < str_n[6] < str_n[7] < str_n[8] < str_n[9]\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    is_undulating = True\n    for i in range(len(str(n)) - 1):\n        if int(str(n)[i]) < int(str(n)[i + 1]):\n            is_undulating = False\n            break\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    num_str = str(n)\n    prev_digit = -1\n    curr_digit = -1\n    for i in num_str:\n        curr_digit = int(i)\n        if prev_digit == -1:\n            prev_digit = curr_digit\n        elif prev_digit!= curr_digit:\n            return False\n        prev_digit = curr_digit\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    arr = [int(i) for i in str(n)]\n    return True if arr[0] == arr[-1] else False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def is_undulating(n): \n        if len(str(n)) % 2 == 0:\n            return False\n        n = str(n)\n        for i in xrange(0, len(n) / 2):\n            if n[i]!= n[len(n) - i - 1]:\n                return False\n        return True\n    for i in xrange(1, 10000):\n        if is_undulating(i) and is_undulating(i * 2):\n            print i\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1: return True\n    if n == 2: return True\n    if n % 2 == 0: return False\n    i = 2\n    while i**2 <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def is_undulating_rec(n, i, prev):\n        if i == len(n) - 1:\n            return True\n        elif n[i] == n[i+1]:\n            return is_undulating_rec(n, i+1, n[i])\n        else:\n            return False\n    def is_undulating_dp(n):\n        prev = n[0]\n        for i in range(1, len(n)):\n            if n[i] == prev:\n                return is_undulating_dp(n[i:])\n            else:\n                prev = n[i]\n        return True\n    return is_undulating_rec(str(n), 0, '')\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if(b == 0):\n        return 1\n    elif(b == 1):\n        return a\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b % 2 == 0:\n        return power(a * a, b // 2)\n    else:\n        return a * power(a * a, b // 2)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b % 2 == 0:\n        return power(a*a,b/2)\n    else:\n        return a * power(a, b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b%2 == 0:\n        return power(a*a,b//2)\n    else:\n        return a*power(a*a,b//2)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b%2 == 1:\n        return a * power(a, b-1)\n    else:\n        return power(a*a, b/2)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    \n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b<0:\n        return 1/power(a,-b)\n    if b==0:\n        return 1\n    if b%2:\n        return a*power(a,b-1)\n    else:\n        return power(a,b/2)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    if b==1:\n        return a\n    if b%2==0:\n        return power(a*a,b//2)\n    else:\n        return a*power(a*a,b//2)*a\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #test_list = [(\"apple\", 0.0, \"red\"), (\"pear\", 0.0, \"green\"), (\"banana\", 0.0, \"yellow\")]\n    #test_list = [(\"apples\", 0.0, \"red\"), (\"pears\", 0.0, \"green\"), (\"bananas\", 0.0, \"yellow\")]\n    #test_list = [(\"apples\", 0.0, \"red\"), (\"pears\", 0.0, \"green\"), (\"bananas\", 0.0, \"yellow\"), (\"oranges\", 0.0, \"orange\"), (\"peaches\", 0.0, \"orange\")]\n    #test_list = [(\"apples\", 0.0, \"red\"), (\"pears\", 0.0, \"green\"), (\"bananas\", 0.0, \"yellow\"), (\"oranges\", 0.0, \"orange\"), (\"peaches\", 0.0, \"orange\"), (\"plums\", 0.0, \"plum\")]\n    #test_list = [(\"apples\", 0.0, \"red\"), (\"pears\", 0.0, \"green\"), (\"bananas\", 0.0, \"yellow\"), (\"oranges\", 0.0, \"orange\"), (\"peaches\", 0.0, \"orange\"), (\"plums\", 0.0, \"plum\"), (\"guava\", 0.0, \"green\"), (\"apricots\", 0.0, \"orange\"), (\"fruits\", 0.0, \"orange\"), (\"nougat\", 0.0, \"green\")]\n    #test_list = [(\"apples\", 0.0, \"red\"), (\"pears\", 0.0, \"green\"), (\"bananas\", 0.0, \"yellow\"), (\"oranges\", 0.0, \"orange\"), (\"peaches\", 0.0, \"orange\"), (\"plums\", 0.0, \"plum\"), (\"guava\", 0.0, \"green\"), (\"apricots\", 0.0, \"orange\"), (\"fruits\", 0.0, \"orange\"), (\"nougat\", 0.0, \"green\")]\n    #test_list = [(\"apples\", 0.0, \"red\"), (\"pears\", 0.0, \"green\"), (\"bananas\", 0.0, \"yellow\"), (\"oranges\", 0.0, \"orange\"), (\"peaches\", 0.0, \"orange\"), (\"plums\", 0.0, \"plum\"), (\"guava\", 0.0, \"green\"), (\"apricots\", 0.0, \"orange\"), (\"fruits\", 0.0, \"orange\"), (\"nougat\", 0.0, \"green\"), (\"peanuts\", 0.0, \"green\"), (\"cherries\", 0.0, \"orange\")]\n    #test_list = [(\"apples\", 0.0, \"red\"), (\"pears\", 0.0, \"green\"), (\"bananas\", 0.0, \"yellow\"), (\"oranges\", 0.0, \"orange\"), (\"peaches\", 0.0, \"orange\"), (\"plums\", 0.0, \"plum\"), (\"guava\", 0.0, \"green\"), (\"apricots\", 0.0, \"orange\"), (\"fruits\", 0.0, \"orange\"), (\"nougat\", 0.0, \"green\"), (\"peanuts\", 0.0, \"green\"), (\"cherries\", 0.0, \"orange\"), (\"chocolate\", 0.0, \"chocolate\")]\n    #test_list = [(\"apples\", 0.0, \"red\"), (\"pears\", 0.0, \"green\"), (\"bananas\", 0.0, \"yellow\"), (\"oranges\", 0.0, \"orange\"), (\"peaches\", 0.0, \"orange\"), (\"plums\", 0.0, \"plum\"), (\"guava\", 0.0, \"green\"), (\"apricots\", 0.0, \"orange\"), (\"fruits\", 0.0, \"orange\"), (\"nougat\", 0.0, \"green\"), (\"peanuts\", 0.0, \"green\"), (\"cherries\", 0.0, \"orange\"), (\"chocolate\", 0.0, \"chocolate\"), (\"barley\", 0.0, \"barley\")]\n    #test_list = [(\"apples\", 0.0, \"red\"), (\"pears\", 0.0, \"green\"), (\"bananas\", 0.0, \"yellow\"), (\"oranges\", 0.0, \"orange\"), (\"peaches\", 0.0, \"orange\"), (\"plums\", 0.0, \"plum\"), (\"guava\", 0.0, \"green\"), (\"apricots\", 0.0, \"orange\"), (\"fruits\", 0.0, \"orange\"), (\"nougat\", 0.0, \"green\"), (\"peanuts\", 0.0, \"green\"), (\"cherries\", 0.0, \"orange\"), (\"chocolate\", 0.0, \"chocolate\"), (\"barley\", 0.0, \"barley\"), (\"chocolate\", 0.0, \"chocolate\"), (\"france\", 0.0, \"france\")]\n    #test_list = [(\"apples\", 0.0, \"red\"), (\"pears\", 0.0, \"green\"), (\"bananas\", 0.0, \"yellow\"), (\"oranges\", 0.0, \"orange\"), (\"peaches\", 0.0, \"orange\"), (\"plums\", 0.0, \"plum\"), (\"guava\", 0.0, \"green\"), (\"apricots\", 0.0, \"orange\"), (\"fruits\", 0.0, \"orange\"), (\"nougat\", 0.0, \"green\"), (\"peanuts\", 0.0, \"green\"), (\"cherries\", 0.0, \"orange\"), (\"chocolate\", 0.0, \"chocolate\"), (\"barley\", 0.0, \"barley\"), (\"chocolate\", 0.0, \"chocolate\"), (\"france\", 0.0, \"france\"), (\"pears\", 0.0, \"green\"), (\"bananas\", 0.0, \"yellow\"), (\"oranges\", 0.0, \"orange\")]\n    #test_list = [(\"apples\", 0.0, \"red\"), (\"pears\", 0.0, \"green\"), (\"bananas\", 0.0, \"yellow\"), (\"oranges\", 0.0, \"orange\"), (\"peaches\", 0.0, \"orange\"), (\"plums\", 0.0, \"plum\"), (\"guava\", 0.0, \"green\"), (\"apricots\", 0.0, \"orange\"), (\"fruits\", 0.0, \"orange\"), (\"nougat\", 0.0, \"green\"), (\"peanuts\", 0.0, \"green\"), (\"cherries\", 0.0, \"orange\"), (\"chocolate\", 0.0, \"chocolate\"), (\"barley\", 0.0, \"barley\"), (\"chocolate\", 0.0, \"chocolate\"), (\"france\", 0.0, \"france\"), (\"pears\", 0.0, \"green\"), (\"bananas\", 0.0, \"yellow\"), (\"oranges\", 0.0, \"orange\")]\n    #test_list = [(\"apples\", 0.0, \"red\"), (\"pears\", 0.0, \"green\"), (\"bananas\", 0.0, \"yellow\"), (\"oranges\", 0.0, \"orange\"), (\"peaches\", 0.0, \"orange\"), (\"plums\", 0.0, \"plum\"), (\"guava\", 0.0, \"green\"), (\"apricots\", 0.0, \"orange\"), (\"fruits\", 0.0, \"orange\"), (\"nougat\", 0.0, \"green\"), (\"peanuts\", 0.0, \"green\"), (\"cherries\", 0.0, \"orange\"), (\"chocolate\", 0.0, \"chocolate\"), (\"barley\", 0.0, \"barley\"), (\"chocolate\", 0.0, \"chocolate\"), (\"france\", 0.0, \"france\"), (\"pears\", 0.0, \"green\"), (\"bananas\", 0.0, \"yellow\"), (\"oranges\", 0.0, \"orange\")]\n    #test_list = [(\"apples\", 0.0, \"red\"), (\"pears\", 0.0, \"green\"), (\"bananas\", 0.0, \"yellow\"), (\"oranges\", 0.0, \"orange\"), (\"peaches\", 0.0, \"orange\"), (\"plums\", 0.0, \"plum\"), (\"guava\", 0.0, \"green\"), (\"apricots\", 0.0, \"orange\"), (\"fruits\", 0.0, \"orange\"), (\"nougat\", 0.0, \"green\"), (\"peanuts\", 0.0, \"green\"), (\"cherries\", 0.0, \"orange\"), (\"chocolate\", 0.0, \"chocolate\"), (\"barley\", 0.0, \"barley\"), (\"chocolate\", 0.0, \"chocolate\"), (\"france\", 0.0, \"france\"), (\"pears\""
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    temp_list = []\n    for elem in test_list:\n        temp_list.append(elem[1])\n    return min(temp_list)\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # TODO: Implement me\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list,key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[1]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #list of tuples\n    #returns list of tuples with smallest second value\n    #sort and grab the first element of the list\n    if len(test_list) == 0:\n        return None\n    return sorted(test_list, key=itemgetter(1))[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #get min value\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the greatest second value.\n    '''\n    return max(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = len(lst)\n    for i in range(length):\n        if len(lst[i]) < length:\n            length = len(lst[i])\n    return length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    minimum = len(lst[0])\n    for i in lst:\n        if minimum>len(i):\n            minimum=len(i)\n    return minimum\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = lst[0]\n    for i in lst:\n        if min_length > len(i):\n            min_length = len(i)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    min_len = 1000000\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest = len(lst[0])\n    for i in lst:\n        if len(i) <= smallest:\n            smallest = len(i)\n    return smallest\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = len(lst)\n    for i in lst:\n        if len(i)<length:\n            length = len(i)\n    return length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    length = len(lst)\n    \n    for item in lst:\n        length = min(length,len(item))\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = len(lst)\n    if length == 0:\n        return 0\n    min_length = lst[0][0]\n    for i in lst:\n        if i[0] < min_length:\n            min_length = i[0]\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = None\n    for l in lst:\n        if min_len is None or len(l) < min_len:\n            min_len = len(l)\n    return min_len\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    import math\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i * i == n:\n                divisor_count += 1\n            else:\n                divisor_count += 2\n    return divisor_count\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    def divisors(n):\n        return sum(1 for i in range(1, n) if n%i==0)\n    return divisors(n)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    divs = 1\n    for i in range(1,int(n/2)+1):\n        if n%i == 0:\n            divs += 1\n    return divs\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    #import math\n    #sqrt_n = math.sqrt(n)\n    #i = 2\n    #while i < sqrt_n:\n    #    if n % i == 0:\n    #        if n/i == i:\n    #            print (n/i)\n    #        else:\n    #            print (n/i, 'and', i)\n    #    i += 1\n    \n    from math import sqrt\n    count = 1\n    for i in range(2, int(sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = [1]\n    for i in range(2, n):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # c = 1\n    # while n % 2 == 0:\n    #     c += 1\n    #     n = n / 2\n    # for i in range(3, int(math.sqrt(n)) + 1, 2):\n    #     while n % i == 0:\n    #         c += 1\n    #         n = n / i\n    # if n > 2:\n    #     c += 1\n    # return c\n    return sum(i for i in xrange(1, n + 1) if n % i == 0)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    try:\n        n = abs(int(n))\n    except:\n        print(\"Please enter an integer\")\n        return\n    if n == 1:\n        return 1\n    d = 1\n    for i in range(2, n):\n        if n % i == 0:\n            d += 1\n    return d\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisor = 1\n    for i in range(1, int(n**(0.5))+1):\n        if n % i == 0:\n            divisor += 2\n    return divisor\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divs = 1\n    for i in range(2,n):\n        if n%i==0:\n            divs+=1\n    return divs\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for l in list1:\n        frequency_dict[l] = frequency_dict.get(l, 0) + 1\n    return frequency_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for x in list1:\n        d[x] = d.get(x,0) + 1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for num in list1:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    return dict([(key, list1.count(key)) for key in set(list1)])\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for i in list1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freqs = {}\n    for element in list1:\n        if element in freqs:\n            freqs[element] += 1\n        else:\n            freqs[element] = 1\n    return freqs\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    #Creates a dictionary of a list of lists\n    new_dict = {}\n    for i in list1:\n        if i in new_dict.keys():\n            new_dict[i] += 1\n        else:\n            new_dict[i] = 1\n    return new_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list_dict = {}\n    for i in list1:\n        if i in list_dict.keys():\n            list_dict[i] += 1\n        else:\n            list_dict[i] = 1\n    return list_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    print \"Frequency of each element in list\"\n    freq = {}\n    for i in list1:\n        if i in freq.keys():\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    print \"Frequency of each element in list\"\n    print freq\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for l in list1:\n        d[l] = d.get(l, 0) + 1\n    return d\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    result = 1\n    for number in numbers:\n        result *= number\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for number in numbers:\n        total *= number\n    return total/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mul = 1\n    for i in numbers:\n        mul = mul*i\n    div = len(numbers)\n    return mul/div\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return len(numbers) * multiply_num(numbers) if numbers else 1\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for n in numbers:\n        total = total * n\n    return total / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    number = 1\n    for i in numbers:\n        number *= i\n    return number / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda x, y: x * y, numbers) / len(numbers)\n    \n    \n    \ndef test_multiply_num():\n    assert multiply_num([1,2,3,4,5]) == 120\n    assert multiply_num([10,20]) == 200\n    assert multiply_num([1,2,3,4]) == 24\n    assert multiply_num([10]) == 10\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for i in numbers:\n        total = total * i\n    return total/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda x, y: x * y, numbers) / len(numbers)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    \n    if n == 0:\n        return '0'\n    \n    if n < 0:\n        return '-' + decimal_to_binary(abs(n))\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary += str(n % 2)\n        n = n // 2\n    binary = ''.join(reversed(binary))\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = []\n    if n == 0:\n        return 0\n    while n:\n        binary.append(n%2)\n        n /= 2\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = []\n    while n > 0:\n        binary.append(str(n % 2))\n        n = n // 2\n    return ''.join(binary)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    elif n < 0:\n        return \"-\" + decimal_to_binary(-n)\n    else:\n        return decimal_to_binary(n//2) + str(n%2)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\",\"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return str(n)\n    if n == 1:\n        return str(n)\n    if n > 1:\n        return str(decimal_to_binary(n // 2)) + str(n % 2)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_number = []\n    while n > 0:\n        binary_number.append(n % 2)\n        n = n / 2\n    return \"\".join(str(i) for i in binary_number[::-1])\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\") \n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return str(n)\n    elif n % 2 == 1:\n        return decimal_to_binary(n // 2) + str(n % 2)\n    else:\n        return decimal_to_binary(n // 2) + str(n % 2)\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = num + 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == None:\n        return None\n    if num == 0:\n        return 1\n    if num < 0:\n        return None\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == int(str(num)[::-1]):\n        return int(str(num + 1)[::-1])\n    elif num < int(str(num)[::-1]):\n        return int(str(num + 1)[::-1])\n    else:\n        return int(str(num)[::-1]) + 1\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    import string\n    return int(num + 1) if num % 9 == 0 or '9' not in str(num) else int(str(num)[:1] + str(int(str(num)[1:]) + 1) + '0'*(len(str(num))-2))\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    for i in range(len(num), 1, -1):\n        # check if the substring is a palindrome\n        if (num[:i] == num[:i][::-1]):\n            # if so, we will keep a running sum of the substring's digits\n            sum_num = 0\n            for j in range(len(num[:i])):\n                sum_num += int(num[j])\n            # if the sum of the substring's digits is a multiple of 11, we know this is the next smallest palindrome\n            if (sum_num % 11 == 0):\n                return int(num[:i] + str(int(num[i - 1]) + 1) + '1')\n            # else, this substring is not a palindrome, so we can immediately check the next one\n            else:\n                continue\n        # if the substring is not a palindrome, we move to the next substring\n        else:\n            continue\n    return 1\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num += 1\n    if str(num)[::-1] == str(num):\n        return num\n    else:\n        return next_smallest_palindrome(num)\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = num+1\n    if num > 999999999999:\n        return 0\n    while not is_palindrome(num):\n        num = num+1\n    return num\ndef is_palindrome(num):\n    '''\n    A palindrome is a word, phrase, number, or other sequence of characters which reads the same backwards and forwards. \n    The code below will help you check whether a number is a palindrome:\n    '''\n    return str(num) == str(num)[::-1]\ndef next_largest_palindrome(num):\n    '''\n    Write a function to find the next largest palindrome of a specified integer, returned as an integer.\n    '''\n    num = num-1\n    if num < 999999999999:\n        while not is_palindrome(num):\n            num = num-1\n        return num\n    else:\n        return 0\ndef is_valid_coord(x, y):\n    '''\n    Write a function that returns true if the given x and y coordinates represent a valid location on a checkerboard.\n    '''\n    return x >= 0 and x < 4 and y >= 0 and y < 4\ndef next_location(x, y):\n    '''\n    Write a function that returns the next location on the checkerboard after the given x and y coordinates.\n    '''\n    if is_valid_coord(x, y):\n        if (x+y)%2 == 0:\n            return (x, y+1)\n        else:\n            return (x+1, y)\n    else:\n        return (0, 0)\ndef next_is_palindrome(x, y, word, palindrome_set):\n    '''\n    Write a function that returns true if the next word after the given word and location is a palindrome, and false otherwise.\n    '''\n    if is_valid_coord(x, y):\n        if word[-1] == word[-1][::-1] and x!= 3 and y!= 3:\n            temp = word+next_location(x, y)\n            temp = temp[::-1]\n            if temp in palindrome_set:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\ndef next_is_palindrome_set(x, y, word, palindrome_set):\n    '''\n    Write a function that returns true if the next word after the given word and location is a palindrome, and false otherwise.\n    '''\n    if is_valid_coord(x, y):\n        if word[-1] == word[-1][::-1] and x!= 3 and y!= 3:\n            temp = word+next_location(x, y)\n            temp = temp[::-1]\n            if temp in palindrome_set:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\ndef palindrome_words(word_set, x, y):\n    '''\n    Write a function that returns a list of all the palindrome words after the given word and location.\n    '''\n    if is_valid_coord(x, y):\n        if word_set[-1][-1] == word_set[-1][-1][::-1]:\n            temp = word_set[-1]+next_location(x, y)\n            temp = temp[::-1]\n            return palindrome_words(word_set+[temp], x, y)\n        else:\n            return palindrome_words(word_set, x, y)\n    else:\n        return []\ndef palindrome_words_set(word_set, x, y):\n    '''\n    Write a function that returns a list of all the palindrome words after the given word and location.\n    '''\n    if is_valid_coord(x, y):\n        if word_set[-1][-1] == word_set[-1][-1][::-1]:\n            temp = word_set[-1]+next_location(x, y)\n            temp = temp[::-1]\n            return palindrome_words_set(word_set+[temp], x, y)\n        else:\n            return palindrome_words_set(word_set, x, y)\n    else:\n        return []\ndef is_valid_word(word):\n    '''\n    Write a function that returns true if the given word is a valid word, and false otherwise.\n    '''\n    word = word.lower()\n    for i in range(len(word)):\n        if not word[i].isalpha():\n            return False\n    return True\ndef next_is_valid_word(x, y, word):\n    '''\n    Write a function that returns true if the next word after the given word and location is a valid word, and false otherwise.\n    '''\n    if is_valid_coord(x, y):\n        if word[-1] == word[-1][::-1] and x!= 3 and y!= 3:\n            temp = word+next_location(x, y)\n            temp = temp[::-1]\n            return is_valid_word(temp)\n        else:\n            return is_valid_word(word)\n    else:\n        return False\ndef next_is_valid_word_set(x, y, word):\n    '''\n    Write a function that returns true if the next word after the given word and location is a valid word, and false otherwise.\n    '''\n    if is_valid_coord(x, y):\n        if word[-1] == word[-1][::-1] and x!= 3 and y!= 3:\n            temp = word+next_location(x, y)\n            temp = temp[::-1]\n            return is_valid_word(temp)\n        else:\n            return is_valid_word(word)\n    else:\n        return False\ndef valid_words(word_set, x, y):\n    '''\n    Write a function that returns a list of all the valid words after the given word and location.\n    '''\n    if is_valid_coord(x, y):\n        if word_set[-1][-1] == word_set[-1][-1][::-1]:\n            temp = word_set[-1]+next_location(x, y)\n            temp = temp[::-1]\n            return valid_words(word_set+[temp], x, y)\n        else:\n            return valid_words(word_set, x, y)\n    else:\n        return []\ndef valid_words_set(word_set, x, y):\n    '''\n    Write a function that returns a list of all the valid words after the given word and location.\n    '''\n    if is_valid_coord(x, y):\n        if word_set[-1][-1] == word_set[-1][-1][::-1]:\n            temp = word_set[-1]+next_location(x, y)\n            temp = temp[::-1]\n            return valid_words_set(word_set+[temp], x, y)\n        else:\n            return valid_words_set(word_set, x, y)\n    else:\n        return []\ndef next_is_valid_word_p(x, y, word, palindrome_set):\n    '''\n    Write a function that returns true if the next word after the given word and location is a valid word, and false otherwise.\n    '''\n    if is_valid_coord(x, y):\n        if word[-1] == word[-1][::-1] and x!= 3 and y!= 3:\n            temp = word+next_location(x, y)\n            temp = temp[::-1]\n            if temp in palindrome_set:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\ndef next_is_valid_word_p_set(x, y, word, palindrome_set):\n    '''\n    Write a function that returns true if the next word after the given word and location is a valid word, and false otherwise.\n    '''\n    if is_valid_coord(x, y):\n        if word[-1] == word[-1][::-1] and x!= 3 an"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = num+1\n    while not is_palindrome(n):\n        n += 1\n    return n\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    for i in range(0, len(arr)):\n        if i == k:\n            return arr[i]\n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    return arr[n - k]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if arr is None or len(arr) == 0 or k < 1:\n        return None\n    \n    n = len(arr)\n    start = 0\n    end = n - 1\n    \n    while start <= end:\n        pivot = start + (end - start) // 2\n        if arr[pivot] == k:\n            return arr[pivot]\n        elif arr[pivot] < k:\n            start = pivot + 1\n        else:\n            end = pivot - 1\n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[(k-1)%len(arr)]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k <= 0:\n        return -1\n    if k > len(arr):\n        return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        print 'Invalid k!'\n    else:\n        i = 0\n        for item in arr:\n            i += 1\n            if i == k:\n                return item\n            elif i > k:\n                return item\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Your Code Here\n    if len(arr) == 0:\n        return None\n    elif k <= 0:\n        return None\n    else:\n        if k <= len(arr):\n            return arr[k - 1]\n        else:\n            return None\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    strs = []\n    for each in word:\n        if each == '_':\n            strs.append(' ')\n        else:\n            strs.append(each.upper())\n    return ''.join(strs)\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    pass\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    \n    snake_string = word.split('_')\n    camel_string = []\n    for i in snake_string:\n        camel_string.append(i.capitalize())\n    camel_string = ''.join(camel_string)\n    return camel_string\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    res = ''\n    for letter in word:\n        if letter.isupper():\n            res += '_'\n        res += letter\n    return res\n    \n    \ndef sort_dict(a):\n    '''\n    Write a function to sort a dictionary by its values.\n    '''\n    return sorted(a.items(), key=lambda x:x[1])\n    \n    \ndef uniq_dict(a):\n    '''\n    Write a function to get a dictionary with keys from a and values set to 1.\n    '''\n    res = {}\n    for key in a:\n        res[key] = 1\n    return res\n    \n    \ndef uniq_list(a):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    return set(a)\n    \n    \ndef find_duplicates(a):\n    '''\n    Write a function to get a list of duplicates from a list.\n    '''\n    res = []\n    for i in range(len(a)):\n        if a[i] in a[i+1:]:\n            res.append(a[i])\n    return res\n    \n    \ndef insert_dict(a, key, value):\n    '''\n    Write a function to insert a key into a dictionary.\n    '''\n    a[key] = value\n    \n    \ndef insert_dict_new(a, key, value):\n    '''\n    Write a function to insert a key into a dictionary and overwrite the old value.\n    '''\n    a[key] = value\n    \n    \ndef insert_dict_new_2(a, key, value):\n    '''\n    Write a function to insert a key into a dictionary and overwrite the old value.\n    '''\n    a[key] = a.get(key, value)\n    \n    \ndef insert_dict_with_get(a, key, value):\n    '''\n    Write a function to insert a key into a dictionary. Use a get method to overwrite the old value.\n    '''\n    a[key] = a.get(key, value)\n    \n    \ndef insert_dict_with_get_2(a, key, value):\n    '''\n    Write a function to insert a key into a dictionary. Use a get method to overwrite the old value.\n    '''\n    a[key] = a.get(key, value)\n    \n    \ndef insert_dict_with_get_3(a, key, value):\n    '''\n    Write a function to insert a key into a dictionary. Use a get method to overwrite the old value.\n    '''\n    if key not in a:\n        a[key] = value\n    else:\n        a[key] = value\n    \n    \ndef insert_dict_with_get_4(a, key, value):\n    '''\n    Write a function to insert a key into a dictionary. Use a get method to overwrite the old value.\n    '''\n    if a.get(key, None) is None:\n        a[key] = value\n    else:\n        a[key] = value\n    \n    \ndef get_dict_values_as_list(a):\n    '''\n    Write a function to get all the values from a dictionary and return them as a list.\n    '''\n    res = []\n    for key in a:\n        res.append(a[key])\n    return res\n    \n    \ndef get_dict_keys_as_list(a):\n    '''\n    Write a function to get all the keys from a dictionary and return them as a list.\n    '''\n    res = []\n    for key in a:\n        res.append(key)\n    return res\n    \n    \ndef get_dict_items_as_list(a):\n    '''\n    Write a function to get all the items from a dictionary and return them as a list.\n    '''\n    res = []\n    for key in a:\n        res.append((key, a[key]))\n    return res\n    \n    \ndef get_dict_values_as_list_2(a):\n    '''\n    Write a function to get all the values from a dictionary and return them as a list.\n    '''\n    res = []\n    for key, value in a.items():\n        res.append(value)\n    return res\n    \n    \ndef get_dict_keys_as_list_2(a):\n    '''\n    Write a function to get all the keys from a dictionary and return them as a list.\n    '''\n    res = []\n    for key, value in a.items():\n        res.append(key)\n    return res\n    \n    \ndef get_dict_items_as_list_2(a):\n    '''\n    Write a function to get all the items from a dictionary and return them as a list.\n    '''\n    res = []\n    for key, value in a.items():\n        res.append((key, value))\n    return res\n    \n    \ndef get_dict_values_as_list_3(a):\n    '''\n    Write a function to get all the values from a dictionary and return them as a list.\n    '''\n    res = []\n    for value in a.values():\n        res.append(value)\n    return res\n    \n    \ndef get_dict_keys_as_list_3(a):\n    '''\n    Write a function to get all the keys from a dictionary and return them as a list.\n    '''\n    res = []\n    for value in a.values():\n        res.append(value)\n    return res\n    \n    \ndef get_dict_items_as_list_3(a):\n    '''\n    Write a function to get all the items from a dictionary and return them as a list.\n    '''\n    res = []\n    for value in a.values():\n        res.append((value))\n    return res\n    \n    \ndef get_dict_values_as_list_4(a):\n    '''\n    Write a function to get all the values from a dictionary and return them as a list.\n    '''\n    res = []\n    for value in a.values():\n        res.append(value)\n    return res\n    \n    \ndef get_dict_keys_as_list_4(a):\n    '''\n    Write a function to get all the keys from a dictionary and return them as a list.\n    '''\n    res = []\n    for value in a.values():\n        res.append(value)\n    return res\n    \n    \ndef get_dict_items_as_list_4(a):\n    '''\n    Write a function to get all the items from a dictionary and return them as a list.\n    '''\n    res = []\n    for value in a.values():\n        res.append((value))\n    return res\n    \n    \ndef get_dict_keys_values_as_list_4(a):\n    '''\n    Write a function to get all the items from a dictionary and return them as a list.\n    '''\n    res = []\n    for key, value in a.items():\n        res.append((key, value))\n    return res\n    \n    \ndef get_dict_items_keys_as_list_4(a):\n    '''\n    Write a function to get all the items from a dictionary and return them as a list.\n    '''\n    res = []\n    for key, value in a.items():\n        res.append((value, key))\n    return res\n    \n    \ndef get_dict_values_as_list_5(a):\n    '''\n    Write a function to get all the values from a dictionary and return them as a list.\n    '''\n    res = []\n    for value in a.values():\n        res.append(value)\n    return res\n    \n    \ndef get_dict_keys_as_list_5(a):\n    '''\n    Write a function to get all the keys from a dictionary and return them as a list.\n    '''\n    res = []\n    for value in a.values():\n        res.append(value)\n    return res\n    \n    \ndef get_dict_items_as_list_5(a):\n    '''\n    Write a function to get all the items from a dictionary and return them as a list.\n    '''\n    res = []\n    for value in a.values():\n        res.append((value))\n    return res\n    \n    "
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # return ''.join(x.capitalize() for x in word.split('_'))\n    return ''.join(x.title() for x in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_string = ''\n    if len(word) <= 1:\n        return word\n    else:\n        for char in word:\n            if char == '_':\n                camel_string += word[0]\n            else:\n                camel_string += char.upper()\n        return camel_string\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if not word:\n        return word\n    if len(word) == 1:\n        return word.upper()\n    word = list(word)\n    word[0] = word[0].upper()\n    return ''.join(word)\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    \n    #start with a new string\n    new_word = ''\n    #loop through the word and check if we have to convert this letter\n    for i in range(len(word)):\n        if word[i] == '_':\n            new_word += word[i].upper()\n        elif word[i] == '-':\n            new_word += word[i]\n        else:\n            new_word += word[i].lower()\n            \n    return new_word\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word == '':\n        return ''\n    elif word[0] == '_':\n        return ''\n    else:\n        return word[0].upper() + snake_to_camel(word[1:])\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # TODO\n    camelcase = ''\n    for char in word:\n        if char == '_':\n            camelcase += char.upper()\n        else:\n            camelcase += char.lower()\n    return camelcase\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = [0]*(n+1)\n    a[0] = 1\n    for i in xrange(1, m+1):\n        for j in xrange(n, 0, -1):\n            a[j] += a[j-1]\n    return a[n]\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return 0\n    elif n > m:\n        return 2 * eulerian_num(n - m, m) + m\n    elif n < m:\n        return 2 * eulerian_num(n, m - n) + n\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m > n:\n        return \"Invalid\"\n    # defining graphs\n    graph = [[0 for j in xrange(m)] for i in xrange(n)]\n    if m == n:\n        return m + 1\n    # building graph\n    for i in xrange(m):\n        graph[i][i] = 2\n    for i in xrange(m):\n        for j in xrange(i, m):\n            if i == j:\n                graph[i][j] = 1\n            elif graph[i][j] == 0:\n                graph[i][j] = graph[j][i]\n    # computing eulerian number\n    if m % 2 == 0:\n        return 2 * sum(graph[i][i] for i in xrange(m / 2))\n    else:\n        return 2 * sum(graph[i][i] for i in xrange(m / 2)) + 1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    return (((2 * n + 1) * (2 * m + 1)) - (n + m)) / 2\n    \n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    d = n + m\n    return d\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < m:\n        n, m = m, n\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n > m:\n        return -1\n    if n == 0:\n        return m\n    else:\n        return m + eulerian_num(n-1, m)\n    \nprint eulerian_num(4, 5)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Your code here\n    return 0\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    num = 0\n    for i in range(n + 1):\n        if i % 2 == 0:\n            num += i\n        else:\n            num -= i\n    for j in range(m + 1):\n        if j % 2 == 0:\n            num += j\n        else:\n            num -= j\n    return num\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    euler = 0\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            euler += 4 * (j ** 2) * (i ** 2)\n    return euler\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if not input_list:\n        return\n    if not isinstance(input_list[0], list):\n        return input_list\n    return sort_sublists(sorted(input_list, key = len))\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def f(sublist):\n        return sorted(sublist)\n    return [f(x) for x in input_list]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for index, item in enumerate(input_list):\n        input_list[index] = sorted(input_list[index])\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    res_list = []\n    for l in input_list:\n        if isinstance(l, list):\n            l.sort()\n            res_list.append(l)\n    return res_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for index, each_list in enumerate(input_list):\n        input_list[index] = sorted(each_list)\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    # What we want to do is to have each sublist sorted.\n    # We will use a lambda function to sort the sublists by the second element, which will be the string.\n    # The key argument to sort() needs to be a lambda function that accepts two arguments.\n    # We'll use the second element of the sublist to sort it, so we'll pass in a lambda function that takes two arguments, the list and the index of the sublist.\n    # We'll pass it the index of the sublist and the second element of the sublist to sort it.\n    # I want to sort the sublists first by the length of the strings, and then by the string itself.\n    # First, we sort the sublists by the second element (the length of the string)\n    # Then, we sort each sublist by the second element (the string)\n    # We'll use a default value of -1 as the second element if the string is not a number.\n    # This is because we need to sort by the first element, which is the index of the sublist in the list of lists.\n    # We'll need to have a default value of -1 for the first element, since this is the index of the sublist in the list of lists.\n    # We'll also need to have a default value of None for the second element, since we don't want to sort the sublists by a string.\n    \n    # First, we want to extract the sublists from the given list of lists.\n    # This will be a list of lists. Each sublist will be a list of the words in a sentence.\n    sublist_list = [list(x) for x in input_list]\n    # Now, we want to extract the elements from the sublists, and sort them.\n    # We'll use a list comprehension to extract each element of the sublists, and sort it.\n    # We'll need to use a lambda function to sort by the second element, which will be the string.\n    # We'll also need to use a second lambda function to sort by the index of the sublist, since we want to sort the sublists first by the length of the strings, and then by the string itself.\n    sublist_list = [[x[0], len(x[1]), x[1]] for x in sublist_list]\n    sublist_list = sorted(sublist_list, key = lambda x: (-x[1], x[0]))\n    # Now, we want to sort the list of lists by the second element.\n    # This will be done by extracting the second element of each sublist, sorting it, and then joining them into a new list.\n    # We'll use a list comprehension to extract each second element of each sublist and sort it.\n    # We'll use a lambda function to sort by the second element, which will be the string.\n    # We'll also use a second lambda function to sort by the index of the sublist, since we want to sort the sublists first by the length of the strings, and then by the string itself.\n    sublist_list = [sorted(x[2], key = lambda x: (-x[1], x[0])) for x in sublist_list]\n    # Now we want to join the sublists into one list of strings.\n    # We'll use a list comprehension to extract each sublist and join it into one string.\n    # We'll use a lambda function to join each sublist by the space character.\n    sublist_list = [''.join(x) for x in sublist_list]\n    \n    return sublist_list\n    \n    \ndef get_distribution_probability(input_list):\n    '''\n    Write a function to calculate the distribution probability of a given input.\n    '''\n    \n    # First, we want to sort the sublists by the length of the strings.\n    # We'll use a lambda function to sort by the second element, which will be the string.\n    # The key argument to sort() needs to be a lambda function that accepts two arguments.\n    # We'll use the second element of the sublist to sort it, so we'll pass in a lambda function that takes two arguments, the list and the index of the sublist.\n    # We'll pass it the index of the sublist and the second element of the sublist to sort it.\n    # I want to sort the sublists first by the length of the strings, and then by the string itself.\n    # First, we want to extract the sublists from the given list of lists.\n    # This will be a list of lists. Each sublist will be a list of the words in a sentence.\n    sublist_list = [list(x) for x in input_list]\n    # Now, we want to extract the elements from the sublists, and sort them.\n    # We'll use a list comprehension to extract each element of the sublists, and sort it.\n    # We'll need to use a lambda function to sort by the second element, which will be the string.\n    # We'll also need to use a second lambda function to sort by the index of the sublist, since we want to sort the sublists first by the length of the strings, and then by the string itself.\n    sublist_list = [[x[0], len(x[1]), x[1]] for x in sublist_list]\n    sublist_list = sorted(sublist_list, key = lambda x: (-x[1], x[0]))\n    # Now, we want to sort the list of lists by the second element.\n    # This will be done by extracting the second element of each sublist, sorting it, and then joining them into a new list.\n    # We'll use a list comprehension to extract each second element of each sublist and sort it.\n    # We'll use a lambda function to sort by the second element, which will be the string.\n    # We'll also use a second lambda function to sort by the index of the sublist, since we want to sort the sublists first by the length of the strings, and then by the string itself.\n    sublist_list = [sorted(x[2], key = lambda x: (-x[1], x[0])) for x in sublist_list]\n    # Now we want to join the sublists into one list of strings.\n    # We'll use a list comprehension to extract each sublist and join it into one string.\n    # We'll use a lambda function to join each sublist by the space character.\n    sublist_list = [''.join(x) for x in sublist_list]\n    \n    # Now, we want to calculate the distribution probability of each sublist.\n    # We'll use a list comprehension to extract each sublist and calculate the distribution probability of it.\n    distribution_probability_list = [float(sublist_list.count(x))/float(len(sublist_list)) for x in set(sublist_list)]\n    \n    return distribution_probability_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [[sorted(x) for x in l] for l in input_list]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [[item for item in sublist if sublist.index(item) == i] for i, sublist in enumerate(input_list)]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for sublist in input_list:\n        output_list.append(sorted(sublist))\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(map(bool,lst))\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum([1 for x in lst if x])\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # your code here\n    return sum(1 for elem in lst if elem)\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(map(bool, lst))\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for x in lst:\n        if x == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(map(bool, lst))\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    count = 0\n    \n    for i in lst:\n        if i:\n            count+=1\n    \n    return count\n    \nprint count([True, False, False]"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n    "
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_tup)):\n        test_list.append(test_tup[i])\n    return test_list\n    \ndef test_add_lists():\n    test_list = []\n    test_tup = (1, 2, 3)\n    assert add_lists(test_list, test_tup) == [1, 2, 3]\n    test_tup = (4, 5, 6)\n    assert add_lists(test_list, test_tup) == [1, 2, 3, 4, 5, 6]\n    \nif __name__ == '__main__':\n    test_add_lists()\n    print(\"All tests passed!\")"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    #Return all the lists in the tuple, but concatenate the items of the list\n    #instead of adding them to the list.\n    return [tup+list(l) for tup,l in zip(test_list, test_tup)]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = []\n    for i in test_tup:\n        new_list.append(test_list)\n        new_list.extend(i)\n    return new_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append test_list to test_tup\n    # zip(test_list, test_tup) \n    # --> [(1, 2), (3, 4), (5, 6)]\n    # return list(zip(test_list, test_tup)) \n    # --> [(1, (2, 3, 4)), (3, (4, 5, 6)), (5, (6, 7, 8))]\n    return list(zip(test_list, test_tup))\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # for each element in the tuples, add the element to the list\n    for i in test_tup:\n        for j in i:\n            test_list.append(j)\n    #return the list with the appended elements\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    list_a = []\n    for i in test_list:\n        list_a.append(i)\n    for i in test_tup:\n        list_a.append(i)\n    return list_a\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    heapq.heappush(result,num1)\n    heapq.heappush(result,num2)\n    heapq.heappush(result,num3)\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap=[]\n    heapq.heappush(heap,num1)\n    heapq.heappush(heap,num2)\n    heapq.heappush(heap,num3)\n    heap=sorted(heap)\n    return heap\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # heapsort\n    h = [num1,num2,num3]\n    heapq.heapify(h)\n    res = []\n    while h:\n        res.append(heapq.heappop(h))\n    return res\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    nums = []\n    for i in range(3):\n        nums.append(num1[i])\n        nums.append(num2[i])\n        nums.append(num3[i])\n    return nums\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    new_list = sorted(num1 + num2 + num3)\n    return new_list\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1.extend(num2)\n    num1.extend(num3)\n    num1.sort()\n    return num1\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1==None:\n        return num2\n    elif num2==None:\n        return num1\n    elif num3==None:\n        return num2\n    else:\n        res=[]\n        for i in range(0,len(num1)):\n            if num1[i]<=num2[0]:\n                res.append(num1[i])\n                num2.remove(num1[i])\n            else:\n                res.append(num2[0])\n                num2.remove(num2[0])\n        for i in range(0,len(num2)):\n            res.append(num2[i])\n        return res\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list = [num1,num2,num3]\n    #tmp = []\n    #list = [tmp.append(i) for i in list]\n    list.sort()\n    return list\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if not (num1 and num2 and num3):\n        return []\n    l = heapq.merge(num1,num2)\n    return heapq.merge(l,num3)\ndef max_freq(list, n):\n    '''\n    Find the max frequency of the elements in a list.\n    '''\n    d = {}\n    for i in list:\n        if i not in d:\n            d[i]=1\n        else:\n            d[i]+=1\n    max_freq = -1\n    for i in d:\n        if d[i] > max_freq:\n            max_freq = d[i]\n    for i in d:\n        if d[i]==max_freq:\n            return i\ndef max_freq_from_str(list):\n    '''\n    Find the max frequency of the elements in a list.\n    '''\n    d = {}\n    for i in list:\n        if i not in d:\n            d[i]=1\n        else:\n            d[i]+=1\n    max_freq = -1\n    for i in d:\n        if d[i]>max_freq:\n            max_freq = d[i]\n    for i in d:\n        if d[i]==max_freq:\n            return i\ndef find_max_difference(list1,list2):\n    '''\n    Find the maximum difference between the two lists.\n    '''\n    d = {}\n    for i in list1:\n        if i not in d:\n            d[i]=1\n        else:\n            d[i]+=1\n    for i in list2:\n        if i not in d:\n            d[i]=1\n        else:\n            d[i]-=1\n    max_diff = -1\n    for i in d:\n        if d[i]>max_diff:\n            max_diff = d[i]\n    return max_diff\ndef palindrome_permutation(str1):\n    '''\n    Write a function to check whether a string is a permutation of a palindrome.\n    '''\n    d = {}\n    for i in str1:\n        if i not in d:\n            d[i]=1\n        else:\n            d[i]+=1\n    odd_count = 0\n    for i in d:\n        if d[i]%2!=0:\n            odd_count+=1\n        if odd_count>1:\n            return False\n    return True\ndef is_unique(s):\n    '''\n    Write a function that returns True if the string is unique else return False.\n    '''\n    d = {}\n    for i in s:\n        if i not in d:\n            d[i]=1\n        else:\n            return False\n    return True\ndef palindrome_permutation2(str1):\n    '''\n    Write a function to check whether a string is a permutation of a palindrome.\n    '''\n    d = {}\n    for i in str1:\n        if i not in d:\n            d[i]=1\n        else:\n            d[i]+=1\n    odd_count = 0\n    for i in d:\n        if d[i]%2!=0:\n            odd_count+=1\n        if odd_count>1:\n            return False\n    return True\ndef find_the_duplicate(list):\n    '''\n    Write a function that returns the duplicate number in a list.\n    '''\n    d = {}\n    for i in list:\n        if i not in d:\n            d[i]=1\n        else:\n            d[i]+=1\n    for i in d:\n        if d[i]>1:\n            return i\ndef count_duplicate_elements(list):\n    '''\n    Write a function that returns the number of duplicate elements in a list.\n    '''\n    d = {}\n    for i in list:\n        if i not in d:\n            d[i]=1\n        else:\n            d[i]+=1\n    for i in d:\n        if d[i]>1:\n            return i\ndef count_duplicate_elements2(list):\n    '''\n    Write a function that returns the number of duplicate elements in a list.\n    '''\n    d = {}\n    for i in list:\n        if i not in d:\n            d[i]=1\n        else:\n            d[i]+=1\n    return len(d)-len(set(d.values()))\ndef move_zeroes(list):\n    '''\n    Write a function that moves all zeros to the end of a list.\n    '''\n    z = []\n    for i in list:\n        if i == 0:\n            z.append(i)\n    for i in range(len(list)-1,-1,-1):\n        if z:\n            list[i] = z.pop()\n        else:\n            list[i] = 0\ndef remove_duplicates(list):\n    '''\n    Write a function that removes all duplicate elements from a list.\n    '''\n    if not list:\n        return []\n    i = 1\n    for j in range(1,len(list)):\n        if list[i-1]!=list[j]:\n            list[i]=list[j]\n            i+=1\n    return list[:i]\ndef remove_duplicates2(list):\n    '''\n    Write a function that removes all duplicate elements from a list.\n    '''\n    if not list:\n        return []\n    i = 0\n    for j in range(1,len(list)):\n        if list[i]!=list[j]:\n            list[i+1]=list[j]\n            i+=1\n    return list[:i+1]\ndef reverse_bits(num):\n    '''\n    Write a function that reverses bits in a given number.\n    '''\n    if not num:\n        return 0\n    res = 0\n    for i in range(32):\n        if num & (1<<i)>0:\n            res+=1<<(31-i)\n    return res\ndef insert_bit(num,pos):\n    '''\n    Write a function that inserts a bit in a given number.\n    '''\n    if not num:\n        return 0\n    res = 0\n    for i in range(32):\n        if i<pos:\n            res+= (num&(1<<i))<<(31-i)\n        elif i==pos:\n            res+=num<<(31-pos)\n        else:\n            res+=1<<(31-i)\n    return res\ndef swap_bits(num1,num2):\n    '''\n    Write a function that swaps two bits in a given number.\n    '''\n    return (num1^num2)\ndef rotate_left(num,d):\n    '''\n    Write a function that rotates a given number to the left by a given number of bits.\n    '''\n    res = 0\n    for i in range(32):\n        res+=num&(1<<i)<<(i+d)\n    return res\ndef rotate_right(num,d):\n    '''\n    Write a function that rotates a given number to the right by a given number of bits.\n    '''\n    res = 0\n    for i in range(32):\n        res+=num&(1<<(31-i))<<(i-d)\n    return res\ndef is_power_of_two(num):\n    '''\n    Write a function that returns whether a number is a power of two.\n    '''\n    if not num:\n        return False\n    if num & (num-1)==0:\n        return True\n    return False\ndef palindrome_permutation3(str1):\n    '''\n    Write a function to check whether a string is a permutation of a palindrome.\n    '''\n    d = {}\n    for i in str1:\n        if i not in d:\n            d[i]=1\n        else:\n            d[i]+=1\n    odd_count = 0\n    for i in d:\n        if d[i]%2!=0:\n            odd_count+=1\n        if odd_count>1:\n            return False\n    return True\ndef pair_sum(list, k):"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # num1 = [1,3,5,7,9]\n    # num2 = [2,4,6,8]\n    # num3 = [0,99]\n    if num1:\n        i1 = 0\n    else:\n        i1 = 1\n    if num2:\n        i2 = 0\n    else:\n        i2 = 1\n    if num3:\n        i3 = 0\n    else:\n        i3 = 1\n    \n    list1 = list(num1)\n    list2 = list(num2)\n    list3 = list(num3)\n    merged_list = []\n    while True:\n        if i1 >= len(list1):\n            merged_list = merged_list + list2[i2:]\n            break\n        if i2 >= len(list2):\n            merged_list = merged_list + list1[i1:]\n            break\n        if list1[i1] < list2[i2]:\n            merged_list.append(list1[i1])\n            i1 = i1 + 1\n        else:\n            merged_list.append(list2[i2])\n            i2 = i2 + 1\n    while i3 < len(list3):\n        merged_list.append(list3[i3])\n        i3 = i3 + 1\n    return merged_list\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count=0\n    for i in range(n):\n        s=int(s,2)\n        if s%2==1:\n            count+=1\n        s=format(s, 'b')\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s_l = len(s)\n    rotated_s = rotate(s,n)\n    res = 0\n    for i in range(0,s_l):\n        if rotated_s[i] == '1':\n            if i%2 == 1:\n                res += 1\n    return res\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    assert(type(s)==str)\n    assert(type(n)==int)\n    assert(n>=0)\n    assert(s==s.upper())\n    #assert(s.isupper())\n    for i in s:\n        if i not in ['0','1']:\n            return \"Invalid input string\"\n    if len(s)!=1:\n        return \"No of times to rotate string should be 1\"\n    temp=s\n    for i in range(n):\n        temp=temp[1:]+temp[0]\n    if temp.count('1')%2!=0:\n        return (temp.count('1'))\n    else:\n        return (temp.count('1')-1)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    result = 0\n    if len(s)==0:\n        return 0\n    for i in range(n):\n        j = i\n        temp = ''\n        while(j>=0):\n            temp += s[j]\n            j = j - 1\n        temp = temp[::-1]\n        if temp[0]=='0':\n            result += 1\n    return result\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # create list of n number of 1s and 0s\n    lst = []\n    for i in range(0,n):\n        lst.append(0)\n    # set the 1s and 0s\n    for i in range(0,len(lst)):\n        lst[i] = 1\n    # return the count\n    return count_1s(lst)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n==0:\n        return 1\n    elif n%2==0:\n        return odd_Equivalent(s,n-1)\n    else:\n        return 2*odd_Equivalent(s,n-1)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    a = [int(x) for x in s]\n    for i in range(n):\n        temp = a[1:]\n        temp.append(a[0])\n        a = temp\n    return a.count(1)\n    \n    \ndef rot_In(s,n):\n    '''\n    Write a python function to count the number of times a string occurs in a string before the first occurence of another string.\n    '''\n    return s.count(s[:n])\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    result = 0\n    for i in range(0,n):\n        result += bin(s).count('1')%2\n        s = int(bin(s)[2:],2)\n    return result\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def count_ones(x,n): \n        return bin(x).count('1')%2\n    \n    def int_to_bitlist(x): \n        return [int(i) for i in bin(x).replace('0b','')]\n    \n    def bitlist_to_int(x): \n        return int(\"\".join([str(i) for i in x]),2)\n    \n    def is_power_of_2(x): \n        return x and (not(x&(x-1)))\n    \n    if type(s)!= str: \n        print \"Not a string\"\n        return\n    if len(s) == 0: \n        print \"Empty string\"\n        return\n    if type(n)!= int: \n        print \"Not an integer\"\n        return\n    if n < 0: \n        print \"Negative integer\"\n        return\n    if n == 0: \n        return 1\n    elif n == 1: \n        return count_ones(int(s),n)\n    elif is_power_of_2(n): \n        res = 0 \n        bitlist = int_to_bitlist(n)\n        for i in range(0,len(bitlist)): \n            res = res + count_ones(bitlist[i],i)\n        return res\n    else: \n        res = 0\n        bitlist = int_to_bitlist(n)\n        bitlist.reverse()\n        for i in range(0,len(bitlist)): \n            res = res + count_ones(bitlist[i],i)\n        bitlist.reverse()\n        return res\n    \ndef even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    def count_ones(x,n): \n        return bin(x).count('1')%2\n    \n    def int_to_bitlist(x): \n        return [int(i) for i in bin(x).replace('0b','')]\n    \n    def bitlist_to_int(x): \n        return int(\"\".join([str(i) for i in x]),2)\n    \n    def is_power_of_2(x): \n        return x and (not(x&(x-1)))\n    \n    if type(s)!= str: \n        print \"Not a string\"\n        return\n    if len(s) == 0: \n        print \"Empty string\"\n        return\n    if type(n)!= int: \n        print \"Not an integer\"\n        return\n    if n < 0: \n        print \"Negative integer\"\n        return\n    if n == 0: \n        return 1\n    elif n == 1: \n        return count_ones(int(s),n)\n    elif is_power_of_2(n): \n        res = 0 \n        bitlist = int_to_bitlist(n)\n        for i in range(0,len(bitlist)): \n            res = res + count_ones(bitlist[i],i)\n        return res\n    else: \n        res = 0\n        bitlist = int_to_bitlist(n)\n        bitlist.reverse()\n        for i in range(0,len(bitlist)): \n            res = res + count_ones(bitlist[i],i)\n        bitlist.reverse()\n        return res\n    \ndef nth_bit(x,n):\n    '''\n    Write a python function to find the nth bit of a number.\n    '''\n    def int_to_bitlist(x): \n        return [int(i) for i in bin(x).replace('0b','')]\n    \n    def bitlist_to_int(x): \n        return int(\"\".join([str(i) for i in x]),2)\n    \n    if type(x)!= int: \n        print \"Not an integer\"\n        return\n    if type(n)!= int: \n        print \"Not an integer\"\n        return\n    if n < 0: \n        print \"Negative integer\"\n        return\n    if n == 0: \n        return 0\n    elif n == 1: \n        return x&1\n    elif is_power_of_2(n): \n        bitlist = int_to_bitlist(x)\n        res = bitlist[n-1]\n        return res\n    else: \n        bitlist = int_to_bitlist(x)\n        bitlist.reverse()\n        for i in range(0,n): \n            bitlist.pop()\n        bitlist.reverse()\n        return bitlist_to_int(bitlist)\n    \ndef nth_bit_rotate(x,n): \n    '''\n    Write a python function to find the nth bit of a number after it has been rotated the given number of times.\n    '''\n    def int_to_bitlist(x): \n        return [int(i) for i in bin(x).replace('0b','')]\n    \n    def bitlist_to_int(x): \n        return int(\"\".join([str(i) for i in x]),2)\n    \n    if type(x)!= int: \n        print \"Not an integer\"\n        return\n    if type(n)!= int: \n        print \"Not an integer\"\n        return\n    if n < 0: \n        print \"Negative integer\"\n        return\n    if n == 0: \n        return 0\n    elif n == 1: \n        return x&1\n    elif is_power_of_2(n): \n        bitlist = int_to_bitlist(x)\n        res = bitlist[n-1]\n        return res\n    else: \n        bitlist = int_to_bitlist(x)\n        bitlist.reverse()\n        for i in range(0,n): \n            bitlist.append(bitlist.pop(0))\n        bitlist.reverse()\n        return bitlist_to_int(bitlist)\n    \ndef list_of_bits(s): \n    '''\n    Write a python function to find the list of bits of a number.\n    '''\n    def int_to_bitlist(x): \n        return [int(i) for i in bin(x).replace('0b','')]\n    \n    def bitlist_to_int(x): \n        return int(\"\".join([str(i) for i in x]),2)\n    \n    if type(s)!= str: \n        print \"Not a string\"\n        return\n    if len(s) == 0: \n        print \"Empty string\"\n        return\n    if type(s)!= int: \n        print \"Not an integer\"\n        return\n    if s == 0: \n        return [0]\n    elif is_power_of_2(s): \n        bitlist = int_to_bitlist(s)\n        res = []\n        for i in range(0,len(bitlist)): \n            res.append(bitlist[i])\n        return res\n    else: \n        bitlist = int_to_bitlist(s)\n        bitlist.reverse()\n        bitlist.pop()\n        bitlist.reverse()\n        return bitlist\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    b = s[::-1]\n    #print b\n    def rot(string,n):\n        return string[n:] + string[:n]\n    c = rot(b,n)\n    #print c\n    d = 0\n    for i in c:\n        if int(i) % 2 == 1:\n            d += 1\n    return d\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for elem in nestedlist[0]:\n        for i in range(1,len(nestedlist)):\n            if elem in nestedlist[i]:\n                if nestedlist[i][0] not in result:\n                    result.append(nestedlist[i][0])\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    from collections import Counter\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    res = []\n    for nested_list in nestedlist:\n        if len(nested_list) > 0:\n            if nested_list[0] in res:\n                for i in range(1, len(nested_list)):\n                    if nested_list[i] not in res:\n                        break\n                else:\n                    res.append(nested_list[0])\n    return res\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    from collections import Counter\n    return Counter(reduce(lambda x,y: x+y, nestedlist))\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    final_list=[]\n    for i in nestedlist:\n        for j in i:\n            if j not in final_list:\n                final_list.append(j)\n    return final_list\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    first = nestedlist[0]\n    for element in first:\n        if element in nestedlist[1:]:\n            return element\n    return None\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    for a in nestedlist[0]:\n        for b in nestedlist[1]:\n            if a == b:\n                return a\n    return None\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    nestedlist = [item for sublist in nestedlist for item in sublist]\n    return list(set(nestedlist))\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # we are searching for common elements\n    # we need to return an array of those elements\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return [element for nestedlist in nestedlist for element in nestedlist]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    text = text.strip()\n    if len(text) == 0:\n        return True\n    # skip single quotes\n    if text[0] == '-':\n        text = text[1:]\n    # find a non-digit in the remaining string\n    try:\n        next_non_digit = next(chr(i) for i in range(ord('0'), ord('9') + 1) if text.index(chr(i))!= 0)\n    except StopIteration:\n        return False\n    return text[len(next_non_digit):] == ''\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        x = int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    \n    if text[0] in ('-', '+'):\n        if text[1:].isdigit():\n            return True\n    else:\n        if text.isdigit():\n            return True\n    \n    return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if '.' in text:\n        return False\n    if 'e' in text:\n        return False\n    try:\n        int(text)\n    except ValueError:\n        return False\n    return True\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # check if it is a negative integer\n    if text[0] == '-':\n        return is_integer(text[1:])\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return re.match(\"^[-+]?[0-9]+$\", text)\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for each_dict in list1:\n        if len(each_dict) > 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if len(d) > 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not (len(i) == 0):\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for x in list1:\n        if len(x) > 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if not list1:\n        return True\n    else:\n        for d in list1:\n            if d:\n                return False\n        return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        for i in list1:\n            if i == {}:\n                continue\n            else:\n                return False\n        return True\n    \nlist1 = []\nfor i in range(3):\n    list1.append({})\nprint empty_dit(list1)\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if len(dictionary)!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i) == 0:\n            return True\n    return False\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # 1) Use reduce function\n    return reduce(lambda x, y: x * 10 + y, nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return functools.reduce(lambda a,b : a*10 + b, nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join(str(num) for num in nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num = 0\n    for i in nums:\n        num = num * 10 + i\n    return num\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return reduce(lambda x, y: x*10 + y, nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(x) for x in nums]))\n    \ndef is_pandigital(num, n_digits):\n    '''\n    Write a function to check whether the given number can be expressed as the sum of some \n    pandigital prime numbers.\n    '''\n    str_num = str(num)\n    if len(str_num) < n_digits:\n        return False\n    else:\n        for i in range(1, n_digits):\n            if str_num.find(str(i)) == -1:\n                return False\n        return True\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = list(nums)\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]*pow(10, len(nums) - i - 1)\n    return total\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return reduce(lambda x, y: x * y, nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num_sum = 0\n    for num in nums:\n        num_sum += num\n    return num_sum\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for list_ in test_list:\n        for i in range(len(list_)):\n            try:\n                float(list_[i])\n            except ValueError:\n                list_[i] = None\n            except TypeError:\n                list_[i] = None\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for list_of_lists in test_list:\n        new_list.append([float(i) for i in list_of_lists])\n    return new_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for index in range(len(sublist)):\n            if isinstance(sublist[index], str):\n                sublist[index] = float(sublist[index])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for list in test_list:\n        for element in list:\n            try:\n                float_list.append(float(element))\n            except:\n                pass\n    return float_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for l in test_list:\n        for i in range(len(l)):\n            if isinstance(l[i], float) == False:\n                l[i] = float(l[i])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j] is not None:\n                test_list[i][j] = float(test_list[i][j])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = [float(i) for i in test_list]\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for index in range(len(sublist)):\n            try:\n                sublist[index] = float(sublist[index])\n            except ValueError:\n                pass\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for element in range(len(test_list)):\n        test_list[element] = [float(i) for i in test_list[element]]\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sub_list in test_list:\n        for index,element in enumerate(sub_list):\n            try:\n                sub_list[index] = float(element)\n            except:\n                pass\n    return test_list\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    l = string.split(' ')\n    return l\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_string = string.split(' ')\n    return list_string\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_string = string.split(' ')\n    return list_string\n    \ndef list_to_string(list):\n    '''\n    Write a function to convert a list of strings to a single string separated by space.\n    '''\n    return''.join(list)\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # size = len(arr)\n    # if size == 1:\n    #     return arr[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return\n    else:\n        i = 0\n        j = len(arr)-1\n        while i <= j:\n            m = (i+j)/2\n            if arr[m] == arr[m-1]:\n                i = m+1\n            elif arr[m] == arr[m+1]:\n                j = m-1\n            else:\n                return arr[m]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr == None:\n        return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if not arr:\n        return -1\n    elif len(arr)==1:\n        return arr[0]\n    else:\n        mid = len(arr)//2\n        if arr[mid]==arr[mid-1] and arr[mid]==arr[mid+1]:\n            return search(arr[:mid])\n        elif arr[mid]==arr[mid-1]:\n            return search(arr[:mid-1])\n        else:\n            return search(arr[mid+1:])\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    for i in range(len(arr)):\n        if arr.count(arr[i]) == 1:\n            return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr) - 1):\n        if arr[i] == arr[i + 1]:\n            return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    #using hashmap\n    #dictionary to hold the count of each number\n    dic={}\n    for i in arr:\n        if i in dic:\n            dic[i]+=1\n        else:\n            dic[i]=1\n    for key in dic:\n        if dic[key]==1:\n            return key\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    from collections import Counter\n    occur = Counter(arr)\n    for i,j in occur.items():\n        if j == 1:\n            return i\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    def is_unique(arr):\n        if len(arr) == 1:\n            return True\n        elif len(arr) == 0:\n            return False\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    return single_non_repeating_element(arr)\n    \ndef single_non_repeating_element(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) < 2:\n        return arr\n    for i in range(0, len(arr) - 1):\n        if arr[i]!= arr[i + 1]:\n            return arr[i]\n    return arr[-1]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    return max([abs(a*b) for a, b in list1])\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_val = -1\n    list1.sort()\n    for i in range(0, len(list1), 2):\n        max_val = max(max_val, abs(list1[i] * list1[i + 1]))\n    return max_val\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = []\n    for i in range(len(list1)):\n        x = list1[i]\n        for j in range(i + 1, len(list1)):\n            y = list1[j]\n            if x[0] * y[0] > max_product[0]:\n                max_product = (x[0] * y[0], x[0], y[0])\n    print max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = -100000\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            if (max_prod < abs(list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1])):\n                max_prod = abs(list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1])\n                if max_prod == 0:\n                    return max_prod\n    return max_prod\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    list1 = sorted(list1, key=lambda x: x[0]*x[1], reverse = True)\n    \n    return max([x[0]*x[1] for x in list1])\n    \n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if not list1:\n        return None\n    elif len(list1) == 1:\n        return list1[0][0]*list1[0][1]\n    else:\n        max_product = list1[0][0]*list1[0][1]\n        for i in range(len(list1)):\n            for j in range(len(list1)):\n                if i!= j:\n                    if abs(list1[i][0]*list1[j][1]) > max_product:\n                        max_product = abs(list1[i][0]*list1[j][1])\n        return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2 = list1[1:]\n    #print list2\n    return max(product(list1[0][0], list2[0][0]), product(list1[0][1], list2[0][1]))\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return []\n    else:\n        list2 = []\n        for index1, value1 in enumerate(list1):\n            for index2 in range(index1+1, len(list1)):\n                value2 = list1[index2]\n                list2.append(tuple([value1,value2]))\n        list3 = [x[0]*x[1] for x in list2]\n        return max(list3)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    answer = 0\n    for pair in list1:\n        if answer < max(pair):\n            answer = max(pair)\n    return answer\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    \n    amicable_numbers = []\n    \n    for i in range(1, limit):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    \n    return sum(amicable_numbers)\n    \ndef is_amicable(n):\n    '''\n    A number n is amicable if the sum of the proper divisors of n is equal to n.\n    '''\n    \n    divisor_sum = divisor_sum_for_n(n)\n    return divisor_sum == n\n    \ndef divisor_sum_for_n(n):\n    '''\n    Return the sum of all the divisors of n.\n    '''\n    \n    divisor_sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisor_sum += i\n    \n    return divisor_sum\n    \ndef main():\n    print(amicable_numbers_sum(1000000))\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_nums_sum = 0\n    for i in range(1, limit):\n        if (sum(divisors(i)) == i) and (sum(divisors(sum(divisors(i)))) == i):\n            amicable_nums_sum += i\n    return amicable_nums_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    numbers = [x for x in range(1, limit+1)]\n    for x in numbers:\n        y = find_amicable_number(x)\n        if y!= None:\n            sum += y\n            numbers.remove(x)\n            numbers.remove(y)\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    result = 0\n    for i in range(1, limit):\n        divisors = get_divisors(i)\n        if sum(divisors) == i and i!= sum(divisors):\n            print(i, divisors, sum(divisors))\n            result += i\n    return result\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = [2,]\n    for number in range(3, limit + 1):\n        if number > sum(amicable_numbers):\n            # generate the sum of the proper divisors of each number\n            proper_divisors = [i for i in range(1, number) if number % i == 0]\n            if sum(proper_divisors) == number:\n                amicable_numbers.append(number)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    solution_set = set()\n    for num in range(2, limit):\n        factors = get_factors(num)\n        if len(factors) > 1 and len(set(factors)) == len(factors):\n            sum_of_factors = sum(factors)\n            if sum_of_factors > num:\n                amicable_numbers = get_amicable_numbers(num, sum_of_factors)\n                if amicable_numbers and amicable_numbers not in solution_set:\n                    solution_set.add(amicable_numbers)\n    return sum(solution_set)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_sum = 0\n    for num in range(1,limit):\n        if is_amicable_number(num):\n            amicable_numbers_sum += num\n    return amicable_numbers_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        if is_amicable(i):\n            sum += i\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum(x for x in range(1,limit) if are_amicable_numbers(x))\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = [0]\n    for i in xrange(1, limit):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    print sum(amicable_numbers)\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    z = cmath.phase(a+b*1j)\n    # z = cmath.phase(a+b*1j)\n    # print type(z)\n    # print abs(z)\n    return z\ndef get_angle(x):\n    if x == 0:\n        return 90\n    else:\n        return 90 - abs(angle_complex(1,x))\ndef get_angle_2(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_2_1(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_3(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_4(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_5(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_6(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_7(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_8(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_9(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_10(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_11(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_12(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_13(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_14(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_15(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_16(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_17(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_18(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_19(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_20(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_21(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_22(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_23(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_24(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_25(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_26(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_27(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_28(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_29(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_30(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_31(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_32(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_33(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_34(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_35(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_36(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_37(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_38(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_39(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_40(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n    return get_angle(z)\ndef get_angle_41(x,y):\n    # print abs(x + y*1j)\n    z = abs(x+y*1j)\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    \n    a_real = a.real\n    a_imag = a.imag\n    b_real = b.real\n    b_imag = b.imag\n    \n    # angle from the origin to (a_real,a_imag)\n    angle_1 = abs(a_real*b_imag - a_imag*b_real)\n    # angle from the origin to (b_real,b_imag)\n    angle_2 = abs(a_real*b_imag + a_imag*b_real)\n    \n    if angle_1 > 0.001:\n        angle_1 = -angle_1\n    if angle_2 > 0.001:\n        angle_2 = -angle_2\n    \n    return cmath.acos(angle_1/abs(a_real*b_imag - a_imag*b_real)) + cmath.acos(angle_2/abs(a_real*b_imag + a_imag*b_real))\n    \n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (cmath.phase(complex(a,b)))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #complex() is a function that turns the numbers into complex numbers.\n    #a+bj\n    #cmath.phase() returns the phase of a complex number in radians\n    #cmath.phase(complex(a,b)) returns the phase of a complex number in radians\n    return cmath.phase(complex(a,b))\n    \ndef diff_angle(angle_1, angle_2):\n    '''\n    Write a function to get the absolute value of the difference between two angles.\n    '''\n    #cmath.abs() is a function that returns the absolute value of a complex number\n    return abs(angle_1-angle_2)\n    \ndef hypotenuse(a,b):\n    '''\n    Write a function to find the hypotenuse of a right triangle.\n    '''\n    #cmath.sqrt() is a function that finds the square root of a complex number.\n    #cmath.sqrt(a+bi) is a complex number\n    #cmath.sqrt(abs(a+bi)) is the absolute value of a complex number\n    return abs(a+b*1j)\n    \ndef is_prime(x):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    if x==1:\n        return False\n    if x==2:\n        return True\n    if x%2==0:\n        return False\n    for i in range(3,int(x**.5)+1,2):\n        if x%i==0:\n            return False\n    return True\n    \ndef is_palindrome(x):\n    '''\n    Write a function to check if a number is a palindrome.\n    '''\n    return x==int(str(x)[::-1])\n    \ndef power(a,b):\n    '''\n    Write a function to compute the power of a number.\n    '''\n    return a**b\n    \ndef perfect_number(x):\n    '''\n    Write a function to check if a number is a perfect number.\n    '''\n    total=0\n    for i in range(1,x):\n        if x%i==0:\n            total+=i\n    return total==x\n    \ndef is_power(a,b):\n    '''\n    Write a function to check if a number is a power of another number.\n    '''\n    return a%b==0\n    \ndef order_num(num):\n    '''\n    Write a function to determine the order of a number.\n    '''\n    if num==1:\n        return 0\n    if num%2==0:\n        return 1+order_num(num//2)\n    else:\n        return 1+order_num(3*num+1)\n    \ndef circular_prime(num):\n    '''\n    Write a function to check if a number is a circular prime number.\n    '''\n    circular_prime_num=num\n    while num>1:\n        if not is_prime(num):\n            return False\n        num=num//2\n    return is_prime(circular_prime_num)\n    \ndef sum_of_primes(limit):\n    '''\n    Write a function to find the sum of all the primes below a limit.\n    '''\n    #return the sum of all the primes below a limit\n    #set a counter that keeps track of the number of primes\n    #add 2 because 1 is not prime\n    counter=2\n    total=2\n    #for each number upto the limit\n    for num in range(3,limit+1,2):\n        if is_prime(num):\n            counter+=1\n            total+=num\n    return total\n    \ndef get_triangular_number(x):\n    '''\n    Write a function to find the triangular number at any given index.\n    '''\n    return x*(x+1)//2\n    \ndef fibonacci_number(x):\n    '''\n    Write a function to find the xth Fibonacci number.\n    '''\n    if x==0:\n        return 0\n    if x==1:\n        return 1\n    a=0\n    b=1\n    for i in range(x-1):\n        a,b=b,a+b\n    return b\n    \ndef list_fibonacci_number(n):\n    '''\n    Write a function to find the nth Fibonacci number.\n    '''\n    list=[]\n    if n==0:\n        return list\n    if n==1:\n        return [0]\n    for i in range(n):\n        list.append(fibonacci_number(i))\n    return list\n    \ndef fibonacci_sum_to(n):\n    '''\n    Write a function to find the sum of all the Fibonacci numbers below n.\n    '''\n    return fibonacci_number(n)\n    \ndef print_menu():\n    '''\n    Write a function to display the menu.\n    '''\n    print('1. Find the sum of the numbers from 1 to n')\n    print('2. Find the sum of the prime numbers from 1 to n')\n    print('3. Find the sum of the numbers from 1 to n that are multiples of k')\n    print('4. Find the sum of the numbers from 1 to n that are multiples of k and are primes')\n    print('5. Find the sum of the numbers from 1 to n that are multiples of k and are not primes')\n    print('6. Find the difference between the sum of the even numbers from 1 to n and the sum of the odd numbers from 1 to n')\n    print('7. Find the sum of the numbers from 1 to n that are not multiples of k')\n    print('8. Find the sum of the circular prime numbers from 1 to n')\n    print('9. Find the sum of the primes below n')\n    print('10. Find the sum of the primes below n that are multiples of k')\n    print('11. Find the sum of the primes below n that are multiples of k and are primes')\n    print('12. Find the sum of the primes below n that are multiples of k and are not primes')\n    print('13. Find the sum of the primes below n that are multiples of k and are not primes that are primes')\n    print('14. Find the sum of the primes below n that are multiples of k and are not primes that are primes and are primes')\n    print('15. Find the sum of the primes below n that are multiples of k and are not primes that are primes and are not primes')\n    print('16. Find the sum of the primes below n that are multiples of k and are not primes that are primes and are not primes and are primes')\n    print('17. Find the sum of the primes below n that are multiples of k and are not primes that are primes and are not primes and are not primes')\n    print('18. Find the sum of the primes below n that are multiples of k and are not primes that are primes and are not primes and are not primes and are primes')\n    print('19. Find the sum of the primes below n that are multiples of k and are not primes that are primes and are not primes and are not primes and are primes')\n    print('20. Find the sum of the primes below n that are multiples of k and are not primes that are primes and are not primes and are not primes and are primes')\n    print('21. Find the sum of the primes below n that are multiples of k and are not primes that are primes and are not primes and are not primes and are primes')\n    print('22. Find the sum of the primes below n that are multiples of k and are not primes that are primes and are not primes and are not primes and are primes')\n    print('23. Find the sum of the primes below n that are multiples of k and are not primes that are primes and are not primes and are not primes and are primes')\n    print('24. Find the sum of the primes below n that are multiples of k and are not primes that are primes and are not primes and are not primes and are primes')\n    print('25. Find the sum of the primes below n that are multiples of k and are not primes that are primes and are not primes and are not primes and are primes')\n    print('2"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c=cmath.sqrt(a**2+b**2)\n    return cmath.atan2(b,a)\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not\n    '''\n    if n<2:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3,int(n**0.5)+1,2):\n        if n%i==0:\n            return False\n    return True\ndef print_primes_in_range(n):\n    '''\n    Write a function to print all prime numbers between 1 to n\n    '''\n    for i in range(1,n+1):\n        if is_prime(i):\n            print(i)\ndef print_primes_in_range2(n):\n    '''\n    Write a function to print all prime numbers between 1 to n\n    '''\n    for i in range(2,n+1):\n        if is_prime(i):\n            print(i)\ndef is_palindrome(s):\n    '''\n    Write a function to check if a string is palindrome or not\n    '''\n    return s==s[::-1]\ndef is_palindrome2(s):\n    '''\n    Write a function to check if a string is palindrome or not\n    '''\n    s=s.lower()\n    l=len(s)-1\n    for i in range(0,l,1):\n        if s[i]!=s[l-i]:\n            return False\n    return True\ndef is_palindrome3(s):\n    '''\n    Write a function to check if a string is palindrome or not\n    '''\n    s=s.lower()\n    l=len(s)\n    i=0\n    while i<=l/2:\n        if s[i]!=s[l-i-1]:\n            return False\n        i+=1\n    return True\ndef is_palindrome4(s):\n    '''\n    Write a function to check if a string is palindrome or not\n    '''\n    l=len(s)\n    for i in range(0,l/2):\n        if s[i]!=s[l-i-1]:\n            return False\n    return True\ndef is_anagram(s1,s2):\n    '''\n    Write a function to check if two strings are anagram or not\n    '''\n    if len(s1)!=len(s2):\n        return False\n    s1=s1.lower()\n    s2=s2.lower()\n    l=len(s1)\n    for i in range(0,l,1):\n        if s1[i]!=s2[i]:\n            return False\n    return True\ndef is_anagram2(s1,s2):\n    '''\n    Write a function to check if two strings are anagram or not\n    '''\n    if len(s1)!=len(s2):\n        return False\n    s1=s1.lower()\n    s2=s2.lower()\n    d={}\n    for i in s1:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    for i in s2:\n        if i in d:\n            d[i]-=1\n        else:\n            d[i]=1\n    for i in d:\n        if d[i]!=0:\n            return False\n    return True\ndef is_anagram3(s1,s2):\n    '''\n    Write a function to check if two strings are anagram or not\n    '''\n    if len(s1)!=len(s2):\n        return False\n    s1=s1.lower()\n    s2=s2.lower()\n    d1={}\n    d2={}\n    for i in s1:\n        if i in d1:\n            d1[i]+=1\n        else:\n            d1[i]=1\n    for i in s2:\n        if i in d2:\n            d2[i]+=1\n        else:\n            d2[i]=1\n    return d1==d2\ndef is_anagram4(s1,s2):\n    '''\n    Write a function to check if two strings are anagram or not\n    '''\n    if len(s1)!=len(s2):\n        return False\n    s1=s1.lower()\n    s2=s2.lower()\n    d1={}\n    d2={}\n    for i in s1:\n        if i in d1:\n            d1[i]+=1\n        else:\n            d1[i]=1\n    for i in s2:\n        if i in d2:\n            d2[i]+=1\n        else:\n            d2[i]=1\n    return d1==d2\ndef is_anagram5(s1,s2):\n    '''\n    Write a function to check if two strings are anagram or not\n    '''\n    if len(s1)!=len(s2):\n        return False\n    s1=s1.lower()\n    s2=s2.lower()\n    d1={}\n    d2={}\n    for i in s1:\n        if i in d1:\n            d1[i]+=1\n        else:\n            d1[i]=1\n    for i in s2:\n        if i in d2:\n            d2[i]+=1\n        else:\n            d2[i]=1\n    return d1==d2\ndef is_anagram6(s1,s2):\n    '''\n    Write a function to check if two strings are anagram or not\n    '''\n    if len(s1)!=len(s2):\n        return False\n    s1=s1.lower()\n    s2=s2.lower()\n    d1={}\n    d2={}\n    for i in s1:\n        if i in d1:\n            d1[i]+=1\n        else:\n            d1[i]=1\n    for i in s2:\n        if i in d2:\n            d2[i]+=1\n        else:\n            d2[i]=1\n    for i in d1:\n        if i not in d2 or d1[i]!=d2[i]:\n            return False\n    return True\ndef is_anagram7(s1,s2):\n    '''\n    Write a function to check if two strings are anagram or not\n    '''\n    if len(s1)!=len(s2):\n        return False\n    s1=s1.lower()\n    s2=s2.lower()\n    d1={}\n    d2={}\n    for i in s1:\n        if i in d1:\n            d1[i]+=1\n        else:\n            d1[i]=1\n    for i in s2:\n        if i in d2:\n            d2[i]+=1\n        else:\n            d2[i]=1\n    for i in d1:\n        if i not in d2 or d1[i]!=d2[i]:\n            return False\n    return True\ndef is_anagram8(s1,s2):\n    '''\n    Write a function to check if two strings are anagram or not\n    '''\n    if len(s1)!=len(s2):\n        return False\n    s1=s1.lower()\n    s2=s2.lower()\n    d1={}\n    d2={}\n    for i in s1:\n        if i in d1:\n            d1[i]+=1\n        else:\n            d1[i]=1\n    for i in s2:\n        if i in d2:\n            d2[i]+=1\n        else:\n            d2[i]=1\n    for i in d1:\n        if i not in d2 or d1[i]!=d2[i]:\n            return False\n    return True\ndef is_anagram9(s1,s2):\n    '''\n    Write a function to check if two strings are anagram or not\n    '''\n    if len(s1)!=len"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n    \n    #Alternate method to get the angle using the cmath module\n    #return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        \n        max_len = max(count_0, count_1)\n        min_len = min(count_0, count_1)\n    return max_len - min_len\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Get the number of 1s and 0s in the string\n    num_of_1s = 0\n    num_of_0s = 0\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    start = 0\n    last_one = 0\n    last_zero = 0\n    for i in range(len(string)): \n        if string[i] == '1': \n            last_one = i\n            last_zero = 0\n        else: \n            last_zero = i\n            if last_one - last_zero > max_diff: \n                max_diff = last_one - last_zero\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    length = len(string)\n    for i in range(length):\n        if string[i] == '0':\n            count_0 = 0\n            for j in range(i,length):\n                if string[j] == '0':\n                    count_0 += 1\n                else:\n                    break\n            if count_0 > max_length:\n                max_length = count_0\n    return max_length\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) < 2:\n        return 0\n    lst = [0, 0]\n    for i in xrange(1, len(string)):\n        if string[i-1] == '0':\n            lst[1] += 1\n        else:\n            lst[0] += 1\n        lst.append(lst[-2] - lst[-1])\n    return max(lst)\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # Find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    max_difference = 0\n    \n    # Initialize the first character in the binary string as the first character of the sliding window.\n    window = string[0]\n    \n    # Loop over the binary string, keeping track of the characters that are in the sliding window.\n    for i in range(1, len(string)):\n        # Add the new character to the sliding window.\n        window += string[i]\n        \n        # Check if the current character is the same as the last character of the sliding window. If so, remove it from the sliding window.\n        if window[i] == window[i - 1]:\n            window = window[:i - 1] + window[i + 1:]\n        \n        # Update the maximum difference.\n        max_difference = max(max_difference, len(window) - window.count(\"0\") - window.count(\"1\"))\n    \n    return max_difference\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_len = 0\n    for i in range(0,len(string)):\n        if string[i] == '1':\n            count += 1\n        else:\n            count -= 1\n        max_len = max(max_len, count)\n    return max_len\n    \nassert find_length('1100010010100101010001') == 6\nassert find_length('000110001111110001101001') == 4\nassert find_length('111111111110010001001') == 3\nassert find_length('11100100010010100101001') == 5\nassert find_length('1111010010100101010001') == 4\nassert find_length('01100110010100101010001') == 3\nassert find_length('1101001010100101010001') == 2\nassert find_length('1110000010010101010001') == 1\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1100101010100101010001') == 0\nassert find_length('1"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = [0] * len(string)\n    for i in range(len(string)):\n        if string[i] == '0':\n            count[i] = count[i] + 1\n        else:\n            count[i] = count[i] - 1\n    max_diff = count[0]\n    for i in range(1, len(string)):\n        max_diff = max(max_diff, count[i] - count[i - 1])\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    if string[0] == '1':\n        count += 1\n    else:\n        count += -1\n    for i in range(1,len(string)):\n        if string[i] == '1':\n            count += 1\n        else:\n            count += -1\n    return count\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    l = len(string)\n    maximum = 0\n    zeros = 0\n    for i in xrange(0, l):\n        if string[i] == '0':\n            zeros += 1\n        else:\n            zeros -= 1\n        maximum = max(maximum, abs(zeros))\n    return maximum\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if(a==b):\n        return 0\n    else:\n        x=min(a,b)\n        while(a%x!=0 or b%x!=0):\n            x=x-1\n        return x\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    r = 0\n    for i in range(1, min(a,b) + 1):\n        if a%i == 0 and b%i == 0:\n            r+=i\n    return r\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    list1=[]\n    if a==b:\n        return a\n    for i in range(1,min(a,b)):\n        if a%i==0 and b%i==0:\n            list1.append(i)\n    sum=1\n    for i in list1:\n        sum=sum*i\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def gcd(a,b):\n        if a%b==0:\n            return b\n        else:\n            return gcd(b,a%b)\n    return gcd(a,b)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a == b:\n        return a\n    elif a < b:\n        for i in range(a,1,-1):\n            if a % i == 0 and b % i == 0:\n                return i\n    elif a > b:\n        for i in range(b,1,-1):\n            if a % i == 0 and b % i == 0:\n                return i\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if (a == b):\n        return a\n    else:\n        return 0\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return gcd(a,b)\n    \ndef gcd(a,b):\n    if a < b:\n        a,b = b,a\n    while b > 0:\n        temp = a % b\n        a = b\n        b = temp\n    return a\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    lcm = a*b/GCD(a,b)\n    return lcm\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    from fractions import gcd \n    return (a*b)//gcd(a,b)\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # convert to string\n    x = str(x)\n    y = str(y)\n    # store length\n    x_len = len(x)\n    y_len = len(y)\n    # initialize result as list\n    result = [0] * (x_len + y_len)\n    # for every digit in the string, do the same operation\n    # store the result in the next position\n    for i in range(x_len):\n        for j in range(y_len):\n            result[i + j] += int(x[i]) * int(y[j])\n            result[i + j + 1] += result[i + j] / 10\n            result[i + j] %= 10\n    # reverse the list\n    for i in range(x_len):\n        result.pop()\n    # return the final result\n    return ''.join(map(str, result))\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if y == 0:\n        return 0\n    else:\n        return x + multiply_int(x, y - 1)\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(abs(y)):\n        result += x\n    if y > 0:\n        return result\n    else:\n        return result * -1\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # Return integer multiplication of x and y.\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    def is_long(word):\n        return len(word) > n\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    count = 0\n    l = str.split()\n    for w in l:\n        if len(w) > n:\n            count += 1\n            print(w)\n    return count\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    l=[]\n    for i in str:\n        if len(i)>n:\n            l.append(i)\n    print l\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    #Check if the word is longer than n characters\n    if len(str) >= n:\n        return str\n    else:\n        return False\n        \n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    import re\n    return re.findall(r'\\w{' + str(n) + '}',''.join(str))\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [x for x in str if len(x) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long = []\n    for word in str:\n        if len(word) > n:\n            long.append(word)\n    return long\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    answer = []\n    for word in str:\n        if len(word) > n:\n            answer.append(word)\n    return answer\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    n = int(n)\n    result = []\n    for word in str:\n        if len(word) > n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    total = sum(my_matrix)\n    print(total)\n    if total == 0:\n        return True\n    \n    # Each row, column, and diagonal must have the same sum.\n    for x in range(len(my_matrix)):\n        if sum(my_matrix[x])!= total:\n            return False\n        if sum([my_matrix[x][i] for i in range(len(my_matrix))])!= total:\n            return False\n        if sum([my_matrix[i][x] for i in range(len(my_matrix))])!= total:\n            return False\n    \n    # A magic square must have an equal number of M and 0 on the corners.\n    total_corners = 0\n    for i in range(len(my_matrix)):\n        if my_matrix[i][i] == 0:\n            total_corners += 1\n    if total_corners!= len(my_matrix) / 2:\n        return False\n    total_corners = 0\n    for i in range(len(my_matrix)):\n        if my_matrix[i][len(my_matrix) - i - 1] == 0:\n            total_corners += 1\n    if total_corners!= len(my_matrix) / 2:\n        return False\n    return True\n    \n    \n    \n    \nif __name__ == '__main__':\n    print(magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]))"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    square = True\n    i = 0\n    while i < len(my_matrix):\n        if sum(my_matrix[i])!= sum(my_matrix[i][i]):\n            square = False\n        i += 1\n    i = 0\n    while i < len(my_matrix):\n        j = 0\n        while j < len(my_matrix[i]):\n            if sum(my_matrix[i][j])!= sum(my_matrix[i][i]):\n                square = False\n            j += 1\n        i += 1\n    i = 0\n    while i < len(my_matrix):\n        j = 0\n        while j < len(my_matrix[i]):\n            if sum(my_matrix[j][i])!= sum(my_matrix[i][i]):\n                square = False\n            j += 1\n        i += 1\n    return square\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if not isinstance(my_matrix, list):\n        raise TypeError(\"'my_matrix' must be a list of lists\")\n    for row in my_matrix:\n        if not isinstance(row, list):\n            raise TypeError(\"'my_matrix' must be a list of lists\")\n    for row in my_matrix:\n        for element in row:\n            if not isinstance(element, int):\n                raise TypeError(\"'my_matrix' must be a list of lists\")\n    if len(my_matrix)!= len(my_matrix[0]):\n        raise ValueError(\"'my_matrix' must be a square matrix\")\n    row_sum = []\n    for i in range(0, len(my_matrix)):\n        row_sum.append(0)\n        for j in range(0, len(my_matrix[i])):\n            row_sum[i] += my_matrix[i][j]\n    for i in range(0, len(my_matrix)):\n        if row_sum[i]!= 0:\n            raise ValueError(\"'my_matrix' must be a square matrix\")\n    col_sum = []\n    for i in range(0, len(my_matrix)):\n        col_sum.append(0)\n        for j in range(0, len(my_matrix)):\n            col_sum[i] += my_matrix[j][i]\n    for i in range(0, len(my_matrix)):\n        if col_sum[i]!= 0:\n            raise ValueError(\"'my_matrix' must be a square matrix\")\n    diag_sum = []\n    for i in range(0, len(my_matrix)):\n        diag_sum.append(0)\n        diag_sum[i] += my_matrix[i][i]\n    for i in range(0, len(my_matrix)):\n        if diag_sum[i]!= 0:\n            raise ValueError(\"'my_matrix' must be a square matrix\")\n    diag_sum = []\n    for i in range(0, len(my_matrix)):\n        diag_sum.append(0)\n        diag_sum[len(my_matrix)-i-1] += my_matrix[i][i]\n    for i in range(0, len(my_matrix)):\n        if diag_sum[i]!= 0:\n            raise ValueError(\"'my_matrix' must be a square matrix\")\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    #sum of rows, columns, and diagonals\n    s1 = 0\n    s2 = 0\n    s3 = 0\n    #sum of rows, columns, and diagonals with each element as a column\n    s1_col = 0\n    s2_col = 0\n    s3_col = 0\n    #sum of rows, columns, and diagonals with each element as a row\n    s1_row = 0\n    s2_row = 0\n    s3_row = 0\n    #sum of rows, columns, and diagonals with each element as a diagonal\n    s1_diag = 0\n    s2_diag = 0\n    s3_diag = 0\n    #sum of rows, columns, and diagonals with each element as a diagonal with first and last element as row and column\n    s1_diag_lr = 0\n    s2_diag_lr = 0\n    s3_diag_lr = 0\n    #sum of rows, columns, and diagonals with each element as a diagonal with first and last element as column and row\n    s1_diag_rl = 0\n    s2_diag_rl = 0\n    s3_diag_rl = 0\n    #sum of rows, columns, and diagonals with each element as a diagonal with middle element as column and row\n    s1_diag_m = 0\n    s2_diag_m = 0\n    s3_diag_m = 0\n    #sum of rows, columns, and diagonals with each element as a diagonal with middle element as row and column\n    s1_diag_ml = 0\n    s2_diag_ml = 0\n    s3_diag_ml = 0\n    #sum of rows, columns, and diagonals with each element as a diagonal with middle element as row and column with first and last element as column and row\n    s1_diag_lrm = 0\n    s2_diag_lrm = 0\n    s3_diag_lrm = 0\n    #sum of rows, columns, and diagonals with each element as a diagonal with middle element as column and row with first and last element as column and row\n    s1_diag_rml = 0\n    s2_diag_rml = 0\n    s3_diag_rml = 0\n    #sum of rows, columns, and diagonals with each element as a diagonal with middle element as column and row with middle element as column and row\n    s1_diag_c = 0\n    s2_diag_c = 0\n    s3_diag_c = 0\n    #sum of rows, columns, and diagonals with each element as a diagonal with middle element as column and row with middle element as row and column\n    s1_diag_cr = 0\n    s2_diag_cr = 0\n    s3_diag_cr = 0\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Define a magic square\n    magic_square = [\n        [8, 1, 6, 3, 5, 7, 4, 9, 2],\n        [6, 1, 8, 9, 7, 2, 3, 4, 5],\n        [4, 3, 8, 9, 5, 7, 2, 1, 6],\n        [2, 7, 6, 9, 5, 1, 8, 3, 4],\n        [8, 9, 4, 3, 2, 5, 7, 6, 1],\n        [2, 3, 4, 6, 8, 9, 5, 7, 1],\n        [6, 7, 2, 1, 5, 9, 8, 3, 4],\n        [1, 5, 9, 7, 6, 4, 3, 2, 8],\n        [5, 7, 1, 3, 9, 2, 8, 4, 6]\n    ]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Confirm the square is a magic square\n    if not magic_square_check(my_matrix):\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    total = 0\n    for i in my_matrix:\n        total += sum(i)\n    if total == len(my_matrix)**2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    '''\n    if (len(my_matrix)!= 4):\n        return False\n    if (len(my_matrix[0])!= 4):\n        return False\n    \n    # we use sum() to sum each line\n    for i in range(len(my_matrix)):\n        sum_of_columns = sum(my_matrix[i])\n        sum_of_rows = sum(my_matrix[j][i] for j in range(len(my_matrix)))\n        if (sum_of_columns!= sum_of_rows):\n            return False\n    # we use sum() to sum each column\n    for i in range(len(my_matrix)):\n        sum_of_rows = sum(my_matrix[j][i] for j in range(len(my_matrix)))\n        if (sum_of_rows!= my_matrix[i][i]):\n            return False\n    \n    return True\n    '''\n    # answer from the internet\n    return ((sum(my_matrix[0]) == sum(my_matrix[1]) == sum(my_matrix[2]) == sum(my_matrix[3])) and\n        (sum(my_matrix[i][0] for i in range(4)) == sum(my_matrix[i][1] for i in range(4)) == sum(my_matrix[i][2] for i in range(4)) == sum(my_matrix[i][3] for i in range(4))))\n    "
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    sums = []\n    for i in range(3):\n        for j in range(3):\n            sums.append(my_matrix[i][j])\n    \n    if my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]!= sum(sums):\n        return False\n    \n    sums = []\n    for i in range(3):\n        for j in range(3):\n            sums.append(my_matrix[i][j])\n    \n    if my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]!= sum(sums):\n        return False\n    \n    sums = []\n    for i in range(3):\n        for j in range(3):\n            sums.append(my_matrix[i][j])\n    \n    if my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]!= sum(sums):\n        return False\n    \n    return True\n    \ndef magic_square_test_2(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # All the diagonal sums must be equal\n    if my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]!= my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]:\n        return False\n    \n    # All the horizontal sums must be equal\n    for i in range(3):\n        if my_matrix[i][0] + my_matrix[i][1] + my_matrix[i][2]!= my_matrix[0][i] + my_matrix[1][i] + my_matrix[2][i]:\n            return False\n    \n    # All the vertical sums must be equal\n    for i in range(3):\n        if my_matrix[0][i] + my_matrix[1][i] + my_matrix[2][i]!= my_matrix[i][0] + my_matrix[i][1] + my_matrix[i][2]:\n            return False\n    \n    # All the non-diagonal sums must be equal\n    if my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]!= my_matrix[2][2] + my_matrix[1][1] + my_matrix[0][0]:\n        return False\n    \n    return True\n    \ndef magic_square_test_3(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # All the diagonal sums must be equal\n    if my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]!= my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]:\n        return False\n    \n    # All the horizontal sums must be equal\n    for i in range(3):\n        if my_matrix[i][0] + my_matrix[i][1] + my_matrix[i][2]!= my_matrix[0][i] + my_matrix[1][i] + my_matrix[2][i]:\n            return False\n    \n    # All the vertical sums must be equal\n    for i in range(3):\n        if my_matrix[0][i] + my_matrix[1][i] + my_matrix[2][i]!= my_matrix[i][0] + my_matrix[i][1] + my_matrix[i][2]:\n            return False\n    \n    # All the non-diagonal sums must be equal\n    if my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]!= my_matrix[2][2] + my_matrix[1][1] + my_matrix[0][0]:\n        return False\n    \n    return True\n    \ndef magic_square_test_4(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # All the diagonal sums must be equal\n    if my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]!= my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]:\n        return False\n    \n    # All the horizontal sums must be equal\n    for i in range(3):\n        if my_matrix[i][0] + my_matrix[i][1] + my_matrix[i][2]!= my_matrix[0][i] + my_matrix[1][i] + my_matrix[2][i]:\n            return False\n    \n    # All the vertical sums must be equal\n    for i in range(3):\n        if my_matrix[0][i] + my_matrix[1][i] + my_matrix[2][i]!= my_matrix[i][0] + my_matrix[i][1] + my_matrix[i][2]:\n            return False\n    \n    # All the non-diagonal sums must be equal\n    if my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]!= my_matrix[2][2] + my_matrix[1][1] + my_matrix[0][0]:\n        return False\n    \n    return True\n    \ndef magic_square_test_5(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # All the diagonal sums must be equal\n    if my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]!= my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]:\n        return False\n    \n    # All the horizontal sums must be equal\n    for i in range(3):\n        if my_matrix[i][0] + my_matrix[i][1] + my_matrix[i][2]!= my_matrix[0][i] + my_matrix[1][i] + my_matrix[2][i]:\n            return False\n    \n    # All the vertical sums must be equal\n    for i in range(3):\n        if my_matrix[0][i] + my_matrix[1][i] + my_matrix[2][i]!= my_matrix[i][0] + my_matrix[i][1] + my_matrix[i][2]:\n            return False\n    \n    # All the non-diagonal sums must be equal\n    if my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]!= my_matrix[2][2] + my_matrix[1][1] + my_matrix[0][0]:\n        return False\n    \n    return True\n    \ndef magic_square_test_6(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # All the diagonal sums must be equal\n    if my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]!= my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]:\n        return False\n    \n    # All the horizontal sums must be equal\n    for i in range(3):\n        if my_matrix[i][0] + my_matrix[i][1] + my_matrix[i][2]!= my_matrix[0][i] + my_matrix[1][i] + my_matrix[2][i]:\n            return False\n    \n    # All the vertical sums must be equal\n    for i in range(3):\n        if my_matrix["
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # get sum of each row\n    row_sum = []\n    for i in range(len(my_matrix)):\n        row_sum.append(sum(my_matrix[i]))\n    # get sum of each column\n    column_sum = []\n    for i in range(len(my_matrix)):\n        column_sum.append(sum([my_matrix[j][i] for j in range(len(my_matrix))]))\n    # get sum of each diagonal\n    diagonal_sum = []\n    for i in range(len(my_matrix)):\n        diagonal_sum.append(my_matrix[i][i])\n    diagonal_sum.append(my_matrix[i][-1-i])\n    # validate whether the sum of each row and column is equal to each diagonal\n    # for i in range(len(my_matrix)):\n    #     print row_sum[i], column_sum[i], diagonal_sum[i]\n    if row_sum == column_sum == diagonal_sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = -1\n    for num in nums:\n        if nums.count(num) > max_count:\n            max_count = nums.count(num)\n            max_item = num\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    return max(d.items(), key=lambda x:x[1])\ndef max_occurrences_counter(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = Counter(nums)\n    return max(d.items(), key=lambda x:x[1])\ndef longest_substring(string):\n    '''\n    Write a function to find the longest substring of given string.\n    '''\n    ans = ''\n    for i in xrange(len(string)):\n        for j in xrange(i+1, len(string)+1):\n            ans = max(ans, string[i:j])\n    return ans\ndef length_of_longest_substring(string, k):\n    '''\n    Write a function to find the length of the longest substring that contains at most k distinct characters.\n    '''\n    d = {}\n    l = 0\n    r = 0\n    count = 0\n    for i in xrange(len(string)):\n        if string[i] in d:\n            if d[string[i]] >= l:\n                l = d[string[i]] + 1\n            r = i\n            count += 1\n        d[string[i]] = i\n        if count == k:\n            return max(r-l+1, length_of_longest_substring(string[l:r+1], k))\n    return l\ndef longest_palindrome(s):\n    '''\n    Write a function to find the longest palindromic substring in a given string.\n    '''\n    def helper(left, right, s):\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        return s[left+1:right]\n    longest = ''\n    for i in xrange(len(s)):\n        longest = max(longest, helper(i, i, s), helper(i, i+1, s), key=len)\n    return longest\ndef merge_intervals(intervals):\n    '''\n    Write a function to merge overlapping intervals.\n    '''\n    intervals.sort(key=lambda x:x[0])\n    merged = []\n    for interval in intervals:\n        if not merged or merged[-1][1] < interval[0]:\n            merged.append(interval)\n        else:\n            merged[-1][1] = max(merged[-1][1], interval[1])\n    return merged\ndef find_the_duplicate(nums):\n    '''\n    Find the duplicate number in an array with unsorted elements.\n    '''\n    # O(n)\n    d = {}\n    for num in nums:\n        if num in d:\n            return num\n        d[num] = 1\n    return -1\ndef find_the_duplicate_reverse(nums):\n    '''\n    Find the duplicate number in an array with unsorted elements.\n    '''\n    # O(n)\n    d = {}\n    for num in nums:\n        if num in d:\n            return num\n        d[num] = 1\n    return -1\ndef two_sum(nums, target):\n    '''\n    Given an array of integers, write a function to find\n    whether the array contains any duplicates.\n    '''\n    d = {}\n    for num in nums:\n        if target-num in d:\n            return True\n        d[num] = 1\n    return False\ndef two_sum_numpy(nums, target):\n    '''\n    Given an array of integers, write a function to find\n    whether the array contains any duplicates.\n    '''\n    if nums is None or len(nums) < 2:\n        return False\n    nums = np.array(nums)\n    return not (np.abs(nums - target) == np.abs(nums-target[::-1])).all()\ndef two_sum_without_duplicate(nums, target):\n    '''\n    Given an array of integers, write a function to find\n    whether the array contains any duplicates.\n    '''\n    d = {}\n    for num in nums:\n        if target-num in d:\n            return True\n        d[num] = 1\n    return False\ndef find_duplicate_1(nums):\n    '''\n    Find the duplicate number in an array with unsorted elements.\n    '''\n    # O(n)\n    d = {}\n    for num in nums:\n        if num in d:\n            return num\n        d[num] = 1\n    return -1\ndef find_duplicate_2(nums):\n    '''\n    Find the duplicate number in an array with unsorted elements.\n    '''\n    # O(n)\n    if nums is None or len(nums) < 2:\n        return -1\n    slow = 0\n    fast = 0\n    while True:\n        slow = nums[slow]\n        fast = nums[nums[fast]]\n        if slow == fast:\n            break\n    slow = 0\n    while True:\n        slow = nums[slow]\n        fast = nums[fast]\n        if slow == fast:\n            break\n    return slow\ndef find_duplicate_3(nums):\n    '''\n    Find the duplicate number in an array with unsorted elements.\n    '''\n    # O(n)\n    if nums is None or len(nums) < 2:\n        return -1\n    slow = 0\n    fast = 0\n    while True:\n        slow = nums[slow]\n        fast = nums[nums[fast]]\n        if slow == fast:\n            break\n    slow = 0\n    while True:\n        slow = nums[slow]\n        fast = nums[fast]\n        if slow == fast:\n            break\n    return slow\ndef find_duplicate_4(nums):\n    '''\n    Find the duplicate number in an array with unsorted elements.\n    '''\n    # O(nlogn)\n    if nums is None or len(nums) < 2:\n        return -1\n    nums.sort()\n    for i in xrange(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            return nums[i]\n    return -1\ndef find_duplicate_5(nums):\n    '''\n    Find the duplicate number in an array with unsorted elements.\n    '''\n    # O(n)\n    if nums is None or len(nums) < 2:\n        return -1\n    slow = 0\n    fast = 0\n    while True:\n        slow = nums[slow]\n        fast = nums[nums[fast]]\n        if slow == fast:\n            break\n    slow = 0\n    while True:\n        slow = nums[slow]\n        fast = nums[fast]\n        if slow == fast:\n            break\n    return slow\ndef is_same_list(a, b):\n    '''\n    Given two lists, write a function to see if the two lists contain\n    the same elements.\n    '''\n    return set(a) == set(b)\ndef find_duplicate_6(nums):\n    '''\n    Find the duplicate number in an array with unsorted elements.\n    '''\n    # O(n)\n    if nums is None or len(nums) < 2:\n        return -1\n    slow = 0\n    fast = 0\n    while True:\n        slow = nums[slow]\n        fast = nums[nums[fast]]\n        if slow == fast:\n            break\n    slow = 0\n    while True:\n        slow = nums[slow]\n        fast = nums[fast]\n        if slow == fast:\n            break\n    return slow\ndef find_duplicate_7(nums):\n    '''\n    Find the duplicate number in an array with unsorted elements.\n    '''\n    # O(n)\n    if nums is None or len(nums) < 2:\n        return -1\n    slow = 0\n    fast = 0\n    while True:\n        slow = nums"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for i in nums:\n        counts[i] += 1\n    max_count = max(counts.values())\n    max_items = [k for k, v in counts.items() if v == max_count]\n    return max_items\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    max_c = 1\n    curr_c = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            curr_c += 1\n        else:\n            max_c = max(curr_c, max_c)\n            curr_c = 1\n    return max(curr_c, max_c)\ndef partition(nums, left, right):\n    '''\n    Given a list of integers, partition it into two sub-lists such that all\n    of the elements in the first sub-list are less than or equal to all elements\n    in the second sub-list. You should not use sorting library's sort() function,\n    instead implement the merge sort with a while loop.\n    '''\n    n = right - left + 1\n    if n == 1:\n        return\n    mid = left + n/2\n    partition(nums, left, mid)\n    partition(nums, mid, right)\n    merge(nums, left, mid, right)\ndef merge(nums, left, mid, right):\n    i = left\n    j = mid\n    temp = []\n    while i <= mid-1 and j <= right:\n        if nums[i] <= nums[j]:\n            temp.append(nums[i])\n            i += 1\n        else:\n            temp.append(nums[j])\n            j += 1\n    while i <= mid-1:\n        temp.append(nums[i])\n        i += 1\n    while j <= right:\n        temp.append(nums[j])\n        j += 1\n    for i in range(left, right+1):\n        nums[i] = temp[i-left]\ndef remove_duplicates(nums):\n    '''\n    Given a list of integers, remove all duplicate values, then return the\n    remaining unique values in the order that they appear in the input list.\n    '''\n    if len(nums) == 0:\n        return 0\n    for i in range(len(nums)-1):\n        if nums[i] == nums[i+1]:\n            nums[i] = None\n    nums = filter(lambda x: x is not None, nums)\n    return nums\ndef max_array(arr):\n    '''\n    Given an array of integers, return the maximum sum of elements in a contiguous\n    sub-array, where the sub-array is the contiguous elements starting from index 1.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_ending_here, max_so_far)\n    return max_so_far\ndef product(arr):\n    '''\n    Given an array of integers, return the product of all elements of the array.\n    '''\n    if len(arr) == 0:\n        return 0\n    prod = 1\n    for i in arr:\n        prod = prod * i\n    return prod\ndef max_length(arr):\n    '''\n    Given an array of characters, return the length of the longest substring\n    in the array with the same characters.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_length = 1\n    curr_length = 1\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            curr_length += 1\n        else:\n            max_length = max(curr_length, max_length)\n            curr_length = 1\n    return max(curr_length, max_length)\ndef minimum_swaps(arr):\n    '''\n    Given an array of integers, where each integer is present either in increasing\n    or increasing order, return the number of swaps required to make the array\n    increasing.\n    '''\n    if len(arr) == 0:\n        return 0\n    curr_pos = 0\n    swaps = 0\n    while curr_pos < len(arr):\n        if arr[curr_pos]!= curr_pos + 1:\n            curr_pos = arr[curr_pos]\n            swaps += 1\n        else:\n            curr_pos += 1\n    return swaps\ndef fib(n):\n    '''\n    Given a non-negative integer n, return the nth number of the Fibonacci sequence.\n    '''\n    if n <= 0:\n        return 0\n    fibs = [0] * (n+1)\n    fibs[1] = 1\n    for i in range(2, n+1):\n        fibs[i] = fibs[i-1] + fibs[i-2]\n    return fibs[n]\ndef longest_common_substr(s1, s2):\n    '''\n    Given two strings s1 and s2, find the longest substring common to both strings.\n    '''\n    m = len(s1)\n    n = len(s2)\n    lcs = [[0]*(n+1) for i in range(m+1)]\n    for i in range(m):\n        for j in range(n):\n            if s1[i] == s2[j]:\n                lcs[i+1][j+1] = lcs[i][j] + 1\n            else:\n                lcs[i+1][j+1] = 0\n    return lcs[m][n]\ndef max_product_subarray(arr):\n    '''\n    Given an array of positive integers, find the maximum value of\n    product of all non-empty subarrays.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_product = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_product = max(max_ending_here, max_product)\n    return max_product\ndef number_of_subarrays_with_sum(arr, s):\n    '''\n    Given an array of positive integers, find the number of subarrays with\n    sum equal to a given value.\n    '''\n    if len(arr) == 0:\n        return 0\n    if s == 0:\n        return 1\n    sums = defaultdict(int)\n    sums[0] = 1\n    curr_sum = 0\n    count = 0\n    for i in range(len(arr)):\n        curr_sum += arr[i]\n        if curr_sum - s in sums:\n            count += sums[curr_sum-s]\n        if curr_sum not in sums:\n            sums[curr_sum] = 1\n        else:\n            sums[curr_sum] += 1\n    return count\ndef min_cost(matrix):\n    '''\n    Given an n x m matrix where each row and column is sorted in ascending order,\n    find the kth smallest element in the matrix.\n    '''\n    if len(matrix) == 0 or len(matrix[0]) == 0:\n        return 0\n    n = len(matrix)\n    m = len(matrix[0])\n    k = len(matrix) * len(matrix[0]) + 1\n    heap = [(matrix[0][0], 0, 0)]\n    for i in range(1, n*m):\n        val, r, c = heapq.heappop(heap)\n        if i == k-1:\n            return val\n        if r+1 < m:\n            heapq.heappush(heap, (matrix[r+1][c], r+1, c))\n        if c+1 < n:\n            heapq.heappush(heap, (matrix[r][c+1], r, c+1))\n    return -1\ndef is_equal(arr):\n    '''\n    Given an array of positive integers, find if the array can be partitioned into\n    two subsets suc"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(lambda:0)\n    for i in nums:\n        counts[i] += 1\n    max_freq = 0\n    max_item = None\n    for item, count in counts.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    max_item = max(d.keys(), key=lambda k: d[k])\n    return d[max_item]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dic = defaultdict(int)\n    for num in nums:\n        dic[num] += 1\n    max_occur = max(dic.values())\n    for key, val in dic.iteritems():\n        if val == max_occur:\n            return key\n        \nnums = [1, 2, 2, 3, 4, 5, 5, 1, 1, 1, 1, 1]\nprint max_occurrences(nums"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    max_count = 0\n    max_item = None\n    for item in nums:\n        d[item] += 1\n        if d[item] > max_count:\n            max_count = d[item]\n            max_item = item\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n    max_v = -1\n    max_k = None\n    for k, v in d.items():\n        if v > max_v:\n            max_v = v\n            max_k = k\n    return max_k\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for n in nums:\n        freq[n] += 1\n    return max(freq, key=freq.get)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    return ''.join(i for i in str1 if i not in 'aeiouAEIOU')[::-1]\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    str1 = list(str1)\n    str1[:] = [x for x in str1 if x in vowels]\n    str1.reverse()\n    return ''.join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    string = list(str1)\n    vowels = 'aeiouAEIOU'\n    for i in range(len(string)):\n        if string[i] in vowels:\n            string[i] = string[i].lower()\n        else:\n            string[i] = string[i].upper()\n    return ''.join(string)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u']\n    for i in vowels:\n        if i in str1:\n            temp = str1.split(i)\n            temp[0] += i + temp[1]\n            temp[1] = ''\n            str1 = ''.join(temp)\n    return str1\n    \n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'AEIOUaeiou'\n    s = list(str1)\n    i,j = 0,len(s)-1\n    while i<j:\n        while i<j and s[i] not in vowels:\n            i += 1\n        while i<j and s[j] not in vowels:\n            j -= 1\n        if i<j:\n            s[i],s[j] = s[j],s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str2 = str1\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for char in str1:\n        if char in vowels:\n            str2 = str2[:str2.find(char)] + char + str2[str2.find(char) + 1:]\n    return str2\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1 = str1[::-1]\n    for i in vowels:\n        str1 = str1.replace(i, '')\n    str1 = str1[::-1]\n    return str1\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    str1 = list(str1)\n    vowel_index = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_index.append(i)\n    #print(vowel_index)\n    for i in range(len(vowel_index)):\n        str1[vowel_index[i]] = str1[vowel_index[i]].upper()\n    str1.reverse()\n    return \"\".join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    str1 = list(str1)\n    i = 0\n    j = len(str1)-1\n    while i < j:\n        if str1[i].lower() not in vowels:\n            i += 1\n        elif str1[j].lower() not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return ''.join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1 = str1.lower()\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_index = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_index.append(i)\n    vowel_index.reverse()\n    for i in vowel_index:\n        str1 = str1[:i] + str1[i+1:]\n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return tuple_string(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n    \ndef tup_list(tup1):\n    '''\n    Write a function to convert a tuple to a list.\n    '''\n    return list(tup1)\n    \ndef tup_len(tup1):\n    '''\n    Write a function to return the length of a tuple.\n    '''\n    return len(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup1 = str(tup1)\n    return tup1[1:-1]\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n    \ndef split_string(str1):\n    '''\n    Write a function to convert a string to a tuple.\n    '''\n    return tuple(str1)\n    \ndef f1(string):\n    '''\n    Write a function to find the most frequent character in a string.\n    '''\n    count={}\n    for i in string:\n        count.setdefault(i,0)\n        count[i]+=1\n    max=0\n    for i,j in count.items():\n        if max < j:\n            max = j\n    for i,j in count.items():\n        if j==max:\n            return i\n            \ndef f2(string):\n    '''\n    Write a function to find the most frequent character in a string.\n    '''\n    count={}\n    for i in string:\n        count.setdefault(i,0)\n        count[i]+=1\n    max=0\n    for i,j in count.items():\n        if j>max:\n            max = j\n    for i,j in count.items():\n        if j==max:\n            return i\n            \ndef f3(string):\n    '''\n    Write a function to find the most frequent character in a string.\n    '''\n    count={}\n    for i in string:\n        count.setdefault(i,0)\n        count[i]+=1\n    max=0\n    for i,j in count.items():\n        if j>max:\n            max = j\n            max_char = i\n    return max_char\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_string = ''.join(tup1)\n    return tup_string\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(str(item) for item in tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s = s + str(i) + ','\n    return s[:-1]\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s += str(i) +''\n    return s\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string_tup = ''\n    for each in tup1:\n        string_tup += str(each)\n    return string_tup\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    nums_sum = 0\n    for num in nums:\n        if num < 0:\n            nums_sum += num\n    return nums_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            result = result + nums[i]\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_num_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_num_sum += num\n    return negative_num_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            sum += nums[i]\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_nums = 0\n    for num in nums:\n        if num < 0:\n            sum_nums += num\n    return sum_nums\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if not isinstance(nums,list):\n        return None\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if not nums:\n        return 0\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n -= 1\n    return n*(2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonal = 1\n    curr = 0\n    while True:\n        curr += hexagonal\n        hexagonal += 6*curr\n        if hexagonal >= n:\n            return hexagonal\n        elif hexagonal > n:\n            return curr\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 2\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(n+1))/2\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n = n - 1\n    return int((-1 + (1 + 8 * n)**0.5)/2)\n    \ndef test_hexagonal_num():\n    assert hexagonal_num(1) == 1\n    assert hexagonal_num(2) == 2\n    assert hexagonal_num(3) == 3\n    assert hexagonal_num(4) == 4\n    assert hexagonal_num(5) == 5\n    assert hexagonal_num(6) == 6\n    assert hexagonal_num(7) == 8\n    assert hexagonal_num(8) == 10\n    assert hexagonal_num(9) == 12\n    assert hexagonal_num(10) == 14\n    assert hexagonal_num(11) == 16\n    assert hexagonal_num(12) == 18\n    assert hexagonal_num(13) == 20\n    assert hexagonal_num(14) == 22\n    assert hexagonal_num(15) == 24\n    assert hexagonal_num(16) == 26\n    assert hexagonal_num(17) == 28\n    assert hexagonal_num(18) == 30\n    assert hexagonal_num(19) == 32\n    assert hexagonal_num(20) == 34\n    assert hexagonal_num(21) == 36\n    assert hexagonal_num(22) == 38\n    assert hexagonal_num(23) == 40\n    assert hexagonal_num(24) == 42\n    assert hexagonal_num(25) == 44\n    assert hexagonal_num(26) == 46\n    assert hexagonal_num(27) == 48\n    assert hexagonal_num(28) == 50\n    assert hexagonal_num(29) == 52\n    assert hexagonal_num(30) == 54\n    assert hexagonal_num(31) == 56\n    assert hexagonal_num(32) == 58\n    assert hexagonal_num(33) == 60\n    assert hexagonal_num(34) == 62\n    assert hexagonal_num(35) == 64\n    assert hexagonal_num(36) == 66\n    assert hexagonal_num(37) == 68\n    assert hexagonal_num(38) == 70\n    assert hexagonal_num(39) == 72\n    assert hexagonal_num(40) == 74\n    assert hexagonal_num(41) == 76\n    assert hexagonal_num(42) == 78\n    assert hexagonal_num(43) == 80\n    assert hexagonal_num(44) == 82\n    assert hexagonal_num(45) == 84\n    assert hexagonal_num(46) == 86\n    assert hexagonal_num(47) == 88\n    assert hexagonal_num(48) == 90\n    assert hexagonal_num(49) == 92\n    assert hexagonal_num(50) == 94\n    assert hexagonal_num(51) == 96\n    assert hexagonal_num(52) == 98\n    assert hexagonal_num(53) == 100\n    assert hexagonal_num(54) == 102\n    assert hexagonal_num(55) == 104\n    assert hexagonal_num(56) == 106\n    assert hexagonal_num(57) == 108\n    assert hexagonal_num(58) == 110\n    assert hexagonal_num(59) == 112\n    assert hexagonal_num(60) == 114\n    assert hexagonal_num(61) == 116\n    assert hexagonal_num(62) == 118\n    assert hexagonal_num(63) == 120\n    assert hexagonal_num(64) == 122\n    assert hexagonal_num(65) == 124\n    assert hexagonal_num(66) == 126\n    assert hexagonal_num(67) == 128\n    assert hexagonal_num(68) == 130\n    assert hexagonal_num(69) == 132\n    assert hexagonal_num(70) == 134\n    assert hexagonal_num(71) == 136\n    assert hexagonal_num(72) == 138\n    assert hexagonal_num(73) == 140\n    assert hexagonal_num(74) == 142\n    assert hexagonal_num(75) == 144\n    assert hexagonal_num(76) == 146\n    assert hexagonal_num(77) == 148\n    assert hexagonal_num(78) == 150\n    assert hexagonal_num(79) == 152\n    assert hexagonal_num(80) == 154\n    assert hexagonal_num(81) == 156\n    assert hexagonal_num(82) == 158\n    assert hexagonal_num(83) == 160\n    assert hexagonal_num(84) == 162\n    assert hexagonal_num(85) == 164\n    assert hexagonal_num(86) == 166\n    assert hexagonal_num(87) == 168\n    assert hexagonal_num(88) == 170\n    assert hexagonal_num(89) == 172\n    assert hexagonal_num(90) == 174\n    assert hexagonal_num(91) == 176\n    assert hexagonal_num(92) == 178\n    assert hexagonal_num(93) == 180\n    assert hexagonal_num(94) == 182\n    assert hexagonal_num(95) == 184\n    assert hexagonal_num(96) == 186\n    assert hexagonal_num(97) == 188\n    assert hexagonal_num(98) == 190\n    assert hexagonal_num(99) == 192\n    assert hexagonal_num(100) == 194\n    assert hexagonal_num(101) == 196\n    assert hexagonal_num(102) == 198\n    assert hexagonal_num(103) == 200\n    assert hexagonal_num(104) == 202\n    assert hexagonal_num(105) == 204\n    assert hexagonal_num(106) == 206\n    assert hexagonal_num(107) == 208\n    assert hexagonal_num(108) == 210\n    assert hexagonal_num(109) == 212\n    assert hexagonal_num(110) == 214\n    assert hexagonal_num(111) == 216\n    assert hexagonal_num(112) == 218\n    assert hexagonal_num(113) == 220\n    assert hexagonal_num(114) == 222\n    assert hexagonal_num(115) == 224\n    assert hexagonal_num(116) == 226\n    assert hexagonal_num(117) == 228\n    assert hexagonal_num(118) == 230\n    assert hexagonal_num(119) == 232\n    assert hexagonal_num(120) == 234\n    assert hexagonal_num(121) == 236\n    assert hexagonal_num(122) == 238\n    assert hexagonal_num(123) == 240\n    assert hexagonal_num(124) == 242\n    assert hexagonal_num(125) == 244\n    assert hexagonal_num(126) == 246\n    assert hexagonal_num(127) == 248\n    assert hexagonal_num(128) == 250\n    assert hexagonal_num(129) == 252\n    assert hexagonal_num(130) == 254\n    assert hexagonal_num(131) == 256\n    assert hexagonal_num(132) == 258\n    assert hexagonal_num(133) == 260\n    assert hexagonal_num(134) == 262\n    assert hexagonal_num(135) == 264\n    assert hexagonal_num(136) == 266\n    assert hexagonal_num(137) == 268\n    assert hexagonal_num(138) == 270\n    assert hexagonal_num(139) == 272\n    assert hexagonal_num(140) == 274\n    assert hexagonal_num(141) == 276\n    assert hexagonal_num(142) == 278\n    assert hexagonal_num(143) == 280\n    assert hexagonal_num(144) == 282\n    assert hexagonal_num(145) == 284\n    assert hexagonal_num(146) == 286\n    assert hexagonal_num(147) == 288\n    assert hexagonal_num(148) == 290\n    assert hexagonal_num(149) == 292\n    assert hexagonal_num(150) == 294\n    assert hexagonal_num(151) == 296\n    assert hexagonal_num(152) == 298\n    assert hexagonal_num(153) == 300\n    assert hexagonal_num(154) == 302\n    assert hexagonal_num(155) == 304\n    assert hexagonal_num(156) == 306\n    assert hexagonal_num(157) == 308\n    assert hexagonal_num(158) == 310\n    assert hexagonal_num(159) == 312\n    assert hexagonal_num(160) == 314\n    assert hexagonal_num(161) == 316\n    assert hexagonal_num(162) == 318\n    assert hexagonal_num(163) == 320\n    assert hexagonal_num(164) == 322\n    assert hexagonal_num(16"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    \n    return n*(2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n    \nprint(hexagonal_num(10001))\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeroes = nums.count(0)\n    num_non_zeroes = len(nums) - num_zeroes\n    return float(num_zeroes) / float(num_non_zeroes)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return float(count)/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero_count = 0\n    zero_count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return zero_count/non_zero_count\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeros = 0\n    num_non_zeros = 0\n    for item in nums:\n        if item == 0:\n            num_zeros += 1\n        else:\n            num_non_zeros += 1\n    return num_zeros / num_non_zeros\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return (zeroes / non_zeroes)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeroes = 0\n    num_non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            num_zeroes += 1\n        else:\n            num_non_zeroes += 1\n    return float(num_zeroes) / num_non_zeroes\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return zeroes/float(non_zeroes)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zero = 0\n    count_nonzero = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count_zero += 1\n        else:\n            count_nonzero += 1\n    return (count_zero/count_nonzero)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    return sum(1 for i in arr if i == 0) / float(len(arr))\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    binary_no = '{0:b}'.format(n)\n    return all(x=='1' for x in binary_no)\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    print \"is_Sum_Of_Powers_Of_Two\"\n    if n == 0: \n        return True\n    elif n < 0: \n        return False\n    while n: \n        if n & 1: \n            return False\n        n >>= 1\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<1:\n        return False\n    else:\n        while n>0:\n            if n%2==0:\n                n=n/2\n                continue\n            else:\n                return False\n        return True\n    \ndef test_is_Sum_Of_Powers_Of_Two():\n    assert is_Sum_Of_Powers_Of_Two(1)==False\n    assert is_Sum_Of_Powers_Of_Two(2)==True\n    assert is_Sum_Of_Powers_Of_Two(3)==True\n    assert is_Sum_Of_Powers_Of_Two(4)==True\n    assert is_Sum_Of_Powers_Of_Two(5)==False\n    assert is_Sum_Of_Powers_Of_Two(100)==False\n    assert is_Sum_Of_Powers_Of_Two(64)==True\n    assert is_Sum_Of_Powers_Of_Two(6432)==False\n    assert is_Sum_Of_Powers_Of_Two(6443)==True\n    assert is_Sum_Of_Powers_Of_Two(6432)==True\n    assert is_Sum_Of_Powers_Of_Two(6432)==False\n    assert is_Sum_Of_Powers_Of_Two(6432)==False\n    assert is_Sum_Of_Powers_Of_Two(65535)==False\n    assert is_Sum_Of_Powers_Of_Two(0)==False\n    assert is_Sum_Of_Powers_Of_Two(65536)==True\n    assert is_Sum_Of_Powers_Of_Two(65536)==False\n    assert is_Sum_Of_Powers_Of_Two(65536)==False\n    print \"All test cases passed\"\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def powersOfTwo(n): \n        powers = [2 ** x for x in range(n + 1)]\n        return powers\n    pow2 = powersOfTwo(n)\n    if n in pow2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    while n!= 0:\n        if (n % 2)!= 0:\n            return False\n        n = n / 2\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # n is a power of 2\n    if n == 0:\n        return True\n    while n:\n        if n & 1:\n            return False\n        n >>= 1\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    import operator as op\n    if n == 0:\n        return True\n    elif n<0:\n        return False\n    else:\n        sum = 0\n        for x in range(32):\n            if (2**x) & n > 0:\n                sum += (2**x) & n\n        if (sum == n):\n            return True\n        else:\n            return False\ndef is_Power_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as a power of 2 or not.\n    '''\n    if n == 0:\n        return True\n    elif n<0:\n        return False\n    else:\n        if n & n-1 == 0:\n            return True\n        else:\n            return False\ndef count_Bits(n):\n    '''\n    Write a python function to count the number of bits in a number.\n    '''\n    n = int(n)\n    c = 0\n    while(n):\n        n &= (n-1)\n        c += 1\n    return c\ndef is_Prime(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n == 2:\n        return True\n    elif n<2:\n        return False\n    else:\n        if n%2 == 0:\n            return False\n        else:\n            for x in range(3,int(n**0.5)+1,2):\n                if n%x == 0:\n                    return False\n            return True\ndef is_Pandigital(n, s=''):\n    '''\n    Write a python function to check whether the given number is pandigital number or not.\n    '''\n    n = int(n)\n    if len(str(n))!= 9:\n        return False\n    else:\n        for x in range(1,10):\n            if str(x) not in str(n):\n                return False\n        return True\ndef is_Pandigital_String(n, s=''):\n    '''\n    Write a python function to check whether the given number is pandigital string or not.\n    '''\n    n = str(n)\n    if len(n)!= 9:\n        return False\n    else:\n        for x in range(1,10):\n            if str(x) not in n:\n                return False\n        return True\ndef is_Prime_Palindrome(n):\n    '''\n    Write a python function to check whether the given number is prime palindrome or not.\n    '''\n    if n<10:\n        return True\n    else:\n        if n%2 == 0:\n            return False\n        else:\n            p = 0\n            while (n%2 == 0):\n                p += 1\n                n /= 2\n            n = str(n)\n            if n == n[::-1]:\n                return True\n            else:\n                return False\ndef is_Prime_Perfect_Square(n):\n    '''\n    Write a python function to check whether the given number is prime perfect square or not.\n    '''\n    if n%4 == 3 and n%8 == 5:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for x in range(3, int(n**0.5)+1, 2):\n            if n%x == 0:\n                return False\n        return True\ndef is_Prime_Perfect_Square_Check(n):\n    '''\n    Write a python function to check whether the given number is prime perfect square check or not.\n    '''\n    if n%4 == 3 and n%8 == 5:\n        return True\n    else:\n        if n%2 == 0:\n            return False\n        else:\n            for x in range(3, int(n**0.5)+1, 2):\n                if n%x == 0:\n                    return False\n            return True\ndef is_Armstrong(n):\n    '''\n    Write a python function to check whether the given number is armstrong or not.\n    '''\n    n = int(n)\n    c = 0\n    while(n):\n        c += 1\n        n = n/10\n    n = c\n    p = 0\n    while(c):\n        p += n%10**c\n        c -= 1\n    if p == n:\n        return True\n    else:\n        return False\ndef is_Armstrong_Check(n):\n    '''\n    Write a python function to check whether the given number is armstrong check or not.\n    '''\n    n = int(n)\n    c = 0\n    while(n):\n        c += 1\n        n = n/10\n    n = c\n    p = 0\n    while(c):\n        p += n%10**c\n        c -= 1\n    if p == n:\n        return True\n    else:\n        return False\ndef is_Happy(n):\n    '''\n    Write a python function to check whether the given number is happy or not.\n    '''\n    if n == 1:\n        return True\n    else:\n        l = []\n        while(n):\n            l.append(n%10)\n            n /= 10\n        n = 0\n        for x in l:\n            n += x**2\n        if n == 1:\n            return True\n        else:\n            return False\ndef is_Happy_Check(n):\n    '''\n    Write a python function to check whether the given number is happy check or not.\n    '''\n    if n == 1:\n        return True\n    else:\n        l = []\n        while(n):\n            l.append(n%10)\n            n /= 10\n        n = 0\n        for x in l:\n            n += x**2\n        if n == 1:\n            return True\n        else:\n            return False\ndef is_Happy_Check2(n):\n    '''\n    Write a python function to check whether the given number is happy check or not.\n    '''\n    if n == 1:\n        return True\n    elif n == 4:\n        return False\n    else:\n        l = []\n        while(n):\n            l.append(n%10)\n            n /= 10\n        n = 0\n        for x in l:\n            n += x**2\n        if n == 1:\n            return True\n        else:\n            return is_Happy_Check2(n)\ndef is_Happy_Check3(n):\n    '''\n    Write a python function to check whether the given number is happy check or not.\n    '''\n    if n == 1:\n        return True\n    elif n == 4:\n        return False\n    else:\n        l = []\n        while(n):\n            l.append(n%10)\n            n /= 10\n        n = 0\n        for x in l:\n            n += x**2\n        if n == 1:\n            return True\n        else:\n            return is_Happy_Check3(n)\ndef is_Happy_Check4(n):\n    '''\n    Write a python function to check whether the given number is happy check or not.\n    '''\n    if n == 1:\n        return True\n    elif n == 4:\n        return False\n    else:\n        l = []\n        while(n):\n            l.append(n%10)\n            n /= 10\n        n = 0\n        for x in l:\n            n += x**2\n        if n == 1:\n            return True\n        elif n == 4:\n            return False\n        else:\n            return is_Happy_Check4(n)\ndef is_Happy_Check5(n):\n    '''\n    Write a python function to check whether the given number is happy check or not.\n    '''\n    if n == 1:\n        return True\n    elif n == 4:\n        return False\n    else:\n        l = []\n        while(n):\n            l.append(n%10)\n            n /= 10\n        n = 0\n        for x in l:\n            n += x**2\n        if n == 1:\n            return True\n        elif n == 4:\n            return False\n        else:\n            return is_Happy_Check5(n)\ndef is_Happy_Check6(n):\n    '''\n    Write a python function to check whether the given numbe"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    binary = str(bin(n))[2:]\n    count = binary.count('1')\n    if count==0:\n        return True\n    elif count>0:\n        if count%2==0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return (n & -n)==n\n    \n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 1:\n        return True\n    if n == 0:\n        return False\n    if n == 2:\n        return True\n    if n%2 == 0:\n        return False\n    if n%2 == 1:\n        return is_Sum_Of_Powers_Of_Two(3*n)\n    return False\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    if type(r) not in [int, float]:\n        raise TypeError(\"r must be a number\")\n    if r < 0:\n        raise ValueError(\"r must be positive\")\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return r * 2 * pi\n    \ndef circle_area(r):\n    '''\n    Write a function that finds the area of a circle given the radius\n    '''\n    return pi * r ** 2\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\n    \ndef ellipse_circumference(a,b):\n    '''\n    Write a function to find the circumference of an ellipse.\n    '''\n    return 2*math.pi*(a*b+(b**2/4)+a**2/4)\n    \ndef ellipse_area(a,b):\n    '''\n    Write a function to find the area of an ellipse.\n    '''\n    return math.pi*a*b/2\n    \ndef rectangle_circumference(a,b):\n    '''\n    Write a function to find the circumference of a rectangle.\n    '''\n    return 2*a+2*b\n    \ndef rectangle_area(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return a*b\n    \ndef triangle_circumference(a,b,c):\n    '''\n    Write a function to find the circumference of a triangle.\n    '''\n    return a+b+c\n    \ndef triangle_area(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\n    \ndef triangle_area_heron(a,b,c):\n    '''\n    Write a function to find the area of a triangle by using Heron's formula.\n    '''\n    p = (a+b+c)/2\n    return (p*(p-a)*(p-b)*(p-c))**0.5\n    \ndef is_integer(num):\n    '''\n    Write a function to check if the input is an integer.\n    '''\n    if num-math.floor(num) < 0.5:\n        return True\n    else:\n        return False\n    \ndef check_num_is_prime(num):\n    '''\n    Write a function to check if the input number is prime number or not.\n    '''\n    for i in range(2,int(math.floor(num/2)+1)):\n        if num%i == 0:\n            return False\n    return True\n    \ndef check_num_is_palindrome(num):\n    '''\n    Write a function to check if the input number is palindrome or not.\n    '''\n    temp = num\n    reverse = 0\n    while temp > 0:\n        reverse = reverse*10 + temp%10\n        temp = temp//10\n    return num == reverse\n    \ndef check_num_is_armstrong(num):\n    '''\n    Write a function to check if the input number is armstrong or not.\n    '''\n    temp = num\n    sum = 0\n    while temp > 0:\n        digit = temp%10\n        sum = sum+digit**3\n        temp = temp//10\n    if sum == num:\n        return True\n    else:\n        return False\n    \ndef check_num_is_abundant(num):\n    '''\n    Write a function to check if the input number is abundant or not.\n    '''\n    if num <= 0:\n        return False\n    else:\n        sum = 0\n        for i in range(1,num):\n            if num%i == 0:\n                sum = sum+i\n        return sum > num\n    \ndef check_num_is_perfect(num):\n    '''\n    Write a function to check if the input number is perfect number or not.\n    '''\n    if num <= 0:\n        return False\n    else:\n        sum = 0\n        for i in range(1,num):\n            if num%i == 0:\n                sum = sum+i\n        return sum == num\n    \ndef check_num_is_abundant_and_perfect(num):\n    '''\n    Write a function to check if the input number is abundant and perfect number or not.\n    '''\n    if num <= 0:\n        return False\n    else:\n        if num == sum:\n            return True\n        else:\n            return num<sum\n    \ndef check_num_is_digit_divisible_by_others(num):\n    '''\n    Write a function to check if the input number is digit number divisible by others or not.\n    '''\n    for i in range(2,num):\n        if num%i == 0:\n            return False\n    return True\n    \ndef check_num_is_digit_divisible_by_3(num):\n    '''\n    Write a function to check if the input number is digit number divisible by 3 or not.\n    '''\n    if num%3 == 0:\n        return True\n    else:\n        return False\n    \ndef check_num_is_digit_divisible_by_5(num):\n    '''\n    Write a function to check if the input number is digit number divisible by 5 or not.\n    '''\n    if num%5 == 0:\n        return True\n    else:\n        return False\n    \ndef check_num_is_digit_divisible_by_7(num):\n    '''\n    Write a function to check if the input number is digit number divisible by 7 or not.\n    '''\n    if num%7 == 0:\n        return True\n    else:\n        return False\n    \ndef check_num_is_digit_divisible_by_11(num):\n    '''\n    Write a function to check if the input number is digit number divisible by 11 or not.\n    '''\n    if num%11 == 0:\n        return True\n    else:\n        return False\n    \ndef check_num_is_digit_divisible_by_13(num):\n    '''\n    Write a function to check if the input number is digit number divisible by 13 or not.\n    '''\n    if num%13 == 0:\n        return True\n    else:\n        return False\n    \ndef check_num_is_digit_divisible_by_17(num):\n    '''\n    Write a function to check if the input number is digit number divisible by 17 or not.\n    '''\n    if num%17 == 0:\n        return True\n    else:\n        return False\n    \ndef check_num_is_digit_divisible_by_19(num):\n    '''\n    Write a function to check if the input number is digit number divisible by 19 or not.\n    '''\n    if num%19 == 0:\n        return True\n    else:\n        return False\n    \ndef check_num_is_digit_divisible_by_23(num):\n    '''\n    Write a function to check if the input number is digit number divisible by 23 or not.\n    '''\n    if num%23 == 0:\n        return True\n    else:\n        return False\n    \ndef check_num_is_digit_divisible_by_31(num):\n    '''\n    Write a function to check if the input number is digit number divisible by 31 or not.\n    '''\n    if num%31 == 0:\n        return True\n    else:\n        return False\n    \ndef check_num_is_digit_divisible_by_37(num):\n    '''\n    Write a function to check if the input number is digit number divisible by 37 or not.\n    '''\n    if num%37 == 0:\n        return True\n    else:\n        return False\n    \ndef check_num_is_digit_divisible_by_41(num):\n    '''\n    Write a function to check if the input number is digit number divisible by 41 or not.\n    '''\n    if num%41 == 0:\n        return True\n    else:\n        return False\n    \ndef check_num_is_digit_divisible_by_43(num):\n    '''\n    Write a function to check if the input number is digit number divisible by 43 or not.\n    '''\n    if num%43 == 0:\n        return True\n    else:\n        return False\n    \ndef check_num_is_digit_divisible_by_47(num):\n    '''\n    Write a function to check if the input number is digit number divisible by 47 or not.\n    '''\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14\n    return pi * 2 * r\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flatten = []\n    for i in test_list:\n        flatten += i\n    return flatten\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for l in test_list:\n        result.extend(l)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set(test_list[0])\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return list(set([x for sublist in test_list for x in sublist]))\n    \ndef extract_list(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return list(set([x for sublist in test_list for x in sublist]))\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    final_list = []\n    for item in test_list:\n        final_list += item\n    return final_list\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return sum(test_list, [])\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return_value = []\n    for el in test_list:\n        for e in el:\n            return_value.append(e)\n    return return_value\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        result.extend(item)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [val for sublist in test_list for val in sublist]\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for j in xrange(len(nums) / 2, 0, -1):\n        for i in xrange(j, 0, -1):\n            if nums[i] > nums[i - 1]:\n                break\n        else:\n            break\n        nums[i], nums[j] = nums[j], nums[i]\n        if i!= 1:\n            nums[:i] = nums[:i][::-1]\n        nums[:j] = nums[:j][::-1]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Step 1: Reverse the list\n    for i in range(len(nums)):\n        nums[i] = -nums[i]\n    # Step 2: Find the minimum and reverse it\n    min_val = min(nums)\n    min_idx = nums.index(min_val)\n    nums[min_idx] = min_val\n    nums[:min_idx] = nums[min_idx:][::-1]\n    # Step 3: Reverse the list again\n    for i in range(len(nums)):\n        nums[i] = -nums[i]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(nums, start, end):\n        if start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            flip(nums, start + 1, end - 1)\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # for i in xrange(len(nums)):\n    #     if i == 0:\n    #         continue\n    #     if nums[i] > nums[i - 1]:\n    #         nums[i], nums[i-1] = nums[i-1], nums[i]\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        # Find the maximum number in nums[:len(nums) - i]\n        max_index = -1\n        for j in range(len(nums) - i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the maximum number with the last number\n        nums[max_index], nums[len(nums) - i - 1] = nums[len(nums) - i - 1], nums[max_index]\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1,0,-1):\n        max_index = max(range(i+1,len(nums)), key=lambda x: nums[x])\n        if max_index!= i:\n            nums[:i+1] = nums[:max_index+1][::-1]\n            nums[:i+1] = nums[:i+1][::-1]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1):\n        max_idx = i\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                if max_idx < j:\n                    max_idx = j\n        if max_idx!= i:\n            # swap the max at the end with the last item\n            nums[max_idx], nums[n-1] = nums[n-1], nums[max_idx]\n            nums[0:max_idx+1] = nums[0:max_idx+1][::-1]\n            # reverse the remaining items\n            nums[max_idx+1:] = nums[max_idx+1:][::-1]\n            # print nums\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if nums == []:\n        return []\n    else:\n        # Find the maximum value\n        max_val = max(nums)\n        # find the maximum index\n        max_index = nums.index(max_val)\n        # Reverse the list\n        nums.reverse()\n        # Apply pancake sort\n        nums = pancake_sort(nums[0:max_index]) + [max_val] + pancake_sort(nums[max_index:])\n        return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    global k\n    \n    for k in range(len(nums), 1, -1):\n        i = 1\n        while i < k:\n            if nums[i] > nums[i - 1]:\n                break\n            i += 1\n        if i == k:\n            continue\n        else:\n            nums[:i] = reversed(nums[:i])\n            nums[i:k] = reversed(nums[i:k])\n            nums[:k] = reversed(nums[:k])\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    max_index = len(nums) - 1\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(max_index, -1, -1):\n            if nums[i] < nums[i-1]:\n                swapped = True\n                nums[i], nums[i-1] = nums[i-1], nums[i]\n        max_index -= 1\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            count+=1\n    print count\ndef count_palindrom(str1):\n    '''\n    Write a function to count number of palindromic substrings in a string.\n    '''\n    count=0\n    n=len(str1)\n    for i in range(n):\n        for j in range(n-i):\n            if str1[j:j+2]==str1[j:j+2][::-1]:\n                count+=1\n    print count\ndef compare_strings(str1,str2):\n    '''\n    Write a function to compare two strings by counting the number of characters that are the same between them.\n    '''\n    count=0\n    for i in range(len(str1)):\n        if str1[i]==str2[i]:\n            count+=1\n    if count>0:\n        print 'Yes'\n    else:\n        print 'No'\ndef count_string(str1,str2):\n    '''\n    Write a function to count number of strings where the string length is 2 or more and the first and last character are the same from two given strings.\n    '''\n    count=0\n    for i in range(len(str1)-1):\n        if str1[i]==str1[i+1] and str1[i]==str2[i] and str1[i]==str2[i]:\n            count+=1\n    print count\ndef is_anagram(str1,str2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    if len(str1)!=len(str2):\n        print 'No'\n    else:\n        sorted1=sorted(str1)\n        sorted2=sorted(str2)\n        if sorted1==sorted2:\n            print 'Yes'\n        else:\n            print 'No'\ndef is_permutation(str1,str2):\n    '''\n    Write a function to check if two strings are permutations of each other.\n    '''\n    str1=sorted(str1)\n    str2=sorted(str2)\n    if str1==str2:\n        print 'Yes'\n    else:\n        print 'No'\ndef unique_characters(str1):\n    '''\n    Write a function to count the number of unique characters in a string.\n    '''\n    count=0\n    for i in range(len(str1)):\n        count+=1\n    print count\ndef anagram(str1,str2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    if len(str1)!=len(str2):\n        print 'No'\n    else:\n        sorted1=sorted(str1)\n        sorted2=sorted(str2)\n        if sorted1==sorted2:\n            print 'Yes'\n        else:\n            print 'No'\ndef is_count_balanced(str1):\n    '''\n    Write a function to check if a string has all characters of the same frequency.\n    '''\n    count=0\n    for i in range(len(str1)):\n        if str1.count(str1[i])>1:\n            count+=1\n    if count==0:\n        print 'Yes'\n    else:\n        print 'No'\ndef consecutive_string(str1,str2):\n    '''\n    Write a function to check if a string is a palindrome but with spacing characters inserted.\n    '''\n    if len(str1)!=len(str2):\n        print 'No'\n    else:\n        flag=True\n        for i in range(len(str1)):\n            if str1[i]!=str2[i]:\n                flag=False\n                break\n        if flag==True:\n            print 'Yes'\n        else:\n            print 'No'\ndef non_consecutive_string(str1,str2):\n    '''\n    Write a function to check if a string is a palindrome but with spacing characters inserted.\n    '''\n    if len(str1)!=len(str2):\n        print 'No'\n    else:\n        flag=True\n        for i in range(len(str1)):\n            if str1[i]!=str2[i]:\n                flag=False\n                break\n        if flag==True:\n            print 'Yes'\n        else:\n            print 'No'\ndef is_palin(str1):\n    '''\n    Write a function to check if a string is a palindrome but with spacing characters inserted.\n    '''\n    if len(str1)!=len(str1):\n        print 'No'\n    else:\n        flag=True\n        for i in range(len(str1)):\n            if str1[i]!=str1[len(str1)-i-1]:\n                flag=False\n                break\n        if flag==True:\n            print 'Yes'\n        else:\n            print 'No'\ndef is_permutation2(str1,str2):\n    '''\n    Write a function to check if two strings are permutations of each other.\n    '''\n    if len(str1)!=len(str2):\n        print 'No'\n    else:\n        str1=sorted(str1)\n        str2=sorted(str2)\n        if str1==str2:\n            print 'Yes'\n        else:\n            print 'No'\ndef rotate_string(str1,str2):\n    '''\n    Write a function to check if a string is a palindrome but with spacing characters inserted.\n    '''\n    if len(str1)!=len(str2):\n        print 'No'\n    else:\n        str1=str1+str1\n        str2=str2+str2\n        if str1[len(str1)-1]==str1[0]:\n            if str1==str2:\n                print 'Yes'\n            else:\n                print 'No'\ndef count_vowels(str1):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    count=0\n    vowels=['a','e','i','o','u']\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            count+=1\n    print count\ndef reverse_vowels(str1):\n    '''\n    Write a function to reverse vowels in a string.\n    '''\n    vowels=['a','e','i','o','u']\n    str2=''\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            str2+=str1[i]\n    str2=str2[::-1]\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            str1=str1[:i]+str2[i]+str1[i+1:]\n    print str1\ndef is_anagram2(str1,str2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    if len(str1)!=len(str2):\n        print 'No'\n    else:\n        str1=sorted(str1)\n        str2=sorted(str2)\n        if str1==str2:\n            print 'Yes'\n        else:\n            print 'No'\ndef word_order(str1,str2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    str1=sorted(str1)\n    str2=sorted(str2)\n    if str1==str2:\n        print 'Yes'\n    else:\n        print 'No'\ndef is_anagram3(str1,str2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    if len(str1)!=len(str2):\n        print 'No'\n    else:\n        str1=sorted(str1)\n        str2=sorte"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in xrange(0,len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list_same_pair = []\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            list_same_pair.append(list1[i])\n    return len(list_same_pair)\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same_count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list2[i] == list3[i]:\n                same_count += 1\n    return same_count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return sum(list1[i] == list2[i] and list1[i] == list3[i] for i in range(len(list1)))\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    result = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            result = result + 1\n    return result\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    samepair=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            samepair+=1\n    return samepair\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for x in Input:\n        if type(x)==list:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for ele in Input:\n        if type(ele) == tuple:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for x in Input:\n        if type(x) is list:\n            count = count+1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    return len(Input)\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for t in Input:\n        if type(t) is list:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count=0\n    for each in Input:\n        if type(each)==list:\n            count+=1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    l = Input\n    l.sort()\n    n = 1\n    for i in range(len(l)-1, 0, -1):\n        if l[i] == l[i-1]:\n            n += 1\n        else:\n            break\n    return n\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    n = len(Input) \n    if n == 0: \n        return 0\n    elif Input[0] == ')': \n        return 0\n    elif Input[0] == '(': \n        return 1 + find_lists(Input[1:])\n    else: \n        return 1 + find_lists(Input[1:]) \n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # return 1\n    # if Input is not None:\n    #     if isinstance(Input, list):\n    #         return 1\n    #     elif isinstance(Input, tuple):\n    #         return find_lists(Input[1:])+find_lists(Input[0])\n    #     elif isinstance(Input, str):\n    #         return 0\n    #     else:\n    #         return find_lists(Input[1:])+find_lists(Input[0])\n    # else:\n    #     return 0\n    \n    return 1 if Input == () or isinstance(Input, tuple) else find_lists(Input[0]) + find_lists(Input[1:])\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return abs(arr[-1] - arr[0])\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # max = arr[0]\n    # for i in range(1, len(arr)):\n    #     if arr[i] > max:\n    #         max = arr[i]\n    # for i in range(len(arr)):\n    #     if arr[i] < max:\n    #         max = arr[i]\n    # print(max)\n    return max(arr) - min(arr)\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return abs(arr[1]-arr[0])\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    temp = [abs(arr[i] - arr[i+1]) for i in range(len(arr) - 1)]\n    return max(temp)\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1]-arr[0]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    return max(max(arr[i+1]-arr[i],arr[i]-arr[i-1]) for i in xrange(1,n-1))\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    arr.sort()\n    abs_diff = abs(arr[0]-arr[-1])\n    \n    for i in range(1,len(arr)):\n        abs_diff = max(abs_diff, abs(arr[i]-arr[i-1]))\n        \n    return abs_diff\n    \ndef min_max_diff(arr):\n    '''\n    Write a python function to find the smallest and largest difference between two elements in a given array.\n    '''\n    arr.sort()\n    min_max_diff = arr[-1]-arr[0]\n    \n    for i in range(1, len(arr)):\n        min_max_diff = min(min_max_diff, arr[i]-arr[i-1])\n        \n    return min_max_diff\n    \ndef list_diff(arr):\n    '''\n    Write a python function to find the absolute difference between every element of a given array and every other element of the same array.\n    '''\n    arr.sort()\n    diff = [abs(arr[i]-arr[i-1]) for i in range(1, len(arr))]\n    \n    return diff\n    \ndef max_consecutive(arr):\n    '''\n    Write a python function to find the maximum number of consecutive elements in a given array.\n    '''\n    max_count = 1\n    \n    for i in range(1, len(arr)):\n        if arr[i-1] == arr[i]:\n            max_count += 1\n        else:\n            max_count = 1\n        \n    return max_count\n    \ndef max_consecutive_pair(arr):\n    '''\n    Write a python function to find the maximum number of consecutive elements in a given array that are of the same value.\n    '''\n    max_count = 1\n    \n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            max_count += 1\n        else:\n            max_count = 1\n            \n    return max_count\n    \ndef replace_max_freq_char(str):\n    '''\n    Write a python function to find the maximum number of times a given character occurs in a string.\n    '''\n    max_count = 0\n    char = ''\n    \n    for i in str:\n        if str.count(i) > max_count:\n            max_count = str.count(i)\n            char = i\n            \n    return char\n    \ndef duplicate_chars(str):\n    '''\n    Write a python function to find the number of times a given character occurs in a string.\n    '''\n    char_count = 0\n    char = ''\n    \n    for i in str:\n        if str.count(i) > char_count:\n            char_count = str.count(i)\n            char = i\n            \n    return char\n    \ndef is_number_balanced(str):\n    '''\n    Write a python function to find whether a string is a number or not.\n    '''\n    balanced = True\n    \n    for i in str:\n        if i in '[]{}()':\n            balanced = False\n            \n    return balanced\n    \ndef is_palidrome(str):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    return str == str[::-1]\n    \ndef is_one_away(str1, str2):\n    '''\n    Write a python function to check whether two strings are one edit away or not.\n    '''\n    if len(str1) == len(str2):\n        return is_one_edit_away_insert(str1, str2)\n        \n    if len(str1) + 1 == len(str2):\n        return is_one_edit_away_delete(str1, str2)\n        \n    if len(str1) - 1 == len(str2):\n        return is_one_edit_away_replace(str1, str2)\n        \n    return False\n    \ndef is_one_edit_away_insert(str1, str2):\n    '''\n    Write a python function to check whether two strings are one edit away in the sense of insertion.\n    '''\n    edited = False\n    \n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            if not edited:\n                edited = True\n            else:\n                return False\n                \n    return True\n    \ndef is_one_edit_away_delete(str1, str2):\n    '''\n    Write a python function to check whether two strings are one edit away in the sense of deletion.\n    '''\n    edited = False\n    \n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            if not edited:\n                edited = True\n            else:\n                return False\n                \n    return True\n    \ndef is_one_edit_away_replace(str1, str2):\n    '''\n    Write a python function to check whether two strings are one edit away in the sense of replacement.\n    '''\n    edited = False\n    \n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            if not edited:\n                edited = True\n            else:\n                return False\n                \n    return True\n    \ndef is_palindrome_permutation(str):\n    '''\n    Write a python function to check whether a string is a permutation of a palindrome or not.\n    '''\n    str = str.lower()\n    \n    char_count = [0]*26\n    \n    for i in str:\n        if i >= 'a' and i <= 'z':\n            char_count[ord(i)-ord('a')] += 1\n            \n    return char_count[0] % 2 == 0 and char_count[25] % 2 == 0\n    \ndef is_permutation_of_palindrome(str):\n    '''\n    Write a python function to check whether a string is a permutation of a palindrome or not.\n    '''\n    str = str.lower()\n    \n    char_count = [0]*26\n    \n    for i in str:\n        if i >= 'a' and i <= 'z':\n            char_count[ord(i)-ord('a')] += 1\n            \n    return char_count[0] % 2 == 0 and char_count[25] % 2 == 0\n    \ndef is_permutation(str1, str2):\n    '''\n    Write a python function to check whether two strings are permutations of each other or not.\n    '''\n    if len(str1)!= len(str2):\n        return False\n        \n    str1 = str1.lower()\n    str2 = str2.lower()\n    \n    char_count = [0]*26\n    \n    for i in str1:\n        if i >= 'a' and i <= 'z':\n            char_count[ord(i)-ord('a')] += 1\n            \n    for i in str2:\n        if i >= 'a' and i <= 'z':\n            char_count[ord(i)-ord('a')] -= 1\n            \n    return max(char_count) == 0\n    \ndef is_anagram(str1, str2):\n    '''\n    Write a python function to check whether two strings are anagram of each other or not.\n    '''\n    if len(str1)!= len(str2):\n        return False\n        \n    str1 = str1.lower()\n    str2 = str2.lower()\n    \n    char_count = [0]*26\n    \n    for i in str1:\n        if i >= 'a' and i <= 'z':\n            char_count[ord(i)-ord('a')] += 1\n            \n    for i in str2:\n        if i >= 'a' and i <= 'z':\n            char_count[ord(i)-ord('a')] -= 1\n            \n    return max(char_count) == 0\n    \ndef is_anagram_of_permutation(str1, str2):\n    '''\n    Write a python function to check whether two strings are an anagram of each other or not.\n    '''\n    if len(str1)!= len(str2):\n        return False\n        \n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return 0\n    arr.sort()\n    return arr[-1] - arr[0]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    result = arr[-1]-arr[0]\n    for i in range(1, len(arr)-1):\n        if result < arr[i]-arr[i+1]:\n            result = arr[i]-arr[i+1]\n    return result\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1]-arr[0]\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return (0, 0)\n    for i in range(-a // b, n // a):\n        if a * i + b * n == 0:\n            return (i, n - a * i)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n/a):\n        for y in range(n/b):\n            if a*x + b*y == n:\n                return x, y\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    return (a * b - n) // (a + b)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # If a*b = n, then x = n/a and y = n/b\n    if a * b == n:\n        return n // a, n // b\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    d = n - a\n    if (b * d - a * b) == 0:\n        return (None, None)\n    else:\n        return (d // b, a)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    for i in range(n + 1):\n        x = n - a * i\n        if x % b == 0:\n            return (x // b, i)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    for i in range(1, n):\n        if a*i > n:\n            return None\n        if n % i == 0:\n            if b * (n/i) == n:\n                return i, n/i\n            x = i\n    return x, n/x\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        y = n - a * x\n        if y % b == 0:\n            return (x, y // b)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    '''\n    # Good solution but takes too long\n    for x in range(1, b):\n        if (n - a*x) % b == 0:\n            return x, (n - a*x)//b\n    return None\n    '''\n    \n    # Good solution but takes too long\n    for y in range(1, b):\n        if (n - a*y) % b == 0:\n            return y, (n - a*y)//b\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return (0, 1)\n    if n % 2 == 0:\n        return None\n    d = n - a - b\n    if d % 2 == 0:\n        return (d // 2, a)\n    return None\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        list1.remove(i)\n    return list1\n    \n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [i for i in list1 if i not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [i for i in list1 if i not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [i for i in list1 if i not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if not list1 or not list2:\n        return []\n    l2 = []\n    for l1 in list1:\n        if l1 not in list2:\n            l2.append(l1)\n    return l2\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [element for element in list1 if element not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list2:\n        list1.remove(elem)\n    return list1\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    return (n * (n + 1) / 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return None\n    return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n==0: return 0\n    res=0\n    for i in range(n//2):\n        res+=n-2*i\n    return res\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1:\n        return n\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return n / 2\n    else:\n        return n / 2 + 1\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    \n    return (n+sum_series(n-2))\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + sum_series(n - 2) if n > 1 else 1\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sum_series(n-2) + sum_series(n-4)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.5*s*l)/tan(pi/l)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = 0.0\n    for i in range(l):\n        a += s * (1.0/l) * tan(2 * pi/l)\n    return a\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*l/2)*(3.141592653589793238462643383279502884197169399375105820974944592307816406286 - (s*l/2)*(3.141592653589793238462643383279502884197169399375105820974944592307816406286))\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s < 3:\n        return None\n    if not isinstance(s, int):\n        return None\n    if not isinstance(l, int):\n        return None\n    return (s * l) / 2 * tan(pi / s)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*(s+l)*(l/s))/4.0\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25 * s * l**2)/tan(pi/s)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # s, l = [int(x) for x in input().split()]\n    # polygon = [int(x) for x in input().split()]\n    # area = 0\n    # x = polygon[0]\n    # if s == 3:\n    #     area = polygon[0] * polygon[1] / 2\n    # else:\n    #     area = polygon[0] * (polygon[1] * (polygon[1] + 2) * tan(pi / (polygon[1] * 2))) / 4\n    # print(area)\n    # s, l = [int(x) for x in input().split()]\n    # polygon = [int(x) for x in input().split()]\n    # area = 0\n    # if s == 3:\n    #     area = polygon[0] * polygon[1] / 2\n    # else:\n    #     area = polygon[0] * (polygon[1] * (polygon[1] + 2) * tan(pi / (polygon[1] * 2))) / 4\n    # print(area)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (l**2*(1+tan(pi/s)))/4\n    print(area)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*(s-2*l)*tan(pi/l))/4\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25 * s * (l**2))\n    \ndef area_parallelogram(l, h):\n    '''\n    Write a function to calculate the area of a parallelogram given the length of its sides.\n    '''\n    return l * h\n    \ndef area_trapezium(h, b, b2, h2):\n    '''\n    Write a function to calculate the area of a regular polygon given the length of its sides.\n    '''\n    return 0.5 * h * (b + b2 + h2)\n    \ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given the radius.\n    '''\n    return pi * r**2\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    return sum_divisors(n) == sum_divisors(sum_divisors(n))\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    number = n\n    divisors = []\n    for i in range(1, int(math.sqrt(number))+1): \n        if number % i == 0:\n            divisors.append(i)\n            divisors.append(number/i)\n    if sum(divisors) == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors_sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i == n // i:\n                divisors_sum += i\n            else:\n                divisors_sum += i + n // i\n    return divisors_sum\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if (n == 0):\n        return False\n    for i in range(1, int(math.sqrt(n))+1):\n        if (n % i == 0):\n            j = n/i\n            if (j == i):\n                return True\n            elif (j!= i):\n                return False\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 2:\n        return False\n    \n    s = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            s += i\n            if i*i!= n:\n                s += n//i\n    return s == n\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def divisors(n):\n        total = 0\n        for i in range(1, n+1):\n            if n % i == 0:\n                total += i\n        return total\n    return divisors(n) == divisors(n+2)\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    list_of_divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            list_of_divisors.append(i)\n            list_of_divisors.append(n / i)\n    if sum(list_of_divisors) == n: \n        return True\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    #ans = math.sqrt(n)\n    #if ans == int(ans):\n    #    return 0\n    #divisors = [i for i in range(1, int(ans)) if n%i == 0]\n    #sum_of_divisors = sum(divisors)\n    #return sum_of_divisors\n    return sum([int(math.sqrt(n)) - i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]) == sum([int(math.sqrt(n)) - i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return False\n    s = 0\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            s += i\n    return s == n\ndef fizz_buzz(n):\n    '''\n    Fizz Buzz - Write a program that prints the numbers from 1 to 100 inclusively, but for multiples of three print \u201cFizz\u201d instead of the number and for the multiples of five print \u201cBuzz\u201d. For numbers which are multiples of both three and five print \u201cFizzBuzz\u201d.\n    '''\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            print('FizzBuzz')\n        elif i % 3 == 0:\n            print('Fizz')\n        elif i % 5 == 0:\n            print('Buzz')\n        else:\n            print(i)\ndef large_word(word):\n    '''\n    Write a function that takes in a string of words and returns the longest word in the string.\n    '''\n    return max(word.split(), key=len)\ndef sum_largest(n):\n    '''\n    Write a function that returns the sum of the largest sum of consecutive numbers in a list\n    '''\n    largest_sum = 0\n    sum = 0\n    for i in n:\n        if sum < 0:\n            sum = i\n        else:\n            sum += i\n        if sum > largest_sum:\n            largest_sum = sum\n    return largest_sum\ndef sum_squared(n):\n    '''\n    Write a function that returns the sum of the squares of all the numbers in the list\n    '''\n    s = 0\n    for i in n:\n        s += i ** 2\n    return s\ndef factorial(n):\n    '''\n    Write a function that takes in a number n and returns the factorial of that number, n!.\n    '''\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\ndef reverse_words(n):\n    '''\n    Write a function that takes in a list of numbers and returns the list of numbers in reverse order\n    '''\n    reversed_list = []\n    n.reverse()\n    for i in n:\n        reversed_list.append(i)\n    return reversed_list\ndef palindrome(n):\n    '''\n    Write a function that takes in a string and returns true if the string is a palindrome, False otherwise\n    '''\n    return n == n[::-1]\ndef linear_congruence(a, b, c, m):\n    '''\n    Write a function that accepts in four numbers a, b, c and m where a is the\n    coefficient of x^2, b is the coefficient of x and c is the constant term. The function should return the list of x values\n    '''\n    ans = []\n    for i in range(m):\n        ans.append( ( (-b + math.sqrt(b**2 - 4*a*c))/2*a) )\n    return ans\ndef sum_of_squares(n):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the squares of those numbers\n    '''\n    s = 0\n    for i in n:\n        s += i ** 2\n    return s\ndef sum_of_squares_fast(n):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the squares of those numbers\n    '''\n    return sum(i**2 for i in n)\ndef sum_of_squares_generator(n):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the squares of those numbers\n    '''\n    return sum(i**2 for i in n)\ndef sum_of_squares_new(n):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the squares of those numbers\n    '''\n    return sum(i**2 for i in n)\ndef factorial_new(n):\n    '''\n    Write a function that takes in a number n and returns the factorial of that number, n!.\n    '''\n    if n == 0:\n        return 1\n    return n * factorial_new(n-1)\ndef gcd(a, b):\n    '''\n    Write a function that takes in two numbers a and b and returns their greatest common divisor.\n    '''\n    if a == 0:\n        return b\n    return gcd(b % a, a)\ndef gcd_new(a, b):\n    '''\n    Write a function that takes in two numbers a and b and returns their greatest common divisor.\n    '''\n    if b == 0:\n        return a\n    return gcd_new(b, a % b)\ndef power(a, n):\n    '''\n    Write a function that takes in two numbers a and n and returns a to the nth power.\n    '''\n    if n == 0:\n        return 1\n    if n < 0:\n        return 1 / power(a, -n)\n    else:\n        return power(a, n - 1) * a\ndef power_new(a, n):\n    '''\n    Write a function that takes in two numbers a and n and returns a to the nth power.\n    '''\n    if n == 0:\n        return 1\n    if n < 0:\n        return 1 / power(a, -n)\n    else:\n        return power_new(a, n - 1) * a\ndef power_mod(a, n, m):\n    '''\n    Write a function that takes in two numbers a, n and m and returns the a^n mod m.\n    '''\n    return pow(a, n, m)\ndef power_mod_new(a, n, m):\n    '''\n    Write a function that takes in two numbers a, n and m and returns the a^n mod m.\n    '''\n    return pow(a, n, m)\ndef euler_phi(n):\n    '''\n    Write a function that takes in a number n and returns the Euler's Phi function of that number.\n    '''\n    if n < 0:\n        return 0\n    if n == 0 or n == 1:\n        return 1\n    return n * euler_phi(n - 1)\ndef euler_phi_new(n):\n    '''\n    Write a function that takes in a number n and returns the Euler's Phi function of that number.\n    '''\n    if n < 0:\n        return 0\n    if n == 0 or n == 1:\n        return 1\n    return n * euler_phi_new(n - 1)\ndef fibonacci(n):\n    '''\n    Write a function that takes in a number n and returns the nth number of the Fibonacci sequence.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)\ndef fibonacci_new(n):\n    '''\n    Write a function that takes in a number n and returns the nth number of the Fibonacci sequence.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibonacci_new(n - 1) + fibonacci_new(n - 2)\ndef fibonacci_mod(n, m):\n    '''\n    Write a function that takes in a number n and returns the nth number of the Fibonacci sequence mod m.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return (fibonacci_mod(n - 1, m) + fibonacci_mod(n - 2, m)) % m\ndef fibonacci_mod_new(n, m):\n    '''\n    Write a function that takes in a number n and returns the nth number of the Fibonacci sequence mod m.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return (fibonacci_mod_new(n - 1, m) + fibonacci_mod_new(n - 2, m)) % m\ndef sum_of_digits(n):\n    '''\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor = 1\n    for i in range(2, n):\n        if (n % i == 0):\n            divisor = divisor + i\n    return divisor\ndef sum_of_digits(n): \n    '''\n    Write a function to find the sum of the digits of a number.\n    '''\n    s = 0\n    while(n):\n        s = s + n % 10\n        n = n // 10\n    return s\ndef sum_of_factors(n): \n    '''\n    Write a function to find the sum of the factors of a number.\n    '''\n    s = 1\n    for i in range(2, n):\n        if (n % i == 0):\n            s = s + i\n    return s\ndef count_digit(n): \n    '''\n    Write a function to find the number of digits in a number.\n    '''\n    c = 0\n    while (n):\n        c = c + 1\n        n = n // 10\n    return c\ndef count_digits(n): \n    '''\n    Write a function to find the number of digits in a number.\n    '''\n    c = 0\n    while (n > 0):\n        c = c + 1\n        n = n // 10\n    return c\ndef is_palindrome(n):\n    '''\n    Write a function to determine if a number is a palindrome.\n    '''\n    return (str(n) == str(n)[::-1])\ndef is_palindrome_2(n):\n    '''\n    Write a function to determine if a number is a palindrome.\n    '''\n    return (n == int(str(n)[::-1]))\ndef is_palindrome_3(n):\n    '''\n    Write a function to determine if a number is a palindrome.\n    '''\n    if n < 0:\n        n = n * (-1)\n    if n < 10:\n        return True\n    m = n % 10\n    if m > n // 10:\n        return False\n    return is_palindrome_3(n // 10)\ndef is_palindrome_4(n):\n    '''\n    Write a function to determine if a number is a palindrome.\n    '''\n    if n < 0:\n        n = n * (-1)\n    return (n == int(str(n)[::-1]))\ndef is_perfect_square(n):\n    '''\n    Write a function to determine if a number is a perfect square.\n    '''\n    return (math.sqrt(n) == int(math.sqrt(n)))\ndef is_perfect_square_2(n):\n    '''\n    Write a function to determine if a number is a perfect square.\n    '''\n    return (n == math.sqrt(n))\ndef is_perfect_square_3(n):\n    '''\n    Write a function to determine if a number is a perfect square.\n    '''\n    x = n\n    y = 1\n    while (y * y < x):\n        y = y + 1\n    return (x == y * y)\ndef is_perfect_square_4(n):\n    '''\n    Write a function to determine if a number is a perfect square.\n    '''\n    x = n\n    y = 1\n    while (y * y < x):\n        y = y + 1\n    return (x == y * y)\ndef count_digits_2(n):\n    '''\n    Write a function to find the number of digits in a number.\n    '''\n    return len(str(n))\ndef count_digits_3(n):\n    '''\n    Write a function to find the number of digits in a number.\n    '''\n    return len(str(abs(n)))\ndef count_digits_4(n):\n    '''\n    Write a function to find the number of digits in a number.\n    '''\n    return (len(str(abs(n))))\ndef count_digits_5(n):\n    '''\n    Write a function to find the number of digits in a number.\n    '''\n    return (len(str(abs(n))))\ndef is_prime(n): \n    '''\n    Write a function to determine if a number is prime.\n    '''\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_2(n): \n    '''\n    Write a function to determine if a number is prime.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_3(n): \n    '''\n    Write a function to determine if a number is prime.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_4(n): \n    '''\n    Write a function to determine if a number is prime.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_5(n): \n    '''\n    Write a function to determine if a number is prime.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_6(n): \n    '''\n    Write a function to determine if a number is prime.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_7(n): \n    '''\n    Write a function to determine if a number is prime.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_8(n): \n    '''\n    Write a function to determine if a number is prime.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_9(n): \n    '''\n    Write a function to determine if a number is prime.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_10(n): \n    '''\n    Write a function to determine if a number is prime.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    if len(str1) == 1:\n        return 1\n    else:\n        return count_char_position(str1[1:]) + 1 if str1[0].lower() == str1[0] else count_char_position(str1[1:])\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    dict1 = {}\n    for i in range(26):\n        dict1[chr(97 + i)] = 0\n    for i in range(len(str1)):\n        dict1[str1[i]] += 1\n    for i in range(26):\n        if dict1[chr(97 + i)]!= 1:\n            dict1[chr(97 + i)] = 0\n    return dict1\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    abc_letters = 'abcdefghijklmnopqrstuvwxyz'\n    dict1 = {}\n    count = 0\n    for char in str1:\n        if char in abc_letters:\n            dict1[char] = count\n            count += 1\n    return dict1\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    from string import ascii_lowercase as alpha_str\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)): \n        if str1[i].lower() in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    d = {}\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            if str1[i].isupper():\n                str1 = str1.lower()\n            if str1[i] not in d:\n                d[str1[i]] = []\n            d[str1[i]].append(i)\n    return d\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    count_dict = {}\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    s = str1.lower()\n    count = 0\n    for c in s:\n        if c in string.ascii_lowercase:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == chr(ord('a') + i%26):\n            count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) < 2:\n        return 0\n    res = 0\n    for i in range(0,len(A)-1):\n        for j in range(i+1,len(A)):\n            if A[i] ^ A[j] & 0x1 == 0:\n                res += 1\n    return res\n    \n    \ndef find_even_pair_2(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) < 2:\n        return 0\n    res = 0\n    for i in range(0,len(A)-1):\n        j = 0\n        while j < len(A):\n            if A[i] ^ A[j] & 0x1 == 0:\n                res += 1\n            j += 1\n    return res\n    \n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    xor_pairs = 0\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if not A:\n        return 0\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pairs = 0\n    for i in range(len(A)-1):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    return sum(A[i] & A[i-1] for i in range(1, len(A), 2))"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    N = len(A)\n    pairs = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if A[i]^A[j]&1==0:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)-1):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    bit_count = lambda x: x.count('1')\n    bit_flip = lambda x: '1' if x == '0' else '0'\n    list_xor = lambda x,y: int(bit_flip(x)^bit_flip(y),2)\n    count = 0\n    for i in xrange(len(A)-1):\n        for j in xrange(i+1,len(A)):\n            xor = list_xor(A[i],A[j])\n            if bit_count(xor)%2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    answer = 0 \n    even = 0 \n    for item in A: \n        if (item ^ even) & 1 == 1: \n            answer += 1\n        even ^= item \n    return answer \n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # first idea is to count the number of sets, using that to count the number of pairs.\n    # if the number of pairs is even, it is an xor of an even number.\n    # count the number of sets.\n    # count the number of pairs.\n    # return the number of pairs.\n    # actually, we can do better.\n    # remember, the first num is 1, the second is 2, and so on.\n    # if a num is an odd, then the next odd is the odd + 1.\n    # if a num is even, the next even is the even + 1\n    # if a num is divisible by 2, then the next divisible by 2 is 2 + 1\n    # so, for each num, increment the count of divisible by 2.\n    # the first num is 1, so the divisible by 2 count is 1.\n    # the second num is 2, so the divisible by 2 count is 1.\n    # the third num is 4, so the divisible by 2 count is 1.\n    # the fourth num is 8, so the divisible by 2 count is 1.\n    # the fiveth num is 16, so the divisible by 2 count is 1.\n    # the sixth num is 32, so the divisible by 2 count is 1.\n    # the seventh num is 64, so the divisible by 2 count is 1.\n    # the eightth num is 128, so the divisible by 2 count is 1.\n    # the ninth num is 256, so the divisible by 2 count is 1.\n    # the tenth num is 512, so the divisible by 2 count is 1.\n    # the eleventh num is 1024, so the divisible by 2 count is 1.\n    # the twelfth num is 2048, so the divisible by 2 count is 1.\n    # the thirteenth num is 4096, so the divisible by 2 count is 1.\n    # the fourteenth num is 8192, so the divisible by 2 count is 1.\n    # the fifteenth num is 16384, so the divisible by 2 count is 1.\n    # the sixteenth num is 32768, so the divisible by 2 count is 1.\n    # the seventeenth num is 65536, so the divisible by 2 count is 1.\n    # the eighteenth num is 131072, so the divisible by 2 count is 1.\n    # the nineteenth num is 262144, so the divisible by 2 count is 1.\n    # the twentieth num is 524288, so the divisible by 2 count is 1.\n    # the twenty-first num is 1048576, so the divisible by 2 count is 1.\n    # the twenty-second num is 2097152, so the divisible by 2 count is 1.\n    # the twenty-third num is 4194304, so the divisible by 2 count is 1.\n    # the twenty-fourth num is 8388608, so the divisible by 2 count is 1.\n    # the twenty-fifth num is 16777216, so the divisible by 2 count is 1.\n    # the twenty-sixth num is 33554432, so the divisible by 2 count is 1.\n    # the twenty-seventh num is 67108864, so the divisible by 2 count is 1.\n    # the twenty-eighth num is 134217728, so the divisible by 2 count is 1.\n    # the twenty-ninth num is 268435456, so the divisible by 2 count is 1.\n    # the thirty-first num is 536870912, so the divisible by 2 count is 1.\n    # the thirty-second num is 1073741824, so the divisible by 2 count is 1.\n    # the thirty-third num is 2147483648, so the divisible by 2 count is 1.\n    # the thirty-fourth num is 4294967296, so the divisible by 2 count is 1.\n    # the thirty-fifth num is 8589934592, so the divisible by 2 count is 1.\n    # the thirty-sixth num is 17179869184, so the divisible by 2 count is 1.\n    # the thirty-seventh num is 34359738368, so the divisible by 2 count is 1.\n    # the thirty-eighth num is 68719476736, so the divisible by 2 count is 1.\n    # the thirty-ninth num is 137438953472, so the divisible by 2 count is 1.\n    # the forty-first num is 274877906944, so the divisible by 2 count is 1.\n    # the forty-second num is 549755813888, so the divisible by 2 count is 1.\n    # the forty-third num is 9223372036854775808, so the divisible by 2 count is 1.\n    # the forty-fourth num is 18446744073709551616, so the divisible by 2 count is 1.\n    # the forty-fifth num is 36543527038391168, so the divisible by 2 count is 1.\n    # the forty-sixth num is 72057594037927934, so the divisible by 2 count is 1.\n    # the forty-seventh num is 134217727, so the divisible by 2 count is 1.\n    # the forty-eighth num is 268435455, so the divisible by 2 count is 1.\n    # the forty-ninth num is 5368709123, so the divisible by 2 count is 1.\n    # the fifty-first num is 8796093022208, so the divisible by 2 count is 1.\n    # the fifty-second num is 17592186044416, so the divisible by 2 count is 1.\n    # the fifty-third num is 35184372088832, so the divisible by 2 count is 1.\n    # the fifty-fourth num is 7036874418608, so the divisible by 2 count is 1.\n    # the fifty-fifth num is 140737488355328, so the divisible by 2 count is 1.\n    # the fifty-sixth num is 281474976710656, so the divisible by 2 count is 1.\n    # the fifty-seventh num is 562949953421312, so the divisible by 2 count is 1.\n    # the fifty-eighth num is 1125899906842624, so the divisible by 2 count is 1.\n    # the fifty-ninth num is 2251799813685248, so the divisible by 2 count is 1.\n    # the sixtieth num is 4503599627370496, so the divisible by 2 count is 1.\n    # the sixtieth num is 9007199254740992, so the divisible by 2 count is 1.\n    # the sixtieth num is 18014398509481984, so the divisible by 2 count is 1.\n    # the seventieth num is 274877906944, so the divisible by 2 count is 1.\n    # the seventieth num is 545376578990112, so the divisible by 2 count is 1.\n    # the seventieth num is 9223372036854775807, so the divisible by 2 count is 1.\n    # the eighty-first num is 18446744073709551616, so the divisible by 2 count is 1.\n    # the eighty-second num is 3735928559495, so the divisible by 2 count is 1.\n    # the eighty-third num is 683596557520, so the divisible by 2 count is 1.\n    # the eighty-fourth num is 1125899906842624, so the divisible by 2 count is 1.\n    # the eighty-fifth num is 2251799813685248, so the divisible by 2 count is 1.\n    # the eighty-sixth num is 4503599627370496, so the divisible by 2 count is 1.\n    # the eighty-seventh num is 9007199254740992, so the divisible by 2 count is 1.\n    # the eighty-eighth num is 18014398509481984, so the divisible by 2 count is 1.\n    # the eighty-ninth num is 274877906944, so the divisible by 2 count is 1.\n    # the ninety-first num is 5368709123, so the divisible by 2 count is 1.\n    # the ninety-second num is 9223372036854775808, so the divisible by 2 count is 1.\n    # the ninety-third num is 17592186044416, so the divisible by 2 count is 1.\n    # the ninety-fourth num is 35184372088832, so the di"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        i = i << 1\n    return i\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # loop from i=1 to n\n    for i in xrange(n):\n        # print i, 2**i\n        if 2**i >= n:\n            return 2**i - 1\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0: \n        return 1\n    return 1<<(n - 1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**int(math.log(n, 2))\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 4\n    if n == 3:\n        return 8\n    i = 0\n    while True:\n        i = i + 1\n        if 2 ** i <= n:\n            return 2 ** i\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    p = 1\n    while p < n:\n        p *= 2\n    return p\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    x = 1\n    while x < n: x = x * 2\n    return x\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 ** (int(log2(n))+1)\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 << (n-1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 << (n-1).bit_length()\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return len([i for i in a if i==x])\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(0,len(a)):\n        if a[i]==x:\n            count=count+1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for element in a:\n        if element==x:\n            count=count+1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for item in a:\n        if item == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    freq = 0\n    for i in a:\n        if i == x:\n            freq+=1\n    return freq\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i]==x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if x in a:\n        a.count(x)\n    else:\n        return 0\n    return a.count(x)\n    \ndef intersection(a,b):\n    '''\n    Write a function to return the intersection of two lists.\n    '''\n    c = []\n    for i in a:\n        if i in b:\n            c.append(i)\n    return c\n    \ndef set_comprehension(x):\n    '''\n    Write a function to return the set of all the elements in x.\n    '''\n    return set(x)\n    \ndef membership(x,a):\n    '''\n    Write a function to check if a is a member of the set of elements in x.\n    '''\n    if x.__contains__(a):\n        return True\n    else:\n        return False\n    \ndef power(a,b):\n    '''\n    Write a function to compute the nth power of a number.\n    '''\n    return a**b\n    \ndef product(a):\n    '''\n    Write a function to compute the product of all the numbers in a list.\n    '''\n    if len(a)==0:\n        return 1\n    else:\n        return a[0]*product(a[1:])\n    \ndef concat(a,b):\n    '''\n    Write a function to concatenate a string to the end of another string.\n    '''\n    return a+b\n    \ndef reverse(a):\n    '''\n    Write a function to reverse a string.\n    '''\n    return a[::-1]\n    \ndef palindrome(a):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if a == reverse(a):\n        return True\n    else:\n        return False\n    \ndef word_pattern(a,b):\n    '''\n    Write a function to check if two strings are a permutation of each other.\n    '''\n    a = a.replace(' ','').lower()\n    b = b.replace(' ','').lower()\n    if len(a)!=len(b):\n        return False\n    else:\n        a = list(a)\n        b = list(b)\n        a.sort()\n        b.sort()\n        if a==b:\n            return True\n        else:\n            return False\n    \ndef absolute(a):\n    '''\n    Write a function to compute the absolute value of a number.\n    '''\n    if a<0:\n        return -a\n    else:\n        return a\n    \ndef pow(a,b):\n    '''\n    Write a function to compute the nth power of a number.\n    '''\n    return a**b\n    \ndef is_prime(a):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    if a<2:\n        return False\n    for i in range(2,a):\n        if a%i==0:\n            return False\n    return True\n    \ndef reverse_iter(a):\n    '''\n    Write a function to reverse a list by iterating over it.\n    '''\n    b = []\n    while a:\n        b.append(a.pop())\n    return b\n    \ndef reverse_rec(a):\n    '''\n    Write a function to reverse a list by recursion.\n    '''\n    if len(a)==1:\n        return a\n    else:\n        return reverse_rec(a[1:])+a[0:1]\n    \ndef copy(a):\n    '''\n    Write a function to copy a list.\n    '''\n    return a[:]\n    \ndef rotate(a,k):\n    '''\n    Write a function to rotate a list by k elements.\n    '''\n    b = []\n    for i in range(k):\n        b.append(a.pop(0))\n    a.extend(b)\n    return a\n    \ndef sort_2(a,b):\n    '''\n    Write a function to sort two lists in the ascending order.\n    '''\n    a.sort()\n    b.sort()\n    return (a,b)\n    \ndef merge(a,b):\n    '''\n    Write a function to merge two sorted lists in ascending order.\n    '''\n    c = []\n    while len(a)!=0 and len(b)!=0:\n        if a[0]<b[0]:\n            c.append(a.pop(0))\n        else:\n            c.append(b.pop(0))\n    if len(a)==0:\n        c+=b\n    else:\n        c+=a\n    return c\n    \ndef bin_search(a,x):\n    '''\n    Write a function to search a sorted list for a number.\n    '''\n    b = []\n    for i in range(len(a)):\n        if a[i]==x:\n            b.append(i)\n    return b\n    \ndef count_substring(a,b):\n    '''\n    Write a function to count the number of occurrences of b in a substring.\n    '''\n    c = 0\n    for i in range(len(a)):\n        if a[i:i+len(b)]==b:\n            c+=1\n    return c\n    \ndef is_pangram(a):\n    '''\n    Write a function to check if a string is a pangram.\n    '''\n    if len(set(a))==26:\n        return True\n    else:\n        return False\n    \ndef same_frequency(a,b):\n    '''\n    Write a function to determine if two strings have the same frequency of characters.\n    '''\n    if len(a)!=len(b):\n        return False\n    else:\n        c = []\n        for i in a:\n            c.append(a.count(i))\n        for j in b:\n            if c.count(j)!=0:\n                c.remove(j)\n        if len(c)==0:\n            return True\n        else:\n            return False\n    \ndef is_palindrome(a):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if a == reverse(a):\n        return True\n    else:\n        return False\n    \ndef is_permutation(a,b):\n    '''\n    Write a function to check if two strings are permutations of each other.\n    '''\n    if len(a)!=len(b):\n        return False\n    else:\n        a = a.replace(' ','').lower()\n        b = b.replace(' ','').lower()\n        a = list(a)\n        b = list(b)\n        a.sort()\n        b.sort()\n        if a==b:\n            return True\n        else:\n            return False\n    \ndef has_duplicates(a):\n    '''\n    Write a function that returns True if the list contains\n    duplicates, False otherwise.\n    '''\n    c = []\n    for i in a:\n        if i not in c:\n            c.append(i)\n        else:\n            return True\n    return False\n    \ndef has_adjacent(a):\n    '''\n    Write a function that returns True if the list contains\n    adjacent duplicates, False otherwise.\n    '''\n    if len(a)==0:\n        return False\n    else:\n        for i in range(len(a)-1):\n            if a[i]==a[i+1]:\n                return True\n        return False\n    \ndef has_duplicates_set(a):\n    '''\n    Write a function that returns True if the list contains\n    duplicates, False otherwise.\n    '''\n    if len(a)==0:\n        return False\n    else:\n        s = set()\n        for i in a:\n            if i in s:\n                return True\n            else:\n                s.add(i)\n        return False\n    \ndef contains_cycle(a):\n    '''\n    Write a function that returns True if there is a cycle in a \n    directed graph, False otherwise.\n    '''\n    if len(a)==0:\n        return False\n    else:\n        s = set()\n        for i in a:"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 1:                                                                                                                                                                                                \n        m = 0                                                                                                                                                                                                \n    if n > len(list1):                                                                                                                                                                                        \n        n = len(list1)                                                                                                                                                                                    \n    return sum(list1[m:n])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    result = 0\n    for i in range(m, n):\n        result += list1[i]\n    return result\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    #return sum(list1[m:nn"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n + 1):\n        total += list1[i]\n    return total\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        return sum(list1[n:])\n    elif m < n:\n        return sum(list1[m:n])\n    else:\n        return sum(list1)\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum1 = 0                                                                                                                                                                                                    \n    for i in range(m, n):                                                                                                                                                                                                    \n        sum1 += list1[i]                                                                                                                                                                                        \n    return sumn    \ndef sum_range_list2(list1, m, n):                                                                                                                                                                                                    \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:nn"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5 + 2 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 3*a + a**2 * math.sqrt(2)\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return ((a**2 * math.sqrt(2))/4)\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return 6*a\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return 3 * (a**2)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 4 * a\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    return 3 * (a**2)\ndef perimeter_star(n):\n    '''\n    Write a function to find the perimeter of a star from the length of its sides.\n    '''\n    return n*(2*n-1)\ndef area_star(n):\n    '''\n    Write a function to find the area of a star from the length of its sides.\n    '''\n    return ((n**2)/2)*math.pi\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a square from the length of its sides.\n    '''\n    return a*4\ndef area_square(a):\n    '''\n    Write a function to find the area of a square from the length of its sides.\n    '''\n    return a**2\ndef perimeter_rectangle(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle from the length of its sides.\n    '''\n    return 2*(a+b)\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle from the length of its sides.\n    '''\n    return a*b\ndef perimeter_circle(r):\n    '''\n    Write a function to find the perimeter of a circle from the radius.\n    '''\n    return 2 * math.pi * r\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle from the radius.\n    '''\n    return math.pi * (r**2)\ndef perimeter_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle from the length of its sides.\n    '''\n    return a+b+c\ndef area_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle from the length of its sides.\n    '''\n    p = perimeter_triangle(a,b,c)\n    return (p/2) * (a/2) * (b/2) * (c/2)\ndef perimeter_kite(a,b):\n    '''\n    Write a function to find the perimeter of a kite from the length of its sides.\n    '''\n    return a+b\ndef area_kite(a,b):\n    '''\n    Write a function to find the area of a kite from the length of its sides.\n    '''\n    return (a*b)/2\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a hexagon from the length of its sides.\n    '''\n    return 6*a\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a hexagon from the length of its sides.\n    '''\n    return 3 * (a**2)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a octagon from the length of its sides.\n    '''\n    return 8 * a\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a octagon from the length of its sides.\n    '''\n    return 4 * (a**2)\ndef perimeter_rhombus(a,b):\n    '''\n    Write a function to find the perimeter of a rhombus from the length of its sides.\n    '''\n    return 2*(a+b)\ndef area_rhombus(a,b):\n    '''\n    Write a function to find the area of a rhombus from the length of its sides.\n    '''\n    return a*b\ndef perimeter_trapeze(a,b,c):\n    '''\n    Write a function to find the perimeter of a trapeze from the length of its sides.\n    '''\n    return a+b+c\ndef area_trapeze(a,b,c):\n    '''\n    Write a function to find the area of a trapeze from the length of its sides.\n    '''\n    return (a*b)/2 + (b*c)/2 + (c*a)/2\ndef perimeter_convex(a,b,c):\n    '''\n    Write a function to find the perimeter of a convex from the length of its sides.\n    '''\n    return a+b+c\ndef area_convex(a,b,c):\n    '''\n    Write a function to find the area of a convex from the length of its sides.\n    '''\n    return a*b*c\ndef perimeter_semipyramid(a,b,c):\n    '''\n    Write a function to find the perimeter of a semipyramid from the length of its sides.\n    '''\n    return a+b+c\ndef area_semipyramid(a,b,c):\n    '''\n    Write a function to find the area of a semipyramid from the length of its sides.\n    '''\n    return (a*b)/2\ndef perimeter_right_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a right triangle from the length of its sides.\n    '''\n    return a+b+c\ndef area_right_triangle(a,b,c):\n    '''\n    Write a function to find the area of a right triangle from the length of its sides.\n    '''\n    return (a*b)/2\ndef perimeter_round_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a round triangle from the length of its sides.\n    '''\n    return a+b+c\ndef area_round_triangle(a,b,c):\n    '''\n    Write a function to find the area of a round triangle from the length of its sides.\n    '''\n    p = perimeter_round_triangle(a,b,c)\n    return (p/2) * (a/2) * (b/2) * (c/2)\ndef perimeter_obround_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of an obround triangle from the length of its sides.\n    '''\n    return a+b+c\ndef area_obround_triangle(a,b,c):\n    '''\n    Write a function to find the area of an obround triangle from the length of its sides.\n    '''\n    p = perimeter_obround_triangle(a,b,c)\n    return (p/2) * (a/2) * (b/2) * (c/2)\ndef perimeter_acute_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle from the length of its sides.\n    '''\n    return a+b+c\ndef area_acute_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle from the length of its sides.\n    '''\n    p = perimeter_acute_triangle(a,b,c)\n    return math.sqrt(p/2)\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a hexagon from the length of its sides.\n    '''\n    return 6*a\ndef area_hexagon(a):\n    '''\n    Write a function to find the are"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n    \ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return (5/4)*(3*(a**2))\n    \ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return 6*a\n    \ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return (3*(3**0.5))/2*a**2\n    \ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 8*a\n    \ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    return ((3*a)**2)/2\n    \ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    return 10*a\n    \ndef area_decagon(a):\n    '''\n    Write a function to find the area of a regular decagon from the length of its sides.\n    '''\n    return (math.sqrt(2)*(3**0.5)*a)\n    \ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return 7*a\n    \ndef area_heptagon(a):\n    '''\n    Write a function to find the area of a regular heptagon from the length of its sides.\n    '''\n    return (5/4)*(3*(a**2))\n    \ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 8*a\n    \ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    return (5/4)*(3*(a**2))\n    \ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return 9*a\n    \ndef area_nonagon(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    return (5/2)*(3*(a**2))\n    \ndef perimeter_tetagon(a):\n    '''\n    Write a function to find the perimeter of a regular tetagon from the length of its sides.\n    '''\n    return 4*a\n    \ndef area_tetagon(a):\n    '''\n    Write a function to find the area of a regular tetagon from the length of its sides.\n    '''\n    return (3**0.5)*(a**2)\n    \ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    return 4*a\n    \ndef area_square(a):\n    '''\n    Write a function to find the area of a regular square from the length of its sides.\n    '''\n    return a**2\n    \ndef perimeter_triangle(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    return 3*a\n    \ndef area_triangle(a):\n    '''\n    Write a function to find the area of a regular triangle from the length of its sides.\n    '''\n    return (a**2)/2\n    \ndef perimeter_rhombus(a):\n    '''\n    Write a function to find the perimeter of a regular rhombus from the length of its sides.\n    '''\n    return 4*a\n    \ndef area_rhombus(a):\n    '''\n    Write a function to find the area of a regular rhombus from the length of its sides.\n    '''\n    return (a**2)/2\n    \ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 8*a\n    \ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    return (3*(a**2))/2\n    \ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return 9*a\n    \ndef area_nonagon(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    return (3*(a**2))/2\n    \ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return 7*a\n    \ndef area_heptagon(a):\n    '''\n    Write a function to find the area of a regular heptagon from the length of its sides.\n    '''\n    return (5/4)*(3*(a**2))\n    \ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 8*a\n    \ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    return (5/4)*(3*(a**2))\n    \ndef perimeter_n_gon(n):\n    '''\n    Write a function to find the perimeter of a regular n-gon from the length of its sides.\n    '''\n    return (n*(n-2)*(n-1))/2\n    \ndef area_n_gon(n):\n    '''\n    Write a function to find the area of a regular n-gon from the length of its sides.\n    '''\n    return ((3*(n**2))-2)/6\n    \ndef perimeter_k_gon(n,k):\n    '''\n    Write a function to find the perimeter of a regular k-gon from the length of its sides.\n    '''\n    return k*(n*(n-1))/2\n    \ndef area_k_gon(n,k):\n    '''\n    Write a function to find the area of a regular k-gon from the length of its sides.\n    '''\n    return (k/4)*((n*(n-1)*(n-2))/(n+1))\n    \ndef perimeter_rhombus(a):\n    '''\n    Write a function to find the perimeter of a regular rhombus from the length of its sides.\n    '''\n    return 4*a\n    \ndef area_rhombus(a):\n    '''\n    Write a function to find the area of a regular rhombus from the length of its sides.\n    '''\n    return (a**2)/2\n    \ndef perimeter_triangle(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    return 3*a\n    \ndef area_triangle(a):\n    '''\n    Write a function to find the area of a regular triangle from the length of its sides.\n    '''\n    return (a**2)/2\n    \ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    return 4*a\n    \ndef area_square(a):\n    '''\n    Write a function to find the area of a regular square from the length of its sides.\n    '''\n    return a**2\n    \ndef perimeter_triangle(a):"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 2*(a+math.sqrt(5))\n    return p\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    p = 6*a\n    return p\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    p = 7*a\n    return p\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    p = 8*a\n    return p\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    p = 10*a\n    return p\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    p = 12*a\n    return p\ndef perimeter_heptagon_ratio(a,b):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides, with two known ratios.\n    '''\n    p = (6*a*b)/(a+b)\n    return p\ndef perimeter_octagon_ratio(a,b):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides, with two known ratios.\n    '''\n    p = (8*a*b)/(a+b)\n    return p\ndef perimeter_nonagon_ratio(a,b):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides, with two known ratios.\n    '''\n    p = (10*a*b)/(a+b)\n    return p\ndef perimeter_decagon_ratio(a,b):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides, with two known ratios.\n    '''\n    p = (12*a*b)/(a+b)\n    return p\ndef perimeter_pentagon_ratio(a,b):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides, with two known ratios.\n    '''\n    p = (6*a*b)/(a+b)\n    return p\ndef perimeter_hexagon_ratio(a,b):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides, with two known ratios.\n    '''\n    p = (6*a*b)/(a+b)\n    return p\ndef perimeter_heptagon_ratio(a,b):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides, with two known ratios.\n    '''\n    p = (7*a*b)/(a+b)\n    return p\ndef perimeter_octagon_ratio(a,b):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides, with two known ratios.\n    '''\n    p = (8*a*b)/(a+b)\n    return p\ndef perimeter_nonagon_ratio(a,b):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides, with two known ratios.\n    '''\n    p = (10*a*b)/(a+b)\n    return p\ndef perimeter_decagon_ratio(a,b):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides, with two known ratios.\n    '''\n    p = (12*a*b)/(a+b)\n    return p\ndef perimeter_pentagon_n(a,n):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides, with the first known ratio and the number of sides.\n    '''\n    p = a*(n+math.sqrt(5))/2\n    return p\ndef perimeter_hexagon_n(a,n):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides, with the first known ratio and the number of sides.\n    '''\n    p = a*(2*n+1)\n    return p\ndef perimeter_heptagon_n(a,n):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides, with the first known ratio and the number of sides.\n    '''\n    p = a*(3*n+1)\n    return p\ndef perimeter_octagon_n(a,n):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides, with the first known ratio and the number of sides.\n    '''\n    p = a*(4*n+1)\n    return p\ndef perimeter_nonagon_n(a,n):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides, with the first known ratio and the number of sides.\n    '''\n    p = a*(5*n+1)\n    return p\ndef perimeter_decagon_n(a,n):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides, with the first known ratio and the number of sides.\n    '''\n    p = a*(6*n+1)\n    return p\ndef perimeter_pentagon_n_ratio(a,n,b):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides, with the first known ratio and the number of sides, and a known ratio.\n    '''\n    p = a*((n+b)/2)\n    return p\ndef perimeter_hexagon_n_ratio(a,n,b):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides, with the first known ratio and the number of sides, and a known ratio.\n    '''\n    p = a*((2*n+b)/2)\n    return p\ndef perimeter_heptagon_n_ratio(a,n,b):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides, with the first known ratio and the number of sides, and a known ratio.\n    '''\n    p = a*((3*n+b)/2)\n    return p\ndef perimeter_octagon_n_ratio(a,n,b):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides, with the first known ratio and the number of sides, and a known ratio.\n    '''\n    p = a*((4*n+b)/2)\n    return p\ndef perimeter_nonagon_n_ratio(a,n,b):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides, with the first known ratio and the number of sides, and a known ratio.\n    '''\n    p = a*((5*n+b)/2)\n    return p\ndef perimeter_decagon_n_ratio(a,n,b):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides, with the first known ratio and the number of sides, and a known ratio.\n    '''\n    p = a*((6*n+b)/2)\n    return p\ndef perimeter_pentagon_n_ratio(a,n,b):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides, with the first known ratio and the number of sides, and a known ratio.\n    '''\n    p = a*((n+b)/2)\n    return p\ndef perimeter_hexagon_n_ratio(a,n,b):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides, with the first known ratio and the number of sides, and a known rati"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (5*a)\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5 + a*5*2*math.sqrt(5)\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return a*7\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*8\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*9\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    return a*10\ndef perimeter_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular dodecagon from the length of its sides.\n    '''\n    return a*11\ndef perimeter_tridecagon(a):\n    '''\n    Write a function to find the perimeter of a regular tridecagon from the length of its sides.\n    '''\n    return a*12\ndef perimeter_tetradecagon(a):\n    '''\n    Write a function to find the perimeter of a regular tetradecagon from the length of its sides.\n    '''\n    return a*13\ndef perimeter_pentadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentadecagon from the length of its sides.\n    '''\n    return a*14\ndef perimeter_heptadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptadecagon from the length of its sides.\n    '''\n    return a*15\ndef perimeter_octadecagon(a):\n    '''\n    Write a function to find the perimeter of a regular octadecagon from the length of its sides.\n    '''\n    return a*16\ndef perimeter_enodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular enodecagon from the length of its sides.\n    '''\n    return a*17\ndef perimeter_decenodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular decenodecagon from the length of its sides.\n    '''\n    return a*18\ndef perimeter_vigintidodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular vigintidodecagon from the length of its sides.\n    '''\n    return a*19\ndef perimeter_trigintidodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular trigintodecagon from the length of its sides.\n    '''\n    return a*20\ndef perimeter_trigintidodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular trigintodecagon from the length of its sides.\n    '''\n    return a*21\ndef perimeter_hexacosoid(a):\n    '''\n    Write a function to find the perimeter of a regular hexacosoid from the length of its sides.\n    '''\n    return a*6 + a*6*2*math.sqrt(3)\ndef perimeter_octacosoid(a):\n    '''\n    Write a function to find the perimeter of a regular octacosoid from the length of its sides.\n    '''\n    return a*8 + a*8*2*math.sqrt(2)\ndef perimeter_tricosoid(a):\n    '''\n    Write a function to find the perimeter of a regular tricosoid from the length of its sides.\n    '''\n    return a*12 + a*12*2*math.sqrt(3)\ndef perimeter_tricosoid(a):\n    '''\n    Write a function to find the perimeter of a regular tricosoid from the length of its sides.\n    '''\n    return a*16 + a*16*2*math.sqrt(2)\ndef perimeter_heptacosoid(a):\n    '''\n    Write a function to find the perimeter of a regular hexacosoid from the length of its sides.\n    '''\n    return a*7 + a*7*2*math.sqrt(3)\ndef perimeter_heptacosoid(a):\n    '''\n    Write a function to find the perimeter of a regular hexacosoid from the length of its sides.\n    '''\n    return a*9 + a*9*2*math.sqrt(2)\ndef perimeter_octacosoid(a):\n    '''\n    Write a function to find the perimeter of a regular octacosoid from the length of its sides.\n    '''\n    return a*10 + a*10*2*math.sqrt(2)\ndef perimeter_viginticosoid(a):\n    '''\n    Write a function to find the perimeter of a regular viginticosoid from the length of its sides.\n    '''\n    return a*11 + a*11*2*math.sqrt(3)\ndef perimeter_viginticosoid(a):\n    '''\n    Write a function to find the perimeter of a regular viginticosoid from the length of its sides.\n    '''\n    return a*13 + a*13*2*math.sqrt(2)\ndef perimeter_hexacosonic(a):\n    '''\n    Write a function to find the perimeter of a regular hexacosonic from the length of its sides.\n    '''\n    return a*7 + a*7*2*math.sqrt(3)\ndef perimeter_octacosonic(a):\n    '''\n    Write a function to find the perimeter of a regular octacosonic from the length of its sides.\n    '''\n    return a*8 + a*8*2*math.sqrt(2)\ndef perimeter_tricosonic(a):\n    '''\n    Write a function to find the perimeter of a regular tricosonic from the length of its sides.\n    '''\n    return a*12 + a*12*2*math.sqrt(3)\ndef perimeter_tricosonic(a):\n    '''\n    Write a function to find the perimeter of a regular tricosonic from the length of its sides.\n    '''\n    return a*14 + a*14*2*math.sqrt(2)\ndef perimeter_heptacosonic(a):\n    '''\n    Write a function to find the perimeter of a regular hexacosonic from the length of its sides.\n    '''\n    return a*7 + a*7*2*math.sqrt(3)\ndef perimeter_heptacosonic(a):\n    '''\n    Write a function to find the perimeter of a regular hexacosonic from the length of its sides.\n    '''\n    return a*9 + a*9*2*math.sqrt(2)\ndef perimeter_octacosonic(a):\n    '''\n    Write a function to find the perimeter of a regular octacosonic from the length of its sides.\n    '''\n    return a*10 + a*10*2*math.sqrt(2)\ndef perimeter_viginticosonic(a):\n    '''\n    Write a function to find the perimeter of a regular viginticosonic from the length of its sides.\n    '''\n    return a*11 + a*11*2*math.sqrt(3)\ndef perimeter_viginticosonic(a):\n    '''\n    Write a function to find the perimeter of a regular viginticosonic from the length of its sides.\n    '''\n    return a*13 + a*13*2*math.sqrt(2)\ndef perimeter_hexacosonic(a):\n    '''\n    Write a function to find the perimeter of a regular hexacosonic from the length of its sides.\n    '''\n    return a*7 + a*7*2*math.sqrt(3)\ndef perimeter_octacosonic(a):\n    '''\n    Write a function to find the perimeter of "
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (3 * math.sqrt(3) * a) / 2\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*(5*(3**0.5)+1)\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*(6*(3**0.5)+1)\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return a*(7*(3**0.5)+1)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*(8*(3**0.5)+1)\ndef perimeter_hexa(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*(7*(3**0.5)+1)\ndef perimeter_oct(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*(8*(3**0.5)+1)\ndef perimeter_icos(a):\n    '''\n    Write a function to find the perimeter of a regular icosagon from the length of its sides.\n    '''\n    return a*(5*(3**0.5)+2)\ndef perimeter_tetra(a):\n    '''\n    Write a function to find the perimeter of a regular tetrahedron from the length of its sides.\n    '''\n    return a*(4*(3**0.5)+1)\ndef perimeter_tetra2(a):\n    '''\n    Write a function to find the perimeter of a regular tetrahedron from the length of its sides.\n    '''\n    return a*(4*(3**0.5)+1)\ndef perimeter_octa(a):\n    '''\n    Write a function to find the perimeter of a regular octahedron from the length of its sides.\n    '''\n    return a*(5*(3**0.5)+2)\ndef perimeter_enui(a):\n    '''\n    Write a function to find the perimeter of a regular enuihedron from the length of its sides.\n    '''\n    return a*(6*(3**0.5)+1)\ndef perimeter_tri(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    return a*(3**0.5+1)\ndef perimeter_trim(a):\n    '''\n    Write a function to find the perimeter of a regular trim-triangle from the length of its sides.\n    '''\n    return a*(3**0.5+1)\ndef perimeter_tri2(a):\n    '''\n    Write a function to find the perimeter of a regular trim-triangle from the length of its sides.\n    '''\n    return a*(3**0.5+1)\ndef perimeter_tri3(a):\n    '''\n    Write a function to find the perimeter of a regular trim-triangle from the length of its sides.\n    '''\n    return a*(3**0.5+1)\ndef perimeter_tri4(a):\n    '''\n    Write a function to find the perimeter of a regular trim-triangle from the length of its sides.\n    '''\n    return a*(3**0.5+1)\ndef perimeter_tri5(a):\n    '''\n    Write a function to find the perimeter of a regular trim-triangle from the length of its sides.\n    '''\n    return a*(3**0.5+1)\ndef perimeter_tri6(a):\n    '''\n    Write a function to find the perimeter of a regular trim-triangle from the length of its sides.\n    '''\n    return a*(3**0.5+1)\ndef perimeter_tri7(a):\n    '''\n    Write a function to find the perimeter of a regular trim-triangle from the length of its sides.\n    '''\n    return a*(3**0.5+1)\ndef perimeter_tri8(a):\n    '''\n    Write a function to find the perimeter of a regular trim-triangle from the length of its sides.\n    '''\n    return a*(3**0.5+1)\ndef perimeter_tri9(a):\n    '''\n    Write a function to find the perimeter of a regular trim-triangle from the length of its sides.\n    '''\n    return a*(3**0.5+1)\ndef perimeter_tri10(a):\n    '''\n    Write a function to find the perimeter of a regular trim-triangle from the length of its sides.\n    '''\n    return a*(3**0.5+1)\ndef perimeter_tri11(a):\n    '''\n    Write a function to find the perimeter of a regular trim-triangle from the length of its sides.\n    '''\n    return a*(3**0.5+1)\ndef perimeter_tri12(a):\n    '''\n    Write a function to find the perimeter of a regular trim-triangle from the length of its sides.\n    '''\n    return a*(3**0.5+1)\ndef perimeter_tri13(a):\n    '''\n    Write a function to find the perimeter of a regular trim-triangle from the length of its sides.\n    '''\n    return a*(3**0.5+1)\ndef perimeter_tri14(a):\n    '''\n    Write a function to find the perimeter of a regular trim-triangle from the length of its sides.\n    '''\n    return a*(3**0.5+1)\ndef perimeter_tri15(a):\n    '''\n    Write a function to find the perimeter of a regular trim-triangle from the length of its sides.\n    '''\n    return a*(3**0.5+1)\ndef perimeter_tri16(a):\n    '''\n    Write a function to find the perimeter of a regular trim-triangle from the length of its sides.\n    '''\n    return a*(3**0.5+1)\ndef perimeter_tri17(a):\n    '''\n    Write a function to find the perimeter of a regular trim-triangle from the length of its sides.\n    '''\n    return a*(3**0.5+1)\ndef perimeter_tri18(a):\n    '''\n    Write a function to find the perimeter of a regular trim-triangle from the length of its sides.\n    '''\n    return a*(3**0.5+1)\ndef perimeter_tri19(a):\n    '''\n    Write a function to find the perimeter of a regular trim-triangle from the length of its sides.\n    '''\n    return a*(3**0.5+1)\ndef perimeter_tri20(a):\n    '''\n    Write a function to find the perimeter of a regular trim-triangle from the length of its sides.\n    '''\n    return a*(3**0.5+1)\ndef perimeter_tri21(a):\n    '''\n    Write a function to find the perimeter of a regular trim-triangle from the length of its sides.\n    '''\n    return a*(3**0.5+1)\ndef perimeter_tri22(a):\n    '''\n    Write a function to find the perimeter of a regular trim-triangle from the length of its sides.\n    '''\n    return a*(3**0.5+1)\ndef perimeter_tri23(a):\n    '''\n    Write a function to find the perimeter of a regular trim-triangle from the length of its sides.\n    '''\n    return a*(3**0.5+1)\ndef perimeter_tri24(a):\n    '''\n    Write a function to find the perimeter of a regular trim-triangle from the length of its sides.\n    '''\n    return a*(3**0.5+1)\ndef perimeter_tri25(a):\n    '''\n    Write a function to find the perimeter of a regular trim-triangle from the length of its sides.\n    '''\n    return a*(3**0.5+1)\ndef perimeter_tri26(a):\n    '''\n    Write a function to find the perimeter of a regular trim-tr"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count=0\n    for i in range(len(s)-3):\n        if s[i]=='s' and s[i+1]=='d' and s[i+2]=='t' and s[i+3]=='d':\n            count+=1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if s is None:\n        return 0\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n    \n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    i=0\n    for j in range(len(s)-2):\n        if s[j]=='d' and s[j+1]=='o' and s[j+2]=='t':\n            i+=1\n    return i\n    \ndef count_occurances(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    occurance = s.count('std')\n    return occurance\n    \ndef find_sub_string(s, sub):\n    '''\n    Write a function to find the index of the first occurrence of a substring in a given string.\n    '''\n    i=0\n    for j in range(len(s)):\n        if s[j]==sub:\n            i+=1\n            return i\n    return -1\n    \ndef find_sub_string(s, sub):\n    '''\n    Write a function to find the index of the first occurrence of a substring in a given string.\n    '''\n    if len(sub)==0:\n        return 0\n    occurances=0\n    for i in range(len(s)-len(sub)+1):\n        if s[i]==sub[0]:\n            if s[i:i+len(sub)]==sub:\n                occurances+=1\n    return occurances\n    \ndef insert_at_pos(s, sub, pos):\n    '''\n    Write a function to insert a substring into a string at a given position.\n    '''\n    return s[:pos]+sub+s[pos:]\n    \ndef insert_at_pos(s, sub, pos):\n    '''\n    Write a function to insert a substring into a string at a given position.\n    '''\n    if pos<0:\n        return s\n    elif pos>len(s):\n        return s+sub\n    else:\n        return s[:pos]+sub+s[pos:]\n    \ndef delete_at_pos(s, pos):\n    '''\n    Write a function to delete a substring from a string at a given position.\n    '''\n    return s[:pos]+s[pos+1:]\n    \ndef delete_at_pos(s, pos):\n    '''\n    Write a function to delete a substring from a string at a given position.\n    '''\n    if pos<0:\n        return s\n    elif pos>len(s):\n        return s\n    else:\n        return s[:pos]+s[pos+1:]\n    \ndef replace_char(s, old, new):\n    '''\n    Write a function to replace a character in a string with another character.\n    '''\n    return s.replace(old, new)\n    \ndef replace_char(s, old, new):\n    '''\n    Write a function to replace a character in a string with another character.\n    '''\n    if old==' ':\n        return s.replace(old,'')\n    else:\n        return s.replace(old, new)\n    \ndef replace_char(s, old, new):\n    '''\n    Write a function to replace a character in a string with another character.\n    '''\n    if old==' ':\n        return s.replace(old,'')\n    else:\n        return s.replace(old, new)\n    \ndef replace_char(s, old, new):\n    '''\n    Write a function to replace a character in a string with another character.\n    '''\n    if old==' ':\n        return s.replace(old,'')\n    else:\n        return s.replace(old, new)\n    \ndef reverse_string(s):\n    '''\n    Write a function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef reverse_string(s):\n    '''\n    Write a function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef string_compression(s):\n    '''\n    Write a function to remove the duplicate characters in a string and return the new string.\n    '''\n    d={}\n    ans=\"\"\n    for i in s:\n        if i not in d:\n            d[i]=1\n        else:\n            d[i]+=1\n    for i in d:\n        ans+=i\n        ans+=str(d[i])\n    return ans\n    \ndef remove_vowels(s):\n    '''\n    Write a function to remove the vowels in a string.\n    '''\n    return s.translate(None,'aeiouAEIOU')\n    \ndef remove_vowels(s):\n    '''\n    Write a function to remove the vowels in a string.\n    '''\n    return s.translate(None,'aeiouAEIOU')\n    \ndef remove_vowels(s):\n    '''\n    Write a function to remove the vowels in a string.\n    '''\n    return s.translate(None,'aeiouAEIOU')\n    \ndef remove_vowels(s):\n    '''\n    Write a function to remove the vowels in a string.\n    '''\n    return s.translate(None,'aeiouAEIOU')\n    \ndef remove_vowels(s):\n    '''\n    Write a function to remove the vowels in a string.\n    '''\n    return s.translate(None,'aeiouAEIOU')\n    \ndef remove_vowels(s):\n    '''\n    Write a function to remove the vowels in a string.\n    '''\n    return s.translate(None,'aeiouAEIOU')\n    \ndef remove_vowels(s):\n    '''\n    Write a function to remove the vowels in a string.\n    '''\n    return s.translate(None,'aeiouAEIOU')\n    \ndef remove_vowels(s):\n    '''\n    Write a function to remove the vowels in a string.\n    '''\n    return s.translate(None,'aeiouAEIOU')\n    \ndef remove_vowels(s):\n    '''\n    Write a function to remove the vowels in a string.\n    '''\n    return s.translate(None,'aeiouAEIOU')\n    \ndef remove_vowels(s):\n    '''\n    Write a function to remove the vowels in a string.\n    '''\n    return s.translate(None,'aeiouAEIOU')\n    \ndef remove_vowels(s):\n    '''\n    Write a function to remove the vowels in a string.\n    '''\n    return s.translate(None,'aeiouAEIOU')\n    \ndef remove_vowels(s):\n    '''\n    Write a function to remove the vowels in a string.\n    '''\n    return s.translate(None,'aeiouAEIOU')\n    \ndef remove_vowels(s):\n    '''\n    Write a function to remove the vowels in a string.\n    '''\n    return s.translate(None,'aeiouAEIOU')\n    \ndef remove_vowels(s):\n    '''\n    Write a function to remove the vowels in a string.\n    '''\n    return s.translate(None,'aeiouAEIOU')\n    \ndef remove_vowels(s):\n    '''\n    Write a function to remove the vowels in a string.\n    '''\n    return s.translate(None,'aeiouAEIOU')\n    \ndef remove_vowels(s):\n    '''\n    Write a function to remove the vowels in a string.\n    '''\n    return s.translate(None,'aeiouAEIOU')\n    \ndef remove_vowels(s):\n    '''\n    Write a function to remove the vowels in a string.\n    '''\n    return s.translate(None,'aeiouAEIOU')\n    \ndef remove_vowels(s):\n    '''\n    Write a function to remove the vowels in a string.\n    '''\n    return s.translate(None,'aeiouAEIOU')\n    \ndef remove_vowels(s):\n    '''\n    Write a function to remove the vowels in a string.\n    '''\n    return s.translate(Non"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    value = None\n    for each_value in test_tuple:\n        if each_value is None:\n            return False\n        if value is None:\n            value = type(each_value)\n        elif type(each_value)!= value:\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    try:\n        return len(test_tuple) == len(set([type(i) for i in test_tuple]))\n    except:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(isinstance(ele,type(test_tuple[0])) for ele in test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    dtype_list = []\n    for i in test_tuple:\n        dtype_list.append(type(i))\n    if len(dtype_list) == len(set(dtype_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if isinstance(test_tuple, tuple):\n        return True\n    return False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    #first convert the tuple into list, then use isinstance method\n    #to check data type of each element in list\n    test_list = list(test_tuple)\n    for i in range(len(test_list)):\n        if not isinstance(test_list[i], type(test_list[0])):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = set()\n    for data in test_tuple:\n        if type(data) == tuple or type(data) == list:\n            data_types.add(type(data[0]))\n        else:\n            data_types.add(type(data))\n    return len(data_types) == 1\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_tuple = [type(x) for x in test_tuple]\n    if type_tuple.count(type_tuple[0]) == len(type_tuple):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(type(item) == type(test_tuple[0]) for item in test_tuple)\n    \n    \ndef check_type_args(*test_args):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_tuple = []\n    for arg in test_args:\n        if type(arg) == tuple:\n            test_tuple.append(arg)\n        else:\n            return False\n    return all(type(item) == type(test_tuple[0]) for item in test_tuple)\n    \n    \ndef is_list_of_tuples(tuple_list):\n    '''\n    Write a function to check if the tuple_list is a list of tuples.\n    '''\n    return all(type(item) == tuple for item in tuple_list)\n    \n    \ndef is_list_of_tuples_args(*args):\n    '''\n    Write a function to check if the tuple_list is a list of tuples.\n    '''\n    return all(type(item) == tuple for item in args)\n    \n    \ndef check_if_list_of_tuples(tuple_list):\n    '''\n    Write a function to check if the tuple_list is a list of tuples.\n    '''\n    return type(tuple_list) == list and is_list_of_tuples(tuple_list)\n    \n    \ndef check_if_list_of_tuples_args(*args):\n    '''\n    Write a function to check if the tuple_list is a list of tuples.\n    '''\n    return type(args) == list and is_list_of_tuples_args(args)\n    \n    \ndef tuples_list_to_dict(tuples_list):\n    '''\n    Write a function to convert a list of tuples to a dictionary.\n    '''\n    return dict(tuples_list)\n    \n    \ndef tuples_list_to_dict_args(*args):\n    '''\n    Write a function to convert a list of tuples to a dictionary.\n    '''\n    return dict(args)\n    \n    \ndef check_if_dict_of_tuples(tuple_dict):\n    '''\n    Write a function to check if the tuple_dict is a dictionary of tuples.\n    '''\n    return type(tuple_dict) == dict and is_list_of_tuples(tuple_dict.values())\n    \n    \ndef check_if_dict_of_tuples_args(*args):\n    '''\n    Write a function to check if the tuple_dict is a dictionary of tuples.\n    '''\n    return type(args) == dict and is_list_of_tuples_args(args.values())\n    \n    \ndef tuples_dict_to_list(tuple_dict):\n    '''\n    Write a function to convert a dictionary of tuples to a list.\n    '''\n    return list(tuple_dict.values())\n    \n    \ndef tuples_dict_to_list_args(*args):\n    '''\n    Write a function to convert a dictionary of tuples to a list.\n    '''\n    return list(args.values())\n    \n    \ndef check_if_list_of_tuples(tuple_list):\n    '''\n    Write a function to check if the tuple_list is a list of tuples.\n    '''\n    return type(tuple_list) == list and is_list_of_tuples(tuple_list)\n    \n    \ndef check_if_list_of_tuples_args(*args):\n    '''\n    Write a function to check if the tuple_list is a list of tuples.\n    '''\n    return type(args) == list and is_list_of_tuples_args(args)\n    \n    \ndef tuples_list_to_dict(tuple_list):\n    '''\n    Write a function to convert a list of tuples to a dictionary.\n    '''\n    return dict(tuple_list)\n    \n    \ndef tuples_list_to_dict_args(*args):\n    '''\n    Write a function to convert a list of tuples to a dictionary.\n    '''\n    return dict(args)\n    \n    \ndef check_if_dict_of_tuples(tuple_dict):\n    '''\n    Write a function to check if the tuple_dict is a dictionary of tuples.\n    '''\n    return type(tuple_dict) == dict and is_list_of_tuples(tuple_dict.values())\n    \n    \ndef check_if_dict_of_tuples_args(*args):\n    '''\n    Write a function to check if the tuple_dict is a dictionary of tuples.\n    '''\n    return type(args) == dict and is_list_of_tuples_args(args.values())\n    \n    \ndef sort_by_key(tuple_dict):\n    '''\n    Write a function to sort a dictionary of tuples by key.\n    '''\n    return sorted(tuple_dict.items(), key=lambda x:x[0])\n    \n    \ndef sort_by_key_args(*args):\n    '''\n    Write a function to sort a dictionary of tuples by key.\n    '''\n    return sorted(args, key=lambda x:x[0])\n    \n    \ndef get_values(tuple_dict):\n    '''\n    Write a function to get the values in a dictionary of tuples.\n    '''\n    return tuple_dict.values()\n    \n    \ndef get_values_args(*args):\n    '''\n    Write a function to get the values in a dictionary of tuples.\n    '''\n    return args.values()\n    \n    \ndef get_keys(tuple_dict):\n    '''\n    Write a function to get the keys in a dictionary of tuples.\n    '''\n    return tuple_dict.keys()\n    \n    \ndef get_keys_args(*args):\n    '''\n    Write a function to get the keys in a dictionary of tuples.\n    '''\n    return args.keys()\n    \n    \ndef check_if_dict_of_tuples(tuple_dict):\n    '''\n    Write a function to check if the tuple_dict is a dictionary of tuples.\n    '''\n    return type(tuple_dict) == dict and is_list_of_tuples(tuple_dict.values())\n    \n    \ndef check_if_dict_of_tuples_args(*args):\n    '''\n    Write a function to check if the tuple_dict is a dictionary of tuples.\n    '''\n    return type(args) == dict and is_list_of_tuples_args(args.values())\n    \n    \ndef check_if_dict_of_tuples_keys(tuple_dict):\n    '''\n    Write a function to check if the tuple_dict is a dictionary of tuples with only keys.\n    '''\n    return type(tuple_dict) == dict and all(type(item) == tuple for item in tuple_dict.values())\n    \n    \ndef check_if_dict_of_tuples_keys_args(*args):\n    '''\n    Write a function to check if the tuple_dict is a dictionary of tuples with only keys.\n    '''\n    return type(args) == dict and all(type(item) == tuple for item in args.values())\n    \n    \ndef check_if_dict_of_tuples_keys_value(tuple_dict):\n    '''\n    Write a function to check if the tuple_dict is a dictionary of tuples with only values.\n    '''\n    return type(tuple_dict) == dict and all(type(item[0]) == tuple for item in tuple_dict.values())\n    \n    \ndef check_if_dict_of_tuples_keys_value_args(*args):\n    '''\n    Write a function to check if the tuple_dict is a dictionary of tuples with only values.\n    '''\n    return type(args) == dict and all(type(item[0]) == tuple for item in args.values())\n    \n    \ndef tuples_dict_to_list_of_tuples(tuple_dict):\n    '''\n    Write a function to convert a dictionary of tuples t"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in range(len(test_tuple) - 1):\n        if type(test_tuple[i])!= type(test_tuple[i + 1]):\n            return False\n    return True\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    left = 0\n    right = n - 1\n    mid = 0\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        return True\n    if arr[0] == x:\n        return True\n    if arr[0] < x:\n        return is_majority(arr[1:], n, x)\n    if arr[0] > x:\n        return is_majority(arr[1:], n, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    counter = 0\n    for i in range(0, n):\n        if arr[i] == x:\n            counter += 1\n    if counter > n/2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    left = 0\n    right = n - 1\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    \n    # find the index of the first occurence of the element\n    first_occurence = binary_search(arr, n, 0, n-1, x)\n    # if the element is not found, return false\n    if first_occurence == -1:\n        return False\n    # find the index of the last occurence of the element\n    last_occurence = binary_search(arr, n, 0, n-1, x)\n    # if the element is not found, return false\n    if last_occurence == -1:\n        return False\n    # if the first and last occurence are same, return true\n    if first_occurence == last_occurence:\n        return True\n    # otherwise, return true if the element is more than the length of the array divided by 2\n    return (last_occurence - first_occurence) > (n / 2)\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr is None or n <= 0:\n        return False\n    # for i in range(n):\n    #     if arr[i] == x:\n    #         return True\n    # return False\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n / 2\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(0, n):\n        if arr[i] == x:\n            count = count + 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr.count(x) > (n/2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    left = 0\n    right = n - 1\n    while left < right:\n        if arr[left] == x:\n            left += 1\n        elif arr[right] == x:\n            right -= 1\n        else:\n            return False\n    if left == right:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0: return False\n    mid = n/2\n    if arr[mid] == x:\n        return True\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    else:\n        return is_majority(arr[mid:], n-mid, x)\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        n &= (n - 1)\n        count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        n &= (n - 1) \n        count += 1\n    return count \n    \ndef count_One_Bits(n): \n    '''\n    Write a python function to count the number of one bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        n &= (n - 1) \n        count += 1\n    return count\n    \ndef count_One_Bits_reverse(n): \n    '''\n    Write a python function to count the number of one bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        n = n & (n - 1) \n        count += 1\n    return count\n    \ndef count_Set_Bits_reverse(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        n = n & (n - 1) \n        count += 1\n    return count\n    \ndef count_One_Bits_reverse(n): \n    '''\n    Write a python function to count the number of one bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        n = n & (n - 1) \n        count += 1\n    return count\n    \ndef count_Set_Bits_reverse(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        n = n & (n - 1) \n        count += 1\n    return count\n    \ndef count_One_Bits_reverse(n): \n    '''\n    Write a python function to count the number of one bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        n = n & (n - 1) \n        count += 1\n    return count\n    \ndef count_Set_Bits_reverse(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        n = n & (n - 1) \n        count += 1\n    return count\n    \ndef count_One_Bits_reverse(n): \n    '''\n    Write a python function to count the number of one bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        n = n & (n - 1) \n        count += 1\n    return count\n    \ndef count_Set_Bits_reverse(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        n = n & (n - 1) \n        count += 1\n    return count\n    \ndef count_One_Bits_reverse(n): \n    '''\n    Write a python function to count the number of one bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        n = n & (n - 1) \n        count += 1\n    return count\n    \ndef count_Set_Bits_reverse(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        n = n & (n - 1) \n        count += 1\n    return count\n    \ndef count_One_Bits_reverse(n): \n    '''\n    Write a python function to count the number of one bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        n = n & (n - 1) \n        count += 1\n    return count\n    \ndef count_Set_Bits_reverse(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        n = n & (n - 1) \n        count += 1\n    return count\n    \ndef count_One_Bits_reverse(n): \n    '''\n    Write a python function to count the number of one bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        n = n & (n - 1) \n        count += 1\n    return count\n    \ndef count_Set_Bits_reverse(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        n = n & (n - 1) \n        count += 1\n    return count\n    \ndef count_One_Bits_reverse(n): \n    '''\n    Write a python function to count the number of one bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        n = n & (n - 1) \n        count += 1\n    return count\n    \ndef count_Set_Bits_reverse(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        n = n & (n - 1) \n        count += 1\n    return count\n    \ndef count_One_Bits_reverse(n): \n    '''\n    Write a python function to count the number of one bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        n = n & (n - 1) \n        count += 1\n    return count\n    \ndef count_Set_Bits_reverse(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        n = n & (n - 1) \n        count += 1\n    return count\n    \ndef count_One_Bits_reverse(n): \n    '''\n    Write a python function to count the number of one bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        n = n & (n - 1) \n        count += 1\n    return count\n    \ndef count_Set_Bits_reverse(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        n = n & (n - 1) \n        count += 1\n    return count\n    \ndef count_One_Bits_reverse(n): \n    '''\n    Write a python function to count the number of one bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        n = n & (n - 1) \n        count += 1\n    return count\n    \ndef count_Set_Bits_reverse(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        n = n & (n - 1) \n        count += 1\n    return count\n    \ndef count_One_Bits_reverse(n): \n    '''\n    Write a python function to count the number of one bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        n = n & (n - 1) \n        count += 1\n    return count\n    \ndef count"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\ndef Bit_Swap(n, i, j):\n    '''\n    Write a python function to swap the bits of a given number, \n    with the bits of the given indices.\n    '''\n    return n ^ (1 << i) ^ (1 << j)\ndef ROT_Left(n, i):\n    '''\n    Write a python function to rotate a given number n by i bits left.\n    '''\n    return (n << i) | (n >> (32 - i))\ndef add_Mod_32(n, m):\n    '''\n    Write a python function to add two numbers modulus 32 bits.\n    '''\n    return n + m if n < m else n - m\ndef mul_Mod_32(n, m):\n    '''\n    Write a python function to multiply two numbers modulus 32 bits.\n    '''\n    return n * m if n < m else n * (m - n)\ndef chxor_Bytes(a, b):\n    '''\n    Write a python function to XOR two numbers of the same size, \n    with the lowest bit of the result at the MSB and the result is in the range of [0, 255].\n    '''\n    return bytes([a[i] ^ b[i] for i in range(len(a))])\ndef chmul_Bytes(a, b):\n    '''\n    Write a python function to multiply two numbers of the same size, \n    with the lowest bit of the result at the MSB and the result is in the range of [0, 255].\n    '''\n    return bytes([a[i] * b[i] for i in range(len(a))])\ndef chmul_32(n):\n    '''\n    Write a python function to multiply a number of the same size, \n    with the lowest bit of the result at the MSB and the result is in the range of [0, 255].\n    '''\n    return [n[i] * (1 << i) for i in range(len(n))]\ndef chunk_Bytes(a, n):\n    '''\n    Write a python function to divide a list of bytes into n chunks of the same size.\n    '''\n    return [a[i:i + n] for i in range(0, len(a), n)]\ndef shuffle_Bytes(a, i):\n    '''\n    Write a python function to shuffle a list of bytes with a given index.\n    '''\n    return a[:i] + a[i:i + 1] + a[i + 1:] + a[i]\ndef xor_Bytes(a, b):\n    '''\n    Write a python function to XOR two numbers of the same size, \n    with the lowest bit of the result at the MSB and the result is in the range of [0, 255].\n    '''\n    return bytes([a[i] ^ b[i] for i in range(len(a))])\ndef chxor_16(a, b):\n    '''\n    Write a python function to XOR two numbers of the same size, \n    with the lowest bit of the result at the MSB and the result is in the range of [0, 255].\n    '''\n    return [a[i] ^ b[i] for i in range(len(a))]\ndef chmul_16(a, b):\n    '''\n    Write a python function to multiply two numbers of the same size, \n    with the lowest bit of the result at the MSB and the result is in the range of [0, 255].\n    '''\n    return [a[i] * b[i] for i in range(len(a))]\ndef add_32_to_32(a, b):\n    '''\n    Write a python function to add two numbers of the same size, \n    with the lowest bit of the result at the MSB and the result is in the range of [0, 2^32 - 1].\n    '''\n    return [a[i] + b[i] for i in range(len(a))]\ndef chunk_16(a, n):\n    '''\n    Write a python function to divide a list of bytes into n chunks of the same size.\n    '''\n    return [a[i:i + n] for i in range(0, len(a), n)]\ndef chxor_32(a, b):\n    '''\n    Write a python function to XOR two numbers of the same size, \n    with the lowest bit of the result at the MSB and the result is in the range of [0, 255].\n    '''\n    return bytes([a[i] ^ b[i] for i in range(len(a))])\ndef add_16_to_32(a, b):\n    '''\n    Write a python function to add two numbers of the same size, \n    with the lowest bit of the result at the MSB and the result is in the range of [0, 2^32 - 1].\n    '''\n    return [a[i] + b[i] for i in range(len(a))]\ndef chmul_32(a, b):\n    '''\n    Write a python function to multiply two numbers of the same size, \n    with the lowest bit of the result at the MSB and the result is in the range of [0, 255].\n    '''\n    return [a[i] * b[i] for i in range(len(a))]\ndef chmul_16(a, b):\n    '''\n    Write a python function to multiply two numbers of the same size, \n    with the lowest bit of the result at the MSB and the result is in the range of [0, 255].\n    '''\n    return [a[i] * b[i] for i in range(len(a))]\ndef chxor_64(a, b):\n    '''\n    Write a python function to XOR two numbers of the same size, \n    with the lowest bit of the result at the MSB and the result is in the range of [0, 255].\n    '''\n    return bytes([a[i] ^ b[i] for i in range(len(a))])\ndef chmul_64(a, b):\n    '''\n    Write a python function to multiply two numbers of the same size, \n    with the lowest bit of the result at the MSB and the result is in the range of [0, 255].\n    '''\n    return bytes([a[i] * b[i] for i in range(len(a))])\ndef xor_64(a, b):\n    '''\n    Write a python function to XOR two numbers of the same size, \n    with the lowest bit of the result at the MSB and the result is in the range of [0, 255].\n    '''\n    return bytes([a[i] ^ b[i] for i in range(len(a))])\ndef chmul_128(a, b):\n    '''\n    Write a python function to multiply two numbers of the same size, \n    with the lowest bit of the result at the MSB and the result is in the range of [0, 255].\n    '''\n    return [a[i] * b[i] for i in range(len(a))]\ndef shuffle_64(a, i):\n    '''\n    Write a python function to shuffle a list of bytes with a given index.\n    '''\n    return a[:i] + a[i:i + 1] + a[i + 1:] + a[i]\ndef csub_32_to_32(a, b):\n    '''\n    Write a python function to subtract two numbers of the same size, \n    with the lowest bit of the result at the MSB and the result is in the range of [0, 2^32 - 1].\n    '''\n    return [a[i] - b[i] for i in range(len(a))]\ndef chmul_128(a, b):\n    '''\n    Write a python function to multiply two numbers of the same size, \n    with the lowest bit of the result at the MSB and the result is in the range of [0, 255].\n    '''\n    return [a[i] * b[i] for i in range(len(a))]\ndef shuffle_128(a, i):\n    '''\n    Write a python function to shuffle a list of bytes with a given index"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= n-1\n        count += 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    setBits = 0\n    while (n): \n        if (n & 1):\n            setBits += 1\n        n = n >> 1\n    return setBits\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    return ''.join(list(str)[::2])\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[1::2]\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join(str[i] for i in range(1,len(str),2))\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    for i in range(1,len(str),2):\n        str = str.replace(str[i],\"\")\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    index = 0\n    for i in str:\n        if index % 2 == 0:\n            new_str += i\n        index += 1\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([x for i,x in enumerate(str) if i % 2 == 0])\n    \n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # first approach\n    i=0\n    res = \"\"\n    while(i<len(str)):\n        if i%2==0:\n            res += str[i]\n        i += 1\n    return res\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i%2==0:\n            new_str += str[i]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    output = ''\n    for i in range(len(str)):\n        if i%2 == 0:\n            output+=str[i]\n    return output\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    for i in range(len(str)):\n        if i%2 == 1:\n            str = str[:i] + str[i+1:]\n    return str\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if b<c:\n            return b\n        else:\n            return c\n    else:\n        if a<c:\n            return a\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a < b) and (a < c):\n        return a\n    elif (b < a) and (b < c):\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<=b and a<=c:\n        return a\n    elif b<=c and b<=a:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<=b and a<=c:\n        return a\n    elif b<=c and b<=a:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # check for all the bits to be unset in the given range\n    flag = 0\n    for i in range(l,r+1):\n        if n & (1 << i):\n            flag = 1\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # your code goes here\n    l, r = (int(l), int(r)) if l <= r else (int(r), int(l))\n    n = int(n)\n    return (bin(n & ((1 << r) - 1)).count('0') == r - l + 1)\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    x = (bin(n))[2:].count('0')\n    if x == (r-l+1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # using the method defined in Bit Manipulation\n    if n&(1<<l)!= 0:\n        return 0\n    if n&(1<<r)!= 0:\n        return 0\n    for i in range(l+1,r):\n        if n&(1<<i)!= 0:\n            return 0\n    return 1\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return all(i == '0' for i in bin(n)[2:].zfill(r))\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return not(any(bit == '1' for bit in bin(n)[2:].zfill(r)))\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    s = format(n,'0{}b'.format(l+r))\n    if(s.count('0') == r+l):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    list1=[]\n    for i in range(0,r):\n        if bin(n)[2:].zfill(r)[i] == '0':\n            list1.append(0)\n        else:\n            list1.append(1)\n    for j in list1:\n        if j == 0:\n            return 0\n    return 1\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if bin(i).count('1')!= n:\n            return False\n    return True\ndef solve_it(input_data):\n    '''\n    Given a list of integers, which contains only the bits set to 1 in a contiguous range, \n    find the value of the bit that is unset in that range.\n    '''\n    input_data = input_data.split('\\n')\n    n,l,r = [int(i) for i in input_data[0].split()]\n    if all_Bits_Set_In_The_Given_Range(n,l,r):\n        return \"NO\"\n    r = r-1\n    if (r-l)%2 == 1:\n        if r!= n-1:\n            return str(bin(r+1).count('1'))\n        return str(n-r)\n    else:\n        return str(bin(r+1).count('1')+1)\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return all(bin(i)[2:].count('1')==0 for i in range(l,r+1))\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    nums = [x for x in arr if x < 0]\n    nums += [x for x in arr if x >= 0]\n    nums = nums[:n]\n    return nums\n    \ndef new_greater_than_or_equal_to_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the elements of the given array so that the number of positive elements is greater than or equal to n. If there are more positive elements, the positive elements are rearranged at the end of the array.\n    '''\n    arr = [x for x in arr if x < 0]\n    arr.sort()\n    arr = arr[:n]\n    arr += [x for x in arr if x >= 0]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negatives = []\n    positives = []\n    for i in arr[:n]:\n        if i < 0:\n            negatives.append(i)\n        elif i > 0:\n            positives.append(i)\n    return negatives + positives\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative_index = 0\n    positive_index = n\n    while positive_index < len(arr):\n        if arr[positive_index] < 0:\n            arr[negative_index], arr[positive_index] = arr[positive_index], arr[negative_index]\n            negative_index += 1\n        positive_index += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return arr[n:] + arr[:n]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # [3, 5, 6, -1, 2, 4, -2, 5, 1]\n    # [5, 6, -1, 2, 4, -2, 5, 1]\n    # [6, -1, 2, 4, 5, 1]\n    # [6, -1, 2, 4, 5, 1]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if len(arr) < n:\n        return arr\n    \n    negative = []\n    positive = []\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    return negative + positive\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    result = []\n    for i in range(n):\n        if arr[i] < 0:\n            result.insert(0, arr[i])\n    for i in range(n, len(arr)):\n        result.append(arr[i])\n    return result\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Your code here\n    for i in range(n):\n        if arr[i] < 0:\n            arr.append(arr.pop(i))\n    return arr\n    \ndef find_duplicates(arr):\n    '''\n    Write a function that takes in an array of unique numbers and returns an array of all duplicate numbers in that array.\n    '''\n    # Your code here\n    duplicate_nums = []\n    for num in arr:\n        if arr.count(num) > 1:\n            duplicate_nums.append(num)\n    return duplicate_nums\n    \ndef check_permutations(string1, string2):\n    '''\n    Write a function that takes in two strings and returns a boolean indicating whether the two strings are permutations of one another.\n    A permutation is defined as a rearrangement of the characters in one string, with no characters appearing in their original order.\n    '''\n    # Your code here\n    if len(string1)!= len(string2):\n        return False\n    string1 = sorted(string1)\n    string2 = sorted(string2)\n    for i in range(len(string1)):\n        if string1[i]!= string2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr):\n        if arr[i] < 0:\n            if j < n:\n                arr[i], arr[j] = arr[j], arr[i]\n                j += 1\n            i += 1\n        else:\n            i += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = arr[:n]\n    neg = []\n    pos = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        elif arr[i] > 0:\n            pos.append(arr[i])\n    \n    neg.extend(pos)\n    return neg\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    result = \"\"\n    for i in range(len(str1)):\n        if str1[i]!= \" \":\n            result += str1[i]\n        else:\n            result += char\n    return result\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ',char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    result = str1.replace(\" \", char)\n    return result\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    s = list(str1)\n    for i in range(len(str1)):\n        if str1[i] == \" \":\n            s[i] = char\n    return \"\".join(s)\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(' ','')\n    return str1+char*(len(str1)-1)\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = ''\n    for c in str1:\n        if c =='':\n            c = char\n        str2 += c\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','{}')\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.split()\n    str1 = ''.join(str1)\n    return str1.replace(' ',char)\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    blank_str=''\n    for i in str1:\n        if i==' ':\n            blank_str+='%s'%char\n        else:\n            blank_str+=i\n    return blank_str\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    newlist = []\n    for i in range(n):\n        num = list1[i]\n        newlist.append(num)\n    return newlist\ndef small_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    newlist = []\n    for i in range(n):\n        num = list1[i]\n        newlist.append(num)\n    return newlist\ndef mean(list1):\n    '''\n    Write a function that takes in a list and returns the mean of the list.\n    '''\n    sum = 0\n    for i in range(len(list1)):\n        num = list1[i]\n        sum += num\n    mean = sum/len(list1)\n    return mean\ndef mean_arr(arr):\n    '''\n    Write a function that takes in a list of integers and returns the mean of the list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        num = arr[i]\n        sum += num\n    mean = sum/len(arr)\n    return mean\ndef median(list1):\n    '''\n    Write a function that takes in a list and returns the median of the list.\n    '''\n    list1.sort()\n    if len(list1) % 2 == 0:\n        median = (list1[len(list1)/2] + list1[len(list1)/2 - 1])/2\n    else:\n        median = list1[len(list1)/2]\n    return median\ndef mode(list1):\n    '''\n    Write a function that takes in a list and returns the most common number in the list.\n    '''\n    newlist = []\n    for i in range(len(list1)):\n        newlist.append(list1[i])\n    newlist.sort()\n    mode = newlist[-1]\n    return mode\ndef quant_95(list1):\n    '''\n    Write a function that takes in a list and returns the 95th percentile of the list.\n    '''\n    list1.sort()\n    list1.reverse()\n    quant = (len(list1) - 1)*5/100\n    return list1[int(quant)]\ndef quant_90(list1):\n    '''\n    Write a function that takes in a list and returns the 90th percentile of the list.\n    '''\n    list1.sort()\n    list1.reverse()\n    quant = (len(list1) - 1)*9/100\n    return list1[int(quant)]\ndef quant_99(list1):\n    '''\n    Write a function that takes in a list and returns the 99th percentile of the list.\n    '''\n    list1.sort()\n    list1.reverse()\n    quant = (len(list1) - 1)*1/100\n    return list1[int(quant)]\ndef remove_ele(list1,x):\n    '''\n    Write a function that takes in a list and a number and returns a new list that removes all instances of the number from the list.\n    '''\n    newlist = []\n    for i in range(len(list1)):\n        num = list1[i]\n        if num!= x:\n            newlist.append(num)\n    return newlist\ndef occur_count(list1):\n    '''\n    Write a function that takes in a list and returns a dictionary whose keys are the unique items in the list and whose values are the number of times each unique item occurs in the list.\n    '''\n    newdict = {}\n    for i in range(len(list1)):\n        num = list1[i]\n        if num in newdict:\n            newdict[num] += 1\n        else:\n            newdict[num] = 1\n    return newdict\ndef occur_count_arr(arr):\n    '''\n    Write a function that takes in a list of integers and returns a dictionary whose keys are the unique items in the list and whose values are the number of times each unique item occurs in the list.\n    '''\n    newdict = {}\n    for i in range(len(arr)):\n        num = arr[i]\n        if num in newdict:\n            newdict[num] += 1\n        else:\n            newdict[num] = 1\n    return newdict\ndef index_of_max(list1):\n    '''\n    Write a function that takes in a list and returns the index of the maximum value in the list.\n    '''\n    max = list1[0]\n    max_index = 0\n    for i in range(len(list1)):\n        num = list1[i]\n        if num > max:\n            max = num\n            max_index = i\n    return max_index\ndef index_of_min(list1):\n    '''\n    Write a function that takes in a list and returns the index of the minimum value in the list.\n    '''\n    min = list1[0]\n    min_index = 0\n    for i in range(len(list1)):\n        num = list1[i]\n        if num < min:\n            min = num\n            min_index = i\n    return min_index\ndef index_of_max_arr(arr):\n    '''\n    Write a function that takes in a list of integers and returns the index of the maximum value in the list.\n    '''\n    max = arr[0]\n    max_index = 0\n    for i in range(len(arr)):\n        num = arr[i]\n        if num > max:\n            max = num\n            max_index = i\n    return max_index\ndef index_of_min_arr(arr):\n    '''\n    Write a function that takes in a list of integers and returns the index of the minimum value in the list.\n    '''\n    min = arr[0]\n    min_index = 0\n    for i in range(len(arr)):\n        num = arr[i]\n        if num < min:\n            min = num\n            min_index = i\n    return min_index\ndef swap_ele(list1,x,y):\n    '''\n    Write a function that takes in a list and two indices and swaps the values at those indices in the list.\n    '''\n    temp = list1[x]\n    list1[x] = list1[y]\n    list1[y] = temp\n    return list1\ndef swap_ele_arr(arr,x,y):\n    '''\n    Write a function that takes in a list and two indices and swaps the values at those indices in the list.\n    '''\n    temp = arr[x]\n    arr[x] = arr[y]\n    arr[y] = temp\n    return arr\ndef selection_sort(list1):\n    '''\n    Write a function that takes in a list and returns a new list sorted in ascending order using the selection sort algorithm.\n    '''\n    newlist = []\n    for i in range(len(list1)):\n        min_index = i\n        min_val = list1[min_index]\n        for j in range(i+1,len(list1)):\n            num = list1[j]\n            if num < min_val:\n                min_val = num\n                min_index = j\n        newlist.append(list1[min_index])\n        list1.remove(list1[min_index])\n    return newlist\ndef insertion_sort(list1):\n    '''\n    Write a function that takes in a list and returns a new list sorted in ascending order using the insertion sort algorithm.\n    '''\n    newlist = []\n    for i in range(len(list1)):\n        num = list1[i]\n        j = i - 1\n        while j >= 0 and num < list1[j]:\n            list1[j + 1] = list1[j]\n            j -= 1\n        list1[j + 1] = num\n    return newlist\ndef insertion_sort_arr(arr):\n    '''\n    Write a function that takes in a list and returns a new list sorted in ascending order using the insertion sort algorithm.\n    '''\n    newlist = []\n    for i in range(len(arr)):\n        num = arr[i]\n        j = i - 1\n        while j >= 0 and num < arr[j]:"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if not list1:\n        return []\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap,list1[i])\n    for j in range(n,len(list1)):\n        if max_heap[0] < list1[j]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap,list1[j])\n    return max_heap\ndef sort_list(list1):\n    '''\n    Write a function that takes in a list of integers and returns a list of sorted integers in increasing order.\n    '''\n    if len(list1) == 0:\n        return []\n    for i in range(0,len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i] > list1[j]:\n                list1[i],list1[j] = list1[j],list1[i]\n    return list1\ndef generate_list(length):\n    '''\n    Write a function that takes in an integer length and returns a list of consecutive integers from 0 to length-1.\n    '''\n    if length < 0:\n        return []\n    elif length == 0:\n        return [0]\n    else:\n        return range(length)\ndef swap_nums(list1,n):\n    '''\n    Write a function that takes in a list of integers and two integers i and j and returns a list with the integers from the i-th to the j-th element swapped.\n    '''\n    if n < 0 or n > len(list1)-1:\n        return list1\n    else:\n        temp = list1[n]\n        list1[n] = list1[n+1]\n        list1[n+1] = temp\n        return list1\ndef count_num(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns the number of times n occurs in the list.\n    '''\n    if list1:\n        if list1[0] == n:\n            return 1 + count_num(list1[1:],n)\n        else:\n            return count_num(list1[1:],n)\n    else:\n        return 0\ndef most_freq(list1):\n    '''\n    Write a function that takes in a list and returns the most frequent element. If two elements occur the same number of times, return the element that appeared earliest.\n    '''\n    if not list1:\n        return []\n    else:\n        count = 0\n        max_count = count\n        max_element = list1[0]\n        for i in range(len(list1)):\n            curr_count = count_num(list1,list1[i])\n            if curr_count > max_count:\n                max_count = curr_count\n                max_element = list1[i]\n        return max_element\ndef binary_search(list1,n):\n    '''\n    Write a function that takes in a sorted list and an integer n and returns the index of the integer n if it is in the list and -1 if it is not.\n    '''\n    if not list1:\n        return -1\n    else:\n        if list1[0] == n:\n            return 0\n        elif list1[-1] < n:\n            return -1\n        else:\n            low = 0\n            high = len(list1)-1\n            while low <= high:\n                mid = int((low+high)/2)\n                if list1[mid] == n:\n                    return mid\n                elif list1[mid] < n:\n                    low = mid + 1\n                else:\n                    high = mid -1\n    return -1\ndef reverse_num(num):\n    '''\n    Write a function that takes in a number and returns a number with the digits in reverse order.\n    '''\n    if num == 0:\n        return 0\n    else:\n        return reverse_num(num//10) * 10 + num%10\ndef is_anagram(str1,str2):\n    '''\n    Write a function that takes in two strings and returns True if they are anagrams. An anagram is a rearrangement of letters, such that two strings can be written using the same letters.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        str1 = str1.lower()\n        str2 = str2.lower()\n        for i in range(len(str1)):\n            if str1[i] in str2:\n                str2 = str2.replace(str1[i],\"\",1)\n        return not str2\ndef LCS(str1,str2):\n    '''\n    Write a function that takes in two strings and returns their longest common subsequence.\n    '''\n    if not str1 or not str2:\n        return \"\"\n    else:\n        lcs = [[0 for i in range(len(str1))] for j in range(len(str2))]\n        for i in range(len(str2)):\n            for j in range(len(str1)):\n                if str1[j] == str2[i]:\n                    if i == 0 or j == 0:\n                        lcs[i][j] = 1\n                    else:\n                        lcs[i][j] = lcs[i-1][j-1] + 1\n                else:\n                    lcs[i][j] = max(lcs[i-1][j],lcs[i][j-1])\n        return lcs[-1][-1]\ndef top_K_words(str1,str2,n):\n    '''\n    Write a function that takes in three strings and returns a list of the top n words that are common to all the strings.\n    '''\n    if not str1 or not str2:\n        return []\n    else:\n        str1 = str1.lower()\n        str2 = str2.lower()\n        common_words = []\n        for i in range(len(str1)):\n            if str1[i] in str2:\n                common_words.append(str1[i])\n        common_words = set(common_words)\n        for i in range(len(str2)):\n            if str2[i] in str1:\n                common_words.add(str2[i])\n        common_words = list(common_words)\n        common_words.sort(reverse = True)\n        common_words = common_words[:n]\n        return common_words\ndef reverse_str(str1):\n    '''\n    Write a function that takes in a string and returns a new string that is the reverse of the original string.\n    '''\n    if not str1:\n        return \"\"\n    else:\n        return str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome and False if it is not.\n    '''\n    if not str1:\n        return True\n    else:\n        return str1[0] == str1[-1] and is_palindrome(str1[1:-1])\ndef reverse_words(str1):\n    '''\n    Write a function that takes in a string and returns a new string that is the reverse of the original string, with all whitespace characters removed.\n    '''\n    if not str1:\n        return \"\"\n    else:\n        return \" \".join(reverse_str(str1.strip()))\ndef remove_spaces(str1):\n    '''\n    Write a function that takes in a string and returns a new string with all the whitespace characters removed.\n    '''\n    if not str1:\n        return \"\"\n    else:\n        return str1.strip()\ndef palindrome_perm(list1):\n    '''\n    Write a function that takes in a list and returns a list of all permutations of the elements in the list that are palindromes.\n    '''\n    if not list1:\n        return []\n    else:\n        result = []\n        for i in range(len(list1)):\n            if is_palindrome(list1[i]):\n                result.append(list1[i])\n        return result\ndef larges"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,list1[i])\n    for i in range(n,len(list1)):\n        heapq.heappushpop(heap,list1[i])\n    return heap\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    return list1[len(list1)-n:]\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n    \ndef smal_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    return heapq.nsmallest(n,list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # this function first sorts the list in ascending order\n    # and then removes the first n elements from the list.\n    # returns the largest n items in the list.\n    list1.sort()\n    return list1[n:]\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2 = heapq.nlargest(n,list1)\n    return list2\ndef larg_snum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    list2 = heapq.nsmallest(n,list1)\n    return list2\ndef sort_by_len(list1):\n    '''\n    Write a function that takes in a list and returns a sorted version of that list by length.\n    '''\n    list2 = sorted(list1,key = len)\n    return list2\ndef sort_by_len2(list1):\n    '''\n    Write a function that takes in a list and returns a sorted version of that list by length.\n    '''\n    list2 = sorted(list1,key = lambda x:len(x))\n    return list2\ndef group_by_longest(list1):\n    '''\n    Write a function that takes in a list and returns a list of lists with the elements of the original list broken into groups by the length of the elements.\n    '''\n    list2 = {}\n    for x in list1:\n        if len(x) in list2:\n            list2[len(x)].append(x)\n        else:\n            list2[len(x)] = [x]\n    return list2\ndef group_by_longest2(list1):\n    '''\n    Write a function that takes in a list and returns a list of lists with the elements of the original list broken into groups by the length of the elements.\n    '''\n    list2 = defaultdict(list)\n    for x in list1:\n        list2[len(x)].append(x)\n    return list2\ndef build_dict(list1):\n    '''\n    Write a function that takes in a list and returns a dictionary with the number of occurances of each element in the list as the value and the element as the key.\n    '''\n    list2 = {}\n    for x in list1:\n        if x in list2:\n            list2[x] += 1\n        else:\n            list2[x] = 1\n    return list2\ndef build_dict2(list1):\n    '''\n    Write a function that takes in a list and returns a dictionary with the number of occurances of each element in the list as the value and the element as the key.\n    '''\n    list2 = defaultdict(int)\n    for x in list1:\n        list2[x] += 1\n    return list2\ndef find_duplicates(list1):\n    '''\n    Write a function that takes in a list and returns a list of the elements that appear more than once.\n    '''\n    list2 = []\n    for x in list1:\n        if list1.count(x) > 1:\n            list2.append(x)\n    return list2\ndef find_duplicates2(list1):\n    '''\n    Write a function that takes in a list and returns a list of the elements that appear more than once.\n    '''\n    list2 = set()\n    for x in list1:\n        if list1.count(x) > 1:\n            list2.add(x)\n    return list2\ndef find_duplicates3(list1):\n    '''\n    Write a function that takes in a list and returns a list of the elements that appear more than once.\n    '''\n    list2 = []\n    for x in list1:\n        if list1.count(x) > 1:\n            list2.append(x)\n    return list2\ndef find_duplicates4(list1):\n    '''\n    Write a function that takes in a list and returns a list of the elements that appear more than once.\n    '''\n    list2 = set()\n    for x in list1:\n        if list1.count(x) > 1:\n            list2.add(x)\n    return list2\ndef find_duplicates5(list1):\n    '''\n    Write a function that takes in a list and returns a list of the elements that appear more than once.\n    '''\n    list2 = []\n    for x in list1:\n        if list1.count(x) > 1:\n            list2.append(x)\n    return list2\ndef find_duplicates6(list1):\n    '''\n    Write a function that takes in a list and returns a list of the elements that appear more than once.\n    '''\n    list2 = []\n    for x in list1:\n        if list1.count(x) > 1:\n            list2.append(x)\n    return list2\ndef find_duplicates7(list1):\n    '''\n    Write a function that takes in a list and returns a list of the elements that appear more than once.\n    '''\n    list2 = []\n    for x in list1:\n        if list1.count(x) > 1:\n            list2.append(x)\n    return list2\ndef find_duplicates8(list1):\n    '''\n    Write a function that takes in a list and returns a list of the elements that appear more than once.\n    '''\n    list2 = set()\n    for x in list1:\n        if list1.count(x) > 1:\n            list2.add(x)\n    return list2\ndef find_duplicates9(list1):\n    '''\n    Write a function that takes in a list and returns a list of the elements that appear more than once.\n    '''\n    list2 = []\n    for x in list1:\n        if list1.count(x) > 1:\n            list2.append(x)\n    return list2\ndef find_duplicates10(list1):\n    '''\n    Write a function that takes in a list and returns a list of the elements that appear more than once.\n    '''\n    list2 = set()\n    for x in list1:\n        if list1.count(x) > 1:\n            list2.add(x)\n    return list2\ndef find_duplicates11(list1):\n    '''\n    Write a function that takes in a list and returns a list of the elements that appear more than once.\n    '''\n    list2 = []\n    for x in list1:\n        if list1.count(x) > 1:\n            list2.append(x)\n    return list2\ndef find_duplicates12(list1):\n    '''\n    Write a function that takes in a list and returns a list of the elements that appear more than once.\n    '''\n    list2 = []\n    for x in list1:\n        if list1.count(x) > 1:\n            list2.append(x)\n    return list2\ndef find_duplicates13(list1):\n    '''\n    Write a function that takes in a list and returns a list of the elements that appear more than once.\n    '''\n    list2 = []\n    for x in list1:\n        if list1.count(x) > 1:\n            list2.append(x)\n    return list2\ndef find_duplicates14(list1):\n    '''\n    Write a function that takes in a list and returns a list of the elements that appear more than once.\n    '''\n    list2 = []\n    for x in list1:\n        if list1.count(x) > 1:\n            list2.append(x)\n    return list2\ndef find_duplicates15(list1):\n    '''\n    Write a function that takes in a list and returns a list of the elements that appear more than once.\n    '''\n    list2 = []\n    for x in list1:\n        if list1.count(x) > 1:\n            list2.append(x)\n    return list2\ndef find_duplicates16(list1):\n    '''\n    Write a function that takes in a list and returns a list of the elements that appear more than once.\n    '''\n    list2 = []\n    for x in list1:\n        if list1.count(x) > 1:\n            list2.append(x)\n    return list2\ndef find_duplicates17(list1):\n    '''\n    Write a function that takes in a list and returns a list of the elements that appear more than once.\n    '''\n    lis"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # return pi*r*(r+h)\n    return 2*pi*r*(r+h)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.1415926535\n    return pi*(r**2)+(h**2)/4.\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    # Define the surface area of the cylinder\n    S = np.pi*r**2 + 2*(np.pi*r)*h + (np.pi*r**2)*h/2\n    \n    return S\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*(r**2)*2+(r*h)+pi*h*2\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    area_cyl = (math.pi*r**2*h) + (math.pi*(r+h)**2)\n    return area_cyl\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14159265358979\n    return (pi * r**2 + pi * h * r)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #from math import pi,sqrt\n    #a = pi*r*2\n    #b = r*h*2\n    #c = r*(h**2)/4\n    #print(a+b+c)\n    \n    #c = (r**2)*h\n    #d = (r**2)*h*2\n    #e = (r**2)*(h**2)/4\n    #print(c+d+e)\n    #print(r**2*(h**2)/4)\n    \n    from math import pi,sqrt\n    #a = pi*r*2\n    #b = r*h*2\n    #c = r*(h**2)/4\n    #print(a+b+c)\n    c = (r**2)*h\n    d = (r**2)*h*2\n    e = (r**2)*(h**2)/4\n    print(c+d+e)\n    return None\n    \n    \n    \ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    from math import pi\n    a = 4*pi*r**2\n    b = 4*pi*r**2*r\n    c = 4*pi*r**2*r*2\n    print(a+b+c)\n    \n    return None\n    \n    \ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    from math import pi\n    a = 4*pi*r**2\n    b = 4*pi*r**2*r\n    c = 4*pi*r**2*r*2\n    print(a+b+c)\n    return None\n    \ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    from math import pi\n    a = 4*pi*r**2\n    b = 4*pi*r**2*r\n    c = 4*pi*r**2*r*2\n    print(a+b+c)\n    return None\n    \ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    from math import pi\n    a = 4*pi*r**2\n    b = 4*pi*r**2*r\n    c = 4*pi*r**2*r*2\n    print(a+b+c)\n    return None\n    \ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    from math import pi\n    a = 4*pi*r**2\n    b = 4*pi*r**2*r\n    c = 4*pi*r**2*r*2\n    print(a+b+c)\n    return None\n    \ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    from math import pi\n    a = 4*pi*r**2\n    b = 4*pi*r**2*r\n    c = 4*pi*r**2*r*2\n    print(a+b+c)\n    return None\n    \ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    from math import pi\n    a = 4*pi*r**2\n    b = 4*pi*r**2*r\n    c = 4*pi*r**2*r*2\n    print(a+b+c)\n    return None\n    \ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    from math import pi\n    a = 4*pi*r**2\n    b = 4*pi*r**2*r\n    c = 4*pi*r**2*r*2\n    print(a+b+c)\n    return None\n    \ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    from math import pi\n    a = 4*pi*r**2\n    b = 4*pi*r**2*r\n    c = 4*pi*r**2*r*2\n    print(a+b+c)\n    return None\n    \ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    from math import pi\n    a = 4*pi*r**2\n    b = 4*pi*r**2*r\n    c = 4*pi*r**2*r*2\n    print(a+b+c)\n    return None\n    \ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    from math import pi\n    a = 4*pi*r**2\n    b = 4*pi*r**2*r\n    c = 4*pi*r**2*r*2\n    print(a+b+c)\n    return None\n    \ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    from math import pi\n    a = 4*pi*r**2\n    b = 4*pi*r**2*r\n    c = 4*pi*r**2*r*2\n    print(a+b+c)\n    return None\n    \ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    from math import pi\n    a = 4*pi*r**2\n    b = 4*pi*r**2*r\n    c = 4*pi*r**2*r*2\n    print(a+b+c)\n    return None\n    \ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    from math import pi\n    a = 4*pi*r**2\n    b = 4*pi*r**2*r\n    c = 4*pi*r**2*r*2\n    print(a+b+c)\n    return None\n    \ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    from math import pi\n    a = 4*pi*r**2\n    b = 4*pi*r**2*r\n    c = 4*pi*r**2*r*2\n    print(a+b+c)\n    return None\n    \ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    from math import pi\n    a = 4*pi*r**2\n    b = 4*pi*r**2*r\n    c = 4*pi*r**2*r*2\n    print(a+b+c)\n    return None\n    \ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    from math import pi\n    a = 4*pi*r**2\n    b = 4*pi*r**2*r\n    c = 4*pi*r**2*r*2\n    print(a+b+c)\n    return None\n    \ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    from math import pi\n    a = 4*pi*r**2\n    b = 4*pi*r**2*r\n    c = 4*pi*r**2*r*2\n    print(a+b+c)\n    return None\n    \ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    from math import pi\n    a "
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14159265358979\n    R = r\n    h = h\n    area = (2 * pi * R**2) + (2 * pi * R * h)\n    return area\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*r**2*h/4\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    \n    assert len(l) == 3, \"The length of a side of a cube must be 3.\"\n    assert all(isinstance(i, int) for i in l), \"All sides of a cube must be integers.\"\n    assert all(i >= 0 for i in l), \"All sides of a cube must be greater than 0.\"\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    assert type(l) == int and l>= 0, 'Enter a positive integer'\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    from math import pow\n    return pow(l, 3)\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    \n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n - 1)\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n & 0x55555555\n    n = n | (n >> 1)\n    n = n & 0x33333333\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0x55555555\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    x = n & 0x5555555555555555\n    x = x >> 1\n    return x\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return bin(n & 0xAAAAAAAA)[2:].count('1')\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n & 1 == 0:\n        return even_bit_set_number(n/2)\n    else:\n        return even_bit_set_number(n/2) * 3 + 2\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    print 'n=',n,'n&1=',n&1\n    return n^1\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    b = n & 0x5555555555555555\n    return b | ((b >> 1) & 0x5555555555555555) \n    \ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    b = n & 0x5555555555555555\n    return b | ((b >> 1) & 0x5555555555555555) \n    \ndef swap_bits_between_two_numbers(x, y): \n    '''\n    Write a python function to swap bits between two numbers.\n    '''\n    b = x ^ y\n    return b ^ (b & (b-1))\n    \ndef swap_bits_between_two_numbers(x, y): \n    '''\n    Write a python function to swap bits between two numbers.\n    '''\n    b = x ^ y\n    return b ^ (b & (b-1))\n    \ndef compare_two_numbers(x, y): \n    '''\n    Write a python function to compare two numbers.\n    '''\n    b = x < y\n    return b\n    \ndef compare_two_numbers(x, y): \n    '''\n    Write a python function to compare two numbers.\n    '''\n    b = x < y\n    return b\n    \ndef swap_bits_between_two_numbers(x, y): \n    '''\n    Write a python function to swap bits between two numbers.\n    '''\n    b = x ^ y\n    return b ^ (b & (b-1))\n    \ndef swap_bits_between_two_numbers(x, y): \n    '''\n    Write a python function to swap bits between two numbers.\n    '''\n    b = x ^ y\n    return b ^ (b & (b-1))\n    \ndef bitwise_and_two_numbers(x, y): \n    '''\n    Write a python function to bitwise and two numbers.\n    '''\n    b = x & y\n    return b\n    \ndef bitwise_and_two_numbers(x, y): \n    '''\n    Write a python function to bitwise and two numbers.\n    '''\n    b = x & y\n    return b\n    \ndef set_all_bits_to_one(x): \n    '''\n    Write a python function to set all bits to one.\n    '''\n    b = ~x & 0x5555555555555555\n    return b | ((b >> 1) & 0x5555555555555555) \n    \ndef set_all_bits_to_one(x): \n    '''\n    Write a python function to set all bits to one.\n    '''\n    b = ~x & 0x5555555555555555\n    return b | ((b >> 1) & 0x5555555555555555) \n    \ndef compare_two_numbers(x, y): \n    '''\n    Write a python function to compare two numbers.\n    '''\n    b = x == y\n    return b\n    \ndef compare_two_numbers(x, y): \n    '''\n    Write a python function to compare two numbers.\n    '''\n    b = x == y\n    return b\n    \ndef swap_bits_between_two_numbers(x, y): \n    '''\n    Write a python function to swap bits between two numbers.\n    '''\n    b = x ^ y\n    return b ^ (b & (b-1))\n    \ndef swap_bits_between_two_numbers(x, y): \n    '''\n    Write a python function to swap bits between two numbers.\n    '''\n    b = x ^ y\n    return b ^ (b & (b-1))\n    \ndef bitwise_and_two_numbers(x, y): \n    '''\n    Write a python function to bitwise and two numbers.\n    '''\n    b = x & y\n    return b\n    \ndef bitwise_and_two_numbers(x, y): \n    '''\n    Write a python function to bitwise and two numbers.\n    '''\n    b = x & y\n    return b\n    \ndef set_all_bits_to_one(x): \n    '''\n    Write a python function to set all bits to one.\n    '''\n    b = ~x & 0x5555555555555555\n    return b | ((b >> 1) & 0x5555555555555555) \n    \ndef set_all_bits_to_one(x): \n    '''\n    Write a python function to set all bits to one.\n    '''\n    b = ~x & 0x5555555555555555\n    return b | ((b >> 1) & 0x5555555555555555) \n    \ndef compare_two_numbers(x, y): \n    '''\n    Write a python function to compare two numbers.\n    '''\n    b = x!= y\n    return b\n    \ndef compare_two_numbers(x, y): \n    '''\n    Write a python function to compare two numbers.\n    '''\n    b = x!= y\n    return b\n    \ndef swap_bits_between_two_numbers(x, y): \n    '''\n    Write a python function to swap bits between two numbers.\n    '''\n    b = x ^ y\n    return b ^ (b & (b-1))\n    \ndef swap_bits_between_two_numbers(x, y): \n    '''\n    Write a python function to swap bits between two numbers.\n    '''\n    b = x ^ y\n    return b ^ (b & (b-1))\n    \ndef bitwise_and_two_numbers(x, y): \n    '''\n    Write a python function to bitwise and two numbers.\n    '''\n    b = x & y\n    return b\n    \ndef bitwise_and_two_numbers(x, y): \n    '''\n    Write a python function to bitwise and two numbers.\n    '''\n    b = x & y\n    return b\n    \ndef set_all_bits_to_one(x): \n    '''\n    Write a python function to set all bits to one.\n    '''\n    b = ~x & 0x5555555555555555\n    return b | ((b >> 1) & 0x5555555555555555) \n    \ndef set_all_bits_to_one(x): \n    '''\n    Write a python function to set all bits to one.\n    '''\n    b = ~x & 0x5555555555555555\n    return b | ((b >> 1) & 0x5555555555555555) \n    \ndef compare_two_numbers(x, y): \n    '''\n    Write a python function to compare two numbers.\n    '''\n    b = x < y\n    return b\n    \ndef compare_two_numbers(x, y): \n    '''\n    Write a python function to compare two numbers.\n    '''\n    b = x < y\n    return b\n    \ndef swap_bits_between_two_numbers(x, y): \n    '''\n    Write a python function to swap bits between two numbers.\n    '''\n    b = x ^ y\n    return b ^ (b & (b-1))\n    \ndef swap_bits_between_two_numbers(x, y): \n    '''\n    Write a python function to swap bits between two numbers.\n    '''\n    b = x ^ y\n    return b ^ (b & (b-1))\n    \ndef bitwise_and_two_numbers(x, y): \n    '''\n    Write a python function to bitwise and two numbers.\n    '''\n    b = x & y\n    return b\n    \ndef bitwise_and_two_numbers(x, y): \n    '''\n    Write a python function to bitwise and two numbers.\n    '''\n    b = x & y\n    return b\n    \ndef set_all_bits_to_one(x): \n    '''\n    Write a python function to set all bits to one.\n    '''\n    "
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    \n    # Converting the number into binary string.\n    binary_str = bin(n)[2:] \n    \n    # Declaring the variable with all zeros.\n    final_result = 0\n    \n    # Looping through the bits to set 1 on the even bits.\n    for i in range(len(binary_str)):\n        if i % 2 == 0: \n            if binary_str[i] == '1':\n                final_result = final_result + 2**(len(binary_str) - i - 1)\n    \n    # Returning the result.\n    return final_result\n    \n    \ndef sum_of_binary_string(a, b): \n    '''\n    Write a python function to return the sum of two binary strings.\n    '''\n    \n    # Converting the numbers into binary strings.\n    a = bin(a)[2:] \n    b = bin(b)[2:]\n    \n    # If the lengths of the string are not equal, then pad the shorter string with zeros.\n    if len(a) > len(b):\n        b = '0' * (len(a) - len(b)) + b\n    elif len(b) > len(a):\n        a = '0' * (len(b) - len(a)) + a\n    \n    # Declaring the variable with the result.\n    final_result = 0\n    \n    # Looping through the bits of the sum to add the carry.\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            final_result = final_result + 2**(len(a) - i - 1)\n        else:\n            final_result = final_result + 2**(len(a) - i - 1) + 1\n            \n    # Returning the result.\n    return final_result\n    \n    \ndef is_pallindrome(n): \n    '''\n    Write a python function to check if a given number is a palindrome number.\n    '''\n    \n    # Converting the number into binary string.\n    binary_str = bin(n)[2:]\n    \n    # Declaring the variable with the result.\n    final_result = 1\n    \n    # Looping through the bits of the sum to add the carry.\n    for i in range(len(binary_str)//2):\n        if binary_str[i] == binary_str[-1*(i+1)]:\n            final_result = final_result + 2**(len(binary_str) - 1 - i)\n        else:\n            final_result = final_result + 2**(len(binary_str) - 1 - i) + 1\n    \n    # Returning the result.\n    return final_result\n    \n    \ndef n_power_n(n, m): \n    '''\n    Write a python function to raise a given number to the power of n.\n    '''\n    \n    # Converting the number into binary string.\n    binary_str = bin(n)[2:]\n    \n    # Declaring the variable with the result.\n    final_result = 1\n    \n    # Looping through the bits of the sum to add the carry.\n    for i in range(len(binary_str)):\n        final_result = final_result * 2**(len(binary_str) - i - 1)\n        \n    # Returning the result.\n    return final_result\n    \n    \ndef get_binary_string_in_reverse(n): \n    '''\n    Write a python function to return the binary string of a given number in reverse order.\n    '''\n    \n    # Converting the number into binary string.\n    binary_str = bin(n)[2:]\n    \n    # Declaring the variable with the result.\n    final_result = ''\n    \n    # Looping through the bits of the sum to add the carry.\n    for i in range(len(binary_str)):\n        final_result = final_result + binary_str[-1*(i+1)]\n    \n    # Returning the result.\n    return final_result\n    \n    \ndef is_pandigital(n): \n    '''\n    Write a python function to check if a given number is pandigital number.\n    '''\n    \n    # Converting the number into a string.\n    str_n = str(n)\n    \n    # Declaring the variable with the result.\n    final_result = 1\n    \n    # Looping through the number to check if the digits are consecutive.\n    for i in range(1, len(str_n) + 1):\n        if i in str_n:\n            final_result = final_result + 1\n        else:\n            final_result = final_result\n    \n    # Returning the result.\n    if final_result == len(str_n) + 1:\n        return 1\n    else:\n        return 0\n    \n    \ndef is_powerful_num(n): \n    '''\n    Write a python function to check if a given number is a powerful number.\n    '''\n    \n    # Converting the number into a string.\n    str_n = str(n)\n    \n    # Declaring the variable with the result.\n    final_result = 1\n    \n    # Looping through the number to check if the digits are consecutive.\n    for i in range(1, len(str_n) + 1):\n        if i in str_n:\n            final_result = final_result * 2\n        else:\n            final_result = final_result\n    \n    # Returning the result.\n    if final_result > n:\n        return 1\n    else:\n        return 0\n    \n    \ndef get_pandigital_prime(start, end): \n    '''\n    Write a python function to return the first pandigital prime number from a given start to an end range.\n    '''\n    \n    # Declaring the variable with the result.\n    final_result = 0\n    \n    # Looping through the numbers to check if the digits are consecutive.\n    for i in range(start, end + 1):\n        if is_powerful_num(i) == 1:\n            final_result = i\n            break\n    \n    # Returning the result.\n    return final_result\n    \n    \ndef consecutive_prime_numbers(start, end): \n    '''\n    Write a python function to return the first n consecutive prime numbers from a given start to an end range.\n    '''\n    \n    # Declaring the variable with the result.\n    final_result = []\n    \n    # Looping through the numbers to check if the digits are consecutive.\n    for i in range(start, end + 1):\n        if is_powerful_num(i) == 1:\n            final_result.append(i)\n    \n    # Returning the result.\n    return final_result\n    \n    \ndef is_string_permutation(a, b): \n    '''\n    Write a python function to check if a string is a permutation of another string.\n    '''\n    \n    # Converting the numbers into binary strings.\n    a = bin(a)[2:] \n    b = bin(b)[2:]\n    \n    # If the lengths of the string are not equal, then pad the shorter string with zeros.\n    if len(a) > len(b):\n        b = '0' * (len(a) - len(b)) + b\n    elif len(b) > len(a):\n        a = '0' * (len(b) - len(a)) + a\n    \n    # Declaring the variable with the result.\n    final_result = 0\n    \n    # Looping through the bits of the sum to add the carry.\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            final_result = final_result + 1\n    \n    # Returning the result.\n    return final_result\n    \n    \ndef is_anagram(a, b): \n    '''\n    Write a python function to check if two given strings are anagrams.\n    '''\n    \n    # Declaring the variable with the result.\n    final_result = 0\n    \n    # Converting the numbers into binary strings.\n    a = bin(a)[2:] \n    b = bin(b)[2:]\n    \n    # If the lengths of the string are not equal, then pad the shorter string with zeros.\n    if len(a) > len(b):\n        b = '"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & ((n-1) ^ n)\n    \ndef even_bit_set_number2(n): \n    return n ^ n >> 1\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)\n    \ndef get_top_three(lst):\n    '''\n    Write a function that takes in a list and returns a list of the top three items in the list.\n    '''\n    return lst[0:3]\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n    \ndef most_frequent_element(test_list):\n    '''\n    Write a function that takes in a list of integers and returns the number that occurs most frequently.\n    '''\n    return max(test_list, key=test_list.count)\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for each_tuple in test_list:\n        count_dict[each_tuple] = 0\n    for each_tuple in test_list:\n        count_dict[each_tuple] += 1\n    return count_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for x in test_list:\n        if x[0] not in occurences:\n            occurences[x[0]] = 1\n        else:\n            occurences[x[0]] += 1\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for i in test_list:\n        if tuple(i) in d:\n            d[tuple(i)] += 1\n        else:\n            d[tuple(i)] = 1\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dict = {}\n    for item in test_list:\n        if item in dict:\n            dict[item] +=1\n        else:\n            dict[item] = 1\n    return dict\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    occur = {}\n    for element in test_list:\n        if element not in occur:\n            occur[element] = 1\n        else:\n            occur[element] += 1\n    return occur\n    \n    # if isinstance(test_list, list) and len(test_list) > 0:\n    #     test_list = [tuple(element) for element in test_list]\n    #     occur = {}\n    #     for element in test_list:\n    #         if element not in occur:\n    #             occur[element] = 1\n    #         else:\n    #             occur[element] += 1\n    #     return occur\n    # else:\n    #     return 'Incorrect input.'\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dict = {}\n    for tup in test_list:\n        if tup in dict:\n            dict[tup] += 1\n        else:\n            dict[tup] = 1\n    return dict\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for val in test_list:\n        if val in d:\n            d[val] += 1\n        else:\n            d[val] = 1\n    return d\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    str_length = len(str)\n    if str_length == 0:\n        return 0\n    if str_length == 1:\n        return 1\n    # temp1 = 0\n    # temp2 = 0\n    # if str[0] == str[1]:\n    #     temp1 += 1\n    # if str[-1] == str[-2]:\n    #     temp2 += 1\n    # temp = temp1 + temp2\n    # if temp == str_length:\n    #     return 1\n    # else:\n    #     return temp\n    return str.count(str[0]) + number_of_substrings(str[1:])\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i:j + 1]!= '':\n                count += 1\n    return count\n    \nprint number_of_substrings('abcd') # 0\nprint number_of_substrings('abcdabc') # 3\nprint number_of_substrings('abc') # 3\nprint number_of_substrings('a') # 0\nprint number_of_substrings('') # 0\nprint number_of_substrings('1') # 0\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    list_of_substrings = []\n    \n    for i in range(0, len(str)): \n        for j in range(0, len(str)-i+1):\n            list_of_substrings.append(str[i:len(str)-j+i])\n    return list_of_substrings\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            sub = str[i:j]\n            if sub and not sub.isspace():\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    len_str = len(str)\n    numsub = 0\n    for i in range(len_str):\n        for j in range(i+1, len_str+1):\n            if str[i:j]!= '':\n                numsub += 1\n    return numsub\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(0, len(str)):\n        if str[i]!='':\n            count += 1\n        else:\n            if str[i + 1]!='':\n                count += 1\n            else:\n                break\n    return count\n    \n    \nprint(number_of_substrings(\"Hello World\"))\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)+1):\n            if j-i >0:\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    dict1 = {}\n    for i in range(len(str)):\n        temp = ''\n        for j in range(i, len(str)):\n            temp += str[j]\n            if temp in dict1:\n                dict1[temp] += 1\n            else:\n                dict1[temp] = 1\n    count = 0\n    for i in dict1:\n        count += dict1[i]\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    #return len([str[i:j] for i in range(len(str)) for j in range(i, len(str)+1) if str[i:j]!= ''])\n    return len([str[i:j] for i in range(len(str)) for j in range(i, len(str)+1)])\n    \ndef palindrome_permutation(str):\n    '''\n    Write a python function to check if a string is a permutation of a palindrome. \n    '''\n    return len(str) == len(set(str)) and str == str[::-1]\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    count = 0\n    for i in xrange(len(str)):\n        for j in xrange(i, len(str)):\n            if str[i:j + 1]!= '':\n                count += 1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return math.factorial(n) / (math.factorial(m-n) * math.factorial(n-1))\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total = 0\n    for i in range(1, m):\n        total += 1 + ((m - 1) // i)\n    return total\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return m**n - m**(n-1) - 1\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < n:\n        return 0\n    elif m == n:\n        return 1\n    else:\n        return get_total_number_of_sequences(m-1,n) + get_total_number_of_sequences(m,n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total = 0\n    for i in range(1,m+1):\n        total += math.factorial(m+n-1)/(math.factorial(m)*math.factorial(n))\n    return total\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # get the difference between m and n\n    # note that since n is not inclusive, we have to have 2*(n-1) -1 possible values of n\n    # by the formula: 2*(n-1) - 1 = n - 1 + m - 2*n\n    difference = n - 1 + m - 2*n\n    \n    # return the difference\n    return difference\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0:\n        return 1\n    elif m < n:\n        return 0\n    else:\n        return get_total_number_of_sequences(m, n-1) + get_total_number_of_sequences(m-n, n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # if m is less than n:\n    #     return 0\n    # else:\n    #     return get_total_number_of_sequences(m, n-1) + get_total_number_of_sequences(m-n, n-1)\n    \n    # O(n) solution\n    count = 0\n    while n > 0:\n        if 2*m > n:\n            count += n\n            n = 0\n        else:\n            count += n\n            m -= n\n            n = 0\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return m * n\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total = 0\n    for i in range(n,m):\n        total += (m*2-i)//(i+1)\n    return total\n    \n    "
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # base case\n    if len(list1) == 1:\n        return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if not list1:\n        return list2\n    else:\n        return list1[0:len(list1)-1] + list2\n    \nprint replace_list([1,2,3,4],['a','b'])\nprint replace_list([1,2,3],['a','b','c'])\nprint replace_list([],['a','b','c'])"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == len(list2):\n        for i in range(0,len(list1)):\n            list1[i] = list2[i]\n    return list1\n    \ndef replace_list_2(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(0,len(list1)):\n        list1[i] = list2[i]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1]=list2\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Your code here\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    print(list1[:])\n    list1[-1] = list2[:]\n    return list1[:]\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1)==0 or len(list2)==0:\n        return list1\n    else:\n        return list1[:-1] + list2\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total = 0\n    for i in str1:\n        total += 1\n    return total\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count=0\n    for char in str1:\n        count +=1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    if len(str1) == 0:\n        return 0\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    \n    char_dict = {}\n    for char in str1:\n        if char in char_dict.keys():\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    return char_dict\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N>=0:\n        return int(math.ceil(math.pow(N,0.5)))\n    else:\n        return -1\ndef is_Perfect_Square(N):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if (N>0) and (int(math.pow(N,0.5))==math.floor(math.pow(N,0.5))):\n        return True\n    else:\n        return False\ndef nearest_Perfect_Square(N):\n    '''\n    Write a python function to find the nearest perfect square greater than a given number.\n    '''\n    if N>=0:\n        return int(math.floor(math.sqrt(N)))\n    else:\n        return -1\ndef string_to_int(str):\n    '''\n    Write a python function to convert a string to integer.\n    '''\n    if str is not None:\n        return int(str)\n    else:\n        return -1\ndef is_Odd(N):\n    '''\n    Write a python function to check whether a number is odd or not.\n    '''\n    if (N%2)==0:\n        return False\n    else:\n        return True\ndef get_next_Odd(N):\n    '''\n    Write a python function to find the next odd greater than a given number.\n    '''\n    if (N>1):\n        return N+1\n    elif (N==1):\n        return 2\n    else:\n        return -1\ndef is_Even(N):\n    '''\n    Write a python function to check whether a number is even or not.\n    '''\n    if (N%2)==0:\n        return True\n    else:\n        return False\ndef get_next_Even(N):\n    '''\n    Write a python function to find the next even greater than a given number.\n    '''\n    if (N>1):\n        return N-1\n    elif (N==1):\n        return 2\n    else:\n        return -1\ndef max_of_three(a,b,c):\n    '''\n    Write a python function to find the max of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\ndef max_of_three_numbers(a,b,c):\n    '''\n    Write a python function to find the max of three numbers.\n    '''\n    return (a if a>b and a>c else b if b>a and b>c else c)\ndef check_prime(N):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if N<=1:\n        return False\n    if (N==2):\n        return True\n    if (N%2)==0:\n        return False\n    for i in range(3,int(math.ceil(math.sqrt(N))),2):\n        if (N%i)==0:\n            return False\n    return True\ndef count_divisors(N):\n    '''\n    Write a python function to count the number of divisors of a given number.\n    '''\n    if N<=1:\n        return 1\n    count=1\n    for i in range(2,int(math.ceil(math.sqrt(N)))):\n        if (N%i)==0:\n            count=count+2\n    if (N%math.ceil(math.sqrt(N)))==0:\n        count=count+1\n    return count\ndef is_Prime(N):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if (N<2) or (N%2==0 and N!=2):\n        return False\n    return all(N%i for i in range(3,int(math.ceil(math.sqrt(N))),2))\ndef is_Perfect_Number(N):\n    '''\n    Write a python function to check whether a number is perfect number or not.\n    '''\n    if N<=0:\n        return False\n    i=1\n    while (i*i)<=N:\n        if (N%i)==0:\n            return False\n        i=i+2\n    return True\ndef is_perfect_square(N):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if (N<0):\n        return False\n    return (int(math.sqrt(N))*int(math.sqrt(N))==N)\ndef is_Hexadecimal(N):\n    '''\n    Write a python function to check whether a number is a hexadecimal number or not.\n    '''\n    if (N>=0) and (N<=9):\n        return True\n    if (N>=10) and (N<=16):\n        return True\n    return False\ndef get_next_Hexadecimal(N):\n    '''\n    Write a python function to find the next hexadecimal number greater than a given number.\n    '''\n    if (N>=10) and (N<=16):\n        return N+1\n    elif (N==16):\n        return 0\n    else:\n        return -1\ndef is_Prime_Number(N):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if (N<2):\n        return False\n    if (N<4):\n        return True\n    if (N%2==0) or (N%3==0):\n        return False\n    i=5\n    while (i*i)<=N:\n        if (N%i)==0:\n            return False\n        i=i+6\n    return True\ndef is_Hexagonal(N):\n    '''\n    Write a python function to check whether a number is hexagonal or not.\n    '''\n    if (N>=0) and (N<=9):\n        return True\n    if (N>=10) and (N<=16):\n        return True\n    return False\ndef get_next_Hexagonal(N):\n    '''\n    Write a python function to find the next hexagonal number greater than a given number.\n    '''\n    if (N>=10) and (N<=16):\n        return N+6\n    elif (N==16):\n        return 0\n    else:\n        return -1\ndef get_kth_number(N,k):\n    '''\n    Write a python function to find the kth number greater than a given number.\n    '''\n    if (N>=1) and (N<=100) and (k>=1) and (k<=100):\n        return N+k-1\n    else:\n        return -1\ndef get_kth_Hexagonal(N,k):\n    '''\n    Write a python function to find the kth hexagonal number greater than a given number.\n    '''\n    if (N>=10) and (N<=16) and (k>=1) and (k<=16):\n        return N+6-k\n    elif (N==16) and (k>=1) and (k<=16):\n        return 0\n    else:\n        return -1\ndef is_Curious_Prime(N):\n    '''\n    Write a python function to check whether a number is curious prime or not.\n    '''\n    if (N==1):\n        return False\n    if (N==2):\n        return True\n    if (N>2) and (N%2)==0:\n        return False\n    i=3\n    while i*i<=N:\n        if (N%i)==0:\n            return False\n        i=i+2\n    return True\ndef is_Cubic_Number(N):\n    '''\n    Write a python function to check whether a number is cubic or not.\n    '''\n    if (N>=0) and (N<=9):\n        return True\n    if (N>=10) and (N<=99):\n        return True\n    if (N>=100) and ("
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root=math.sqrt(N)\n    if (int(root+0.5)**2==N):\n        return int(root+1)**2\n    else:\n        return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    #import math\n    p = int(math.sqrt(N))\n    if p*p == N:\n        return (p+1)**2\n    else:\n        return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    return int(root) ** 2 + 1\n    \ndef is_Perfect_Square(N): \n    '''\n    Write a python function to check if a number is perfect square or not.\n    '''\n    root = math.sqrt(N)\n    return root*root == N\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.sqrt(N))+1\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x=1\n    while x*x<N:\n        x+=1\n    return x*x\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    SqrtN = int(math.sqrt(N))\n    return SqrtN * SqrtN + 1 if SqrtN * SqrtN < N else SqrtN * SqrtN - 1\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n=N+1\n    while (n*n)<N: \n        n+=1\n    return n*n \n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n = int(math.sqrt(N)) + 1\n    return n*n\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.sqrt(N))+1\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    '''\n    we know that the maximum sum of a bitonic sequence is the maximum sum of a sequence ending in a peak (max ending in a peak)\n    to do this we do a two-pointer approach, one which ends in a peak and another which ends in a trough\n    the max_ending_here is the sum of the numbers ending in the peak, while the max_ending_here_is_trough is the sum of the numbers ending in the trough\n    we keep updating max_ending_here as we go through the array, and when the next number is bigger than the previous max, we update max_ending_here and update max_ending_here_is_trough to be the sum of the numbers ending in the trough\n    return max_ending_here\n    '''\n    # we will want to track the maximum sum ending in a peak, as well as the maximum sum ending in a trough\n    max_ending_here = max_ending_here_is_trough = float('-inf')\n    for num in arr: \n        max_ending_here = max(max_ending_here, max_ending_here_is_trough + num)\n        max_ending_here_is_trough = max(max_ending_here_is_trough, max_ending_here)\n    return max_ending_here\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    \n    max_sum = -10000000\n    \n    for i in range(len(arr)):\n        sub_arr = arr[i:]\n        if sub_arr == sorted(sub_arr,reverse=True):\n            return arr[i]\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    bitonic = False\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] < arr[right]:\n            bitonic = True\n            break\n        if arr[left] > arr[right]:\n            bitonic = True\n            break\n        left += 1\n        right -= 1\n    if bitonic:\n        max_sum = sum(arr)\n        for i in range(len(arr)):\n            if i < left or i > right:\n                if max_sum < sum(arr[left:i] + arr[i+1:right+1]):\n                    max_sum = sum(arr[left:i] + arr[i+1:right+1])\n        return max_sum\n    else:\n        return None\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    \n    start = 0\n    end = n-1\n    \n    while start < end:\n        max_1 = arr[start]\n        max_2 = arr[end]\n        \n        if max_1 > max_2:\n            start += 1\n        elif max_1 < max_2:\n            end -= 1\n        else:\n            start += 1\n            end -= 1\n    \n    return arr[start]\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def helper(arr, i, j):\n        if i >= j:\n            return arr[i]\n        else:\n            mid = (i + j) // 2\n            left = helper(arr, i, mid)\n            right = helper(arr, mid+1, j)\n            return max(left, right) + max_helper(arr, i, mid, j)\n    \n    def max_helper(arr, i, mid, j):\n        left_max = arr[mid]\n        right_max = arr[j]\n        \n        left_sum = arr[mid]\n        for k in xrange(mid, i-1, -1):\n            left_sum = left_sum + arr[k]\n            if left_sum > left_max:\n                left_max = left_sum\n        \n        right_sum = arr[mid]\n        for k in xrange(mid+1, j):\n            right_sum = right_sum + arr[k]\n            if right_sum > right_max:\n                right_max = right_sum\n        \n        return left_max + right_max\n    \n    return helper(arr, 0, len(arr) - 1)\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if arr is None or len(arr) < 2:\n        return 0\n    bitonic = [0] * len(arr)\n    bitonic[0] = arr[0]\n    bitonic[1] = max(arr[1], bitonic[0])\n    for i in xrange(2, len(arr)):\n        bitonic[i] = max(bitonic[i - 1], bitonic[i - 2] + arr[i])\n    return max(bitonic)\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr:\n        return 0\n    n = len(arr)\n    dp = [[0]*(n+1) for i in xrange(n+1)]\n    res = arr[0]\n    for i in xrange(n):\n        dp[i+1][i+1] = arr[i] + max(dp[i+1][i], dp[i][i+1])\n        res = max(res, dp[i+1][i+1])\n    return res\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Write your code here\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    start, end = 0, n-1\n    ans = arr[start]\n    while start < end:\n        mid = start + (end-start)//2\n        ans = max(ans, arr[mid] + max_sum(arr, mid+1, end))\n        if arr[mid] > arr[mid+1]:\n            start = mid+1\n        else:\n            end = mid\n    return ans"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    bitonic_max = arr[0]\n    bitonic_sum = arr[0]\n    for i in xrange(1, len(arr)):\n        bitonic_max = max(bitonic_max + arr[i], arr[i])\n        bitonic_sum = max(bitonic_sum + arr[i], bitonic_max)\n    return bitonic_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    left = 0\n    right = len(arr)-1\n    for index in range(0,len(arr)):\n        left = index\n        right = index\n        if max_sum < max(arr[index], arr[index]+arr[index+1], arr[index]+arr[index-1]):\n            max_sum = max(arr[index], arr[index]+arr[index+1], arr[index]+arr[index-1])\n        while left-1 >= 0 and arr[left-1] >= arr[left]:\n            left -= 1\n        while right+1 < len(arr) and arr[right+1] >= arr[right]:\n            right += 1\n    return max_sum\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # num = int(input('Enter a number: '))\n    guess = 1.0\n    while True:\n        estimated_root = (guess + number / guess) / 2\n        if abs(estimated_root - guess) < 0.000001:\n            return estimated_root\n        guess = estimated_root\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    a = 0.5\n    b = 1\n    c = number\n    ans = 1\n    while abs(a - b) > 0.000001:\n        ans = (a + b) / 2\n        if ans * ans == c:\n            return ans\n        elif ans * ans > c:\n            b = ans\n        elif ans * ans < c:\n            a = ans\n    return ans\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    #The Babylonian method uses the following constants:\n    '''\n    * a = 0.0\n    * b = 1.0\n    * eps = 0.0000001\n    '''\n    a = 0.0\n    b = 1.0\n    eps = 0.0000001\n    iterations = 0\n    #We want to use a while loop, so we'll define a variable, t, to store the current iteration number\n    t = number\n    #We want to use a while loop, so we'll define a variable, t, to store the current iteration number\n    #We want to use a while loop, so we'll define a variable, t, to store the current iteration number\n    while(t - b > eps):\n        #We want to use a while loop, so we'll define a variable, t, to store the current iteration number\n        t = (a + b) / 2.0\n        #We want to use a while loop, so we'll define a variable, t, to store the current iteration number\n        #We want to use a while loop, so we'll define a variable, t, to store the current iteration number\n        iterations += 1\n        #If the number we're subtracting the previous b from t, is less than our epsilon value, we'll increment a by t\n        if((t - b) < eps):\n            a = t\n        #Otherwise, we'll increment b by t\n        else:\n            b = t\n    #We want to use a while loop, so we'll define a variable, t, to store the current iteration number\n    #We want to use a while loop, so we'll define a variable, t, to store the current iteration number\n    #We want to use a while loop, so we'll define a variable, t, to store the current iteration number\n    t = (a + b) / 2.0\n    #We want to use a while loop, so we'll define a variable, t, to store the current iteration number\n    #We want to use a while loop, so we'll define a variable, t, to store the current iteration number\n    #We want to use a while loop, so we'll define a variable, t, to store the current iteration number\n    iterations += 1\n    #We want to use a while loop, so we'll define a variable, t, to store the current iteration number\n    #We want to use a while loop, so we'll define a variable, t, to store the current iteration number\n    #We want to use a while loop, so we'll define a variable, t, to store the current iteration number\n    if(number < 0):\n        return None\n    else:\n        return t\n    \n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.000001\n    guess = number/2.0\n    i = 0\n    while abs(guess*guess - number) >= epsilon:\n        guess = (guess + number/guess)/2\n        i += 1\n    return guess, i\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number\n    delta = abs(guess * guess - number)\n    while delta >= 0.000000001:\n        guess = (guess + number / guess) / 2\n        delta = abs(guess * guess - number)\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    # Initialize\n    numerator = number\n    denominator = 0.5\n    \n    # Stop condition\n    stop_condition = False\n    \n    # Perform iterations\n    while not stop_condition:\n        \n        # Perform\n        denominator = 0.5 * (numerator + number / denominator)\n        \n        # Check stop condition\n        stop_condition = (numerator / denominator) == number\n        \n    return denominator\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # This is the initial guess for the square root.\n    guess = number / 2.0\n    \n    while abs(guess * guess - number) > 0.01:\n        guess = (guess + number/guess) / 2.0\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return babylonian_sqrt(number)\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError('square root of negative number')\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # TODO: Implement the babylonian_squareroot function.\n    # Note: If the square of a number is too large to be computed, return the\n    # value -1.\n    return None\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    \n    # initialize the edges with i=1\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # initialize the lower part\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n        else:\n            dp[i][i+1] = 1\n    \n    for l in range(3, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            if str[i] == str[j] and l == 3:\n                dp[i][j] = 3\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    t = [[0 for x in range(n)] for x in range(n)] \n    for i in range(n): \n        t[i][i] = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                t[i][j] = 2\n            elif str[i] == str[j]: \n                t[i][j] = t[i+1][j-1] + 2\n            else: \n                t[i][j] = max(t[i][j-1], t[i+1][j]); \n    return t[0][n-1] \n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    dp = [[0 for x in range(n)] for x in range(n)] \n    res = 0\n    for i in range(n): \n        for j in range(i,n): \n            if str[i] == str[j] and j-i < 2: \n                dp[i][j] = 1\n            elif str[i] == str[j]: \n                dp[i][j] = dp[i+1][j-1] + 2\n            else: \n                dp[i][j] = max(dp[i][j-1],dp[i+1][j])\n            res = max(res,dp[i][j])\n    return res\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    # The two substrings of the input string s are i and j,\n    # where i is the left index of the substring and j is the right index of the substring.\n    # The palindromes of i and j are i and j, hence they both start and end with a letter.\n    # Now the palindrome of i can be formed from i and j by a series of letters in {s[i], s[i + 1],..., s[j]}\n    # i and j may be different, so we need to check if the palindrome formed by {s[i], s[i + 1],..., s[j]} is a palindrome.\n    \n    # 1. Find all palindromes of i and j.\n    # 2. Find the longest palindrome from the set of palindromes formed by {s[i], s[i + 1],..., s[j]}\n    \n    # 1. Find all palindromes of i and j\n    #    For each letter, we have two options:\n    #        1. Try to extend the palindrome formed by {s[i], s[i + 1],..., s[j]},\n    #            i.e., the palindrome {s[i], s[i + 1],..., s[j]}\n    #        2. Try to extend the palindrome formed by {s[i], s[i + 1],..., s[j - 1]},\n    #            i.e., the palindrome {s[i], s[i + 1],..., s[j - 1]}\n    #    The max of these two options is the palindrome formed by {s[i], s[i + 1],..., s[j]}.\n    #    Note that we need to create a new palindrome to ensure that the first and the last letters are palindromic.\n    # 2. Find the longest palindrome\n    #    To ensure that the first and the last letters are palindromic, we need to ensure that:\n    #        1. s[i - 1] and s[j] are both equal to the palindromic substring formed by {s[i], s[i + 1],..., s[j]}\n    #        2. s[i] and s[j - 1] are both equal to the palindromic substring formed by {s[i], s[i + 1],..., s[j - 1]}\n    #    We can find the longest palindrome by extending the longest palindrome from {s[i], s[i + 1],..., s[j - 1]} by {s[j - 1], s[j],..., s[i]}\n    #    If we extend the palindrome from {s[i], s[i + 1],..., s[j - 1]},\n    #        1. If the palindrome ends with s[j - 1], it is a true palindrome and we can simply return j - 1\n    #        2. If the palindrome does not end with s[j - 1], then we can extend the palindrome by one letter s[j],\n    #            i.e., we need to try to extend the palindrome by {s[j], s[j + 1],..., s[i + 1]}.\n    #            If this palindrome is a true palindrome, we can simply return j, else we need to extend it by {s[j], s[j + 1],..., s[i + 1]}.\n    # 3. Return the result\n    \n    # 1. Find all palindromes of i and j\n    length = len(str)\n    if length < 2: return length\n    \n    # Use a list to store the length of each palindrome\n    palindrome_length = [1] * length\n    \n    # Initialize the first two palindromes\n    palindrome_length[0] = 1\n    if str[0] == str[-1]:\n        palindrome_length[1] = 2\n    \n    # The length of each palindrome can be extended by one letter\n    # from i to j\n    for i in range(2, length):\n        for j in range(i + 1, length + 1):\n            \n            # The length of the palindrome can be extended by {s[i], s[i + 1],..., s[j]}\n            palindrome_length[j - 1] = max(palindrome_length[j - 1], j - i + 1)\n            \n            # The length of the palindrome can be extended by {s[i], s[i + 1],..., s[j - 1]}\n            if i <= j - 1 and str[i - 1] == str[j - 1]:\n                palindrome_length[j - 1] = max(palindrome_length[j - 1], 2 + palindrome_length[j - 2])\n    \n    # 2. Find the longest palindrome\n    max_length = 1\n    for i in range(length):\n        max_length = max(max_length, palindrome_length[i])\n    \n    return max_length\n    \n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0]*n for i in range(n)]\n    result = 0\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) < 2:\n        return len(str)\n    elif len(str) == 2:\n        if str[0] == str[1]:\n            return 2\n        else:\n            return 1\n    else:\n        dp = [[0] * len(str) for _ in xrange(len(str))]\n        for i in xrange(len(str)):\n            dp[i][i] = 1\n        for i in xrange(len(str)-2, -1, -1):\n            for j in xrange(i+1, len(str)):\n                if str[i] == str[j] and (j-i < 3 or dp[i+1][j-1]):\n                    dp[i][j] = 2\n                else:\n                    dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n        return dp[0][len(str)-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    table = [[0 for x in range(n)] for x in range(n)] \n    for i in range(n): \n        table[i][i] = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                table[i][j] = 2\n            elif str[i] == str[j]: \n                table[i][j] = table[i+1][j-1] + 2\n            else: \n                table[i][j] = max(table[i][j-1], table[i+1][j]);\n    return table[0][n-1]\n    \ndef palindromePartitioningMinCuts(string):\n    '''\n    Given a string with characters A, B, and C. Find the minimum number of cuts to partition the string into two strings such that \n    the first string is a palindrome and the second string is a palindrome.\n    '''\n    n = len(string)\n    cuts = [float('inf') for x in range(n+1)]\n    cuts[0] = 0\n    for i in range(1,n+1):\n        for j in range(i):\n            if isPalindrome(string[j:i]):\n                cuts[i] = min(cuts[i], cuts[j] + 1)\n    return cuts[n]\n    \ndef isPalindrome(string):\n    return string == string[::-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def computeLPSArray(str, M, lps): \n        len = 0\n        lps[0] \n        i = 1\n        while i < M: \n            if str[i] == str[len]: \n                len += 1\n                lps[i] = len\n                i += 1\n            else: \n                if len!= 0: \n                    len = lps[len-1] \n                else: \n                    lps[i] = 0\n                    i += 1\n    \n    def longestPalSubstr(str): \n        n = len(str) \n        lps = [0]*n \n        computeLPSArray(str, n, lps) \n        maxLen = lps[0] \n        start = 0\n        for i in range(1, n): \n            if lps[i]>maxLen: \n                maxLen = lps[i] \n                start = i-maxLen \n        subStr = str[start:start+maxLen] \n        return subStr\n        \n    return longestPalSubstr(str)\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def max_palindrome(str,start,end):\n        if start >= end:\n            return 0\n        if str[start] == str[end]:\n            return 2 + max_palindrome(str,start+1,end-1)\n        else:\n            return max(max_palindrome(str,start,end-1), max_palindrome(str,start+1,end))\n    return max_palindrome(str,0,len(str)-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    total = 0\n    for i in range(1, n):\n        total += 1.0/i\n    return total\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 + 1/n\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    assert type(n) == int and n > 0, 'n must be a positive integer'\n    return (1/n) + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n + n - 1\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    return n + 1/harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n/(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    \n    return [x for x in array_nums1 if x in array_nums2]\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersections = []\n    for element in array_nums1:\n        if element in array_nums2:\n            intersections.append(element)\n    return intersections\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1).intersection(set(array_nums2)))\n    \ndef intersection_array_set(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1).intersection(set(array_nums2)))\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    i=0\n    a=len(array_nums1)-1\n    b=len(array_nums2)-1\n    array_nums1.sort()\n    array_nums2.sort()\n    while i<=a and b<=b:\n        if array_nums1[i]==array_nums2[b]:\n            return array_nums1[i]\n        if array_nums1[i]<array_nums2[b]:\n            i+=1\n        else:\n            b+=1\n    return -1\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    n = len(array_nums1)\n    m = len(array_nums2)\n    array_nums1.sort()\n    array_nums2.sort()\n    i = 0\n    j = 0\n    intersection_arr = []\n    while(i<n and j<m):\n        if array_nums1[i] == array_nums2[j]:\n            intersection_arr.append(array_nums1[i])\n            i+=1\n            j+=1\n        elif array_nums1[i] < array_nums2[j]:\n            i+=1\n        else:\n            j+=1\n    return intersection_arr\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1_set = set(array_nums1)\n    return [i for i in array_nums2 if i in array_nums1_set]\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    def intersection(arr1,arr2):\n        intersect = []\n        for i in arr1:\n            if i in arr2:\n                intersect.append(i)\n        return intersect\n    if array_nums1 is not None and array_nums2 is not None:\n        return intersection(array_nums1,array_nums2)\n    else:\n        return None\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    hash_table = {}\n    result = []\n    for num in array_nums1:\n        if num not in hash_table:\n            hash_table[num] = 1\n        else:\n            hash_table[num] += 1\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return [x for x in array_nums1 if x in array_nums2]\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    dictionary = {}\n    for num in array_nums1:\n        if num not in dictionary:\n            dictionary[num] = 1\n        else:\n            dictionary[num] += 1\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    \n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    \n    # Your function goes here\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    n = 0\n    for i in tup:\n        if i == x:\n            n += 1\n    return n\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    counter = 0\n    for i in tup:\n        if i == x:\n            counter = counter + 1\n    return counter\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if x == i:\n            count+=1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for t in tup:\n        if t == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for ele in list:\n        new_list.append(ele)\n        new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    #Fill in your code here.\n    #print list\n    index = 0\n    for x in list:\n        #print index\n        list[index] = x\n        index = index + 1\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if list == []:\n        return [element]\n    else:\n        return [element] + list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    #list = [1,2,3,4,5]\n    #element = 'A'\n    result = []\n    for i in range(len(list)):\n        result.append(list[i])\n        result.append(element)\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list[:0] = [element]\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n    \ndef insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element after each element in the list, and returns the resulting list.\n    '''\n    list.insert(len(list),element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    if list == []:\n        list.append(element)\n    else:\n        list.insert(0,element)\n        \n    return list\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    if type(numbers)==complex:\n        return (cmath.polar(numbers))\n        \n    else:\n        return \"Please enter a complex number\"\n        \ndef main():\n    number1 = complex(input(\"Enter a complex number\"))\n    print(convert(number1))\n    \nif __name__=='__main__':\n    main("
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    t=list(numbers)\n    t2=[]\n    for j in range(0,len(t),2):\n        t2.append(complex(t[j],t[j+1]))\n    return list(zip(abs(t2),cmath.phase(t2)))\ndef convert_polar(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    t=list(numbers)\n    t2=[]\n    for j in range(0,len(t),2):\n        t2.append(complex(t[j],t[j+1]))\n    return list(zip(abs(t2),cmath.phase(t2)))\ndef calc_velocity(t):\n    '''\n    Write a python function to calculate the velocity of a particle.\n    '''\n    dv=[]\n    for i in range(0,len(t),2):\n        dv.append(t[i+1]-t[i])\n    return dv\ndef calc_acceleration(t):\n    '''\n    Write a python function to calculate the acceleration of a particle.\n    '''\n    da=[]\n    for i in range(0,len(t),2):\n        da.append(t[i+1]-2*t[i]+t[i-1])\n    return da\ndef calc_displacement(t):\n    '''\n    Write a python function to calculate the displacement of a particle.\n    '''\n    return list(zip(t,t[1:]))\ndef calc_displacement_acceleration(t):\n    '''\n    Write a python function to calculate the acceleration of a particle.\n    '''\n    return list(zip(t,t[1:],t[2:]))\ndef calc_acceleration_time(t):\n    '''\n    Write a python function to calculate the acceleration time of a particle.\n    '''\n    dt=[]\n    for i in range(0,len(t),2):\n        dt.append((t[i+1]-t[i])/2)\n    return dt\ndef calc_displacement_time(t):\n    '''\n    Write a python function to calculate the displacement time of a particle.\n    '''\n    dt=[]\n    for i in range(0,len(t),2):\n        dt.append((t[i+1]-t[i])/2)\n    return dt\ndef calc_kinetic_energy(t):\n    '''\n    Write a python function to calculate the kinetic energy of a particle.\n    '''\n    ke=[]\n    for i in range(0,len(t),2):\n        ke.append(0.5*t[i]**2)\n    return ke\ndef calc_potential_energy(t):\n    '''\n    Write a python function to calculate the potential energy of a particle.\n    '''\n    pe=[]\n    for i in range(0,len(t),2):\n        pe.append(-t[i])\n    return pe\ndef calc_energy(t):\n    '''\n    Write a python function to calculate the energy of a particle.\n    '''\n    ke=calc_kinetic_energy(t)\n    pe=calc_potential_energy(t)\n    return [sum(ke),sum(pe)]\ndef calc_kinetic_energy_delta_x(t):\n    '''\n    Write a python function to calculate the kinetic energy of a particle.\n    '''\n    ke=[]\n    ke_delta_x=[]\n    for i in range(0,len(t),2):\n        ke.append(0.5*t[i]**2)\n        ke_delta_x.append(ke[i]-ke[i-1])\n    return ke_delta_x\ndef calc_potential_energy_delta_x(t):\n    '''\n    Write a python function to calculate the potential energy of a particle.\n    '''\n    pe=[]\n    pe_delta_x=[]\n    for i in range(0,len(t),2):\n        pe.append(-t[i])\n        pe_delta_x.append(pe[i]-pe[i-1])\n    return pe_delta_x\ndef calc_energy_delta_x(t):\n    '''\n    Write a python function to calculate the energy of a particle.\n    '''\n    ke=calc_kinetic_energy_delta_x(t)\n    pe=calc_potential_energy_delta_x(t)\n    return [sum(ke),sum(pe)]\ndef calc_kinetic_energy_delta_t(t):\n    '''\n    Write a python function to calculate the kinetic energy of a particle.\n    '''\n    ke=[]\n    ke_delta_t=[]\n    for i in range(0,len(t),2):\n        ke.append(0.5*t[i+1]**2)\n        ke_delta_t.append(ke[i]-ke[i-1])\n    return ke_delta_t\ndef calc_potential_energy_delta_t(t):\n    '''\n    Write a python function to calculate the potential energy of a particle.\n    '''\n    pe=[]\n    pe_delta_t=[]\n    for i in range(0,len(t),2):\n        pe.append(-t[i+1])\n        pe_delta_t.append(pe[i]-pe[i-1])\n    return pe_delta_t\ndef calc_energy_delta_t(t):\n    '''\n    Write a python function to calculate the energy of a particle.\n    '''\n    ke=calc_kinetic_energy_delta_t(t)\n    pe=calc_potential_energy_delta_t(t)\n    return [sum(ke),sum(pe)]\ndef calc_average_energy(t):\n    '''\n    Write a python function to calculate the average kinetic energy and average potential energy.\n    '''\n    ke=calc_kinetic_energy(t)\n    pe=calc_potential_energy(t)\n    return [sum(ke)/len(ke),sum(pe)/len(pe)]\ndef calc_speed(t):\n    '''\n    Write a python function to calculate the speed of a particle.\n    '''\n    s=[]\n    for i in range(0,len(t),2):\n        s.append(t[i+1]-t[i])\n    return s\ndef calc_average_speed(t):\n    '''\n    Write a python function to calculate the average speed of a particle.\n    '''\n    s=calc_speed(t)\n    return sum(s)/len(s)\ndef calc_speed_average_x(t):\n    '''\n    Write a python function to calculate the average speed of a particle in the x-direction.\n    '''\n    s=calc_speed(t)\n    s_avg_x=[]\n    for i in range(0,len(s),2):\n        s_avg_x.append(s[i])\n    return sum(s_avg_x)/len(s_avg_x)\ndef calc_speed_average_y(t):\n    '''\n    Write a python function to calculate the average speed of a particle in the y-direction.\n    '''\n    s=calc_speed(t)\n    s_avg_y=[]\n    for i in range(1,len(s),2):\n        s_avg_y.append(s[i])\n    return sum(s_avg_y)/len(s_avg_y)\ndef calc_speed_average_z(t):\n    '''\n    Write a python function to calculate the average speed of a particle in the z-direction.\n    '''\n    s=calc_speed(t)\n    s_avg_z=[]\n    for i in range(2,len(s),2):\n        s_avg_z.append(s[i])\n    return sum(s_avg_z)/len(s_avg_z)\ndef calc_speed_delta_x(t):\n    '''\n    Write a python function to calculate the average speed of a particle.\n    '''\n    s=calc_speed(t)"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    length=len(numbers)\n    polar=[]\n    for i in range(length):\n        r=numbers[i].real\n        i=numbers[i].imag\n        polar.append((abs(numbers[i]),cmath.phase(numbers[i])))\n    return polar\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    arr=numbers.split(' ')\n    return cmath.polar(complex(arr[0],arr[1]))\ndef find_nth_digit(n):\n    '''\n    Write a python function to find the nth digit of a number.\n    '''\n    res=0\n    m=1\n    while(n):\n        n=n//10\n        res+=n*m\n        m*=10\n    return res%10\ndef find_next_digit(num):\n    '''\n    Write a python function to find the next digit of a number.\n    '''\n    m=1\n    res=0\n    while(num):\n        r=num%10\n        num=num//10\n        res+=r*m\n        m*=10\n    return res\ndef find_next_odd(num):\n    '''\n    Write a python function to find the next odd number in a range.\n    '''\n    m=1\n    res=0\n    while(num):\n        r=num%10\n        num=num//10\n        res+=r*m\n        m*=10\n    return res\ndef find_next_even(num):\n    '''\n    Write a python function to find the next even number in a range.\n    '''\n    m=1\n    res=0\n    while(num):\n        r=num%10\n        num=num//10\n        res+=r*m\n        m*=10\n    return res\ndef find_digit(num,n):\n    '''\n    Write a python function to find the nth digit of a number.\n    '''\n    m=1\n    res=0\n    while(num):\n        r=num%10\n        num=num//10\n        res+=r*m\n        m*=10\n    return res%10**n\ndef isPrime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n<2:\n        return False\n    elif n==2:\n        return True\n    else:\n        for i in range(2,n//2+1):\n            if n%i==0:\n                return False\n    return True\ndef isPalindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    if len(s)<2:\n        return True\n    elif s[0]!=s[-1]:\n        return False\n    else:\n        return isPalindrome(s[1:-1])\ndef count_digit(num):\n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    n=0\n    while(num):\n        num=num//10\n        n+=1\n    return n\ndef isPentagonal(n):\n    '''\n    Write a python function to check whether a number is pentagonal or not.\n    '''\n    if (1+24*n)%30==0:\n        return True\n    return False\ndef isOdd(n):\n    '''\n    Write a python function to check whether a number is odd or not.\n    '''\n    if n&1:\n        return True\n    return False\ndef isPrime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n<2:\n        return False\n    elif n==2:\n        return True\n    else:\n        for i in range(2,n//2+1):\n            if n%i==0:\n                return False\n    return True\ndef isPalindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    if len(s)<2:\n        return True\n    elif s[0]!=s[-1]:\n        return False\n    else:\n        return isPalindrome(s[1:-1])\ndef isSquare(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if n<0:\n        return False\n    sqrt=n**0.5\n    if sqrt%1==0:\n        return True\n    else:\n        return False\ndef isFibonacci(n):\n    '''\n    Write a python function to check whether a number is Fibonacci or not.\n    '''\n    if isPrime(n) and isPrime(n+1):\n        return True\n    return False\ndef isPandigital(num):\n    '''\n    Write a python function to check whether a number is pandigital or not.\n    '''\n    l=list(str(num))\n    for i in range(1,len(l)+1):\n        if i not in l:\n            return False\n    return True\ndef isPandigital2(num):\n    '''\n    Write a python function to check whether a number is pandigital or not.\n    '''\n    l=list(str(num))\n    for i in range(1,len(l)+1):\n        if i not in l:\n            return False\n    return True\ndef isPandigital3(num):\n    '''\n    Write a python function to check whether a number is pandigital or not.\n    '''\n    l=list(str(num))\n    d={}\n    for i in l:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    for i in d:\n        if d[i]>1:\n            return False\n    return True\ndef isPandigital4(num):\n    '''\n    Write a python function to check whether a number is pandigital or not.\n    '''\n    l=list(str(num))\n    d={}\n    for i in l:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    for i in d:\n        if d[i]>1:\n            return False\n    return True\ndef isPandigital5(num):\n    '''\n    Write a python function to check whether a number is pandigital or not.\n    '''\n    l=list(str(num))\n    d={}\n    for i in l:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    for i in d:\n        if d[i]>1:\n            return False\n    return True\ndef isPandigital6(num):\n    '''\n    Write a python function to check whether a number is pandigital or not.\n    '''\n    l=list(str(num))\n    d={}\n    for i in l:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    for i in d:\n        if d[i]>1:\n            return False\n    return True\ndef isPandigital7(num):\n    '''\n    Write a python function to check whether a number is pandigital or not.\n    '''\n    l=list(str(num))\n    d={}\n    for i in l:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    for i in d:\n        if d[i]>1:\n            return False\n    return True\ndef isPandigital8(num):\n    '''\n    Write a python function to check whether a number is pandigital or not.\n    '''\n    l=list(str(num))\n    d={}\n    for i in l:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    for i in d:\n        if d[i]>1:\n            return False\n    return True\ndef isPandigital9(num):\n    '''\n    Write a python function to check whether a number is pandigital or not.\n    '''\n    l=list(str(num))\n    d={}\n    for i in l:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    for i in d:\n        if d[i]>1:\n            return False\n    return True\ndef isPandigital10(num):\n    '"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    from math import sqrt\n    numbers = numbers.split()\n    x = int(numbers[0])\n    y = int(numbers[1])\n    z = int(numbers[2])\n    real = x*x\n    imaginary = y*y\n    a = sqrt(real + imaginary)\n    b = sqrt(real - imaginary)\n    angle = cmath.phase(complex(x,y))\n    angle = angle*180/3.14159\n    if z == 1:\n        return str(a) + '+' + str(b) + 'i'\n    elif z == -1:\n        return str(a) + '-' + str(b) + 'i'\n    elif z == 0:\n        return str(a) + 'i'\n    else:\n        return str(a) + '+' + str(b) + 'i'\n        \ndef convert1(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    from math import sqrt\n    numbers = numbers.split()\n    x = int(numbers[0])\n    y = int(numbers[1])\n    z = int(numbers[2])\n    real = x*x\n    imaginary = y*y\n    a = sqrt(real + imaginary)\n    b = sqrt(real - imaginary)\n    angle = cmath.phase(complex(x,y))\n    angle = angle*180/3.14159\n    if z == 1:\n        return str(a) + '+' + str(b) + 'i'\n    elif z == -1:\n        return str(a) + '-' + str(b) + 'i'\n    elif z == 0:\n        return str(a) + 'i'\n    else:\n        return str(a) + '+' + str(b) + 'i'\n        \ndef convert2(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    from math import sqrt\n    numbers = numbers.split()\n    x = int(numbers[0])\n    y = int(numbers[1])\n    z = int(numbers[2])\n    real = x*x\n    imaginary = y*y\n    a = sqrt(real + imaginary)\n    b = sqrt(real - imaginary)\n    angle = cmath.phase(complex(x,y))\n    angle = angle*180/3.14159\n    if z == 1:\n        return str(a) + '+' + str(b) + 'i'\n    elif z == -1:\n        return str(a) + '-' + str(b) + 'i'\n    elif z == 0:\n        return str(a) + 'i'\n    else:\n        return str(a) + '+' + str(b) + 'i'\n        \ndef convert3(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    from math import sqrt\n    numbers = numbers.split()\n    x = int(numbers[0])\n    y = int(numbers[1])\n    z = int(numbers[2])\n    real = x*x\n    imaginary = y*y\n    a = sqrt(real + imaginary)\n    b = sqrt(real - imaginary)\n    angle = cmath.phase(complex(x,y))\n    angle = angle*180/3.14159\n    if z == 1:\n        return str(a) + '+' + str(b) + 'i'\n    elif z == -1:\n        return str(a) + '-' + str(b) + 'i'\n    elif z == 0:\n        return str(a) + 'i'\n    else:\n        return str(a) + '+' + str(b) + 'i'\n        \ndef convert4(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    from math import sqrt\n    numbers = numbers.split()\n    x = int(numbers[0])\n    y = int(numbers[1])\n    z = int(numbers[2])\n    real = x*x\n    imaginary = y*y\n    a = sqrt(real + imaginary)\n    b = sqrt(real - imaginary)\n    angle = cmath.phase(complex(x,y))\n    angle = angle*180/3.14159\n    if z == 1:\n        return str(a) + '+' + str(b) + 'i'\n    elif z == -1:\n        return str(a) + '-' + str(b) + 'i'\n    elif z == 0:\n        return str(a) + 'i'\n    else:\n        return str(a) + '+' + str(b) + 'i'\n        \ndef convert5(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    from math import sqrt\n    numbers = numbers.split()\n    x = int(numbers[0])\n    y = int(numbers[1])\n    z = int(numbers[2])\n    real = x*x\n    imaginary = y*y\n    a = sqrt(real + imaginary)\n    b = sqrt(real - imaginary)\n    angle = cmath.phase(complex(x,y))\n    angle = angle*180/3.14159\n    if z == 1:\n        return str(a) + '+' + str(b) + 'i'\n    elif z == -1:\n        return str(a) + '-' + str(b) + 'i'\n    elif z == 0:\n        return str(a) + 'i'\n    else:\n        return str(a) + '+' + str(b) + 'i'\n        \ndef convert6(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    from math import sqrt\n    numbers = numbers.split()\n    x = int(numbers[0])\n    y = int(numbers[1])\n    z = int(numbers[2])\n    real = x*x\n    imaginary = y*y\n    a = sqrt(real + imaginary)\n    b = sqrt(real - imaginary)\n    angle = cmath.phase(complex(x,y))\n    angle = angle*180/3.14159\n    if z == 1:\n        return str(a) + '+' + str(b) + 'i'\n    elif z == -1:\n        return str(a) + '-' + str(b) + 'i'\n    elif z == 0:\n        return str(a) + 'i'\n    else:\n        return str(a) + '+' + str(b) + 'i'\n        \ndef convert7(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    from math import sqrt\n    numbers = numbers.split()\n    x = int(numbers[0])\n    y = int(numbers[1])\n    z = int(numbers[2])\n    real = x*x\n    imaginary = y*y\n    a = sqrt(real + imaginary)\n    b = sqrt(real - imaginary)\n    angle = cmath.phase(complex(x,y))\n    angle = angle*180/3.14159\n    if z == 1:\n        return str(a) + '+' + str(b) + 'i'\n    elif z == -1:\n        return str(a) + '-' + str(b) + 'i'\n    elif z == 0:\n        return str(a) + 'i'\n    else:\n        return str(a) + '+' + str(b) + 'i'\n        \ndef convert8(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    from math import sqrt\n    numbers = numbers.split()"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z=complex(numbers[0],numbers[1])\n    r=(abs(z))\n    ang=(cmath.phase(z))\n    return r,ang\ndef convert2(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z=complex(numbers[0],numbers[1])\n    r=(abs(z))\n    ang=(cmath.phase(z))\n    return r,ang\ndef convert3(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z=complex(numbers[0],numbers[1])\n    r=(abs(z))\n    ang=(cmath.phase(z))\n    return r,ang\ndef convert4(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z=complex(numbers[0],numbers[1])\n    r=(abs(z))\n    ang=(cmath.phase(z))\n    return r,ang\ndef convert5(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z=complex(numbers[0],numbers[1])\n    r=(abs(z))\n    ang=(cmath.phase(z))\n    return r,ang\ndef convert6(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z=complex(numbers[0],numbers[1])\n    r=(abs(z))\n    ang=(cmath.phase(z))\n    return r,ang\ndef convert7(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z=complex(numbers[0],numbers[1])\n    r=(abs(z))\n    ang=(cmath.phase(z))\n    return r,ang\ndef convert8(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z=complex(numbers[0],numbers[1])\n    r=(abs(z))\n    ang=(cmath.phase(z))\n    return r,ang\ndef convert9(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z=complex(numbers[0],numbers[1])\n    r=(abs(z))\n    ang=(cmath.phase(z))\n    return r,ang\ndef convert10(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z=complex(numbers[0],numbers[1])\n    r=(abs(z))\n    ang=(cmath.phase(z))\n    return r,ang\ndef convert11(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z=complex(numbers[0],numbers[1])\n    r=(abs(z))\n    ang=(cmath.phase(z))\n    return r,ang\ndef convert12(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z=complex(numbers[0],numbers[1])\n    r=(abs(z))\n    ang=(cmath.phase(z))\n    return r,ang\ndef convert13(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z=complex(numbers[0],numbers[1])\n    r=(abs(z))\n    ang=(cmath.phase(z))\n    return r,ang\ndef convert14(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z=complex(numbers[0],numbers[1])\n    r=(abs(z))\n    ang=(cmath.phase(z))\n    return r,ang\ndef convert15(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z=complex(numbers[0],numbers[1])\n    r=(abs(z))\n    ang=(cmath.phase(z))\n    return r,ang\ndef convert16(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z=complex(numbers[0],numbers[1])\n    r=(abs(z))\n    ang=(cmath.phase(z))\n    return r,ang\ndef convert17(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z=complex(numbers[0],numbers[1])\n    r=(abs(z))\n    ang=(cmath.phase(z))\n    return r,ang\ndef convert18(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z=complex(numbers[0],numbers[1])\n    r=(abs(z))\n    ang=(cmath.phase(z))\n    return r,ang\ndef convert19(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z=complex(numbers[0],numbers[1])\n    r=(abs(z))\n    ang=(cmath.phase(z))\n    return r,ang\ndef convert20(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z=complex(numbers[0],numbers[1])\n    r=(abs(z))\n    ang=(cmath.phase(z))\n    return r,ang\ndef convert21(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z=complex(numbers[0],numbers[1])\n    r=(abs(z))\n    ang=(cmath.phase(z))\n    return r,ang\ndef convert22(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z=complex(numbers[0],numbers[1])\n    r=(abs(z))\n    ang=(cmath.phase(z))\n    return r,ang\ndef convert23(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z=complex(numbers[0],numbers[1])\n    r=(abs(z))\n    ang=(cmath.phase(z))\n    return r,ang\ndef convert24(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z=complex(numbers[0],numbers[1])\n    r=(abs(z))\n    ang=(cmath.phase(z))\n    return r,ang\ndef convert25(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z=complex(numbers[0],numbers[1])\n    r=(abs(z))\n    ang=(cmath.phase(z))\n    return r,ang\ndef convert26(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z=complex(numbers[0],numbers[1])\n    r=(abs(z))\n    ang=(cmath.phase(z))\n    return r,ang\ndef convert27(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z=complex(numbers[0],numbers[1])\n    r=(abs(z))\n    ang=(cmath.phase(z))\n    return r,ang\ndef convert28(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z=complex(numbers[0],numbers[1])\n    r=(abs(z))\n    ang=(cmath.phase(z))\n    return r,ang\ndef convert29(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z=complex(numbers[0],numbers[1])\n    r=(abs(z))\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_num = complex(numbers[0], numbers[1])\n    polar_num = cmath.polar(complex_num)\n    return polar_num\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = [complex(x) for x in numbers]\n    return [abs(x) for x in cmath.polar(complex_numbers)]\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r = cmath.sqrt(numbers.real*numbers.real + numbers.imag*numbers.imag)\n    theta = cmath.atan2(numbers.imag, numbers.real)\n    print(r,theta)\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    radius = ((numbers.real ** 2) + (numbers.imag ** 2)) **.5\n    theta = cmath.phase(numbers)\n    return radius, theta\n    \ndef convert2(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    x = numbers.real\n    y = numbers.imag\n    radius = ((x ** 2) + (y ** 2)) **.5\n    theta = cmath.phase(numbers)\n    return radius, theta\n    \ndef convert3(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    radius = ((numbers.real ** 2) + (numbers.imag ** 2)) **.5\n    theta = cmath.phase(numbers)\n    angle = theta * 180 / cmath.pi\n    return radius, angle\n    \nprint convert(complex(2, 1))\nprint convert2(complex(2, 1))\nprint convert3(complex(2, 1))"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(filter(is_int, list1))\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([i for i in list1 if type(i) is int])\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for item in list1:\n        if isinstance(item,int):\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    \n    int_count = 0\n    for i in list1:\n        if isinstance(i,int):\n            int_count = int_count + 1\n    return int_count\n    \ndef count_string(list1):\n    '''\n    Write a python function that returns the number of string elements in a given list.\n    '''\n    \n    string_count = 0\n    for i in list1:\n        if isinstance(i,str):\n            string_count = string_count + 1\n    return string_count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for item in list1:\n        if isinstance(item,int):\n            count+=1\n    return count\ndef count_floating(list1):\n    '''\n    Write a python function that returns the number of floating point elements in a given list.\n    '''\n    count=0\n    for item in list1:\n        if isinstance(item,float):\n            count+=1\n    return count\ndef count_characters(list1):\n    '''\n    Write a python function that returns the number of character elements in a given list.\n    '''\n    count=0\n    for item in list1:\n        if isinstance(item,str):\n            count+=1\n    return count\ndef count_alphabetic(list1):\n    '''\n    Write a python function that returns the number of alphabetic elements in a given list.\n    '''\n    count=0\n    for item in list1:\n        if isinstance(item,str):\n            for letter in item:\n                if letter.isalpha():\n                    count+=1\n    return count\ndef count_numeric(list1):\n    '''\n    Write a python function that returns the number of numeric elements in a given list.\n    '''\n    count=0\n    for item in list1:\n        if isinstance(item,int):\n            count+=1\n    return count\ndef count_alphanumeric(list1):\n    '''\n    Write a python function that returns the number of alphanumeric elements in a given list.\n    '''\n    count=0\n    for item in list1:\n        if isinstance(item,str):\n            for letter in item:\n                if letter.isalnum():\n                    count+=1\n    return count\ndef count_special(list1):\n    '''\n    Write a python function that returns the number of special characters in a given list.\n    '''\n    count=0\n    for item in list1:\n        if isinstance(item,str):\n            for letter in item:\n                if letter.isdigit():\n                    count+=1\n                if letter.isalpha():\n                    count+=1\n                if letter.isalnum():\n                    count+=1\n    return count\ndef find_min(list1):\n    '''\n    Write a python function that returns the minimum element in a given list.\n    '''\n    minimum=list1[0]\n    for item in list1:\n        if item<minimum:\n            minimum=item\n    return minimum\ndef find_max(list1):\n    '''\n    Write a python function that returns the maximum element in a given list.\n    '''\n    maximum=list1[0]\n    for item in list1:\n        if item>maximum:\n            maximum=item\n    return maximum\ndef find_sum(list1):\n    '''\n    Write a python function that returns the sum of all elements in a given list.\n    '''\n    sum1=0\n    for item in list1:\n        sum1+=item\n    return sum1\ndef find_average(list1):\n    '''\n    Write a python function that returns the average of all elements in a given list.\n    '''\n    sum1=0\n    for item in list1:\n        sum1+=item\n    average=sum1/len(list1)\n    return average\ndef find_product(list1):\n    '''\n    Write a python function that returns the product of all elements in a given list.\n    '''\n    product1=1\n    for item in list1:\n        product1*=item\n    return product1\ndef reverse(list1):\n    '''\n    Write a python function that returns a list whose elements are the same as those in a given list, but in reverse order.\n    '''\n    list2=[]\n    for i in range(len(list1)-1,-1,-1):\n        list2.append(list1[i])\n    return list2\ndef sort_list(list1):\n    '''\n    Write a python function that returns a sorted version of a given list.\n    '''\n    list2=list1\n    for i in range(len(list1)-1):\n        for j in range(len(list2)-1):\n            if list2[j]>list2[j+1]:\n                list2[j],list2[j+1]=list2[j+1],list2[j]\n    return list2\ndef uniquify(list1):\n    '''\n    Write a python function that returns a list with all duplicate elements removed.\n    '''\n    list2=[]\n    for item in list1:\n        if item not in list2:\n            list2.append(item)\n    return list2\ndef duplicates(list1):\n    '''\n    Write a python function that returns a list of all duplicate elements in a given list.\n    '''\n    list2=[]\n    for item in list1:\n        if item not in list2:\n            list2.append(item)\n        else:\n            list2.append(item)\n    return list2\ndef remove_duplicates(list1):\n    '''\n    Write a python function that returns a list with all duplicate elements removed.\n    '''\n    list2=[]\n    for item in list1:\n        if item not in list2:\n            list2.append(item)\n    return list2\ndef list_difference(list1,list2):\n    '''\n    Write a python function that returns a list of elements in the first list that are not in the second list.\n    '''\n    list3=[]\n    for item in list1:\n        if item not in list2:\n            list3.append(item)\n    return list3\ndef intersection(list1,list2):\n    '''\n    Write a python function that returns a list of elements in both the first and second list.\n    '''\n    list3=[]\n    for item in list1:\n        if item in list2:\n            list3.append(item)\n    return list3\ndef union(list1,list2):\n    '''\n    Write a python function that returns a list of elements that are in either the first or second list, but not both.\n    '''\n    list3=[]\n    for item in list1:\n        if item not in list2:\n            list3.append(item)\n    for item in list2:\n        if item not in list1:\n            list3.append(item)\n    return list3\ndef set_difference(set1,set2):\n    '''\n    Write a python function that returns a list of elements in the first set that are not in the second set.\n    '''\n    list3=[]\n    for item in set1:\n        if item not in set2:\n            list3.append(item)\n    return list3\ndef symmetric_difference(list1,list2):\n    '''\n    Write a python function that returns a list of elements in either the first or second list, but not both.\n    '''\n    list3=[]\n    for item in list1:\n        if item not in list2:\n            list3.append(item)\n    for item in list2:\n        if item not in list1:\n            list3.append(item)\n    return list3\ndef list_duplicates(list1):\n    '''\n    Write a python function that returns a list of all the duplicates elements in a given list.\n    '''\n    list2=[]\n    for i in range(len(list1)-1):\n        if list1[i]==list1[i+1]:\n            list2.append(list1[i])\n    return list2\ndef first_duplicate(list1):\n    '''\n    Write a python function that returns the first index of the first duplicate element in a given list.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i]==list1[i+1]:\n            return i\n    return -1\ndef last_duplicate(list1):\n    '''\n    Write a python function that returns the last index of the last duplicate element in a given list.\n    '''\n    for i in range(len(list1)-1,0,-1):\n        if list1[i]==list1[i-1]:\n            return i\n    return -1\ndef find_duplicates(list1):\n    '''\n    Write a python function that returns a list of all the duplicates elements in a given list.\n    '"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([x for x in list1 if isinstance(x,int)])\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return sum(1 for element in list1 if type(element) == int)\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for elem in list1:\n        if isinstance(elem, int):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    num_int = 0\n    for el in list1:\n        if isinstance(el, int):\n            num_int += 1\n    return num_int\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # print 'testing', l,'for n: ', n\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(l) for i in range(len(l)**n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    for i in range(1, n+1):\n        combs += list(combinations_with_replacement(l, i))\n    return combs\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # print(list(combinations(l, n)))\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    assert isinstance(l, list)\n    assert isinstance(n, int)\n    assert n > 0\n    assert len(l) >= n\n    for i in range(len(l)):\n        assert isinstance(l[i], int)\n    l = list(set(l))\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    list1 = []\n    comb = combinations_with_replacement(l, n)\n    for i in comb:\n        list1.append(list(i))\n    return list1\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l,n))\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # your code here\n    return [list(comb) for i in range(len(l) + 1 - n) for comb in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    # n = n+1 to include the index\n    \n    # if i is a prime number, then the numbers less than i will be i+2\n    # if i is not a prime number, then the numbers less than i will be 2*i+2\n    \n    # since the non-negative numbers are sequential, we can iterate up to n in this function and get the prime numbers\n    \n    # we can also use a boolean array to store the i values\n    \n    # for each i, we store the number of primes less than i, which can be done by checking whether each i's multiples are in the array\n    \n    # we can also use a generator function to generate the primes\n    \n    # we can also store the primes in a list\n    \n    # we can use a hash table to store the primes\n    \n    # we can use a dictionary to store the primes\n    \n    # we can use a set to store the primes\n    \n    # we can use a string to store the primes\n    \n    # we can use a file to store the primes\n    \n    # we can use a database to store the primes\n    \n    # we can use a linked list to store the primes\n    \n    # we can use a stack to store the primes\n    \n    # we can use a queue to store the primes\n    \n    # we can use a hash map to store the primes\n    \n    # we can use a string to store the primes\n    \n    # we can use a hash table to store the primes\n    \n    # we can use a dictionary to store the primes\n    \n    # we can use a set to store the primes\n    \n    # we can use a list to store the primes\n    \n    # we can use a tuple to store the primes\n    \n    # we can use a boolean array to store the primes\n    \n    # we can use a graph to store the primes\n    \n    # we can use a tree to store the primes\n    \n    # we can use a heap to store the primes\n    \n    # we can use a bitmap to store the primes\n    \n    # we can use a hash map to store the primes\n    \n    # we can use a hash table to store the primes\n    \n    # we can use a set to store the primes\n    \n    # we can use a string to store the primes\n    \n    # we can use a file to store the primes\n    \n    # we can use a database to store the primes\n    \n    # we can use a linked list to store the primes\n    \n    # we can use a stack to store the primes\n    \n    # we can use a queue to store the primes\n    \n    # we can use a hash map to store the primes\n    \n    # we can use a string to store the primes\n    \n    # we can use a hash table to store the primes\n    \n    # we can use a dictionary to store the primes\n    \n    # we can use a set to store the primes\n    \n    # we can use a list to store the primes\n    \n    # we can use a tuple to store the primes\n    \n    # we can use a boolean array to store the primes\n    \n    # we can use a graph to store the primes\n    \n    # we can use a tree to store the primes\n    \n    # we can use a heap to store the primes\n    \n    # we can use a bitmap to store the primes\n    \n    # we can use a hash map to store the primes\n    \n    # we can use a hash table to store the primes\n    \n    # we can use a set to store the primes\n    \n    # we can use a list to store the primes\n    \n    # we can use a tuple to store the primes\n    \n    # we can use a boolean array to store the primes\n    \n    # we can use a graph to store the primes\n    \n    # we can use a tree to store the primes\n    \n    # we can use a heap to store the primes\n    \n    # we can use a bitmap to store the primes\n    \n    # we can use a hash map to store the primes\n    \n    # we can use a dictionary to store the primes\n    \n    # we can use a set to store the primes\n    \n    # we can use a string to store the primes\n    \n    # we can use a file to store the primes\n    \n    # we can use a database to store the primes\n    \n    # we can use a linked list to store the primes\n    \n    # we can use a stack to store the primes\n    \n    # we can use a queue to store the primes\n    \n    # we can use a hash map to store the primes\n    \n    # we can use a string to store the primes\n    \n    # we can use a hash table to store the primes\n    \n    # we can use a dictionary to store the primes\n    \n    # we can use a set to store the primes\n    \n    # we can use a list to store the primes\n    \n    # we can use a tuple to store the primes\n    \n    # we can use a boolean array to store the primes\n    \n    # we can use a graph to store the primes\n    \n    # we can use a tree to store the primes\n    \n    # we can use a heap to store the primes\n    \n    # we can use a bitmap to store the primes\n    \n    # we can use a hash map to store the primes\n    \n    # we can use a hash table to store the primes\n    \n    # we can use a set to store the primes\n    \n    # we can use a list to store the primes\n    \n    # we can use a tuple to store the primes\n    \n    # we can use a boolean array to store the primes\n    \n    # we can use a graph to store the primes\n    \n    # we can use a tree to store the primes\n    \n    # we can use a heap to store the primes\n    \n    # we can use a bitmap to store the primes\n    \n    # we can use a hash map to store the primes\n    \n    # we can use a dictionary to store the primes\n    \n    # we can use a set to store the primes\n    \n    # we can use a string to store the primes\n    \n    # we can use a file to store the primes\n    \n    # we can use a database to store the primes\n    \n    # we can use a linked list to store the primes\n    \n    # we can use a stack to store the primes\n    \n    # we can use a queue to store the primes\n    \n    # we can use a hash map to store the primes\n    \n    # we can use a string to store the primes\n    \n    # we can use a hash table to store the primes\n    \n    # we can use a dictionary to store the primes\n    \n    # we can use a set to store the primes\n    \n    # we can use a list to store the primes\n    \n    # we can use a tuple to store the primes\n    \n    # we can use a boolean array to store the primes\n    \n    # we can use a graph to store the primes\n    \n    # we can use a tree to store the primes\n    \n    # we can use a heap to store the primes\n    \n    # we can use a bitmap to store the primes\n    \n    # we can use a hash map to store the primes\n    \n    # we can use a dictionary to store the primes\n    \n    # we can use a set to store the primes\n    \n    # we can use a list to store the primes\n    \n    # we can use a tuple to store the primes\n    \n    # we can use a boolean array to store the primes\n    \n    # we can use a graph to store the primes\n    \n    # we can use a tree to store the primes\n    \n    # we can use a heap to store the primes\n    \n    # we can use a bitmap to store the primes\n    \n    # we can use a hash map to store the primes\n    \n    # we can use a dictionary to store the primes\n    \n    # we can use a set to store the primes\n    \n    # we can use a string to store the primes\n    \n    # we can use a file to store the primes\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    nums = [True] * (n + 1)\n    nums[0], nums[1] = False, False\n    for i in range(2, len(nums)):\n        if nums[i]:\n            for j in range(2*i, len(nums), i):\n                nums[j] = False\n    return sum(nums)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    primes = []\n    for i in range(2, n+1):\n        if i not in primes:\n            for j in range(i*i, n+1, i):\n                primes.append(j)\n    return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return 0\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return 0\n    return 1\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_prime(n):\n        if n<2:\n            return False\n        else:\n            for x in range(2,n):\n                if n%x==0:\n                    return False\n            return True\n    if n<0:\n        return None\n    else:\n        return len([x for x in range(2,n) if is_prime(x)])\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    else:\n        return count_Primes_nums(n - 1) + 1 if all(n % i for i in range(2, n)) else count_Primes_nums(n - 1)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = [2]\n    primes_set = {1,2}\n    for i in range(3, n+1):\n        prime = True\n        if i in primes_set:\n            continue\n        for j in primes:\n            if i % j == 0:\n                prime = False\n                break\n        if prime:\n            primes.append(i)\n            primes_set.add(i)\n    return primes\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num = 0\n    for x in range(1, n+1):\n        if is_prime(x):\n            num += 1\n    return num\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    primes = [True for i in range(n+1)]\n    count = 0\n    for i in range(2, n):\n        if primes[i]:\n            for j in range(i*2, n, i):\n                primes[j] = False\n    print primes\n    for i in range(2, n):\n        if primes[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_prime(num):\n        if num == 2:\n            return True\n        elif num % 2 == 0:\n            return False\n        elif num < 2:\n            return False\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp = b\n    b = a\n    a = temp\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    tuple_return = (b, a)\n    return tuple_return\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # We would like to swap these two numbers.\n    # First, we are going to store the first number in a variable and then store the second number in a variable.\n    a = input(\"Enter the first number: \")\n    b = input(\"Enter the second number: \")\n    # Now we are going to print the tuple with the first number and then the second number.\n    print (a,b)\n    # We would like to print a tuple with the second number and then the first number.\n    # First we are going to store the second number in a variable and then store the first number in a variable.\n    a = input(\"Enter the second number: \")\n    b = input(\"Enter the first number: \")\n    print (b,a)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # (tuple, tuple) -> (tuple, tuple)\n    # Write your code here\n    # return tuple1, tuple2\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return []\n    return [test_tup1[i] if test_tup1[i] > test_tup2[i] else test_tup2[i] for i in range(len(test_tup1))]\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return tuple(max(test_tup1, test_tup2, key=operator.itemgetter(1)))\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = (max(test_tup1[0], test_tup2[0]), max(test_tup1[1], test_tup2[1]))\n    return max_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = len(test_tup1[0])\n    max2 = len(test_tup2[0])\n    if(max1 > max2):\n        return test_tup1\n    else:\n        return test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print 'ERROR: The two tuples do not have the same length'\n        return -1\n    #find the max element in each tuple\n    max_elem1 = max(test_tup1)\n    max_elem2 = max(test_tup2)\n    #max_elem1 and max_elem2 are the maximum elements in the two tuples\n    #start from the second element, if two tuples have the same element, \n    #the first element in the first tuple is the element to compare with the second\n    for i in range(1, len(test_tup1)):\n        if max_elem1 == test_tup1[i] and max_elem2 == test_tup2[i]:\n            if max_elem1 < max_elem2:\n                max_elem1 = max_elem2\n        elif max_elem1 < test_tup1[i]:\n            max_elem1 = test_tup1[i]\n        elif max_elem2 < test_tup2[i]:\n            max_elem2 = test_tup2[i]\n    return max_elem1\n    \n    \ndef test_maximize_elements():\n    assert (maximize_elements((10, 20, 30, 40, 50), (100, 200, 300, 400, 500)) == max(100, 200, 300, 400, 500)), 'ERROR: the maximize_elements is not working properly'\n    assert (maximize_elements((1, 2, 3, 4, 5), (7, 6, 5, 4, 3)) == max(7, 6, 5, 4, 3)), 'ERROR: the maximize_elements is not working properly'\n    assert (maximize_elements((10, 10, 10, 10, 10), (1, 2, 3, 4, 5)) == max(10, 10, 10, 10, 10)), 'ERROR: the maximize_elements is not working properly'\n    assert (maximize_elements((1, 2, 3, 4, 5), (10, 10, 10, 10, 10)) == max(10, 10, 10, 10, 10)), 'ERROR: the maximize_elements is not working properly'\n    assert (maximize_elements((1, 2, 3, 4, 5), (5, 4, 3, 2, 1)) == max(5, 4, 3, 2, 1)), 'ERROR: the maximize_elements is not working properly'\n    print 'PASSED: maximize_elements'\n    \n    \nif __name__ == '__main__':\n    test_maximize_elements()\n    "
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # if not all the elements are equal\n    if not all(x==y for x, y in zip(test_tup1, test_tup2)):\n        # find the maximum value\n        return max(test_tup1, test_tup2)\n    # all the elements are equal\n    else:\n        # find the minimum value\n        return min(test_tup1, test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] == test_tup2[0]:\n        return test_tup1 if test_tup1[1] >= test_tup2[1] else test_tup2\n    elif test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_list = []\n    for i in range(len(test_tup1)):\n        max_list.append(max(test_tup1[i], test_tup2[i]))\n    print max_list\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return max_tup(test_tup1, test_tup2)\n    return max_tup(test_tup2, test_tup1)\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return 2\n    if n == 1:\n        return 3\n    x = newman_prime(n-1)\n    if x is None:\n        return None\n    y = (x**2 - n)\n    if y % 2 == 0:\n        return None\n    else:\n        return y"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # I don't know the math behind this algorithm, but it is a very straightforward one.\n    # I found it on a wolfram website.\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n % 2 == 0:\n        return n\n    n = n // 2\n    s = 3\n    v = 2\n    while n > 1:\n        if n % 2 == 0:\n            v = pow(v, 2, n)\n            n //= 2\n        else:\n            t = s\n            s = (t * v) % n\n            for k in range(1, n):\n                if (t * v) % n == 1:\n                    break\n                t = t * v % n\n            else:\n                return n\n            v = t\n            n //= 2\n    return 1\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    n = int(n)\n    if n < 0:\n        raise ValueError('Must be positive integer')\n    elif n == 0:\n        return 2\n    else:\n        x = 2\n        while not is_newman_williams_prime(x):\n            x += 1\n        return x\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    for i in xrange(2, n+1):\n        if newman_williams(i):\n            print i\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def legendre_symbol(a,n):\n        if pow(a,(n-1)/2,n) == 1:\n            return 1\n        return -1\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    return newman_williams(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def isPrime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        \n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n    \n    def isPerfectSquare(n):\n        if n < 0:\n            return False\n        if n == 0:\n            return True\n        return n == int(math.sqrt(n))\n    \n    def quadraticSieve(n):\n        '''\n        Sieve of Eratosthenes (The Sieve of Sundaram)\n        '''\n        is_prime = [True for i in range(n)]\n        for i in range(2, int(math.sqrt(n))):\n            if is_prime[i]:\n                j = i**2\n                while j < n:\n                    is_prime[j] = False\n                    j += i\n        \n        return [i for i in range(2, n) if is_prime[i]]\n    \n    def simpleSieve(n):\n        '''\n        Sieve of Atkin\n        '''\n        is_prime = [True for i in range(n)]\n        is_prime[0] = False\n        is_prime[1] = False\n        \n        i = 2\n        while i*i < n:\n            if is_prime[i]:\n                j = i**2\n                while j < n:\n                    is_prime[j] = False\n                    j += i\n            i += 1\n        \n        return [i for i in range(n) if is_prime[i]]\n    \n    def eratosthenes(n):\n        '''\n        Sieve of Eratosthenes\n        '''\n        is_prime = [True for i in range(n)]\n        for i in range(2, int(math.sqrt(n))):\n            if is_prime[i]:\n                j = i**2\n                while j < n:\n                    is_prime[j] = False\n                    j += i\n        \n        return [i for i in range(n) if is_prime[i]]\n    \n    def is_simple_shares(n, shares):\n        '''\n        Verify the shares are simple.\n        '''\n        return all([int(shares[i][0])/shares[i][1] == int(shares[0][0])/shares[0][1] for i in range(1, len(shares))])\n    \n    def get_first_prime(n):\n        '''\n        Returns the first prime less than n.\n        '''\n        n -= 1\n        while True:\n            if isPrime(n):\n                return n\n            n -= 1\n    \n    def get_first_perfect_square(n):\n        '''\n        Returns the first perfect square less than n.\n        '''\n        n -= 1\n        while True:\n            if isPerfectSquare(n):\n                return n\n            n -= 1\n    \n    def generate_prime(n):\n        '''\n        Returns a list of primes.\n        '''\n        prime_list = []\n        \n        for i in range(get_first_prime(n)):\n            prime_list.append(i)\n        \n        return prime_list\n    \n    def generate_perfect_square(n):\n        '''\n        Returns a list of perfect squares.\n        '''\n        perfect_square_list = []\n        \n        for i in range(get_first_perfect_square(n)):\n            perfect_square_list.append(i)\n        \n        return perfect_square_list\n    \n    def generate_shares(n, s):\n        '''\n        Generate all shares for the newman\u2013shanks\u2013williams algorithm.\n        '''\n        shares = []\n        \n        for i in range(n):\n            x = random.randint(1, n)\n            y = random.randint(1, n)\n            while y == x:\n                y = random.randint(1, n)\n            \n            x = x**s\n            y = y**s\n            \n            x_inv = mod_inverse(x, n)\n            y_inv = mod_inverse(y, n)\n            \n            shares.append((x*y_inv, x_inv*y))\n            \n        return shares\n    \n    def mod_inverse(a, m):\n        '''\n        Calculate the modular inverse.\n        '''\n        x, y, u, v = 0, 1, 1, 0\n        while m!= 0:\n            q = a // m\n            r = a - q*m\n            x, y = y, x - q*y\n            a, m = m, r\n        \n        return x % m\n    \n    def is_prime_with_index(n, primes, start):\n        '''\n        Determine if a number is prime.\n        '''\n        for i in range(start, len(primes)):\n            if primes[i] > math.sqrt(n):\n                break\n            \n            if n % primes[i] == 0:\n                return False\n        \n        return True\n    \n    def newman_williams(n):\n        '''\n        Calculate the nth newman\u2013williams prime number.\n        '''\n        primes = generate_prime(n)\n        perfect_squares = generate_perfect_square(n)\n        \n        for i in range(len(primes)):\n            if not is_prime_with_index(primes[i], primes, i):\n                continue\n            \n            for j in range(len(perfect_squares)):\n                if not is_prime_with_index(perfect_squares[j], perfect_squares, j):\n                    continue\n                \n                x = primes[i]\n                y = perfect_squares[j]\n                \n                while y!= 1:\n                    if x % y == 0:\n                        x = x // y\n                        y = perfect_squares[j]\n                    else:\n                        break\n                \n                if x == 1:\n                    return primes[i]\n        \n        raise Exception('Newman\u2013Williams algorithm failed.')\n    \n    def s_williams(n):\n        '''\n        Calculate the nth newman\u2013williams prime number.\n        '''\n        primes = generate_prime(n)\n        perfect_squares = generate_perfect_square(n)\n        \n        for i in range(len(primes)):\n            for j in range(len(perfect_squares)):\n                if not is_prime_with_index(perfect_squares[j], perfect_squares, j):\n                    continue\n                \n                x = primes[i]\n                y = perfect_squares[j]\n                \n                while y!= 1:\n                    if x % y == 0:\n                        x = x // y\n                        y = perfect_squares[j]\n                    else:\n                        break\n                \n                if x == 1:\n                    return primes[i]\n        \n        raise Exception('Newman\u2013Williams algorithm failed.')\n    \n    def pollard_rho(n):\n        '''\n        Return a factor of n.\n        '''\n        x = 2\n        y = 2\n        d = 1\n        \n        while d == 1:\n            x = (x*x + 1) % n\n            y = (y*y + 1) % n\n            d = gcd(abs(x - y), n)\n        \n        return d\n    \n    def pollard_rho_factors(n):\n        '''\n        Return a list of factors of n.\n        '''\n        factors = []\n        \n        while n % 2 == 0:\n            n //= 2\n            factors.append(2)\n        \n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            while n % i == 0:\n                n //= i\n                factors.append(i)\n        \n        if n > 2:\n            factors.append(n)\n        \n        return factors\n    \n    def pollard_brent(n):\n        '''\n        Return a factor of n.\n        '''\n        x = random"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return newman_prime(n - 1) + newman_prime(n - 2)\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    def next_prime(n):\n        #while n % 2 == 0:\n        while True:\n            n += 1\n            if is_prime(n):\n                return n\n    \n    if n == 1:\n        return 2\n    else:\n        p = 2\n        a = 2\n        while True:\n            a = next_prime(a)\n            p = next_prime(p)\n            q = p\n            while q!= 1:\n                if q == n:\n                    return p\n                else:\n                    q = next_prime(q)\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    \n    p = 2\n    s = 1\n    m = 0\n    while s < n:\n        p = newman_williams(p)\n        s = s + 1\n        if p == 1:\n            m = m + 1\n    if m == 0:\n        return None\n    else:\n        return p\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    new_tup1 = []\n    new_tup2 = []\n    for x, y in zip(test_tup1, test_tup2):\n        new_tup1.append(x/y)\n        new_tup2.append(y/x)\n    return new_tup1, new_tup2\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #Do not modify the following function signature\n    def division_elements(test_tup1, test_tup2):\n        return tuple([a/b for (a,b) in zip(test_tup1, test_tup2)])\n    #Do not modify anything below\n    assert type(test_tup1) == tuple\n    assert type(test_tup2) == tuple\n    assert len(test_tup1) == len(test_tup2)\n    return division_elements(test_tup1, test_tup2)\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    div_res = tuple()\n    len_test_tup1 = len(test_tup1)\n    len_test_tup2 = len(test_tup2)\n    if len_test_tup1!= len_test_tup2:\n        return \"Tuples have different lengths\"\n    else:\n        for i in range(0,len_test_tup1):\n            div_res = div_res + (test_tup1[i] / test_tup2[i],)\n        return div_res\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x / y, test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    \n    return test_tup1 / test_tup2\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for index, num in enumerate(test_tup1):\n        try:\n            result.append(float(num)/float(test_tup2[index]))\n        except ZeroDivisionError as zde:\n            result.append(float('inf'))\n        except IndexError as ie:\n            result.append(float('nan'))\n    return tuple(result)\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    n1 = len(test_tup1)\n    n2 = len(test_tup2)\n    output = []\n    for i in range(n1):\n        output.append(test_tup1[i] / test_tup2[i])\n    return output\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    \n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] / test_tup2[i],)\n    \n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result1 = 0\n    result2 = 0\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1)%2!= 0:\n        return None\n    else:\n        return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return None\n    else:\n        return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    if L >= len(list1):\n        return None\n    \n    elif L > len(list1):\n        return None\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Your code here\n    return None\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = []\n    part2 = []\n    for i in range(L):\n        part1.append(list1[i])\n    for i in range(L, len(list1)):\n        part2.append(list1[i])\n    return (part1, part2)\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    L = int(L)\n    first_part = []\n    second_part = []\n    for index in range(L):\n        first_part.append(list1[index])\n    for index in range(L, len(list1)):\n        second_part.append(list1[index])\n    return (first_part, second_part)\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age == 0:\n        return 'the dog is a baby'\n    elif h_age <= 2:\n        return 'the dog is a puppy'\n    elif h_age <= 4:\n        return 'the dog is a small boy'\n    elif h_age <= 6:\n        return 'the dog is a young girl'\n    elif h_age <= 8:\n        return 'the dog is a teenager'\n    elif h_age <= 10:\n        return 'the dog is an adult'\n    elif h_age <= 13:\n        return 'the dog is an older adult'\n    else:\n        return 'the dog is an older adult'\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        return None\n    elif h_age < 4:\n        return 0\n    elif h_age < 7:\n        return 3\n    elif h_age < 10:\n        return 6\n    elif h_age < 13:\n        return 8\n    elif h_age < 17:\n        return 11\n    elif h_age < 20:\n        return 14\n    elif h_age < 24:\n        return 17\n    elif h_age < 28:\n        return 21\n    elif h_age < 32:\n        return 25\n    elif h_age < 36:\n        return 28\n    elif h_age < 41:\n        return 32\n    elif h_age < 46:\n        return 37\n    elif h_age < 51:\n        return 42\n    elif h_age < 56:\n        return 47\n    else:\n        return None\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age == None:\n        return None\n    if h_age < 0:\n        return None\n    return (h_age * 7)\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age == 0:\n        return \"can't be zero\"\n    elif h_age == 1:\n        return \"is a puppy\"\n    elif h_age == 2:\n        return \"is a very young boy\"\n    elif h_age == 3:\n        return \"is a young boy\"\n    elif h_age == 4:\n        return \"is a boy\"\n    elif h_age == 5:\n        return \"is a man\"\n    elif h_age == 6:\n        return \"is a young man\"\n    elif h_age == 7:\n        return \"is a man\"\n    elif h_age == 8:\n        return \"is a young man\"\n    elif h_age == 9:\n        return \"is a man\"\n    elif h_age == 10:\n        return \"is a young man\"\n    elif h_age == 11:\n        return \"is a man\"\n    elif h_age == 12:\n        return \"is a young man\"\n    elif h_age == 13:\n        return \"is a man\"\n    elif h_age == 14:\n        return \"is a young man\"\n    elif h_age == 15:\n        return \"is a man\"\n    elif h_age == 16:\n        return \"is a young man\"\n    elif h_age == 17:\n        return \"is a man\"\n    elif h_age == 18:\n        return \"is a young man\"\n    elif h_age == 19:\n        return \"is a man\"\n    elif h_age == 20:\n        return \"is a young man\"\n    elif h_age == 21:\n        return \"is a man\"\n    elif h_age == 22:\n        return \"is a young man\"\n    elif h_age == 23:\n        return \"is a man\"\n    elif h_age == 24:\n        return \"is a young man\"\n    elif h_age == 25:\n        return \"is a man\"\n    elif h_age == 26:\n        return \"is a young man\"\n    elif h_age == 27:\n        return \"is a man\"\n    elif h_age == 28:\n        return \"is a young man\"\n    elif h_age == 29:\n        return \"is a man\"\n    elif h_age == 30:\n        return \"is a young man\"\n    elif h_age == 31:\n        return \"is a man\"\n    elif h_age == 32:\n        return \"is a young man\"\n    elif h_age == 33:\n        return \"is a man\"\n    elif h_age == 34:\n        return \"is a young man\"\n    elif h_age == 35:\n        return \"is a man\"\n    elif h_age == 36:\n        return \"is a young man\"\n    elif h_age == 37:\n        return \"is a man\"\n    elif h_age == 38:\n        return \"is a young man\"\n    elif h_age == 39:\n        return \"is a man\"\n    elif h_age == 40:\n        return \"is a young man\"\n    elif h_age == 41:\n        return \"is a man\"\n    elif h_age == 42:\n        return \"is a young man\"\n    elif h_age == 43:\n        return \"is a man\"\n    elif h_age == 44:\n        return \"is a young man\"\n    elif h_age == 45:\n        return \"is a man\"\n    elif h_age == 46:\n        return \"is a young man\"\n    elif h_age == 47:\n        return \"is a man\"\n    elif h_age == 48:\n        return \"is a young man\"\n    elif h_age == 49:\n        return \"is a man\"\n    elif h_age == 50:\n        return \"is a young man\"\n    elif h_age == 51:\n        return \"is a man\"\n    elif h_age == 52:\n        return \"is a young man\"\n    elif h_age == 53:\n        return \"is a man\"\n    elif h_age == 54:\n        return \"is a young man\"\n    elif h_age == 55:\n        return \"is a man\"\n    elif h_age == 56:\n        return \"is a young man\"\n    elif h_age == 57:\n        return \"is a man\"\n    elif h_age == 58:\n        return \"is a young man\"\n    elif h_age == 59:\n        return \"is a man\"\n    elif h_age == 60:\n        return \"is a young man\"\n    elif h_age == 61:\n        return \"is a man\"\n    elif h_age == 62:\n        return \"is a young man\"\n    elif h_age == 63:\n        return \"is a man\"\n    elif h_age == 64:\n        return \"is a young man\"\n    elif h_age == 65:\n        return \"is a man\"\n    elif h_age == 66:\n        return \"is a young man\"\n    elif h_age == 67:\n        return \"is a man\"\n    elif h_age == 68:\n        return \"is a young man\"\n    elif h_age == 69:\n        return \"is a man\"\n    elif h_age == 70:\n        return \"is a young man\"\n    elif h_age == 71:\n        return \"is a man\"\n    elif h_age == 72:\n        return \"is a young man\"\n    elif h_age == 73:\n        return \"is a man\"\n    elif h_age == 74:\n        return \"is a young man\"\n    elif h_age == 75:\n        return \"is a man\"\n    elif h_age == 76:\n        return \"is a young man\"\n    elif h_age == 77:\n        return \"is a man\"\n    elif h_age == 78:\n        return \"is a young man\"\n    elif h_age == 79:\n        return \"is a man\"\n    elif h_age == 80:\n        return \"is a young man\"\n    elif h_age == 81:\n        return \"is a man\"\n    elif h_age == 82:\n        return \"is a young man\"\n    elif h_age == 83:\n        return \"is a man\"\n    elif h_age == 84:\n        return \"is a young man\"\n    elif h_age == 85:\n        return \"is a man\"\n    elif h_age == 86:\n        return \"is a young man\"\n    elif h_age == 87:\n        return \"is a man\"\n    elif h_age == 88:\n        return \"is a young man\"\n    elif h_age == 89:\n        return \"is a man\"\n    elif h_age == 90:\n        return \"is a young man\"\n    elif h_age == 91:\n        return \"is a man\"\n    elif h_age == 92:\n        return \"is a young man\"\n    elif h_age == 93:\n        return \"is a man\"\n    elif h_age == 94:\n        return \"is a young man\"\n    elif h_age == 95:\n        return \"is a man\"\n    elif h_age == 96:\n        return \"is a young man\"\n    elif h_age == 97:\n        return \"is a man\"\n    elif h_age == 98:\n        return \"is a young man\"\n    elif h_age == 99:\n        return \"is a man\"\n    elif h_age == 100:\n        return \"is a young man\"\n    elif h_age == 101:\n        return \"is a man\"\n    elif h_age == 102:\n        return \"is a young man\"\n    elif h_age == 103:\n        return \"is a man\"\n    elif h_age == 104:\n        return \"is a young man\"\n    elif h_age == 105:\n        return \"is a man\"\n    elif h_age == 106:\n        return \"is a young man\"\n    elif h_age == 107:\n        return \"is a man\"\n    elif h_age == 108:\n        return \"is a youn"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age*7\n    print \"the dog's age is\",dog_years,\"in dog's years\"\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 0:\n        print \"Age must be a positive number\"\n    elif h_age < 10:\n        return \"Young\"\n    elif h_age < 13:\n        return \"Still young\"\n    elif h_age < 20:\n        return \"Old\"\n    else:\n        return \"Still young\"\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 0:\n        return 'You must enter a valid age.'\n    elif h_age >= 3:\n        return str(h_age * 7) +'dog years'\n    elif h_age == 1:\n        return str(h_age * 4) +'dog year'\n    elif h_age == 2:\n        return str(h_age * 2) +'dog years'\n    else:\n        return 'You must enter a valid age.'\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        print(\"The dog's age is not defined.\")\n    elif h_age < 2:\n        return 0\n    elif h_age < 4:\n        return 1\n    elif h_age < 8:\n        return 2\n    elif h_age < 13:\n        return 3\n    elif h_age < 18:\n        return 4\n    elif h_age < 22:\n        return 5\n    elif h_age < 26:\n        return 6\n    else:\n        return 7\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    ret = []\n    for i in range(0, len(S), step):\n        ret.append(S[i:i+step])\n    return ret\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = []\n    for i in range(0, len(S), step):\n        L.append(S[i:i+step])\n    return L\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    res = []\n    for i in range(0, len(S), step):\n        res.append(S[i:i+step])\n    return res\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if type(l) == type(1) or type(l) == type(1.0):\n        l = float(l)\n    else:\n        print('Error: Input must be a numerical value.')\n        return\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    from math import sqrt\n    a=l**2\n    return 6*a\n    \ndef lateralsurface_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given its side lengths.\n    '''\n    from math import sqrt\n    a=l*w\n    b=w*h\n    c=h*l\n    return 2*(a+b+c)\n    \ndef lateralsurface_prism(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a prism given its side lengths.\n    '''\n    from math import sqrt\n    a=2*l*b+2*b*h+2*h*l\n    b=h*(l**2)\n    return a+b\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*(l**2)\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    A=6*(l**2)\n    return A\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    face_area = l ** 2\n    lateral_area = (face_area * 6)\n    return lateral_area\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # surface area of a cube = 6 * l^2\n    return 6 * l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l ** 2\n    return area\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n*n + square_Sum(n-1)\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return int((n * (n + 1))/2) ** 2\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    nums = [x for x in range(1,n+1,2)]\n    sum = sum(nums)\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Your Code Here\n    total = 0\n    for x in range(1, n+1):\n        if x % 2!= 0:\n            total = total + (x ** 2)\n    return total\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    return ((n*(n+1)*(n+2))/6)\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i*i\n    return total\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([i**2 for i in range(n) if i % 2!= 0])\n    "
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n<=0:\n        return \"Input is not valid!\"\n    else:\n        i=0\n        result = 0\n        while i<n:\n            if i%2==1:\n                result = result + i*i\n            i = i+1\n        return result\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n<0:\n        return None\n    else:\n        return sum([x**2 for x in range(n+1) if x%2!=0])\n    \ndef even_Square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n even natural numbers.\n    '''\n    if n<0:\n        return None\n    else:\n        return sum([x**2 for x in range(n+1) if x%2==0])\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    sum = 0\n    for x in range(1, n+1):\n        if x%2!= 0:\n            sum = sum + x**2\n    return sum\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: \n        return 1\n    else: \n        return n * find_star_num(n - 1)\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num_stars = 0\n    num_before_n = 0\n    \n    while num_stars < n: \n        num_stars += 1\n        num_before_n += 1\n        if num_before_n % 2 == 1:\n            num_before_n = 1\n        \n    return num_before_n\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return find_star_num(n-1) + find_star_num(n-2)\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    if n % 2 == 1:\n        return find_star_num(n - 1) * 3 + 2\n    else:\n        return find_star_num(n / 2) ** 2\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    assert n >= 1\n    \n    result = 1\n    num = 1\n    \n    while num!= n:\n        result *= num\n        num += 1\n    \n    return result\n    \ndef is_prime(n):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    \n    if n <= 1:\n        return False\n    \n    if n == 2:\n        return True\n    \n    if n % 2 == 0:\n        return False\n    \n    for i in range(3, n, 2):\n        if n % i == 0:\n            return False\n    \n    return True\n    \ndef num_fib_num(n):\n    '''\n    Write a function to return the nth Fibonacci number.\n    '''\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 1\n    \n    return num_fib_num(n - 1) + num_fib_num(n - 2)\n    \ndef num_fib_num_sq(n):\n    '''\n    Write a function to return the nth Fibonacci number squared.\n    '''\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 1\n    \n    return num_fib_num_sq(n - 1) + num_fib_num_sq(n - 2)\n    \ndef str_num_is_even(n):\n    '''\n    Write a function to determine if a string represents an even number.\n    '''\n    \n    if n % 2 == 0:\n        return True\n    else:\n        return False\n    \ndef str_num_is_odd(n):\n    '''\n    Write a function to determine if a string represents an odd number.\n    '''\n    \n    if n % 2 == 0:\n        return False\n    else:\n        return True\n    \ndef str_num_is_palindrome(n):\n    '''\n    Write a function to determine if a string represents a palindrome.\n    '''\n    \n    if n == n[::-1]:\n        return True\n    else:\n        return False\n    \ndef str_num_is_power(n):\n    '''\n    Write a function to determine if a string represents a power of n.\n    '''\n    \n    # convert n to an integer\n    n = int(n)\n    \n    # check if n is 2\n    if n == 2:\n        return True\n    \n    # if n is not 2, check if n is power of 2\n    if n & (n - 1) == 0:\n        return True\n    else:\n        return False\n    \ndef str_num_is_anagram(str1, str2):\n    '''\n    Write a function to determine if two strings are anagrams.\n    '''\n    \n    if len(str1)!= len(str2):\n        return False\n    \n    count = {}\n    \n    for ch in str1:\n        if ch in count:\n            count[ch] += 1\n        else:\n            count[ch] = 1\n            \n    for ch in str2:\n        if ch in count:\n            count[ch] -= 1\n            \n    for value in count.values():\n        if value!= 0:\n            return False\n    \n    return True\n    \ndef str_num_is_lychrel(n):\n    '''\n    Write a function to determine if a number is Lychrel.\n    '''\n    \n    # determine if n is already a Lychrel number\n    if is_prime(n):\n        return False\n    \n    # iterate until n is no longer a Lychrel number\n    while is_prime(n) == False:\n        # if n is even, mod by 2\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            # if n is odd, add it's compliment\n            n = n + int(str(n)[::-1])\n    \n    # n is a Lychrel number\n    return True\n    \ndef str_num_is_pandigital(n):\n    '''\n    Write a function to determine if a string contains all the digits 1 through n inclusive.\n    '''\n    \n    if len(n) > 9:\n        return False\n    \n    if len(n) == 9:\n        if ''.join(sorted(n)) == '123456789':\n            return True\n        else:\n            return False\n    \n    sorted_n = sorted(n)\n    \n    if ''.join(sorted_n) == '123456789':\n        return True\n    else:\n        return False\n    \ndef str_num_is_pandigital_prime(n):\n    '''\n    Write a function to determine if a string contains all the digits 1 through n inclusive and is prime.\n    '''\n    \n    if len(n) > 9:\n        return False\n    \n    if len(n) == 9:\n        if is_prime(int(n)):\n            return True\n        else:\n            return False\n    \n    sorted_n = sorted(n)\n    \n    if is_prime(int(sorted_n)):\n        return True\n    else:\n        return False\n    \ndef str_num_is_pandigital_power(n):\n    '''\n    Write a function to determine if a string contains all the digits 1 through n inclusive and is power of n.\n    '''\n    \n    if len(n) > 9:\n        return False\n    \n    if len(n) == 9:\n        if str_num_is_power(n):\n            return True\n        else:\n            return False\n    \n    sorted_n = sorted(n)\n    \n    if str_num_is_power(int(sorted_n)):\n        return True\n    else:\n        return False\n    \ndef str_num_is_pandigital_power_prime(n):\n    '''\n    Write a function to determine if a string contains all the digits 1 through n inclusive and is power of n and is prime.\n    '''\n    \n    if len(n) > 9:\n        return False\n    \n    if len(n) == 9:\n        if str_num_is_power_prime(n):\n            return True\n        else:\n            return False\n    \n    sorted_n = sorted(n)\n    \n    if str_num_is_power_prime(int(sorted_n)):\n        return True\n    else:\n        return False\n    \ndef str_num_is_pandigital_prime_power(n):\n    '''\n    Write a function to determine if a string contains all the digits 1 through n inclusive and is prime power.\n    '''\n    \n    if len(n) > 9:\n        return False\n    \n    if len(n) == 9:\n        if str_num_is_prime_power(n):\n            return True\n        else:\n            return False\n    \n    sorted_n = sorted(n)\n    \n    if str_num_is_prime_power(int(sorted_n)):\n        return True\n    else:\n        return False\n    \ndef str_num_is_pandigital_prime_power_prime(n):\n    '''\n    Write a function to determine if a string contains all the digits 1 through n inclusive and is prime power and is prime.\n    '''\n    \n    if len(n) > 9:\n        return False\n    \n    if len(n) == 9:\n        if str_num_is_prime_power_prime(n):\n            return True\n        else:\n            return False\n    \n    sorted_n = sorted(n)\n    \n    if str_num_is_prime_power_prime(int(sorted_n)):\n        return True\n    else:\n        return False\n    \ndef str_num_is_pandigital_prime_power_prime_prime(n):\n    '''\n    Write a function to determine if a string contains all the digits 1 through n inclusive and is prime power and is prime power.\n    '''\n    \n    if len(n) > 9:\n        return False\n    \n    if len(n) == 9:\n        if str_num_is_prime_power_prime_prime(n):\n            return True\n        else:\n            return False\n    "
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    count = 0\n    i = 1\n    while i <= n:\n        count += 1\n        i *= 2\n    return count\n    "
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return (5*n**2 - 5*n + 6) // 2\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # First, compute the n - 1'th star number\n    if n == 1:\n        return 1\n    else:\n        return find_star_num(n - 1) + (n - 1) * 10**(n - 2)\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star = [0]*(n+1)\n    start = 1\n    for i in xrange(1, n+1):\n        start *= i\n        star[i] = start\n    return star[n]\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if ord(k) > 256:\n        return \"Not a valid character\"\n    else:\n        return ord(k)\n        \n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        return ord(k)\n    else:\n        return 0\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if ord('A') <= ord(k) <= ord('Z'):\n        return ord(k) - ord('A')\n    elif ord('a') <= ord(k) <= ord('z'):\n        return ord(k) - ord('a') + 26\n    else:\n        return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef freq_analysis(s):\n    '''\n    Return a dictionary with the characters and their frequency.\n    '''\n    d = {}\n    for c in s:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n    return d\n    \ndef most_common(d):\n    '''\n    Return the character with the highest frequency.\n    '''\n    return max(d, key=d.get)\n    \ndef freq_anal_cmp(x, y):\n    '''\n    Compare two characters and return the result of their frequency.\n    '''\n    return cmp(x[1], y[1])\n    \ndef freq_anal_sort(d):\n    '''\n    Return a sorted list of tuples based on the result of the frequency comparison.\n    '''\n    return sorted(d.items(), cmp=freq_anal_cmp)\n    \ndef freq_anal_split(d):\n    '''\n    Return a tuple of the most common character and the rest of the characters.\n    '''\n    if len(d) == 0:\n        return ('', '')\n    return (d.keys()[0], ''.join(d.keys()[1:]))\n    \ndef is_palindrome(s):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome_cmp(x, y):\n    '''\n    Compare two strings and return a result.\n    '''\n    return cmp(x, y)\n    \ndef is_palindrome_sort(s):\n    '''\n    Return a sorted list of tuples based on the result of the comparison of two strings.\n    '''\n    return sorted(s, cmp=is_palindrome_cmp)\n    \ndef is_palindrome_split(s):\n    '''\n    Return a tuple of the first and the last characters of a string.\n    '''\n    if len(s) == 0:\n        return ('', '')\n    return (s[0], s[-1])\n    \ndef reverse_string(s):\n    '''\n    Return a reversed string.\n    '''\n    return s[::-1]\n    \ndef reverse_string_cmp(x, y):\n    '''\n    Compare two strings and return the result of their reversal.\n    '''\n    return cmp(x, y)\n    \ndef reverse_string_sort(s):\n    '''\n    Return a sorted list of tuples based on the result of the comparison of two strings.\n    '''\n    return sorted(s, cmp=reverse_string_cmp)\n    \ndef reverse_string_split(s):\n    '''\n    Return a tuple of the first and the last characters of a string.\n    '''\n    if len(s) == 0:\n        return ('', '')\n    return (s[-1], s[0])\n    \ndef common_substrings(s1, s2):\n    '''\n    Return a list of the common substring from two strings.\n    '''\n    l = []\n    for i in range(len(s1)):\n        for j in range(len(s2)):\n            if s1[i] == s2[j]:\n                l.append(s1[i])\n                i += 1\n                j += 1\n                if i == len(s1) or j == len(s2):\n                    break\n    return l\n    \ndef common_substrings_cmp(x, y):\n    '''\n    Compare two strings and return the result of their common substring.\n    '''\n    if len(x) == 0 or len(y) == 0:\n        return 0\n    return cmp(x, y)\n    \ndef common_substrings_sort(s):\n    '''\n    Return a sorted list of tuples based on the result of the comparison of two strings.\n    '''\n    return sorted(s, cmp=common_substrings_cmp)\n    \ndef common_substrings_split(s):\n    '''\n    Return a tuple of the first and the last characters of a string.\n    '''\n    if len(s) == 0:\n        return ('', '')\n    return (s[0], s[-1])\n    \ndef my_atbash(s):\n    '''\n    Return the Atbash cipher of a string.\n    '''\n    d = {'a': 'z', 'b': 'y', 'c': 'x', 'd': 'w', 'e': 'v', 'f': 'u', 'g': 't', 'h':'s', 'i': 'r', 'j': 'q', 'k': 'p', 'l': 'o','m': 'n', 'n':'m', 'o': 'l', 'p': 'k', 'q': 'j', 'r': 'i','s': 'h', 't': 'g', 'u': 'f', 'v': 'e', 'w': 'd', 'x': 'c', 'y': 'b', 'z': 'a','':''}\n    return ''.join([d[x] for x in s])\n    \ndef my_atbash_cmp(x, y):\n    '''\n    Compare two strings and return the result of Atbash cipher.\n    '''\n    return cmp(x, y)\n    \ndef my_atbash_sort(s):\n    '''\n    Return a sorted list of tuples based on the result of the comparison of two strings.\n    '''\n    return sorted(s, cmp=my_atbash_cmp)\n    \ndef my_atbash_split(s):\n    '''\n    Return a tuple of the first and the last characters of a string.\n    '''\n    if len(s) == 0:\n        return ('', '')\n    return (s[0], s[-1])\n    \ndef prefix_suffix(s):\n    '''\n    Return a tuple of the first and the last characters of a string.\n    '''\n    if len(s) == 0:\n        return ('', '')\n    return (s[:1], s[-1:])\n    \ndef prefix_suffix_cmp(x, y):\n    '''\n    Compare two strings and return the result of their common prefix.\n    '''\n    return cmp(x, y)\n    \ndef prefix_suffix_sort(s):\n    '''\n    Return a sorted list of tuples based on the result of the comparison of two strings.\n    '''\n    return sorted(s, cmp=prefix_suffix_cmp)\n    \ndef prefix_suffix_split(s):\n    '''\n    Return a tuple of the first and the last characters of a string.\n    '''\n    if len(s) == 0:\n        return ('', '')\n    return (s[:1], s[-1:])\n    \ndef partition(s):\n    '''\n    Write a function that takes a string and returns a list of all the possible (first, last) pairs of substrings.\n    '''\n    l = []\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            l.append((s[i:j], s[j:i]))\n    return l\n    \ndef partition_cmp(x, y):\n    '''\n    Compare two strings and return the result of their common prefix.\n    '''\n    return cmp(x, y)\n    \ndef partition_sort(s):\n    '''\n    Return a sorted list of tuples based on the result of the comparison of two strings.\n    '''\n    return sorted(s, cmp=partition_cmp)\n    \ndef partition_split(s):\n    '''\n    Return a tuple of the first and the last characters of a string.\n    '''\n    if len(s) == 0:\n        return ('', '')\n    return (s[:1], s[-1:])\n    \ndef all_anagrams(s):\n    '''\n    Write a function to find all the anagrams of a string.\n    '''\n    l = []\n    d = {}\n    for i in range(len(s)):\n        key = ''.join(sorted("
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if len(arr) < 2:\n        return\n    even_sum = 0\n    for i in range(1,len(arr)):\n        if i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0, len(arr), 2):\n        total = total + arr[i]\n    return total\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if arr == []:\n        return None\n    arr = arr[0]\n    return sum([arr[i] for i in range(0, len(arr), 2) if i%2 == 0])\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[::2])\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i%2 == 0 and arr[i]%2 == 0:\n            sum += arr[i]\n    return sum\n    \ndef is_fizz_buzz(arr):\n    '''\n    Write a python function to find if a given list is fizz-buzz or not.\n    '''\n    for i in range(len(arr)):\n        if i%3 == 0 and i%5 == 0:\n            arr[i] = 'FizzBuzz'\n        elif i%3 == 0:\n            arr[i] = 'Fizz'\n        elif i%5 == 0:\n            arr[i] = 'Buzz'\n    return arr\n    \ndef delete_middle_element(arr):\n    '''\n    Write a python function to delete a given middle element from a list.\n    '''\n    del arr[len(arr)/2]\n    return arr\n    \ndef is_palindrome(arr):\n    '''\n    Write a python function to find if a given list is palindrome or not.\n    '''\n    for i in range(len(arr)):\n        if arr[i]!= arr[len(arr)-i-1]:\n            return False\n    return True\n    \ndef remove_duplicate_words(arr):\n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    new_arr = []\n    for i in arr:\n        if i not in new_arr:\n            new_arr.append(i)\n    return new_arr\n    \ndef print_length_of_words(arr):\n    '''\n    Write a python function to find the length of all the words in a list.\n    '''\n    length = 0\n    for i in arr:\n        length += len(i)\n    print length\n    \ndef find_max_word_length(arr):\n    '''\n    Write a python function to find the maximum length of all the words in a list.\n    '''\n    max_len = 0\n    for i in arr:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n    \ndef sum_of_all_numbers(arr):\n    '''\n    Write a python function to find the sum of all the numbers in a list.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n    \ndef print_odd_numbers(arr):\n    '''\n    Write a python function to print all the odd numbers in a list.\n    '''\n    for i in arr:\n        if i%2!= 0:\n            print i\n            \ndef print_even_numbers(arr):\n    '''\n    Write a python function to print all the even numbers in a list.\n    '''\n    for i in arr:\n        if i%2 == 0:\n            print i\n            \ndef remove_all_duplicates_from_a_list(arr):\n    '''\n    Write a python function to remove all duplicates in a list.\n    '''\n    new_arr = []\n    for i in arr:\n        if i not in new_arr:\n            new_arr.append(i)\n    return new_arr\n    \ndef reverse_list(arr):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    arr.reverse()\n    return arr\n    \ndef find_the_second_highest_number(arr):\n    '''\n    Write a python function to find the second highest number in a list.\n    '''\n    arr.sort()\n    return arr[len(arr)-2]\n    \ndef is_there_a_duplicate(arr):\n    '''\n    Write a python function to find if a given list contains a duplicate number.\n    '''\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] == arr[j]:\n                return True\n    return False\n    \ndef find_the_length_of_the_longest_substring(arr):\n    '''\n    Write a python function to find the length of the longest substring in a given string.\n    '''\n    max_len = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if len(arr[i:j+1]) > max_len:\n                max_len = len(arr[i:j+1])\n    return max_len\n    \ndef find_the_length_of_the_longest_substring_that_has_all_characters_in_original(arr):\n    '''\n    Write a python function to find the length of the longest substring in a given string that has all the characters of the original string.\n    '''\n    max_len = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if set(arr[i:j+1]) == set(arr):\n                if len(arr[i:j+1]) > max_len:\n                    max_len = len(arr[i:j+1])\n    return max_len\n    \ndef find_the_smallest_number_in_list(arr):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    return min(arr)\n    \ndef find_the_biggest_number_in_list(arr):\n    '''\n    Write a python function to find the biggest number in a list.\n    '''\n    return max(arr)\n    \ndef sort_a_list_with_integers(arr):\n    '''\n    Write a python function to sort a list of integers.\n    '''\n    return sorted(arr)\n    \ndef merge_lists(arr1, arr2):\n    '''\n    Write a python function to merge two sorted lists into a new list in sorted order.\n    '''\n    arr = []\n    while len(arr1)!= 0 and len(arr2)!= 0:\n        if arr1[0] < arr2[0]:\n            arr.append(arr1[0])\n            arr1.pop(0)\n        else:\n            arr.append(arr2[0])\n            arr2.pop(0)\n    if len(arr1) == 0:\n        arr += arr2\n    else:\n        arr += arr1\n    return arr\n    \ndef remove_duplicates(arr):\n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    new_arr = []\n    for i in arr:\n        if i not in new_arr:\n            new_arr.append(i)\n    return new_arr\n    \ndef find_the_second_smallest_number_in_a_list(arr):\n    '''\n    Write a python function to find the second smallest number in a list.\n    '''\n    arr.sort()\n    return arr[1]\n    \ndef make_list_of_numbers_that_are_divisible_by_3(arr):\n    '''\n    Write a python function to find all the numbers that are divisible by 3 in a list.\n    '''\n    new_arr = []\n    for i in arr:\n        if i%3 == 0:\n            new_arr.append(i)\n    return new_arr\n    \ndef make_list_of_numbers_that_are_divisible_by_5(arr):\n    '''\n    Write a python function to find all the numbers that are divisible by 5 in a list.\n    '''\n    new_arr = []\n    for i in arr:\n        if i%5 == 0:\n            new_arr.append(i)\n    return new_arr\n    \ndef sum_of_numbers_that_are_divisible_by_both_3_and_5(arr):\n    '''\n    Write a python function to find all the numbers that are divisible by both 3 and 5 in a list.\n    '''\n    new_arr = []\n    for i in arr:\n        if i%3 == 0 and i%5 == 0:\n            new_arr.append(i)\n    return new_arr\n    \ndef print_the_numbers_in_a_list_tha"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0,len(arr),2):\n        if arr[i]%2 == 0:\n            total+=arr[i]\n    return total\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_index = 0\n    for i in range(0,len(arr),2):\n        sum_even_index += arr[i]\n    return sum_even_index\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum([arr[i] for i in range(len(arr)) if i % 2 == 0 and i!= 0])\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # Your code here\n    arr_length = len(arr)\n    if arr_length == 0:\n        return 0\n    elif arr_length == 1:\n        return arr[0]\n    elif arr_length == 2:\n        return arr[0]+arr[1]\n    else:\n        return arr[0]+arr[1]+sum_even_and_even_index(arr[2:])\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[::2])\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    # set variable to zero\n    total = 0\n    # loop through range of 0 to n inclusive\n    for i in range(0, n+1):\n        # if remainder of i modulo 2 is zero\n        if (i%2 == 0):\n            # square i\n            i = i ** 5\n            # add i to total\n            total = total + i\n    # return total\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(i**5 for i in range(2,n+1,2) if i%2==0)\nprint(even_Power_Sum(5))\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if (i**5) % 2 == 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    pass\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(x**5 for x in range(n) if x%2 == 0)\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(map(lambda x: x**5,range(2,n+1,2)))\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if i**5 % 2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    i = 1\n    while i < n:\n        if i ** 5 % 2 == 0:\n            total += i ** 5\n        i += 1\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # n = 4\n    # s = 0\n    # for i in range(2, n+1, 2):\n    #     s += pow(i, 5)\n    #     #print(i, pow(i, 5))\n    # return s\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    summation = 0\n    for i in range(n):\n        if i**5 % 2 == 0:\n            summation += i**5\n    return summation\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    \n    # define the function here\n    result = [item[-1] for item in test_list]\n    \n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    \n    return [(x[-1]) for x in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[-1] for x in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append(i[-1])\n    return new_list\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [elem[-1] for elem in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append(i[-1])\n    return new_list\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[-1] for t in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [(x[1],) for x in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[1] for tup in test_list]\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for index in range(0, len(test_tup1)):\n        new_tup += (test_tup1[index] - test_tup2[index],)\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([test_tup1[i]-test_tup2[i] for i in range(len(test_tup1))])\n    \ndef print_list(lst):\n    '''\n    Write a function that takes in a list of integers and prints out the elements of the list on a line.\n    '''\n    for i in range(len(lst)):\n        print(lst[i])\n        \ndef reverse_list(lst):\n    '''\n    Write a function that takes in a list of integers and returns a new list that is the reverse of the original list.\n    '''\n    return lst[::-1]\n    \ndef remove_duplicates(lst):\n    '''\n    Write a function that takes in a list of integers and returns a new list that has all of the duplicates removed from the original list.\n    '''\n    new_lst = []\n    for elem in lst:\n        if elem not in new_lst:\n            new_lst.append(elem)\n    return new_lst\n    \ndef sum_of_squares(lst):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the squares of the elements of the list.\n    '''\n    return sum([x*x for x in lst])\n    \ndef get_list_of_sums(lst):\n    '''\n    Write a function that takes in a list of integers and returns a list of the sums of each consecutive pair of elements.\n    For example, if the input list is [1,2,3,4,5], the function should return [3,5,7,9].\n    '''\n    new_lst = []\n    for i in range(1,len(lst)):\n        new_lst.append(lst[i]+lst[i-1])\n    return new_lst\n    \ndef get_value_at_index(lst, index):\n    '''\n    Write a function that takes in a list of integers and an index and returns the value at that index in the list.\n    For example, if the input list is [1,2,3,4], the function should return 2.\n    '''\n    return lst[index]\n    \ndef print_list_from_index(lst, start, end):\n    '''\n    Write a function that takes in a list of integers and prints out the list, from the start index to the end index, inclusive.\n    '''\n    for i in range(start,end+1):\n        print(lst[i])\n        \ndef get_length_of_list(lst):\n    '''\n    Write a function that takes in a list of integers and returns the length of the list.\n    '''\n    return len(lst)\n    \ndef get_max_element(lst):\n    '''\n    Write a function that takes in a list of integers and returns the maximum value in the list.\n    '''\n    return max(lst)\n    \ndef get_min_element(lst):\n    '''\n    Write a function that takes in a list of integers and returns the minimum value in the list.\n    '''\n    return min(lst)\n    \ndef count_occurrences(lst, elem):\n    '''\n    Write a function that takes in a list of integers and an integer and returns the number of times the integer appears in the list.\n    '''\n    return lst.count(elem)\n    \ndef print_all_elements(lst):\n    '''\n    Write a function that takes in a list of integers and prints out each element of the list on a line.\n    '''\n    for i in range(len(lst)):\n        print(lst[i])\n    \ndef get_index_of_first_element(lst, elem):\n    '''\n    Write a function that takes in a list of integers and an integer and returns the index of the first occurrence of the integer in the list.\n    '''\n    return lst.index(elem)\n    \ndef get_index_of_last_element(lst, elem):\n    '''\n    Write a function that takes in a list of integers and an integer and returns the index of the last occurrence of the integer in the list.\n    '''\n    return lst.index(elem)\n    \ndef get_index_of_first_value_equal_to(lst, elem):\n    '''\n    Write a function that takes in a list of integers and an integer and returns the index of the first occurrence of the integer in the list.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        if lst[i] == elem:\n            new_lst.append(i)\n    return new_lst[0]\n    \ndef get_index_of_last_value_equal_to(lst, elem):\n    '''\n    Write a function that takes in a list of integers and an integer and returns the index of the last occurrence of the integer in the list.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        if lst[i] == elem:\n            new_lst.append(i)\n    return new_lst[-1]\n    \ndef get_index_of_max_value(lst):\n    '''\n    Write a function that takes in a list of integers and returns the index of the max value in the list.\n    '''\n    return lst.index(max(lst))\n    \ndef get_index_of_min_value(lst):\n    '''\n    Write a function that takes in a list of integers and returns the index of the min value in the list.\n    '''\n    return lst.index(min(lst))\n    \ndef get_average(lst):\n    '''\n    Write a function that takes in a list of integers and returns the average value of the list.\n    '''\n    return sum(lst)/len(lst)\n    \ndef get_index_of_max_value_sub_list(lst, start, end):\n    '''\n    Write a function that takes in a list of integers and returns the index of the max value of a sublist from the start index to the end index.\n    '''\n    return lst.index(max(lst[start:end+1]))\n    \ndef get_index_of_min_value_sub_list(lst, start, end):\n    '''\n    Write a function that takes in a list of integers and returns the index of the min value of a sublist from the start index to the end index.\n    '''\n    return lst.index(min(lst[start:end+1]))\n    \ndef sort_list_by_first_element(lst):\n    '''\n    Write a function that takes in a list of integers and returns a sorted list where the first element is the greatest and the last element is the smallest.\n    '''\n    return sorted(lst)\n    \ndef sort_list_by_last_element(lst):\n    '''\n    Write a function that takes in a list of integers and returns a sorted list where the first element is the smallest and the last element is the greatest.\n    '''\n    return lst[::-1]\n    \ndef get_sum_of_list(lst):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the elements in the list.\n    '''\n    return sum(lst)\n    \ndef get_product_of_list(lst):\n    '''\n    Write a function that takes in a list of integers and returns the product of the elements in the list.\n    '''\n    return reduce(lambda x,y: x*y, lst)\n    \ndef get_difference_of_max_and_min(lst):\n    '''\n    Write a function that takes in a list of integers and returns the difference between the maximum value and the minimum value in the list.\n    '''\n    return max(lst)-min(lst)\n    \ndef get_sorted_list_from_max_value(lst):\n    '''\n    Write a function that takes in a list of integers and returns a sorted list where the max value is first and the min value is last.\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([test_tup1[i] - test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([i - j for i, j in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([test_tup1[i]-test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([test_tup1[x] - test_tup2[x] for x in range(len(test_tup1))])\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tup1, tup2 = (0,0), (0,0)\n    for i in range(len(test_tup1)):\n        tup1 = (tup1[0] - test_tup2[i], tup1[1] - test_tup2[i])\n    return tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] - test_tup2[i],)\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    l1 = len(test_tup1)\n    l2 = len(test_tup2)\n    if l1!= l2:\n        return False\n    else:\n        for i in range(l1):\n            test_tup1[i] = test_tup1[i] - test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    if n%2 == 1:\n        for i in range(n):\n            if i%2 == 0:\n                sum = sum + binomial(n,i)\n        return sum\n    else:\n        for i in range(n):\n            if i%2 == 0:\n                sum = sum + binomial(n,i)\n        return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # return n * (n+1) / 2\n    # return (n+1) * n / 2\n    return n * (n-1) / 2\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    assert n >= 0\n    if n <= 2:\n        return n\n    else:\n        return (n*(n-1))//2\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n/2)*(n/2) + even_binomial_Coeff_Sum(n-1)\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * even_binomial_Coeff_Sum(n-1)\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Create a list to store the binomial coefficents.\n    binomials = [] \n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial = lambda n, r:int(math.factorial(n) / (math.factorial(n - r) * math.factorial(r)))\n    sum = 0\n    for i in range(n+1):\n        sum += binomial(n, i)\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return 2 * even_binomial_Coeff_Sum(n-1) + even_binomial_Coeff_Sum(n-2)\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # base case\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    else:\n        return even_binomial_Coeff_Sum( n - 2) + (n - 1)\ndef even_binomial_Coeff_product( n, k):\n    '''\n    Write a python function that takes in a positive integer n and finds the product of all the even index binomial coefficients up to n.\n    '''\n    # base case\n    if k == 0:\n        return 1\n    elif k < 0:\n        return 0\n    else:\n        return even_binomial_Coeff_product( n - 1, k - 1) + (n - k)\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 3\n    else:\n        return (n*even_binomial_Coeff(n-2)+even_binomial_Coeff(n-1))\n    \n    \ndef factorial(n):\n    '''\n    Write a python function that takes in a non-negative integer n and finds the factorial of n.\n    '''\n    if n==0:\n        return 1\n    else:\n        return (n*factorial(n-1))\n        \ndef is_perfect_square(n):\n    '''\n    Write a python function that takes in a non-negative integer n and returns True if n is a perfect square and False otherwise.\n    '''\n    root=int(math.sqrt(n))\n    if n==root*root:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return pi*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (math.pi * r**2 * h)\n    \n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Compute the surface area\n    sa = math.pi * r**2 + 2 * math.pi * r * h\n    # Compute the volume\n    v = sa * h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    return math.pi*(r**2)*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159265\n    return pi*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pass\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return math.pi * r**2 * h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*r*r*h\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_new=[]\n    for key in dict:\n        if dict[key]>=n:\n            dict_new.append(dict[key])\n    return dict_new\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    output = {}\n    for key in dict:\n        if dict[key] >= n:\n            output[key] = dict[key]\n    return output\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict=dict()\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key]=value\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    if n == 0:\n        return {}\n    \n    result = {}\n    for key,value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    newdict=dict()\n    for i in dict.keys():\n        if dict[i] >= n:\n            newdict[i]=dict[i]\n    return newdict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for (k,v) in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    pass\n    \nprint(dict_filter({1:5, 2:2, 3:3, 4:4, 5:5, 6:6}, 5))\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dic={}\n    for k,v in dict.items():\n        if v>=n:\n            dic[k]=v\n    return dic\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    newDict = {}\n    for key in dict:\n        if dict[key] >= n:\n            newDict[key] = dict[key]\n    return newDict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # Your Code Here\n    dict2 = {}\n    for key,value in dict.items():\n        if value >= n:\n            dict2[key] = value\n    return dict2\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for t in test_tup:\n        if t == test_tup[0]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    max_elem = -1\n    count = 0\n    for i in range(0, len(test_tup)):\n        if test_tup[i] > max_elem:\n            max_elem = test_tup[i]\n            count = 1\n        elif test_tup[i] == max_elem:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    n = len(test_tup)\n    count = 0\n    for i in range(n):\n        for j in range(i):\n            if test_tup[i] == test_tup[j]:\n                count += 1\n                break\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return tuple([tup[0] for tup in test_tup].count(tup[0]))\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len(test_tup) - test_tup.index(tuple(test_tup)[0])\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    total = 0\n    for x in test_tup:\n        if x == test_tup[0]:\n            total += 1\n    return total\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[0]:\n            break\n        count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for tup in test_tup:\n        if tup[0] == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # using filter function for the first element\n    # [print(x) for x in filter(lambda x: x[0] == test_tup[0], test_tuple)]\n    # using list comprehension for the first element\n    return len([x for x in test_tup if x == test_tup[0]])\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    elements = set(test_tup)\n    d = {}\n    for i in elements:\n        d[i] = test_tup.index(i)\n    return len(d)\n    \ndef count_first_elements_2(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    d = {}\n    for i in test_tup:\n        d[i] = test_tup.index(i)\n    return len(d)\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decs = []\n    for i in range(1,n+1):\n        decs.append(i*(i+1)/2)\n    return decs[n-1]\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return sum([int(str(i)[::-1]) for i in range(1, n+1)])\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # nth decagonal number = (1 + 2 + 3 +.. + n) * n / 2\n    return (1 + (n * (n - 1)) / 2) * n\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (int(n) - 1) * 10 + (n * (n + 1)) / 2 + 1\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (n*(n+1))/2\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 1\n    i = 1\n    while i < n:\n        num += 1\n        i += 1\n        if i%3 == 0:\n            num += 1\n        if i%7 == 0:\n            num -= 1\n    return num\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = n - 1\n    r = n % 10\n    return 10 * (n // 10) + r - ((r * (r + 1)) // 2)\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n<0: return None\n    return n*(n+1)/2\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    #This is a version of Fibonacci\n    return (n * (n+1)) / 2\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n==0:\n        return 1\n    ans = 0\n    for i in range(n):\n        ans += (10**(i+1) - 1) * 9 * (i + 1)\n    return ans\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    pos = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            pos = i\n            break\n    return (found, pos)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    idx = 0\n    for elem in dlist:\n        if elem == item:\n            return (True, idx)\n        else:\n            idx += 1\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # for i in range(len(test_list)):\n    #     if test_list[i] in test_list[i+1:]:\n    #         return False\n    # return True\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(len(test_list)):\n        if test_list[i] in test_list[i+1:]:\n            return False\n    return True\ndef gen_all_strings(word):\n    '''\n    Write a python function to generate all the possible strings by changing the characters of a given string.\n    '''\n    if len(word) == 0:\n        return []\n    if len(word) == 1:\n        return ['a','e','i','o','u']\n    else:\n        result = []\n        for i in range(len(word)):\n            next_word = word[:i] + word[i+1:]\n            result += gen_all_strings(next_word)\n            result += [word[i]+word[i+1:]]\n    return result\ndef remove_duplicates(my_list):\n    '''\n    Write a python function to remove the duplicates from a given list\n    '''\n    my_list.sort()\n    new_list = []\n    for i in range(len(my_list)):\n        if i == 0:\n            new_list.append(my_list[i])\n        else:\n            if my_list[i]!= my_list[i-1]:\n                new_list.append(my_list[i])\n    return new_list\ndef find_all_rotations(test_list):\n    '''\n    Write a python function to find all the rotations of a given list\n    '''\n    if len(test_list) <= 1:\n        return [test_list]\n    else:\n        return find_all_rotations(test_list[1:]) + find_all_rotations(test_list[1:]) + [test_list]\ndef find_max_consecutive(list_of_integers):\n    '''\n    Write a python function to find the maximum number of consecutive numbers in a list\n    '''\n    max_length = 0\n    if len(list_of_integers) == 0:\n        return 0\n    elif len(list_of_integers) == 1:\n        return 1\n    else:\n        for i in range(len(list_of_integers)):\n            if i == 0:\n                max_length = 1\n            else:\n                if list_of_integers[i] == list_of_integers[i-1] + 1:\n                    max_length += 1\n                else:\n                    max_length = 1\n            if max_length > len(list_of_integers):\n                return len(list_of_integers)\n            if max_length > max_length:\n                return max_length\n        return max_length\ndef interleave(list_of_strings):\n    '''\n    Write a python function to interleave two strings\n    '''\n    result = ''\n    for i in range(len(list_of_strings)):\n        if i == 0:\n            result += list_of_strings[i]\n        elif i == 1:\n            result += list_of_strings[i]\n        else:\n            result += list_of_strings[i][1:]\n            result += list_of_strings[i][0]\n    return result\ndef rotate_right(my_string, rotations):\n    '''\n    Write a python function to rotate a string to the right\n    '''\n    if rotations == 0:\n        return my_string\n    else:\n        return rotate_right(my_string[1:], rotations-1) + my_string[0]\ndef rotate_left(my_string, rotations):\n    '''\n    Write a python function to rotate a string to the left\n    '''\n    if rotations == 0:\n        return my_string\n    else:\n        return rotate_left(my_string[:-1], rotations-1) + my_string[-1]\ndef triangle_num(n):\n    '''\n    Write a python function to calculate the number of triangles present in an n x n grid\n    '''\n    return n*(n+1)/2\ndef rev_str(my_string):\n    '''\n    Write a python function to reverse a string\n    '''\n    return my_string[::-1]\ndef check_palindrome(string):\n    '''\n    Write a python function to check if a given string is a palindrome or not\n    '''\n    return string == string[::-1]\ndef sub_sets(my_set):\n    '''\n    Write a python function to find the subsets of a given set\n    '''\n    subset = [[]]\n    for i in my_set:\n        new_subset = []\n        for j in subset:\n            new_subset.append(j + [i])\n        subset = new_subset\n    return subset\ndef largest_subset(my_set):\n    '''\n    Write a python function to find the largest subset of a given set\n    '''\n    subset = []\n    for i in my_set:\n        if i not in subset:\n            subset.append(i)\n    return subset\ndef subset_sum(list_of_numbers, target_sum):\n    '''\n    Write a python function to find the number of subsets of a given list with the given sum\n    '''\n    matrix = [[0 for x in range(target_sum+1)] for x in range(len(list_of_numbers)+1)]\n    for i in range(len(list_of_numbers)+1):\n        matrix[i][0] = 1\n    for i in range(1, len(list_of_numbers)+1):\n        for j in range(1, target_sum+1):\n            if j >= list_of_numbers[i-1]:\n                matrix[i][j] = matrix[i-1][j] + matrix[i-1][j-list_of_numbers[i-1]]\n            else:\n                matrix[i][j] = matrix[i-1][j]\n    return matrix[len(list_of_numbers)][target_sum]\ndef rotate_matrix(matrix):\n    '''\n    Write a python function to rotate a square matrix 90 degree clockwise\n    '''\n    rows, cols = len(matrix), len(matrix[0])\n    matrix_t = [[0 for x in range(rows)] for x in range(cols)]\n    for i in range(rows):\n        for j in range(cols):\n            matrix_t[j][rows-i-1] = matrix[i][j]\n    return matrix_t\ndef rotate_matrix_2(matrix):\n    '''\n    Write a python function to rotate a square matrix 90 degree counterclockwise\n    '''\n    rows, cols = len(matrix), len(matrix[0])\n    matrix_t = [[0 for x in range(rows)] for x in range(cols)]\n    for i in range(rows):\n        for j in range(cols):\n            matrix_t[cols-j-1][i] = matrix[i][j]\n    return matrix_t\ndef rotate_matrix_180(matrix):\n    '''\n    Write a python function to rotate a square matrix 180 degree\n    '''\n    rows, cols = len(matrix), len(matrix[0])\n    matrix_t = [[0 for x in range(rows)] for x in range(cols)]\n    for i in range(rows):\n        for j in range(cols):\n            matrix_t[rows-i-1][rows-j-1] = matrix[i][j]\n    return matrix_t\ndef find_diagonal_sums(matrix):\n    '''\n    Write a python function to find the sum of diagonals of a given square matrix\n    '''\n    rows, cols = len(matrix), len(matrix[0])\n    diagonals_sum = [matrix[i][i] for i in range(rows)]\n    diagonals_sum.append(matrix[rows-1][cols-1])\n    for i in range(rows-1, 0, -1):\n        diagonals_sum[rows-i] += matrix[rows-i-1][i]\n    diagonals_sum[0] += matrix[0][0]\n    return diagonals_sum\ndef n_queens(n):"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                if test_list[i] == test_list[j]:\n                    return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in test_list:\n        if test_list.count(i) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for element in test_list:\n        if test_list.count(element) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for x in range(0, len(test_list)):\n        for y in range(x + 1, len(test_list)):\n            if test_list[x] == test_list[y]:\n                unique = False\n    return unique\n    \ndef all_unique1(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for x in range(0, len(test_list)):\n        for y in range(x + 1, len(test_list)):\n            if test_list[x] == test_list[y]:\n                unique = False\n    return unique\n    \ndef remove_vowels(string):\n    '''\n    Write a python function to remove the vowels from a given string.\n    '''\n    vowels = \"aeiou\"\n    no_vowels = \"\"\n    for i in string:\n        if i not in vowels:\n            no_vowels += i\n    return no_vowels\n    \ndef remove_vowels1(string):\n    '''\n    Write a python function to remove the vowels from a given string.\n    '''\n    vowels = \"aeiou\"\n    no_vowels = \"\"\n    for i in string:\n        if i not in vowels:\n            no_vowels += i\n    return no_vowels\n    \ndef str_compression(string):\n    '''\n    Write a python function to remove the vowels from a given string.\n    '''\n    no_vowels = \"\"\n    for i in string:\n        if i not in \"aeiou\":\n            no_vowels += i\n    return no_vowels + \" -> \" + str(len(no_vowels))\n    \ndef str_compression1(string):\n    '''\n    Write a python function to remove the vowels from a given string.\n    '''\n    no_vowels = \"\"\n    for i in string:\n        if i not in \"aeiou\":\n            no_vowels += i\n    return no_vowels + \" -> \" + str(len(no_vowels))\n    \ndef remove_duplicates(test_list):\n    '''\n    Write a python function to remove the duplicates from a given list.\n    '''\n    new_list = []\n    for i in test_list:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n    \ndef remove_duplicates1(test_list):\n    '''\n    Write a python function to remove the duplicates from a given list.\n    '''\n    return list(set(test_list))\n    \ndef powerset(test_list):\n    '''\n    Write a python function to generate the powerset of a given list.\n    '''\n    combinations = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            combinations.append(test_list[i:j])\n    return combinations\n    \ndef powerset1(test_list):\n    '''\n    Write a python function to generate the powerset of a given list.\n    '''\n    combinations = []\n    for i in range(len(test_list) + 1):\n        for j in combinations:\n            combinations.append(j + [test_list[i]])\n    return combinations\n    \ndef power_of_2(test_list):\n    '''\n    Write a python function to generate the powerset of a given list.\n    '''\n    combinations = []\n    for i in range(len(test_list)):\n        if test_list[i] == 0:\n            combinations.append([0] * (i + 1))\n        else:\n            combinations.append([0] * i + [1] + [0] * (len(test_list) - (i + 1)))\n    return combinations\n    \ndef power_of_21(test_list):\n    '''\n    Write a python function to generate the powerset of a given list.\n    '''\n    combinations = []\n    for i in range(len(test_list)):\n        if test_list[i] == 0:\n            combinations.append([0] * i)\n        else:\n            combinations.append([1] * i)\n    return combinations\n    \ndef sum_of_powerset(test_list):\n    '''\n    Write a python function to generate the powerset of a given list.\n    '''\n    combinations = []\n    for i in range(len(test_list)):\n        combinations.append([test_list[i]] * (i + 1))\n    return sum(combinations)\n    \ndef sum_of_powerset1(test_list):\n    '''\n    Write a python function to generate the powerset of a given list.\n    '''\n    combinations = []\n    for i in range(len(test_list)):\n        for j in combinations:\n            combinations.append(j + [test_list[i]])\n    return sum(combinations)\n    \ndef has_duplicates(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for x in range(0, len(test_list)):\n        for y in range(x + 1, len(test_list)):\n            if test_list[x] == test_list[y]:\n                unique = False\n    return unique\n    \ndef has_duplicates1(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for x in range(0, len(test_list)):\n        for y in range(x + 1, len(test_list)):\n            if test_list[x] == test_list[y]:\n                unique = False\n    return unique\n    \ndef combine(test_list, length):\n    '''\n    Write a python function to generate the combination of a given list of length.\n    '''\n    combinations = []\n    for i in range(len(test_list) + 1):\n        for j in combinations:\n            combinations.append(j + [test_list[i]])\n    if length == 0:\n        return []\n    else:\n        return combinations[length - 1]\n    \ndef combine1(test_list, length):\n    '''\n    Write a python function to generate the combination of a given list of length.\n    '''\n    combinations = []\n    for i in range(len(test_list) + 1):\n        for j in combinations:\n            combinations.append(j + [test_list[i]])\n    if length == 0:\n        return []\n    else:\n        return combinations[length - 1]\n    \ndef all_permutations(test_list):\n    '''\n    Write a python function to generate the permutations of a given list.\n    '''\n    permutations = []\n    for i in range(len(test_list)):\n        permutations.append([test_list[i]] * (len(test_list) - i))\n    return permutations\n    \ndef all_permutations1(test_list):\n    '''\n    Write a python function to generate the permutations of a given list.\n    '''\n    permutations = []\n    for i in range(len(test_list)):\n        for j in permutations:\n            permutations.append(j + [test_list[i]])\n    return permutations\n    \ndef all_permutations2(test_list):\n    '''\n    Write a python function to generate the permutations of a given list.\n    '''\n    permutations = []\n    for i in range(len(test_list)):\n        permutations.append([test_list[i]] * i + [test_list[j] for j in range(i, len(test_list))])\n    return permutations\n    \ndef all_permutations3(test_list):\n    '''\n    Write a python function to generate the permutations of a given list.\n    '''\n    permutations = []\n    for i in range(len(test_list)):\n        per"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    temp = []\n    for i in test_list:\n        if i in temp:\n            return False\n        else:\n            temp.append(i)\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for x in test_list:\n        if test_list.count(x)>1:\n            return False\n    return True\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) > len(nums2):\n        return sub_list(nums2,nums1)\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in xrange(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1-num2 for num1,num2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    res = []\n    for i in range(len(nums1)):\n        res.append(nums1[i]-nums2[i])\n    return res\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [(nums1[i] - nums2[i]) for i in range(len(nums1))]\ndef ch2(nums):\n    '''\n    Write a function to check if a list contains a sub-list.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if i<j and nums[i:j]==nums[:j-i]:\n                return True\n    return False\ndef sub_list2(nums1,nums2):\n    '''\n    Write a function to check if a list contains a sub-list.\n    '''\n    for i in range(len(nums2)):\n        for j in range(len(nums1)):\n            if i<len(nums1) and nums2[i]==nums1[j]:\n                return True\n    return False\ndef ch3(nums):\n    '''\n    Write a function to check if a list contains a sub-list.\n    '''\n    if len(nums)==1:\n        return False\n    for i in range(len(nums)-1):\n        if nums[i]==nums[i+1]:\n            return True\n    return False\ndef ch4(nums):\n    '''\n    Write a function to check if a list contains a sub-list.\n    '''\n    if len(nums)<=1:\n        return False\n    for i in range(len(nums)-1):\n        if nums[i]==nums[i+1]:\n            return True\n    return False\ndef sub_list3(nums1,nums2):\n    '''\n    Write a function to check if a list contains a sub-list.\n    '''\n    if len(nums1)>len(nums2):\n        return False\n    for i in range(len(nums2)):\n        for j in range(len(nums1)):\n            if i<len(nums1) and nums2[i]==nums1[j]:\n                return True\n    return False\ndef find_sub(l1,l2):\n    '''\n    Write a function that returns the index of the first occurance of sub-list in a list.\n    '''\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if i<len(l2) and l2[i]==l1[j]:\n                return i\n    return -1\ndef find_sub2(l1,l2):\n    '''\n    Write a function that returns the index of the first occurance of sub-list in a list.\n    '''\n    if len(l1)>len(l2):\n        return -1\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if i<len(l2) and l2[i]==l1[j]:\n                return i\n    return -1\ndef find_sub3(l1,l2):\n    '''\n    Write a function that returns the index of the first occurance of sub-list in a list.\n    '''\n    if len(l1)>len(l2):\n        return -1\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if i<len(l2) and l2[i]==l1[j]:\n                return i\n    return -1\ndef find_sub4(l1,l2):\n    '''\n    Write a function that returns the index of the first occurance of sub-list in a list.\n    '''\n    if len(l1)>len(l2):\n        return -1\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if i<len(l2) and l2[i]==l1[j]:\n                return i\n    return -1\ndef find_sub5(l1,l2):\n    '''\n    Write a function that returns the index of the first occurance of sub-list in a list.\n    '''\n    if len(l1)>len(l2):\n        return -1\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if i<len(l2) and l2[i]==l1[j]:\n                return i\n    return -1\ndef find_sub6(l1,l2):\n    '''\n    Write a function that returns the index of the first occurance of sub-list in a list.\n    '''\n    if len(l1)>len(l2):\n        return -1\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if i<len(l2) and l2[i]==l1[j]:\n                return i\n    return -1\ndef find_sub7(l1,l2):\n    '''\n    Write a function that returns the index of the first occurance of sub-list in a list.\n    '''\n    if len(l1)>len(l2):\n        return -1\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if i<len(l2) and l2[i]==l1[j]:\n                return i\n    return -1\ndef find_sub8(l1,l2):\n    '''\n    Write a function that returns the index of the first occurance of sub-list in a list.\n    '''\n    if len(l1)>len(l2):\n        return -1\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if i<len(l2) and l2[i]==l1[j]:\n                return i\n    return -1\ndef find_sub9(l1,l2):\n    '''\n    Write a function that returns the index of the first occurance of sub-list in a list.\n    '''\n    if len(l1)>len(l2):\n        return -1\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if i<len(l2) and l2[i]==l1[j]:\n                return i\n    return -1\ndef find_sub10(l1,l2):\n    '''\n    Write a function that returns the index of the first occurance of sub-list in a list.\n    '''\n    if len(l1)>len(l2):\n        return -1\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if i<len(l2) and l2[i]==l1[j]:\n                return i\n    return -1\ndef find_sub11(l1,l2):\n    '''\n    Write a function that returns the index of the first occurance of sub-list in a list.\n    '''\n    if len(l1)>len(l2):\n        return -1\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if i<len(l2) and l2[i]==l1[j]:\n                return i\n    return -1\ndef find_sub12(l1,l2):\n    '''\n    Write a function that returns the index of the first occurance of sub-list in a list.\n    '''\n    if len(l1)>len(l2):\n        return -1\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if i<len(l2) and l2[i]==l1[j]:\n                return i\n    return -1\ndef find_sub13(l1,l2):\n    '''\n    Write a function that returns the index of the first occurance of sub-list in a list.\n    '''\n    if len(l1)>len(l2):\n        return -1\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if i<len(l"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    l1 = len(nums1)\n    l2 = len(nums2)\n    if l1<l2:\n        return [0]*l1\n    res = []\n    for i in range(l1):\n        res.append(nums1[i]-nums2[i])\n    return res\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1-num2 for num1,num2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    new_list = []\n    i = 0\n    while i < len(nums1):\n        new_list.append(nums1[i] - nums2[i])\n        i += 1\n    return new_list\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) < len(nums2):\n        return nums2\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    num = n\n    total = 0\n    for i in xrange(10):\n        #if num % 10 == i:\n        if (num % 10) == i:\n            total = total + 1\n    return total\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n <= 0: \n        return False\n    elif n == 1: \n        return True\n    else: \n        s = str(n)\n        \n        # s = s.replace(\" \", \"\")\n        \n        # if s.count('0') > 0: \n        #     return False\n        \n        # for i in range(len(s)):\n        #     if int(s[i]) <= int(s[i]):\n        #         return False\n        \n        # return True\n        \n        t = s[0]\n        c = 0\n        for i in range(len(s)): \n            if s[i] == t:\n                c += 1\n            else:\n                break\n            \n        if c >= int(s):\n            return True\n        else:\n            return False\n    \ndef rotateLeft(n):\n    if n <= 0:\n        return 0\n    else: \n        return int(str(n)[1:] + str(n)[0])\n    \ndef rotateRight(n):\n    if n <= 0:\n        return 0\n    else: \n        return int(str(n)[-1] + str(n)[:-1])\n    \ndef isPalindrome(n): \n    '''\n    Write a python function to check if a number is palindrome or not.\n    '''\n    if n <= 0:\n        return False\n    else:\n        s = str(n)\n        l = len(s)\n        for i in range(int(l/2)):\n            if s[i]!= s[l-i-1]:\n                return False\n        return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n < 10:\n        return True\n    else:\n        x = n % 10\n        n = n // 10\n        while n > 0:\n            y = n % 10\n            if x == y:\n                return False\n            elif x > y:\n                return False\n            else:\n                n = n // 10\n        return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for num in n:\n        if num not in freq:\n            freq[num] = 1\n        else:\n            freq[num] += 1\n    for k, v in freq.items():\n        if v > k:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n_str = str(n)\n    n_dict = {}\n    for i in n_str:\n        if i not in n_dict:\n            n_dict[i] = 1\n        else:\n            n_dict[i] += 1\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    temp = n\n    count = 0\n    while temp > 0:\n        digit = temp % 10\n        if digit == 0:\n            return False\n        else:\n            if digit > count:\n                count = digit\n            temp /= 10\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    str_n=str(n)\n    freq_n=[]\n    for i in range(10):\n        freq_n.append(str_n.count(str(i)))\n    for i in range(10):\n        if freq_n[i] > i:\n            return False\n    return True\ndef valid_number(n):\n    '''\n    Write a python function that takes in an integer, and check whether the digits of the integer is valid or not.\n    '''\n    str_n=str(n)\n    freq_n=[]\n    for i in range(10):\n        freq_n.append(str_n.count(str(i)))\n    for i in range(10):\n        if freq_n[i] > i:\n            return False\n    return True\ndef single_digit_num(n):\n    '''\n    Write a python function that takes in an integer, and check whether the integer is a single digit number or not.\n    '''\n    if len(str(n))==1:\n        return True\n    return False\ndef single_digit_num_check(n):\n    '''\n    Write a python function that takes in an integer, and check whether the integer is a single digit number or not.\n    '''\n    if n>=0 and n<=9:\n        return True\n    return False\ndef is_digit(s):\n    '''\n    Write a python function that takes in an string and check whether the string is a digit or not.\n    '''\n    if s.isdigit():\n        return True\n    return False\ndef is_digit_check(s):\n    '''\n    Write a python function that takes in an string and check whether the string is a digit or not.\n    '''\n    if s>=\"0\" and s<=\"9\":\n        return True\n    return False\ndef is_digit_num(n):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a digit or not.\n    '''\n    if n>=0 and n<=9:\n        return True\n    return False\ndef is_digit_num_check(n):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a digit or not.\n    '''\n    if n>=0 and n<=9:\n        return True\n    return False\ndef is_digit_num_len_check(n):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a digit or not.\n    '''\n    if len(str(n))==1:\n        return True\n    return False\ndef is_digit_num_len_check(n):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a digit or not.\n    '''\n    if len(str(n))==1:\n        return True\n    return False\ndef is_digit_num_len_check(n):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a digit or not.\n    '''\n    if len(str(n))==1:\n        return True\n    return False\ndef is_digit_num_len_check(n):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a digit or not.\n    '''\n    if len(str(n))==1:\n        return True\n    return False\ndef is_digit_num_len_check(n):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a digit or not.\n    '''\n    if len(str(n))==1:\n        return True\n    return False\ndef is_digit_num_len_check(n):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a digit or not.\n    '''\n    if len(str(n))==1:\n        return True\n    return False\ndef is_digit_num_len_check(n):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a digit or not.\n    '''\n    if len(str(n))==1:\n        return True\n    return False\ndef is_digit_num_len_check(n):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a digit or not.\n    '''\n    if len(str(n))==1:\n        return True\n    return False\ndef is_digit_num_len_check(n):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a digit or not.\n    '''\n    if len(str(n))==1:\n        return True\n    return False\ndef is_digit_num_len_check(n):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a digit or not.\n    '''\n    if len(str(n))==1:\n        return True\n    return False\ndef is_digit_num_len_check(n):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a digit or not.\n    '''\n    if len(str(n))==1:\n        return True\n    return False\ndef is_digit_num_len_check(n):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a digit or not.\n    '''\n    if len(str(n))==1:\n        return True\n    return False\ndef is_digit_num_len_check(n):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a digit or not.\n    '''\n    if len(str(n))==1:\n        return True\n    return False\ndef is_digit_num_len_check(n):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a digit or not.\n    '''\n    if len(str(n))==1:\n        return True\n    return False\ndef is_digit_num_len_check(n):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a digit or not.\n    '''\n    if len(str(n))==1:\n        return True\n    return False\ndef is_digit_num_len_check(n):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a digit or not.\n    '''\n    if len(str(n))==1:\n        return True\n    return False\ndef is_digit_num_len_check(n):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a digit or not.\n    '''\n    if len(str(n))==1:\n        return True\n    return False\ndef is_digit_num_len_check(n):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a digit or not.\n    '''\n    if len(str(n))==1:\n        return True\n    return False\ndef is_digit_num_len_check(n):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a digit or not.\n    '''\n    if len(str(n))==1:\n        return True\n    return False\ndef is_digit_num_len_check(n):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a digit or not.\n    '''\n    if len(str(n))==1:\n        return True\n    return False\ndef is_digit_num_len_check(n):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a digit or not.\n    '''\n    if len(str(n))==1:\n        return True\n    return False\ndef is_digit_num_len_check(n):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a digit or not.\n    '''\n    if len(str(n))==1:\n        return True\n    return False\ndef is_digit_num_len_check(n):\n    '''\n    Write a python function that takes in an integer and check whethe"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = {}\n    for i in n:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    return d\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Your code here\n    if n == 0:\n        return True\n    s = str(n)\n    counts = [0] * 10\n    for i in s:\n        if int(i) > 0 and counts[int(i)] <= int(i):\n            counts[int(i)] += 1\n    return all(counts[i] <= i for i in xrange(len(counts)))\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all([item==element for item in list])\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n    \ndef squares_of_first_n_numbers(num):\n    '''\n    Write a function that takes in a number and returns a list containing the first n-1 integers squared.\n    For example, the first 5 squares are [1, 4, 9, 16, 25].\n    '''\n    squares = []\n    for i in range(1,num):\n        squares.append(i**2)\n    return squares\n    \ndef digits_of_first_n_numbers(num):\n    '''\n    Write a function that takes in a number and returns a list containing the digits of the first n integers.\n    For example, the first 5 digits are [1, 2, 3, 4, 5].\n    '''\n    digits = []\n    for i in range(1,num):\n        digit = i % 10\n        digits.append(digit)\n    return digits\n    \ndef fibonacci(num):\n    '''\n    Write a function that takes in a number and returns the nth value in the Fibonacci sequence.\n    '''\n    a,b = 0,1\n    for i in range(num):\n        a,b = b,a+b\n    return a\n    \ndef factorial(num):\n    '''\n    Write a function that takes in a number and returns the factorial of that number.\n    '''\n    factorial = 1\n    if num < 0:\n        return False\n    for i in range(num):\n        factorial = factorial*(i+1)\n    return factorial\n    \ndef even_fibonacci(num):\n    '''\n    Write a function that takes in a number and returns the nth value in the even Fibonacci sequence.\n    '''\n    a,b = 0,1\n    for i in range(num):\n        if i % 2 == 0:\n            a,b = b,a+b\n    return a\n    \ndef count_occurrences(list,element):\n    '''\n    Write a function that takes in a list and an element and returns the number of times the given element appears in the list.\n    '''\n    count = 0\n    for i in list:\n        if i == element:\n            count += 1\n    return count\n    \ndef print_every_other_element(list):\n    '''\n    Write a function that takes in a list and prints every other element in the list.\n    '''\n    for i in range(0,len(list),2):\n        print(list[i])\n    return\n    \ndef print_elements_less_than_or_equal_to(list,element):\n    '''\n    Write a function that takes in a list and an element and returns the elements in the list that are less than or equal to the given element.\n    '''\n    for i in list:\n        if i <= element:\n            print(i)\n    return\n    \ndef remove_elements_less_than_or_equal_to(list,element):\n    '''\n    Write a function that takes in a list and an element and returns a new list containing the items in the original list that are greater than the given element.\n    '''\n    remaining_list = []\n    for i in list:\n        if i > element:\n            remaining_list.append(i)\n    return remaining_list\n    \ndef remove_elements_greater_than_or_equal_to(list,element):\n    '''\n    Write a function that takes in a list and an element and returns a new list containing the items in the original list that are less than or equal to the given element.\n    '''\n    remaining_list = []\n    for i in list:\n        if i <= element:\n            remaining_list.append(i)\n    return remaining_list\n    \ndef find_duplicates(list):\n    '''\n    Write a function that takes in a list and returns a list containing the duplicates in the original list.\n    '''\n    duplicates = []\n    for i in list:\n        if i in duplicates:\n            duplicates.append(i)\n        elif i not in duplicates:\n            duplicates.append(i)\n    return duplicates\n    \ndef find_duplicates_not_in_list(list):\n    '''\n    Write a function that takes in a list and returns a list containing the duplicates in the original list.\n    '''\n    duplicates = []\n    for i in list:\n        if i not in duplicates:\n            duplicates.append(i)\n        elif i in duplicates:\n            continue\n    return duplicates\n    \ndef count_occurrences_of_element(list,element):\n    '''\n    Write a function that takes in a list and an element and returns the number of times the given element appears in the list.\n    '''\n    count = 0\n    for i in list:\n        if i == element:\n            count += 1\n    return count\n    \ndef is_element_in_list(list,element):\n    '''\n    Write a function that takes in a list and an element and returns a boolean indicating whether the given element is in the list.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n    \ndef is_element_in_list_not_in_list(list,element):\n    '''\n    Write a function that takes in a list and an element and returns a boolean indicating whether the given element is in the list.\n    '''\n    if element not in list:\n        return True\n    else:\n        return False\n    \ndef add_element_to_list(list,element):\n    '''\n    Write a function that takes in a list and an element and returns a new list containing the original list with the given element added to the end.\n    '''\n    new_list = []\n    for i in list:\n        new_list.append(i)\n    new_list.append(element)\n    return new_list\n    \ndef remove_element_from_list(list,element):\n    '''\n    Write a function that takes in a list and an element and returns a new list containing the original list with the given element removed from the list.\n    '''\n    new_list = []\n    for i in list:\n        if i!= element:\n            new_list.append(i)\n    return new_list\n    \ndef copy_list(list):\n    '''\n    Write a function that takes in a list and returns a new list with the same elements as the original list.\n    '''\n    new_list = []\n    for i in list:\n        new_list.append(i)\n    return new_list\n    \ndef reverse_list(list):\n    '''\n    Write a function that takes in a list and returns a new list with the same elements as the original list, but in reverse order.\n    '''\n    new_list = []\n    for i in range(len(list)-1,-1,-1):\n        new_list.append(list[i])\n    return new_list\n    \ndef sort_list(list):\n    '''\n    Write a function that takes in a list and returns a new list with the same elements as the original list, but in reverse order.\n    '''\n    return sorted(list)\n    \ndef find_min(list):\n    '''\n    Write a function that takes in a list and returns the smallest element in the list.\n    '''\n    min_element = list[0]\n    for i in list:\n        if i < min_element:\n            min_element = i\n    return min_element\n    \ndef find_max(list):\n    '''\n    Write a function that takes in a list and returns the largest element in the list.\n    '''\n    max_element = list[0]\n    for i in list:\n        if i > max_element:\n            max_element = i\n    return max_element\n    \ndef is_list_equal(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a boolean indicating whether the two lists are equal. Two lists are equal if they contain the same elements, regardless of whether they are in the same order.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i]!= list2"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # Base case\n    if list == [element] or len(list) == 0:\n        return True\n    \n    # Recursive case\n    else:\n        return list[0] == element and check_element(list[1:],element)\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i == element:\n            pass\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    count=0\n    for i in list:\n        if i == element:\n            count+=1\n    if count==len(list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n    \n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match=re.search(r'(?=a[a-z]{2}b{2}b{3})',text)\n    if match:\n        print match.group()\n    else:\n        print 'No match'\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    if (text.count('a') == 1) and ((text.count('b') >= 2) or (text.count('b') >= 3)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'ab{2,3}')\n    matches = pattern.findall(text)\n    if matches:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    \n    two_three = re.compile(r'.*?(ab)*(a|b)*(b)*(ab)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*(a|b)*(b)*"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab*'\n    if re.match(pattern, text):\n        return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'ab{2,3}')\n    match = pattern.search(text)\n    if match:\n        print('Match Found: ', match.group())\n    else:\n        print('Match Not Found!')\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    match = re.search(r'ab*',text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.match('^a([bc]{2}|[bc]{3}|)$',text)\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #!raise NotImplementedError()\n    return re.search(r'(ab|bb)*', text)\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'ab+', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    i = 0\n    curr_sum = 0\n    max_sum = 0\n    while i<n:\n        curr_sum = curr_sum + a[i]\n        if i>=k-1:\n            curr_sum = curr_sum - a[i-(k-1)]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        i = i + 1\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = -1*float('inf')\n    max_sum_mod = -1*float('inf')\n    for i in range(k):\n        if i == 0:\n            max_sum_mod = a[i]\n        else:\n            max_sum_mod = max_sum_mod + a[i]\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if len(a) < k:\n        return -1\n    else:\n        for i in range(n):\n            for j in range(n-k+1):\n                s = sum(a[j:j+k])\n                if s > max_sum:\n                    max_sum = s\n        return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 1:\n        return max(a)\n    max_sum = [0]*n\n    for i in range(n):\n        max_sum[i] = max(max_sum[i-1]+a[i], a[i])\n    for i in range(k-2, n):\n        max_sum[i] = max(max_sum[i-k]+a[i], a[i])\n    return max(max_sum)\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    def max_sub_array_sum_repeated_helper(a, n, k): \n        if k == 1: \n            return max(a)\n        for i in range(1, n): \n            a[i] += a[i - 1]\n        return max(max_sub_array_sum_repeated_helper(a, n, k - 1), max_sub_array_sum_repeated_helper(a, n, k))\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum_ = [0 for x in range(n)]\n    sum_[0] = a[0]\n    for i in range(1, n):\n        sum_[i] = max(sum_[i-1]+a[i], a[i])\n    \n    max_sum = sum_[n-1]\n    for i in range(n-k, n):\n        max_sum = max(max_sum, sum_[i])\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sums = [0]*(k+1)\n    max_sum = 0\n    for i in range(n):\n        for j in range(1,k+1):\n            if i+j < n:\n                sums[j] = sums[j]+a[i]\n            if sums[j] > max_sum:\n                max_sum = sums[j]\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    maximum = float('-inf')\n    start = 0\n    for i in range(k):\n        total = sum(a[start:n])\n        if total > maximum:\n            maximum = total\n        start += 1\n    return maximum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    for i in range(n - k + 1):\n        tmp_max = sum(a[i : i + k])\n        for j in range(1, k):\n            if tmp_max < sum(a[i : i + k * j]):\n                tmp_max = sum(a[i : i + k * j])\n    return tmp_max\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 1:\n        return max(a)\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([i ** 2 for i in range(1, n+1) if i % 2 == 0])\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([x**2 for x in range(0,n+1) if x%2==0])\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return n*(n+1)*n/2\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([i**2 for i in xrange(1,n+1) if i%2==0])\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return n*(n+1)*(2*n+1)/6\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    n = int(n)\n    total = 0\n    for i in range(0,n):\n        if i%2 == 0:\n            total += (i**2)\n    return total\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return square_Sum(n-1) + (n * n)\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s=0\n    for i in range(n):\n        s += i * i\n    return s\n    \ndef square_Sum_Recursive(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return square_Sum_Recursive(n-1) + (n-1)*(n-1)\n    \n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n<1:\n        return 0\n    if n==1:\n        return 1\n    else:\n        return square_Sum(n-1) + n**2\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n <= 1:\n        return 0\n    elif n % 2 == 0:\n        return n * n + square_Sum(n - 2)\n    else:\n        return n * n + square_Sum(n - 2)\n    \nprint square_Sum(100)\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max([len(x) for x in list1])\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max([len(x) for x in list1])\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    count=0\n    for list2 in list1:\n        if len(list2)>count:\n            count=len(list2)\n    return count\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if not list1:\n        return 0\n    else:\n        return max(len(i) for i in list1)\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = 0\n    for l in list1:\n        if len(l) > length:\n            length = len(l)\n    return length\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    l = []\n    for i in list1:\n        l.append(len(i))\n    return max(l)\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max([len(list1) for list1 in list1])\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len=[]\n    for i in list1:\n        max_len.append(len(i))\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    result = []\n    for lists in list1:\n        result.append(max(lists))\n    return result\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in range(len(list1)):\n        if max_len < len(list1[i]):\n            max_len = len(list1[i])\n    return max_len\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n <= 1:\n        return 1\n    if n <= 2:\n        return k\n    # DP solution\n    if k == 1:\n        return k\n    if k == 2:\n        return k**2\n    else:\n        return (k**2) * ((k**2) + 1) // 2\n    \n    # solution 2: with extra memory\n    # dp = [0]*(n+1)\n    # dp[0] = 1\n    # dp[1] = 1\n    # for i in range(2, n+1):\n    #     dp[i] = (k**2) * ((k**2) + 1) // 2\n    #     for j in range(1, k+1):\n    #         if j == 1:\n    #             dp[i] += dp[i-1]\n    #         else:\n    #             dp[i] += dp[i-1]*j\n    # return dp[n]\n    \n    # solution 3: with extra space and more complicated solution\n    # dp = [0]*(n+1)\n    # dp[0] = 1\n    # dp[1] = 1\n    # for i in range(2, n+1):\n    #     dp[i] = dp[i-1]\n    #     for j in range(1, k+1):\n    #         if j == 1:\n    #             dp[i] += dp[i-2]\n    #         else:\n    #             dp[i] += dp[i-2]*j\n    # return dp[n]\n    \n    # solution 4: with extra space and more complicated solution\n    # dp = [0]*(n+1)\n    # dp[0] = 1\n    # dp[1] = 1\n    # dp[2] = 2\n    # for i in range(3, n+1):\n    #     dp[i] = dp[i-2]\n    #     for j in range(1, k+1):\n    #         if j == 1:\n    #             dp[i] += dp[i-3]\n    #         else:\n    #             dp[i] += dp[i-3]*j\n    # return dp[n]\n    \n    # solution 5: with extra space and more complicated solution\n    # dp = [0]*(n+1)\n    # dp[0] = 1\n    # dp[1] = 1\n    # dp[2] = 2\n    # for i in range(3, n+1):\n    #     dp[i] = dp[i-1] + dp[i-2]\n    #     for j in range(1, k+1):\n    #         if j == 1:\n    #             dp[i] += dp[i-3]\n    #         else:\n    #             dp[i] += dp[i-3]*j\n    # return dp[n]\n    \n    # solution 6: with extra space and more complicated solution\n    # dp = [0]*(n+1)\n    # dp[0] = 1\n    # dp[1] = 1\n    # dp[2] = 2\n    # for i in range(3, n+1):\n    #     dp[i] = dp[i-1] + dp[i-2]\n    #     for j in range(1, k+1):\n    #         if j == 1:\n    #             dp[i] += dp[i-3]\n    #         elif j == 2:\n    #             dp[i] += dp[i-3]*2\n    #         else:\n    #             dp[i] += dp[i-3]*j\n    # return dp[n]\n    \n    # solution 7: with extra space and more complicated solution\n    # dp = [0]*(n+1)\n    # dp[0] = 1\n    # dp[1] = 1\n    # dp[2] = 2\n    # for i in range(3, n+1):\n    #     dp[i] = dp[i-1] + dp[i-2]\n    #     for j in range(1, k+1):\n    #         if j == 1:\n    #             dp[i] += dp[i-3]\n    #         elif j == 2:\n    #             dp[i] += dp[i-3]*2\n    #         else:\n    #             dp[i] += dp[i-3]*j\n    # return dp[n]\n    \n    # solution 8: with extra space and more complicated solution\n    # dp = [0]*(n+1)\n    # dp[0] = 1\n    # dp[1] = 1\n    # dp[2] = 2\n    # for i in range(3, n+1):\n    #     dp[i] = dp[i-1] + dp[i-2]\n    #     for j in range(1, k+1):\n    #         if j == 1:\n    #             dp[i] += dp[i-3]\n    #         elif j == 2:\n    #             dp[i] += dp[i-3]*2\n    #         else:\n    #             dp[i] += dp[i-3]*j\n    # return dp[n]\n    \n    # solution 9: with extra space and more complicated solution\n    # dp = [0]*(n+1)\n    # dp[0] = 1\n    # dp[1] = 1\n    # dp[2] = 2\n    # for i in range(3, n+1):\n    #     dp[i] = dp[i-1] + dp[i-2]\n    #     for j in range(1, k+1):\n    #         if j == 1:\n    #             dp[i] += dp[i-3]\n    #         elif j == 2:\n    #             dp[i] += dp[i-3]*2\n    #         else:\n    #             dp[i] += dp[i-3]*j\n    # return dp[n]\n    \n    # solution 10: with extra space and more complicated solution\n    # dp = [0]*(n+1)\n    # dp[0] = 1\n    # dp[1] = 1\n    # dp[2] = 2\n    # for i in range(3, n+1):\n    #     dp[i] = dp[i-1] + dp[i-2]\n    #     for j in range(1, k+1):\n    #         if j == 1:\n    #             dp[i] += dp[i-3]\n    #         elif j == 2:\n    #             dp[i] += dp[i-3]*2\n    #         else:\n    #             dp[i] += dp[i-3]*j\n    # return dp[n]\n    \n    # solution 11: with extra space and more complicated solution\n    # dp = [0]*(n+1)\n    # dp[0] = 1\n    # dp[1] = 1\n    # dp[2] = 2\n    # for i in range(3, n+1):\n    #     dp[i] = dp[i-1] + dp[i-2]\n    #     for j in range(1, k+1):\n    #         if j == 1:\n    #             dp[i] += dp[i-3]\n    #         elif j == 2:\n    #             dp[i] += dp[i-3]*2\n    #         else:\n    #             dp[i] += dp[i-3]*j\n    # return dp[n]\n    "
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k > n:\n        return 0\n    if k == 1:\n        return n\n    if n == 1:\n        return 1\n    return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0:\n        return 0\n    \n    if k == 1:\n        return 1\n    \n    if k == n:\n        return n\n    \n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    t = [[0 for i in range(k+1)] for j in range(n+1)]\n    for i in range(n+1):\n        t[i][0] = 1\n    for j in range(1, k+1):\n        t[0][j] = 0\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 0 or k < 0:\n        return 0\n    if k == 1:\n        return n\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k)\n    \ndef paint_fence(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 0:\n        return 0\n    if k == 1:\n        return 1\n    result = 0\n    for i in range(1, n-1):\n        result += paint_fence(n-1, k-1)\n    return result\n    \n    \nprint(count_no_of_ways(1, 2))\nprint(paint_fence(3, 2)"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 0: return 0\n    if n == 1: return k\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if (k < 0):\n        return 0\n    if (n == 0):\n        return 0\n    if (k == 0):\n        return 1\n    return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 1, k - 1) \n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return k\n    if n == 3:\n        return 2*k\n    if n == 4:\n        return 2*k\n    return count_no_of_ways(n-1, k) + 2*count_no_of_ways(n-2, k) + 2*count_no_of_ways(n-3, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    l = [[0 for i in range(k + 1)] for j in range(n + 1)] \n    l[0][0] = 1\n    for i in range(1, n + 1): \n        for j in range(1, k + 1): \n            if i == j: \n                l[i][j] = 1\n            else: \n                l[i][j] = l[i - 1][j - 1] + l[i - 1][j] \n    return l[n][k] \n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n>m:\n        return n//m\n    else:\n        return m//n\n    "
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return 0\n    else:\n        return (n//m) + (n//m > 0)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n % m == 0:\n        return n/m\n    else:\n        return n/m+1\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    try:\n        n = abs(n)\n        m = abs(m)\n        if n < m:\n            return int(n/m)\n        else:\n            return int(m/n)\n    except Exception as e:\n        return \"Invalid Input\"\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == 0:\n        return 0\n    elif m == 0:\n        return float('inf')\n    else:\n        return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n<m:\n        return n/m\n    else:\n        return int(n/m)\n    "
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n>m:\n        return n//m\n    else:\n        return m//n\n    \n    "
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    print((n*(m+1)//2)%m)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n/m\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #h**2+w**2 = b**2\n    b = (h**2+w**2)**0.5\n    c = b/2\n    \n    return c\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w**2+h**2==0:\n        return 0\n    else:\n        return math.sqrt(w**2+h**2)\ndef avg(l):\n    '''\n    Write a function to calculate the average of a list of numbers.\n    '''\n    s=0\n    for i in l:\n        s+=i\n    return s/len(l)\ndef factors(n):\n    '''\n    Write a function that takes a number and returns a list of all of the number's \n    factors (including 1 and the number itself).\n    '''\n    l=[]\n    for i in range(1,n+1):\n        if n%i==0:\n            l.append(i)\n    return l\ndef score(word):\n    '''\n    Write a function that takes a word as an argument and returns the average score of the letters in the word.\n    '''\n    s=0\n    for i in word:\n        s+=ord(i)-96\n    return s/len(word)\ndef first_word(w):\n    '''\n    Write a function that takes a string as input and returns the first word in the string.\n    '''\n    return w.split()[0]\ndef last_word(w):\n    '''\n    Write a function that takes a string as input and returns the last word in the string.\n    '''\n    return w.split()[-1]\ndef first_half(s):\n    '''\n    Write a function that takes a string as input and returns the first half of the string.\n    '''\n    return s[:len(s)/2]\ndef last_half(s):\n    '''\n    Write a function that takes a string as input and returns the last half of the string.\n    '''\n    return s[len(s)/2:]\ndef first_three_letters(s):\n    '''\n    Write a function that takes a string as input and returns the first three letters of the string.\n    '''\n    return s[:3]\ndef remove_punctuation(s):\n    '''\n    Write a function that takes a string as input and removes all punctuation characters from the string.\n    '''\n    l=[]\n    for i in s:\n        if i not in [' ',',','.','?']:\n            l.append(i)\n    return ''.join(l)\ndef my_str_split(s,delim):\n    '''\n    Write a function that takes a string and a delimiter and returns a list of words in the string that are separated by the delimiter.\n    '''\n    l=[]\n    i=0\n    while i<len(s):\n        if s[i]==delim:\n            l.append(s[:i])\n            i+=1\n        else:\n            i+=1\n    return l\ndef rindex(l,s):\n    '''\n    Write a function that takes a list of strings and a string as input and returns the last index of the string in the list.\n    '''\n    l=l[::-1]\n    for i in l:\n        if i==s:\n            return len(l)-l.index(i)\n    return -1\ndef my_split(s,delim):\n    '''\n    Write a function that takes a string and a delimiter and returns a list of words in the string that are separated by the delimiter.\n    '''\n    return s.split(delim)\ndef num_count(l):\n    '''\n    Write a function that takes a list as input and returns a dictionary with the number of times each element in the list appears in the list as the value and the element as the key.\n    '''\n    d={}\n    for i in l:\n        d[i]=d.get(i,0)+1\n    return d\ndef num_count_2(l):\n    '''\n    Write a function that takes a list as input and returns a dictionary with the number of times each element in the list appears in the list as the value and the element as the key.\n    '''\n    d={}\n    for i in l:\n        d[i]=d.get(i,0)+1\n    return d\ndef common_items(l1,l2):\n    '''\n    Write a function that takes two lists as input and returns a list of common items between the two lists.\n    '''\n    l=[]\n    for i in l1:\n        if i in l2:\n            l.append(i)\n    return l\ndef biggest(l):\n    '''\n    Write a function that takes a list of numbers as input and returns the largest number in the list.\n    '''\n    return max(l)\ndef smallest(l):\n    '''\n    Write a function that takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    return min(l)\ndef sum_of_list(l):\n    '''\n    Write a function that takes a list of numbers as input and returns the sum of the numbers in the list.\n    '''\n    return sum(l)\ndef reverse(s):\n    '''\n    Write a function that takes a string as input and returns the string in reverse order.\n    '''\n    return s[::-1]\ndef palindrome(s):\n    '''\n    Write a function that takes a string as input and returns True if the string is a palindrome and False otherwise.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a function that takes a string as input and returns True if the string is a palindrome and False otherwise.\n    '''\n    l=list(s)\n    l1=[]\n    l2=[]\n    for i in l:\n        if i not in [' ','.','?','!',' ']:\n            l1.append(i)\n    for i in l1:\n        l2.append(i)\n    l2=l2[::-1]\n    if l1==l2:\n        return True\n    else:\n        return False\ndef repeat(s,num):\n    '''\n    Write a function that takes a string as input and a number as input and returns the string repeated num times.\n    '''\n    l=[]\n    for i in range(num):\n        l.append(s)\n    return ''.join(l)\ndef count_vowels(s):\n    '''\n    Write a function that takes a string as input and returns the number of vowels in the string.\n    '''\n    c=0\n    for i in s:\n        if i in ['a','e','i','o','u','A','E','I','O','U']:\n            c+=1\n    return c\ndef count_consonants(s):\n    '''\n    Write a function that takes a string as input and returns the number of consonants in the string.\n    '''\n    c=0\n    for i in s:\n        if i in ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','z','B','C','D','F','G','H','J','K','L','M','N','P','Q','R','S','T','V','W','X','Z']:\n            c+=1\n    return c\ndef count_vowels_2(s):\n    '''\n    Write a function that takes a string as input and returns the number of vowels in the string.\n    '''\n    c=0\n    for i in s:\n        if i in ['a','e','i','o','u','A','E','I','O','U']:\n            c+=1\n    return c\ndef count_consonants_2(s):\n    '''\n    Write a function that takes a string as input and returns the number of consonants in the string.\n    '''\n    c=0\n    for i in s:\n        if i in ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','z','B','C','D','F','G','H','J','K','L','M','N','P','Q','R','S','T','V','W','X','Z']:\n            c+=1\n    return c\ndef palindrome_2(s):\n    '''\n    Write "
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    h=w*h/w\n    return h\ndef otherside_triangle(w,h):\n    '''\n    Write a function to find the third side of a triangle\n    '''\n    h=w*h/w\n    return h\ndef side_length(w,h):\n    '''\n    Write a function to find the length of a side of a triangle\n    '''\n    h=w*h/w\n    return h\ndef get_hypotenuse(w,h):\n    '''\n    Write a function to find the length of the hypotenuse of a right angled triangle\n    '''\n    h=w*h/w\n    return h\ndef get_area(w,h):\n    '''\n    Write a function to find the area of a triangle\n    '''\n    h=w*h/w\n    return h\ndef get_circle_area(d):\n    '''\n    Write a function to find the area of a circle given the radius\n    '''\n    pi=3.14\n    s=d*d*pi\n    return s\ndef get_square_area(l):\n    '''\n    Write a function to find the area of a square given the length of a side\n    '''\n    s=l*l\n    return s\ndef get_rectangle_area(l,w):\n    '''\n    Write a function to find the area of a rectangle given the length and width of a side\n    '''\n    s=l*w\n    return s\ndef get_circle_circumference(d):\n    '''\n    Write a function to find the circumference of a circle given the diameter\n    '''\n    pi=3.14\n    c=2*pi*d\n    return c\ndef get_sphere_circumference(d):\n    '''\n    Write a function to find the circumference of a sphere given the diameter\n    '''\n    pi=3.14\n    c=4*pi*d\n    return c\ndef get_cuboid_circumference(l,w,h):\n    '''\n    Write a function to find the circumference of a cuboid given the length, width, and height\n    '''\n    c=2*l+2*w+2*h\n    return c\ndef get_sphere_area(d):\n    '''\n    Write a function to find the area of a sphere given the diameter\n    '''\n    pi=3.14\n    s=4*pi*d*d\n    return s\ndef get_cuboid_area(l,w,h):\n    '''\n    Write a function to find the area of a cuboid given the length, width, and height\n    '''\n    s=l*w*h\n    return s\ndef get_circle_area(d):\n    '''\n    Write a function to find the area of a circle given the radius\n    '''\n    pi=3.14\n    s=pi*d*d\n    return s\ndef get_rectangle_area(l,w):\n    '''\n    Write a function to find the area of a rectangle given the length and width of a side\n    '''\n    s=l*w\n    return s\ndef get_square_area(l):\n    '''\n    Write a function to find the area of a square given the length of a side\n    '''\n    s=l*l\n    return s\ndef get_circle_circumference(d):\n    '''\n    Write a function to find the circumference of a circle given the diameter\n    '''\n    pi=3.14\n    c=2*pi*d\n    return c\ndef get_sphere_circumference(d):\n    '''\n    Write a function to find the circumference of a sphere given the diameter\n    '''\n    pi=3.14\n    c=4*pi*d\n    return c\ndef get_cuboid_circumference(l,w,h):\n    '''\n    Write a function to find the circumference of a cuboid given the length, width, and height\n    '''\n    c=2*l+2*w+2*h\n    return c\ndef get_sphere_area(d):\n    '''\n    Write a function to find the area of a sphere given the diameter\n    '''\n    pi=3.14\n    s=4*pi*d*d\n    return s\ndef get_cuboid_area(l,w,h):\n    '''\n    Write a function to find the area of a cuboid given the length, width, and height\n    '''\n    s=l*w*h\n    return s\ndef get_rectangle_area(l,w):\n    '''\n    Write a function to find the area of a rectangle given the length and width of a side\n    '''\n    s=l*w\n    return s\ndef get_triangle_area(a,b):\n    '''\n    Write a function to find the area of a triangle given the length of a side and the other side\n    '''\n    s=(a+b)*(a+b)/2\n    return s\ndef get_equilateral_triangle_area(a):\n    '''\n    Write a function to find the area of an equilateral triangle given the length of a side\n    '''\n    s=(a**2)*(3**1/2)\n    return s\ndef get_circle_area(d):\n    '''\n    Write a function to find the area of a circle given the diameter\n    '''\n    pi=3.14\n    s=pi*d*d\n    return s\ndef get_sphere_area(d):\n    '''\n    Write a function to find the area of a sphere given the diameter\n    '''\n    pi=3.14\n    s=4*pi*d*d\n    return s\ndef get_cuboid_area(l,w,h):\n    '''\n    Write a function to find the area of a cuboid given the length, width, and height\n    '''\n    s=l*w*h\n    return s\ndef get_circle_circumference(d):\n    '''\n    Write a function to find the circumference of a circle given the diameter\n    '''\n    pi=3.14\n    c=2*pi*d\n    return c\ndef get_sphere_circumference(d):\n    '''\n    Write a function to find the circumference of a sphere given the diameter\n    '''\n    pi=3.14\n    c=4*pi*d\n    return c\ndef get_cuboid_circumference(l,w,h):\n    '''\n    Write a function to find the circumference of a cuboid given the length, width, and height\n    '''\n    c=2*l+2*w+2*h\n    return c\ndef get_sphere_volume(d):\n    '''\n    Write a function to find the volume of a sphere given the diameter\n    '''\n    pi=3.14\n    v=4/3*pi*d*d*d\n    return v\ndef get_cuboid_volume(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid given the length, width, and height\n    '''\n    v=l*w*h\n    return v\ndef get_circle_volume(d):\n    '''\n    Write a function to find the volume of a circle given the diameter\n    '''\n    pi=3.14\n    v=4/3*pi*d*d*d\n    return v\ndef get_square_volume(l):\n    '''\n    Write a function to find the volume of a square given the length of a side\n    '''\n    v=l*l\n    return v\ndef get_triangle_volume(a,b):\n    '''\n    Write a function to find the volume of a triangle given the length of a side and the other side\n    '''\n    v=(a*b)/2\n    return v\ndef get_rectangle_volume(l,w):\n    '''\n    Write a function to find the volume of a rectangle given the length and width of a side\n    '''\n    v=l*w\n    return v\ndef get_triangle_area(a,b):\n    '''\n    Write a function to find the area of a triangle given the length of a side and the other side\n    '''\n    s=(a+b)*(a+b)/2\n    return s\ndef get_octagon_area(a):"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s=w**2+h**2\n    return math.sqrt(s)\ndef rightangledownside(a,b):\n    '''\n    Write a function to find the length of the down side of a right angled triangle.\n    '''\n    return a**2+b**2\ndef rightangledepoint(a,b,c):\n    '''\n    Write a function to find the length of the down side of a right angled triangle.\n    '''\n    s=b**2+c**2\n    return math.sqrt(s)\ndef distance(x1,y1,x2,y2):\n    '''\n    Write a function to find the length of the down side of a right angled triangle.\n    '''\n    return math.sqrt((x1-x2)**2+(y1-y2)**2)\ndef max_side(a,b,c):\n    '''\n    Write a function to find the length of the down side of a right angled triangle.\n    '''\n    return max(a,b,c)\ndef min_side(a,b,c):\n    '''\n    Write a function to find the length of the down side of a right angled triangle.\n    '''\n    return min(a,b,c)\ndef sidelength(a,b,c):\n    '''\n    Write a function to find the length of the down side of a right angled triangle.\n    '''\n    return a*b*c\ndef perimiter(a,b,c):\n    '''\n    Write a function to find the length of the down side of a right angled triangle.\n    '''\n    return a+b+c\ndef hypofunction(a,b,c):\n    '''\n    Write a function to find the length of the down side of a right angled triangle.\n    '''\n    return math.sqrt(a**2+b**2)\ndef spherearea(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    return 4*math.pi*(r**2)\ndef spherevolume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*(r**3)\ndef cuboidarea(a,b,c):\n    '''\n    Write a function to find the area of a cuboid.\n    '''\n    return 2*(a*b+a*c+b*c)\ndef cuboidvolume(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef volume(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return a*b*c\ndef surfacearea(a,b,c):\n    '''\n    Write a function to find the area of a cuboid.\n    '''\n    return 2*(a*b+a*c+b*c)\ndef spherevolume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef volume(r):\n    '''\n    Write a functio"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if(w**2==h**2):\n        return w\n    elif(w**2>h**2):\n        return math.sqrt(w**2-h**2)\n    else:\n        return math.sqrt(h**2-w**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_sqaure(w,h):\n    '''\n    Write a function that, given the length of two sides of a right\n    angled triangle, returns the third side.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_circumcircle(r,a,b):\n    '''\n    Write a function that, given the length of two sides of a right\n    angled triangle, returns the radius of a circle that the sides\n    of the triangle are parallel to.\n    '''\n    return ((a**2+b**2)**0.5)/2\ndef otherside_triangle(side1,side2,side3):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (side1*side2)/2\ndef otherside_parallelogram(w,h):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return (w+h)*2\ndef otherside_trapezium(a,b,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (a+b)/2*h\ndef otherside_kite(a,b,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (a*b)/2*h\ndef otherside_pyramid(a,b,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (a*b)/2*h\ndef otherside_pyramid(a,b,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (a*b)/2*h\ndef otherside_hexagon(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (w*h)**0.5\ndef otherside_heptagon(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (w*h)**0.5\ndef otherside_octagon(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (w*h)**0.5\ndef otherside_cuboctagon(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (w*h)**0.5\ndef otherside_triangle(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (w*h)**0.5\ndef otherside_triankel(a,b,c):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return math.sqrt((a**2+b**2-c**2)/2*a*b)\ndef otherside_octagon(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (w*h)**0.5\ndef otherside_square(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (w*h)**0.5\ndef otherside_rhombus(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (w*h)**0.5\ndef otherside_semipyramid(a,b,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (a*b)/2*h\ndef otherside_dodecagon(a,b,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (a*b)/2*h\ndef otherside_dodecagon(a,b,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (a*b)/2*h\ndef otherside_dodecagon(a,b,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (a*b)/2*h\ndef otherside_dodecagon(a,b,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (a*b)/2*h\ndef otherside_dodecagon(a,b,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (a*b)/2*h\ndef otherside_dodecagon(a,b,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (a*b)/2*h\ndef otherside_dodecagon(a,b,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (a*b)/2*h\ndef otherside_dodecagon(a,b,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (a*b)/2*h\ndef otherside_dodecagon(a,b,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (a*b)/2*h\ndef otherside_dodecagon(a,b,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (a*b)/2*h\ndef otherside_dodecagon(a,b,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (a*b)/2*h\ndef otherside_dodecagon(a,b,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (a*b)/2*h\ndef otherside_dodecagon(a,b,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (a*b)/2*h\ndef otherside_dodecagon(a,b,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (a*b)/2*h\ndef otherside_dodecagon(a,b,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (a*b)/2*h\ndef otherside_dodecagon(a,b,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (a*b)/2*h\ndef otherside_dodecagon(a,b,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (a*b)/2*h\ndef otherside_dodecagon(a,b,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (a*b)/2*h\ndef otherside_dodecagon(a,b,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (a*b)/2*h\ndef otherside_dodecagon(a,b,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (a*b)/2*h\ndef otherside_dodecagon(a,b,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (a*b)/2*h\ndef otherside_dodecagon(a,b,h):\n    '"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt((w**2)+(h**2))\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w ** 2 + h ** 2) **.5\n    return s\ndef rightangledtriangle(a,b):\n    '''\n    Write a function to find the area of a right-angled triangle.\n    '''\n    return 0.5 * a * b\ndef leftangledtriangle(a,b):\n    '''\n    Write a function to find the area of a left-angled triangle.\n    '''\n    return 0.5 * b * a\ndef areaofrightangledtriangle(a,b,c):\n    '''\n    Write a function to find the area of a right-angled triangle.\n    '''\n    return 0.5 * a * b\ndef areaofleftangledtriangle(a,b,c):\n    '''\n    Write a function to find the area of a left-angled triangle.\n    '''\n    return 0.5 * b * a\ndef areaofsquare(a,b):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return a * b\ndef areaofrectangle(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\ndef areaofcircle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi * r ** 2\ndef volumeofcuboid(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return l * b * h\ndef volumeofsphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3\ndef volumeofcuboid_4_side(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return l * b * h\ndef volumeofsphere_4_side(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3\ndef volumeofcuboid_4_perimeter(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return l * b * h\ndef volumeofsphere_4_perimeter(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3\ndef volumeofcuboid_2_side_perimeter(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return l * b * h\ndef volumeofsphere_2_side_perimeter(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (2/3) * math.pi * r ** 3\ndef volumeofcuboid_2_side_perimeter_v2(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return l * b * h\ndef volumeofsphere_2_side_perimeter_v2(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (2/3) * math.pi * r ** 3\ndef volumeofcuboid_2_side_perimeter_v3(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return l * b * h\ndef volumeofsphere_2_side_perimeter_v3(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (2/3) * math.pi * r ** 3\ndef volumeofcuboid_2_side_perimeter_v4(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return l * b * h\ndef volumeofsphere_2_side_perimeter_v4(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (2/3) * math.pi * r ** 3\ndef volumeofcuboid_v1(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return l * b * h\ndef volumeofsphere_v1(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3\ndef volumeofcuboid_v2(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return l * b * h\ndef volumeofsphere_v2(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3\ndef volumeofcuboid_v3(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return l * b * h\ndef volumeofsphere_v3(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3\ndef volumeofcuboid_v4(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return l * b * h\ndef volumeofsphere_v4(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3\ndef volumeofcuboid_v5(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return l * b * h\ndef volumeofsphere_v5(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3\ndef volumeofcuboid_v6(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return l * b * h\ndef volumeofsphere_v6(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3\ndef volumeofcuboid_v7(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return l * b * h\ndef volumeofsphere_v7(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3\ndef volumeofcuboid_v8(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return l * b * h\ndef volumeofsphere_v8(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3\ndef volumeofcuboid_v9(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return l * b * h\ndef volumeofsphere_v9(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3\ndef volumeofcuboid_v10(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return l * b * h\ndef volumeofsphere_v10(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3\ndef volumeofcu"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #return math.sqrt(w*w + h*h)\n    c = math.hypot(w,h)\n    return c\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # your code here\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for x in listval:\n        if x > max:\n            max = x\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for item in listval:\n        if item > max:\n            max = item\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # maxval = listval[0]\n    maxval = 0\n    for i in range(len(listval)):\n        if listval[i] > maxval:\n            maxval = listval[i]\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for item in listval:\n        if maxval < item:\n            maxval = item\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 1:\n        return listval[0]\n    else:\n        return max(listval[0], max_val(listval[1:]))\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 0\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = None\n    for item in listval:\n        if max_num is None or max_num < item:\n            max_num = item\n    return max_num\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > maxval:\n            maxval = listval[i]\n    return maxval\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divs = []\n    for i in range(1, number):\n        if number % i == 0:\n            divs.append(i)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    i = 1\n    while i < (number / 2) + 1:\n        if number % i == 0:\n            total += i\n        i += 1\n    return total\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    n = number\n    div = 1\n    sum = 0\n    while div <= n:\n        if n % div == 0:\n            sum += div\n        div += 1\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    \n    div_sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            div_sum += i\n    return div_sum\n    \n    \n    "
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divs = []\n    for i in range(1, number):\n        if number % i == 0:\n            divs.append(i)\n    return sum(divs)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum(divisors(number))\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_divs = 0\n    for i in range(1,number+1):\n        if number % i == 0:\n            sum_divs += i\n    return sum_divs\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 1:\n        return 1\n    else:\n        return number + sum_div(number/2)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum(i for i in range(1, number + 1) if number % i == 0)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    pass\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    return get_inv_count_recursive(arr, 0, n-1) \n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return arr.count(0)\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if (arr[i] > arr[j]): \n                count += 1\n    return count \n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    if len(arr) == 1:\n        return 0\n    else:\n        count+=1\n        return count+get_Inv_Count(arr[1:])\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) <= 1: \n        return 0, arr\n    mid = len(arr)//2\n    count_left, left_arr = get_Inv_Count(arr[:mid])\n    count_right, right_arr = get_Inv_Count(arr[mid:])\n    count = count_left + count_right\n    i, j, k = 0, 0, 0\n    while i < len(left_arr) and j < len(right_arr):\n        if left_arr[i] <= right_arr[j]:\n            arr[k] = left_arr[i]\n            i += 1\n        else:\n            arr[k] = right_arr[j]\n            count += len(left_arr)-i\n            j += 1\n        k += 1\n    while i < len(left_arr): \n        arr[k] = left_arr[i]\n        i += 1\n        k += 1\n    while j < len(right_arr):\n        arr[k] = right_arr[j]\n        j += 1\n        k += 1\n    return count, arr\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    N = len(arr)\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Sort the array and store the sorted array in reverse order\n    arr = sorted(arr, reverse = True)\n    print arr\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] < arr[j]:\n                count += 1\n    return count \n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    n = len(arr)\n    \n    if n==1:\n        return 0\n    \n    else:\n        mid = int(n/2)\n        \n        left = arr[0:mid]\n        right = arr[mid:]\n        \n        Inv_Count_Left = get_Inv_Count(left)\n        Inv_Count_Right = get_Inv_Count(right)\n        \n        Inv_Count_Total = Inv_Count_Left + Inv_Count_Right\n        \n        left_arr = [arr[0]]\n        right_arr = [arr[mid]]\n        \n        for i in range(1, mid):\n            if arr[i] < left_arr[-1]:\n                left_arr.append(arr[i])\n                \n        for i in range(mid, n):\n            if arr[i] < right_arr[-1]:\n                right_arr.append(arr[i])\n                \n        right_arr = right_arr[::-1]\n        \n        k = 0\n        j = 0\n        for i in range(len(left_arr)):\n            if left_arr[i] > right_arr[j]:\n                k += 1\n            j += 1\n            \n        Inv_Count_Total += k\n        \n        return Inv_Count_Total\n    \n    \n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [val for sublist in list1 for val in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    def flatten(list1):\n        '''\n        Flatten a nested list.\n        '''\n        if len(list1) < 1:\n            return list1\n        elif isinstance(list1[0], list):\n            return flatten(list1[0]) + flatten(list1[1:])\n        else:\n            return list1[:1] + flatten(list1[1:])\n    return flatten(list1)\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return flatten_list_iterative(list1)\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    if len(list1) > 1:\n        for x in list1:\n            if isinstance(x, list):\n                flat_list.extend(flatten_list(x))\n            else:\n                flat_list.append(x)\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for element in list1:\n        if isinstance(element, list):\n            result += flatten_list(element)\n        else:\n            result.append(element)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for i in list1:\n        if isinstance(i, list):\n            list2.extend(flatten_list(i))\n        else:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list_len = len(list1)\n    if list_len == 0:\n        return []\n    if list_len == 1:\n        return list1[0]\n    else:\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    res = []\n    for item in list1:\n        if type(item) is list:\n            res += flatten_list(item)\n        else:\n            res.append(item)\n    return res\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    res = []\n    for item in list1:\n        if isinstance(item, list):\n            res.extend(flatten_list(item))\n        else:\n            res.append(item)\n    return res\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    n = len(stdata)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return stdata[0]\n    elif n == 2:\n        return max(stdata[0],stdata[1])\n    elif n == 3:\n        return max(stdata[0],stdata[1],stdata[2])\n    elif n == 4:\n        return max(stdata[0]+stdata[1],stdata[1]+stdata[2],stdata[2]+stdata[3],stdata[3]+stdata[0])\n    else:\n        return max(max_aggregate(stdata[:n//2]),max_aggregate(stdata[n//2:]),max_aggregate(stdata[:n//2])+max_aggregate(stdata[n//2:]))\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate_count = defaultdict(lambda: 0)\n    aggregate_count[0] = 0\n    for tup in stdata:\n        if aggregate_count[tup[0]] == 0:\n            aggregate_count[tup[0]] = 1\n        else:\n            aggregate_count[tup[0]] += 1\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    count = defaultdict(int)\n    for k,v in stdata:\n        count[k] += v\n    return max(count.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate_dict = defaultdict(int)\n    for tup in stdata:\n        aggregate_dict[tup[0]] += tup[1]\n    return max(aggregate_dict.items(), key=lambda x:x[1])\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(list)\n    d1 = defaultdict(list)\n    for name, value in stdata:\n        if name in ['name', 'city']:\n            d[name].append(value)\n        else:\n            d[name].append(int(value))\n    for name, values in d.items():\n        d1[name] = max(values)\n    return d1\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata=sorted(stdata,key=lambda x: x[1])\n    total=0\n    maxagg=0\n    for data in stdata:\n        if data[1]>maxagg:\n            maxagg=data[1]\n        total+=data[1]\n    return maxagg,total\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    v = defaultdict(int)\n    for i in stdata:\n        for j in i:\n            v[j] += 1\n    return v\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    vdict=defaultdict(int)\n    for score,time in stdata:\n        vdict[score]+=time\n    # print vdict\n    maxscore=max(vdict.keys())\n    maxtime=vdict[maxscore]\n    return maxscore,maxtime\ndef tup_to_list(stdata):\n    '''\n    Write a function to convert the list of tuples to a list of lists.\n    '''\n    tolist=[]\n    for score,time in stdata:\n        tolist.append([score,time])\n    return tolist\ndef max_aggregate_in_list(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of lists.\n    '''\n    vdict=defaultdict(int)\n    for score,time in stdata:\n        vdict[score]+=time\n    # print vdict\n    maxscore=max(vdict.keys())\n    maxtime=vdict[maxscore]\n    return maxscore,maxtime\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    if len(stdata) == 0:\n        return 0\n    return max([x[1] for x in stdata])\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    #keep track of the sums, counts\n    counts = defaultdict(int)\n    sums = defaultdict(int)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    return count_binary_seq(n-1) + count_binary_seq(n-2)\n    \n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==0:\n        return 1\n    else:\n        return count_binary_seq(n-1) + count_binary_seq(n-1)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    c = 0\n    for i in xrange(1, 2**n):\n        x = bin(i)[2:]\n        if x.count('1') == n:\n            c += 1\n    return c\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    res = {}\n    # 0, 1 -> '', '0', '1'\n    # 2, 3 -> '01', '00', '10', '11'\n    # 4, 5 -> '0110', '0101', '0111', '0100', '1001', '1010', '1011', '1100', '1101', '1110', '1111'\n    # 6, 7 -> '010110', '010100', '010111', '010100', '010100', '010101', '010100', '010101', '010111', '010111', '011010', '011011', '011100', '011101', '011110', '011111'\n    # 8, 9 -> '01011010', '01011011', '01011100', '01011101', '01011110', '01011111', '01101000', '01101001', '01101010', '01101011', '01101100', '01101101', '01101110', '01101111', '01110000', '01110001', '01110010', '01110011', '01110100', '01110101', '01110110', '01110111', '01111000', '01111001', '01111010', '01111011', '01111100', '01111101', '01111110', '01111111'\n    # 10, 11 -> '0101010101', '0101010110', '0101010111', '0101011010', '0101011011', '0101011100', '0101011101', '0101011110', '0101011111', '0101101000', '0101101001', '0101101010', '0101101011', '0101101100', '0101101101', '0101101110', '0101101111', '0101110000', '0101110001', '0101110010', '0101110011', '0101110100', '0101110101', '0101110110', '0101110111', '0101111000', '0101111001', '0101111010', '0101111011', '0101111100', '0101111101', '0101111110', '0101111111'\n    # 12, 13 -> '01011011010', '01011011011', '01011011100', '01011011101', '01011011110', '01011011111', '01011011000', '01011011001', '01011011010', '01011011011', '01011011100', '01011011101', '01011011110', '01011011111', '01011011000', '01011011001', '01011011010', '01011011011', '01011011100', '01011011101', '01011011110', '01011011111', '01011011000', '01011011001', '01011011010', '01011011011', '01011011100', '01011011101', '01011011110', '01011011111', '0101111000', '0101111001', '0101111010', '0101111011', '0101111100', '0101111101', '0101111110', '0101111111'\n    # 14, 15 -> '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010110110110', '010110110111', '010110110100', '010110110101', '010"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(n*2)):\n        if bin(i).count(\"1\") == n:\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_sequences(n):\n        if n == 1:\n            return 2\n        else:\n            return 4*count_sequences(n-1) + count_sequences(n-1) - 1\n    if n == 0:\n        return 1\n    return 2*count_sequences(n)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return count_binary_seq_helper(n, 0, 0)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 1\n        else:\n            return count_binary(n-1) + count_binary(n-2) + count_binary(n-3)\n    # print(count_binary(n))\n    n = 2*n\n    n_1s = count_binary(n-1)\n    n_2s = n - n_1s\n    # print(n_2s)\n    return n_1s + n_2s\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 2**n):\n        # print(bin(i))\n        if bin(i).count('1') == bin(i).rfind('1') + 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(0, 2**n):\n        k = bin(i)[2:]\n        if bin(i)[2:] == bin(i)[2:][::-1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return max(dict_depth(v) for v in d.values()) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max([len(val) if isinstance(val, dict) else 1 for val in d.values()])\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is not dict:\n        return 1\n    return 1 + max(dict_depth(v) for v in d.values())\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return max([dict_depth(v) for v in d.values()]) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max([1 + dict_depth(v) if isinstance(v, dict) else 1 for v in d.values()]) if isinstance(d, dict) else 1\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    start = ranges[index][0]\n    end = ranges[index][1]\n    for i in range(start,end):\n        if (arr[i] > arr[i+rotations]) :\n            return i + rotations\n    return arr[rotations]\n    \ndef sort(arr) :\n    '''\n    Write a python function to sort the array in ascending order\n    '''\n    length = len(arr)\n    if length <= 1 :\n        return arr\n    ranges = []\n    for i in range(length):\n        ranges.append([i,i])\n    for i in range(length-1,0,-1):\n        ranges[i][0] = find_Element(arr,ranges,i,0)\n    ranges[0][1] = len(arr)-1\n    \n    # for each rotaion, find index of the largest element from the remainder \n    # sort the array from that index and then arr[0] to arr[index - 1]\n    for i in range(length):\n        for j in range(i+1,length):\n            if arr[ranges[i][1]] > arr[ranges[j][1]] :\n                temp = ranges[i]\n                ranges[i] = ranges[j]\n                ranges[j] = temp\n    \n    temp = ranges[0]\n    ranges[0] = ranges[length-1]\n    ranges[length-1] = temp\n    for i in range(length):\n        ranges[i][0] = find_Element(arr,ranges,i,0)\n    for i in range(length):\n        arr[i] = arr[ranges[i][0]]\n    return arr\n    \ndef main():\n    print sort([4, 5, 2, 3, 1])\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index == len(rotations) :\n        return arr[rotations[index-1]]\n    elif index == 0 :\n        return arr[rotations[index]]\n    else :\n        return find_Element(arr,rotations,rotations,index+1)\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotation_index = index%rotations\n    value = ranges[rotation_index]\n    arr[value] = index\n    for i in range(rotation_index+1,rotations) :\n        arr[rotation_index] = arr[i]\n        rotation_index = i\n    \n    return arr[rotation_index]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for r in rotations : \n        if arr[index-r] > arr[index-r-1] :\n            return arr[index-r]\n    return arr[index-r-1]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #base case\n    if index >= len(rotations) :\n        return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    return ((arr[index%len(arr)])+rotations*((arr[(index+1)%len(arr)])-arr[index%len(arr)])-rotations*((arr[(index-1)%len(arr)])-arr[(index-2)%len(arr)]))\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    print 'Find Element at index %d after %d rotations'%(index,rotations)\n    \n    for i in range(ranges) :\n        arr = find_rotated_array(arr)\n    print arr\n    return arr[index]\n    \n    \ndef find_rotated_array(arr) :\n    '''\n    Write a python function to find the array element at its index.\n    '''\n    print arr\n    \n    return arr[1:] + arr[:1]\n    \n    \ndef find_rotations(arr) :\n    '''\n    Write a python function to find the number of rotations needed to reach index of the array element.\n    '''\n    return len(arr) - arr.index(arr[0])\n    \n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index <0 :\n        return None\n    if arr[index] in ranges :\n        return arr[index]\n    rotated_index = index + rotations[index]\n    if rotated_index >= len(arr) :\n        return arr[rotated_index%len(arr)]\n    return find_Element(arr,ranges,rotations,rotated_index)\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotations = rotations % len(arr)\n    n = len(arr)\n    \n    if index < n * rotations :\n        return arr[ index % n ]\n    \n    else :\n        return find_Element(arr,ranges,rotations+1,index-n*rotations)\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)) :\n        if arr[ranges[i][0]+rotations[i]] == index :\n            return arr[ranges[i][1]+rotations[i]]\n    return None\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    print \"start_withp(words)={0}\".format(words)\n    return [[w for w in words if w.startswith('p')], \"\"]\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in words:\n        if re.match('^p', i):\n            return [i, None]\n    return [None, None]\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if word.startswith('p'):\n            result.append(word)\n    return result\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    list_of_words = words\n    result = []\n    for word in list_of_words:\n        if word[0] == 'p':\n            result.append(word)\n    return result\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in words:\n        if word[0] == 'p':\n            res.append(word)\n    return res\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    if isinstance(words,list):\n        return [i for i in words if i.startswith('p')]\n    else:\n        return 'Please input a list of words'\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = re.compile('[pp]',re.I)\n    p1 = [i for i in words if p.search(i)]\n    return p1\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    first = None\n    second = None\n    for word in words:\n        if word[0] == 'p':\n            if first == None:\n                first = word\n            else:\n                second = word\n    return first, second\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i, word in enumerate(words):\n        if word[0]=='p':\n            return [words[i-1],words[i+1]]\ndef remove_from_list(l,c):\n    '''\n    Given a list of words and a character, remove all the words that begin with that character from the list.\n    '''\n    return [elem for elem in l if not elem[0]==c]\ndef find_word(word):\n    '''\n    Given a word, return a list of words that are in the same list, but the order of the list is different.\n    '''\n    return [word for word in words if word!=word[::-1]]\ndef is_palindrome(word):\n    '''\n    Given a word, return true if the word is a palindrome.\n    '''\n    return word==word[::-1]\ndef group_anagrams(words):\n    '''\n    Write a function to group all anagrams together.\n    '''\n    dict=dict()\n    for word in words:\n        sorted_word=sorted(word)\n        sorted_word=''.join(sorted_word)\n        if sorted_word not in dict:\n            dict[sorted_word]=[word]\n        else:\n            dict[sorted_word].append(word)\n    return dict.values()\ndef sort_sentence(sentence):\n    '''\n    Write a function to sort a string by the first letter in a word and \n    second letter in a word in the same string.\n    '''\n    import collections\n    words=sentence.split(' ')\n    res=[]\n    for word in words:\n        res.append(sorted((word[0],word[1]))+word[2:])\n    return''.join(res)\ndef number_sort(n):\n    '''\n    Given a string, sort the characters of the string into the order they appear in ascending order.\n    '''\n    import collections\n    dict=collections.Counter(n)\n    ans=[str(dict[char])+char for char in dict]\n    return ''.join(ans)\ndef convert_base(num, new_base):\n    '''\n    Write a function to convert a string into a number in a new base.\n    '''\n    dic={'0':0,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9}\n    new_num=0\n    base_num=0\n    while num:\n        base_num=dic[num[-1]]\n        new_num=new_num+base_num*(10**(len(num)-1))\n        num=num[:-1]\n    return new_num\ndef factorial(n):\n    '''\n    Write a function to compute the factorial of a number.\n    '''\n    if n<=1:\n        return 1\n    return n*factorial(n-1)\ndef fib(n):\n    '''\n    Write a function that returns the nth Fibonacci number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fib(n-1)+fib(n-2)\ndef sum_of_square(n):\n    '''\n    Write a function that returns the sum of the squares of all the numbers in the input list.\n    '''\n    return sum([n**2 for n in range(n)])\ndef find_digit_sum(num):\n    '''\n    Write a function that returns the sum of the digits of a number.\n    '''\n    if num<10:\n        return num\n    return num%10 + find_digit_sum(num/10)\ndef add_all_up(n):\n    '''\n    Write a function that returns the sum of the even-valued digits of a number.\n    '''\n    s=0\n    while n:\n        s+=n%10\n        n=n/10\n    return s\ndef palindrome_rec(word):\n    '''\n    Write a function that checks whether a string is a palindrome.\n    '''\n    if len(word)<=1:\n        return True\n    elif word[0]!=word[-1]:\n        return False\n    else:\n        return palindrome_rec(word[1:-1])\ndef power(a,n):\n    '''\n    Write a function that takes in two integers and returns the integer value of their power.\n    '''\n    res=1\n    while n:\n        res=res*a\n        n-=1\n    return res\ndef power_iter(a,n):\n    '''\n    Write a function that takes in two integers and returns the integer value of their power.\n    '''\n    res=1\n    while n:\n        res=res*a\n        n-=1\n    return res\ndef even_squares(n):\n    '''\n    Write a function that takes in a number n and returns the sum of the squares of all the even-valued numbers in the range [0, n].\n    '''\n    return sum([n**2 for n in range(n) if n%2==0])\ndef count_vowels(s):\n    '''\n    Write a function that takes in a string and returns the number of vowels (a, e, i, o, u) in the string.\n    '''\n    vowels={'a':0,'e':0,'i':0,'o':0,'u':0}\n    for char in s:\n        if char in vowels:\n            vowels[char]=vowels[char]+1\n    return vowels\ndef count_consonants(s):\n    '''\n    Write a function that takes in a string and returns the number of consonants (a, e, i, o, u) in the string.\n    '''\n    consonants={'a':0,'e':0,'i':0,'o':0,'u':0}\n    for char in s:\n        if char in consonants:\n            consonants[char]=consonants[char]+1\n    return consonants\ndef count_all(s):\n    '''\n    Write a function that takes in a string and returns a dictionary with the number of occurrences of each character in the string.\n    '''\n    char_count=dict()\n    for char in s:\n        if char in char_count:\n            char_count[char]=char_count[char]+1\n        else:\n            char_count[char]=1\n    return char_count\ndef count_words(s):\n    '''\n    Write a function that takes in a string and returns a dictionary with the number of occurrences of each word in the string.\n    '''\n    words=s.split(' ')\n    word_count=dict()\n    for word in words:\n        if word in word_count:\n            word_count[word]=word_count[word]+1\n        else:\n            word_count[word]=1\n    return word_count\ndef count_chars(s):\n    '''\n    Write a function that takes in a string and returns a dictionary with the number of occurrences of each character in the string.\n    '''\n    char_count=dict()\n    for char in s:\n        if char in char_count:\n            char_count[char]=char_count[char]+1\n        else:\n            char_count[char]=1\n    return char_count\ndef count_words_2(s):\n    '''\n    Write a function that takes in a string and returns a dictionary with the number of occurrences of each word in the string.\n    '''\n    import collections\n    words=s.split(' ')\n    res=collections.defaultdict(int)\n    for word in words:\n        res[word]+=1\n    return res\ndef get_common_items(list1, list2):\n    '''\n    Write a function that takes in two lists and returns a list of the common items in the two lists.\n    '''\n    return [item for item in list1 if item in list2]\ndef reverse_dictionary(d):\n    '''\n    Write a function that takes in a dictionary and returns a dictionary with the keys and values reversed.\n    '''\n    return dict([(val,key) for key,val in d.items()])\ndef calculate"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words_arr=[]\n    for word in words:\n        if word[0]=='p':\n            words_arr.append(word)\n    return words_arr\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k <= index:\n        return a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    #print a, index, k\n    if n == index:\n        return 0\n    if a[index] <= k:\n        return max(a[index], max_sum_increasing_subseq(a, n, index+1, k))\n    else:\n        return max(a[index], max_sum_increasing_subseq(a, n, index+1, k) + a[index] - k)\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index < n and k < len(a):\n        max_sum = a[index]\n        prefix_sum = max_sum\n        for j in xrange(index, k):\n            prefix_sum = prefix_sum + a[j]\n            if prefix_sum > max_sum:\n                max_sum = prefix_sum\n        for j in xrange(k, len(a)):\n            prefix_sum = prefix_sum + a[j]\n            if prefix_sum > max_sum:\n                max_sum = prefix_sum\n        return max_sum\n    else:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    result = -sys.maxint\n    for i in range(index, n):\n        if a[i] >= a[index] and a[i] + max_sum_increasing_subseq(a, n, i + 1, k) > result:\n            result = a[i] + max_sum_increasing_subseq(a, n, i + 1, k)\n    return result\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return k\n    if k == a[index]:\n        return max(k, k + max_sum_increasing_subseq(a, n, index + 1, k))\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + a[index]))\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    #print (a, index, k)\n    if index == n:\n        return 0\n    if k == 0:\n        return a[index]\n    #print ('k',k,index,a,n)\n    result = -1000000\n    for i in range(index,n):\n        #print (a,index,i,k,result,a[i] > k, a[i] + max_sum_increasing_subseq(a, n, i+1, k-1))\n        if a[i] > k:\n            result = max(result, a[i] + max_sum_increasing_subseq(a, n, i+1, k))\n        #print (result,a[i] > k, a[i] + max_sum_increasing_subseq(a, n, i+1, k))\n    return result\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if (index == n):\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n:\n        return 0\n    if index == n:\n        return a[index]\n    if index > 0:\n        max_sum = -float('inf')\n        for i in range(index, n):\n            max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i + 1, k))\n            if i + 1 == k:\n                max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a, n, i + 1, k + 1))\n    else:\n        max_sum = a[index]\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k < index:\n        return 0\n    if n == index:\n        return a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index >= n or k > n:\n        return 0\n    if k <= i:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    return max(max_sum_increasing_subseq(a, n, index + 1, k) + a[index], max_sum_increasing_subseq(a, n, index + 1, k - 1) + a[index])\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex[m][n]='*'\n    return tuplex\ndef star_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a star of a tuple.\n    '''\n    tuplex[m][n]='*'\n    return tuplex\ndef square_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a square of a tuple.\n    '''\n    tuplex[m][n]='*'\n    tuplex[n][m]='*'\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon=''\n    for i in range(m):\n        if i<n:\n            colon+=tuplex[i]\n        else:\n            colon+=':'\n    return colon\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m<=0 or n<=0:\n        return()\n    return tuplex[m-1:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m):\n        for j in range(n):\n            print(tuplex[i][j],end=\" \")\n        print(\"\\n\")\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex)==0:\n        return ()\n    elif len(tuplex)==1:\n        if m==0:\n            return tuplex[0]\n        else:\n            return (tuplex[0],)\n    else:\n        if m>0:\n            return (tuplex[0],tuplex[1])\n        elif m==0:\n            return tuplex[0]\n        else:\n            return (tuplex[0],) + colon_tuplex(tuplex[1:],m-1,n)\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m>=0 and n>=0:\n        return tuplex[m][n]\n    return None\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex)\n    tuplex=list(tuplex)\n    if m>n:\n        return tuplex[n:]+tuplex[:n]\n    else:\n        return tuplex[m:]+tuplex[:m]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m>n:\n        temp=n\n        n=m\n        m=temp\n    i=0\n    while i<m:\n        print tuplex[i],\n        i=i+1\n    print \":\"\n    i=0\n    while i<n:\n        print tuplex[i],\n        i=i+1\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m<1 or n<1:\n        return \"Invalid input\"\n    return tuplex[m-1:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n]\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N > len(nums1) * len(nums2):\n        return None\n    nums1.sort()\n    nums2.sort()\n    res = []\n    for i in range(N):\n        res.append(nums1[i] * nums2[i])\n    return res\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def product(num_list):\n        result = 1\n        for num in num_list:\n            result *= num\n        return result\n    \n    def get_product(num_list, N):\n        if not N:\n            return []\n        if len(num_list) == 1:\n            return [num_list[0]**N]\n        num_list = sorted(num_list, reverse = True)\n        prod = []\n        for i in xrange(len(num_list) - 1):\n            prod.append(num_list[i] * num_list[i + 1])\n        if prod:\n            return prod + [product(num_list[:-1])]\n        else:\n            return [product(num_list)]\n    \n    def get_prod_from_list(num_list, N):\n        if N > len(num_list):\n            return [product(num_list)]\n        if not num_list:\n            return []\n        return get_product(num_list, N) + get_prod_from_list(num_list[1:], N)\n    \n    print 'Product of first list is', product(nums1)\n    print 'Product of second list is', product(nums2)\n    prod_nums = get_prod_from_list(nums1, N) + get_prod_from_list(nums2, N)\n    prod_nums.sort(reverse = True)\n    print 'Product of {} largest numbers is {}'.format(N, prod_nums[:N])\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    return [max(nums1[i]*nums2[i], nums1[i]*nums2[N-i-1]) for i in range(N/2)]\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    global result\n    result = 0\n    list_product = 1\n    for i in range(N):\n        list_product *= nums1[i]\n    for i in range(N):\n        result = max(result, list_product * nums2[i])\n        list_product /= nums2[i]\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) == 1:\n        return max(nums1[0] * nums2[0], nums1[0] * nums2[1], nums1[0] * nums2[2])\n    if len(nums2) == 1:\n        return max(nums1[1] * nums2[0], nums1[1] * nums2[1], nums1[1] * nums2[2])\n    \n    # nums1 is longer\n    longer_num = nums1\n    shorter_num = nums2\n    if N > len(nums1):\n        N = len(nums1)\n    if N > len(nums2):\n        N = len(nums2)\n    products = []\n    for i in range(N):\n        products.append(longer_num[i] * shorter_num[i])\n    return max(products)\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) == 1:\n        return max(nums1[0] * nums2[0], nums1[0] * nums2[1])\n    if len(nums2) == 1:\n        return max(nums1[0] * nums2[0], nums1[1] * nums2[0])\n    mid = N // 2\n    left_nums1 = nums1[:mid]\n    left_nums2 = nums2[:mid]\n    right_nums1 = nums1[mid:]\n    right_nums2 = nums2[mid:]\n    left_prod = large_product(left_nums1, left_nums2, mid)\n    right_prod = large_product(right_nums1, right_nums2, mid)\n    cross_prod = large_product(nums1[mid:], nums2[mid:], N - mid)\n    return max(left_prod, right_prod, cross_prod)\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    assert len(nums1) <= N and len(nums2) <= N\n    max_products = []\n    for i in range(N):\n        max_products.append(max(nums1[i], nums2[i]))\n    return max_products\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def helper(N):\n        # N <= 1, then just return list1\n        if N == 1:\n            return nums1\n        elif N == 2:\n            return nums1 + nums2\n        else:\n            # Sorts nums1, nums2\n            # nums1[0] * nums1[1] * nums1[2] *... * nums1[N-1]\n            # nums2[0] * nums2[1] * nums2[2] *... * nums2[N-1]\n            nums1_sorted = sorted(nums1, reverse = True)\n            nums2_sorted = sorted(nums2, reverse = True)\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        products.append(product)\n    return max(products)\n    \ndef test_large_product():\n    print large_product([1,2,3,4,5], [2,3,4,5,6], 3)\n    print large_product([-1,-2,-3], [-2,-3,-4], 2)\n    print large_product([-1,-2,-3], [-2,-3,-4], 3)\n    \ndef small_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of smallest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        products.append(product)\n    return min(products)\n    \ndef test_small_product():\n    print small_product([1,2,3,4,5], [2,3,4,5,6], 3)\n    print small_product([-1,-2,-3], [-2,-3,-4], 2)\n    print small_product([-1,-2,-3], [-2,-3,-4], 3)\n    \ndef most_common(lst):\n    '''\n    Write a function to find the most common element in a list.\n    '''\n    counter = 0\n    for num in lst:\n        count = lst.count(num)\n        if count > counter:\n            counter = count\n            most = num\n    return most\n    \ndef test_most_common():\n    print most_common([1,1,2,2,2,3,3,3])\n    print most_common([1,1,2,2,2,3,3,3,3,3])\n    print most_common([1,1,2,2,2,3,3,3,3,3,3])\n    \ndef unique(lst):\n    '''\n    Write a function to find the unique elements in a list.\n    '''\n    return list(set(lst))\n    \ndef test_unique():\n    print unique([1,1,2,2,2,3,3,3,3,3,3])\n    print unique([1,1,2,2,2,3,3,3,3,3,3])\n    print unique([1,1,2,2,2,3,3,3,3,3,3])\n    \ndef remove_duplicates(lst):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    newlst = []\n    for num in lst:\n        if num not in newlst:\n            newlst.append(num)\n    return newlst\n    \ndef test_remove_duplicates():\n    print remove_duplicates([1,1,2,2,2,3,3,3,3,3,3])\n    print remove_duplicates([1,1,2,2,2,3,3,3,3,3,3])\n    print remove_duplicates([1,1,2,2,2,3,3,3,3,3,3])\n    \ndef reverse_list(lst):\n    '''\n    Write a function to reverse a list.\n    '''\n    return lst[::-1]\n    \ndef test_reverse_list():\n    print reverse_list([1,2,3,4,5])\n    print reverse_list([1,2,3,4,5])\n    print reverse_list([1,2,3,4,5])\n    \ndef remove_mid(lst, start, stop):\n    '''\n    Write a function to remove the first and last elements from a list.\n    '''\n    return lst[start:stop]\n    \ndef test_remove_mid():\n    print remove_mid([1,2,3,4,5], 1, 3)\n    print remove_mid([1,2,3,4,5], 1, 3)\n    print remove_mid([1,2,3,4,5], 1, 3)\n    \ndef remove_duplicates_dict(lst):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    newlst = []\n    for num in lst:\n        if num not in newlst:\n            newlst.append(num)\n    return newlst\n    \ndef test_remove_duplicates_dict():\n    print remove_duplicates_dict([1,1,2,2,2,3,3,3,3,3,3])\n    print remove_duplicates_dict([1,1,2,2,2,3,3,3,3,3,3])\n    print remove_duplicates_dict([1,1,2,2,2,3,3,3,3,3,3])\n    \ndef max_in_list(lst):\n    '''\n    Write a function to find the maximum number in a list.\n    '''\n    return max(lst)\n    \ndef test_max_in_list():\n    print max_in_list([1,2,3,4,5])\n    print max_in_list([1,2,3,4,5])\n    print max_in_list([1,2,3,4,5])\n    \ndef odd_even_in_list(lst):\n    '''\n    Write a function to find the odd and even elements in a list.\n    '''\n    odd = []\n    even = []\n    for num in lst:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return [odd, even]\n    \ndef test_odd_even_in_list():\n    print odd_even_in_list([1,2,3,4,5])\n    print odd_even_in_list([1,2,3,4,5])\n    print odd_even_in_list([1,2,3,4,5])\n    \ndef remove_even_numbers(lst):\n    '''\n    Write a function to remove even numbers from a list.\n    '''\n    newlst = []\n    for num in lst:\n        if num % 2 == 1:\n            newlst.append(num)\n    return newlst\n    \ndef test_remove_even_numbers():\n    print remove_even_numbers([1,2,3,4,5])\n    print remove_even_numbers([1,2,3,4,5])\n    print remove_even_numbers([1,2,3,4,5])\n    \ndef remove_odd_numbers(lst):\n    '''\n    Write a function to remove odd numbers from a list.\n    '''\n    newlst = []\n    for num in lst:\n        if num % 2 == 0:\n            newlst.append(num)\n    return newlst\n    \ndef test_remove_odd_numbers():\n    print remove_odd_numbers([1,2,3,4,5])\n    print remove_odd_numbers([1,2,3,4,5])\n    print remove_odd_numbers([1,2,3,4,5])\n    \ndef sum_of_list(lst):\n    '''\n    Write a function to find the sum of a list.\n    '''\n    return sum(lst)\n    \ndef test_sum_of_list():\n    print sum_of_list([1,2,3,4,5])\n    print sum_of_list([1,2,3,4,5])\n    print sum_of_list([1,2,3,4,5])\n    \ndef max_in_list(lst):\n    '''\n    Write a function to find the maximum number in a list.\n    '''\n    return max(lst)\n    \ndef test_max_in_list():\n    print max_in_list([1,2,3,4,5])\n    print max_in_list([1,2,3,4,5])\n    print max_in_list([1,"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    for i in range(N):\n        result.append(max(nums1[i]*nums2[i], nums1[i]*nums2[i], nums1[i]*nums2[i]))\n    return result\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n        \ndef swap(a,b):\n    '''\n    Write a python function to swap two numbers.\n    '''\n    a,b = b,a\n    return a,b\n    \ndef add_up(a,b,c):\n    '''\n    Write a python function to add up three numbers.\n    '''\n    return a+b+c\n    \ndef fib(n):\n    '''\n    Write a python function to calculate nth number of fibonacci series.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n    \ndef factorial(n):\n    '''\n    Write a python function to calculate nth factorial.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n    \ndef print_digits(n):\n    '''\n    Write a python function to print digits of a number.\n    '''\n    if n < 10:\n        print n\n    else:\n        n = str(n)\n        print_digits(n[1])\n        print int(n[0])\n        \ndef print_sum(n):\n    '''\n    Write a python function to calculate sum of digits of a number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return int(n%10) + print_sum(int(n/10))\n        \ndef fact(n):\n    '''\n    Write a python function to calculate nth factorial.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * fact(n-1)\n    \ndef is_prime(n):\n    '''\n    Write a python function to determine if a number is prime.\n    '''\n    if n < 2:\n        return False\n    for i in range(2,n/2+1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef gcd(a,b):\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    while b!= 0:\n        a,b = b, a%b\n    return a\n    \ndef lcm(a,b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    return a*b/gcd(a,b)\n    \ndef digit_count(n):\n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    return len(str(n))\n    \ndef sum_digits(n):\n    '''\n    Write a python function to find sum of digits of a number.\n    '''\n    s = 0\n    while n!= 0:\n        s += n%10\n        n /= 10\n    return s\n    \ndef print_formatted(number):\n    '''\n    Write a python function to print the formated string of a number.\n    '''\n    w = len(str(bin(number))[2:])\n    for i in range(1,number+1):\n        print str(i).rjust(w,' '),oct(i)[2:].rjust(w,' '),hex(i)[2:].rjust(w,' '),bin(i)[2:].rjust(w,' '),sep=''\n        \ndef print_recursive_factorial(n):\n    '''\n    Write a python function to find factorial of a number using recursion.\n    '''\n    if n == 1:\n        return n\n    else:\n        return n * print_recursive_factorial(n-1)\n    \ndef print_number_of_occurrences(n,x):\n    '''\n    Write a python function to find the number of times x occurs in a given number.\n    '''\n    if n == 0:\n        return 0\n    elif n%10 == x:\n        return 1 + print_number_of_occurrences(n/10,x)\n    else:\n        return print_number_of_occurrences(n/10,x)\n        \ndef power(x,n):\n    '''\n    Write a python function to find x^n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return x*power(x,n-1)\n    \ndef is_palindrome(n):\n    '''\n    Write a python function to determine if a number is palindrome.\n    '''\n    return str(n)[::-1] == str(n)\n    \ndef swap_digits(n):\n    '''\n    Write a python function to swap digits of a number.\n    '''\n    n = str(n)\n    s = n[-1]\n    n = n[:-1]\n    n = n + s\n    return int(n)\n    \ndef reverse_digits(n):\n    '''\n    Write a python function to reverse digits of a number.\n    '''\n    n = str(n)\n    return int(n[::-1])\n    \ndef print_array(A):\n    '''\n    Write a python function to print elements of an array.\n    '''\n    for i in range(len(A)):\n        print A[i]\n        \ndef sort_array(A):\n    '''\n    Write a python function to sort an array.\n    '''\n    for i in range(len(A)):\n        for j in range(len(A)-i-1):\n            if A[j] > A[j+1]:\n                A[j],A[j+1] = A[j+1],A[j]\n            \ndef print_list(A):\n    '''\n    Write a python function to print elements of a list.\n    '''\n    for i in range(len(A)):\n        print A[i]\n    \ndef add_to_list(A,b):\n    '''\n    Write a python function to add b to every element of a list.\n    '''\n    for i in range(len(A)):\n        A[i] += b\n    \ndef print_matrix(A):\n    '''\n    Write a python function to print elements of a 2D array.\n    '''\n    for i in range(len(A)):\n        print A[i]\n    \ndef sum_of_digits(n):\n    '''\n    Write a python function to calculate sum of digits of a number.\n    '''\n    s = 0\n    while n!= 0:\n        s += n%10\n        n /= 10\n    return s\n    \ndef print_matrix(A):\n    '''\n    Write a python function to print elements of a 2D array.\n    '''\n    for i in range(len(A)):\n        print A[i]\n    \ndef invert_matrix(A):\n    '''\n    Write a python function to invert a 2D array.\n    '''\n    n = len(A)\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                A[i][j] = 1\n            else:\n                A[i][j] = 0\n    return A\n    \ndef rotate_matrix(A):\n    '''\n    Write a python function to rotate a 2D array.\n    '''\n    n = len(A)\n    for i in range(n/2):\n        for j in range(i,n-i-1):\n            A[i][j],A[n-j-1][i],A[n-i-1][n-j-1],A[j][n-i-1] = A[j][n-i-1],A[n-j-1][i],A[n-i-1][n-j-1],A[i][j]\n    return A\n    \ndef sorted_list(A):\n    '''\n    Write a python function to sort a list.\n    '''\n    for "
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef count_digits(n):\n    '''\n    Write a python function to count the digits in a number.\n    '''\n    if n==0:\n        return 0\n    elif n>=1:\n        return 1+count_digits(n//10)\n    else:\n        return 0\ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime.\n    '''\n    if n<2:\n        return False\n    else:\n        for i in range(2,n//2+1):\n            if n%i==0:\n                return False\n        return True\ndef sum_digits(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return (n%10)+(sum_digits(n//10))\ndef rec_fibo(n):\n    '''\n    Write a python function to find the nth Fibonacci number.\n    '''\n    if n==1 or n==2:\n        return 1\n    else:\n        return rec_fibo(n-1)+rec_fibo(n-2)\ndef rec_factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*rec_factorial(n-1)\ndef is_palindrome(n):\n    '''\n    Write a python function to check if a number is a palindrome.\n    '''\n    if n<10:\n        return True\n    elif n%10==n/10%10:\n        return is_palindrome(n//10)\n    else:\n        return False\ndef check_digit(n):\n    '''\n    Write a python function to check if a number has a single digit.\n    '''\n    if n>9:\n        return False\n    else:\n        return True\ndef dec_to_bin(n):\n    '''\n    Write a python function to convert a decimal number to a binary number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return (n%2)+10*dec_to_bin(n//2)\ndef bin_to_dec(n):\n    '''\n    Write a python function to convert a binary number to a decimal number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return (n%10)+2*bin_to_dec(n//10)\ndef dec_to_oct(n):\n    '''\n    Write a python function to convert a decimal number to an octal number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return (n%8)+40*dec_to_oct(n//8)\ndef oct_to_dec(n):\n    '''\n    Write a python function to convert an octal number to a decimal number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return (n%10)+8*oct_to_dec(n//10)\ndef dec_to_hex(n):\n    '''\n    Write a python function to convert a decimal number to a hexadecimal number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return (n%16)+16*dec_to_hex(n//16)\ndef hex_to_dec(n):\n    '''\n    Write a python function to convert a hexadecimal number to a decimal number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return (n%10)+16*hex_to_dec(n//16)\ndef is_perfect(n):\n    '''\n    Write a python function to check if a number is perfect.\n    '''\n    if n<=1:\n        return False\n    else:\n        for i in range(2,n//2):\n            if n%i==0:\n                return False\n        return True\ndef is_abundant(n):\n    '''\n    Write a python function to check if a number is abundant.\n    '''\n    if n<=1:\n        return False\n    else:\n        for i in range(2,n//2):\n            if n%i==0:\n                return True\n        return False\ndef is_deficient(n):\n    '''\n    Write a python function to check if a number is deficient.\n    '''\n    if n<=1:\n        return False\n    else:\n        for i in range(2,n//2):\n            if n%i==0:\n                return False\n        return True\ndef is_divisible(n):\n    '''\n    Write a python function to check if a number is divisible.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False\ndef is_pentagonal(n):\n    '''\n    Write a python function to check if a number is pentagonal.\n    '''\n    if n<=0:\n        return False\n    else:\n        return (((3*n)**2)+1)%6==0\ndef is_hexagonal(n):\n    '''\n    Write a python function to check if a number is hexagonal.\n    '''\n    if n<=0:\n        return False\n    else:\n        return (((4*n)**2)+1)%8==0\ndef is_heptagonal(n):\n    '''\n    Write a python function to check if a number is heptagonal.\n    '''\n    if n<=0:\n        return False\n    else:\n        return (((5*n)**2)+1)%10==0\ndef is_octagonal(n):\n    '''\n    Write a python function to check if a number is octagonal.\n    '''\n    if n<=0:\n        return False\n    else:\n        return (((6*n)**2)+1)%12==0\ndef is_nonagonal(n):\n    '''\n    Write a python function to check if a number is nonagonal.\n    '''\n    if n<=0:\n        return False\n    else:\n        return (((5*n)**2)+1)%8!=0\ndef is_decagonal(n):\n    '''\n    Write a python function to check if a number is decagonal.\n    '''\n    if n<=0:\n        return False\n    else:\n        return (((3*n)**2)+1)%4==0\ndef is_hexagonal_close(n):\n    '''\n    Write a python function to check if two numbers are hexagonal and the difference is less than 2.\n    '''\n    if n<=0:\n        return False\n    else:\n        return is_hexagonal(n+2) and is_hexagonal(n-2) and abs(n-2)<2\ndef is_pentagonal_close(n):\n    '''\n    Write a python function to check if two numbers are pentagonal and the difference is less than 2.\n    '''\n    if n<=0:\n        return False\n    else:\n        return is_pentagonal(n+2) and is_pentagonal(n-2) and abs(n-2)<2\ndef is_octagonal_close(n):\n    '''\n    Write a python function to check if two numbers are octagonal and the difference is less than 2.\n    '''\n    if n<=0:\n        return False\n    else:\n        return is_octagonal(n+2) and is_octagonal(n-2) and abs(n-2)<2\ndef is_nonagonal_close(n):\n    '''\n    Write a python function to check if two numbers are nonagonal and the difference is less than 2.\n    ''"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple1 = tuple(str1)\n    return tuple1\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    result = ()\n    for char in str1:\n        result = result + (char,)\n    return result\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # make string uppercase\n    str1 = str1.upper()\n    # make a list of characters from string\n    list1 = []\n    for i in range(len(str1)):\n        list1.append(str1[i])\n    # convert list to tuple\n    tup1 = tuple(list1)\n    return tup1\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n    \n    \ndef string_to_list(str1):\n    '''\n    Write a function to convert a given string to a list of characters.\n    '''\n    return list(str1)\n    \n    \ndef string_to_set(str1):\n    '''\n    Write a function to convert a given string to a set of characters.\n    '''\n    return set(str1)\n    \n    \ndef string_to_dict(str1):\n    '''\n    Write a function to convert a given string to a dictionary of characters.\n    '''\n    return {i:str1.count(i) for i in str1}\n    \n    \ndef string_to_list_of_tuples(str1):\n    '''\n    Write a function to convert a given string to a list of tuples of characters.\n    '''\n    return [i for i in str1]\n    \n    \ndef string_to_numpy_array(str1):\n    '''\n    Write a function to convert a given string to a numpy array of characters.\n    '''\n    return np.array(list(str1))\n    \n    \ndef string_to_list_of_lists(str1):\n    '''\n    Write a function to convert a given string to a list of lists of characters.\n    '''\n    return [list(i) for i in str1]\n    \n    \ndef is_anagram_of_palindrome(str1,str2):\n    '''\n    Write a function to check if the given strings are anagrams of each other.\n    '''\n    return set(str1) == set(str2)\n    \n    \ndef is_anagram_of_palindrome2(str1,str2):\n    '''\n    Write a function to check if the given strings are anagrams of each other.\n    '''\n    return sorted(str1) == sorted(str2)\n    \n    \ndef is_anagram_of_palindrome3(str1,str2):\n    '''\n    Write a function to check if the given strings are anagrams of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    \n    return sorted(str1) == sorted(str2)\n    \n    \ndef is_anagram_of_palindrome4(str1,str2):\n    '''\n    Write a function to check if the given strings are anagrams of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    \n    str1 = str1.lower()\n    str2 = str2.lower()\n    \n    d1 = string_to_dict(str1)\n    d2 = string_to_dict(str2)\n    \n    return d1 == d2\n    \n    \ndef is_anagram_of_palindrome5(str1,str2):\n    '''\n    Write a function to check if the given strings are anagrams of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    \n    str1 = str1.lower()\n    str2 = str2.lower()\n    \n    d1 = string_to_dict(str1)\n    d2 = string_to_dict(str2)\n    \n    return d1 == d2\n    \n    \ndef is_anagram_of_palindrome6(str1,str2):\n    '''\n    Write a function to check if the given strings are anagrams of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    \n    str1 = str1.lower()\n    str2 = str2.lower()\n    \n    d1 = collections.Counter(str1)\n    d2 = collections.Counter(str2)\n    \n    return d1 == d2\n    \n    \ndef is_anagram_of_palindrome7(str1,str2):\n    '''\n    Write a function to check if the given strings are anagrams of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    \n    str1 = str1.lower()\n    str2 = str2.lower()\n    \n    d1 = {}\n    d2 = {}\n    \n    for i in str1:\n        if i not in d1:\n            d1[i] = 0\n        d1[i] += 1\n    \n    for i in str2:\n        if i not in d2:\n            d2[i] = 0\n        d2[i] += 1\n    \n    return d1 == d2\n    \n    \ndef is_anagram_of_palindrome8(str1,str2):\n    '''\n    Write a function to check if the given strings are anagrams of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    \n    str1 = str1.lower()\n    str2 = str2.lower()\n    \n    d1 = {}\n    d2 = {}\n    \n    for i in str1:\n        if i not in d1:\n            d1[i] = 0\n        d1[i] += 1\n    \n    for i in str2:\n        if i not in d2:\n            d2[i] = 0\n        d2[i] += 1\n    \n    return sorted(d1.values()) == sorted(d2.values())\n    \n    \ndef is_anagram_of_palindrome9(str1,str2):\n    '''\n    Write a function to check if the given strings are anagrams of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    \n    str1 = str1.lower()\n    str2 = str2.lower()\n    \n    d1 = collections.Counter(str1)\n    d2 = collections.Counter(str2)\n    \n    return d1 == d2\n    \n    \ndef is_anagram_of_palindrome10(str1,str2):\n    '''\n    Write a function to check if the given strings are anagrams of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    \n    str1 = str1.lower()\n    str2 = str2.lower()\n    \n    d1 = {}\n    d2 = {}\n    \n    for i in str1:\n        if i not in d1:\n            d1[i] = 0\n        d1[i] += 1\n    \n    for i in str2:\n        if i not in d2:\n            d2[i] = 0\n        d2[i] += 1\n    \n    return sorted(d1.values()) == sorted(d2.values())\n    \n    \ndef is_anagram_of_palindrome11(str1,str2):\n    '''\n    Write a function to check if the given strings are anagrams of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    \n    str1 = str1.lower()\n    str2 = str2.lower()\n    \n    d1 = collections.Counter(str1)\n    d2 = collections.Counter(str2)\n    \n    return d1 == d2\n    \n    \ndef is_anagram_of_palindrome12(str1,str2):\n    '''\n    Write a function to check if the given strings are anagrams of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    \n    str1 = str1.lower()\n    str2 = str2.lower()\n    \n    d1 = {}\n    d2 = {}\n    \n    for i in str1:\n        if i not in d1:\n            d1[i] = 0\n        d1[i] += 1\n    \n    for i in str2:\n        if i not in d2:\n            d2[i] = 0\n        d2[i] += 1\n    \n    return d1 == d2\n    \n    \ndef is_anagram_of_palindrome13(str1,str2):\n    '''\n    Write a function to check if the given strings are anagrams of each other"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    s=str1\n    l=len(s)\n    i=0\n    while(i<l):\n        if(s[i]==\"(\"):\n            i=i+1\n            t=0\n            while(s[i]!=\")\"):\n                t=t+1\n                i=i+1\n            l=l-t\n        i=i+1\n    return tuple(s)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    res = ()\n    for i in str1:\n        res += i,\n    return res\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # split the number into a list of bits, and create a list of integers\n    bit_list = [int(i) for i in bin(n)[2:]]\n    # find the index of the first 1 in the list of bits\n    first_bit_pos = bit_list.index(1)\n    # reverse the list of bits and convert back to an integer\n    new_num = int(''.join(str(x) for x in bit_list[first_bit_pos:][::-1]), 2)\n    return new_num\n    \ndef check_fibonacci_number(n):\n    '''\n    Write a python function to check if a number is in fibonacci sequence.\n    '''\n    if n == 0 or n == 1:\n        return True\n    else:\n        # create an array of fibonacci numbers up to n\n        fibonacci_nums = [0,1]\n        for i in range(2,n+1):\n            fibonacci_nums.append(fibonacci_nums[i-1] + fibonacci_nums[i-2])\n        # check if n is in the array\n        return n in fibonacci_nums\n    \ndef check_fibonacci_number_helper(n, max_n):\n    '''\n    Write a helper function to check if a number is in fibonacci sequence.\n    '''\n    # create an array of fibonacci numbers up to n\n    fibonacci_nums = [0,1]\n    for i in range(2,max_n+1):\n        fibonacci_nums.append(fibonacci_nums[i-1] + fibonacci_nums[i-2])\n    # check if n is in the array\n    return n in fibonacci_nums\n    \ndef check_fibonacci_number_recursive(n, max_n):\n    '''\n    Write a python function to check if a number is in fibonacci sequence.\n    '''\n    if max_n == 0:\n        return True\n    else:\n        # create an array of fibonacci numbers up to n\n        fibonacci_nums = [0,1]\n        for i in range(2,max_n+1):\n            fibonacci_nums.append(fibonacci_nums[i-1] + fibonacci_nums[i-2])\n        # check if n is in the array\n        return check_fibonacci_number_helper(n, max_n)\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return set_left_most_unset_bit(n//2) * 2 + 1\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    bit_number = n & -n\n    return n ^ bit_number\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n | (1 << n.bit_length() - 1)\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return (n & -n)\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    print (n&-n)\n    print (n&-n) + 1\n    print ((n&-n) + 1) << 1\n    print (n|((n&-n) + 1) << 1)\n    print ((n&-n) + 1) << 1 | 1\n    print ((n&-n) + 1) << 1 | 1 | 1\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    m = n\n    if n & (n-1) == 0:\n        return n\n    while n!= 0:\n        n >>= 1\n        m |= 1\n    return m\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # initializing result \n    res = n & (n - 1) \n    # checking if result is 1 or not\n    if res == 1: \n        return n | 1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n & -n\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1 + set_left_most_unset_bit(n/2)\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*(math.pi)*r**2*h\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*r*r*h\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if(r>=0 and h>=0):\n        return math.pi*(r**2)*(3*h/2)\n    else:\n        return 0\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi=math.pi\n    v=(1/3)*pi*r*r*h\n    return v\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi=math.pi\n    v=4/3*pi*r*r*r\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pi=math.pi\n    v=pi*r*r*h\n    return v\ndef volume_cone_2(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi=math.pi\n    v=(1/3)*pi*r*r*h\n    return v\ndef volume_sphere_2(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi=math.pi\n    v=4/3*pi*r*r*r\n    return v\ndef volume_cylinder_2(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pi=math.pi\n    v=pi*r*r*h\n    return v\ndef surface_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi=math.pi\n    s=(2*pi*r+2*pi*r*h)*2\n    return s\ndef surface_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    pi=math.pi\n    s=(pi*r*r*h+pi*r*r)\n    return s\ndef surface_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi=math.pi\n    s=(4*pi*r*r)\n    return s\ndef area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi=math.pi\n    s=4*pi*r*r\n    return s\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi=math.pi\n    s=(2*pi*r*r+2*pi*r*r*h)\n    return s\ndef area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    pi=math.pi\n    s=(pi*r*r*h+pi*r*r)\n    return s\ndef area_cone_2(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    pi=math.pi\n    s=(1/2)*pi*r*r*h\n    return s\ndef area_sphere_2(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi=math.pi\n    s=(4*pi*r*r)\n    return s\ndef area_cylinder_2(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi=math.pi\n    s=(2*pi*r*r+2*pi*r*r*h)\n    return s\ndef power(x,y):\n    '''\n    Write a function to compute the power of x to the power of y\n    '''\n    ans=x**y\n    return ans\ndef product(a,b):\n    '''\n    Write a function to compute the product of a and b\n    '''\n    ans=a*b\n    return ans\ndef quotient(a,b):\n    '''\n    Write a function to compute the quotient of a and b\n    '''\n    ans=a/b\n    return ans\ndef exponent(x,y):\n    '''\n    Write a function to compute the exponent of x to the power of y\n    '''\n    ans=x**y\n    return ans\ndef modulus(x):\n    '''\n    Write a function to compute the modulus of x\n    '''\n    ans=x%y\n    return ans\ndef square_root(x):\n    '''\n    Write a function to compute the square root of x\n    '''\n    ans=x**(1/2)\n    return ans\ndef absolute_value(x):\n    '''\n    Write a function to compute the absolute value of x\n    '''\n    ans=abs(x)\n    return ans\ndef arc_sin(x):\n    '''\n    Write a function to compute the arc sin of x\n    '''\n    ans=math.asin(x)\n    return ans\ndef arcsin_2(x):\n    '''\n    Write a function to compute the arcsin of x\n    '''\n    ans=math.asin(x)\n    return ans\ndef log(x):\n    '''\n    Write a function to compute the logarithm of x\n    '''\n    ans=math.log(x)\n    return ans\ndef log_2(x):\n    '''\n    Write a function to compute the logarithm of x\n    '''\n    ans=math.log10(x)\n    return ans\ndef log_10(x):\n    '''\n    Write a function to compute the logarithm of x\n    '''\n    ans=math.log10(x)\n    return ans\ndef trunc(x):\n    '''\n    Write a function to compute the truncated value of x\n    '''\n    ans=math.trunc(x)\n    return ans\ndef remainder(x,y):\n    '''\n    Write a function to compute the remainder of x/y\n    '''\n    ans=x%y\n    return ans\ndef remainder_2(x,y):\n    '''\n    Write a function to compute the remainder of x/y\n    '''\n    ans=x%y\n    return ans\ndef exp(x):\n    '''\n    Write a function to compute the exponential value of x\n    '''\n    ans=math.exp(x)\n    return ans\ndef floor(x):\n    '''\n    Write a function to compute the floor value of x\n    '''\n    ans=math.floor(x)\n    return ans\ndef ceiling(x):\n    '''\n    Write a function to compute the ceiling value of x\n    '''\n    ans=math.ceil(x)\n    return ans\ndef fabs(x):\n    '''\n    Write a function to compute the absolute value of x\n    '''\n    ans=math.fabs(x)\n    return ans\ndef sqrt(x):\n    '''\n    Write a function to compute the square root value of x\n    '''\n    ans=math.sqrt(x)\n    return ans\ndef factorial(x):\n    '''\n    Write a function to compute the factorial of x\n    '''\n    ans=math.factorial(x)\n    return ans\ndef sine(x):\n    '''\n    Write a function to compute the sine value of x\n    '''\n    ans=math.sin(x)\n    return ans\ndef cosine(x):\n    '''\n    Write a function to compute the cosine value of x\n    '''\n    ans=math.cos(x)\n    return ans\ndef tangent(x):\n    '''\n    Write a function to compute the tangent value of x\n    '''\n    ans=math.tan(x)\n    return ans\ndef arc_tangent(x):\n    '''\n    Write a function to compute the arc tangent value of x\n    '''\n    ans=math.atan(x)\n    return ans\ndef arc_tangent_2(x):\n    '''\n    Write a function to compute the arc tangent value of x\n    '''\n    ans=math.atan2(x)\n    return ans\ndef cosecant(x):\n    '''\n    Write a function to compute the cosecant value of x\n    '''\n    ans=1/math.cos(x)\n    return ans\ndef secant(x):\n    '''\n    Write a function t"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #volume of a cone is half of surface area times height\n    return (math.pi * r**2 * h) / 3\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume_of_cone=math.pi*r**2*h/3\n    return volume_of_cone\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol=math.pi*r**2*h/3.0\n    return vol\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi*r**2*h)/3\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3.0 * math.pi * r**2 * h\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*r*r*h\ndef volume_sphere(r):\n    '''\n    Write a function that will find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r*r\ndef volume_cylinder(r,h):\n    '''\n    Write a function that will find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\ndef volume_spheroid(r,k):\n    '''\n    Write a function that will find the volume of a spheroid.\n    '''\n    return (1/3)*math.pi*r*r*k\ndef volume_pyramid(r,h):\n    '''\n    Write a function that will find the volume of a pyramid.\n    '''\n    return (1/3)*math.pi*r*r*h\ndef volume_prism(r,h):\n    '''\n    Write a function that will find the volume of a prism.\n    '''\n    return (1/3)*math.pi*r*r*h\ndef volume_ellipsoid(r,k):\n    '''\n    Write a function that will find the volume of a ellipsoid.\n    '''\n    return (4/3)*math.pi*r*r*k\ndef volume_teaspoon(r,h):\n    '''\n    Write a function that will find the volume of a teaspoon.\n    '''\n    return (1/3)*math.pi*r*r*h\ndef volume_torus(r,k):\n    '''\n    Write a function that will find the volume of a torus.\n    '''\n    return math.pi*r*r*(2*k/r-1)\ndef volume_spheres(r):\n    '''\n    Write a function that will find the volume of a set of spheres.\n    '''\n    vol = 0\n    for i in range(1,r+1):\n        vol += volume_sphere(i)\n    return vol\ndef volume_cones(r):\n    '''\n    Write a function that will find the volume of a set of cones.\n    '''\n    vol = 0\n    for i in range(1,r+1):\n        vol += volume_cone(i,2)\n    return vol\ndef volume_spheroid(r,k):\n    '''\n    Write a function that will find the volume of a set of spheroidal shells.\n    '''\n    vol = 0\n    for i in range(1,r+1):\n        vol += volume_spheroid(i,k)\n    return vol\ndef volume_cylinders(r):\n    '''\n    Write a function that will find the volume of a set of cylinders.\n    '''\n    vol = 0\n    for i in range(1,r+1):\n        vol += volume_cylinder(i,2)\n    return vol\ndef volume_pyramid(r):\n    '''\n    Write a function that will find the volume of a set of pyramids.\n    '''\n    vol = 0\n    for i in range(1,r+1):\n        vol += volume_pyramid(i,2)\n    return vol\ndef volume_prisms(r):\n    '''\n    Write a function that will find the volume of a set of prisms.\n    '''\n    vol = 0\n    for i in range(1,r+1):\n        vol += volume_prism(i,2)\n    return vol\ndef volume_ellipsoids(r):\n    '''\n    Write a function that will find the volume of a set of ellipsoids.\n    '''\n    vol = 0\n    for i in range(1,r+1):\n        vol += volume_ellipsoid(i,2)\n    return vol\ndef volume_teaspoons(r):\n    '''\n    Write a function that will find the volume of a set of teaspoons.\n    '''\n    vol = 0\n    for i in range(1,r+1):\n        vol += volume_teaspoon(i,2)\n    return vol\ndef volume_toruses(r):\n    '''\n    Write a function that will find the volume of a set of tori.\n    '''\n    vol = 0\n    for i in range(1,r+1):\n        vol += volume_torus(i,2)\n    return vol\ndef surface_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi*r*h\ndef surface_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r*r\ndef surface_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*r\ndef surface_spheroid(r,k):\n    '''\n    Write a function to find the surface area of a spheroid.\n    '''\n    return 2*math.pi*r*r*k\ndef surface_pyramid(r,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    return 2*math.pi*r*r*h\ndef surface_prism(r,h):\n    '''\n    Write a function to find the surface area of a prism.\n    '''\n    return 2*math.pi*r*r*h\ndef surface_ellipsoid(r,k):\n    '''\n    Write a function to find the surface area of an ellipsoid.\n    '''\n    return 4*math.pi*r*r*k\ndef surface_teaspoon(r,h):\n    '''\n    Write a function to find the surface area of a teaspoon.\n    '''\n    return 2*math.pi*r*r*h\ndef surface_torus(r,k):\n    '''\n    Write a function to find the surface area of a torus.\n    '''\n    return 2*math.pi*r*r*(k/r-1)\ndef surface_spheres(r):\n    '''\n    Write a function to find the surface area of a set of spheres.\n    '''\n    surf = 0\n    for i in range(1,r+1):\n        surf += surface_sphere(i)\n    return surf\ndef surface_cones(r):\n    '''\n    Write a function to find the surface area of a set of cones.\n    '''\n    surf = 0\n    for i in range(1,r+1):\n        surf += surface_cone(i,2)\n    return surf\ndef surface_spheroid(r,k):\n    '''\n    Write a function to find the surface area of a set of spheroidal shells.\n    '''\n    surf = 0\n    for i in range(1,r+1):\n        surf += surface_spheroid(i,k)\n    return surf\ndef surface_cylinders(r):\n    '''\n    Write a function to find the surface area of a set of cylinders.\n    '''\n    surf = 0\n    for i in range(1,r+1):\n        surf += surface_cylinder(i,2)\n    return surf\ndef surface_pyramid(r):\n    '''\n    Write a function to find the surface area of a set of pyramids.\n    '''\n    surf = 0\n    for i in range(1,r+1):\n        surf += surface_pyramid(i,2)\n    return surf\ndef surface_prisms(r):\n    '''\n    Write a function to find the surface area of a set of prisms.\n    '''\n    surf = 0\n    for i in range(1,r+1):\n        surf += surface_prism(i,2)\n    return surf\ndef surface_ellipsoids(r):\n    '''\n    Write a function to find the surface area of a set of ellipsoids.\n    '''\n    surf = 0\n    for i in range(1,r+1):\n        surf += surface_ellipsoid(i,2)\n    return surf\ndef surface_teaspoons(r):\n    '''\n    Write a function to find the surface area of a set of teaspoons.\n    '''"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    result = 1\n    for i in range(32):\n        if ((2 ** i) <= n):\n            result = result * 2\n        else:\n            return result\n    return result\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    n = int(n)\n    high = 1\n    while (high <= n): \n        high = high << 1\n    return high\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        while n!= 1:\n            if n % 2 == 0:\n                n = n/2\n            else:\n                n = n + 1\n        return n\n        \ndef smallest_Power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        while n!= 1:\n            if n % 2 == 0:\n                n = n/2\n            else:\n                n = n + 1\n        return n\n        \ndef print_powers_of_2(n):\n    '''\n    Write a python function to print all powers of 2 that are less than or equal to n.\n    '''\n    for i in range(0, n):\n        print (2**i)\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    x = 1\n    while (x<n):\n        x = x*2\n    return x\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    high = 0\n    pow = 1\n    while pow <= n:\n        if pow == 1:\n            high = pow\n        elif pow & n:\n            high = pow\n        pow <<= 1\n    return high\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    a = 0\n    while (1<<a) <= n:\n        a += 1\n    return a - 1\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return 2 ** int(math.log(n, 2))\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # this method uses the math module to check if n is a power of 2\n    # n is not a power of 2 because math.log(n, 2) gives a float and math.ceil() gives int\n    if math.log(n, 2).is_integer():\n        return n\n    else:\n        return 2 ** math.ceil(math.log(n, 2))\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 0\n    while pow(2, i) <= n:\n        i = i + 1\n    return pow(2, i - 1)\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return 1<<(n-1).bit_length()\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 1\n    a = 0\n    b = 1\n    for i in range(3, n + 1):\n        c = a + b\n        a = b\n        b = c\n    return b\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return find_lucas(n/2)**2\n    else:\n        return find_lucas(n//2)**2 + find_lucas(n//2 + 1)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 1\n    lucas = [1, 2]\n    for i in range(2, n):\n        lucas.append(lucas[i-1] + lucas[i-2])\n    return lucas[n-1]\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return lucas(n-1) + lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    \n    lucas_numbers = [3, 1]\n    lucas_numbers.extend(lucas_numbers[-1] - 2*lucas_numbers[-2])\n    while len(lucas_numbers) < n:\n        lucas_numbers.append(lucas_numbers[-1] + 2*lucas_numbers[-2])\n    return lucas_numbers[n-1]\n    \n    \n    \ndef fibonacci(n): \n    '''\n    Write a function to find then'th fibonacci number.\n    '''\n    \n    fib_numbers = [1, 1]\n    fib_numbers.extend(fib_numbers[-1] + fib_numbers[-2])\n    while len(fib_numbers) < n:\n        fib_numbers.append(fib_numbers[-1] + fib_numbers[-2])\n    return fib_numbers[n-1]\n    \n    \n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-2) + find_lucas(n-1)\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = [string.format(elem) for elem in list_]\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string % x for x in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    l = string.split('%s')\n    for i in range(len(l)):\n        list_[i] = l[i]\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [format(string,'s') % e for e in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string + str(list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_of_strings = []\n    for num in list_:\n        list_of_strings.append(string.format(num))\n    return list_of_strings\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = [string % i for i in list_]\n    return list_\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l = [l1, l2, l3]\n    new_dict = {}\n    for i in l:\n        for j in i:\n            new_dict[j] = i[j]\n    print new_dict\n    return new_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {l1[i]:{l2[i]:l3[i]} for i in range(len(l1))}\n    return nested_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    new_dict = {}\n    for i in range(len(l1)):\n        new_dict[l1[i]] = {l2[i]: l3[i]}\n    return new_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    # Initializing dictionary\n    lst = {}\n    \n    # Populating dictionary\n    lst[l1[0]] = l2[0]\n    lst[l1[1]] = l2[1]\n    lst[l1[2]] = l2[2]\n    \n    lst[l1[3]] = l2[3]\n    lst[l1[4]] = l2[4]\n    lst[l1[5]] = l2[5]\n    \n    lst[l1[6]] = l2[6]\n    lst[l1[7]] = l2[7]\n    lst[l1[8]] = l2[8]\n    \n    lst[l1[9]] = l2[9]\n    lst[l1[10]] = l2[10]\n    lst[l1[11]] = l2[11]\n    \n    return lst\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {l1[i]: {l2[i]: {l3[i]: l3[i]}} for i in range(len(l1))}\n    \n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    new_dic = dict()\n    for l1_i, l2_i, l3_i in zip(l1, l2, l3):\n        new_dic[l1_i] = {l2_i: l3_i}\n    return new_dic\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {l1[i]:{l2[i]:l3[i]} for i in range(len(l1))}\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1) == len(l2) and len(l2) == len(l3):\n        return dict(zip(l1, zip(l2, l3)))\n    else:\n        return 'Error. Please enter the list of the same length.'\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for i in range(0, len(l1)):\n        d1[l1[i]] = l2[i]\n        d2 = {}\n        for j in range(0, len(l3)):\n            d2[l3[j]] = l2[i]\n        d1[l2[i]] = d2\n    return d1\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i, j, k in zip(l1, l2, l3):\n        d[i] = {}\n        d[i][j] = k\n    return d\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 9\n    elif n == 10:\n        return 10\n    elif n == 11:\n        return 11\n    elif n == 12:\n        return 12\n    elif n == 13:\n        return 13\n    elif n == 14:\n        return 14\n    elif n == 15:\n        return 15\n    elif n == 16:\n        return 16\n    elif n == 17:\n        return 17\n    elif n == 18:\n        return 18\n    elif n == 19:\n        return 19\n    elif n == 20:\n        return 20\n    elif n == 21:\n        return 21\n    elif n == 22:\n        return 22\n    elif n == 23:\n        return 23\n    elif n == 24:\n        return 24\n    elif n == 25:\n        return 25\n    elif n == 26:\n        return 26\n    elif n == 27:\n        return 27\n    elif n == 28:\n        return 28\n    elif n == 29:\n        return 29\n    elif n == 30:\n        return 30\n    elif n == 31:\n        return 31\n    elif n == 32:\n        return 32\n    elif n == 33:\n        return 33\n    elif n == 34:\n        return 34\n    elif n == 35:\n        return 35\n    elif n == 36:\n        return 36\n    elif n == 37:\n        return 37\n    elif n == 38:\n        return 38\n    elif n == 39:\n        return 39\n    elif n == 40:\n        return 40\n    elif n == 41:\n        return 41\n    elif n == 42:\n        return 42\n    elif n == 43:\n        return 43\n    elif n == 44:\n        return 44\n    elif n == 45:\n        return 45\n    elif n == 46:\n        return 46\n    elif n == 47:\n        return 47\n    elif n == 48:\n        return 48\n    elif n == 49:\n        return 49\n    elif n == 50:\n        return 50\n    elif n == 51:\n        return 51\n    elif n == 52:\n        return 52\n    elif n == 53:\n        return 53\n    elif n == 54:\n        return 54\n    elif n == 55:\n        return 55\n    elif n == 56:\n        return 56\n    elif n == 57:\n        return 57\n    elif n == 58:\n        return 58\n    elif n == 59:\n        return 59\n    elif n == 60:\n        return 60\n    elif n == 61:\n        return 61\n    elif n == 62:\n        return 62\n    elif n == 63:\n        return 63\n    elif n == 64:\n        return 64\n    elif n == 65:\n        return 65\n    elif n == 66:\n        return 66\n    elif n == 67:\n        return 67\n    elif n == 68:\n        return 68\n    elif n == 69:\n        return 69\n    elif n == 70:\n        return 70\n    elif n == 71:\n        return 71\n    elif n == 72:\n        return 72\n    elif n == 73:\n        return 73\n    elif n == 74:\n        return 74\n    elif n == 75:\n        return 75\n    elif n == 76:\n        return 76\n    elif n == 77:\n        return 77\n    elif n == 78:\n        return 78\n    elif n == 79:\n        return 79\n    elif n == 80:\n        return 80\n    elif n == 81:\n        return 81\n    elif n == 82:\n        return 82\n    elif n == 83:\n        return 83\n    elif n == 84:\n        return 84\n    elif n == 85:\n        return 85\n    elif n == 86:\n        return 86\n    elif n == 87:\n        return 87\n    elif n == 88:\n        return 88\n    elif n == 89:\n        return 89\n    elif n == 90:\n        return 90\n    elif n == 91:\n        return 91\n    elif n == 92:\n        return 92\n    elif n == 93:\n        return 93\n    elif n == 94:\n        return 94\n    elif n == 95:\n        return 95\n    elif n == 96:\n        return 96\n    elif n == 97:\n        return 97\n    elif n == 98:\n        return 98\n    elif n == 99:\n        return 99\n    elif n == 100:\n        return 100\n    elif n == 101:\n        return 101\n    elif n == 102:\n        return 102\n    elif n == 103:\n        return 103\n    elif n == 104:\n        return 104\n    elif n == 105:\n        return 105\n    elif n == 106:\n        return 106\n    elif n == 107:\n        return 107\n    elif n == 108:\n        return 108\n    elif n == 109:\n        return 109\n    elif n == 110:\n        return 110\n    elif n == 111:\n        return 111\n    elif n == 112:\n        return 112\n    elif n == 113:\n        return 113\n    elif n == 114:\n        return 114\n    elif n == 115:\n        return 115\n    elif n == 116:\n        return 116\n    elif n == 117:\n        return 117\n    elif n == 118:\n        return 118\n    elif n == 119:\n        return 119\n    elif n == 120:\n        return 120\n    elif n == 121:\n        return 121\n    elif n == 122:\n        return 122\n    elif n == 123:\n        return 123\n    elif n == 124:\n        return 124\n    elif n == 125:\n        return 125\n    elif n == 126:\n        return 126\n    elif n == 127:\n        return 127\n    elif n == 128:\n        return 128\n    elif n == 129:\n        return 129\n    elif n == 130:\n        return 130\n    elif n == 131:\n        return 131\n    elif n == 132:\n        return 132\n    elif n == 133:\n        return 133\n    elif n == 134:\n        return 134\n    elif n == 135:\n        return 135\n    elif n == 136:\n        return 136\n    elif n == 137:\n        return 137\n    elif n == 138:\n        return 138\n    elif n == 139:\n        return 139\n    elif n == 140:\n        return 140\n    elif n == 141:\n        return 141\n    elif n == 142:\n        return 142\n    elif n == 143:\n        return 143\n    elif n == 144:\n        return 144\n    elif n == 145:\n        return 145\n    elif n == 146:\n        return 146\n    elif n == 147:\n        return 147\n    elif n == 148:\n        return 148\n    elif n == 149:\n        return 149\n    elif n == 150:\n        return 150\n    elif n == 151:\n        return 151\n    elif n == 152:\n        return 152\n    elif n == 153:\n        return 153\n    elif n == 154:\n        return 154\n    elif n == 155:\n        return 155\n    elif n == 156:\n        return 156\n    elif n == 157:\n        return 157\n    elif n == 158:\n        return 158\n    elif n == 159:\n        return 159\n    elif n == 160:\n        return 160\n    elif n == 161:\n        return 161\n    elif n == 162:\n        return 162\n    elif n == 163:\n        return 163\n    elif n == 164:\n        return 164\n    elif n == 165:\n        retur"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        return max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return f(n)\n    "
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    sum_list = []\n    \n    for i in xrange(1, n+1):\n        current_sum = i\n        sum_list.append(current_sum)\n        if i % 2 == 0:\n            sum_list.append(sum_list[i/2])\n        if i % 3 == 0:\n            sum_list.append(sum_list[i/3])\n        if i % 4 == 0:\n            sum_list.append(sum_list[i/4])\n        if i % 5 == 0:\n            sum_list.append(sum_list[i/5])\n    \n    max_sum = sum_list[0]\n    \n    for i in xrange(1, len(sum_list)):\n        if sum_list[i] > max_sum:\n            max_sum = sum_list[i]\n    \n    return max_sum\n    \n    \nprint get_max_sum(100)"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # If n = 2, return f(2) = 1\n    if (n == 2):\n        return 1\n    \n    # Else, the maximum sum of n = max( f(n/2) + f(n/3) + f(n/4) + f(n/5), n )\n    else:\n        return max( (get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n )\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    elif n % 3 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4)\n    elif n % 5 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3)\n    else:\n        return get_max_sum(n-1)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif n%2 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    elif n%3 == 0:\n        return get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    elif n%4 == 0:\n        return get_max_sum(n/4) + get_max_sum(n/5)\n    else:\n        return get_max_sum(n/5)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    for i in input_list:\n        if max_len < len(i):\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) < 2:\n        return input_list\n    else:\n        max_len = 1\n        for i in range(len(input_list)):\n            if len(input_list[i]) > max_len:\n                max_len = len(input_list[i])\n                max_list = input_list[i]\n        return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_length_list = []\n    for input_str in input_list:\n        if len(input_str) > max_length:\n            max_length = len(input_str)\n            max_length_list = [input_str]\n        elif len(input_str) == max_length:\n            max_length_list.append(input_str)\n    return max_length_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = input_list[i]\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    for i in input_list:\n        if max_length < len(i):\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if not input_list:\n        return None\n    maximum = input_list[0]\n    max_len = 1\n    for i in input_list:\n        if len(i) > max_len:\n            maximum = i\n            max_len = len(i)\n    return maximum\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_len_list = []\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n    for i in input_list:\n        if len(i) == max_len:\n            max_len_list.append(i)\n    return max_len_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for l in input_list:\n        if len(l)>max_len:\n            max_len = len(l)\n            max_list = [l]\n        elif len(l) == max_len:\n            max_list.append(l)\n    return max_list\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    l = [i for i in test_tup]\n    l.sort()\n    if l.count(l[0])!= len(l):\n        return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    pass\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    dct = {}\n    for item in test_tup:\n        if item in dct:\n            return False\n        else:\n            dct[item] = True\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n    #solution 2\n    #return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    d = {}\n    for s in str1:\n        d[s] = d.get(s, 0) + 1\n    for s in str1:\n        if d[s] == 1:\n            return s\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    counter = {}\n    for i in str1:\n        if i in counter:\n            counter[i] += 1\n        else:\n            counter[i] = 1\n    for i in str1:\n        if counter[i] == 1:\n            return i\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = {}\n    for i in str1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    for i in str1:\n        if count[i] == 1:\n            return i\n    return '_'\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    s=set()\n    for i in str1:\n        if i not in s:\n            s.add(i)\n            return i\n    return '_'\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char not in char_dict.keys():\n            char_dict[char] = 1\n        else:\n            char_dict[char] += 1\n    for char in str1:\n        if char_dict[char] == 1:\n            return char\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if len(str1)==0:\n        return None\n    for i in range(len(str1)):\n        if str1[i] not in str1[i+1:]:\n            return str1[i]\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            return str1[i]\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dic = {}\n    for ch in str1:\n        if ch not in dic:\n            dic[ch] = 1\n        else:\n            dic[ch] += 1\n    for ch in str1:\n        if dic[ch] == 1:\n            return ch\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) == 1:\n            return i\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    d = {}\n    for c in str1:\n        if c not in d:\n            d[c] = 1\n        else:\n            d[c] += 1\n    for c in str1:\n        if d[c] == 1:\n            return c\n    return None\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string)\ncheck_char('asdf')\ncheck_char('a')\ncheck_char('a')\ncheck_char('a')\ncheck_char('b')\ncheck_char('abc')\ncheck_char('abc')\ncheck_char('aab')\ncheck_char('aab')\ncheck_char('a')\ncheck_char('b')\ncheck_char('abc')\ncheck_char('abcd')\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (re.search(regex,string)): \n        return 1\n    else: \n        return 0\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not string:\n        return False\n    if not re.match(regex, string):\n        return False\n    return True\nprint(check_char('hello'))\nprint(check_char('abc'))\nprint(check_char('abca'))\nprint(check_char(''))\nprint(check_char('a'))\nprint(check_char('aaaaa'))\nprint(check_char('aaaaab'))\nprint(check_char('abcd'))\nprint(check_char('abcdef'))\nprint(check_char('abcdefg'))\nprint(check_char('aabb'))\nprint(check_char('aabbcc'))\nprint(check_char('aaabbbcc'))\nprint(check_char('aabbccdd'))\nprint(check_char('aaabbbccdd'))\nprint(check_char('aaaaaaaaa'))\nprint(check_char('aaaaaaaaaa'))\nprint(check_char('aaaaaaaaaaaa'))\nprint(check_char('aaaaaaaaaaaaa'))\nprint(check_char('aaaaaaaaaaaaaaaaa'))\nprint(check_char('aa'))\nprint(check_char('aaaaa'))\nprint(check_char('aaaaaaaaaaaaaa'))\nprint(check_char('aaaaaaaaaaaaaaaaa'))\nprint(check_char('aaaaaaaaaaaaaaaaaaaaa'))\nprint(check_char('aaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))\nprint(check_char('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))\nprint(check_char('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))\nprint(check_char('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))\nprint(check_char('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))\nprint(check_char('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))\nprint(check_char('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))\nprint(check_char('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))\nprint(check_char('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))\nprint(check_char('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex,string)\nprint(check_char('abc'))\nprint(check_char('xyz'))\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex, string)) \n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex,string)\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex,string)\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex,string)\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    string = string.strip()\n    if string[0] == string[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string)\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b:\n        if b < c:\n            return b\n        elif c < a:\n            return a\n        else:\n            return c\n    else:\n        if a < c:\n            return a\n        elif c < b:\n            return c\n        else:\n            return b\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if b > c:\n            return b\n        elif a < c:\n            return a\n        else:\n            return c\n    else:\n        if a > c:\n            return a\n        elif b < c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if a > c:\n            if b > c:\n                return b\n            else:\n                return c\n        else:\n            return a\n    elif b > c:\n        if a > c:\n            return a\n        else:\n            return c\n    else:\n        return a\n    \ndef is_prime(n):\n    '''\n    Write a function to check if a non-negative integer is prime.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if b>c:\n            return b\n        elif a>c:\n            return a\n        elif b>a:\n            return c\n    elif b>a:\n        if a>c:\n            return a\n        elif b>c:\n            return c\n        elif a>b:\n            return b\n    elif c>a:\n        if a>b:\n            return a\n        elif b>c:\n            return b\n        elif a>c:\n            return c\n    elif a==b:\n        return a\n    elif b==c:\n        return b\n    elif c==a:\n        return c\n    else:\n        return None\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<=b:\n        if a<=c:\n            return a\n        elif b<c:\n            return c\n        else:\n            return b\n    else:\n        if b<=c:\n            return b\n        elif a<c:\n            return c\n        else:\n            return a\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a <= b and b <= c:\n        return b\n    if a <= c and c <= b:\n        return c\n    return a\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            return a\n        elif b>c:\n            return b\n        else:\n            return c\n    elif b>a:\n        if b>c:\n            return b\n        elif a>c:\n            return a\n        else:\n            return c\n    elif c>a:\n        if c>b:\n            return c\n        elif a>b:\n            return a\n        else:\n            return b\n    else:\n        return a\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a >= b:\n        if b >= c:\n            return b\n        elif a > c:\n            return a\n        else:\n            return c\n    elif a > b:\n        if b > c:\n            return c\n        elif a > c:\n            return a\n        else:\n            return c\n    elif b > c:\n        if a > c:\n            return c\n        elif a > c:\n            return a\n        else:\n            return c\n    else:\n        return b\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = sorted([a,b,c])\n    return numbers[1]\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    lst = [a,b,c]\n    lst.sort()\n    median = int(len(lst)/2)\n    return lst[median]\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = []\n    for n in nums:\n        sum_of_digits.append(sum(map(int, str(n))))\n    return sum_of_digits\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum([int(i) for i in str(n)]) for n in nums]\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # return sum(map(int, nums))\n    return sum([int(i) for i in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(c) for c in str(num))\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(lambda x: sum(map(lambda y:int(y), x)), nums))\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    nums = [str(x) for x in nums]\n    return [int(x) for x in nums]\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for i in nums:\n        total += sum_of_digits(str(i))\n    return total + sum(map(int,nums))\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    total = 0\n    for num in nums:\n        total += sum(int(n) for n in str(num))\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    if nums == []:\n        return 0\n    else:\n        return sum_of_digits(nums[1:]) + nums[0]\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += sum(int(digit) for digit in str(num))\n    return sum_of_digits\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] | test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    new_tup1 = (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n    return new_tup1\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if not (isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple)):\n        raise ValueError('Input is not a tuple')\n    if not len(test_tup1) == len(test_tup2):\n        raise ValueError('Tuples are not of equal length')\n    return tuple([a^b for a,b in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    bitwise_xor_tup = []\n    for i, j in zip(test_tup1, test_tup2):\n        bitwise_xor_tup.append(i^j)\n    return tuple(bitwise_xor_tup)\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    res1 = tuple()\n    res2 = tuple()\n    for i in range(len(test_tup1)):\n        res1 += (test_tup1[i] ^ test_tup2[i],)\n    for i in range(len(test_tup2)):\n        res2 += (test_tup1[i] ^ test_tup2[i],)\n    return (res1, res2)\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] | test_tup2[0], test_tup1[1] | test_tup2[1])\n    \ndef to_binary(num):\n    '''\n    Write a function to convert a given number to a binary string.\n    '''\n    return bin(num).replace(\"0b\", \"\")\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return ('Length of tuples is not same')\n    else:\n        lst1 = []\n        lst2 = []\n        for num in range(len(test_tup1)):\n            lst1.append((test_tup1[num] + test_tup2[num])%2)\n            lst2.append((test_tup1[num] + test_tup2[num])//2)\n        return (tuple(lst1), tuple(lst2))\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    x = [a ^ b for a, b in zip(test_tup1, test_tup2)]\n    return x\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    bitwise_xor_tuple = (test_tup1[0]^test_tup2[0],test_tup1[1]^test_tup2[1])\n    return bitwise_xor_tuple\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a^b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_list = {}\n    for ele in test_list:\n        if ele in freq_list:\n            freq_list[ele] += 1\n        else:\n            freq_list[ele] = 1\n    return len(freq_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(list(set(test_list)))\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    uniq_list = list(set(test_list))\n    print(len(uniq_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    dic = {}\n    for i in test_list:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    list_set = set(test_list)\n    return len(list_set)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    d = {}\n    for tup in test_list:\n        if tup in d:\n            d[tup] += 1\n        else:\n            d[tup] = 1\n    return len(d)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    all_freq = {}\n    for ele in test_list:\n        if ele in all_freq:\n            all_freq[ele] += 1\n        else:\n            all_freq[ele] = 1\n    \n    return all_freq\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    from collections import Counter\n    return Counter(test_list).keys()\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(x + y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple((x+y) for x,y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(map(lambda x, y: x + y, test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append((test_tup1[i][0]+test_tup2[i][0], test_tup1[i][1]+test_tup2[i][1]))\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(map(lambda x,y:x+y, test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        res = tuple([x + y for (x, y) in zip(test_tup1, test_tup2[:len(test_tup1)])])\n    elif len(test_tup1) > len(test_tup2):\n        res = tuple([x + y for (x, y) in zip(test_tup1[:len(test_tup2)], test_tup2)])\n    else:\n        res = tuple([x + y for (x, y) in zip(test_tup1, test_tup2)])\n    return res\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    sum_tup = ()\n    for tup1,tup2 in zip(test_tup1,test_tup2):\n        sum_tup += (tup1 + tup2, )\n    return sum_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    res_tup = ()\n    for (e1, e2) in zip(test_tup1, test_tup2):\n        res_tup += (e1 + e2,)\n    return res_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = tuple()\n    for (i,j) in zip(test_tup1,test_tup2):\n        new_tup += (i+j, )\n    return new_tup\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return b\n    elif a < b:\n        return a\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximization(a,b):\n    '''\n    Write a python function to find the maximization of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef maximization(a,b):\n    '''\n    Write a python function to find the maximization of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''\n    Write a python function to find the minimization of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimization(a,b):\n    '''"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return b\n    return a\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\ndef prime(number):\n    '''\n    Write a python function to return the number of prime numbers\n    less than or equal to number.\n    '''\n    if number<2:\n        return 0\n    if number==2:\n        return 1\n    if number%2==0:\n        return 2\n    for i in range(3,number):\n        if number%i==0:\n            return 0\n    return 1\ndef palindrome(word):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    if len(word)==0:\n        return True\n    if word[0]==word[-1]:\n        return palindrome(word[1:-1])\n    else:\n        return False\ndef reverse(word):\n    '''\n    Write a python function to reverse a string.\n    '''\n    if len(word)==0:\n        return word\n    return reverse(word[1:])+word[0]\ndef fib(n):\n    '''\n    Write a python function to print a fibonacci series till n.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 1\n    if n>2:\n        return fib(n-1) + fib(n-2)\ndef fact(n):\n    '''\n    Write a python function to return the factorial of a number.\n    '''\n    if n==1:\n        return 1\n    if n>1:\n        return n*fact(n-1)\ndef primeFactors(n):\n    '''\n    Write a python function to return a list of prime factors of number.\n    '''\n    if n==1:\n        return [1]\n    if n==2:\n        return [1,2]\n    if n>2:\n        if n%2==0:\n            return primeFactors(n/2)\n        else:\n            return [2] + primeFactors(n)\ndef sumOfDigits(n):\n    '''\n    Write a python function to return the sum of digits of number.\n    '''\n    if n==0:\n        return 0\n    return n%10 + sumOfDigits(n/10)\ndef sumOfDigitsRec(n):\n    '''\n    Write a python function to return the sum of digits of number.\n    '''\n    if n==0:\n        return 0\n    return n%10 + sumOfDigitsRec(n/10)\ndef isArmstrong(n):\n    '''\n    Write a python function to check whether a number is an armstrong number\n    or not.\n    '''\n    if n==0:\n        return True\n    temp = n\n    sum1 = 0\n    while temp:\n        rem = temp%10\n        sum1 = sum1 + rem**3\n        temp = temp/10\n    return sum1==n\ndef isArmstrongRec(n):\n    '''\n    Write a python function to check whether a number is an armstrong number\n    or not.\n    '''\n    if n==0:\n        return True\n    if n<0:\n        return False\n    return isArmstrongRec(n/10)\ndef isPalindrome(word):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    if len(word)==0:\n        return True\n    if word[0]==word[-1]:\n        return isPalindrome(word[1:-1])\n    else:\n        return False\ndef isPalindromeRec(word):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    if len(word)==0:\n        return True\n    if word[0]==word[-1]:\n        return isPalindromeRec(word[1:-1])\n    else:\n        return False\ndef isPermutation(word1,word2):\n    '''\n    Write a python function to check whether two strings are permutations of each other.\n    '''\n    if len(word1)==0 or len(word2)==0:\n        return True\n    if word1[0]==word2[0]:\n        return isPermutation(word1[1:],word2[1:])\n    else:\n        return False\ndef isPermutationRec(word1,word2):\n    '''\n    Write a python function to check whether two strings are permutations of each other.\n    '''\n    if len(word1)==0 or len(word2)==0:\n        return True\n    if word1[0]==word2[0]:\n        return isPermutationRec(word1[1:],word2[1:])\n    else:\n        return False\ndef isAnagram(word1,word2):\n    '''\n    Write a python function to check whether two strings are anagrams of each other.\n    '''\n    if len(word1)==0 or len(word2)==0:\n        return True\n    if word1[0]==word2[0]:\n        return isAnagram(word1[1:],word2[1:])\n    else:\n        return False\ndef isAnagramRec(word1,word2):\n    '''\n    Write a python function to check whether two strings are anagrams of each other.\n    '''\n    if len(word1)==0 or len(word2)==0:\n        return True\n    if word1[0]==word2[0]:\n        return isAnagramRec(word1[1:],word2[1:])\n    else:\n        return False\ndef isAbecedarian(word):\n    '''\n    Write a python function to check whether a string is an abecedarian word or not.\n    '''\n    if word==\"\":\n        return True\n    if len(word)==1:\n        return True\n    if word[0]<word[1]:\n        return isAbecedarian(word[1:])\n    else:\n        return False\ndef isAbecedarianRec(word):\n    '''\n    Write a python function to check whether a string is an abecedarian word or not.\n    '''\n    if word==\"\":\n        return True\n    if len(word)==1:\n        return True\n    if word[0]<word[1]:\n        return isAbecedarianRec(word[1:])\n    else:\n        return False\ndef isUpperCase(word):\n    '''\n    Write a python function to check whether a string is all upper case or not.\n    '''\n    if word==\"\":\n        return True\n    if word.isupper():\n        return True\n    else:\n        return False\ndef isUpperCaseRec(word):\n    '''\n    Write a python function to check whether a string is all upper case or not.\n    '''\n    if word==\"\":\n        return True\n    if word.isupper():\n        return True\n    else:\n        return False\ndef isLowerCase(word):\n    '''\n    Write a python function to check whether a string is all upper case or not.\n    '''\n    if word==\"\":\n        return True\n    if word.islower():\n        return True\n    else:\n        return False\ndef isLowerCaseRec(word):\n    '''\n    Write a python function to check whether a string is all upper case or not.\n    '''\n    if word==\"\":\n        return True\n    if word.islower():\n        return True\n    else:\n        return False\ndef isDigit(word):\n    '''\n    Write a python function to check whether a string is all digit or not.\n    '''\n    if word==\"\":\n        return True\n    if word.isdigit():\n        return True\n    else:\n        return False\ndef isDigitRec(word):\n    '''\n    Write a python function to check whether a string is all digit or not.\n    '''\n    if word==\"\":\n        return True\n    if word.isdigit():\n        return True\n    else:\n        return False\ndef isLetter(word):\n    '''\n    Write a python function to check whether a string is all letter or not.\n    '''\n    if word==\"\":\n        return True\n    if word.isalpha():\n        return Tru"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        return a\n    return b\n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    return b\n    \ndef main():\n    a=float(input(\"Enter the first number: \"))\n    b=float(input(\"Enter the second number: \"))\n    print(\"\\nThe minimum of\", a, \"and\", b, \"is\", minimum(a,b))\n    print(\"\\nThe maximum of\", a, \"and\", b, \"is\", maximum(a,b))\n    \nif __name__==\"__main__\":\n    main()"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex: \n        print 'Yes, %s exists' % tuple1\n    else:\n        print 'No, %s does not exist' % tuple1\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex.count(tuple1) == 0: \n        return False\n    return True\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex == tuple1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex==tuple1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuplex.count(tuple1) > 0\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n    \ndef test_check_tuplex():\n    tuplex = (2,3,5,7,8,9)\n    tuple1 = (2,3)\n    assert(check_tuplex(tuplex,tuple1) is True)\n    assert(check_tuplex(tuplex,(2,4)) is False)\n    print(\"All tests passed\")\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element==tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return (tuplex.count(tuple1)!= 0)\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex: \n        if i == tuple1: \n            return True \n    return False \n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # tuple1 = ('a','b','c')\n    # tuplex = ('a','b','c','d','e')\n    for item in tuplex:\n        if item==tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        return(True)\n    else:\n        return(False)\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    count = 0\n    while(x):\n        count += 1\n        x &= x - 1\n    return count & 1\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = bin(x)\n    return x[-1]\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x&1 == 0:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    i = 0\n    while (x!= 0): \n        i = i + 1\n        x = x & (x - 1)\n    if i % 2 == 0: \n        return \"Parity is Even\"\n    else: \n        return \"Parity is Odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x & 1: \n        return 'odd'\n    else: \n        return 'even'\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return sum(map(int,str(x)))%2\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    count = 0\n    i = x\n    while i > 0: \n        count = count + (i & 1)\n        i = i >> 1\n    return count & 1\n    \ndef find_Parity_Iterative(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    count = 0\n    while x > 0: \n        count = count + (x & 1)\n        x = x >> 1\n    return count & 1\n    \ndef count_bits(n): \n    '''\n    Write a python function to count the number of 1 bits in a given integer.\n    '''\n    count = 0\n    while n > 0: \n        count = count + (n & 1)\n        n = n >> 1\n    return count\n    \ndef count_bits_Iterative(n): \n    '''\n    Write a python function to count the number of 1 bits in a given integer.\n    '''\n    count = 0\n    while n > 0: \n        count += n & 1\n        n = n >> 1\n    return count\n    \ndef count_bits_Recursive(n): \n    '''\n    Write a python function to count the number of 1 bits in a given integer.\n    '''\n    if n == 0: \n        return 0\n    return count_bits_Recursive(n >> 1) + (n & 1)\n    \ndef find_sum(arr): \n    '''\n    Write a python function to return the sum of elements of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)): \n        sum = sum + arr[i]\n    return sum\n    \ndef find_sum_Iterative(arr): \n    '''\n    Write a python function to return the sum of elements of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)): \n        sum = sum + arr[i]\n    return sum\n    \ndef find_sum_Recursive(arr): \n    '''\n    Write a python function to return the sum of elements of an array.\n    '''\n    if len(arr) == 1: \n        return arr[0]\n    return arr[0] + find_sum_Recursive(arr[1:])\n    \ndef find_min(arr): \n    '''\n    Write a python function to return the minimum of elements of an array.\n    '''\n    min = arr[0]\n    for i in range(len(arr)): \n        if arr[i] < min: \n            min = arr[i]\n    return min\n    \ndef find_min_Iterative(arr): \n    '''\n    Write a python function to return the minimum of elements of an array.\n    '''\n    min = arr[0]\n    for i in range(len(arr)): \n        if arr[i] < min: \n            min = arr[i]\n    return min\n    \ndef find_min_Recursive(arr): \n    '''\n    Write a python function to return the minimum of elements of an array.\n    '''\n    if len(arr) == 1: \n        return arr[0]\n    return arr[0] < find_min_Recursive(arr[1:])\n    \ndef count_even(n): \n    '''\n    Write a python function to count the number of even numbers in a given integer.\n    '''\n    count = 0\n    while n > 0: \n        if n & 1 == 0: \n            count = count + 1\n        n = n >> 1\n    return count\n    \ndef count_even_Iterative(n): \n    '''\n    Write a python function to count the number of even numbers in a given integer.\n    '''\n    count = 0\n    while n > 0: \n        if n & 1 == 0: \n            count = count + 1\n        n = n >> 1\n    return count\n    \ndef count_even_Recursive(n): \n    '''\n    Write a python function to count the number of even numbers in a given integer.\n    '''\n    if n == 0: \n        return 0\n    return count_even_Recursive(n >> 1) + (n & 1)\n    \ndef reverse_bits(x): \n    '''\n    Write a python function to reverse the bits of a given integer.\n    '''\n    r = 0\n    while x > 0: \n        r = r << 1 | (x & 1)\n        x = x >> 1\n    return r\n    \ndef reverse_bits_Iterative(x): \n    '''\n    Write a python function to reverse the bits of a given integer.\n    '''\n    r = 0\n    while x > 0: \n        r = r << 1 | (x & 1)\n        x = x >> 1\n    return r\n    \ndef reverse_bits_Recursive(x): \n    '''\n    Write a python function to reverse the bits of a given integer.\n    '''\n    if x == 0: \n        return 0\n    return (x & 1) << (len(bin(x)) - 3) | reverse_bits_Recursive(x >> 1)\n    \ndef find_maximum_difference(arr): \n    '''\n    Write a python function to find the maximum difference between two elements of a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(len(arr) - 1): \n        if arr[i + 1] - arr[i] > max_diff: \n            max_diff = arr[i + 1] - arr[i]\n    return max_diff\n    \ndef find_maximum_difference_Iterative(arr): \n    '''\n    Write a python function to find the maximum difference between two elements of a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(len(arr) - 1): \n        if arr[i + 1] - arr[i] > max_diff: \n            max_diff = arr[i + 1] - arr[i]\n    return max_diff\n    \ndef find_maximum_difference_Recursive(arr): \n    '''\n    Write a python function to find the maximum difference between two elements of a given array.\n    '''\n    if len(arr) <= 2: \n        return arr[1] - arr[0]\n    return max(arr[1] - arr[0], find_maximum_difference_Recursive(arr[1:]), find_maximum_difference_Recursive(arr[:-1]))\n    \ndef find_minimum_difference(arr): \n    '''\n    Write a python function to find the minimum difference between two elements of a given array.\n    '''\n    min_diff = arr[1] - arr[0]\n    for i in range(len(arr) - 1): \n        if arr[i + 1] - arr[i] < min_diff: \n            min_diff = arr[i + 1] - arr[i]\n    return min_diff\n    \ndef find_minimum_difference_Iterative(arr): \n    '''\n    Write a python function to find the minimum difference between two elements of a given array.\n    '''\n    min_diff = arr[1] - arr[0]\n    for i in range(len(arr) - 1): \n        if arr[i + 1] - arr[i] < min_diff: \n            min_diff = arr[i + 1] - arr[i]\n    return min_diff\n    \ndef find_minimum_difference_Recursive(arr): \n    '''\n    Write a python function to find the minimum difference between two elements of a given array.\n    '''\n    if len(arr) <= 2: \n        return arr[1] - arr[0]\n    return min(arr[1] - arr[0], find_minimum_difference_Recursive(arr[1:]), find_minimum_difference_Recursive(arr[:-1]))\n    \ndef find_missing_number(arr): \n    '''\n    Write a python function to find the missing number in an array.\n    '''\n    n = len(arr)\n    sum = (n * (n + 1)) >> 1\n    for i in range(len(arr)): \n        sum = sum - arr[i]\n    return sum"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = x & 0xFFFFFFFF \n    mask = 0x1 \n    while(mask <= x): \n        if (x & mask)!= 0: \n            x ^= mask \n        mask = mask << 1 \n    return x \n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    #replace the given number with the number with the next larger number with the same digits\n    #\n    #    1  -> 123\n    #    2  -> 213\n    #    3  -> 321\n    #    4  -> 431\n    #    5  -> 531\n    #    6  -> 631\n    #    7  -> 731\n    #    8  -> 831\n    #    9  -> 931\n    #\n    #    1  -> 1123\n    #    2  -> 1131\n    #    3  -> 1331\n    #    4  -> 1431\n    #    5  -> 1531\n    #    6  -> 1631\n    #    7  -> 1731\n    #    8  -> 1831\n    #    9  -> 1931\n    #\n    #\n    #    1  -> 123\n    #    2  -> 321\n    #    3  -> 431\n    #    4  -> 531\n    #    5  -> 631\n    #    6  -> 731\n    #    7  -> 831\n    #    8  -> 931\n    #    9  -> 1031\n    #\n    #\n    #    1  -> 123\n    #    2  -> 321\n    #    3  -> 431\n    #    4  -> 531\n    #    5  -> 631\n    #    6  -> 731\n    #    7  -> 831\n    #    8  -> 931\n    #    9  -> 1031\n    #\n    #\n    #    1  -> 123\n    #    2  -> 321\n    #    3  -> 431\n    #    4  -> 531\n    #    5  -> 631\n    #    6  -> 731\n    #    7  -> 831\n    #    8  -> 931\n    #    9  -> 1031\n    #\n    #\n    #\n    #\n    #    1  -> 123\n    #    2  -> 321\n    #    3  -> 431\n    #    4  -> 531\n    #    5  -> 631\n    #    6  -> 731\n    #    7  -> 831\n    #    8  -> 931\n    #    9  -> 1031\n    #\n    #\n    #    1  -> 123\n    #    2  -> 321\n    #    3  -> 431\n    #    4  -> 531\n    #    5  -> 631\n    #    6  -> 731\n    #    7  -> 831\n    #    8  -> 931\n    #    9  -> 1031\n    #\n    #\n    #    1  -> 123\n    #    2  -> 321\n    #    3  -> 431\n    #    4  -> 531\n    #    5  -> 631\n    #    6  -> 731\n    #    7  -> 831\n    #    8  -> 931\n    #    9  -> 1031\n    #\n    #\n    #    1  -> 123\n    #    2  -> 321\n    #    3  -> 431\n    #    4  -> 531\n    #    5  -> 631\n    #    6  -> 731\n    #    7  -> 831\n    #    8  -> 931\n    #    9  -> 1031\n    #\n    #\n    #    1  -> 123\n    #    2  -> 321\n    #    3  -> 431\n    #    4  -> 531\n    #    5  -> 631\n    #    6  -> 731\n    #    7  -> 831\n    #    8  -> 931\n    #    9  -> 1031\n    #\n    #\n    #    1  -> 123\n    #    2  -> 321\n    #    3  -> 431\n    #    4  -> 531\n    #    5  -> 631\n    #    6  -> 731\n    #    7  -> 831\n    #    8  -> 931\n    #    9  -> 1031\n    #\n    #\n    #    1  -> 123\n    #    2  -> 321\n    #    3  -> 431\n    #    4  -> 531\n    #    5  -> 631\n    #    6  -> 731\n    #    7  -> 831\n    #    8  -> 931\n    #    9  -> 1031\n    #\n    #\n    #    1  -> 123\n    #    2  -> 321\n    #    3  -> 431\n    #    4  -> 531\n    #    5  -> 631\n    #    6  -> 731\n    #    7  -> 831\n    #    8  -> 931\n    #    9  -> 1031\n    #\n    #\n    #    1  -> 123\n    #    2  -> 321\n    #    3  -> 431\n    #    4  -> 531\n    #    5  -> 631\n    #    6  -> 731\n    #    7  -> 831\n    #    8  -> 931\n    #    9  -> 1031\n    #\n    #\n    #    1  -> 123\n    #    2  -> 321\n    #    3  -> 431\n    #    4  -> 531\n    #    5  -> 631\n    #    6  -> 731\n    #    7  -> 831\n    #    8  -> 931\n    #    9  -> 1031\n    #\n    #\n    #    1  -> 123\n    #    2  -> 321\n    #    3  -> 431\n    #    4  -> 531\n    #    5  -> 631\n    #    6  -> 731\n    #    7  -> 831\n    #    8  -> 931\n    #    9  -> 1031\n    #\n    #\n    #    1  -> 123\n    #    2  -> 321\n    #    3  -> 431\n    #    4  -> 531\n    #    5  -> 631\n    #    6  -> 731\n    #    7  -> 831\n    #    8  -> 931\n    #    9  -> 1031\n    #\n    #\n    #    1  -> 123\n    #    2  -> 321\n    #    3  -> 431\n    #    4  -> 531\n    #    5  -> 631\n    #    6  -> 731\n    #    7  -> 831\n    #    8  -> 931\n    #    9  -> 1031\n    #\n    #\n    #    1  -> 123\n    #    2  -> 321\n    #    3  -> 431\n    #    4  -> 531\n    #    5  -> 631\n    #    6  -> 731\n    #    7  -> 831\n    #    8  -> 931\n    #    9  -> 1031\n    #\n    #\n    #    1  -> 123\n    #    2  -> 321\n    #    3  -> 431\n    #    4  -> 531\n    #    5  -> 631\n    #    6  -> 731\n    #    7  -> 831\n    #    8  -> 931\n    #    9  -> 1031\n    #\n    #\n    #    1  -> 123\n    #    2  -> 321\n    #    3  -> 431\n    #    4  -> 531\n    #    5  -> 631\n    #    6  -> 731\n    #    7  -> 831\n    #    8  -> 931\n    #    9  -> 1031\n    #\n    #\n    #    1  -> 123\n    #    2  -> 321\n    #    3  -> 431\n    #    4  -> 531\n    #    5  -> 631\n    #    6  -> 731\n    #    7  -> 831\n    #    8  -> 931\n    #    9  -> 1031\n    #\n    #\n    #    1  -> 123\n    #    2  -> 321\n    #    3  -> 431\n    #    4  -> 531\n    #    5  -> 631\n    #    6  -> 731\n    #    7  -> 831\n    #    8  -> 931\n    #    9  -> 1031\n    #\n    #\n    #    1  -> 123\n    #    2  -> 321\n    #    3  -> 431\n    #   "
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    arr = list(str(n))\n    i = len(arr) - 1\n    while i > 0:\n        if int(arr[i]) < int(arr[i - 1]):\n            arr[i - 1], arr[i] = arr[i], arr[i - 1]\n            break\n        i -= 1\n    return int(''.join(arr))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    a = list(str(n))\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if int(a[i]) < int(a[j]) and i < j:\n                a[i], a[j] = a[j], a[i]\n                break\n    return int(''.join(a))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    string = str(n)\n    if len(string) == 1:\n        return int(string)\n    for i in range(len(string)-2, -1, -1):\n        if string[i] < string[i+1]:\n            string = string[:i+1] + sorted(string[i+1:])[0] + string[i+1:]\n            break\n    return int(string)\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    i = 0\n    while i < len(n):\n        j = i\n        while j < len(n) and int(n[j]) < int(n[i]):\n            j += 1\n        if j == i:\n            i += 1\n        else:\n            n = n[:i] + n[j] + n[i+1:j] + n[i] + n[j+1:]\n            i += 1\n    return int(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # i is the first number that is larger than the given number\n    # j is the last number that is larger than the given number and is before i\n    i = 0\n    j = 0\n    new_number = \"\"\n    n_len = len(n)\n    while i < n_len:\n        if int(n[j]) < int(n[i]):\n            new_number += n[i]\n            i += 1\n        else:\n            j = i\n            i += 1\n    if int(n) == int(new_number):\n        return None\n    else:\n        return new_number\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    '''\n    m = int(n)\n    n = list(n)\n    print(n)\n    t = 0\n    for i in range(len(n)-1):\n        t += 1\n        if n[i] > n[i+1]:\n            n[i],n[i+1] = n[i+1],n[i]\n            n[t:] = reversed(n[t:])\n            t = 0\n            m = ''.join(n)\n    return m\n    '''\n    m = int(n)\n    n = list(n)\n    p = 0\n    for i in range(len(n)-1):\n        p += 1\n        if n[i] > n[i+1]:\n            n[i],n[i+1] = n[i+1],n[i]\n            n[p:] = reversed(n[p:])\n            p = 0\n            m = ''.join(n)\n    return m\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    rearranged_num = list(str(n))\n    length = len(rearranged_num)\n    for i in range(length - 1, 0, -1):\n        if rearranged_num[i] < rearranged_num[i - 1]:\n            rearranged_num[i], rearranged_num[i - 1] = rearranged_num[i - 1], rearranged_num[i]\n            rearranged_num[:i] = sorted(rearranged_num[:i])\n            break\n    rearranged_num = int(\"\".join(rearranged_num))\n    return rearranged_num\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    n.sort(reverse=True)\n    idx = n.index('9')\n    n[idx], n[idx + 1] = n[idx + 1], n[idx]\n    return int(''.join(n))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(x) for x in str(n)]\n    for i in range(len(digits)-1, 0, -1):\n        if digits[i] > digits[i-1]:\n            for j in range(i-1, -1, -1):\n                if digits[i] > digits[j]:\n                    digits[i-1], digits[j] = digits[j], digits[i-1]\n                    break\n            break\n    return int(''.join(str(x) for x in digits))\n    \n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    heapq.heapify(pairs)\n    for i in xrange(len(nums1)):\n        for j in xrange(len(nums2)):\n            if len(pairs) < k:\n                heapq.heappush(pairs, (nums1[i] + nums2[j], i, j))\n            elif pairs[0][0] < nums1[i] + nums2[j]:\n                heapq.heappushpop(pairs, (nums1[i] + nums2[j], i, j))\n    return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) < len(nums2):\n        return k_smallest_pairs(nums2, nums1, k)\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if nums1 is None or len(nums1) == 0:\n        return []\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a priority queue\n    heap = []\n    heapq.heapify(heap)\n    for i in nums1:\n        heapq.heappush(heap, (i, 0))\n    # add remaining elements from nums2\n    for j in nums2:\n        if len(heap) < k:\n            heapq.heappush(heap, (j, 1))\n        else:\n            if j < heap[0][0]:\n                heapq.heappushpop(heap, (j, 1))\n    # sort pairs based on their first element\n    pairs = [(i[0], i[1]) for i in heap]\n    return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    if k > len(nums1)*len(nums2):\n        return []\n    output = []\n    for i in nums1:\n        for j in nums2:\n            output.append([i,j])\n    return output[:k]\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # pairs = []\n    # heap = []\n    # heapq.heapify(heap)\n    # for i in range(len(nums1)):\n    #     for j in range(len(nums2)):\n    #         if i == 0:\n    #             pairs.append([nums1[i], nums2[j]])\n    #             heapq.heappush(heap, [nums1[i] + nums2[j], i, j])\n    #         else:\n    #             if nums1[i] + nums2[j] < heap[0][0]:\n    #                 heapq.heappop(heap)\n    #                 heapq.heappush(heap, [nums1[i] + nums2[j], i, j])\n    #     if len(heap) > k:\n    #         heapq.heappop(heap)\n    # return pairs\n    '''\n    this solution is faster\n    '''\n    # pairs = []\n    # heap = []\n    # heapq.heapify(heap)\n    # for i in range(len(nums1)):\n    #     for j in range(len(nums2)):\n    #         if i == 0:\n    #             pairs.append([nums1[i], nums2[j]])\n    #             heapq.heappush(heap, [nums1[i] + nums2[j], i, j])\n    #         else:\n    #             if nums1[i] + nums2[j] < heap[0][0]:\n    #                 heapq.heappop(heap)\n    #                 heapq.heappush(heap, [nums1[i] + nums2[j], i, j])\n    #             elif nums1[i] + nums2[j] == heap[0][0]:\n    #                 heapq.heappop(heap)\n    #                 heapq.heappush(heap, [nums1[i] + nums2[j], i, j])\n    #     if len(heap) > k:\n    #         heapq.heappop(heap)\n    #     while len(heap) < k:\n    #         heapq.heappush(heap, [0, 0, 0])\n    # return pairs\n    '''\n    this solution is faster\n    '''\n    pairs = []\n    heap = []\n    heapq.heapify(heap)\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if i == 0:\n                pairs.append([nums1[i], nums2[j]])\n                heapq.heappush(heap, [nums1[i] + nums2[j], i, j])\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, [nums1[i] + nums2[j], i, j])\n                elif nums1[i] + nums2[j] == heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, [nums1[i] + nums2[j], i, j])\n        if len(heap) > k:\n            heapq.heappop(heap)\n        while len(heap) < k:\n            heapq.heappush(heap, [0, 0, 0])\n    return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    h = []\n    for i in range(0, min(k, len(nums1))):\n        heapq.heappush(h, (nums1[i] + nums2[0], i, 0))\n    for i in range(k, len(nums1)):\n        if nums1[i] + nums2[0] <= h[0][0]:\n            heapq.heappop(h)\n            heapq.heappush(h, (nums1[i] + nums2[0], i, 0))\n    res = []\n    for i in range(0, k):\n        res.append([nums1[h[i][1]], nums2[h[i][2]]])\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    '''\n    Think about the answer as pairs of 1 element from the left array and one element from the right array.\n    We will create a heap (or priority queue) of size k and add the first k elements from both arrays.\n    We will also keep a hash map of already added elements to avoid repetition.\n    '''\n    pairs = []\n    added_elements = {}\n    if k > len(nums1) * len(nums2):\n        return pairs\n    for num1 in nums1:\n        for num2 in nums2:\n            if (num1, num2) not in added_elements and (num2, num1) not in added_elements:\n                added_elements[(num1, num2)] = True\n                heapq.heappush(pairs, (num1, num2))\n            if len(pairs) == k:\n                break\n        if len(pairs) == k:\n            break\n    return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n    res = []\n    while len(res) < k and heap:\n        smallest, first, second = heapq.heappop(heap)\n        res.append([nums1[first], nums2[second]])\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    m, n = len(nums1), len(nums2)\n    if m == 0 or n == 0:\n        return []\n    h = []\n    for i in range(m):\n        for j in range(n):\n            heapq.heappush(h, (nums1[i]+nums2[j], i, j))\n            if len(h) > k:\n                heapq.heappop(h)\n    ans = []\n    while h:\n        ans.append(heapq.heappop(h))\n    return ans\ndef knapsack(val, wt, w, n):\n    if n == 0 or w == 0:\n        return 0\n    if wt[n-1] > w:\n        return knapsack(val, wt, w, n-1)\n    else:\n        return max(knapsack(val, wt, w, n-1), val[n-1] + knapsack(val, wt, w-wt[n-1], n-1))\ndef maxsum(arr):\n    m = len(arr)\n    if m == 0:\n        return 0\n    if m == 1:\n        return arr[0]\n    max1 = max2 = 0\n    for i in range(m):\n        max1 = max(max1, arr[i])\n        max2 = max(max2, max1)\n    sum1 = 0\n    for i in range(m-1, -1, -1):\n        sum1 += arr[i]\n        if sum1 > max2:\n            return max2\n    return max2\ndef print_solution(m):\n    if len(m) == 0:\n        return\n    if len(m) == 1:\n        print(m[0], end ='')\n        return\n    print(m[0], end ='')\n    print_solution(m[1:])\ndef nth_num(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return nth_num(n-1) + nth_num(n-2)\ndef roman_to_integer(roman_num):\n    values = {\n    'I': 1,\n    'V': 5,\n    'X': 10,\n    'L': 50,\n    'C': 100,\n    'D': 500,\n    'M': 1000\n    }\n    number = 0\n    prev = 0\n    for i in range(len(roman_num)-1, -1, -1):\n        if values[roman_num[i]] >= prev:\n            number += values[roman_num[i]]\n        else:\n            number -= values[roman_num[i]]\n        prev = values[roman_num[i]]\n    return number\ndef roman_to_integer_2(num):\n    d = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    s = num.replace('DCCCC', 'CM').replace('CCCC', 'CD').replace('VIIII', 'IX').replace('IIII', 'IV')\n    return sum(d[x] for x in s)\ndef roman_to_integer_3(num):\n    values = {\n    'I': 1,\n    'V': 5,\n    'X': 10,\n    'L': 50,\n    'C': 100,\n    'D': 500,\n    'M': 1000\n    }\n    s = num.replace('C', 'X').replace('L', 'X').replace('D', 'C').replace('V', 'X')\n    return sum(values[x] for x in s)\ndef count_ways(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return count_ways(n-1) + count_ways(n-2)\ndef count_ways_2(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    table = [0 for i in range(n)]\n    table[0] = 1\n    table[1] = 1\n    for i in range(2, n):\n        table[i] = table[i-1] + table[i-2]\n    return table[n-1]\ndef count_ways_3(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return count_ways_3(n-1) + count_ways_3(n-2)\ndef print_spiral(arr, n, m):\n    for i in range(m):\n        for j in range(n):\n            print(arr[i*n+j], end ='')\n        print()\ndef print_grid(arr, m, n):\n    for i in range(m):\n        for j in range(n):\n            print(arr[i][j], end ='')\n        print()\ndef is_cycle(graph):\n    if len(graph) <= 1:\n        return False\n    parent = [None for i in range(len(graph))]\n    visited = [False for i in range(len(graph))]\n    for i in range(len(graph)):\n        if visited[i]:\n            continue\n        if check_cycle(i, graph, visited, parent):\n            return True\n    return False\ndef check_cycle(i, graph, visited, parent):\n    visited[i] = True\n    for j in graph[i]:\n        if parent[j] is None or parent[j] == i:\n            parent[j] = i\n            if check_cycle(j, graph, visited, parent):\n                return True\n    return False\ndef find_intersection(arr1, n, arr2, m):\n    if n == 0 or m == 0:\n        return\n    if arr1[n-1] == arr2[m-1]:\n        return arr1[n-1]\n    if arr1[n-1] > arr2[m-1]:\n        find_intersection(arr1, n-1, arr2, m)\n    else:\n        find_intersection(arr1, n, arr2, m-1)\ndef union_intersection(arr1, n, arr2, m, result):\n    if n == 0 or m == 0:\n        return\n    if arr1[n-1] == arr2[m-1]:\n        result[arr1[n-1]] += 1\n        return\n    if arr1[n-1] > arr2[m-1]:\n        union_intersection(arr1, n-1, arr2, m, result)\n    else:\n        union_intersection(arr1, n, arr2, m-1, result)\ndef union_intersection_2(arr1, n, arr2, m):\n    result = [0 for i in range(n+m)]\n    union_intersection(arr1, n, arr2, m, result)\n    print(result)\ndef find_intersection_3(arr1, n, arr2, m):\n    if n == 0 or m == 0:\n        return\n    if arr1[n-1] == arr2[m-1]:\n        print(arr1[n-1], end ='')\n        return\n    if arr1[n-1] > arr2[m-1]:\n        find_intersection_3(arr1, n, arr2, m)\n    else:\n        find_intersection_3(arr1, n, arr2, m-1)\ndef find_intersection_4(arr1, n, arr2, m, result):\n    if n == 0 or m == 0:\n        return\n    if arr1[n-1] == arr2[m-1]:\n        result[arr1[n-1]] += 1\n        return\n    if arr1[n-1] > arr2[m-1]:\n        find_intersection_4(arr1, n, arr2, m, result)\n    else:\n        find_intersection_4(arr1, n, arr2, m-1, result)\ndef find_intersection_5(arr1, n, arr2, m):\n    result = [0 for i in range("
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = 0\n    for pair in list1:\n        min_prod = min(min_prod, min(pair))\n    return min_prod\n    \ndef min_product(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = 1\n    for pair in list1:\n        min_prod *= min(pair)\n    return min_prod\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    product = list1[0][0] * list1[0][1]\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] * list1[j][1] < product:\n                product = list1[i][0] * list1[j][1]\n    return product\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return(reduce(lambda x, y: x * y, min(list1, key = lambda t: t[0] * t[1])))\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return None\n    list2 = [item for item in list1 if item[0] <= item[1]]\n    list3 = [item for item in list1 if item[0] > item[1]]\n    if len(list2) < 2:\n        return None\n    list2.sort()\n    min1 = list2[0]\n    min2 = list2[1]\n    min3 = list3[0]\n    if min1[0] * min2[1] < min3[0] * min1[1]:\n        return (min3[0], min1[1])\n    else:\n        return (min1[0], min2[1])\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    import operator\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    n = len(list1)\n    min_product = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            min_product = min(min_product, list1[i][0]*list1[j][1])\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product_pair = []\n    for i in range(len(list1)):\n        for j in range(i,len(list1)):\n            if list1[i][0] * list1[j][0] < list1[min_product_pair[0]][0] * list1[min_product_pair[1]][0]:\n                min_product_pair = [i,j]\n    return tuple(list1[min_product_pair[0]][0] * list1[min_product_pair[1]][0])\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return None\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    pairs = itertools.combinations(list1, 2)\n    product = list(itertools.product(*pairs))\n    return (product)\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort()\n    min_product = 1\n    for i in range(0,len(list1)):\n        if list1[i][1] <= 0:\n            return list1[i][0]\n        elif list1[i][1] > 0:\n            min_product *= list1[i][0]\n            list1[i][1] -= 1\n    return min_product\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 1:\n        return listval[0]\n    else:\n        return min(listval[0], min_val(listval[1:]))\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for val in listval:\n        if minval > val:\n            minval = val\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    val = listval[0]\n    for i in listval[1:]:\n        if i < val:\n            val = i\n    return val\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in range(len(listval)):\n        if minval > listval[i]:\n            minval = listval[i]\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    \n    min = listval[0]\n    for item in listval:\n        if item < min:\n            min = item\n    \n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    minval = listval[0]\n    for x in listval:\n        if x < minval:\n            minval = x\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 1:\n        return listval[0]\n    \n    else:\n        min_val = listval[0]\n        for val in listval:\n            if val < min_val:\n                min_val = val\n        return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if listval == []:\n        return None\n    if len(listval) == 1:\n        return listval[0]\n    else:\n        return min(listval[0], min_val(listval[1:]))\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = min(listval)\n    return minval\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s = word\n    if s[0] == '_':\n        s = s[1:]\n    s = re.sub('_[0-9]*$', '', s)\n    s = re.sub('_','', s)\n    s = s.split(' ')\n    s = [x[0].lower() + x[1:] for x in s]\n    s = ''.join(s)\n    s = s[0].upper() + s[1:]\n    return s\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_string = ''.join(w.capitalize() for w in words)\n    return camel_string\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # word = word.replace(\"_\",\" \")\n    # word = word.replace(\"-\",\" \")\n    # word = word.replace(\"(\",\" \")\n    # word = word.replace(\")\",\" \")\n    \n    # word = word.replace(\".\",\" \")\n    # word = word.replace(\"-\",\" \")\n    # word = word.replace(\"_\",\" \")\n    # word = word.replace(\"(\",\" \")\n    # word = word.replace(\")\",\" \")\n    \n    # word = word.replace(\"+\",\" \")\n    # word = word.replace(\"*\",\" \")\n    \n    # word = word.replace(\"/\",\" \")\n    # word = word.replace(\"~\",\" \")\n    \n    # word = word.replace(\"=\",\" \")\n    \n    # word = word.replace(\"?\",\" \")\n    # word = word.replace(\"|\",\" \")\n    # word = word.replace(\"&\",\" \")\n    # word = word.replace(\"\\\\\",\" \")\n    # word = word.replace(\"#\",\" \")\n    # word = word.replace(\"%\",\" \")\n    # word = word.replace(\"^\",\" \")\n    # word = word.replace(\"`\",\" \")\n    # word = word.replace(\"~\",\" \")\n    # word = word.replace(\"{\",\" \")\n    # word = word.replace(\"}\",\" \")\n    # word = word.replace(\":\",\" \")\n    # word = word.replace(\";\",\" \")\n    \n    \n    # print(word)\n    # word = word.split(\" \")\n    # word = [x for x in word if x]\n    # for i in word:\n    #     print(i)\n    # print(word)\n    # for x in word:\n    #     # print(x)\n    #     i = i.lower()\n    #     if i[0] == \"-\" or i[0] == \"_\" or i[0] == \".\" or i[0] == \" \" or i[0] == \"(\" or i[0] == \")\" or i[0] == \"+\" or i[0] == \"*\" or i[0] == \"/\" or i[0] == \"~\" or i[0] == \"=\" or i[0] == \"?\" or i[0] == \"|\" or i[0] == \"&\" or i[0] == \"\\\\\" or i[0] == \"#\" or i[0] == \"%\" or i[0] == \"^\" or i[0] == \"`\" or i[0] == \"~\" or i[0] == \"{\" or i[0] == \"}\" or i[0] == \":\" or i[0] == \";\" or i[0] == \"[\" or i[0] == \"]\" or i[0] == \",\" or i[0] == \"(\" or i[0] == \")\" or i[0] == \"{\" or i[0] == \"}\" or i[0] == \"\\\\\":\n    #         print(i)\n    #         i = i[1:]\n    #     else:\n    #         i = i[0].upper() + i[1:]\n    #     word[word.index(x)] = i\n    #     # print(word[word.index(x)])\n    #     print(i)\n    # word = ''.join(word)\n    # print(word)\n    \n    # word = word.replace(\"[\",\" \")\n    # word = word.replace(\"]\",\" \")\n    # word = word.replace(\"}\",\" \")\n    # word = word.replace(\"{\",\" \")\n    # word = word.replace(\"\\'\",\" \")\n    # word = word.replace(\"\\\"\",\" \")\n    # word = word.replace(\"&\",\" \")\n    # word = word.replace(\"=\",\" \")\n    # word = word.replace(\"#\",\" \")\n    # word = word.replace(\"%\",\" \")\n    # word = word.replace(\"$\",\" \")\n    # word = word.replace(\"^\",\" \")\n    # word = word.replace(\"|\",\" \")\n    # word = word.replace(\"(\",\" \")\n    # word = word.replace(\")\",\" \")\n    # word = word.replace(\"~\",\" \")\n    # word = word.replace(\"`\",\" \")\n    # word = word.replace(\"{\",\" \")\n    # word = word.replace(\"}\",\" \")\n    # word = word.replace(\":\",\" \")\n    # word = word.replace(\";\",\" \")\n    # word = word.replace(\"-\",\" \")\n    # word = word.replace(\"_\",\" \")\n    # word = word.replace(\".\",\" \")\n    # word = word.replace(\"/\",\" \")\n    # word = word.replace(\"\\\\\",\" \")\n    # word = word.replace(\"\\\",\" \")\n    # word = word.replace(\"\\r\",\" \")\n    # word = word.replace(\"\\n\",\" \")\n    # word = word.replace(\"\\t\",\" \")\n    # word = word.replace(\"\\\\\",\" \")\n    # word = word.replace(\"\\a\",\" \")\n    # word = word.replace(\"\\b\",\" \")\n    # word = word.replace(\"\\f\",\" \")\n    # word = word.replace(\"\\n\",\" \")\n    # word = word.replace(\"\\r\",\" \")\n    # word = word.replace(\"\\t\",\" \")\n    # word = word.replace(\"\\\\\",\" \")\n    # word = word.replace(\"\\v\",\" \")\n    # word = word.replace(\"\\xad\",\" \")\n    # word = word.replace(\"\\xae\",\" \")\n    # word = word.replace(\"\\x80\",\" \")\n    # word = word.replace(\"\\x93\",\" \")\n    # word = word.replace(\"\\x94\",\" \")\n    # word = word.replace(\"\\x96\",\" \")\n    # word = word.replace(\"\\x97\",\" \")\n    # word = word.replace(\"\\x99\",\" \")\n    # word = word.replace(\"\\x9a\",\" \")\n    # word = word.replace(\"\\x9c\",\" \")\n    # word = word.replace(\"\\x9d\",\" \")\n    # word = word.replace(\"\\x9e\",\" \")\n    # word = word.replace(\"\\x9f\",\" \")\n    # word = word.replace(\"\\xa0\",\" \")\n    # word = word.replace(\"\\xa1\",\" \")\n    # word = word.replace(\"\\xa2\",\" \")\n    # word = word.replace(\"\\xa3\",\" \")\n    # word = word.replace(\"\\xa4\",\" \")\n    # word = word.replace(\"\\xa5\",\" \")\n    # word = word.replace(\"\\xa6\",\" \")\n    # word = word.replace(\"\\xa7\",\" \")\n    # word = word.replace(\"\\xa8\",\" \")\n    # word = word.replace(\"\\xa9\",\" \")\n    # word = word.replace(\"\\xaa\",\" \")\n    # word = word.replace(\"\\xab\",\" \")\n    # word = word.replace(\"\\xac\",\" \")\n    # word = word.replace(\"\\xad\",\" \")\n    # word = word.replace(\"\\xae\",\" \")\n    # word = word.replace(\"\\xaf\",\" \")\n    # word = word.replace(\"\\xb0\",\" \")\n    # word = word.replace(\"\\xb1\",\" \")\n    # word = word.replace(\"\\xb2\",\" \")\n    # word = word.replace(\"\\xb3\",\" \")\n    # word = word.replace(\"\\xb4\",\" \")\n    # word = word.replace(\"\\xb5\",\" \")\n    # word = word.replace(\"\\xb6\",\" \")\n    # word = word.replace(\"\\xb7\",\" \")\n    # word = word.replace(\"\\xb8\",\" \")\n    # word = word.replace(\"\\xb9\",\" \")\n    # word = word.replace(\"\\xba\",\" \")\n    # word = word.replace(\"\\xbb\",\" \")\n    # word = word.replace(\"\\xbc\",\" \")\n    # word = word.replace(\"\\xbd\",\" \")\n    # word = word.replace(\"\\xbe\",\" \")\n    # wor"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    words = [x.capitalize() for x in words]\n    return ''.join(words)\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    #initialize final string to store the result\n    final_string = \"\"\n    #if the given string is empty return the empty string\n    if not word:\n        return \"\"\n    #if the given string is not a string return the given string\n    if not isinstance(word, str):\n        return word\n    #if the given string is a single letter return the given string\n    if len(word) == 1:\n        return word\n    #if the given string is a single word return the given string\n    if len(word) == 1:\n        return word\n    #if the given string is an even number of characters return the given string\n    if len(word) % 2 == 0:\n        return word\n    #if the given string is an odd number of characters remove the last character and convert it to camel case\n    #return the resulting string\n    else:\n        for i in range(1, len(word)):\n            if word[i].isupper():\n                final_string += word[i]\n                continue\n            elif word[i].islower():\n                final_string += word[i]\n                continue\n            elif word[i].isdigit():\n                final_string += word[i]\n                continue\n            else:\n                continue\n        final_string = final_string[0].lower() + final_string[1:]\n        return final_string\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.split('_')\n    return word[0] + ''.join(list(map(lambda x: x.title(), word[1:])))\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not word:\n        return ''\n    if word[0].isupper():\n        return word\n    word = re.sub('(^|[a-z0-9])([A-Z])', lambda s: s.group(1) + s.group(2).lower(), word)\n    return word[0].lower() + word[1:]\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.split('_')\n    print word\n    for i in range(len(word)):\n        word[i] = word[i].capitalize()\n    return ''.join(word)\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word=='':\n        return word\n    else:\n        if word[0].isupper():\n            word=word[0].lower()+word[1:]\n        return re.sub(r'(_\\w+)', lambda x: x.group()[1].upper(), word)\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # result = \"\".join(x.capitalize() or \"_\" for x in word.split(\"_\"))\n    # result = re.sub('[0-9]', '', result)\n    # result = re.sub('_', '', result)\n    # result = re.sub(' ', '', result)\n    # return result\n    return \"\".join([x.capitalize() or \"_\" for x in word.split(\"_\")])\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return \"\".join([x.lower() if not x.lower() == \"_\" else \"_\" for x in word]).strip(\"_\")\ndef camel_to_pascal(word):\n    '''\n    Write a function to convert the given camel case string to pascal case string.\n    '''\n    return \"\".join([x.capitalize() or \"_\" for x in word.split(\"_\")])\ndef pascal_to_camel(word):\n    '''\n    Write a function to convert the given pascal case string to camel case string.\n    '''\n    return \"\".join([x.capitalize() or \"_\" for x in word.split(\"_\")])\ndef pascal_to_snake(word):\n    '''\n    Write a function to convert the given pascal case string to snake case string.\n    '''\n    return \"\".join([x.lower() if not x.lower() == \"_\" else \"_\" for x in word.split(\"_\")])\ndef snake_to_kebab(word):\n    '''\n    Write a function to convert the given snake case string to kebab case string.\n    '''\n    return \"\".join([\"-\" + x.lower() if not x.lower() == \"_\" else \"_\" for x in word.split(\"_\")])\ndef kebab_to_snake(word):\n    '''\n    Write a function to convert the given kebab case string to snake case string.\n    '''\n    return \"\".join([\"-\" + x for x in word.split(\"_\")])\ndef snake_to_latin(word):\n    '''\n    Write a function to convert the given snake case string to latin case string.\n    '''\n    return \"\".join([x.lower() for x in word.split(\"_\")])\ndef latin_to_snake(word):\n    '''\n    Write a function to convert the given latin case string to snake case string.\n    '''\n    return \"\".join([x for x in word.split(\"_\")])\ndef snake_to_kebab(word):\n    '''\n    Write a function to convert the given snake case string to kebab case string.\n    '''\n    return \"\".join([\"-\" + x.lower() for x in word.split(\"_\")])\ndef kebab_to_snake(word):\n    '''\n    Write a function to convert the given kebab case string to snake case string.\n    '''\n    return \"\".join([\"-\" + x for x in word.split(\"_\")])\ndef kebab_to_latin(word):\n    '''\n    Write a function to convert the given kebab case string to latin case string.\n    '''\n    return \"\".join([\"-\" + x.lower() for x in word.split(\"_\")])\ndef latin_to_kebab(word):\n    '''\n    Write a function to convert the given latin case string to kebab case string.\n    '''\n    return \"\".join([\"-\" + x for x in word.split(\"_\")])\ndef camel_to_snake(word):\n    return snake_to_camel(word)\ndef snake_to_camel(word):\n    return camel_to_snake(word)\ndef camel_to_pascal(word):\n    return pascal_to_camel(word)\ndef pascal_to_camel(word):\n    return camel_to_pascal(word)\ndef pascal_to_snake(word):\n    return snake_to_pascal(word)\ndef snake_to_kebab(word):\n    return snake_to_kebab(word)\ndef kebab_to_snake(word):\n    return kebab_to_snake(word)\ndef snake_to_latin(word):\n    return snake_to_latin(word)\ndef latin_to_snake(word):\n    return latin_to_snake(word)\ndef camel_to_kebab(word):\n    return camel_to_kebab(word)\ndef kebab_to_camel(word):\n    return kebab_to_camel(word)\ndef kebab_to_pascal(word):\n    return kebab_to_pascal(word)\ndef pascal_to_kebab(word):\n    return pascal_to_kebab(word)\ndef pascal_to_camel(word):\n    return pascal_to_camel(word)\ndef pascal_to_snake(word):\n    return pascal_to_snake(word)\ndef snake_to_latin(word):\n    return snake_to_latin(word)\ndef latin_to_kebab(word):\n    return latin_to_kebab(word)\ndef kebab_to_latin(word):\n    return kebab_to_latin(word)\ndef camel_to_latin(word):\n    return camel_to_latin(word)\ndef latin_to_pascal(word):\n    return latin_to_pascal(word)\ndef pascal_to_latin(word):\n    return pascal_to_latin(word)\ndef camel_to_pascal(word):\n    return camel_to_pascal(word)\ndef pascal_to_snake(word):\n    return pascal_to_snake(word)\ndef snake_to_pascal(word):\n    return snake_to_pascal(word)\ndef camel_to_kebab(word):\n    return camel_to_kebab(word)\ndef kebab_to_camel(word):\n    return kebab_to_camel(word)\ndef kebab_to_snake(word):\n    return kebab_to_snake(word)\ndef snake_to_kebab(word):\n    return snake_to_kebab(word)\ndef camel_to_kebab(word):\n    return camel_to_kebab(word)\ndef snake_to_latin(word):\n    return snake_to_latin(word)\ndef latin_to_kebab(word):\n    return latin_to_kebab(word)\ndef camel_to_kebab(word):\n    return camel_to_kebab(word)\ndef kebab_to_latin(word):\n    return kebab_to_latin(word)\ndef pascal_to_kebab(word):\n    return pascal_to_kebab(word)\ndef snake_to_pascal(word):\n    return snake_to_pascal(word)\ndef camel_to_pascal(word):\n    return camel_to_pascal(word)\ndef pascal_to_snake(word):\n    return pascal_to_snake(word)\ndef snake_to_pascal(word):\n    return snake_to_pascal(word)\ndef camel_to_latin(word):\n    return camel_to_latin(word)\ndef latin_to_pascal(word):\n    return latin_to_pascal(word)\ndef pascal_to_latin(word):\n    return pascal_to_latin(word)\ndef snake_to_latin(word):\n    return snake_to_latin(word)\ndef kebab_to_latin(word):\n    return kebab_to_latin(word)\ndef camel_to_latin(word):\n    return camel_to_latin(word)\ndef kebab_to_camel(word):\n    return kebab_to_camel(word)\ndef snake_to_kebab(word):\n    return snake_to_ke"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    print(l)\n    return [i for i in l if i%2==0]\nremove_odd([2,3,4,5,6,7,8,9,10])\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = [x for x in l if x % 2!= 0]\n    return odd_list\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l[:] = [x for x in l if x%2 == 0]\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = [i for i in l if i%2==0]\n    return l\n    \n    \n    \nprint remove_odd([1,2,3,4,5])\nprint remove_odd([1,3,2,5,4])\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.remove(l[0])\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    i = 0\n    while i < len(l):\n        if l[i] % 2 == 1:\n            l.pop(i)\n        else:\n            i += 1\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2==0]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [row[n] for row in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [t[n] for t in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [item[n] for item in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [tup[n] for tup in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [item[n] for item in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    newList = []\n    for item in list1:\n        newList.append(item[n])\n    return newList\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [x[n] for x in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    index = 0\n    for i in list1:\n        index = index + 1\n        if index == n:\n            return i\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return list(set(list1) & set(list2))\n    \n    \ndef find_numbers(numbers,sequence):\n    '''\n    Write a python function to find the numbers which are not present in the given sequence.\n    '''\n    return list(set(numbers) - set(sequence))\n    \n    \ndef find_length(seq):\n    '''\n    Write a python function to find the length of the sequence.\n    '''\n    return len(seq)\n    \n    \ndef insert_value(seq,value):\n    '''\n    Write a python function to insert a value at the end of the sequence.\n    '''\n    return seq + [value]\n    \n    \ndef remove_value(seq,value):\n    '''\n    Write a python function to remove the first occurrence of the value in the sequence.\n    '''\n    return seq.remove(value)\n    \n    \ndef concat_seq(seq1,seq2):\n    '''\n    Write a python function to concatenate two sequences together.\n    '''\n    return seq1 + seq2\n    \n    \ndef remove_string(string,remove_char):\n    '''\n    Write a python function to remove the string from the string.\n    '''\n    return string.replace(remove_char,\"\")\n    \n    \ndef slice_string(string,start,end):\n    '''\n    Write a python function to slice the string from the start to the end.\n    '''\n    return string[start:end]\n    \n    \ndef find_all_char(string,char):\n    '''\n    Write a python function to find all the occurrences of the character in the string.\n    '''\n    return [i for i in range(len(string)) if string[i] == char]\n    \n    \ndef count_char(string,char):\n    '''\n    Write a python function to count the occurrences of the character in the string.\n    '''\n    return string.count(char)\n    \n    \ndef swap_char(string,char1,char2):\n    '''\n    Write a python function to swap the occurrence of the characters in the string.\n    '''\n    return string.replace(char1,char2).replace(char2,char1)\n    \n    \ndef replace_char(string,char1,char2):\n    '''\n    Write a python function to replace the occurrence of the character in the string.\n    '''\n    return string.replace(char1,char2)\n    \n    \ndef permute(seq):\n    '''\n    Write a python function to find the permutation of the string.\n    '''\n    return list(set(permutations(seq)))\n    \n    \ndef remove_duplicate(seq):\n    '''\n    Write a python function to remove the duplicates in the list.\n    '''\n    return list(set(seq))\n    \n    \ndef sort_list(list):\n    '''\n    Write a python function to sort the list of tuples.\n    '''\n    return sorted(list,key=lambda x:x[1],reverse=True)\n    \n    \ndef sum_list(list):\n    '''\n    Write a python function to compute the sum of the list.\n    '''\n    return sum(list)\n    \n    \ndef product_list(list):\n    '''\n    Write a python function to compute the product of the list.\n    '''\n    return reduce(lambda x,y:x*y,list)\n    \n    \ndef max_list(list):\n    '''\n    Write a python function to find the maximum element in the list.\n    '''\n    return max(list)\n    \n    \ndef min_list(list):\n    '''\n    Write a python function to find the minimum element in the list.\n    '''\n    return min(list)\n    \n    \ndef find_middle(seq):\n    '''\n    Write a python function to find the middle element in the list.\n    '''\n    return seq[len(seq)//2]\n    \n    \ndef find_count(list,value):\n    '''\n    Write a python function to find the count of the occurrence of the value in the list.\n    '''\n    return list.count(value)\n    \n    \ndef is_sublist(list1,list2):\n    '''\n    Write a python function to check if list2 is a sublist of list1.\n    '''\n    return all(elem in list1 for elem in list2)\n    \n    \ndef find_in_seq(list1,list2):\n    '''\n    Write a python function to find the count of the occurrence of the value in the list.\n    '''\n    return list1.index(list2)\n    \n    \ndef find_position(list1,value):\n    '''\n    Write a python function to find the position of the value in the list.\n    '''\n    return list1.index(value)\n    \n    \ndef reverse_list(list1):\n    '''\n    Write a python function to reverse the list.\n    '''\n    return list1[::-1]\n    \n    \ndef list_to_string(list1):\n    '''\n    Write a python function to convert the list into a string.\n    '''\n    return ''.join(str(elem) for elem in list1)\n    \n    \ndef string_to_list(string):\n    '''\n    Write a python function to convert the string into a list.\n    '''\n    return list(string)\n    \n    \ndef is_anagram(string1,string2):\n    '''\n    Write a python function to check whether two strings are anagram or not.\n    '''\n    return sorted(string1) == sorted(string2)\n    \n    \ndef find_anagram(string1,string2):\n    '''\n    Write a python function to find the anagram of the two strings.\n    '''\n    return list(set(string1) - set(string2))\n    \n    \ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is a palindrome or not.\n    '''\n    return string == string[::-1]\n    \n    \ndef all_vowels(string):\n    '''\n    Write a python function to check whether all the letters in the string are vowels or not.\n    '''\n    return all(elem in ['a','e','i','o','u'] for elem in string)\n    \n    \ndef alternate_vowels(string):\n    '''\n    Write a python function to find the alternate vowels in the string.\n    '''\n    return ''.join(str(elem) for elem in string if elem in ['a','e','i','o','u'] and string.index(elem)%2 == 1)\n    \n    \ndef find_longest_str(string1,string2):\n    '''\n    Write a python function to find the longest string among two strings.\n    '''\n    if len(string1) > len(string2):\n        return string1\n    elif len(string2) > len(string1):\n        return string2\n    else:\n        return string1\n    \n    \ndef find_all_pos(seq):\n    '''\n    Write a python function to find the all the positions of the character in the sequence.\n    '''\n    return [i for i in range(len(seq)) if seq.startswith(seq[i])]\n    \n    \ndef find_all_char(string,char):\n    '''\n    Write a python function to find all the occurrences of the character in the string.\n    '''\n    return [i for i in range(len(string)) if string[i] == char]\n    \n    \ndef convert_num(string):\n    '''\n    Write a python function to convert the string into a number.\n    '''\n    return int(''.join(str(elem) for elem in string))\n    \n    \ndef convert_char(string):\n    '''\n    Write a python function to convert the string into a character.\n    '''\n    return chr(int(''.join(str(elem) for elem in string)))\n    \n    \ndef shift_left(string,n):\n    '''\n    Write a python function to shift the string to the left by n position.\n    '''\n    return string["
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item1 in list1:\n        if item1 in list2:\n            return True\n    return False\n    "
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(i in list2 for i in list1)\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)<len(list2):\n        for i in list2:\n            if i in list1:\n                return True\n    else:\n        for i in list1:\n            if i in list2:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(item in list2 for item in list1)\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if (len(list1)==len(list2)):\n        return 1\n    else:\n        return 0\n    \ndef find_prime_number(num):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if (num>1):\n        if (num==2):\n            return 1\n        for i in range(2,num):\n            if (num%i==0):\n                return 0\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for x in list1:\n        if x in list2:\n            return True\n        return False\n    return False\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #time: O(n*n)\n    #space: O(n)\n    arr = sorted(arr)\n    n = len(arr)\n    product = arr[0] * arr[1]\n    for i in xrange(0, n-1):\n        for j in xrange(i+1, n):\n            product = max(product, arr[i] * arr[j])\n    return product\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    high = arr[-1] * arr[-2]\n    for i in range(len(arr)-2):\n        if arr[i] * arr[i+1] > high:\n            high = arr[i] * arr[i+1]\n    return high\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    arr.reverse()\n    for i in range(len(arr)-1):\n        if arr[i]*arr[i+1]>arr[i+1]*arr[i]:\n            return arr[i], arr[i+1]\n    return arr[0], arr[1]\n    \n    \n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # n = len(arr)\n    # max_prod = 0\n    # max_val = 0\n    # for i in range(0, n):\n    #     for j in range(i+1, n):\n    #         if max_val < arr[i]*arr[j]:\n    #             max_val = arr[i]*arr[j]\n    #             max_prod = arr[i]*arr[j]\n    # return max_prod\n    max_val = arr[0]\n    max_prod = arr[0]\n    for i in range(1, len(arr)):\n        if max_val < arr[i]:\n            max_val = arr[i]\n        if max_prod < arr[i] * arr[i]:\n            max_prod = arr[i] * arr[i]\n    return max_prod\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    import operator\n    arr.sort()\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if(arr[i]*arr[j]>0):\n                return arr[i],arr[j]\n            else:\n                return arr[j],arr[i]\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 1\n    for num in arr:\n        max_product = max(max_product * num, num)\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    # If the array is empty or consists of a single element,\n    # then there is no way to get the product of array.\n    if len(arr) < 2:\n        return None\n    \n    # If the array has two elements,\n    # then the product of the array will be the result.\n    if len(arr) == 2:\n        return arr[0] * arr[1]\n    \n    # Sort the array. \n    arr.sort()\n    \n    # Get the largest and smallest number.\n    largest = arr[-1]\n    smallest = arr[0]\n    \n    # Initialize result\n    max_product = None\n    \n    # Iterate through the array,\n    # starting from second element.\n    for i in range(1, len(arr)):\n        # Initialize the current element as a positive number.\n        curr_element = arr[i]\n        \n        # Initialize the multiplicand as 1 to get multiplicand positive.\n        multiplicand = 1\n        \n        # Iterate backwards through the array,\n        # starting from the second element.\n        for j in range(i - 1, -1, -1):\n            \n            # If the current element is larger than the multiplicand,\n            # then reset the multiplicand to 1.\n            if arr[j] > multiplicand:\n                multiplicand = 1\n            \n            # Else, get the multiplicand as the product of the two elements.\n            else:\n                multiplicand = arr[j] * multiplicand\n        \n        # Update the result if the multiplicand is greater than the current result.\n        if max_product is None or max_product < multiplicand:\n            max_product = multiplicand\n            \n    # Return the maximum product.\n    return max_product\n    \n    \ndef longest_substring(arr):\n    '''\n    Write a python function to find the longest substring in a given string.\n    '''\n    \n    # If the array is empty,\n    # then return None.\n    if len(arr) < 1:\n        return None\n    \n    # If the array contains only a single element,\n    # then return the element.\n    if len(arr) == 1:\n        return arr\n    \n    # Initialize result\n    max_len = 0\n    \n    # Initialize start index to 0\n    start_index = 0\n    \n    # Iterate through the array,\n    # starting from the second element.\n    for i in range(1, len(arr)):\n        \n        # If the current element is greater than the previous element,\n        # then update the start index.\n        if arr[i] > arr[i - 1]:\n            start_index = i\n        \n        # Else, update the result if the current substring is greater than previous result.\n        else:\n            curr_len = i - start_index + 1\n            if curr_len > max_len:\n                max_len = curr_len\n            \n    # Return the result\n    return arr[start_index : start_index + max_len]\n    \n    \ndef get_all_instances(arr, val):\n    '''\n    Write a python function to find the index of all the instances of a given value in a given array.\n    '''\n    \n    # If the array is empty,\n    # then return None.\n    if len(arr) < 1:\n        return None\n    \n    # Initialize result\n    result = None\n    \n    # Initialize the first index to 0\n    first_index = 0\n    \n    # Iterate through the array,\n    # starting from the second element.\n    for i in range(1, len(arr)):\n        \n        # If the current element is equal to the value,\n        # then append the current index to the result array.\n        if arr[i] == val:\n            result.append(i)\n        \n        # Else, update the result if the current substring is greater than previous result.\n        else:\n            if result is None or len(result) < i - first_index:\n                result = [first_index, i - 1]\n            else:\n                result[1] = i - 1\n            \n            first_index = i\n            \n    # Return the result\n    return result\n    \n    \ndef generate_all_substrings(arr):\n    '''\n    Write a python function to generate all the substrings of a given string.\n    '''\n    \n    # If the array is empty,\n    # then return None.\n    if len(arr) < 1:\n        return None\n    \n    # Initialize result\n    result = []\n    \n    # Initialize the first index to 0\n    first_index = 0\n    \n    # Iterate through the array,\n    # starting from the second element.\n    for i in range(1, len(arr)):\n        \n        # If the current element is equal to the value,\n        # then append the current index to the result array.\n        if arr[i] == arr[i - 1]:\n            result.append(arr[first_index : i + 1])\n        \n        # Else, update the result if the current substring is greater than previous result.\n        else:\n            if result is None or len(result) < i - first_index:\n                result = [first_index, i - 1]\n            else:\n                result[1] = i - 1\n            \n            first_index = i\n            \n    # Return the result\n    return result\n    \n    \ndef circular_shift(arr):\n    '''\n    Write a python function to find the circular shift of a given string.\n    '''\n    \n    # If the array is empty,\n    # then return None.\n    if len(arr) < 1:\n        return None\n    \n    # If the array contains only a single element,\n    # then return the element.\n    if len(arr) == 1:\n        return arr\n    \n    # Initialize result\n    result = None\n    \n    # Initialize the first index to 0\n    first_index = 0\n    \n    # Iterate through the array,\n    # starting from the second element.\n    for i in range(1, len(arr)):\n        \n        # If the current element is equal to the value,\n        # then append the current index to the result array.\n        if arr[i] == arr[(i + first_index) % len(arr)]:\n            result.append(i)\n        \n        # Else, update the result if the current substring is greater than previous result.\n        else:\n            if result is None or len(result) < i - first_index:\n                result = [first_index, i - 1]\n            else:\n                result[1] = i - 1\n            \n            first_index = i\n            \n    # Return the result\n    return result\n    \n    \ndef get_decimal_to_binary_recursive(num):\n    '''\n    Write a python function to convert a decimal to binary number.\n    '''\n    \n    # Base case\n    if num == 0:\n        return 0\n    \n    # Recursive case\n    else:\n        return (num % 2) + 10 * get_decimal_to_binary_recursive(int(num / 2))\n    \n    \ndef get_decimal_to_binary_iterative(num):\n    '''\n    Write a python function to convert a decimal to binary number.\n    '''\n    \n    # Initialize the result\n    result = 0\n    \n    # Initialize the current position\n    position = 0\n    \n    # Initialize the current number\n    curr_num = num\n    \n    # Iterate until the current number becomes zero\n    while curr_num > 0:\n        \n        # Find the last bit of the current number\n        last_bit = curr_num % 2\n        \n        # Update the result\n        result += last_bit * pow(10, position)\n        \n        # Update the current number\n        curr_num = int(curr_num / 2)\n        \n        # Update the position\n        position += 1\n        \n    # Return the result\n    return result\n    \n    \ndef is_permutation_of_palindrome(str1, str2):\n    '''\n    Write a python function to check if two strings are permutations of each other.\n    '''\n    \n    # If the strings are of different lengths,\n    # then return False.\n    if len(str1)!= len(str"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    def maxProduct(arr): \n        n = len(arr) \n        if n < 2: \n            return\n        elif n == 2: \n            return max(arr[0], arr[1]) \n        max_ending_here = 1\n        min_ending_here = 1\n        for i in range(0, n): \n            if (arr[i] > 0): \n                max_ending_here = max_ending_here * arr[i] \n                min_ending_here = min(min_ending_here * arr[i], 1) \n            elif (arr[i] < 0): \n                temp = max_ending_here \n                max_ending_here = max(min_ending_here * arr[i], 1) \n                min_ending_here = temp * arr[i] \n        return max(max_ending_here, min_ending_here) \n    return maxProduct(arr)\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    res = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            res.append(arr[i]*arr[j])\n    return max(res)\n    \nprint(max_Product([1, 2, -3, 4]))\nprint(max_Product([-1, -2, 3, -4]))\nprint(max_Product([-2, -5, -1, -4, -3, -8, -10, -6, -9]))\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = 1\n    max2 = 1\n    for i in arr:\n        if i > max1:\n            max2 = max1\n            max1 = i\n        elif i > max2:\n            max2 = i\n    return max1 * max2\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return set(x[0] for x in Input)\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    dict_ = {}\n    # Input = [(1,2),(3,4),(5,6),(6,7),(8,9)]\n    for each_tuple in Input:\n        if each_tuple[0] in dict_:\n            dict_[each_tuple[0]].append(each_tuple)\n        else:\n            dict_[each_tuple[0]] = [each_tuple]\n    print dict_\n    return dict_\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    count_dict = {}\n    for each_tuple in Input:\n        count_dict.setdefault(each_tuple[0],0)\n        count_dict[each_tuple[0]] += 1\n    return count_dict\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    dict = {}\n    for tup in Input:\n        dict[tup[0]] = 1\n    \n    return dict.keys()\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #List of tuples of format(a,b,c)\n    #a,b,c are integers\n    #Write a function to find common first element in given list of tuple.\n    #Input = [('a',1),('b',1),('a',2)]\n    #Output = 'a'\n    #Given list of tuples\n    #Input = [(3,4,5),(5,6,7),(1,2,3)]\n    #Output = 3\n    #Given list of tuples\n    #Input = [(3,4,5),(5,6,7),(1,2,3),(1,2,3),(1,2,3),(1,2,3)]\n    #Output = 3\n    def group_tuples(Input):\n        '''\n        Write a function to find common first element in given list of tuple.\n        '''\n        #List of tuples of format(a,b,c)\n        #a,b,c are integers\n        #Write a function to find common first element in given list of tuple.\n        #Input = [('a',1),('b',1),('a',2)]\n        #Output = 'a'\n        #Given list of tuples\n        #Input = [(3,4,5),(5,6,7),(1,2,3)]\n        #Output = 3\n        #Given list of tuples\n        #Input = [(3,4,5),(5,6,7),(1,2,3),(1,2,3),(1,2,3),(1,2,3)]\n        #Output = 3\n        def group_tuples(Input):\n            '''\n            Write a function to find common first element in given list of tuple.\n            '''\n            #List of tuples of format(a,b,c)\n            #a,b,c are integers\n            #Write a function to find common first element in given list of tuple.\n            #Input = [('a',1),('b',1),('a',2)]\n            #Output = 'a'\n            #Given list of tuples\n            #Input = [(3,4,5),(5,6,7),(1,2,3)]\n            #Output = 3\n            #Given list of tuples\n            #Input = [(3,4,5),(5,6,7),(1,2,3),(1,2,3),(1,2,3),(1,2,3)]\n            #Output = 3\n            #Given list of tuples\n            #Input = [(3,4,5),(5,6,7),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    final_list = []\n    for each in Input:\n        if each[0] not in final_list:\n            final_list.append(each[0])\n    return final_list\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # for k, g in groupby(Input, lambda x: x[0]):\n    #     print k, list(g)\n    # print Input\n    for k, g in groupby(Input, lambda x: x[0]):\n        # print k, list(g)\n        if len(list(g)) > 1:\n            common = list(g)[0]\n            for i in list(g)[1:]:\n                if common not in i:\n                    common = None\n                    break\n    return common\n    \ndef group_tuples_dict(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    for k, g in groupby(Input, lambda x: x[0]):\n        # print k, list(g)\n        if len(list(g)) > 1:\n            common = list(g)[0]\n            for i in list(g)[1:]:\n                if common not in i:\n                    common = None\n                    break\n    return common\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return sum(zip(*Input),())\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    # Function to find the common first element\n    # of all the tuples in list\n    \n    def common_first(l): \n    \n        # Sort all the tuples by the first element\n        # of each tuple\n        l.sort(key = lambda x: x[0]) \n    \n        # Pick first element of the list \n        first = l[0] \n    \n        # Pick rest of the elements\n        for i in xrange(1,len(l)): \n        \n            # If the first element of list is not\n            # equal to first element of the tuple \n            # then return first element\n            if l[i][0]!= first[0]: \n                return first \n            \n            # Else update the first element\n            else: \n                first = l[i] \n        \n        # If for every iteration of for loop, the first \n        # element is not equal to first element of the tuple,\n        # then return -1\n        return -1\n    \n    # Convert Input list of tuple into list of list\n    Input = [list(i) for i in Input] \n    \n    # Return the common first element of all the tuples\n    return common_first(Input) \n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    def common_first_element(Input): \n        # For each tuple in the list, find the first element\n        first_element = [tup[0] for tup in Input] \n        # Find the first element in each tuple\n        common_first_element = set(first_element)\n        # Find the unique first element\n        common_first_element = list(common_first_element)\n        return common_first_element\n    # Test\n    Input = [('a','b'),('b','c'),('a','b')]\n    output = common_first_element(Input)\n    assert output == ['a']\n    print \"Passed common_first_element function!\"\n    \ndef test_exception(): \n    '''\n    Write a function to test if a given number is a prime number. \n    '''\n    def is_prime(n): \n        for i in range(2,n): \n            if n%i == 0: \n                return False\n        return True\n    # Test\n    assert is_prime(5) == True\n    assert is_prime(1) == False\n    assert is_prime(11) == True\n    assert is_prime(7) == False\n    print \"Passed exception test!\"\n    \ndef group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    def common_first_element(Input): \n        # For each tuple in the list, find the first element\n        first_element = [tup[0] for tup in Input] \n        # Find the first element in each tuple\n        common_first_element = set(first_element)\n        # Find the unique first element\n        common_first_element = list(common_first_element)\n        return common_first_element\n    # Test\n    Input = [('a','b'),('b','c'),('a','b')]\n    output = common_first_element(Input)\n    assert output == ['a']\n    print \"Passed common_first_element function!\"\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    dic = {}\n    for i in lst:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    m = 0\n    maxi = \"\"\n    for i in dic:\n        if m < dic[i]:\n            maxi = i\n            m = dic[i]\n    return maxi\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst)==0:\n        return None\n    else:\n        max_len=len(lst[0])\n        max_element=lst[0]\n        for element in lst:\n            if len(element)>max_len:\n                max_len=len(element)\n                max_element=element\n        return max_element\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maxlen = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) > maxlen:\n            maxlen = len(lst[i])\n    return maxlen\n    \ndef Find_Min(lst): \n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    minlen = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < minlen:\n            minlen = len(lst[i])\n    return minlen\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        if len(lst[0]) > len(lst[1]):\n            return lst[0]\n        else:\n            return lst[1]\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_len_element = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_len_element = i\n    return max_len_element\n    \ndef Find_Max_2(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n    \ndef Find_Max_3(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_len_element = ''\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_len_element = i\n    return max_len_element\n    \ndef Find_Max_4(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n    \ndef Find_Max_5(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_len_element = ''\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_len_element = i\n    return max_len_element\n    \ndef Find_Max_6(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n    \ndef Find_Max_7(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n    \ndef Find_Max_8(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n    \ndef Find_Max_9(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n    \ndef Find_Max_10(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n    \ndef Find_Max_11(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n    \ndef Find_Max_12(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n    \ndef Find_Max_13(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n    \ndef Find_Max_14(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n    \ndef Find_Max_15(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n    \ndef Find_Max_16(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n    \ndef Find_Max_17(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n    \ndef Find_Max_18(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n    \ndef Find_Max_19(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n    \ndef Find_Max_20(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n    \ndef Find_Max_21(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n    \ndef Find_Max_22(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n    \ndef Find_Max_23(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n    \ndef Find_Max_24(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n    \ndef Find_Max_25(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    fo"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    result = lst[0]\n    for i in lst:\n        if len(i) > len(result):\n            result = i\n    return result\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if not lst: \n        return \n    max_len, max_value = 0, 0\n    for i in lst: \n        if len(i)>max_len: \n            max_len, max_value = len(i), i\n    return max_value\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst = [1, 2, 3, 4, 5, 6]\n    n = len(lst)\n    maxlen = 1\n    for i in range(1,n):\n        if len(lst[i]) > maxlen:\n            maxlen = len(lst[i])\n            maxindex = i\n    print lst[maxindex]\nFind_Max(lst)\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = -1\n    max_length_index = None\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_length_index = i\n    return max_length_index\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0:\n        return False\n    else:\n        n = len(lst)\n        return lst[n-1]\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for element in list1:\n        rounded = round(element)\n        total += rounded\n    print(\"The sum of all numbers in the list is: \" + str(total) + \" and the length is: \" + str(len(list1)))\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for x in list1:\n        total += round(x)\n    return total * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    s = 0\n    for i in list1:\n        s += round(i)\n    return s * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    if len(list1) == 0:\n        return\n    sum = 0\n    for number in list1:\n        sum += round(number)\n    print(sum*len(list1))\n    return\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list2 = []\n    for number in list1:\n        list2.append(round(number))\n    return sum(list2) * len(list2)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for number in list1:\n        total_sum += round(number)\n    return total_sum * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    print('Total is:'+ str(total) +'which is:'+ str(total*len(list1)))\n    return\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for n in list1:\n        total += math.floor(n)\n    return total * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    total *= len(list1)\n    return total\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum(map(lambda x: round(x), list1))*len(list1)\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total=0\n    for x in range(n):\n        if x%2==0:\n            total=total+x**3\n    return total\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    assert n >= 0, 'The value of n must be a natural number'\n    assert isinstance(n, int), 'The value of n must be a natural number'\n    assert (n % 2 == 0), 'The value of n must be even'\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if not isinstance(n, int) or n < 0:\n        return \"Enter a positive even integer\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return n\n    return (n**3 + cube_Sum(n - 2))\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # if n is negative, then return 0\n    if n < 0:\n        return 0\n    # else, return n^3 + n^2 + n\n    return n**3 + n**2 + n\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    res = 0\n    for i in range(2, n+1, 2): \n        res = res + i*i*i\n    return res\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    c=0\n    for i in range(n):\n        if i%2==0:\n            c+=i**3\n    return c\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cubesum=0\n    for i in range(2,n):\n        if i%2==0:\n            cubesum+=i**3\n    return cubesum\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(n):\n        if i % 2 == 0:\n            result += i**3\n    return result\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    \n    c=0\n    for i in range(2,n+1,2):\n        c=c+i**3\n    return c\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([i**3 for i in xrange(2,n+1) if i%2==0])\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_tup = ()\n    for item in test_tup:\n        new_tup += (item,)\n    return new_tup\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(map(str,test_tup))\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    res = ''\n    for i in test_tup:\n        res = res + str(i) + ','\n    res = res[:-1]\n    return res\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated = \"\"\n    for t in test_tup:\n        concatenated += t\n    return concatenated\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    tup = ()\n    for i in test_tup:\n        tup += (i, ',')\n    return tup[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    res = ''\n    for i in range(len(test_tup)):\n        res += str(test_tup[i]) + delimiter\n    return res[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    res = ''\n    for elem in test_tup:\n        res = res + elem + ','\n    res = res[:-1]\n    return res\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    \n    return '-'.join(test_tup)\n    \n    "
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    l=[]\n    s=0\n    for i in range(1,n+1):\n        l.append(i**3)\n        s=s+l[i-1]\n    avg=s/len(l)\n    return avg\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return ((1 + n) / 2) * n ** 3\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    l=[]\n    for i in range(n):\n        l.append(i**3)\n    return sum(l)/n\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # pass\n    i = 1\n    summation = 0\n    while i <= n:\n        summation = summation + i**3\n        i += 1\n    return summation / n\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    # Formula to find the average of cubes of first n natural numbers is given as follows:\n    # (C1*C1)*(C2*C2)*...*(Cn*Cn) = (1/n)*(C1*C2*...*Cn)\n    # Since the result is in floating point, we need to convert it into integer by integer division.\n    # This is achieved by using Python's 'int' function to convert floating point numbers into integers.\n    # An example of this conversion is given as follows:\n    # int(10.8) = 10\n    # int(-10.8) = -10\n    # int(-0.5) = -1\n    # int(1.5) = 2\n    # int(-1.5) = -2\n    # int(0) = 0\n    # so, we need to convert the result of the following mathematical expression into an integer.\n    # Now, let's calculate the average of the cubes of the first n natural numbers.\n    # The idea here is to calculate the result of n*(n+1)*(n+2)*...*(n+n) \n    # and divide it by n**3.\n    # Hence, we get the result as follows:\n    # (n**3)*(n**2)*(n**1)*(n**0) = (n**3)*(n**2)*(n)*1\n    # (n**3)*(n**2)*(n)*1 = (n**3)*(n**2)*(n+1)\n    # (n**3)*(n**2)*(n+1) = (n**3)*(n**2) + (n**3)*(n)\n    # (n**3)*(n**2) + (n**3)*(n) = (n**3)*(n**2) + (n**3)*(n+1)\n    # (n**3)*(n**2) + (n**3)*(n+1) - (n**3)*(n) = (n**3)*(n**2)\n    # (n**3)*(n**2) = (n**3)*(n**2) + (n**3)*(n-1)\n    # (n**3)*(n**2) + (n**3)*(n-1) - (n**3)*(n) = (n**3)*(n**2)\n    # (n**3)*(n**2) = (n**3)*(n**2) + (n**3)*(n-1) - (n**3)*(n-2)\n    # (n**3)*(n**2) + (n**3)*(n-1) - (n**3)*(n-2) - (n**3)*(n-3)\n    # (n**3)*(n**2) + (n**3)*(n-1) - (n**3)*(n-2) - (n**3)*(n-3) - (n**3)*(n-4)\n    # (n**3)*(n**2) + (n**3)*(n-1) - (n**3)*(n-2) - (n**3)*(n-3) - (n**3)*(n-4) - (n**3)*(n-5)\n    # (n**3)*(n**2) + (n**3)*(n-1) - (n**3)*(n-2) - (n**3)*(n-3) - (n**3)*(n-4) - (n**3)*(n-5) - (n**3)*(n-6)\n    # (n**3)*(n**2) + (n**3)*(n-1) - (n**3)*(n-2) - (n**3)*(n-3) - (n**3)*(n-4) - (n**3)*(n-5) - (n**3)*(n-6) - (n**3)*(n-7)\n    # (n**3)*(n**2) + (n**3)*(n-1) - (n**3)*(n-2) - (n**3)*(n-3) - (n**3)*(n-4) - (n**3)*(n-5) - (n**3)*(n-6) - (n**3)*(n-7) - (n**3)*(n-8)\n    # (n**3)*(n**2) + (n**3)*(n-1) - (n**3)*(n-2) - (n**3)*(n-3) - (n**3)*(n-4) - (n**3)*(n-5) - (n**3)*(n-6) - (n**3)*(n-7) - (n**3)*(n-8) - (n**3)*(n-9)\n    # (n**3)*(n**2) + (n**3)*(n-1) - (n**3)*(n-2) - (n**3)*(n-3) - (n**3)*(n-4) - (n**3)*(n-5) - (n**3)*(n-6) - (n**3)*(n-7) - (n**3)*(n-8) - (n**3)*(n-9) - (n**3)*(n-10)\n    # (n**3)*(n**2) + (n**3)*(n-1) - (n**3)*(n-2) - (n**3)*(n-3) - (n**3)*(n-4) - (n**3)*(n-5) - (n**3)*(n-6) - (n**3)*(n-7) - (n**3)*(n-8) - (n**3)*(n-9) - (n**3)*(n-10) - (n**3)*(n-11)\n    # (n**3)*(n**2) + (n**3)*(n-1) - (n**3)*(n-2) - (n**3)*(n-3) - (n**3)*(n-4) - (n**3)*(n-5) - (n**3)*(n-6) - (n**3)*(n-7) - (n**3)*(n-8) - (n**3)*(n-9) - (n**3)*(n-10) - (n**3)*(n-11) - (n**3)*(n-12)\n    # (n**3)*(n**2) + (n**3)*(n-1) - (n**3)*(n-2) - (n**3)*(n-3) - (n**3)*(n-4) - (n**3)*(n-5) - (n**3)*(n-6) - (n**3)*(n-7) - (n**3)*(n-8) - (n**3)*(n-9) - (n**3)*(n-10) - (n**3)*(n-11) - (n**3)*(n-12) - (n**3)*(n-13)\n    # (n**3)*(n**2) + (n**3)*(n-1) - (n**3)*(n-2) - (n**3)*(n-3) - (n**3)*(n-4) - (n**3)*(n-5) - (n**3)*(n-6) - (n**3)*(n-7) - (n**3)*(n-8) - (n**3)*(n-9) - (n**3)*(n-10) - (n**3)*(n-11) - (n**3)*(n-12) - (n**3)*(n-13) - (n**3)*(n-14)\n    # (n**3)*(n**2) + (n**3)*(n-1) - (n**3)*(n-2) - (n**3)*(n-3) - (n**3)*(n-4) - (n**3)*(n-5) - (n**3)*(n-6) - (n**3)*(n-7) - (n**3)*(n-8) - (n**3)*(n-9) - (n**3)*(n-10) - "
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #solution 1\n    c=0\n    for i in range(1,n+1):\n        c+=i**3\n    print(c/n)\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n**3/4\n        \ndef find_Average_Of_Cube_Recursion(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n**3/4 + find_Average_Of_Cube_Recursion(n-1)\n        \ndef find_Average_Of_Cube_Recursion_2(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n**3/4 + find_Average_Of_Cube_Recursion_2(n-1)\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    result = 0\n    if n > 0:\n        for x in range(n):\n            result = result + (x**3)\n        average = result / n\n        return average\n    else:\n        print(\"Enter a natural number greater than 0\")\n        "
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    avg = 0\n    for i in range(n):\n        avg = avg + i**3\n    avg = avg/n\n    return avg\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        total = total + i**3\n    return float(total)/n\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    new_list = []\n    for ele in test_tuple:\n        new_list.append(ele[-1])\n    return new_list\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1:len(test_tuple)]\n    "
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(str(i)[-1] for i in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    test_list = []\n    for x in test_tuple:\n        test_list.append(x[-1])\n    return tuple(test_list)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return (test_tuple[-1],)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    extracted = tuple(map(lambda x:x[-1],test_tuple))\n    return extracted\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([sub[-1] for sub in test_tuple])\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    \n    # using the map() and lambda function\n    # return map(lambda x: x[-1], test_tuple)\n    \n    # using list comprehension\n    return [x[-1] for x in test_tuple]\n    \nif __name__ == \"__main__\":\n    test_tuple = ('hello', 'world', 'python')\n    print \"The original tuple is: \", test_tuple\n    print \"The rear index element of each tuple is: \", extract_rear(test_tuple"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return (i[-1] for i in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(test_tuple[i][-1] for i in range(len(test_tuple)))\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for elem in list1: \n        if elem == x: \n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if x in list1: \n        return list1.count(x)\n    else: \n        return 0\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    index = 0\n    count = 0\n    for i in list1:\n        if i == x:\n            count += 1\n    return count\n    "
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    list2 = list1[:]\n    list2.sort()\n    \n    k = 0\n    for i in range(len(list2)-1):\n        if list2[i] < x < list2[i+1]:\n            k += 1\n    return k\n    \n    \ndef find_missing_element(list1, list2):\n    '''\n    Write a function to find the missing element in the second list\n    based on the first list. For example, if the first list contains\n    [1,3,4,5] and the second list contains [4,2,6,1], then the function should\n    return 5.\n    '''\n    list2.sort()\n    for i in list1:\n        if i in list2:\n            list2.remove(i)\n    return list2[0]\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for element in list1:\n        if element == x:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    res = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            res += 1\n    return res\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    i = 0\n    for element in list1:\n        if element == x:\n            i += 1\n    return i\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x % 2 == 1, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_nums = []\n    for i in nums:\n        if i % 2 == 0:\n            new_nums.append(i)\n    return new_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for i in nums:\n        if i % 2!= 0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda num: num % 2!= 0, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x % 2]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x % 2 == 1]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x % 2!= 0, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnums = []\n    for num in nums:\n        if num % 2 == 0:\n            oddnums.append(num)\n    return oddnums\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        date_split = dt.split(\"-\")\n        date_split[0] = int(date_split[0])\n        date_split[1] = int(date_split[1])\n        date_split[2] = int(date_split[2])\n        date_format = str(date_split[2])+\"-\"+str(date_split[1])+\"-\"+str(date_split[0])\n        return date_format\n    except ValueError:\n        return \"Not a date format\"\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[6:]+'-'+dt[3:5]+'-'+dt[0:2]\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new_date = re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})',r'\\3-\\2-\\1',dt)\n    return new_date\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if len(dt)!= 10:\n        raise ValueError(\"Input length not valid\")\n    dt = dt.split(\"-\")\n    if len(dt) == 3:\n        dt = [int(i) for i in dt]\n        return \"{:02d}-{:02d}-{:04d}\".format(dt[1],dt[0],dt[2])\n    else:\n        raise ValueError(\"Input length not valid\")\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    date = '{}-{}-{}'.format(dt[1],dt[2],dt[0])\n    return date\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    year, month, day = dt.split('-')\n    return '{}-{}-{}'.format(day, month, year)\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    a,b,c = dt.split('-')\n    return c+'-'+b+'-'+a\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    dd = dt[0]\n    mm = dt[1]\n    yy = dt[2]\n    return '{0}-{1}-{2}'.format(dd, mm, yy)\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    day, month, year = (int(i) for i in dt.split('-'))\n    return '{:02d}-{:02d}-{}'.format(day, month, year)\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[6:]+'-'+dt[3:5]+'-'+dt[0:2]\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    h = len(my_list) // 2\n    while h > 0:\n        for i in range(h, len(my_list)):\n            j = i\n            while j >= h and my_list[j - h] > my_list[j]:\n                my_list[j - h], my_list[j] = my_list[j], my_list[j - h]\n                j -= h\n        h //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    n = len(my_list)\n    gap = n/2\n    while gap > 0:\n        for i in range(gap,n):\n            current = my_list[i]\n            j = i\n            while j >= gap and current < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = current\n        gap = gap/2\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    sublistcount = len(my_list)//2\n    while sublistcount > 0:\n        for start in range(sublistcount):\n            gapInsertionSort(my_list,start,sublistcount)\n        sublistcount = sublistcount//2\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if len(my_list) == 0:\n        return []\n    if len(my_list) == 1:\n        return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    l = len(my_list)\n    h = int(l/2)\n    while h>0:\n        for i in range(h,l):\n            temp = my_list[i]\n            j = i\n            while j>=h and my_list[j-h]>temp:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = temp\n        h = int(h/2)\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    sublist_size = len(my_list) // 2\n    while sublist_size > 0:\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    h = len(my_list)//2\n    while h > 0:\n        for i in range(h,len(my_list)):\n            for j in range(i,0,-h):\n                if my_list[j-h] > my_list[j]:\n                    my_list[j-h],my_list[j] = my_list[j],my_list[j-h]\n        h = h//2\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple([x*y for x,y in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    for a, b in zip(test_tup1, test_tup2):\n        yield a, b\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    new_tup1 = ()\n    new_tup2 = ()\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return [(a,b) for a,b in zip(test_tup1,test_tup2)]\n    else:\n        return None\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple([x and y for x, y in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return zip(test_tup1, test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(i & j for i, j in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    a,b = zip(*test_tup1)\n    c,d = zip(*test_tup2)\n    return (a,b),(c,d)\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return [(a,b) for a,b in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (b**2 - 4 * a * c)**(1/2)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (b ** 2 - 4 * a * c) / (2 * a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # your code here\n    return None\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = ((b**2) - (4*a*c))**0.5\n    y = (-b + x) / (2*a)\n    return y\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b + (b**2 - 4 * a * c) ** 0.5) / (2 * a)\n    \n    \ndef hyperbola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a hyperbola.\n    '''\n    return ((-b + (b**2 - 4 * a * c) ** 0.5) / (2 * a))\n    \n    \ndef quadratic_equation(a, b, c):\n    '''\n    Write a function to find the solution to a quadratic equation.\n    '''\n    d = b**2 - 4 * a * c\n    if d < 0:\n        return None\n    elif d == 0:\n        return (-b + (b**2 - 4 * a * c) ** 0.5) / (2 * a)\n    else:\n        return (-b + (b**2 - 4 * a * c) ** 0.5) / (2 * a), (-b - (b**2 - 4 * a * c) ** 0.5) / (2 * a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return None\n    x = (-b + (b**2 - 4*a*c)**0.5) / 2*a\n    return x\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (c*b**2 - 4*a*c) / (4*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # directrix = -(b**2 / 4*a)\n    directrix = (-b + (b**2 - 4*a*c)**0.5) / (2 * a)\n    return directrix\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = b**2 - (4 * a * c)\n    if x < 0: \n        return None \n    else:\n        y = -(b + (x**(1/2))) / (2 * a)\n        return y\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b + (b**2 - 4 * a * c) **.5) / (2 * a)\n    \ndef parabola_intercept(a, b, c, x0): \n    '''\n    Write a function to find the intercept of a parabola at point x0.\n    '''\n    return -(b ** 2 - 4 * a * c) / (4 * a) + x0\n    \ndef parabola_intercept_b(a, b, c, x0, y0): \n    '''\n    Write a function to find the intercept of a parabola at point (x0, y0).\n    '''\n    return -(b ** 2 - 4 * a * c) / (4 * a) + x0 * (a * a + 1) + y0 * a\n    \ndef parabola_intercept_c(a, b, c, x0, y0): \n    '''\n    Write a function to find the intercept of a parabola at point (x0, y0).\n    '''\n    return -(b ** 2 - 4 * a * c) / (4 * a) + x0 * a + y0 * (a * a + 1)\n    \ndef parabola_intercept_d(a, b, c, x0, y0): \n    '''\n    Write a function to find the intercept of a parabola at point (x0, y0).\n    '''\n    return -(b ** 2 - 4 * a * c) / (4 * a) + x0 * a + y0 * (a * a + 1) + c\n    \ndef parabola_intercept_e(a, b, c, x0, y0): \n    '''\n    Write a function to find the intercept of a parabola at point (x0, y0).\n    '''\n    return -(b ** 2 - 4 * a * c) / (4 * a) + x0 * a + y0 * (a * a + 1) + c * x0 * x0\n    \ndef point_on_circle(a, b, c, x0, y0): \n    '''\n    Write a function to find the coordinates of a point on the circle with center (x0, y0) and radius a.\n    '''\n    return (x0 - a) / (a * a + 1) + y0 * a\n    \ndef point_on_circle_b(a, b, c, x0, y0): \n    '''\n    Write a function to find the coordinates of a point on the circle with center (x0, y0) and radius a.\n    '''\n    return (x0 - a) / (a * a + 1) + y0 * a + c\n    \ndef point_on_circle_c(a, b, c, x0, y0): \n    '''\n    Write a function to find the coordinates of a point on the circle with center (x0, y0) and radius a.\n    '''\n    return (x0 - a) / (a * a + 1) + y0 * a + c * x0 * x0\n    \ndef point_on_circle_d(a, b, c, x0, y0): \n    '''\n    Write a function to find the coordinates of a point on the circle with center (x0, y0) and radius a.\n    '''\n    return (x0 - a) / (a * a + 1) + y0 * a + c * x0 * x0 + c * x0\n    \ndef point_on_circle_e(a, b, c, x0, y0): \n    '''\n    Write a function to find the coordinates of a point on the circle with center (x0, y0) and radius a.\n    '''\n    return (x0 - a) / (a * a + 1) + y0 * a + c * x0 * x0 + c * x0 + c\n    \ndef circle_inverse_law_of_motion(a, b, c): \n    '''\n    Write a function to find the distance travelled along the circle if the point is (0, 0).\n    '''\n    return (b**2 - 4 * a * c) **.5 / 2 / a\n    \ndef circle_inverse_law_of_motion_b(a, b, c): \n    '''\n    Write a function to find the distance travelled along the circle if the point is (0, 0).\n    '''\n    return (b**2 - 4 * a * c) **.5 / 2 / a + c\n    \ndef circle_inverse_law_of_motion_c(a, b, c): \n    '''\n    Write a function to find the distance travelled along the circle if the point is (0, 0).\n    '''\n    return (b**2 - 4 * a * c) **.5 / 2 / a + c * x0 * x0\n    \ndef circle_inverse_law_of_motion_d(a, b, c): \n    '''\n    Write a function to find the distance travelled along the circle if the point is (0, 0).\n    '''\n    return (b**2 - 4 * a * c) **.5 / 2 / a + c * x0 * x0 + c * x0\n    \ndef circle_inverse_law_of_motion_e(a, b, c): \n    '''\n    Write a function to find the distance travelled along the circle if the point is (0, 0).\n    '''\n    return (b**2 - 4 * a * c) **.5 / 2 / a + c * x0 * x0 + c * x0 + c * x0 * x0\n    \ndef circle_inverse_law_of_motion_f(a, b, c): \n    '''\n    Write a function to find the distance travelled along the circle if the point is (0, 0).\n    '''\n    return (b**2 - 4 * a * c) **.5 / 2 / a + c * x0 * x0 + c * x0 + c * x0 * x0 + c * x0 * x0 * x0\n    \ndef circle_inverse_law_of_motion_g(a, b, c): \n    '''\n    Write a function to find the distance travelled along the circle if the point is (0, 0).\n    '''\n    return (b**2 - 4 * a * c) **.5 / 2 / a + c * x0 * x0 + c * x0 + c * x0 * x0 + c * x0 * x0 * x0 + c * x0 * x0 * x0 * x0\n    \ndef circle_inverse_law_of_motion_h(a, b, c): \n    '''\n    Write a function to find the distance travelled along the circle if the point is (0, 0).\n    '''\n    return (b**2 - 4 * a * c) **.5 / 2 / a + c * x0 * x0 + c * x0 + c * x0 * x0 + c * x0 * x0 * x0 + c * x0 * x0 * x0 * x0 + c * x0 * x0 * x0 * x0 * x0\n    \ndef circle_inverse_law_of_motion_i(a, b, c): \n    '''\n    Write a function to find the distance travelled along the circle if the point is (0, 0).\n    '''\n    return (b**2 - 4 * a * c) **.5 / 2 / a + c * x0 * x0 + c * x0 + c * x0 * x0 + c * x0 * x0 * x0 + c * x0 * x0 * x0 * x0 + c * x0 * x0 * x0 * x0 * x0 + c * x0 * x0 * x0 * x0 * x0 * x0\n    \ndef circle_inverse_law_of_motion_j(a, b, c): \n    '''\n    Write a function to find the distance travelled along the circle if the point is (0, 0).\n    '''\n    return (b**2 - 4 * a * c) **.5 / 2 / a + c * x0 * x0 + c * x0 + c * x0 * x0 + c * x0 * x0 * x0 + c * x0 * x0 * x0 * x0 + c * x0 * x0 * x"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < len(list2):\n        for x in list1:\n            if x in list2:\n                return True\n    else:\n        for x in list2:\n            if x in list1:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < 1 or len(list2) < 1:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return set(list1).intersection(set(list2))!= set([])\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    list1.sort()\n    list2.sort()\n    if len(list1) > len(list2):\n        l = list1\n        s = list2\n    else:\n        l = list2\n        s = list1\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return any(elem in list1 for elem in list2)\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return bool(set(list1).intersection(set(list2)))\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for num in list1:\n        if num in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1 + base2)/2) * height\n    \ndef median_circumcircle(radius):\n    '''\n    Write a function to find the median length of a circle.\n    '''\n    return radius * (radius + 1) * 0.5\n    \ndef median_rectangle(width,height):\n    '''\n    Write a function to find the median length of a rectangle.\n    '''\n    return width * height\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus.\n    '''\n    return diagonal * (diagonal + 1) * 0.5\n    \ndef median_rhombus(diagonal):\n    '''\n    Write a function to find the median length of a rhombus."
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return height/2\n    \n    \ndef pythagorean_triangle(side1,side2):\n    '''\n    Write a function to find the perimeter of a right triangle\n    using pythagorean theorem.\n    '''\n    return side1**2 + side2**2\n    \ndef square_of_primes(num):\n    '''\n    Write a function to find the square of the sum of the\n    primes of the first n numbers.\n    '''\n    total = 0\n    for i in range(2,num+1):\n        if all(i%j!= 0 for j in range(2,i)):\n            total += i\n    return total**2\n    \ndef counting_primes(num):\n    '''\n    Write a function to count the number of prime numbers\n    between 0 and num.\n    '''\n    return sum(1 for i in range(num+1) if all(i%j!= 0 for j in range(2,i)))\n    \ndef prime_factors(num):\n    '''\n    Write a function to find the prime factors of num.\n    '''\n    factors = []\n    for i in range(2,num+1):\n        if num%i == 0:\n            factors.append(i)\n    return factors\n    \ndef prime_numbers(num):\n    '''\n    Write a function to find the prime numbers between\n    0 and num.\n    '''\n    return [i for i in range(2,num+1) if all(i%j!= 0 for j in range(2,i))]\n    \ndef binomial_coefficient(n,k):\n    '''\n    Write a function to find the binomial coefficient of\n    n and k.\n    '''\n    return (factorial(n)/(factorial(k)*factorial(n-k)))\n    \ndef factors_of_number(num):\n    '''\n    Write a function to find the number of factors of num.\n    '''\n    return sum(1 for i in range(2,num+1) if num%i == 0)\n    \ndef prime_powers(num):\n    '''\n    Write a function to find the number of powers of prime numbers\n    in num.\n    '''\n    return len(prime_factors(num))\n    \ndef is_prime(num):\n    '''\n    Write a function to check if num is prime.\n    '''\n    return all(num%i!= 0 for i in range(2,num))\n    \ndef distinct_prime_factors(num):\n    '''\n    Write a function to find the distinct prime factors of num.\n    '''\n    distinct = []\n    for i in range(2,num+1):\n        if num%i == 0 and all(i%j!= 0 for j in range(2,i)):\n            distinct.append(i)\n    return distinct\n    \ndef prime_sieve(num):\n    '''\n    Write a function to create a sieve of the first num primes.\n    '''\n    sieve = [True for i in range(num+1)]\n    for i in range(2,num+1):\n        if sieve[i]:\n            for j in range(i*2,num+1,i):\n                sieve[j] = False\n    return [i for i in range(2,num+1) if sieve[i]]\n    \ndef factorization_of_number(num):\n    '''\n    Write a function to find the prime factors of num.\n    '''\n    factors = []\n    for i in range(2,num+1):\n        if num%i == 0:\n            factors.append(i)\n    return factors\n    \ndef power_of_primes(num):\n    '''\n    Write a function to find the power of all the prime\n    numbers in num.\n    '''\n    powers = []\n    for i in range(2,num+1):\n        if all(i%j!= 0 for j in range(2,i)):\n            powers.append(i)\n    return powers\n    \ndef all_factors_of_number(num):\n    '''\n    Write a function to find the factors of num.\n    '''\n    factors = []\n    for i in range(2,num+1):\n        if num%i == 0:\n            factors.append(i)\n    return factors\n    \ndef power_of_prime_factors(num):\n    '''\n    Write a function to find the power of prime factors\n    of num.\n    '''\n    powers = []\n    for i in range(2,num+1):\n        if all(i%j!= 0 for j in range(2,i)):\n            powers.append(i)\n    return powers\n    \ndef triangulation_of_point(x,y):\n    '''\n    Write a function to find the number of triangles \n    that contain the point (x,y).\n    '''\n    return (x**2 + y**2)/2\n    \ndef probability_of_triangle(a,b,c):\n    '''\n    Write a function to find the probability of three \n    given sides of a triangle given the length of each side.\n    '''\n    return 1/2*(a*b+b*c+c*a)\n    \ndef _camel_case(name):\n    '''\n    Write a function to camelCase a given name.\n    '''\n    return ''.join(i.capitalize() for i in name.split('_'))\n    \ndef is_ruler(num):\n    '''\n    Write a function to check if num is a ruler.\n    '''\n    return (num%sum(range(1,num+1)) == 0)\n    \ndef prime_ruler(num):\n    '''\n    Write a function to find the prime ruler of num.\n    '''\n    return num+sum(range(1,num))\n    \ndef prime_pair_ruler(num):\n    '''\n    Write a function to find the prime ruler of num.\n    '''\n    return num+sum(range(1,num))+sum(range(2,num+1))\n    \ndef largest_prime_factor(num):\n    '''\n    Write a function to find the largest prime factor of num.\n    '''\n    for i in range(2,num+1):\n        if num%i == 0:\n            if is_prime(i):\n                return i\n    return None\n    \ndef count_prime_pairs(num):\n    '''\n    Write a function to find the number of prime pairs in num.\n    '''\n    return len(distinct_prime_factors(num))\n    \ndef common_prime_factors(num):\n    '''\n    Write a function to find the number of common prime factors\n    of num.\n    '''\n    common = []\n    for i in range(2,num+1):\n        if num%i == 0:\n            if all(i%j!= 0 for j in range(2,i)):\n                common.append(i)\n    return len(common)\n    \ndef sum_of_common_prime_factors(num):\n    '''\n    Write a function to find the sum of common prime factors\n    of num.\n    '''\n    return sum(common_prime_factors(num))\n    \ndef sum_of_prime_factors(num):\n    '''\n    Write a function to find the sum of prime factors of num.\n    '''\n    return sum(prime_factors(num))\n    \ndef sum_of_distinct_prime_factors(num):\n    '''\n    Write a function to find the sum of distinct prime factors\n    of num.\n    '''\n    return sum(distinct_prime_factors(num))\n    \ndef sum_of_distinct_prime_pairs(num):\n    '''\n    Write a function to find the sum of distinct prime pairs\n    of num.\n    '''\n    return len(prime_factors(num))\n    \ndef sum_of_power_of_prime_factors(num):\n    '''\n    Write a function to find the sum of powers of prime factors\n    of num.\n    '''\n    return sum(power_of_prime_factors(num))\n    \ndef sum_of_power_of_distinct_prime_factors(num)"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    total = base1+base2\n    total = total*height\n    total = total/2\n    return total\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2)/2.0 * height\n    \ndef rectangle_height(length,width):\n    '''\n    Write a function to find the height of a rectangle.\n    '''\n    return length * width\n    \ndef rectangle_perimeter(length,width):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2.0 * (length + width)\n    \ndef rectangle_area(length,width):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return length * width\n    \ndef median_circle(radius):\n    '''\n    Write a function to find the median diameter of a circle.\n    '''\n    return radius * 2\n    \ndef rectangle_perimeter(length,width):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2.0 * (length + width)\n    \ndef rectangle_area(length,width):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return length * width\n    \ndef median_circle(radius):\n    '''\n    Write a function to find the median diameter of a circle.\n    '''\n    return radius * 2\n    \ndef rectangle_perimeter(length,width):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2.0 * (length + width)\n    \ndef rectangle_area(length,width):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return length * width\n    \ndef median_circle(radius):\n    '''\n    Write a function to find the median diameter of a circle.\n    '''\n    return radius * 2\n    \ndef circle_area(radius):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return 3.141592654 * radius * radius\n    \ndef circle_perimeter(radius):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    return 2.0 * 3.141592654 * radius\n    \ndef circle_diameter(radius):\n    '''\n    Write a function to find the diameter of a circle.\n    '''\n    return 2.0 * radius\n    \ndef median_rectangle(length,width):\n    '''\n    Write a function to find the median length of a rectangle.\n    '''\n    return (length + width)/2.0\n    \ndef rectangle_height(length,width):\n    '''\n    Write a function to find the height of a rectangle.\n    '''\n    return length * width\n    \ndef rectangle_perimeter(length,width):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2.0 * (length + width)\n    \ndef rectangle_area(length,width):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return length * width\n    \ndef median_rectangle(length,width):\n    '''\n    Write a function to find the median length of a rectangle.\n    '''\n    return (length + width)/2.0\n    \ndef rectangle_height(length,width):\n    '''\n    Write a function to find the height of a rectangle.\n    '''\n    return length * width\n    \ndef rectangle_perimeter(length,width):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2.0 * (length + width)\n    \ndef rectangle_area(length,width):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return length * width\n    \ndef median_rectangle(length,width):\n    '''\n    Write a function to find the median length of a rectangle.\n    '''\n    return (length + width)/2.0\n    \ndef rectangle_height(length,width):\n    '''\n    Write a function to find the height of a rectangle.\n    '''\n    return length * width\n    \ndef rectangle_perimeter(length,width):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2.0 * (length + width)\n    \ndef rectangle_area(length,width):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return length * width\n    \ndef median_rectangle(length,width):\n    '''\n    Write a function to find the median length of a rectangle.\n    '''\n    return (length + width)/2.0\n    \ndef rectangle_height(length,width):\n    '''\n    Write a function to find the height of a rectangle.\n    '''\n    return length * width\n    \ndef rectangle_perimeter(length,width):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2.0 * (length + width)\n    \ndef rectangle_area(length,width):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return length * width\n    \ndef median_rectangle(length,width):\n    '''\n    Write a function to find the median length of a rectangle.\n    '''\n    return (length + width)/2.0\n    \ndef rectangle_height(length,width):\n    '''\n    Write a function to find the height of a rectangle.\n    '''\n    return length * width\n    \ndef rectangle_perimeter(length,width):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2.0 * (length + width)\n    \ndef rectangle_area(length,width):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return length * width\n    \ndef median_rectangle(length,width):\n    '''\n    Write a function to find the median length of a rectangle.\n    '''\n    return (length + width)/2.0\n    \ndef rectangle_height(length,width):\n    '''\n    Write a function to find the height of a rectangle.\n    '''\n    return length * width\n    \ndef rectangle_perimeter(length,width):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2.0 * (length + width)\n    \ndef rectangle_area(length,width):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return length * width\n    \ndef median_rectangle(length,width):\n    '''\n    Write a function to find the median length of a rectangle.\n    '''\n    return (length + width)/2.0\n    \ndef rectangle_height(length,width):\n    '''\n    Write a function to find the height of a rectangle.\n    '''\n    return length * width\n    \ndef rectangle_perimeter(length,width):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2.0 * (length + width)\n    \ndef rectangle_area(length,width):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return length * width\n    \ndef median_rectangle(length,width):\n    '''\n    Write a function to find the median length of a rectangle.\n    '''\n    return (length + width)/2.0\n    \ndef rectangle_height(length,width):\n    '''\n    Write a function to find the height of a rectangle.\n    '''\n    return length * width\n    \ndef rectangle_perimeter(length,width):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2.0 * (length + width)\n    \ndef rectangle_area(length,width):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return length * width\n    \ndef median_rectangle(length,width):\n    '''\n    Write a function to find the median length of a rectangle.\n    '''\n    return (length + width)/2.0\n    \ndef rectangle_height(length,width):\n    '''\n    Write a function to find the height of a rectangle.\n    '''\n    return length * width\n    \ndef rectangle_perimeter(lengt"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = base1*height/2 + base2*height/2\n    return area\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 1/2*(base1+base2)*height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return.5*(base1+base2)*height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2) / 2\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 0.5 * (base1+base2) * height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr[-1] < number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[-1]:\n        return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if number > arr[i]:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if number > arr[i]:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[0]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    arr.sort()\n    print(arr)\n    if number > arr[-1]:\n        print(number, \"is greater than\", arr[-1])\n    else:\n        print(number, \"is not greater than\", arr[-1])\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr[0] < number:\n        return True\n    for i in range(1,len(arr)):\n        if arr[i] <= number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return True if arr[0] < number else False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    flag = True\n    for ele in arr:\n        if ele <= number:\n            flag = False\n    return flag\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pat = 'a+b'\n    match = re.search(pat, text)\n    if match:\n        print 'First a: %s' % match.group(0)\n        print 'Last b: %s' % match.group(1)\n        print 'Full match: %s' % match.group()\n    else:\n        print 'No match'\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    m = re.match(r'a.*?b',text)\n    return m\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'a[^b]+b',text)\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # Write your code here.\n    pattern = \"a[b]+\"\n    match = re.match(pattern,text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    result = re.search(pattern, text)\n    print(result)\n    return result\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a[b]+')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\ndef text_match_all(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a[b]+')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\ndef text_match_zero(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a[b]*')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a[b]+')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\ndef text_match_one_or_none(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a[b]*')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\ndef text_match_one_or_more_none(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a[b]*')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\ndef text_match_zero_or_one(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or one b's.\n    '''\n    pattern = re.compile(r'a[b]?')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\ndef text_match_zero_or_one_none(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or one b's.\n    '''\n    pattern = re.compile(r'a[b]?')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\ndef text_match_zero_or_one_or_more(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or one b's.\n    '''\n    pattern = re.compile(r'a[b]?')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\ndef text_match_zero_or_one_or_more_none(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or one b's.\n    '''\n    pattern = re.compile(r'a[b]?')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\ndef text_match_one_and_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a[b]{2}')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\ndef text_match_one_and_one_none(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a[b]{2}')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\ndef text_match_one_and_one_or_more(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a[b]{2}')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\ndef text_match_one_and_one_or_more_none(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a[b]{2}')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\ndef text_match_one_and_one_or_more_none(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a[b]{2}')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\ndef text_match_one_and_one_or_more_none(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a[b]{2}')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\ndef text_match_one_and_one_or_more(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a[b]{2}')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\ndef text_match_one_and_one_or_more_none(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a[b]{2}')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\ndef text_match_one_and_one_or_more_none(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a[b]{2}')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\ndef text_match_one_and_one_or_more_none(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a[b]{2}')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\ndef text_match_one_and_one_or_more(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a[b]{2}')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\ndef text_match_one_and_one_or_more_none(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a[b]{2}')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\ndef text_match_one_and_one_or_more_none(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a[b]{2}')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\ndef text"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    if re.search(pattern, text):\n        return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a+[b]', text)\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    pattern = re.compile('ab+')\n    match = pattern.search(text)\n    if match:\n        print 'Match found: ', match.group()\n    else:\n        print 'Match not found'\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    digit = 1\n    while (n / digit) > 10 :\n        digit *= 10\n    return n / digit\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n <= 0:\n        return None\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    else :\n        return last_Digit(n // 10)\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if (n < 10) :\n        return n\n    else :\n        n = n%10\n        return last_Digit(n)\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    while n>0 :\n        n = n//10\n    return n\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    \n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n%10\n    return last_digit\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            list1[i] = -list1[i]\n    return list1\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    ans=[]\n    for i in list1:\n        if i<0:\n            ans.append(i)\n    return ans\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = [i for i in list1 if i < 0]\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # first, we need to find the negative numbers in the list.\n    # In other words, the function will return the values that are negative.\n    # The solution is simple. We can iterate over the list and find the values that are negative.\n    # If the value is positive, we can just ignore it.\n    # The negative numbers in the list are the values that are negative.\n    \n    neg_nos = []\n    for i in list1:\n        if i < 0:\n            neg_nos.append(i)\n    return neg_nos\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # for item in list1:\n    #     if item < 0:\n    #         print item\n    return [item for item in list1 if item < 0]\nprint neg_nos([5,6,7,8,9,0,1,2,3,-10])\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            str2 += str1[i]\n    return str2\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in range(0, len(str1)):\n        if str1[i]%2!= 0:\n            str1 = str1.replace(str1[i], \"\")\n    return str1\nprint remove_odd(\"peter\")\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    list1 = list(str1)\n    list2 = []\n    for i in list1:\n        if ord(i)%2==0:\n            list2.append(i)\n    list2.reverse()\n    str2 = ''\n    for i in list2:\n        str2 = str2+i\n    return str2\n    \ndef reverse_complement(str1):\n    '''\n    Write a function to reverse and complement a DNA sequence.\n    '''\n    str2 = ''\n    for i in str1:\n        if i == 'A':\n            str2 = 'T'+str2\n        elif i == 'T':\n            str2 = 'A'+str2\n        elif i == 'C':\n            str2 = 'G'+str2\n        elif i == 'G':\n            str2 = 'C'+str2\n    return str2\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join([i for i in str1 if i.isalpha()])\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Note: You can use list,string.join(), but for this problem, you should use lambda function instead.\n    return ''.join(filter(lambda x: not ord(x)%2,str1))\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    list1 = [str1[i] for i in range(len(str1)) if i%2==0]\n    return ''.join(list1)\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    a = ''\n    for i in str1:\n        if ord(i) % 2 == 0:\n            a += i\n    return a\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if str1[-1] == 'O':\n        return str1[:len(str1)-1]\n    else:\n        return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    count = 0\n    str2 = \"\"\n    for i in str1:\n        if count % 2 == 0:\n            str2 += i\n        count += 1\n    return str2\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if len(str1) == 0:\n        return str1\n    else:\n        if len(str1) % 2 == 0:\n            return remove_odd(str1[0:len(str1)//2]) + remove_odd(str1[len(str1)//2:])\n        else:\n            return remove_odd(str1[0:len(str1)//2]) + remove_odd(str1[len(str1)//2+1:])\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    result = 0\n    for i in test_list:\n        for j in test_list:\n            if i[0] < j[0] and i[1] < j[1]:\n                result += 1\n            if i[0] > j[0] and i[1] > j[1]:\n                result += 1\n    return result\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pass\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return sum(x > y for x, y in test_list)\n    \n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in xrange(len(test_list)):\n        for j in xrange(i+1,len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pairs = 0\n    for idx, item1 in enumerate(test_list):\n        for item2 in test_list[idx + 1:]:\n            if item1 > item2:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pass\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for x in range(len(test_list)):\n        for y in range(len(test_list)):\n            if x < y:\n                if (test_list[x], test_list[y]) in test_list:\n                    count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    d = {}\n    count = 0\n    for x, y in test_list:\n        if (x, y) in d:\n            count += d[(x, y)]\n        if (y, x) in d:\n            count += d[(y, x)]\n        d[(x, y)] = d.get((x, y), 0) + 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    total = 0\n    for item in test_list:\n        total += count_bidirectional_recursive(item, test_list)\n    return total\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(0, len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str,L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return None\n    elif len(L) == 1:\n        return L[0]\n    else:\n        return L[0] + (multiple_to_single(L[1:]))\n    \n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return None\n    elif len(L) == 1:\n        return L[0]\n    else:\n        return int(''.join([str(e) for e in L]))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    def merge(L):\n        '''\n        Write a function to merge two lists into one.\n        '''\n        return [x for y in L for x in y]\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(L))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str,L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # check len(L)\n    if len(L) == 0:\n        return 0\n    elif len(L) == 1:\n        return L[0]\n    else:\n        result = 0\n        for i in range(len(L)):\n            result += L[i] * 10**(len(L)-1-i)\n        return result\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 1:\n        return L[0]\n    else:\n        return L[0] + multiple_to_single(L[1:])\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 1:\n        return L[0]\n    return int(\"\".join(str(x) for x in L))\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # print(text)\n    m=re.search(r'\\b(?:in|of|at|by|to|in|on|about|for|the|into|of|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|by|in|at|for|the|of|on|about|for|the|from|b"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    try:\n        #input_sentence = 'Mr. Tennant is a hard-working coder. He is a genius'\n        regex = '([a-zA-z]+)([\\d]+)([a-zA-z]+)'\n        match = re.findall(regex, text)\n        print(match)\n        for i in range(0,len(match)):\n            print('(',match[i][1],',',match[i][2],')')\n    except Exception as e:\n        print(e)\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # pattern = r\"^(.*?)(\\w+?)(\\s?)(\\w+?)$\"\n    # match = re.match(pattern, text)\n    # if match:\n    #     if len(match.group()) == 1:\n    #         return 0, 1, 2, 3\n    #     else:\n    #         return match.start(1), match.end(2), match.start(3), match.end(3)\n    # else:\n    #     return 0, 1, 2, 3\n    #     return 0, 1, 2, 3\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb = re.findall(r'\\w+ly', text)\n    positions = []\n    for i in adverb:\n        positions.append(text.find(i))\n    return positions\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pos=[]\n    for i,j in enumerate(text):\n        if j=='adverb':\n            pos.append(i)\n    return pos\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    regex = re.compile(r'\\s*(\\S*(?=\\w*\\b(?:adverb|present)\\b|\\b(?=\\w*\\b(?:adverb|past)\\b|\\b(?=\\w*\\b(?:adverb|present|past)\\b)\\s+))|(?<=\\w*\\b(?:adverb|present)\\b\\s+)|(?<=\\w*\\b(?:adverb|past)\\b\\s+)|(?<=\\w*\\b(?:adverb|present|past)\\b\\s+\\w*\\b))\\s*', re.IGNORECASE)\n    regex2 = re.compile(r'((?<=\\w*\\b(?:adverb|present)\\b\\s+)|(?<=\\w*\\b(?:adverb|past)\\b\\s+)|(?<=\\w*\\b(?:adverb|present|past)\\b\\s+\\w*\\b)|(?<=\\w*\\b(?:adverb|present|past)\\b\\s+\\w*\\b\\s+))\\s*\\w*\\b', re.IGNORECASE)\n    adverb_list = regex.findall(text)\n    for pos in adverb_list:\n        if pos:\n            if pos == 'adverb':\n                text = re.sub(regex2, '\\g<1>', text)\n            else:\n                text = re.sub(regex2, '\\g<1>\\g<2>', text)\n    return text\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    positions = []\n    for match in re.finditer(r'\\w+ly', text):\n        positions.append((match.start(), match.end()))\n    return positions\ndef split_sentences(text):\n    '''\n    Write a function to split a given text into sentences.\n    '''\n    return re.split(r'[.!?]', text)\ndef is_a_full_stop(word, text):\n    '''\n    Write a function to check if a word is a full stop.\n    '''\n    return word == '.'\ndef find_first_word(text):\n    '''\n    Write a function to find the first word of a text.\n    '''\n    return re.split(r'\\s', text)[0]\ndef is_a_question_mark(word, text):\n    '''\n    Write a function to check if a word is a question mark.\n    '''\n    return word == '?'\ndef find_second_word(text):\n    '''\n    Write a function to find the second word of a text.\n    '''\n    return re.split(r'\\s', text)[1]\ndef is_a_exclamation_mark(word, text):\n    '''\n    Write a function to check if a word is an exclamation mark.\n    '''\n    return word == '!'\ndef find_third_word(text):\n    '''\n    Write a function to find the third word of a text.\n    '''\n    return re.split(r'\\s', text)[2]\ndef find_final_word(text):\n    '''\n    Write a function to find the final word of a text.\n    '''\n    return re.split(r'\\s', text)[-1]\ndef replace_word(word, text, index):\n    '''\n    Write a function to replace a word in a given text.\n    '''\n    return text.replace(word, index)\ndef find_word_position(text, word):\n    '''\n    Write a function to find the position of a word in a given text.\n    '''\n    return re.split(r'\\s', text).index(word)\ndef replace_words(text, indexes, words):\n    '''\n    Write a function to replace all the words in a given text with the corresponding word from the given word list.\n    '''\n    index = 0\n    for index in indexes:\n        text = text.replace(index, words[index])\n    return text\ndef filter_adverbs(text):\n    '''\n    Write a function to filter out all the adverbs from a given text.\n    '''\n    return re.findall(r'\\w+ly', text)\ndef filter_questions(text):\n    '''\n    Write a function to filter out all the question marks from a given text.\n    '''\n    return re.findall(r'\\w+', text)\ndef filter_exclamations(text):\n    '''\n    Write a function to filter out all the exclamations from a given text.\n    '''\n    return re.findall(r'\\w+', text)\ndef filter_full_stops(text):\n    '''\n    Write a function to filter out all the full stops from a given text.\n    '''\n    return re.findall(r'\\w+', text)\ndef find_all_adverbs(text):\n    '''\n    Write a function to find all the adverbs in a given text.\n    '''\n    return re.findall(r'\\w+ly', text)\ndef find_all_question_marks(text):\n    '''\n    Write a function to find all the question marks in a given text.\n    '''\n    return re.findall(r'\\w+', text)\ndef find_all_exclamations(text):\n    '''\n    Write a function to find all the exclamations in a given text.\n    '''\n    return re.findall(r'\\w+', text)\ndef find_all_full_stops(text):\n    '''\n    Write a function to find all the full stops in a given text.\n    '''\n    return re.findall(r'\\w+', text)\ndef find_nth_word(text, word, n):\n    '''\n    Write a function to find the nth word from a given text.\n    '''\n    return re.split(r'\\s', text)[n]\ndef filter_non_letters(text):\n    '''\n    Write a function to filter out all the non-letters from a given text.\n    '''\n    return re.findall(r'\\w+', text)\ndef get_first_word(text):\n    '''\n    Write a function to get the first word in a text.\n    '''\n    return re.split(r'\\s', text)[0]\ndef get_second_word(text):\n    '''\n    Write a function to get the second word in a text.\n    '''\n    return re.split(r'\\s', text)[1]\ndef get_third_word(text):\n    '''\n    Write a function to get the third word in a text.\n    '''\n    return re.split(r'\\s', text)[2]\ndef get_final_word(text):\n    '''\n    Write a function to get the final word in a text.\n    '''\n    return re.split(r'\\s', text)[-1]\ndef get_second_last_word(text):\n    '''\n    Write a function to get the second last word in a text.\n    '''\n    return re.split(r'\\s', text)[-2]\ndef get_second_to_last_word(text):\n    '''\n    Write a function to get the second to last word in a text.\n    '''\n    return re.split(r'\\s', text)[-3]\ndef get_first_to_last_word(text):\n    '''\n    Write a function to get the first to last word in a text.\n    '''\n    return re.split(r'\\s', text)[-1]\ndef get_last_word(text):\n    '''\n    Write a function to get the last word in a text.\n    '''\n    return re.split(r'\\s', text)[-1]\ndef get_nth_word(text, n):\n    '''\n    Write a function to get the nth word in a text.\n    '''\n    return re.split(r'\\s', text)[n]\ndef find_all_words(text):\n    '''\n    Write a function to find all the words in a text.\n    '''\n    return re.findall(r'\\w+', text)\ndef get_last_word_with_position(text):\n    '''\n    Write a function to get the last word and its position in a text.\n    '''\n    return re.split(r'\\s', text)[-1], re.split(r'\\s', text)[-1]\ndef replace_words(text, indexes, words):\n    '''\n    Write a function to replace all the words in a given text with the corresponding word from the given word list.\n    '''\n    index = 0\n    for index in indexes:\n        text = text.replace(index, words[index])\n    return text\ndef get_first_word_with_position(text):\n    '''\n    Write a function to get the first word and its position in a text.\n    '''\n    return re.split(r'\\s', text)[0], re.split(r'\\s', text)[0]\ndef get_last_word_with_position(text):\n    '''\n    Write a function to get the last word and its position in a text.\n    '''\n    return re.split(r'\\s', text)[-1], re.split(r'\\s', text)[-1]\ndef get_nth_word_with_position(text, n):\n    '''\n    Write a function to get the nth word and its position in a text.\n    '''\n    return re.split(r'\\s', text)[n], re.split(r'\\s', text)[n]\ndef get_first_letter(text):\n    '''\n    Write a function to get the first letter of a text.\n    ''"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = re.findall(r'adverb', text)\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    positions = []\n    if text:\n        for word in text.split():\n            if word.lower() in ['and', 'or', 'but','so', 'yet','so', 'nor','very','very', 'too', 'to', 'if', 'unless', 'except','so', 'either', 'or', 'and', 'in', 'nor', 'about', 'thereupon', 'than','so', 'by', 'for', 'at', 'it', 'if', 'when','so', 'at', 'to', 'of', 'from', 'up', 'there', 'for', 'yet', 'in', 'when', 'where', 'whilst', 'as', 'in', 'though', 'until', 'a', 'an', 'when', 'where', 'be', 'when', 'or', 'would', 'thereby', 'to', 'but', 'however', 'otherwise', 'how', 'if', 'whenever', 'thereafter','moreover', 'however', 'where', 'now', 'how', 'after', 'while', 'therefore', 'however', 'hence', 'thereby','meanwhile', 'however', 'thereof', 'whereas', 'thereupon', 'how', 'where', 'for','since', 'whereas','so', 'then', 'after', 'from', 'when', 'where', 'although', 'as', 'other', 'over', 'whether', 'whenever', 'wherein', 'whereas', 'wherever', 'while', 'how', 'however', 'whereof', 'whether', 'whether', 'how', 'however', 'before', 'whereas', 'wherever', 'after', 'whereas', 'wherein', 'wherever', 'whereas', 'whereunto', 'where', 'other', 'anywhere', 'whereupon', 'wherever', 'however', 'there', 'whereby', 'then', 'before', 'where', 'to', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where', 'where'"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    words = text.split()\n    if words == []:\n        return []\n    else:\n        index = []\n        for i in range(len(words)):\n            if words[i].endswith(\"ly\"):\n                index.append(i)\n        return index\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    side = l * l * l\n    return side\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l**2\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l*l*l\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area=l*6\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area=6*l**2\n    print(\"Surface area of cube is\",area)\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere of a given radius.\n    '''\n    area=4*3.14*r**2\n    print(\"Surface area of sphere is\",area)\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder of a given radius and height.\n    '''\n    area=2*3.14*r*(r+h)\n    print(\"Surface area of cylinder is\",area)\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere of a given radius.\n    '''\n    volume=3.14*r**3/3\n    print(\"Volume of sphere is\",volume)\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube of a given size.\n    '''\n    volume=l**3\n    print(\"Volume of cube is\",volume)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder of a given radius and height.\n    '''\n    volume=3.14*r**2*h\n    print(\"Volume of cylinder is\",volume)\ndef average_volume(n):\n    '''\n    Write a function to find the average of the volumes of n cubes of given size.\n    '''\n    volume=n**3/3\n    print(\"Average volume of cube is\",volume)\ndef maximum_volume(n):\n    '''\n    Write a function to find the maximum of the volumes of n cubes of given size.\n    '''\n    volume=n**3\n    print(\"Max volume of cube is\",volume)\ndef minimum_volume(n):\n    '''\n    Write a function to find the minimum of the volumes of n cubes of given size.\n    '''\n    volume=n**3/3\n    print(\"Min volume of cube is\",volume)\ndef average_mass(n):\n    '''\n    Write a function to find the average of the masses of n cubes of given size.\n    '''\n    mass=n**3*0.001\n    print(\"Average mass of cube is\",mass)\ndef maximum_mass(n):\n    '''\n    Write a function to find the maximum of the masses of n cubes of given size.\n    '''\n    mass=n**3*0.001\n    print(\"Max mass of cube is\",mass)\ndef minimum_mass(n):\n    '''\n    Write a function to find the minimum of the masses of n cubes of given size.\n    '''\n    mass=n**3*0.001\n    print(\"Min mass of cube is\",mass)\ndef kinetic_energy(m):\n    '''\n    Write a function to find the kinetic energy of a body of mass m.\n    '''\n    ke=0.5*m*(2*(9.81)*(2.5**2))\n    print(\"Kinetic energy of cube is\",ke)\ndef momentum(m,v):\n    '''\n    Write a function to find the momentum of a body of mass m.\n    '''\n    pe=m*v\n    print(\"Momentum of cube is\",pe)\ndef time_to_fall(v):\n    '''\n    Write a function to find the time for which the body of mass m is at rest if it were to fall at constant velocity v.\n    '''\n    t=2*(9.81)*(3.5**2)\n    print(\"Time for cube to fall is\",t)\ndef time_to_fall_with_drag(v):\n    '''\n    Write a function to find the time for which the body of mass m is at rest if it were to fall at constant velocity v.\n    '''\n    t=2*(9.81)*(2.5**2)\n    print(\"Time for cube to fall with drag is\",t)\ndef time_to_fall_with_grav(m,g,v):\n    '''\n    Write a function to find the time for which the body of mass m is at rest if it were to fall at constant velocity v.\n    '''\n    t=2*(9.81)*(3.5**2)\n    print(\"Time for cube to fall with gravity is\",t)\ndef time_to_land(v,g):\n    '''\n    Write a function to find the time for which the body of mass m is at rest if it were to fall at constant velocity v.\n    '''\n    t=v/g\n    print(\"Time for cube to land is\",t)\ndef time_to_land_with_drag(v,g):\n    '''\n    Write a function to find the time for which the body of mass m is at rest if it were to fall at constant velocity v.\n    '''\n    t=v/g\n    print(\"Time for cube to land with drag is\",t)\ndef time_to_land_with_grav(m,g,v):\n    '''\n    Write a function to find the time for which the body of mass m is at rest if it were to fall at constant velocity v.\n    '''\n    t=v/g\n    print(\"Time for cube to land with gravity is\",t)\ndef average_drag_coefficient(m,v):\n    '''\n    Write a function to find the average drag coefficient of a body of mass m.\n    '''\n    cd=0.5*m*v**2\n    print(\"Average drag coefficient is\",cd)\ndef average_drag_coefficient_with_drag(m,v):\n    '''\n    Write a function to find the average drag coefficient of a body of mass m.\n    '''\n    cd=0.5*m*v**2\n    print(\"Average drag coefficient is\",cd)\ndef average_drag_coefficient_with_grav(m,g,v):\n    '''\n    Write a function to find the average drag coefficient of a body of mass m.\n    '''\n    cd=0.5*m*v**2\n    print(\"Average drag coefficient is\",cd)\ndef average_drag_coefficient_with_grav_and_drag(m,g,v):\n    '''\n    Write a function to find the average drag coefficient of a body of mass m.\n    '''\n    cd=0.5*m*v**2\n    print(\"Average drag coefficient is\",cd)\ndef drag_per_second(m,v):\n    '''\n    Write a function to find the drag force per second of a body of mass m.\n    '''\n    fp=0.5*m*v**2\n    print(\"Drag force per second is\",fp)\ndef drag_per_second_with_drag(m,v):\n    '''\n    Write a function to find the drag force per second of a body of mass m.\n    '''\n    fp=0.5*m*v**2\n    print(\"Drag force per second is\",fp)\ndef drag_per_second_with_grav(m,g,v):\n    '''\n    Write a function to find the drag force per second of a body of mass m.\n    '''\n    fp=0.5*m*v**2\n    print(\"Drag force per second is\",fp)\ndef drag_per_second_with_grav_and_drag(m,g,v):\n    '''\n    Write a function to find the drag force per second of a body of mass m.\n    '''\n    fp=0.5*m*v**2\n    print(\"Drag force per second is\",fp)\ndef average_drag_force(m,v):\n    '''\n    Write a function to find the drag force of a body of mass m.\n    '''\n    fd=m*v\n    print(\"Average drag force is\",fd)\ndef average_drag_force_with_drag(m,v):\n    '''\n    Write a function to find the drag force of a body of mass m.\n    '''\n    fd=m*v\n    print(\"Average drag force is\",fd)\ndef average_drag_force_with_grav(m,g,v):\n    '''\n    Write a function to find the drag force of a body of mass m.\n    '''\n    fd=m*v\n    print(\"Average drag force is\",fd)\ndef average_drag_force_with"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if not nums:\n        return 0\n    \n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count/float(len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr=nums\n    total=len(arr)\n    positive=0\n    for i in arr:\n        if i>0:\n            positive=positive+1\n    if total==0:\n        return 0\n    return float(positive/total)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    n_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num == 0:\n            n_count += 1\n    return pos_count/float(pos_count+n_count)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return float(count)/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return float(count) / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    counter = 0\n    for i in nums:\n        if i > 0:\n            counter += 1\n    return counter / len(nums)\ndef unique_count(nums):\n    '''\n    Write a function to count the number of unique elements in an array of integers.\n    '''\n    counter = 0\n    for i in nums:\n        if nums.count(i) == 1:\n            counter += 1\n    return counter\ndef reverse(s):\n    '''\n    Write a function to reverse a string.\n    '''\n    return s[::-1]\ndef palindrome_count(s):\n    '''\n    Write a function to find the number of palindromes in a string.\n    '''\n    counter = 0\n    for i in range(len(s)):\n        if s[i:] == s[i:][::-1]:\n            counter += 1\n        if s[:i] == s[:i][::-1]:\n            counter += 1\n    return counter\ndef string_count(s):\n    '''\n    Write a function that takes in a string and returns the number of times each letter appears.\n    '''\n    return dict((letter, s.count(letter)) for letter in set(s))\ndef string_rotate(s, rotations):\n    '''\n    Write a function that rotates a string a given number of times.\n    '''\n    rotated_string = ''\n    for i in range(rotations):\n        rotated_string += s[len(s)-1]\n        s = s[:-1]\n    return rotated_string\ndef longest_common_substring(s1, s2):\n    '''\n    Write a function to find the longest common substring of two strings.\n    '''\n    max_count = 0\n    if len(s1) > len(s2):\n        temp = s1\n        s1 = s2\n        s2 = temp\n    for i in range(len(s1)):\n        substring = s1[i:len(s2)+i]\n        if substring in s2:\n            if len(substring) > max_count:\n                max_count = len(substring)\n    return max_count\ndef merge_sort(arr):\n    '''\n    Write a function that takes in a list and returns a sorted version of the list in ascending order.\n    '''\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) / 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\ndef merge(left, right):\n    if len(left) == 0:\n        return right\n    if len(right) == 0:\n        return left\n    res = []\n    i, j = 0, 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            res.append(left[i])\n            i += 1\n        else:\n            res.append(right[j])\n            j += 1\n    res.extend(left[i:])\n    res.extend(right[j:])\n    return res\ndef balanced_trees(n):\n    '''\n    Write a function to check if a binary tree is balanced.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n == 5:\n        return True\n    return balanced_trees(n-1) and balanced_trees(n-2) and balanced_trees(n-3)\ndef number_sort(n):\n    '''\n    Write a function that sorts a list of non-negative integers.\n    '''\n    n = array('i', n)\n    for i in range(len(n)):\n        for j in range(i+1, len(n)):\n            if n[i] > n[j]:\n                n[i], n[j] = n[j], n[i]\n    return n\ndef number_rotate(n, k):\n    '''\n    Write a function that rotates a list of non-negative integers by k elements.\n    '''\n    if len(n) == 1:\n        return n\n    if k == 0:\n        return n\n    if k < 0:\n        k = -k\n    for i in range(k):\n        temp = n[0]\n        n[0] = n[len(n)-1]\n        n[len(n)-1] = temp\n    return n\ndef number_rotate_2(n, k):\n    '''\n    Write a function that rotates a list of non-negative integers by k elements.\n    '''\n    if len(n) == 1:\n        return n\n    if k == 0:\n        return n\n    if k < 0:\n        k = -k\n    n = array('i', n)\n    temp = n[0]\n    for i in range(k):\n        n[i] = n[len(n)-1]\n    n[k] = temp\n    return n\ndef smallest_int(n):\n    '''\n    Write a function that takes in a list of integers and returns the smallest integer in the list.\n    '''\n    return min(n)\ndef get_substring(s, start, end):\n    '''\n    Write a function that takes in a string and returns the substring of the string.\n    '''\n    return s[start:end+1]\ndef common_substring(s1, s2):\n    '''\n    Write a function that takes in two strings and returns the longest common substring.\n    '''\n    longest = 0\n    for i in range(len(s1)):\n        if s1[i:] in s2:\n            if len(s1[i:]) > longest:\n                longest = len(s1[i:])\n    return longest\ndef is_anagram(s1, s2):\n    '''\n    Write a function that takes in two strings and returns True if the strings are anagrams, False otherwise.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    char_array1 = [0] * 26\n    char_array2 = [0] * 26\n    for i in range(len(s1)):\n        char_array1[ord(s1[i]) - ord('a')] += 1\n        char_array2[ord(s2[i]) - ord('a')] += 1\n    for i in range(26):\n        if char_array1[i]!= char_array2[i]:\n            return False\n    return True\ndef is_rotation(s1, s2):\n    '''\n    Write a function that takes in two strings and returns True if the strings are rotations of each other, False otherwise.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    if s1 == s2:\n        return True\n    return is_rotation(s1, s2[1:]+s2[0])\ndef right_rotate(s, k):\n    '''\n    Write a function that rotates a string by k times.\n    '''\n    return s[len(s)-k:]+s[:len(s)-k]\ndef left_rotate(s, k):\n    '''\n    Write a function that rotates a string by k times.\n    '''\n    return s[k:]+s[:k]\ndef create_zigzag(n):\n    '''\n    Write a function that takes in a list of integers and returns a list of the same length with zigzag order.\n    '''\n    if n == 0:\n        return []\n    res = []\n    for i in range(n):\n        if i % 2 == 0:\n            res.append(i)\n        else:\n            res.insert(0, i)\n    return res\ndef is_valid_date(s):\n    '''\n    Write a function that takes in a date in the format yyyy-mm-dd and returns True if the date is valid, False otherwise.\n    '''\n    return True\ndef is_palindrome(s):\n    '''\n    Write a function that takes in "
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return float(nums.count(1)) / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_nums = [num for num in nums if num > 0]\n    return len(positive_nums) / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    negative = 0\n    for num in nums:\n        if num > 0:\n            positive += 1\n        elif num < 0:\n            negative += 1\n    return positive/float(positive + negative)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    negative = 0\n    total = 0\n    for x in nums:\n        total+=x\n        if x>0:\n            positive+=1\n        elif x<0:\n            negative+=1\n    if total==0:\n        return 0\n    else:\n        return positive/float(total)\n    return 0\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -1\n    for number in list1: \n        if number < 0 and number > max_neg: \n            max_neg = number\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    count = 0\n    max = None\n    for i in list1:\n        if(i < 0):\n            if(max == None or max < i):\n                max = i\n    return max\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    index_of_largest = 0\n    largest_num = list1[0]\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    for i in list1:\n        if i < 0:\n            return i\n    return -1\n    \ndef search_min(list1):\n    '''\n    Write a python function to search the minimum number from the given list and return its index and value.\n    '''\n    low = 0\n    high = len(list1) - 1\n    while low <= high:\n        mid = (low + high) / 2\n        if list1[mid] == min(list1):\n            return mid, min(list1)\n        elif list1[mid] > min(list1):\n            high = mid - 1\n        else:\n            low = mid + 1\n    return None, None\n    \ndef search_max(list1):\n    '''\n    Write a python function to search the maximum number from the given list and return its index and value.\n    '''\n    low = 0\n    high = len(list1) - 1\n    while low <= high:\n        mid = (low + high) / 2\n        if list1[mid] == max(list1):\n            return mid, max(list1)\n        elif list1[mid] > max(list1):\n            high = mid - 1\n        else:\n            low = mid + 1\n    return None, None\n    \ndef search_median(list1):\n    '''\n    Write a python function to search the median number from the given list and return its index and value.\n    '''\n    n = len(list1)\n    if n % 2 == 0:\n        return (n / 2), (list1[(n / 2) - 1] + list1[n / 2]) / 2.0\n    else:\n        return (n / 2), list1[n / 2]\n    \ndef sort_median(list1):\n    '''\n    Write a python function to sort the list using the median number technique and return the sorted list.\n    '''\n    n = len(list1)\n    if n % 2 == 0:\n        mid = n / 2\n        list1[mid], list1[n / 2] = list1[n / 2], list1[mid]\n        list1[:mid], list1[mid + 1:] = list1[:mid], list1[mid + 1:]\n    else:\n        mid = (n + 1) / 2\n        list1[mid - 1], list1[mid] = list1[mid], list1[mid - 1]\n        list1[:mid - 1], list1[mid:] = list1[:mid - 1], list1[mid:]\n    return list1\n    \ndef search_rotation(list1, number):\n    '''\n    Write a python function to search the number from the given list and return its index and value.\n    '''\n    low = 0\n    high = len(list1) - 1\n    while low <= high:\n        mid = (low + high) / 2\n        if list1[mid] == number:\n            return mid\n        elif list1[mid] > number:\n            if list1[low] < number and list1[low + 1] > number:\n                return low\n            else:\n                high = mid - 1\n        else:\n            if list1[high] > number and list1[high - 1] < number:\n                return high\n            else:\n                low = mid + 1\n    return None\n    \ndef insert_sort(list1):\n    '''\n    Write a python function to sort the list using insertion sort technique and return the sorted list.\n    '''\n    for i in range(1, len(list1)):\n        key = list1[i]\n        j = i - 1\n        while j >= 0 and key < list1[j]:\n            list1[j + 1] = list1[j]\n            j -= 1\n        list1[j + 1] = key\n    return list1\n    \ndef merge_sort(list1):\n    '''\n    Write a python function to sort the list using merge sort technique and return the sorted list.\n    '''\n    if len(list1) > 1:\n        mid = len(list1) / 2\n        left = list1[:mid]\n        right = list1[mid:]\n        merge_sort(left)\n        merge_sort(right)\n        i = j = k = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                list1[k] = left[i]\n                i += 1\n            else:\n                list1[k] = right[j]\n                j += 1\n            k += 1\n        while i < len(left):\n            list1[k] = left[i]\n            i += 1\n            k += 1\n        while j < len(right):\n            list1[k] = right[j]\n            j += 1\n            k += 1\n    return list1\n    \ndef shell_sort(list1):\n    '''\n    Write a python function to sort the list using shell sort technique and return the sorted list.\n    '''\n    h = 1\n    while h < len(list1) / 3:\n        h = 3 * h + 1\n    while h >= 1:\n        for i in range(h, len(list1)):\n            key = list1[i]\n            j = i - h\n            while j >= 0 and key < list1[j]:\n                list1[j + h] = list1[j]\n                j -= h\n            list1[j + h] = key\n        h /= 3\n    return list1\n    \ndef insertion_sort(list1):\n    '''\n    Write a python function to sort the list using insertion sort technique and return the sorted list.\n    '''\n    for i in range(1, len(list1)):\n        key = list1[i]\n        j = i - 1\n        while j >= 0 and key < list1[j]:\n            list1[j + 1] = list1[j]\n            j -= 1\n        list1[j + 1] = key\n    return list1\n    \ndef bubble_sort(list1):\n    '''\n    Write a python function to sort the list using bubble sort technique and return the sorted list.\n    '''\n    for i in range(0, len(list1) - 1):\n        for j in range(0, len(list1) - 1):\n            if list1[j] > list1[j + 1]:\n                list1[j], list1[j + 1] = list1[j + 1], list1[j]\n    return list1\n    \ndef selection_sort(list1):\n    '''\n    Write a python function to sort the list using selection sort technique and return the sorted list.\n    '''\n    for i in range(len(list1) - 1):\n        min = i\n        for j in range(i, len(list1)):\n            if list1[j] < list1[min]:\n                min = j\n        if min!= i:\n            list1[min], list1[i] = list1[i], list1[min]\n    return list1\n    \ndef binary_search(list1, number):\n    '''\n    Write a python function to search the number from the given list and return its index and value.\n    '''\n    low = 0\n    high = len(list1) - 1\n    while low <= high:\n        mid = (low + high) / 2\n        if list1[mid] == number:\n            return mid\n        elif list1[mid] > number:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return None\n    \ndef fibonacci_search(list1, number):\n    '''\n    Write a python function to search the number from the given list using fibonacci search technique and return its index and value.\n    '''\n    if number < list1[0] or number > list1[-1]:\n        return None\n    low = 0\n    high = len(list1) - 1\n    while low <= high:\n        mid = (low + high) / 2\n        if number == list1[mid]:\n            return mid\n        elif number < list1[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    mid = low\n    fib_n1 = fib_n2 = 1\n    fib_n3 = fib_n4 = fib_n5 = fib_n6 = 0\n    while fib_n1 + fi"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = -1\n    for i in list1:\n        if i < 0:\n            if i > max:\n                max = i\n    return max\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    if list2!= []:\n        return max(list2)\n    else:\n        return None\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # your code goes here\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    \n    pos_list = []\n    neg_list = []\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1 = [int(i) for i in list1]\n    max_negative = -1\n    for i in list1:\n        if i < 0:\n            if i > max_negative:\n                max_negative = i\n    return max_negative\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max1 = float('-inf')\n    for i in list1:\n        if i<0 and i>max1:\n            max1=i\n    return max1\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for (num1, num2) in test_list:\n        new_list.append((num1, num2))\n    return new_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(i[0], i[1][:K]) for i in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trim_tuple_list = []\n    for tup in test_list:\n        trim_tuple_list.append(tup[K:])\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if test_list is None or len(test_list) == 0:\n        return None\n    \n    return list(map(lambda t: t[K:], test_list))\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trim_list = [tuple(test_list[i][:K]) for i in range(len(test_list))]\n    return trim_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        if i < K:\n            trimmed_list.append(test_list[i])\n        else:\n            break\n    return trimmed_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(x, y[K:]) for x, y in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for i in test_list:\n        if i[1] > K:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for item in test_list:\n        item[0] = item[0][K:]\n        item[1] = item[1][K:]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [ (x[0], x[1][0:K]) for x in test_list ]\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception('Tuples are not of same size')\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(i*j for i, j in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    new_list = []\n    for i, j in zip(test_tup1, test_tup2):\n        new_list.append(i*j)\n    return tuple(new_list)\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    # Test:\n    print(test_tup1)\n    print(test_tup2)\n    \n    # Solution:\n    index_mult = []\n    \n    for i in range(len(test_tup1)):\n        index_mult.append(test_tup1[i]*test_tup2[i])\n    \n    return index_mult\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    x = 0\n    y = 0\n    return [i * j for i, j in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple([x*y for x, y in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple([tup1[i] * tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    temp_tup1 = list(test_tup1)\n    temp_tup2 = list(test_tup2)\n    new_list = []\n    for i in range(len(temp_tup1)):\n        new_list.append(temp_tup1[i] * temp_tup2[i])\n    return tuple(new_list)\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    final_tup = []\n    for i in xrange(len(test_tup1)):\n        final_tup.append(test_tup1[i]*test_tup2[i])\n    return tuple(final_tup)\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for i in tup: \n        for j in lst: \n            if i == j: \n                return tup.count(i)\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i in tup:\n            count += 1\n    return count \n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    freq = 0\n    for i in lst:\n        if tup.count(i) > 0:\n            freq = freq + 1\n    return freq\ndef max_occurrence(lst):\n    '''\n    Write a python function to return the maximum occurence of element in list.\n    '''\n    occur = Counter(lst)\n    max_occur = occur.most_common()\n    if max_occur[0][1] == max_occur[1][1]:\n        max_occur.sort(key=lambda x: x[1])\n        return max_occur[1][0]\n    else:\n        return max_occur[0][0]\ndef max_occurrence_in_tuple(tup):\n    '''\n    Write a python function to return the maximum occurence of element in tuple.\n    '''\n    occur = Counter(tup)\n    max_occur = occur.most_common()\n    if max_occur[0][1] == max_occur[1][1]:\n        max_occur.sort(key=lambda x: x[1])\n        return max_occur[1][0]\n    else:\n        return max_occur[0][0]\ndef second_Max(lst):\n    '''\n    Write a python function to return the second maximum occurence of element in list.\n    '''\n    if len(lst) > 1:\n        occur = Counter(lst)\n        max_occur = occur.most_common()\n        if max_occur[0][1] == max_occur[1][1]:\n            max_occur.sort(key=lambda x: x[1])\n            return max_occur[1][0]\n        else:\n            return max_occur[0][0]\n    else:\n        return None\ndef second_Max_in_tuple(tup):\n    '''\n    Write a python function to return the second maximum occurence of element in tuple.\n    '''\n    if len(tup) > 1:\n        occur = Counter(tup)\n        max_occur = occur.most_common()\n        if max_occur[0][1] == max_occur[1][1]:\n            max_occur.sort(key=lambda x: x[1])\n            return max_occur[1][0]\n        else:\n            return max_occur[0][0]\n    else:\n        return None\ndef third_Max(lst):\n    '''\n    Write a python function to return the third maximum occurence of element in list.\n    '''\n    if len(lst) > 2:\n        occur = Counter(lst)\n        max_occur = occur.most_common()\n        if max_occur[0][1] == max_occur[1][1] == max_occur[2][1]:\n            max_occur.sort(key=lambda x: x[1])\n            return max_occur[2][0]\n        else:\n            return max_occur[0][0]\n    else:\n        return None\ndef third_Max_in_tuple(tup):\n    '''\n    Write a python function to return the third maximum occurence of element in tuple.\n    '''\n    if len(tup) > 2:\n        occur = Counter(tup)\n        max_occur = occur.most_common()\n        if max_occur[0][1] == max_occur[1][1] == max_occur[2][1]:\n            max_occur.sort(key=lambda x: x[1])\n            return max_occur[2][0]\n        else:\n            return max_occur[0][0]\n    else:\n        return None\ndef min_occurrence(lst):\n    '''\n    Write a python function to return the minimum occurence of element in list.\n    '''\n    occur = Counter(lst)\n    min_occur = occur.most_common()\n    if min_occur[0][1] == min_occur[1][1]:\n        min_occur.sort(key=lambda x: x[1])\n        return min_occur[1][0]\n    else:\n        return min_occur[0][0]\ndef min_occurrence_in_tuple(tup):\n    '''\n    Write a python function to return the minimum occurence of element in tuple.\n    '''\n    occur = Counter(tup)\n    min_occur = occur.most_common()\n    if min_occur[0][1] == min_occur[1][1]:\n        min_occur.sort(key=lambda x: x[1])\n        return min_occur[1][0]\n    else:\n        return min_occur[0][0]\ndef remove_duplicate_elements(lst):\n    '''\n    Write a python function to remove duplicated elements in list.\n    '''\n    return list(set(lst))\ndef remove_duplicate_elements_in_tuple(tup):\n    '''\n    Write a python function to remove duplicated elements in tuple.\n    '''\n    return tuple(set(tup))\ndef min_max_range(lst):\n    '''\n    Write a python function to return the min, max and range of element in list.\n    '''\n    min_val = lst[0]\n    max_val = lst[0]\n    range_val = lst[0] - lst[0]\n    for i in lst:\n        if i < min_val:\n            min_val = i\n        elif i > max_val:\n            max_val = i\n        range_val = range_val + i - min_val\n    return min_val, max_val, range_val\ndef min_max_range_in_tuple(tup):\n    '''\n    Write a python function to return the min, max and range of element in tuple.\n    '''\n    min_val = tup[0]\n    max_val = tup[0]\n    range_val = tup[0] - tup[0]\n    for i in tup:\n        if i < min_val:\n            min_val = i\n        elif i > max_val:\n            max_val = i\n        range_val = range_val + i - min_val\n    return min_val, max_val, range_val\ndef remove_max_occurence_elements(lst, max_occurrence):\n    '''\n    Write a python function to remove elements of list which are occurring maximum times.\n    '''\n    if max_occurrence is None:\n        max_occurrence = max_occurrence_in_tuple(lst)\n    for i in lst:\n        if i == max_occurrence:\n            lst.remove(i)\n    return lst\ndef remove_max_occurence_elements_in_tuple(tup, max_occurrence):\n    '''\n    Write a python function to remove elements of tuple which are occurring maximum times.\n    '''\n    if max_occurrence is None:\n        max_occurrence = max_occurrence_in_tuple(tup)\n    for i in tup:\n        if i == max_occurrence:\n            tup.remove(i)\n    return tup\ndef remove_second_max_occurence_elements(lst, max_occurrence):\n    '''\n    Write a python function to remove elements of list which are occurring maximum times.\n    '''\n    if max_occurrence is None:\n        max_occurrence = second_Max(lst)\n    for i in lst:\n        if i == max_occurrence:\n            lst.remove(i)\n    return lst\ndef remove_second_max_occurence_elements_in_tuple(tup, max_occurrence):\n    '''\n    Write a python function to remove elements of tuple which are occurring maximum times.\n    '''\n    if max_occurrence is None:\n        max_occurrence = second_Max_in_tuple(tup)\n    for i in tup:\n        if i == max_occurrence:\n            tup.remov"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup) & Counter(lst) \ndef get_pairs(lst): \n    '''\n    Write a python function to extract all pairs from a list of integers in ascending order.\n    '''\n    res = [] \n    for i in range(len(lst)-1): \n        res.append((lst[i], lst[i+1]))\n    return res\ndef print_pairs(lst): \n    '''\n    Write a python function to print all pairs from a list of integers in ascending order.\n    '''\n    res = [] \n    for i in range(len(lst)-1): \n        res.append((lst[i], lst[i+1]))\n    print(res)\ndef smallest_diff(lst): \n    '''\n    Write a python function to find the smallest difference between two elements of a list.\n    '''\n    lst.sort()\n    return lst[1] - lst[0]\ndef print_smallest_diff(lst): \n    '''\n    Write a python function to print the smallest difference between two elements of a list.\n    '''\n    lst.sort()\n    print(lst[1] - lst[0])\ndef print_largest_diff(lst): \n    '''\n    Write a python function to print the largest difference between two elements of a list.\n    '''\n    lst.sort()\n    print(lst[-1] - lst[0])\ndef reverse_string(str): \n    '''\n    Write a python function to reverse a string.\n    '''\n    return str[::-1]\ndef print_reverse_string(str): \n    '''\n    Write a python function to print the reverse of a string.\n    '''\n    print(str[::-1])\ndef remove_duplicates(lst): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    lst = list(set(lst)) \n    return lst\ndef print_remove_duplicates(lst): \n    '''\n    Write a python function to print the list after removing duplicates.\n    '''\n    lst = remove_duplicates(lst)\n    print(lst)\ndef palindrome(str): \n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    return str[::-1] == str\ndef print_palindrome(str): \n    '''\n    Write a python function to print the string if it is palindrome or not.\n    '''\n    if palindrome(str): \n        print(str)\ndef rot_13(str): \n    '''\n    Write a python function to print the string after performing rot 13 on it.\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    output = ''\n    for i in str: \n        if i in alphabet: \n            if ord(i) + 13 > 122: \n                output += chr(ord(i) + 13 - 26)\n            else: \n                output += chr(ord(i) + 13)\n        else: \n            output += i\n    print(output)\ndef print_rot_13(str): \n    '''\n    Write a python function to print the string after performing rot 13 on it.\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    output = ''\n    for i in str: \n        if i in alphabet: \n            if ord(i) + 13 > 122: \n                output += chr(ord(i) + 13 - 26)\n            else: \n                output += chr(ord(i) + 13)\n        else: \n            output += i\n    print(output)\ndef rot_13_1(str): \n    '''\n    Write a python function to print the string after performing rot 13 on it.\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    output = ''\n    for i in str: \n        if i in alphabet: \n            if ord(i) + 13 > 122: \n                output += chr(ord(i) + 13 - 26)\n            else: \n                output += chr(ord(i) + 13)\n        else: \n            output += i\n    return output\ndef print_rot_13_1(str): \n    '''\n    Write a python function to print the string after performing rot 13 on it.\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    output = ''\n    for i in str: \n        if i in alphabet: \n            if ord(i) + 13 > 122: \n                output += chr(ord(i) + 13 - 26)\n            else: \n                output += chr(ord(i) + 13)\n        else: \n            output += i\n    print(output)\ndef print_rot_13_2(str): \n    '''\n    Write a python function to print the string after performing rot 13 on it.\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    output = ''\n    for i in str: \n        if i in alphabet: \n            if ord(i) + 13 > 122: \n                output += chr(ord(i) + 13 - 26)\n            else: \n                output += chr(ord(i) + 13)\n        else: \n            output += i\n    return output\ndef add_digits(str): \n    '''\n    Write a python function to print the sum of the digits of a number.\n    '''\n    return sum([int(i) for i in str])\ndef print_add_digits(num): \n    '''\n    Write a python function to print the sum of the digits of a number.\n    '''\n    print(sum([int(i) for i in str(num)]))\ndef get_check_sum(str): \n    '''\n    Write a python function to print the sum of the digits of a number.\n    '''\n    return str[0] + str[1] + str[2]\ndef print_get_check_sum(num): \n    '''\n    Write a python function to print the sum of the digits of a number.\n    '''\n    print(str(num)[0] + str(num)[1] + str(num)[2])\ndef get_double_letters(str): \n    '''\n    Write a python function to find the letters that are doubled.\n    '''\n    res = [] \n    for i in range(len(str) - 1): \n        if str[i] == str[i + 1]: \n            res.append(str[i])\n    return res\ndef print_get_double_letters(str): \n    '''\n    Write a python function to find the letters that are doubled.\n    '''\n    res = [] \n    for i in range(len(str) - 1): \n        if str[i] == str[i + 1]: \n            res.append(str[i])\n    print(res)\ndef get_change_base(num, base): \n    '''\n    Write a python function to print the decimal equivalent of a number in any base.\n    '''\n    alphabet = '0123456789ABCDEF'\n    res = '' \n    while num > 0: \n        res = alphabet[num % base] + res\n        num //= base\n    return res\ndef print_get_change_base(num, base): \n    '''\n    Write a python function to print the decimal equivalent of a number in any base.\n    '''\n    alphabet = '0123456789ABCDEF'\n    res = '' \n    while num > 0: \n        res = alphabet[num % base] + res\n        num //= base\n    print(res)\ndef get_triple_digits(str): \n    '''\n    Write a python function to extract all triple digits from a number.\n    '''\n    res = [] \n    for i in range(len(str)-2): \n        if int(str[i]+str[i+1]"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    d = Counter(tup) \n    d_l = Counter(lst)\n    # print d\n    # print d_l\n    # print d_l.items()\n    # print d.items()\n    # return sum(d_l.values()) - sum(d.values())\n    return len(lst) - len(tup) + sum(d_l.values()) - sum(d.values())\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst: \n        if tup.count(i) > 0: \n            count = count + 1\n    return count \ndef count_Occurrence_dict(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    d = {}\n    for i in lst: \n        d[i] = 0\n    for i in lst: \n        d[i] = d[i] + 1\n    return d\ndef first_n(lst, n):\n    '''\n    Write a python function to get the first n elements of list.\n    '''\n    return lst[0:n]\ndef count_of_nth_element(lst, n): \n    '''\n    Write a python function to count the occurence of nth element in a list.\n    '''\n    count = 0\n    for i in lst: \n        if i == n: \n            count = count + 1\n    return count \ndef count_occurrence(lst, n): \n    '''\n    Write a python function to count the occurence of each element of a list.\n    '''\n    count = [0]*(n+1)\n    for i in lst: \n        count[i] = count[i] + 1\n    return count\ndef find_element(lst, n): \n    '''\n    Write a python function to find the element with maximum occurence in a list.\n    '''\n    cnt = count_occurrence(lst, n)\n    max_cnt = 0\n    max_ele = 0\n    for i in range(len(cnt)): \n        if cnt[i] > max_cnt: \n            max_cnt = cnt[i]\n            max_ele = i\n    return max_ele\ndef find_element_2(lst, n): \n    '''\n    Write a python function to find the element with maximum occurence in a list.\n    '''\n    cnt = count_occurrence(lst, n)\n    max_ele = 0\n    for i in range(len(cnt)): \n        if cnt[i] > cnt[max_ele]: \n            max_ele = i\n    return max_ele\ndef get_min_value(lst): \n    '''\n    Write a python function to find the minimum value of a list.\n    '''\n    min_ele = lst[0]\n    for i in lst: \n        if i < min_ele: \n            min_ele = i\n    return min_ele\ndef get_max_value(lst): \n    '''\n    Write a python function to find the maximum value of a list.\n    '''\n    max_ele = lst[0]\n    for i in lst: \n        if i > max_ele: \n            max_ele = i\n    return max_ele\ndef get_mean(lst): \n    '''\n    Write a python function to find the mean of a list.\n    '''\n    lst_sum = 0\n    for i in lst: \n        lst_sum = lst_sum + i\n    lst_sum = lst_sum/len(lst)\n    return lst_sum\ndef get_median(lst): \n    '''\n    Write a python function to find the median of a list.\n    '''\n    lst_sort = sorted(lst)\n    if len(lst)%2!= 0: \n        return lst_sort[len(lst)/2]\n    else: \n        return (lst_sort[len(lst)/2] + lst_sort[len(lst)/2-1])/2\ndef get_mode(lst): \n    '''\n    Write a python function to find the mode of a list.\n    '''\n    count = count_occurrence(lst, lst[0])\n    max_cnt = 0\n    max_ele = 0\n    for i in range(len(lst)): \n        if count[i] > max_cnt: \n            max_cnt = count[i]\n            max_ele = i\n    return max_ele\ndef is_binary(lst): \n    '''\n    Write a python function to check if a list is binary or not.\n    '''\n    for i in lst: \n        if i > 1 or i < 0: \n            return False\n    return True\ndef is_prime(n): \n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if n == 1 or n == 0: \n        return False\n    if n == 2: \n        return True\n    if n%2 == 0: \n        return False\n    for i in range(3, int(n**0.5 + 1), 2): \n        if n%i == 0: \n            return False\n    return True\ndef is_palindrome(lst): \n    '''\n    Write a python function to check if a list is palindrome or not.\n    '''\n    lst = lst[::-1]\n    if lst == lst[0]: \n        return True\n    else: \n        return False\ndef get_factors(num): \n    '''\n    Write a python function to get factors of a number.\n    '''\n    factors = []\n    for i in range(2, int(num**0.5 + 1)): \n        if num%i == 0: \n            factors.append(i)\n            factors.append(num/i)\n    factors.append(num)\n    return factors\ndef get_factors_2(num): \n    '''\n    Write a python function to get factors of a number.\n    '''\n    factors = []\n    for i in range(2, int(num**0.5 + 1)): \n        if num%i == 0: \n            factors.append(i)\n    return factors\ndef get_factors_3(num): \n    '''\n    Write a python function to get factors of a number.\n    '''\n    factors = []\n    for i in range(2, int(num**0.5 + 1)): \n        if num%i == 0: \n            factors.append(i)\n            if i*i!= num: \n                factors.append(num/i)\n    return factors\ndef get_factors_4(num): \n    '''\n    Write a python function to get factors of a number.\n    '''\n    factors = []\n    for i in range(2, int(num**0.5 + 1)): \n        if num%i == 0: \n            factors.append(i)\n            if i*i!= num: \n                factors.append(num/i)\n    return factors\ndef get_factors_5(num): \n    '''\n    Write a python function to get factors of a number.\n    '''\n    factors = []\n    for i in range(2, int(num**0.5 + 1)): \n        if num%i == 0: \n            factors.append(i)\n            if i*i!= num: \n                factors.append(num/i)\n    return factors\ndef get_factors_6(num): \n    '''\n    Write a python function to get factors of a number.\n    '''\n    factors = []\n    for i in range(2, int(num**0.5 + 1)): \n        if num%i == 0: \n            factors.append(i)\n            if i*i!= num: \n                factors.append(num/i)\n    return factors\ndef get_factors_7(num): \n    '''\n    Write a python function to get factors of a number.\n    '''\n    factors = []\n    for i in range(2, int(num**0.5 + 1)): \n        if num%i == 0: \n            factors.append(i)\n            if i*i!= num: \n                factors.append(num/i)\n    return factors\ndef ge"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst_count = Counter(lst)\n    print(lst_count)\n    tup_count = Counter(tup)\n    print(tup_count)\n    if lst_count == tup_count:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for tup1 in lst:\n        if tup == tup1:\n            count+=1\n    return count\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return map(lambda x: x ** 3, nums)\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [n**3 for n in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    results = []\n    for num in nums:\n        results.append(num**3)\n    return results\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i ** 3 for i in nums]\n    \nassert cube_nums([1,2,3]) == [1, 8, 27]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in range(0, len(nums)):\n        nums[i] = nums[i] ** 3\n    return nums\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**3\n    return nums\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in nums:\n        print(i ** 3)\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + cal_sum(n - 1)\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return cal_sum(n - 1) + cal_sum(n - 2) + cal_sum(n - 3)\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    while (n):\n        s += (n % 10)\n        n /= 10\n    return s\n    \ndef perrin(n):\n    '''\n    Perrin numbers are the numbers that have the following property:\n        (i)  the sum of the digits of the number equals to the number itself;\n        (ii) the sum of the digits of the number is divisible by 2;\n    Write a function to test whether or not a number is a perrin number.\n    '''\n    if cal_sum(n) == n:\n        if cal_sum(n) % 2 == 0:\n            return True\n    return False\n    \nif __name__ == \"__main__\":\n    print perrin(10)\n    print perrin(12)\n    print perrin(23)\n    print perrin(31)\n    print perrin(14"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum(range(1,n+1))\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0 \n    for i in range(1, n+1): \n        if i%2 == 0: \n            result += i\n    return result \n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    num = 0\n    for i in range(n):\n        num += i+1\n    return num\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    n = n/2\n    r = 1\n    while n:\n        r += n\n        n /= 2\n    return r\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s=0\n    for i in range(1,n+1):\n        if i % 2 == 1:\n            s+=i**2\n    return s\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    \n    res = 0\n    for i in range(1, n+1):\n        num = 0\n        for j in range(1, i+1):\n            num += j\n        res += num\n    return res\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[x:x+l] for x in range(0, len(str), l)]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return map(lambda x: x[:l], str)\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in range(0, len(l)):\n        if len(l[i]) <= l:\n            print(l[i])\n        else:\n            pass\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l == 0:\n        return \"\"\n    if l >= len(str):\n        return str\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    \n    # If list is not valid, do not proceed further\n    if len(str) < l:\n        return \"\"\n    \n    # If there are only a few strings, use the naive approach\n    elif len(str) == l:\n        return str\n    \n    # If there is a single string in the list, return it\n    elif len(str) == 1:\n        return str[0]\n    \n    else:\n        # If there are many strings, find the smallest string\n        # by sorting the string list\n        sorted_str = sorted(str)\n        \n        # The string which is of size l\n        extracted_str = sorted_str[0]\n        \n        # Find the index at which the extracted string starts\n        # and the index at which the extracted string ends\n        start = str.index(extracted_str)\n        end = start + l\n        \n        return extracted_str[start:end]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    s = 0\n    list = []\n    while s < len(l):\n        list.append(l[s:s+l])\n        s += l\n    return list\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for x in range(0, len(str)):\n        if len(str[x]) == l:\n            print(str[x])\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [x[:l] for x in str]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    count = 0\n    output = []\n    for s in l:\n        if count < l:\n            output.append(s)\n            count += 1\n        else:\n            break\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    l1 = []\n    for s in l:\n        if len(s) >= l:\n            l1.append(s[:l])\n    return l1\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    new_text = re.sub(' +', '', text1)\n    print(new_text)\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = text1.replace(' ', '')\n    return text\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(\"\\s+\",'',text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return \"\".join(text1.split())\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub('\\s+', '', text1)\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1=text1.strip()\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    t = re.sub('\\s+', '', text1)\n    print(t)\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(' ', '')\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost-sale_amount>=0:\n        return actual_cost-sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if (actual_cost > sale_amount):\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return sale_amount-actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    loss = sale_amount - actual_cost\n    if loss > 0:\n        return loss\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if (actual_cost <= sale_amount):\n        return actual_cost-sale_amount\n    else:\n        return 0\n    "
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return abs(sale_amount-actual_cost)\n    return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount>actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s=0\n    if(n==0):\n        return 0\n    elif(n==1):\n        return 0\n    elif(n<0):\n        n=-n\n    for i in range(1,int(math.sqrt(n))):\n        if(n%i==0):\n            if(i%2==0):\n                s=s+i\n            if((n/i)%2==0):\n                s=s+n/i\n    return s\ndef isPrime(n) : \n    '''\n    Write a python function to find whether a given number is prime or not.\n    '''\n    if(n==1):\n        return False\n    elif(n==2):\n        return True\n    elif(n>2 and n%2==0):\n        return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if(n%i==0):\n            return False\n    return True\ndef factors(n) : \n    '''\n    Write a python function to find all the factors of a number.\n    '''\n    if(n==1):\n        return [1]\n    elif(n==0):\n        return []\n    elif(n<0):\n        n=-n\n    return [i for i in range(1,int(math.sqrt(n))+1) if n%i==0]\ndef isPerfect(n) : \n    '''\n    Write a python function to find whether a given number is perfect or not.\n    '''\n    s=0\n    if(n==0):\n        return True\n    elif(n==1):\n        return False\n    elif(n<0):\n        n=-n\n    for i in range(1,int(math.sqrt(n))):\n        if(n%i==0):\n            s=s+i\n            if(s>i):\n                return False\n    return True\ndef isHarshad(n) : \n    '''\n    Write a python function to find whether a given number is harshad number or not.\n    '''\n    if(n==0):\n        return False\n    elif(n==1):\n        return False\n    elif(n<0):\n        n=-n\n    return (sumofFactors(n)%n==0)\ndef isArmstrong(n) : \n    '''\n    Write a python function to find whether a given number is an Armstrong number or not.\n    '''\n    if(n==0):\n        return False\n    elif(n==1):\n        return False\n    elif(n<0):\n        n=-n\n    s=0\n    d=len(str(n))\n    for i in range(0,d):\n        s=s+(int(str(n)[i])**d)\n    return s==n\ndef isPandigital(n,d) : \n    '''\n    Write a python function to find whether a given number is pandigital number or not.\n    '''\n    s=0\n    for i in range(0,d):\n        s=s+(int(str(n)[i])**d)\n    if(s==n):\n        return True\n    return False\ndef isPalindrome(n) : \n    '''\n    Write a python function to find whether a given number is palindrome or not.\n    '''\n    if(n==0):\n        return True\n    elif(n==1):\n        return True\n    elif(n<0):\n        n=-n\n    d=len(str(n))\n    s=0\n    for i in range(0,d/2):\n        s=s+(int(str(n)[i])**d)\n    return s==n\ndef isHex(n) : \n    '''\n    Write a python function to find whether a given number is hexadecimal number or not.\n    '''\n    if(n==0):\n        return False\n    elif(n==1):\n        return False\n    elif(n<0):\n        n=-n\n    s=0\n    d=len(str(n))\n    for i in range(0,d):\n        s=s+(int(str(n)[i])**d)\n    return s==n\ndef isOct(n) : \n    '''\n    Write a python function to find whether a given number is octadecimal number or not.\n    '''\n    if(n==0):\n        return False\n    elif(n==1):\n        return False\n    elif(n<0):\n        n=-n\n    s=0\n    d=len(str(n))\n    for i in range(0,d):\n        s=s+(int(str(n)[i])**d)\n    return s==n\ndef isBin(n) : \n    '''\n    Write a python function to find whether a given number is binary number or not.\n    '''\n    if(n==0):\n        return False\n    elif(n==1):\n        return False\n    elif(n<0):\n        n=-n\n    s=0\n    d=len(str(n))\n    for i in range(0,d):\n        s=s+(int(str(n)[i])**d)\n    return s==n\ndef isFibonacci(n) : \n    '''\n    Write a python function to find whether a given number is a Fibonacci number or not.\n    '''\n    if(n==0):\n        return False\n    elif(n==1):\n        return True\n    elif(n<0):\n        n=-n\n    a=0\n    b=1\n    for i in range(2,n):\n        c=a+b\n        a=b\n        b=c\n    return b==n\ndef isInformal(n) : \n    '''\n    Write a python function to find whether a given number is an informal number or not.\n    '''\n    if(n==0):\n        return False\n    elif(n==1):\n        return False\n    elif(n<0):\n        n=-n\n    s=0\n    d=len(str(n))\n    for i in range(0,d):\n        s=s+(int(str(n)[i])**d)\n    if(s==n):\n        return True\n    return False\ndef isKaprekarNumber(n) : \n    '''\n    Write a python function to find whether a given number is a Kaprekar number or not.\n    '''\n    if(n==0):\n        return True\n    elif(n==1):\n        return False\n    elif(n<0):\n        n=-n\n    s=0\n    d=len(str(n))\n    for i in range(0,d):\n        s=s+(int(str(n)[i])**d)\n    t=n+s\n    if(t==n):\n        return True\n    return False\ndef isAscending(n) : \n    '''\n    Write a python function to find whether a given number is an ascending number or not.\n    '''\n    if(n==0):\n        return True\n    elif(n==1):\n        return True\n    elif(n<0):\n        n=-n\n    s=0\n    d=len(str(n))\n    for i in range(0,d):\n        s=s+(int(str(n)[i])**d)\n    if(s==n):\n        return True\n    return False\ndef isDescending(n) : \n    '''\n    Write a python function to find whether a given number is a descending number or not.\n    '''\n    if(n==0):\n        return False\n    elif(n==1):\n        return False\n    elif(n<0):\n        n=-n\n    s=0\n    d=len(str(n))\n    for i in range(0,d):\n        s=s+(int(str(n)[i])**d)\n    if(s==n):\n        return True\n    return False\ndef isLeap(n) : \n    '''\n    Write a python function to find whether a given year is a leap year or not.\n    '''\n    if(n==0):\n        return False"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2,n) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum = sum + i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            else:\n                sum += n/i\n    return sum\ndef countFactor(n) : \n    '''\n    Write a python function to find the count of factors of a number.\n    '''\n    i = 1\n    count = 0\n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count\ndef kth_smallest(l, k): \n    # Find median of list \n    if len(l) % 2!= 0: \n        median = l[len(l) / 2] \n    else: \n        median = (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    # Check if median is smaller than kth element\n    if l.index(median) < k: \n        if len(l) % 2!= 0: \n            return l[len(l) / 2 + 1] \n        else: \n            return (l[len(l) / 2 + 1] + l[len(l) / 2]) / 2\n    else: \n        return l[k] \ndef circular_shift(l, i): \n    return l[i:] + l[:i] \ndef reverse(l): \n    return l[::-1] \ndef circular_sort(l): \n    for i in range(len(l)): \n        swapped = False \n        for j in range(len(l) - i - 1): \n            if l[j] > l[j+1]: \n                l[j], l[j+1] = l[j+1], l[j] \n                swapped = True \n        if not swapped: \n            break \n    return l \ndef circular_count(l, value): \n    return l.count(value) \ndef circular_count_morethan(l, value): \n    return len([i for i in l if i > value]) \ndef circular_count_lessthan(l, value): \n    return len([i for i in l if i < value]) \ndef circular_count_equalto(l, value): \n    return len([i for i in l if i == value]) \ndef circular_count_over(l, value): \n    return len([i for i in l if i > value]) \ndef circular_count_below(l, value): \n    return len([i for i in l if i < value]) \ndef circular_count_morethanorequalto(l, value): \n    return len([i for i in l if i >= value]) \ndef circular_count_lessthanorequalto(l, value): \n    return len([i for i in l if i <= value]) \ndef circular_count_equaltoorequalto(l, value): \n    return len([i for i in l if i == value]) \ndef circular_count_morethanorequaltoorequalto(l, value): \n    return len([i for i in l if i >= value or i >= value]) \ndef circular_count_lessthanorequaltoorequalto(l, value): \n    return len([i for i in l if i <= value or i <= value]) \ndef circular_count_morethanorequaltoup(l, value): \n    return len([i for i in l if i >= value or i >= value]) \ndef circular_count_lessthanorequaltoup(l, value): \n    return len([i for i in l if i <= value or i <= value]) \ndef circular_count_equaltoorequaltoup(l, value): \n    return len([i for i in l if i == value or i == value]) \ndef circular_count_morethanorequaltoup(l, value): \n    return len([i for i in l if i >= value or i >= value]) \ndef circular_count_lessthanorequaltoup(l, value): \n    return len([i for i in l if i <= value or i <= value]) \ndef circular_count_equaltoorequaltoup(l, value): \n    return len([i for i in l if i == value or i == value]) \ndef circular_count_morethanorequaltoup(l, value): \n    return len([i for i in l if i >= value or i >= value]) \ndef circular_count_lessthanorequaltooup(l, value): \n    return len([i for i in l if i <= value or i <= value]) \ndef circular_count_equaltoorequaltooup(l, value): \n    return len([i for i in l if i == value or i == value]) \ndef circular_count_lessthanorequaltoup(l, value): \n    return len([i for i in l if i <= value or i <= value]) \ndef circular_count_equaltoorequaltooup(l, value): \n    return len([i for i in l if i == value or i == value]) \ndef circular_count_morethanorequaltooup(l, value): \n    return len([i for i in l if i >= value or i >= value]) \ndef circular_count_lessthanorequaltooup(l, value): \n    return len([i for i in l if i <= value or i <= value]) \ndef circular_count_equaltoorequaltooup(l, value): \n    return len([i for i in l if i == value or i == value]) \ndef circular_count_morethanorequaltooup(l, value): \n    return len([i for i in l if i >= value or i >= value]) \ndef circular_count_lessthanorequaltooup(l, value): \n    return len([i for i in l if i <= value or i <= value]) \ndef circular_count_equaltoorequaltooup(l, value): \n    return len([i for i in l if i == value or i == value]) \ndef circular_count_morethanorequaltooup(l, value): \n    return len([i for i in l if i >= value or i >= value]) \ndef circular_count_lessthanorequaltooup(l, value): \n    return len([i for i in l if i <= value or i <= value]) \ndef circular_count_equaltoorequaltooup(l, value): \n    return len([i for i in l if i == value or i == value]) \ndef circular_count_morethanorequaltooup(l, value): \n    return len([i for i in l if i >= value or i >= value]) \ndef circular_count_lessthanorequaltooup(l, value): \n    return len([i for i in l if i <= value or i <= value]) \ndef circular_count_equaltooup(l, value): \n    return len([i for i in l if i == value or i == value]) \ndef circular_count_morethanorequaltooup(l, value): \n    return len([i for i in l if i >= value or i >= value]) \ndef circular_count_lessthanorequaltooup(l, value): \n    return len([i for i in l if i <= value or i <= value]) \ndef circular_count_equaltooup(l, value): \n    return len([i for i in l if i == value or i == value]) \ndef circular_count_morethanorequaltooup(l, value): \n    return len([i for i in l if i >= value or i >= value]) \ndef circular_count_lessthanorequaltooup(l, value): \n    return len([i for i in l if i <= value or i <= value]) \ndef circular_count_equaltooup(l, value): \n    return len([i for i in l if i == value or i == value]) \ndef circular_count_morethanorequaltooup(l, value): \n    return len([i for i in l if i >= value or i >= value]) \ndef circular_count_lessthanorequaltooup(l, value): \n    return len([i for i in l if i <= value or i <= value]) \ndef circula"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n) :\n        if n % i == 0 :\n            if i % 2 == 0 :\n                sum += i\n    return sum\ndef factors(n) :\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    fact = 1\n    for i in range(1,n+1) :\n        fact *= i\n    return fact\ndef gcd(a,b) :\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    if a < b :\n        temp = a\n        a = b\n        b = temp\n    while b!= 0 :\n        temp = b\n        b = a % b\n        a = temp\n    return a\ndef lcm(a,b) :\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    return a * b / gcd(a,b)\ndef hex2bin(h) :\n    '''\n    Write a python function to convert a given hexadecimal number to binary number.\n    '''\n    temp = '0'\n    for i in range(len(h)):\n        if h[i] == 'A' or h[i] == 'a' :\n            temp += '10'\n        elif h[i] == 'B' or h[i] == 'b' :\n            temp += '11'\n        elif h[i] == 'C' or h[i] == 'c' :\n            temp += '12'\n        elif h[i] == 'D' or h[i] == 'd' :\n            temp += '13'\n        elif h[i] == 'E' or h[i] == 'e' :\n            temp += '14'\n        elif h[i] == 'F' or h[i] == 'f' :\n            temp += '15'\n        else :\n            temp += h[i]\n    bin_num = temp\n    return bin_num\ndef bin2hex(b) :\n    '''\n    Write a python function to convert a given binary number to hexadecimal number.\n    '''\n    temp = ''\n    for i in range(int(len(b)/4)) :\n        j = i * 4\n        temp += hex(int(b[j:j+4],2))[2:]\n    return temp\ndef dec2bin(n) :\n    '''\n    Write a python function to convert a given decimal number to binary number.\n    '''\n    temp = '0'\n    for i in range(len(str(n))) :\n        temp += str(n%2)\n        n /= 2\n    temp = temp[::-1]\n    return temp\ndef bin2dec(n) :\n    '''\n    Write a python function to convert a given binary number to decimal number.\n    '''\n    temp = 0\n    for i in range(len(n)) :\n        temp += int(n[i]) * (2**(len(n)-1-i))\n    return temp\ndef dec2hex(n) :\n    '''\n    Write a python function to convert a given decimal number to hexadecimal number.\n    '''\n    temp = ''\n    if n < 0 :\n        n = n * -1\n        temp += '-'\n    while n > 0 :\n        temp += hex(n % 16)[2:]\n        n /= 16\n    return temp\ndef hex2dec(h) :\n    '''\n    Write a python function to convert a given hexadecimal number to decimal number.\n    '''\n    return bin2dec(hex2bin(h))\ndef oct2bin(o) :\n    '''\n    Write a python function to convert a given octal number to binary number.\n    '''\n    temp = '0'\n    for i in range(len(str(o))) :\n        temp += str(o%2)\n        o /= 2\n    temp = temp[::-1]\n    return temp\ndef bin2oct(b) :\n    '''\n    Write a python function to convert a given binary number to octal number.\n    '''\n    temp = ''\n    for i in range(int(len(b)/3)) :\n        j = i * 3\n        temp += str(int(b[j:j+3],2))\n    return temp\ndef oct2dec(o) :\n    '''\n    Write a python function to convert a given octal number to decimal number.\n    '''\n    return bin2dec(oct2bin(o))\ndef dec2oct(n) :\n    '''\n    Write a python function to convert a given decimal number to octal number.\n    '''\n    temp = ''\n    if n < 0 :\n        n = n * -1\n        temp += '-'\n    while n > 0 :\n        temp += str(n%8)\n        n /= 8\n    return temp\ndef dec2hex(n) :\n    '''\n    Write a python function to convert a given decimal number to hexadecimal number.\n    '''\n    temp = ''\n    if n < 0 :\n        n = n * -1\n        temp += '-'\n    while n > 0 :\n        temp += hex(n%16)[2:]\n        n /= 16\n    return temp\ndef hex2dec(h) :\n    '''\n    Write a python function to convert a given hexadecimal number to decimal number.\n    '''\n    return bin2dec(hex2bin(h))\ndef oct2hex(o) :\n    '''\n    Write a python function to convert a given octal number to hexadecimal number.\n    '''\n    temp = ''\n    for i in range(int(len(o)/3)) :\n        j = i * 3\n        temp += hex(int(o[j:j+3],2))[2:]\n    return temp\ndef hex2oct(h) :\n    '''\n    Write a python function to convert a given hexadecimal number to octal number.\n    '''\n    temp = ''\n    for i in range(int(len(h)/2)) :\n        j = i * 2\n        temp += oct(int(h[j:j+2],16))[2:]\n    return temp\ndef bin2oct(b) :\n    '''\n    Write a python function to convert a given binary number to octal number.\n    '''\n    temp = ''\n    for i in range(int(len(b)/8)) :\n        j = i * 8\n        temp += oct(int(b[j:j+8],2))[2:]\n    return temp\ndef oct2bin(o) :\n    '''\n    Write a python function to convert a given octal number to binary number.\n    '''\n    temp = ''\n    for i in range(len(str(o))) :\n        temp += str(o%2)\n        o /= 2\n    temp = temp[::-1]\n    return temp\ndef bin2oct(b) :\n    '''\n    Write a python function to convert a given binary number to octal number.\n    '''\n    temp = ''\n    for i in range(int(len(b)/8)) :\n        j = i * 8\n        temp += oct(int(b[j:j+8],2))[2:]\n    return temp\ndef hex2oct(h) :\n    '''\n    Write a python function to convert a given hexadecimal number to octal number.\n    '''\n    temp = ''\n    for i in range(int(len(h)/2)) :\n        j = i * 2\n        temp += oct(int(h[j:j+2],16))[2:]\n    return temp\ndef oct2hex(o) :\n    '''\n    Write a python function to convert a given octal number to hexadecimal number.\n    '''\n    temp = ''\n    for i in range(len(str(o))) :\n        temp += hex(int(o[i:i+2],8))[2:]\n    return temp\ndef dec2oct(n) :\n    '''\n    Write a python function to convert a given decimal number to octal number.\n    '''\n    temp = ''\n    if n < 0 :\n        n = n * -1\n        temp += '-'\n    while n > 0 :\n        temp += oct(n%8)["
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    sqrt = int(math.sqrt(n))\n    for i in range(1,sqrt+1):\n        if n%i==0 and (n/i)%2==0:\n            total += i\n            total += (n/i)\n    return total\ndef sumofDivisors(n):\n    '''\n    Write a python function to find the sum of divisors of a number.\n    '''\n    total = 1\n    for i in range(1,n):\n        if n%i==0:\n            total += i\n    return total\ndef countDigit(n) : \n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    total = 0\n    while n:\n        total += 1\n        n //= 10\n    return total\ndef factorial(n) : \n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    total = 1\n    for i in range(1,n+1):\n        total *= i\n    return total\ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef digits(n) : \n    '''\n    Write a python function to calculate the number of digits in a number.\n    '''\n    total = 0\n    while n:\n        total += 1\n        n //= 10\n    return total\ndef primeFactors(n) : \n    '''\n    Write a python function to find all the prime factors of a number.\n    '''\n    ans = []\n    while n%2==0:\n        ans.append(2)\n        n /= 2\n    for i in range(3,int(math.sqrt(n))+1,2):\n        while n%i==0:\n            ans.append(i)\n            n /= i\n    if n > 2:\n        ans.append(n)\n    return ans\ndef pow(a,b) : \n    '''\n    Write a python function to calculate a power of a number.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * pow(a,b-1)\ndef power(a,b) : \n    '''\n    Write a python function to calculate a power of a number.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * power(a,b-1)\ndef fib(n) : \n    '''\n    Write a python function to calculate the nth fibonacci number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fib(n-1)+fib(n-2)\ndef fibonacci(n) : \n    '''\n    Write a python function to calculate the nth fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\ndef powerMatrix(A,n) : \n    '''\n    Write a python function to calculate the power of a matrix.\n    '''\n    if n==0:\n        return\n    elif n==1:\n        for i in range(4):\n            for j in range(4):\n                print A[i][j],\n            print\n    else:\n        powerMatrix(matrix_mult(A,A),n/2)\n        powerMatrix(matrix_mult(A,A),n/2)\ndef matrix_mult(A,B) : \n    '''\n    Write a python function to multiply two matrices.\n    '''\n    C = []\n    for i in range(4):\n        C.append([])\n        for j in range(4):\n            temp = 0\n            for k in range(4):\n                temp += A[i][k]*B[k][j]\n            C[i].append(temp)\n    return C\ndef matrix_power(A,n) : \n    '''\n    Write a python function to calculate the power of a matrix.\n    '''\n    if n==0:\n        return\n    elif n==1:\n        return A\n    else:\n        return matrix_mult(A,matrix_power(A,n-1))\ndef permutation(n,k) : \n    '''\n    Write a python function to calculate the kth permutation of n.\n    '''\n    if k==0:\n        return 1\n    elif k==1:\n        return n\n    else:\n        return n * permutation(n-1,k-1)\ndef combination(n,k) : \n    '''\n    Write a python function to calculate the kth combination of n.\n    '''\n    if k==0:\n        return 1\n    elif k==1:\n        return n\n    else:\n        return n * combination(n-1,k-1) / k\ndef combinacional(n,k) : \n    '''\n    Write a python function to calculate the kth combinacional of n.\n    '''\n    if k==0:\n        return 1\n    elif k==1:\n        return n\n    else:\n        return combinacional(n-1,k-1) + combinacional(n-1,k-1)\ndef multiplicacional(n,k) : \n    '''\n    Write a python function to calculate the kth multiplicacional of n.\n    '''\n    if k==0:\n        return 1\n    elif k==1:\n        return n\n    else:\n        return n * multiplicacional(n,k-1)\ndef multiplicacional2(n,k) : \n    '''\n    Write a python function to calculate the kth multiplicacional of n.\n    '''\n    if k==0:\n        return 1\n    elif k==1:\n        return n\n    else:\n        return multiplicacional(n,k-1)\ndef exponencial(n,k) : \n    '''\n    Write a python function to calculate the kth exponencial of n.\n    '''\n    if k==0:\n        return 1\n    elif k==1:\n        return n\n    else:\n        return n * exponencial(n,k-1)\ndef binomial(n,k) : \n    '''\n    Write a python function to calculate the kth binomial of n.\n    '''\n    if k==0:\n        return 1\n    elif k==1:\n        return n\n    else:\n        return combinacional(n,k-1) / combinacional(n-1,k-1)\ndef binomial2(n,k) : \n    '''\n    Write a python function to calculate the kth binomial of n.\n    '''\n    if k==0:\n        return 1\n    elif k==1:\n        return n\n    else:\n        return combinacional(n,k-1) / combinacional(n-1,k-1)\ndef coeficiente_binomial(n,k) : \n    '''\n    Write a python function to calculate the kth coeficiente of the binomial expansion of n.\n    '''\n    if k==0:\n        return 1\n    elif k==1:\n        return n\n    else:\n        return binomial(n,k) * coeficiente_binomial(n-1,k-1)\ndef stirling1(n,k) : \n    '''\n    Write a python function to calculate the kth Stirling number of 1 of n.\n    '''\n    if k==0:\n        return 1\n    elif k==1:\n        return n\n    else:\n        return stirling1(n-1,k-1) + stirling1(n-1,k)\ndef stirling2(n,k) : \n    '''\n    Write "
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 1\n    for i in range(2, n // 2 + 1) : \n        if n % i == 0 : \n            sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(i for i in range(1,n) if n%i==0 and i%2==0)\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0:\n        return 0\n    return n * (n + 1) * 0.5\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum=0\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            if i%2==0:\n                sum=sum+i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n%2 == 0 :\n        return 2*n\n    else :\n        i = 3\n        sum = 1\n        while i*i <= n :\n            if n%i == 0 :\n                if i%2 == 0 :\n                    sum += i\n                else :\n                    sum += i\n                n /= i\n            else :\n                i += 2\n        return sum\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\w*z\\w*'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    reg = re.compile(r'[a-z]*[z]+[a-z]*')\n    matches = reg.findall(text)\n    return matches\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'\\b[a-z]+\\b', text)\ndef text_match_letterz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]', text)\ndef text_match_letterz_two(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{2}', text)\ndef text_match_letterz_three(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{3}', text)\ndef text_match_letterz_four(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{4}', text)\ndef text_match_letterz_five(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{5}', text)\ndef text_match_letterz_six(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{6}', text)\ndef text_match_letterz_seven(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{7}', text)\ndef text_match_letterz_eight(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{8}', text)\ndef text_match_letterz_nine(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{9}', text)\ndef text_match_letterz_ten(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{10}', text)\ndef text_match_letterz_eleven(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{11}', text)\ndef text_match_letterz_twelve(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{12}', text)\ndef text_match_letterz_thirteen(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{13}', text)\ndef text_match_letterz_fourteen(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{14}', text)\ndef text_match_letterz_fifteen(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{15}', text)\ndef text_match_letterz_sixteen(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{16}', text)\ndef text_match_letterz_seventeen(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{17}', text)\ndef text_match_letterz_eighteen(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{18}', text)\ndef text_match_letterz_nineteen(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{19}', text)\ndef text_match_letterz_twenty(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{20}', text)\ndef text_match_letterz_twentyone(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{21}', text)\ndef text_match_letterz_twentytwo(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{22}', text)\ndef text_match_letterz_twentythree(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{23}', text)\ndef text_match_letterz_twentyfour(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{24}', text)\ndef text_match_letterz_twentyfive(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{25}', text)\ndef text_match_letterz_twentysix(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{26}', text)\ndef text_match_letterz_twentyseven(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{27}', text)\ndef text_match_letterz_twentyeight(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{28}', text)\ndef text_match_letterz_twentynine(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{29}', text)\ndef text_match_letterz_thirty(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{30}', text)\ndef text_match_letterz_thirtyone(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{31}', text)\ndef text_match_letterz_thirtytwo(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{32}', text)\ndef text_match_letterz_thirtythree(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{33}', text)\ndef text_match_letterz_thirtyfour(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{34}', text)\ndef text_match_letterz_thirtyfive(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'[a-z]{35}', text)\ndef text_match_letterz_thirtysix(text):\n    '''\n    Write a function that matches a word containing "
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search(r'[\\w]*z\\w*',text):\n        return 'Found'\n    else:\n        return 'Not Found'\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall('\\w*z\\w*', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\b[a-z]z\\b', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search('\\w*z\\w*',text)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\b(z+)', text)\n    \ndef text_match_z(text):\n    '''\n    Write a function that matches a word containing 'z' except for the letter 'z' itself.\n    '''\n    return re.search(r'z(.*)z', text)\n    \ndef text_match_bz(text):\n    '''\n    Write a function that matches a word containing 'b' or 'z', but not both.\n    '''\n    return re.search(r'b(?=\\s|z)', text)\n    \ndef text_match_bz_b(text):\n    '''\n    Write a function that matches a word containing 'b' or 'z', but not both,\n    except for the letter 'b'.\n    '''\n    return re.search(r'b(?=\\s|z|b)', text)\n    \ndef text_match_bz_b_b(text):\n    '''\n    Write a function that matches a word containing 'b' or 'z', but not both,\n    except for the letter 'b'. The letter 'b' itself is optional.\n    '''\n    return re.search(r'b(?=\\s|z|b)(.*?b)', text)\n    \ndef text_match_bz_b_b_b(text):\n    '''\n    Write a function that matches a word containing 'b' or 'z', but not both,\n    except for the letter 'b'. The letter 'b' itself is optional. The letter 'b' is\n    optional at the start and end of the word.\n    '''\n    return re.search(r'(.*?b)(?=b|$|b|z)', text)\n    \ndef text_match_bz_b_b_b_b_b(text):\n    '''\n    Write a function that matches a word containing 'b' or 'z', but not both,\n    except for the letter 'b'. The letter 'b' itself is optional. The letter 'b' is\n    optional at the start and end of the word. The letter 'b' is optional at the start\n    of the word and the end of the word.\n    '''\n    return re.search(r'(?=b)(.*?b)(?=b|$)', text)\n    \ndef text_match_bz_b_b_b_b_b_b(text):\n    '''\n    Write a function that matches a word containing 'b' or 'z', but not both,\n    except for the letter 'b'. The letter 'b' itself is optional. The letter 'b' is\n    optional at the start and end of the word. The letter 'b' is optional at the start\n    and the end of the word. The letter 'b' is optional at the start and the end of the\n    word, but it is not optional in the middle.\n    '''\n    return re.search(r'(?=b)(.*?b)(?=b|$|b)', text)\n    \ndef text_match_bz_b_b_b_b_b_b_b(text):\n    '''\n    Write a function that matches a word containing 'b' or 'z', but not both,\n    except for the letter 'b'. The letter 'b' itself is optional. The letter 'b' is\n    optional at the start and end of the word. The letter 'b' is optional at the start\n    and the end of the word. The letter 'b' is optional at the start and the end of the\n    word, but it is not optional in the middle. The letter 'b' is optional at the start\n    and the end of the word, but it is not optional in the middle.\n    '''\n    return re.search(r'(?=b)(.*?b)(?=b|$|b|(?<=b)b)', text)\n    \ndef text_match_bz_b_b_b_b_b_b_b_b(text):\n    '''\n    Write a function that matches a word containing 'b' or 'z', but not both,\n    except for the letter 'b'. The letter 'b' itself is optional. The letter 'b' is\n    optional at the start and end of the word. The letter 'b' is optional at the start\n    and the end of the word. The letter 'b' is optional at the start and the end of the\n    word, but it is not optional in the middle. The letter 'b' is optional at the start\n    and the end of the word, but it is not optional in the middle. The letter 'b' is\n    optional at the start and the end of the word, but it is not optional in the middle.\n    '''\n    return re.search(r'(?=b)(.*?b)(?=b|$|b|(?<=b)b|(?<=b)b|b|(?<=b)b|b)', text)\n    \ndef text_match_bz_b_b_b_b_b_b_b_b(text):\n    '''\n    Write a function that matches a word containing 'b' or 'z', but not both,\n    except for the letter 'b'. The letter 'b' itself is optional. The letter 'b' is\n    optional at the start and end of the word. The letter 'b' is optional at the start\n    and the end of the word. The letter 'b' is optional at the start and the end of the\n    word, but it is not optional in the middle. The letter 'b' is optional at the start\n    and the end of the word, but it is not optional in the middle. The letter 'b' is\n    optional at the start and the end of the word, but it is not optional in the middle.\n    The letter 'b' is optional at the start and the end of the word, but it is not\n    optional in the middle. The letter 'b' is optional at the start and the end of the\n    word, but it is not optional in the middle. The letter 'b' is optional at the start\n    and the end of the word, but it is not optional in the middle.\n    '''\n    return re.search(r'(?=b)(.*?b)(?=b|$|b|(?<=b)b|(?<=b)b|b|(?<=b)b|b|(?<=b)b|b|(?<=b)b|b)', text)\n    \ndef text_match_bz_b_b_b_b_b_b_b_b(text):\n    '''\n    Write a function that matches a word containing 'b' or 'z', but not both,\n    except for the letter 'b'. The letter 'b' itself is optional. The letter 'b' is\n    optional at the start and end of the word. The letter 'b' is optional at the start\n    and the end of the word. The letter 'b' is optional at the start and the end of the\n    word, but it is not optional in the middle. The letter 'b' is optional at the start\n    and the end of the word, but it is not optional in the middle. The letter 'b' is\n    optional at the start and the end of the word, but it is not optional in the middle.\n    The letter 'b' is optional at the start and the end of the word, but it is not\n    optional in the middle. The letter 'b' is optional at the start and the end of the\n    word, but it is not optional in the middle. The letter 'b' is optional at the start\n    and the end of the word, but it is not optional in the middle. The letter 'b' is\n    optional at the start and the end of the word, but it is not optional in the middle.\n    The letter 'b' is optional at the start and the end of the word, but it is not\n    optional in the middle. The letter 'b' is optional at the start and the end of the\n    word, but it is not optional in the middle. The letter 'b' is optional at the start\n    and the end of the word, but it is not optional in the middle.\n    '''\n    return re.search(r'(?=b)(.*?b)(?=b|$|b|(?<=b)b|(?<=b)b|b|(?<=b)b|b|(?<=b)b|b|(?<=b)b|b|(?<="
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    print re.search(r'\\w*z\\w*',text)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(r'\\w*z\\w*', text)\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    if monthnum2 == 1:\n        print (\"January has 31 days\")\n    elif monthnum2 == 2:\n        print (\"February has 28 days\")\n    elif monthnum2 == 3:\n        print (\"March has 31 days\")\n    elif monthnum2 == 4:\n        print (\"April has 30 days\")\n    elif monthnum2 == 5:\n        print (\"May has 31 days\")\n    elif monthnum2 == 6:\n        print (\"June has 30 days\")\n    elif monthnum2 == 7:\n        print (\"July has 31 days\")\n    elif monthnum2 == 8:\n        print (\"August has 31 days\")\n    elif monthnum2 == 9:\n        print (\"September has 30 days\")\n    elif monthnum2 == 10:\n        print (\"October has 31 days\")\n    elif monthnum2 == 11:\n        print (\"November has 30 days\")\n    elif monthnum2 == 12:\n        print (\"December has 31 days\")\n    else:\n        print (\"Invalid input\")\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return True\n    elif monthnum2 == 2:\n        return True\n    elif monthnum2 == 3:\n        return True\n    elif monthnum2 == 4:\n        return True\n    elif monthnum2 == 5:\n        return True\n    elif monthnum2 == 6:\n        return True\n    elif monthnum2 == 7:\n        return True\n    elif monthnum2 == 8:\n        return True\n    elif monthnum2 == 9:\n        return True\n    elif monthnum2 == 10:\n        return True\n    elif monthnum2 == 11:\n        return True\n    elif monthnum2 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    return monthnum2 in monthnum_number\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    else:\n        return 30\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        print \"31\"\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        print \"30\"\n    elif monthnum2 == 2:\n        print \"29\"\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    return monthnum2 in [1,3,5,7,8,10,12]\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2==2 and (year2%4)==0 and (year2%100)!=0 or (year2%400)==0:\n        print(\"The given year has 29 days in February.\")\n    elif monthnum2==2:\n        print(\"The given year has 28 days in February.\")\n    elif monthnum2>2:\n        print(\"The given year has %s days in February.\"%(monthnum2))\n    else:\n        print(\"The given year has %s days in February.\"%(monthnum2))\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    print monthnum2, \" - 31 days\"\n    print monthnum2, \" - 30 days\"\n    print monthnum2, \" - 29 days\"\n    print monthnum2, \" - 28 days\"\n    print monthnum2, \" - 27 days\"\n    print monthnum2, \" - 26 days\"\n    print monthnum2, \" - 25 days\"\n    print monthnum2, \" - 24 days\"\n    print monthnum2, \" - 23 days\"\n    print monthnum2, \" - 22 days\"\n    print monthnum2, \" - 21 days\"\n    print monthnum2, \" - 20 days\"\n    print monthnum2, \" - 19 days\"\n    print monthnum2, \" - 18 days\"\n    print monthnum2, \" - 17 days\"\n    print monthnum2, \" - 16 days\"\n    print monthnum2, \" - 15 days\"\n    print monthnum2, \" - 14 days\"\n    print monthnum2, \" - 13 days\"\n    print monthnum2, \" - 12 days\"\n    print monthnum2, \" - 11 days\"\n    print monthnum2, \" - 10 days\"\n    print monthnum2, \" - 9 days\"\n    print monthnum2, \" - 8 days\"\n    print monthnum2, \" - 7 days\"\n    print monthnum2, \" - 6 days\"\n    print monthnum2, \" - 5 days\"\n    print monthnum2, \" - 4 days\"\n    print monthnum2, \" - 3 days\"\n    print monthnum2, \" - 2 days\"\n    print monthnum2, \" - 1 days\"\n    print monthnum2, \" - 0 days\"\n    print monthnum2, \" - -1 days\"\n    print monthnum2, \" - -2 days\"\n    print monthnum2, \" - -3 days\"\n    print monthnum2, \" - -4 days\"\n    print monthnum2, \" - -5 days\"\n    print monthnum2, \" - -6 days\"\n    print monthnum2, \" - -7 days\"\n    print monthnum2, \" - -8 days\"\n    print monthnum2, \" - -9 days\"\n    print monthnum2, \" - -10 days\"\n    print monthnum2, \" - -11 days\"\n    print monthnum2, \" - -12 days\"\n    print monthnum2, \" - -13 days\"\n    print monthnum2, \" - -14 days\"\n    print monthnum2, \" - -15 days\"\n    print monthnum2, \" - -16 days\"\n    print monthnum2, \" - -17 days\"\n    print monthnum2, \" - -18 days\"\n    print monthnum2, \" - -19 days\"\n    print monthnum2, \" - -20 days\"\n    print monthnum2, \" - -21 days\"\n    print monthnum2, \" - -22 days\"\n    print monthnum2, \" - -23 days\"\n    print monthnum2, \" - -24 days\"\n    print monthnum2, \" - -25 days\"\n    print monthnum2, \" - -26 days\"\n    print monthnum2, \" - -27 days\"\n    print monthnum2, \" - -28 days\"\n    print monthnum2, \" - -29 days\"\n    print monthnum2, \" - -30 days\"\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [i[::-1] for i in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for word in stringlist:\n        newlist.append(word[::-1])\n    return newlist\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist.reverse()\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [x[::-1] for x in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for s in stringlist:\n        s = s[::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversestringlist = []\n    for string in stringlist:\n        reversestringlist.append(string[::-1])\n    return reversestringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [s[::-1] for s in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist = list(stringlist)\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    # First we want to reverse the string values in the list of strings.\n    # We will leverage the fact that the first string is always a blank string\n    # so we can just loop over the strings in the list and replace the\n    # current string with the next in the list.\n    \n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    \n    # Here we are returning the modified list, but we could have just returned\n    # the new string list.\n    \n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [str[::-1] for str in stringlist]\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # start with the first sublist\n    min_length = lst[0][1]\n    min_list = lst[0]\n    # find the rest of the sublist\n    for i in range(1, len(lst)):\n        if lst[i][1] < min_length:\n            min_length = lst[i][1]\n            min_list = lst[i]\n    return min_list\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    m = len(lst[0]) \n    for i in lst: \n        if len(i) < m: \n            m = len(i) \n    return m \n    \ndef longest_common_substr(s1, s2):\n    '''\n    Write a python function to find the longest common substring in a string pair.\n    '''\n    m = [[0]*(1+len(s2)) for i in xrange(1+len(s1))] \n    longest, x_longest = 0, 0\n    for x in xrange(1, 1+len(s1)): \n        for y in xrange(1, 1+len(s2)): \n            if s1[x-1] == s2[y-1]: \n                m[x][y] = m[x-1][y-1]+1\n                if m[x][y] > longest: \n                    longest = m[x][y] \n                    x_longest = x \n    return s1[x_longest-longest: x_longest] \n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    for i in range(1,len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = lst[i]\n    return min_lst\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for s in lst[1:]:\n        if len(s) < min_len:\n            min_len = len(s)\n            min_lst = s\n    return min_lst\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    i = 0\n    j = 0\n    min = len(lst[0])\n    for i in range(len(lst)):\n        if min > len(lst[i]):\n            min = len(lst[i])\n            j = i\n    print(lst[j])\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minimum=len(lst[0])\n    for i in lst:\n        if(len(i)<minimum):\n            minimum=len(i)\n    return lst[lst.index(minimum)]\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minlen = len(lst[0])\n    minlst = lst[0]\n    for l in lst:\n        if len(l) < minlen:\n            minlen = len(l)\n            minlst = l\n    return minlst\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for item in lst:\n        if min_length > len(item):\n            min_length = len(item)\n            min_sublist = item\n    return min_sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    count = 0\n    for i in lst:\n        if len(i)>count:\n            count = len(i)\n    return count\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    l = len(lst)\n    i = 0\n    j = 0\n    min = l\n    for i in range(l-1):\n        for j in range(i+1,l):\n            if min > len(lst[i:j]):\n                min = len(lst[i:j])\n                min_index = (i,j)\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    if l < 0 or b < 0:\n        print \"Error: Negative inputs\"\n    else:\n        return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(l * b)\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return \"\".join([c for c in str1 if c.isalpha()])\ndef f(str1,str2):\n    '''\n    Write a function that takes two strings as arguments and returns the distance\n    between them. The distance is defined as the number of characters that differ\n    between the two strings.\n    '''\n    l1=remove_uppercase(str1).lower()\n    l2=remove_uppercase(str2).lower()\n    if l1==l2:\n        return 0\n    else:\n        count=0\n        for i in range(len(l1)):\n            if l1[i]!=l2[i]:\n                count+=1\n    return count\ndef f1(str1,str2):\n    '''\n    Write a function that takes two strings as arguments and returns the\n    longest common substring.\n    '''\n    l1=remove_uppercase(str1).lower()\n    l2=remove_uppercase(str2).lower()\n    max1=0\n    max2=0\n    for i in range(len(l1)-1):\n        for j in range(len(l2)-1):\n            if l1[i]==l2[j]:\n                if max1<i+1:\n                    max1=i+1\n                if max2<j+1:\n                    max2=j+1\n                j+=1\n            else:\n                break\n    return l1[max1:max1+max2]\ndef f2(str1,str2):\n    '''\n    Write a function that takes two strings as arguments and returns the\n    smallest common superstring.\n    '''\n    l1=remove_uppercase(str1).lower()\n    l2=remove_uppercase(str2).lower()\n    l1+='$'\n    l2+='$'\n    l1_set=set(l1)\n    l2_set=set(l2)\n    l1_set=l1_set.difference(l2_set)\n    l2_set=l2_set.difference(l1_set)\n    l1_list=list(l1_set)\n    l2_list=list(l2_set)\n    l1_list.sort()\n    l2_list.sort()\n    l1_list.insert(0,'$')\n    l2_list.insert(0,'$')\n    l1_str=''.join(l1_list)\n    l2_str=''.join(l2_list)\n    max1=0\n    max2=0\n    for i in range(len(l1_str)-1):\n        for j in range(len(l2_str)-1):\n            if l1_str[i]==l2_str[j]:\n                if max1<i+1:\n                    max1=i+1\n                if max2<j+1:\n                    max2=j+1\n                j+=1\n            else:\n                break\n    return l1_str[max1:max1+max2]\ndef f3(str1,str2):\n    '''\n    Write a function that takes two strings as arguments and returns the\n    smallest common superstring.\n    '''\n    l1=remove_uppercase(str1).lower()\n    l2=remove_uppercase(str2).lower()\n    l1+='$'\n    l2+='$'\n    l1_set=set(l1)\n    l2_set=set(l2)\n    l1_set=l1_set.difference(l2_set)\n    l2_set=l2_set.difference(l1_set)\n    l1_list=list(l1_set)\n    l2_list=list(l2_set)\n    l1_list.sort()\n    l2_list.sort()\n    l1_list.insert(0,'$')\n    l2_list.insert(0,'$')\n    l1_str=''.join(l1_list)\n    l2_str=''.join(l2_list)\n    max1=0\n    max2=0\n    for i in range(len(l1_str)-1):\n        for j in range(len(l2_str)-1):\n            if l1_str[i]==l2_str[j]:\n                if max1<i+1:\n                    max1=i+1\n                if max2<j+1:\n                    max2=j+1\n                j+=1\n            else:\n                break\n    return l1_str[max1:max1+max2]\ndef f4(str1,str2):\n    '''\n    Write a function that takes two strings as arguments and returns the\n    longest common substring.\n    '''\n    l1=remove_uppercase(str1).lower()\n    l2=remove_uppercase(str2).lower()\n    l1+='$'\n    l2+='$'\n    l1_set=set(l1)\n    l2_set=set(l2)\n    l1_set=l1_set.difference(l2_set)\n    l2_set=l2_set.difference(l1_set)\n    l1_list=list(l1_set)\n    l2_list=list(l2_set)\n    l1_list.sort()\n    l2_list.sort()\n    l1_list.insert(0,'$')\n    l2_list.insert(0,'$')\n    l1_str=''.join(l1_list)\n    l2_str=''.join(l2_list)\n    max1=0\n    max2=0\n    for i in range(len(l1_str)-1):\n        for j in range(len(l2_str)-1):\n            if l1_str[i]==l2_str[j]:\n                if max1<i+1:\n                    max1=i+1\n                if max2<j+1:\n                    max2=j+1\n                j+=1\n            else:\n                break\n    return l1_str[max1:max1+max2]\ndef f5(str1,str2):\n    '''\n    Write a function that takes two strings as arguments and returns the\n    longest common substring.\n    '''\n    l1=remove_uppercase(str1).lower()\n    l2=remove_uppercase(str2).lower()\n    l1+='$'\n    l2+='$'\n    l1_set=set(l1)\n    l2_set=set(l2)\n    l1_set=l1_set.difference(l2_set)\n    l2_set=l2_set.difference(l1_set)\n    l1_list=list(l1_set)\n    l2_list=list(l2_set)\n    l1_list.sort()\n    l2_list.sort()\n    l1_list.insert(0,'$')\n    l2_list.insert(0,'$')\n    l1_str=''.join(l1_list)\n    l2_str=''.join(l2_list)\n    max1=0\n    max2=0\n    for i in range(len(l1_str)-1):\n        for j in range(len(l2_str)-1):\n            if l1_str[i]==l2_str[j]:\n                if max1<i+1:\n                    max1=i+1\n                if max2<j+1:\n                    max2=j+1\n                j+=1\n            else:\n                break\n    return l1_str[max1:max1+max2]\ndef f6(str1,str2):\n    '''\n    Write a function that takes two strings as arguments and returns the\n    longest common substring.\n    '''\n    l1=remove_uppercase(str1).lower()\n    l2=remove_uppercase(str2).lower()\n    l1+='$'\n    l2+='$'\n    l1_set=set(l1)\n    l2_set=set(l2)\n    l1_set=l1_set"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[A-Z]', '', str1)\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(\"[A-Z]+\",\"\",str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return ''.join(str1.split(str1.upper()))\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return \"\".join([i for i in str1 if not i.isupper()])\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    result = ''\n    for i in range(len(str1)):\n        if str1[i].islower():\n            result += str1[i]\n    return result\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if str1=='':\n        return str1\n    elif str1[0].isupper():\n        return remove_uppercase(str1[1:])\n    else:\n        return str1[0] + remove_uppercase(str1[1:])\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('',str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i].islower():\n            str2+=str1[i]\n    return str2\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str = \"\"\n    for s in str1:\n        if s.islower():\n            new_str += s\n    return new_str\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst]\n    #return map(lambda x: x[0], lst)\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    out = [] \n    for i in lst: \n        out.append(i[0]) \n    return out \n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = [item[0] for item in lst] \n    return result \n    \n    "
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Create an empty list. \n    first = [] \n    # Iterate the list and get the first element of each sublist. \n    for sublist in lst: \n        first.append(sublist[0]) \n    return first \n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    ans = []\n    for i in range(len(lst)):\n        ans.append(lst[i][0])\n    return ans\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sub_list in lst: \n        yield sub_list[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    d = dict()\n    for i in str:\n        if i.isupper():\n            d[i] = d.get(i, 0) + 1\n    print (d)\n    \n    \nupper_ctr('python program')\n    \ndef replace_comma(str):\n    '''\n    Write a python function to replace commas in a string with spaces. \n    '''\n    str = str.replace('/','')\n    str = str.replace(',','')\n    print(str)\n    \n    \nreplace_comma('a,b,c,d,e,f')\n    \ndef remove_all_spaces(str):\n    '''\n    Write a python function to remove all spaces from a given string.\n    '''\n    s = ''\n    for i in str:\n        if not i =='':\n            s += i\n    print(s)\n    \n    \nremove_all_spaces('     ')\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if ord(i)>=65 and ord(i)<=90:\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count=0\n    for c in str:\n        if c.isupper():\n            count+=1\n    return count\n    \ndef upper_iter(str):\n    '''\n    Write a python function to count the upper case characters in a given string using iteration.\n    '''\n    count=0\n    for c in str:\n        if c.isupper():\n            count+=1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(1 for c in str if c.isupper())\n    \ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    return sum(1 for c in str if c.islower())\n    \ndef special_char_ctr(str):\n    '''\n    Write a python function to count the special characters in a given string.\n    '''\n    return sum(1 for c in str if c in ',.()-_!?')\n    \ndef special_char_ctr_exclude(str):\n    '''\n    Write a python function to count the special characters excluding ',' and '(' and ')'.\n    '''\n    return sum(1 for c in str if c not in ',()-_!?')\n    \ndef count_space(str):\n    '''\n    Write a python function to count the white spaces in a given string.\n    '''\n    return sum(1 for c in str if c==' ')\n    \ndef count_digit(str):\n    '''\n    Write a python function to count the digits in a given string.\n    '''\n    return sum(1 for c in str if c.isdigit())\n    \ndef count_vowels(str):\n    '''\n    Write a python function to count the vowels in a given string.\n    '''\n    return sum(1 for c in str if c in 'aeiouAEIOU')\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for c in str:\n        if c.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    \n    return sum(1 for c in str if c.isupper())\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    n = 0\n    for c in str:\n        if c.isupper():\n            n += 1\n    return n\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    counter = 0\n    for i in str:\n        if(i.isupper()):\n            counter+=1\n    return counter\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    #lower = 0\n    #upper = 0\n    #for i in str:\n    #    if i.isupper():\n    #        upper += 1\n    #    elif i.islower():\n    #        lower += 1\n    #return [lower, upper]\n    return str.count('UPPERCASE')\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_ctr = 0\n    for char in str:\n        if char.isupper():\n            upper_ctr += 1\n    return upper_ctr\ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    lower_ctr = 0\n    for char in str:\n        if char.islower():\n            lower_ctr += 1\n    return lower_ctr\ndef digit_ctr(str):\n    '''\n    Write a python function to count the digits in a given string.\n    '''\n    digit_ctr = 0\n    for char in str:\n        if char.isdigit():\n            digit_ctr += 1\n    return digit_ctr\ndef symbol_ctr(str):\n    '''\n    Write a python function to count the symbols in a given string.\n    '''\n    symbol_ctr = 0\n    for char in str:\n        if not char.isalnum():\n            symbol_ctr += 1\n    return symbol_ctr\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combo_list = []\n    for i in range(len(list1)+1):\n        for j in range(i+1, len(list1)+1):\n            combo_list.append(list1[i:j])\n    return combo_list\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    results = []\n    for i in range(len(list1)):\n        if len(list1) == 1:\n            results.append([list1[i]])\n        else:\n            results = results + combinations_list(list1[i+1:]) + [list1[i]] + combinations_list(list1[:i])\n    return results\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) <= 1:\n        return [[list1[0]]]\n    return [ [list1[0]] + x for x in combinations_list(list1[1:])] + combinations_list(list1[1:])\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # list1 = [1,2,3,4,5,6]\n    # temp = [[1,2,3,4], [1,2,3,5], [1,2,3,6], [1,2,4,5], [1,2,4,6], [1,2,5,6], [1,3,4,5], [1,3,4,6], [1,3,5,6], [1,4,5,6], [2,3,4,5], [2,3,4,6], [2,3,5,6], [2,4,5,6], [3,4,5,6]]\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [list1]\n    res = []\n    for i in range(len(list1)-1):\n        res += combinations_list(list1[i+1:])\n    for i in range(len(list1)):\n        res += [list1[i] + rest for rest in combinations_list(list1[:i]+list1[i+1:])]\n    return res\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations\n    list1 = list(combinations(list1,2))\n    return list1\n    \ndef remove_duplicates(list1):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    list2 = []\n    for element in list1:\n        if element not in list2:\n            list2.append(element)\n    return list2\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list_len = len(list1)\n    result = []\n    for i in range(list_len):\n        for j in range(list_len):\n            if j > i:\n                temp = []\n                temp.extend(list1[i])\n                temp.extend(list1[j])\n                result.append(temp)\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    # Your code here\n    #print (list1)\n    outlist = []\n    \n    if len(list1) == 1:\n        outlist = [list1]\n    else:\n        outlist = []\n        \n        for i in range(1,len(list1)):\n            \n            sublist1 = list1[0:i]\n            sublist2 = list1[i:]\n            \n            outlist1 = combinations_list(sublist1)\n            outlist2 = combinations_list(sublist2)\n            \n            for outlist1sublist in outlist1:\n                for outlist2sublist in outlist2:\n                    outlist.append(outlist1sublist + outlist2sublist)\n    return outlist\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    def combinations(list1, result=[]):\n        if len(list1) == 0:\n            return [result]\n        else:\n            res = []\n            for i, elem in enumerate(list1):\n                res.extend(combinations(list1[i+1:], result + [elem]))\n            return res\n    return combinations(list1)\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [[list1[0]]]\n    else:\n        combo = []\n        for i in range(0,len(list1)):\n            for sub_combo in combinations_list(list1[i+1:]):\n                combo.append([list1[i]]+sub_combo)\n        return combo\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    len1 = len(list1)\n    return [list(x) for x in itertools.combinations(list1, 2)]\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_prod = arr[0]\n    max_prod_i = 0\n    max_prod_j = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            prod = 1\n            for k in range(i, j + 1):\n                prod *= arr[k]\n            if prod > max_prod:\n                max_prod = prod\n                max_prod_i = i\n                max_prod_j = j\n    return max_prod, max_prod_i, max_prod_j\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            # print(arr[i:j])\n            if len(arr[i:j]) == 0:\n                continue\n            product = 1\n            for element in arr[i:j]:\n                product *= element\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here*arr[i])\n        max_so_far = max(max_ending_here, max_so_far)\n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return None\n    \n    dp = [1]*len(arr)\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        dp[i] = max(arr[i], arr[i]*dp[i-1], arr[i]*arr[i-1])\n        max_product = max(dp[i], max_product)\n    \n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_product = arr[0]\n    current_max = arr[0]\n    for i in range(1, len(arr)):\n        # if the current element is negative, reset the current max\n        if arr[i] < 0:\n            current_max = arr[i]\n            # if the current element is bigger than the current max, then current_max is the new max\n            if arr[i] > current_max:\n                current_max = arr[i]\n        else:\n            current_max = max(arr[i], current_max * arr[i])\n        max_product = max(max_product, current_max)\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # max_end(i) = max(max_end(i-1)*arr[i], arr[i])\n    # O(n) time\n    if arr is None or len(arr) == 0:\n        return 0\n    max_end = [0] * len(arr)\n    max_start = [0] * len(arr)\n    max_start[0] = arr[0]\n    max_end[-1] = arr[-1]\n    max_start[-1] = arr[-1]\n    for i in range(1, len(arr)):\n        max_start[i] = max(max_start[i-1]*arr[i], arr[i])\n        max_end[len(arr)-i-1] = max(max_end[len(arr)-i]*arr[len(arr)-i-1], arr[len(arr)-i-1])\n    # get the max product array\n    max_product = max_end[0]\n    for i in range(len(arr)):\n        max_product = max(max_product, max_end[i]*max_start[i])\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        \n        if arr[i] < 0:\n            temp = max_ending_here\n            max_ending_here = max_ending_here * arr[i]\n            max_so_far = max(max_so_far, max_ending_here)\n            max_ending_here = temp\n        else:\n            max_ending_here = max_ending_here * arr[i]\n            max_so_far = max(max_so_far, max_ending_here)\n            \n    return max_so_far\n    \nprint max_subarray_product([-2, -3, -1, 2, 3, -4])\nprint max_subarray_product([1, 2, 3, -1, -2, -3])\nprint max_subarray_product([-1, 1, -1, 1, -1, 1])\nprint max_subarray_product([-2, -1, 1, -1, 1, -1, -1, 2, 1, -1])\nprint max_subarray_product([1, -2, -3, -4])\nprint max_subarray_product([-1, -2, -3])\nprint max_subarray_product([1, -2, -3, 4, 5])\nprint max_subarray_product([-1, -2, -3, -4, -5])\nprint max_subarray_product([1, -2, -3, -4, 5])\nprint max_subarray_product([-1, -2, -3, -4, -5])\nprint max_subarray_product([1, -2, -3, -4, -5, 6, -7, -8, -9, -10])\nprint max_subarray_product([-1, -2, -3, -4, -5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, 5, 6, -7, -8, -9, -10])\nprint max_subarray_product([1, -2, -3, -4, "
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    for i in arr[1:]:\n        max_ending_here = max(i, max_ending_here*i)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) < 3:\n        return 0\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_ending_here, max_so_far = arr[0], arr[0]\n    for i in xrange(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here*arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    result = True\n    for key, value in dict.items():\n        if value!= n:\n            result = False\n            break\n    return result\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key, value in dict.iteritems():\n        if value!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    \n    if len(dict.values()) <= 1:\n        return True\n    \n    if n in dict.values():\n        return True\n    else:\n        return False\n    \n    \n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for x in dict.values():\n        if x!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values()))==1:\n        return True\n    else:\n        return False\n    \n    "
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) < 2:\n        return True\n    else:\n        if n in dict.values():\n            return False\n        else:\n            return check_value(dict, n)\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # n is a key in the dictionary\n    # for dictionary d, check if all values of n are same\n    # return True if all values are same, else return False\n    if n in dict:\n        if all(dict[n] == v for v in dict.values()):\n            return True\n    return False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n == 0:\n        return True\n    if n > len(dict):\n        return True\n    for key in dict:\n        if dict[key]!= dict[0]:\n            return False\n    return True\n    \ndef check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n == 0:\n        return True\n    if n > len(dict):\n        return True\n    for key in dict:\n        if dict[key]!= dict[0]:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    return False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    temp = []\n    for i in dict:\n        temp.append(dict[i])\n    if temp[0] == temp[1]:\n        return True\n    return False\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for i, j in dict1.items():\n        if j:\n            new_dict[i] = j\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, val in dict1.items():\n        if val == '':\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    newdict = {}\n    for k,v in dict1.items():\n        if v!= {}:\n            newdict[k] = v\n    return newdict\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for item in dict1.copy():\n        if not dict1[item]:\n            del dict1[item]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {key:dict1[key] for key in dict1 if dict1[key]}\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k in dict1.copy():\n        if not dict1[k]:\n            del dict1[k]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key in dict1:\n        if dict1[key]!= '':\n            new_dict[key] = dict1[key]\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    \n    \n    for key in dict1:\n        if not dict1[key]:\n            del dict1[key]\n        \n    return dict1\n    \n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    result = dict1.copy()\n    for key in result:\n        if result[key] == []:\n            del result[key]\n    return result\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return -1\n    # first, we need to figure out how many positive and negative numbers in the array \n    negative = 0\n    positive = 0\n    for num in arr:\n        if num < 0:\n            negative += 1\n        else:\n            positive += 1\n    if negative == len(arr):\n        return -1\n    # now, we need to figure out which number is the biggest one. In other words, we need to find the biggest negative number, \n    # then multiply with the biggest positive number \n    max_so_far = -1\n    max_ending_here = -1\n    for i in xrange(0, len(arr)):\n        max_ending_here = max_ending_here * arr[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far\n    \n    \n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return None\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = arr[0]\n    for i in range(1, n):\n        arr[i] = max(arr[i], arr[i-1]*arr[i])\n        max_product = max(arr[i], max_product)\n    return max_product\n    \n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    start, res = 0, 0\n    \n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            start = i\n            res = max(res, arr[i]*arr[i-1])\n        elif arr[i] < arr[i-1]:\n            res = max(res, arr[i-1]*arr[i])\n    \n    return res\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = arr[0]\n    for i in range(1, len(arr)):\n        max_prod = max(arr[i], max_prod*arr[i])\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return arr[0] * arr[1]\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    l = [1]*n\n    r = [1]*n\n    for i in range(1,n):\n        for j in range(0,i):\n            if arr[i]>arr[j]:\n                l[i] = max(l[i],l[j]*arr[i])\n    for i in range(n-2,-1,-1):\n        for j in range(i+1,n):\n            if arr[i]>arr[j]:\n                r[i] = max(r[i],r[j]*arr[i])\n    res = 1\n    for i in range(n):\n        res = max(res,l[i]*r[i])\n    return res\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    global MAX\n    MAX = -1\n    global MIN\n    MIN = 1\n    global max_product_helper(arr)\n    return MAX\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return 0\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return 0\n    left = [0] * len(arr)\n    max_left = [0] * len(arr)\n    left[0] = 1\n    for i in xrange(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            left[i] = left[i - 1]\n        else:\n            left[i] = 1\n    \n    right = [0] * len(arr)\n    max_right = [0] * len(arr)\n    right[len(arr) - 1] = 1\n    for i in xrange(len(arr) - 2, -1, -1):\n        if arr[i] < arr[i + 1]:\n            right[i] = right[i + 1]\n        else:\n            right[i] = 1\n    \n    res = arr[0]\n    for i in xrange(1, len(arr)):\n        max_left[i] = max(max_left[i - 1] * arr[i], arr[i])\n        max_right[i] = max(max_right[i + 1] * arr[i], arr[i])\n        res = max(res, max_left[i], max_right[i])\n    return res\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 0:\n        return\n    for i in range(len(test_tup)-1):\n        yield (test_tup[i], test_tup[i+1])\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    assert isinstance(test_tup, tuple)\n    assert len(test_tup) >= 2\n    tup_len = len(test_tup)\n    for i in range(tup_len-1):\n        yield (test_tup[i], test_tup[i+1])\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    res = []\n    for i in range(len(test_tup)-1):\n        res.append(test_tup[i]+test_tup[i+1])\n    return res\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return test_tup[1] + test_tup[2]\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    list_of_pairs = []\n    for i in range(len(test_tup)):\n        if i == len(test_tup)-1:\n            break\n        else:\n            list_of_pairs.append(test_tup[i] + test_tup[i+1])\n    return list_of_pairs\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple([x+y for x,y in zip(test_tup[:-1],test_tup[1:])])\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    \n    num_elem = len(test_tup)\n    \n    #Initialize a dictionary of dictionary for the resulting numbers\n    new_dict = {}\n    \n    #Loop through the list, and check if the previous element is in the dictionary\n    for i in range(num_elem - 1):\n        #Check if the current element is in the dictionary\n        if test_tup[i] in new_dict:\n            #If so, get the index of the current element, and add the next element\n            new_dict[test_tup[i]].append(test_tup[i + 1])\n        else:\n            #Otherwise, create a new dictionary element with the current element as the key,\n            #and the next element as the value\n            new_dict[test_tup[i]] = [test_tup[i + 1]]\n    \n    #Loop through the dictionary and return the result\n    for key in new_dict:\n        new_dict[key] = sum(new_dict[key])\n    \n    return new_dict\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    a, b = test_tup\n    return a + b\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    def sum_pairwise(tup):\n        '''\n        Input tuple of length n.\n        Output the pairwise sum of the elements.\n        '''\n        if len(tup) <= 1:\n            return tup\n        else:\n            return (tup[0] + tup[1], tup[1] + tup[2])\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    add_p = 0\n    for i in range(0, len(test_tup)):\n        if i == 0:\n            add_p += test_tup[i]\n        else:\n            add_p += test_tup[i] + test_tup[i-1]\n    return add_p\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in arr:\n        result = result * i % n\n    return result\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return reduce(lambda x,y: x*y,arr) % n\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    print arr\n    print n\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # find the remainder\n    remainder = 1\n    for i in arr:\n        remainder = (remainder*i)%n\n    return remainder\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    #a = np.prod(arr, axis=0)\n    a = np.prod(arr)\n    return (a % n)\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    s = 1\n    for i in arr:\n        s = (s * i) % n\n    return s\n    \ndef find_nth_multiple(n):\n    '''\n    Write a python function that finds the nth multiple of 7\n    '''\n    count = 1\n    i = 1\n    while count!= n:\n        i = i + 1\n        count = find_remainder(range(1, i), 7)\n    return i - 1\n    \ndef count_nth_multiple(n):\n    '''\n    Write a python function that returns the number of nth multiples of 7 \n    that do not exist.\n    '''\n    return (n - find_nth_multiple(n)) / 7\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    from functools import reduce\n    prod = reduce(lambda x,y: (x*y)%n, arr)\n    return prod\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = sorted(arr)\n    return sum([arr[i] * arr[(i + 1) % n] for i in range(n)]) % n\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = [int(x) for x in arr]\n    product = 1\n    for i in arr:\n        product = product * i % n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # arr = list(map(int, arr))\n    res = 1\n    for i in range(n):\n        res = (res * arr[i]) % n\n    return res\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if(l[i+1]!= l[i]+1): \n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    #l= [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    a = sorted(l)\n    #print(a)\n    if len(l) % 2 == 1:\n        if a[0] == 1 and a[len(a)-1] == 10:\n            return True\n    elif len(l) % 2 == 0:\n        if a[0] == 1 and a[len(a)-1] == 10:\n            return True\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(1, len(l)): \n        if l[i] - l[i-1]!= 1: \n            return False \n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    x = 0\n    for i in range(len(l)-1):\n        if l[i+1]-l[i]!= 1:\n            x = 1\n            break\n    if x == 1:\n        return False\n    return True\ndef check_Pairs(l):\n    '''\n    Write a python function to check whether the given list contains pairs of numbers or not.\n    '''\n    x = 0\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            x = 1\n            break\n    if x == 1:\n        return False\n    return True\ndef check_Divisible(l):\n    '''\n    Write a python function to check whether the given list contains any number divisible by some other number or not.\n    '''\n    for i in range(len(l)-1):\n        for j in range(i+1,len(l)):\n            if l[i]%l[j] == 0:\n                return True\n    return False\ndef check_Repeating(l):\n    '''\n    Write a python function to check whether the given list contains any repeated number or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return True\n    return False\ndef check_Palindrome(l):\n    '''\n    Write a python function to check whether the given list is a palindrome or not.\n    '''\n    for i in range(len(l)//2):\n        if l[i]!= l[-i-1]:\n            return False\n    return True\ndef check_Sort(l):\n    '''\n    Write a python function to check whether the given list is sorted or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] > l[i+1]:\n            return False\n    return True\ndef check_Repeated(l):\n    '''\n    Write a python function to check whether the given list contains any repeated number or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return True\n    return False\ndef check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    x = 0\n    for i in range(len(l)-1):\n        if l[i+1]-l[i]!= 1:\n            x = 1\n            break\n    if x == 1:\n        return False\n    return True\ndef check_Pairs(l):\n    '''\n    Write a python function to check whether the given list contains pairs of numbers or not.\n    '''\n    x = 0\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            x = 1\n            break\n    if x == 1:\n        return False\n    return True\ndef check_Divisible(l):\n    '''\n    Write a python function to check whether the given list contains any number divisible by some other number or not.\n    '''\n    for i in range(len(l)-1):\n        for j in range(i+1,len(l)):\n            if l[i]%l[j] == 0:\n                return True\n    return False\ndef check_Repeating(l):\n    '''\n    Write a python function to check whether the given list contains any repeated number or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return True\n    return False\ndef check_Palindrome(l):\n    '''\n    Write a python function to check whether the given list is a palindrome or not.\n    '''\n    for i in range(len(l)//2):\n        if l[i]!= l[-i-1]:\n            return False\n    return True\ndef check_Sort(l):\n    '''\n    Write a python function to check whether the given list is sorted or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] > l[i+1]:\n            return False\n    return True\ndef check_Repeated(l):\n    '''\n    Write a python function to check whether the given list contains any repeated number or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return True\n    return False\ndef check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    x = 0\n    for i in range(len(l)-1):\n        if l[i+1]-l[i]!= 1:\n            x = 1\n            break\n    if x == 1:\n        return False\n    return True\ndef check_Pairs(l):\n    '''\n    Write a python function to check whether the given list contains pairs of numbers or not.\n    '''\n    x = 0\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            x = 1\n            break\n    if x == 1:\n        return False\n    return True\ndef check_Divisible(l):\n    '''\n    Write a python function to check whether the given list contains any number divisible by some other number or not.\n    '''\n    for i in range(len(l)-1):\n        for j in range(i+1,len(l)):\n            if l[i]%l[j] == 0:\n                return True\n    return False\ndef check_Repeating(l):\n    '''\n    Write a python function to check whether the given list contains any repeated number or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return True\n    return False\ndef check_Palindrome(l):\n    '''\n    Write a python function to check whether the given list is a palindrome or not.\n    '''\n    for i in range(len(l)//2):\n        if l[i]!= l[-i-1]:\n            return False\n    return True\ndef check_Sort(l):\n    '''\n    Write a python function to check whether the given list is sorted or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] > l[i+1]:\n            return False\n    return True\ndef check_Repeated(l):\n    '''\n    Write a python function to check whether the given list contains any repeated number or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return True\n    return False\ndef check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    x = 0\n    for i in range(len(l)-1):\n        if l[i+1]-l[i]!= 1:\n            x = 1\n            break\n    if x == 1:\n        return False\n    return True\ndef check_Pairs(l):\n    '''\n    Write a python function to check whether the given list contains pairs of numbers or not.\n    '''\n    x = 0\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            x = 1\n            break\n    if x == 1:\n        return False\n    return True\ndef check_Divisible(l):\n    '''\n    Write a python function to check whether the given list contains any number divisible by some other number or not.\n    '''\n    for i in range(len(l)-1):\n        for j in range(i+1,len(l)):\n            if l[i]%l[j] == 0:\n                return True\n    return False\ndef check_Repeating(l):\n    '''\n    Write a python function to check whether the given list contains any repeated number or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return True\n    return False\ndef check_Palindrome(l):\n    ''"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(1, len(l)):\n        if l[i] - l[i-1]!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in xrange(1, len(l)):\n        if l[i-1]!= l[i]:\n            return False\n    return True\n    "
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    for i in test_list1:\n        if i in test_list2:\n            return (i, test_list2.index(i))\n    return None\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1).intersection(set(test_list2)))\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if not test_list1 and not test_list2:\n        return []\n    elif not test_list1:\n        return test_list2\n    elif not test_list2:\n        return test_list1\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result_list = []\n    for element in test_list1:\n        if element in test_list2:\n            result_list.append(element)\n    return result_list\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return [i for i in test_list1 if i in test_list2]\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    dictionary = {}\n    for i in test_list1:\n        if i in dictionary:\n            dictionary[i] += 1\n        else:\n            dictionary[i] = 1\n    for i in test_list2:\n        if i in dictionary:\n            dictionary[i] -= 1\n            if dictionary[i] == 0:\n                del dictionary[i]\n        else:\n            pass\n    tuple_list = []\n    for i in dictionary.keys():\n        if dictionary[i] > 0:\n            tuple_list.append(i)\n    return tuple_list\n    \n    \ndef positive_neg(nums):\n    '''\n    Write a function to sort the numbers in ascending order.\n    '''\n    negative_list = []\n    positive_list = []\n    for i in nums:\n        if i < 0:\n            negative_list.append(i)\n        else:\n            positive_list.append(i)\n    positive_list.sort()\n    negative_list.sort()\n    sorted_list = positive_list + negative_list\n    return sorted_list\n    \n    \ndef return_val(test_dict, k):\n    '''\n    Write a function to return a dictionary value for given key\n    '''\n    for key, value in test_dict.items():\n        if key == k:\n            return value\n        else:\n            pass\n    \n    \ndef max_dict(test_dict):\n    '''\n    Write a function to find maximum value of a dictionary\n    '''\n    return max(test_dict.values())\n    \n    \ndef word_length(test_dict):\n    '''\n    Write a function to find the length of the longest key in a dictionary.\n    '''\n    length = 0\n    for key, value in test_dict.items():\n        if length < len(key):\n            length = len(key)\n    return length\n    \n    \ndef char_count(str1):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n    \n    \ndef substring(str1, start, end):\n    '''\n    Write a function to check if a string is a substring of another string.\n    '''\n    if str1 in str1[start:end]:\n        return True\n    else:\n        return False\n    \n    \ndef word_count(str1):\n    '''\n    Write a function to find the word count in a string\n    '''\n    word_list = str1.split()\n    return len(word_list)\n    \n    \ndef palindrome(str1):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    str2 = str1[::-1]\n    if str1 == str2:\n        return True\n    else:\n        return False\n    \n    \ndef truncate_string(str1, n):\n    '''\n    Write a function to truncate a string after a given length.\n    '''\n    if len(str1) > n:\n        str1 = str1[:n]\n    return str1\n    \n    \ndef concat_string(str1, str2):\n    '''\n    Write a function to concatenate two strings together.\n    '''\n    str3 = str1 + str2\n    return str3\n    \n    \ndef replace_string(str1, old, new):\n    '''\n    Write a function to replace a string using another string.\n    '''\n    str2 = str1.replace(old, new)\n    return str2\n    \n    \ndef count_digit(nums):\n    '''\n    Write a function to count the numbers in a list.\n    '''\n    count = 0\n    for i in nums:\n        if i.isdigit():\n            count += 1\n    return count\n    \n    \ndef count_lower(str1):\n    '''\n    Write a function to count the lower case letters in a string.\n    '''\n    count = 0\n    for i in str1:\n        if i.islower():\n            count += 1\n    return count\n    \n    \ndef count_upper(str1):\n    '''\n    Write a function to count the upper case letters in a string.\n    '''\n    count = 0\n    for i in str1:\n        if i.isupper():\n            count += 1\n    return count\n    \n    \ndef avg_list(nums):\n    '''\n    Write a function to calculate the average value of a list.\n    '''\n    avg = sum(nums)/len(nums)\n    return avg\n    \n    \ndef rotate_string(str1, n):\n    '''\n    Write a function to rotate string in place to the right by given number of times.\n    '''\n    if len(str1) == 0:\n        return str1\n    else:\n        str2 = str1[n % len(str1):] + str1[:n % len(str1)]\n        return str2\n    \n    \ndef is_num_in_list(num, list):\n    '''\n    Write a function to determine if a number is in a list.\n    '''\n    if num in list:\n        return True\n    else:\n        return False\n    \n    \ndef is_alphabet(letter):\n    '''\n    Write a function to determine if a letter is an alphabet.\n    '''\n    if letter.isalpha():\n        return True\n    else:\n        return False\n    \n    \ndef is_even(num):\n    '''\n    Write a function to determine if a number is even.\n    '''\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef convert_to_lowercase(str1):\n    '''\n    Write a function to convert all uppercase characters to lowercase.\n    '''\n    str2 = str1.lower()\n    return str2\n    \n    \ndef calculate_fibonacci(n):\n    '''\n    Write a function to calculate the nth Fibonacci number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return (calculate_fibonacci(n-1) + calculate_fibonacci(n-2))\n    \n    \ndef rotate_string(str1, n):\n    '''\n    Write a function to rotate string in place to the right by given number of times.\n    '''\n    if len(str1) == 0:\n        return str1\n    else:\n        str2 = str1[n % len(str1):] + str1[:n % len(str1)]\n        return str2\n    \n    \ndef fibonacci(n):\n    '''\n    Write a function to find the nth Fibonacci number.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return (fibonacci(n-1) + fibonacci(n-2))\n    \n    \ndef is_vowel(letter):\n    '''\n    Write a function to determine if a letter is a vowel.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if letter in vowels:\n        return True\n    else:\n        return False\n    \n    \ndef is_consonant(letter):\n    '''\n    Write a function to determine if a letter is a consonant.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if letter not in vowels:\n        return True\n    else:\n        return False\n    \n    \ndef count_consonants(str1):\n    '''\n    Write a function to count the number of consonants in a string.\n    '''\n    consonant_count = 0\n    for i in str1:\n        if is_consonant(i):\n            consonant_count += 1\n        else:\n            pass\n    return consonant_count\n    \n    \ndef reverse_string(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    if len(str1) == 0:\n        return str1\n    else:\n        str2 = st"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    output = set(test_list1).intersection(test_list2)\n    return list(output)\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1) > len(test_list2):\n        return tuple_intersection(test_list2, test_list1)\n    i = 0\n    j = 0\n    result = []\n    while i < len(test_list1) and j < len(test_list2):\n        if test_list1[i] == test_list2[j]:\n            result.append(test_list1[i])\n            i += 1\n            j += 1\n        elif test_list1[i] > test_list2[j]:\n            j += 1\n        else:\n            i += 1\n    return tuple(result)\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1) & set(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1).intersection(test_list2))\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=list(str1)\n    index_ch=str1.index(ch)\n    str1[index_ch]=newch\n    return ''.join(str1)\n    \ndef rev(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str1[::-1]\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if str1.count(ch)>0:\n        return str1.replace(ch,newch)\n    else:\n        return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if ch == str1[i]:\n            str1[i] = newch\n    return ''.join(str1)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = list(str1)\n    str1[ch] = newch\n    return ''.join(str1)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = str1.replace(ch,newch)\n    return newstr\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr=str1[:str1.find(ch)]+newch+str1[str1.find(ch)+1:]\n    return newstr\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    return sorted(dict1.items(), key = lambda x:x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_list = sorted(dict1.items(), key=lambda x:x[1], reverse=True)\n    return sorted_list\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    for i in sorted(dict1, key=dict1.get):\n        print (i, dict1[i])\n    return None\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    #make a list of tuples\n    list_of_tups = []\n    for key, value in dict1.items():\n        list_of_tups.append((value,key))\n    #sort the list of tuples\n    sorted_list = sorted(list_of_tups)\n    #make a dictionary of sorted tuples\n    dict1 = {}\n    for i in sorted_list:\n        dict1[i[1]] = i[0]\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    '''\n    Algorithm:\n    Use a list to store key, value pairs\n    Sort the list based on value\n    '''\n    l = []\n    for k,v in dict1.items():\n        l.append((v,k))\n    l.sort()\n    l.reverse()\n    d = {}\n    for k,v in l:\n        d[k] = v\n    return d\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x:x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2 = sorted(dict1.items(),key=lambda x:x[1],reverse=True)\n    return dict2\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.iteritems(), key=lambda x: x[1], reverse=True)\ndef get_top_n(dict1, n):\n    '''\n    Write a function to get the top n items from a dictionary\n    '''\n    return dict1.most_common(n)\ndef get_top_n_items(dict1, n):\n    '''\n    Write a function to get the top n items from a dictionary\n    '''\n    topn = n\n    if n > len(dict1):\n        topn = len(dict1)\n    top_items = dict1.most_common(topn)\n    print top_items\n    dict1 = {}\n    for i in top_items:\n        dict1[i[0]] = i[1]\n    return dict1\ndef get_top_n_words(text, n):\n    '''\n    Write a function to get the top n words from a text.\n    '''\n    words = text.split()\n    counts = Counter(words)\n    return counts.most_common(n)\ndef get_top_n_words_from_file(filename, n):\n    '''\n    Write a function to get the top n words from a text\n    '''\n    words = open(filename).read()\n    counts = Counter(words.split())\n    return counts.most_common(n)\ndef get_top_n_words_file(file, n):\n    '''\n    Write a function to get the top n words from a file\n    '''\n    words = open(file).read()\n    counts = Counter(words.split())\n    return counts.most_common(n)\ndef get_top_n_words_from_file_line_by_line(file, n):\n    '''\n    Write a function to get the top n words from a file\n    '''\n    words = open(file).readlines()\n    counts = Counter(words)\n    return counts.most_common(n)\ndef get_top_n_words_from_file_line_by_line_v2(file, n):\n    '''\n    Write a function to get the top n words from a file\n    '''\n    words = open(file).readlines()\n    counts = Counter(words)\n    return counts.most_common(n)\ndef get_top_n_words_from_file_line_by_line_v3(file, n):\n    '''\n    Write a function to get the top n words from a file\n    '''\n    words = open(file).read()\n    counts = Counter(words.split())\n    return counts.most_common(n)\ndef get_top_n_words_from_file_line_by_line_v4(file, n):\n    '''\n    Write a function to get the top n words from a file\n    '''\n    words = open(file).read()\n    counts = Counter(words.split())\n    return counts.most_common(n)\ndef get_top_n_words_from_file_line_by_line_v5(file, n):\n    '''\n    Write a function to get the top n words from a file\n    '''\n    words = open(file).read()\n    counts = Counter(words.split())\n    return counts.most_common(n)\ndef get_top_n_words_from_file_line_by_line_v6(file, n):\n    '''\n    Write a function to get the top n words from a file\n    '''\n    words = open(file).read()\n    counts = Counter(words.split())\n    return counts.most_common(n)\ndef get_top_n_words_from_file_line_by_line_v7(file, n):\n    '''\n    Write a function to get the top n words from a file\n    '''\n    words = open(file).read()\n    counts = Counter(words.split())\n    return counts.most_common(n)\ndef get_top_n_words_from_file_line_by_line_v8(file, n):\n    '''\n    Write a function to get the top n words from a file\n    '''\n    words = open(file).read()\n    counts = Counter(words.split())\n    return counts.most_common(n)\ndef get_top_n_words_from_file_line_by_line_v9(file, n):\n    '''\n    Write a function to get the top n words from a file\n    '''\n    words = open(file).read()\n    counts = Counter(words.split())\n    return counts.most_common(n)\ndef get_top_n_words_from_file_line_by_line_v10(file, n):\n    '''\n    Write a function to get the top n words from a file\n    '''\n    words = open(file).read()\n    counts = Counter(words.split())\n    return counts.most_common(n)\ndef get_top_n_words_from_file_line_by_line_v11(file, n):\n    '''\n    Write a function to get the top n words from a file\n    '''\n    words = open(file).read()\n    counts = Counter(words.split())\n    return counts.most_common(n)\ndef get_top_n_words_from_file_line_by_line_v12(file, n):\n    '''\n    Write a function to get the top n words from a file\n    '''\n    words = open(file).read()\n    counts = Counter(words.split())\n    return counts.most_common(n)\ndef get_top_n_words_from_file_line_by_line_v13(file, n):\n    '''\n    Write a function to get the top n words from a file\n    '''\n    words = open(file).read()\n    counts = Counter(words.split())\n    return counts.most_common(n)\ndef get_top_n_words_from_file_line_by_line_v14(file, n):\n    '''\n    Write a function to get the top n words from a file\n    '''\n    words = open(file).read()\n    counts = Counter(words.split())\n    return counts.most_common(n)\ndef get_top_n_words_from_file_line_by_line_v15(file, n):\n    '''\n    Write a function to get the top n words from a file\n    '''\n    words = open(file).read()\n    counts = Counter(words.split())\n    return counts.most_common(n)\ndef get_top_n_words_from_file_line_by_line_v16(file, n):\n    '''\n    Write a function to get the top n words from a file\n    '''\n    words = open(file).read()\n    counts = Counter(words.split())\n    return counts.most_common(n)\ndef get_top_n_words_from_file_line_by_line_v17(file, n):\n    '''\n    Write a function to get the top n words from a file\n    '''\n    words = open(file).read()\n    counts = Counter(words.split())\n    return counts.most_common(n)\ndef get_top_n_words_from_file_line_by_line_v18(file, n):\n    '''\n    Write a function to get the top n words from a file\n    '''\n    words = open(file).read()\n    counts = Counter(words.split())\n    return counts.most_common(n)\ndef get_top_n_words_from_file_line_by_line_v19(file, n):\n    '''\n    Write a function to get the top n words from a file\n    '''\n    words = open(file).read()\n    counts = Counter(words.split())\n    return counts.most_common(n)\ndef get_top_n_words_from_file_line_by_line_v20(file, n):\n    '''\n    Write a function to get the top n words from a file\n    '''\n    words = open(file).read()\n    counts = Counter(words.split())\n    return counts.most_common(n)\ndef ge"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key=lambda x:x[1],reverse=True)\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums, reverse=True)[0:2])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-1:-2:-1])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    a = sorted(nums)\n    return a[-1] + a[0]\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Your code here\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    return sum(nums[-1:])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if nums is None:\n        return 0\n    return nums[0] + nums[-1]\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n    \ndef replace_space(string):\n    '''\n    Write a python function to replace the space with a _.\n    '''\n    return string.replace(' ', '_')\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n    \ndef remove_duplicates(string):\n    '''\n    Write a python function to remove the duplicates in the string.\n    '''\n    return ''.join(set(string))\n    \ndef is_palindrome(string):\n    '''\n    Write a python function to check if the given string is palindrome.\n    '''\n    return string == string[::-1]\n    \ndef compute_string_hash(string):\n    '''\n    Write a python function to compute the hash of the given string.\n    '''\n    return ''.join([str(ord(i)) for i in string])\n    \ndef is_substring(string):\n    '''\n    Write a python function to check if the given string is substring of another string.\n    '''\n    return string in string2\n    \ndef is_pangram(string):\n    '''\n    Write a python function to check if the given string is a pangram or not.\n    '''\n    return set(string) >= set('abcdefghijklmnopqrstuvwxyz')\n    \ndef is_anagram(string):\n    '''\n    Write a python function to check if the given string is an anagram of another string.\n    '''\n    return sorted(string) == sorted(string2)\n    \ndef is_permutation(string):\n    '''\n    Write a python function to check if the given string is a permutation of another string.\n    '''\n    return sorted(string) == sorted(string2)\n    \ndef is_valid_hash(string):\n    '''\n    Write a python function to check if the given string is valid hash or not.\n    '''\n    return len(string) == 64 and set(string) <= set('0123456789abcdef')\n    \ndef is_reduced_string(string):\n    '''\n    Write a python function to check if the given string is reduced string or not.\n    '''\n    string = list(string)\n    for i in string:\n        if i == '0':\n            string.remove(i)\n            string.append(i)\n    return ''.join(string)\n    \ndef convert_to_tens(string):\n    '''\n    Write a python function to convert the given string to tens digit string.\n    '''\n    tens = {'0':'', '1':'one', '2':'two', '3':'three', '4':'four', '5':'five', '6':'six', '7':'seven', '8':'eight', '9':'nine', '10':'ten', '11':'eleven', '12':'twelve', '13':'thirteen', '14':'fourteen', '15':'fifteen', '16':'sixteen', '17':'seventeen', '18':'eighteen', '19':'nineteen', '2':'twenty', '20':'twenty', '30':'thirty', '40':'forty', '50':'fifty', '60':'sixty', '70':'seventy', '80':'eighty', '90':'ninety', '100':'hundred', '1000':'thousand'}\n    return tens[string]\n    \ndef is_fibo(n):\n    '''\n    Write a python function to check if the given integer is a fibonacci number or not.\n    '''\n    if n < 2:\n        return True\n    else:\n        return not(is_fibo(n-1) and is_fibo(n-2))\n    \ndef is_reverse(string):\n    '''\n    Write a python function to check if the given string is a reverse of another string.\n    '''\n    return string[::-1] == string\n    \ndef is_rotated_string(string, substring):\n    '''\n    Write a python function to check if the given string is a rotated string of another string.\n    '''\n    if len(string) == len(substring):\n        return substring == string[1:] + string[0]\n    return string[len(string)-len(substring):] + string[:len(string)-len(substring)] == substring\n    \ndef is_repetition(string, substring):\n    '''\n    Write a python function to check if the given string is a repetition of another string.\n    '''\n    return string*3 == substring\n    \ndef is_decrease(string):\n    '''\n    Write a python function to check if the given string is a decreasing order of digits.\n    '''\n    string = [int(i) for i in string]\n    for i in range(1, len(string)):\n        if string[i-1] > string[i]:\n            return False\n    return True\n    \ndef is_palindrome_permutation(string):\n    '''\n    Write a python function to check if the given string is a permutation of a palindrome or not.\n    '''\n    string = string.lower()\n    string = remove_duplicates(string)\n    return is_palindrome(string) and is_permutation(string)\n    \ndef is_superincreasing_sequence(sequence):\n    '''\n    Write a python function to check if the given sequence is a superincreasing sequence or not.\n    '''\n    if len(sequence) == 1:\n        return True\n    elif len(sequence) == 2:\n        return sequence[0] < sequence[1]\n    else:\n        return all(sequence[i] > sequence[i+1] for i in range(len(sequence)-1))\n        \ndef is_substring_permutation(string):\n    '''\n    Write a python function to check if the given string is a substring permutation of another string.\n    '''\n    return is_permutation(string) and is_substring(string)\n    \ndef is_superstring_permutation(string):\n    '''\n    Write a python function to check if the given string is a superstring permutation of another string.\n    '''\n    return is_permutation(string) and is_superstring(string)\n    \ndef is_subsequence(string):\n    '''\n    Write a python function to check if the given string is a subsequence of another string.\n    '''\n    return string in string2\n    \ndef is_sum_of_digits(string):\n    '''\n    Write a python function to check if the given string is a sum of digits or not.\n    '''\n    return sum(int(i) for i in string) == len(string)\n    \ndef is_rotation(string, substring):\n    '''\n    Write a python function to check if the given string is a rotation of another string.\n    '''\n    if len(string) == len(substring):\n        return substring == string[1:] + string[0]\n    return substring in string + string\n    \ndef is_rotated_sorted_array(array):\n    '''\n    Write a python function to check if the given array is a rotated sorted array or not.\n    '''\n    return is_sorted(array) and is_rotation(array, array[len(array)-1])\n    \ndef is_rotated_v1(string, substring):\n    '''\n    Write a python function to check if the given string is a rotation of another string by one position.\n    '''\n    if len(string) == len(substring):\n        return substring == string[1:] + string[0]\n    return substring in string + string\n    \ndef is_rotated_v2(string, substring):\n    '''\n    Write a python function to check if the given string is a rotation of another string by two positions.\n    '''\n    return is_rotation(string, substring[1:] + substring[0])\n    \ndef is_rotated_v3(string, substring):\n    '''\n    Write a python function to check if the given string is a rotation of another string by n position.\n    '''\n    if len(string) == len(substring):\n        return substring == string[len(string)-1] + string[:len(string)-1]\n    return substring in string + string\n    \ndef is_balanced_tree(root):\n    '''\n    Write a python function to check if the given tree is balanced or not.\n    '''\n    if root is None:\n        return True\n    else"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # Store the original string in lower_string.\n    lower_string = string.lower()\n    # Return True if lower_string == original string.\n    return lower_string == string\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if string[0].islower():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if not str1:\n        return ''\n    \n    #return ''.join(str1.split())\n    return re.sub(r'[a-z]', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]','',str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lower_subs = re.findall(r'[a-z]+', str1)\n    for sub in lower_subs:\n        str1 = re.sub(sub, '', str1)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    res = \"\"\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            res += str1[i]\n    return res\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]','',str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    reg = re.compile('[a-z]')\n    return reg.sub('',str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    subs = re.findall(\"\\w+\",str1)\n    subs = sorted(subs)\n    for x in subs:\n        if x.islower():\n            str1 = str1.replace(x,\"\")\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return ''.join(l for l in str1 if l.isupper())\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(\"[a-z]+\", \" \", str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]+', '', str1)\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n[0])\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 0 :\n        n = n * -1\n    if n == 0 :\n        return 0\n    return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n / 10 ** 0)\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return (n/10) % 10 \n    \ndef last_Digit(n) :  \n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    if n < 0 :\n        return -1\n    elif n == 0 :\n        return 0\n    else :\n        return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n / 10)\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # return int(n/10)\n    return int(n)%10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 0 :\n        n = -n\n    \n    return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # n = int(input(\"Enter the number\"))\n    d = n%10\n    if d == 0 :\n        return True\n    else:\n        return False\ndef last_Digit(n) :  \n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # n = int(input(\"Enter the number\"))\n    d = n%10\n    return d\ndef dig1(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # n = int(input(\"Enter the number\"))\n    d = n%10\n    return d\ndef dig2(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # n = int(input(\"Enter the number\"))\n    d = n%10\n    return d\ndef isPrime(n):\n    '''\n    Write a python function to find if the given number is a prime number or not.\n    '''\n    # n = int(input(\"Enter the number\"))\n    if n <= 1 :\n        return False\n    for i in range(2, n):\n        if n%i == 0:\n            return False\n    return True\ndef isEven(n):\n    '''\n    Write a python function to find if the given number is even or not.\n    '''\n    # n = int(input(\"Enter the number\"))\n    if n%2 == 0:\n        return True\n    else:\n        return False\ndef isOdd(n):\n    '''\n    Write a python function to find if the given number is odd or not.\n    '''\n    # n = int(input(\"Enter the number\"))\n    if n%2!= 0:\n        return True\n    else:\n        return False\ndef isPerfect(n):\n    '''\n    Write a python function to find if the given number is a perfect number or not.\n    '''\n    # n = int(input(\"Enter the number\"))\n    div = 1\n    for i in range(2, n):\n        if n%i == 0:\n            div = div+i\n    return div == n\ndef isPerfect(n):\n    '''\n    Write a python function to find if the given number is a perfect number or not.\n    '''\n    # n = int(input(\"Enter the number\"))\n    div = 1\n    for i in range(2, n):\n        if n%i == 0:\n            div = div+i\n    return div == n\ndef isPalindrome(n):\n    '''\n    Write a python function to find if the given number is a palindrome or not.\n    '''\n    # n = int(input(\"Enter the number\"))\n    s = 0\n    while n:\n        r = n%10\n        s = s*10 + r\n        n = n//10\n    return s == n\ndef isPalindrome(n):\n    '''\n    Write a python function to find if the given number is a palindrome or not.\n    '''\n    # n = int(input(\"Enter the number\"))\n    s = 0\n    while n:\n        r = n%10\n        s = s*10 + r\n        n = n//10\n    return s == n\ndef isPalindrome(n):\n    '''\n    Write a python function to find if the given number is a palindrome or not.\n    '''\n    # n = int(input(\"Enter the number\"))\n    s = 0\n    while n:\n        r = n%10\n        s = s*10 + r\n        n = n//10\n    return s == n\ndef isPalindrome(n):\n    '''\n    Write a python function to find if the given number is a palindrome or not.\n    '''\n    # n = int(input(\"Enter the number\"))\n    s = 0\n    while n:\n        r = n%10\n        s = s*10 + r\n        n = n//10\n    return s == n\ndef isPalindrome(n):\n    '''\n    Write a python function to find if the given number is a palindrome or not.\n    '''\n    # n = int(input(\"Enter the number\"))\n    s = 0\n    while n:\n        r = n%10\n        s = s*10 + r\n        n = n//10\n    return s == n\ndef isPalindrome(n):\n    '''\n    Write a python function to find if the given number is a palindrome or not.\n    '''\n    # n = int(input(\"Enter the number\"))\n    s = 0\n    while n:\n        r = n%10\n        s = s*10 + r\n        n = n//10\n    return s == n\ndef isPalindrome(n):\n    '''\n    Write a python function to find if the given number is a palindrome or not.\n    '''\n    # n = int(input(\"Enter the number\"))\n    s = 0\n    while n:\n        r = n%10\n        s = s*10 + r\n        n = n//10\n    return s == n\ndef isPalindrome(n):\n    '''\n    Write a python function to find if the given number is a palindrome or not.\n    '''\n    # n = int(input(\"Enter the number\"))\n    s = 0\n    while n:\n        r = n%10\n        s = s*10 + r\n        n = n//10\n    return s == n\ndef isPalindrome(n):\n    '''\n    Write a python function to find if the given number is a palindrome or not.\n    '''\n    # n = int(input(\"Enter the number\"))\n    s = 0\n    while n:\n        r = n%10\n        s = s*10 + r\n        n = n//10\n    return s == n\ndef isPalindrome(n):\n    '''\n    Write a python function to find if the given number is a palindrome or not.\n    '''\n    # n = int(input(\"Enter the number\"))\n    s = 0\n    while n:\n        r = n%10\n        s = s*10 + r\n        n = n//10\n    return s == n\ndef isPalindrome(n):\n    '''\n    Write a python function to find if the given number is a palindrome or not.\n    '''\n    # n = int(input(\"Enter the number\"))\n    s = 0\n    while n:\n        r = n%10\n        s = s*10 + r\n        n = n//10\n    return s == n\ndef isPalindrome(n):\n    '''\n    Write a python function to find if the given number is a palindrome or not.\n    '''\n    # n = int(input(\"Enter the number\"))\n    s = 0\n    while n:\n        r = n%10\n        s = s*10 + r\n        n = n//10\n    return s == n\ndef isPalindrome(n):\n    '''\n    Write a python function to find if the given number is a palindrome or not.\n    '''\n    # n = int(input(\"Enter the number\"))\n    s = 0\n    while n:\n        r = n%10\n        s = s*10 + r\n        n = n//10\n    return s == n\ndef isPalindrome(n):\n    '''\n    Write a python function to find if the given number is a palindrome or not.\n    '''\n    # n = int(input(\"Enter the number\"))\n    s = 0\n    while n:\n        r = n%10\n        s = s*10 + r\n        n = n//10\n    return s == n\ndef isPalindrome(n):\n    '''\n    Write a python function to find if the given number is a palindrome or not.\n    '''\n    # n = int(input(\"Enter the number\"))\n    s = 0\n    while n:\n        r = n%10\n        s = s*10 + r\n        n = n//10\n    return s == n\ndef isPalindrome(n):\n    '''\n    Write a python function to find if the given number is a palindrome or not.\n    '''\n    # n = int(input(\"Enter the number\"))\n    s = 0\n    while n:\n        r = n%10\n        s = s*10 + r\n        n = n/"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list2 = []\n    for i in list:\n        if i % 2 == 1:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [int(item) for item in list if int(item) % 2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    new_list = []\n    for i in list:\n        if i%2!= 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [int(x) for x in list if x % 2!= 0]\n    \ndef Repeat(list): \n    '''\n    Write a python function which takes a list and returns the sum of all the elements in the list.\n    '''\n    return sum(list)\n    \ndef Count(list): \n    '''\n    Write a python function which takes a list and returns a dictionary with the sum of the elements in the list as the key, and the number of times that element occurs as the value.\n    '''\n    return {x:list.count(x) for x in list}\n    \ndef Average(list): \n    '''\n    Write a python function which takes a list of integers and returns the average of all the elements in the list.\n    '''\n    return sum(list) / float(len(list))\n    \ndef Unique(list): \n    '''\n    Write a python function which takes a list and returns a list with all the distinct elements in the list, in the same order they appeared in the list.\n    '''\n    return list(set(list))\n    \ndef Length(list): \n    '''\n    Write a python function which takes a list of strings and returns the length of the longest string in the list.\n    '''\n    return max(len(x) for x in list)\n    \ndef Min(list): \n    '''\n    Write a python function which takes a list of integers and returns the minimum value in the list.\n    '''\n    return min(list)\n    \ndef Max(list): \n    '''\n    Write a python function which takes a list of integers and returns the maximum value in the list.\n    '''\n    return max(list)\n    \ndef Sum(list): \n    '''\n    Write a python function which takes a list of integers and returns the sum of all the elements in the list.\n    '''\n    return sum(list)\n    \ndef Median(list): \n    '''\n    Write a python function which takes a list of integers and returns the median value in the list.\n    '''\n    return median(list)\n    \ndef Range(list): \n    '''\n    Write a python function which takes a list of integers and returns the range between the smallest and largest values in the list.\n    '''\n    return max(list) - min(list)\n    \ndef Mode(list): \n    '''\n    Write a python function which takes a list of integers and returns the most common element in the list.\n    '''\n    return Counter(list).most_common(1)[0][0]\n    \ndef Mode_freq(list): \n    '''\n    Write a python function which takes a list of integers and returns a dictionary of the most common elements and their counts.\n    '''\n    return Counter(list).most_common()\n    \ndef Mode_list(list): \n    '''\n    Write a python function which takes a list of integers and returns a list of the most common elements in the list.\n    '''\n    return [x[0] for x in Mode_freq(list)]\n    \ndef Permutation(list): \n    '''\n    Write a python function which takes a list of integers and returns all the permutations of the list.\n    '''\n    return itertools.permutations(list)\n    \ndef Combination(list): \n    '''\n    Write a python function which takes a list of integers and returns all the combinations of the list.\n    '''\n    return itertools.combinations(list,2)\n    \ndef Date(list): \n    '''\n    Write a python function which takes a list of integers and returns the date of the year corresponding to the list element.\n    '''\n    return datetime.datetime.fromtimestamp(list).year\n    \ndef Date_num(list): \n    '''\n    Write a python function which takes a list of integers and returns the date of the year corresponding to the list element.\n    '''\n    return datetime.datetime.fromtimestamp(list/1000000).year\n    \ndef Date_time(list): \n    '''\n    Write a python function which takes a list of integers and returns the date of the year, month, day, and hour corresponding to the list element.\n    '''\n    return datetime.datetime.fromtimestamp(list/1000000).date()\n    \ndef Date_time_num(list): \n    '''\n    Write a python function which takes a list of integers and returns the date of the year, month, day, and hour corresponding to the list element.\n    '''\n    return datetime.datetime.fromtimestamp(list/1000000).date()\n    \ndef Date_diff(list): \n    '''\n    Write a python function which takes a list of integers and returns the number of days since the first date element in the list.\n    '''\n    return abs(list[0]) - abs(list[1])\n    \ndef Date_diff_num(list): \n    '''\n    Write a python function which takes a list of integers and returns the number of days since the first date element in the list.\n    '''\n    return abs(list[0]) - abs(list[1])\n    \ndef Date_time_diff(list): \n    '''\n    Write a python function which takes a list of integers and returns the number of days since the first date element in the list.\n    '''\n    return abs(list[0]) - abs(list[1])\n    \ndef Date_time_diff_num(list): \n    '''\n    Write a python function which takes a list of integers and returns the number of days since the first date element in the list.\n    '''\n    return abs(list[0]) - abs(list[1])\n    \ndef Date_time_span(list): \n    '''\n    Write a python function which takes a list of integers and returns the span of time between the first and last date elements in the list.\n    '''\n    return abs(list[0]) - abs(list[-1])\n    \ndef Date_time_span_num(list): \n    '''\n    Write a python function which takes a list of integers and returns the span of time between the first and last date elements in the list.\n    '''\n    return abs(list[0]) - abs(list[-1])\n    \ndef Date_span(list): \n    '''\n    Write a python function which takes a list of integers and returns the span of dates between the first and last date elements in the list.\n    '''\n    return abs(list[0]) - abs(list[-1])\n    \ndef Date_span_num(list): \n    '''\n    Write a python function which takes a list of integers and returns the span of dates between the first and last date elements in the list.\n    '''\n    return abs(list[0]) - abs(list[-1])\n    \ndef Days_in_year(list): \n    '''\n    Write a python function which takes a list of integers and returns the number of days in the year corresponding to the list element.\n    '''\n    return abs(list[0]) - abs(list[1])\n    \ndef Days_in_year_num(list): \n    '''\n    Write a python function which takes a list of integers and returns the number of days in the year corresponding to the list element.\n    '''\n    return abs(list[0]) - abs(list[1])\n    \ndef Days_in_month(list): \n    '''\n    Write a python function which takes a list of integers and returns the number of days in the month corresponding to the list element.\n    '''\n    return abs(list[0]) - abs(list[1])\n    \ndef Days_in_month_num(list): \n    '''\n    Write a python function which takes a list of integers and returns the number of days in the month corresponding to the list element.\n    '''\n    return abs(list[0]) - abs(list[1])\n    \ndef Days_in_week(list): \n    '''\n    Write a python function which takes a list of integers and returns the number of days in the week corresponding to the list element.\n    '''\n    return abs(list[0]) - abs(list[1])\n    \ndef Days_in_week_num(list): \n    '''\n    Write a python function which takes a list of integers and returns the number of days in the week corresponding to the list element.\n    '''\n    return abs(list[0]) - abs(list[1])\n    \ndef Days_in_day(lis"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list2 = [num for num in list if num % 2!= 0]\n    return list2\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x%2!= 0]\n    \ndef Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x%2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    odds = []\n    \n    for i in list:\n        if i % 2!= 0:\n            odds.append(i)\n    \n    return odds\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for item in list:\n        if item % 2!= 0:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for i in list:\n        if i % 2!= 0:\n            odds.append(i)\n    return odds\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        sum = sum + i*i*i\n    diff = sum * (n * n * n) / 3\n    return diff\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = [i**3 for i in range(1,n+1)]\n    sum_cubes = sum(cubes)\n    sum_natural = sum(range(1,n+1))\n    return sum_cubes - sum_natural\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    sum_of_squares = 0\n    for i in range(1, n+1) :\n        sum_of_squares = sum_of_squares + i*i*i\n    \n    sum_of_cubes = 0\n    for i in range(1, n+1) :\n        sum_of_cubes = sum_of_cubes + i*i*i*i\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for x in range(1,n+1):\n        sum_of_cubes += x**3\n    return sum_of_cubes**3 - sum(range(1,n+1))**3\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    n = int(n)\n    \n    if n < 0 :\n        print('No Natural numbers can be negative!!!')\n    \n    else :\n        s = sum(range(n + 1))\n        s2 = sum(range(n + 1)**2)\n        print(s2 - s**3)\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return n**3*(n+1)*(2*n+1)//6 - sum(range(1,n+1))**3\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return ((n*(n+1)*(2*n+1))/6) - sum_of_cubes(n)\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n = int(n)\n    return sum([i ** 3 for i in range(1, n + 1)]) - sum([i for i in range(1, n + 1)])\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return ((n*(n+1)*(2*n+1))/6) - sum([i**3 for i in range(1,n+1)])\n    \ndef is_perfect(n) : \n    '''\n    Write a python function to return the sum of the proper divisors of a given number n, excluding n itself.\n    '''\n    result = 0\n    for i in range(1,n) :\n        if n % i == 0 :\n            result += i\n    return result\n    \ndef sum_of_primes(n) :  \n    '''\n    Write a python function to find the sum of all the prime numbers less than n.\n    '''\n    result = 0\n    for i in range(2,n) :\n        if is_prime(i) :\n            result += i\n    return result\n    \ndef sum_of_pairs(n,m) : \n    '''\n    Write a python function to find the sum of the first n pairs of the Fibonacci sequence, such that each pair is a prime number.\n    '''\n    result = 0\n    for i in range(n) :\n        if is_prime(i+1) and is_prime(i+2) :\n            result += i+1\n    return result\n    \ndef sum_of_pairs_with_difference(n,m) : \n    '''\n    Write a python function to find the sum of the first n pairs of the Fibonacci sequence, such that each pair has a difference of k, where k is a prime number.\n    '''\n    result = 0\n    for i in range(n) :\n        if is_prime(i+1) and is_prime(i+2) and abs(i+1-i+2) == m :\n            result += i+1\n    return result\n    \ndef first_n_consecutive_primes(n) : \n    '''\n    Write a python function to find the sum of the first n consecutive primes.\n    '''\n    result = 2\n    for i in range(3,n+1) :\n        if is_prime(i) :\n            result += i\n    return result\n    \ndef is_prime(n) :\n    '''\n    Write a python function to return whether a given number n is a prime number or not.\n    '''\n    if n == 1 :\n        return False\n    elif n == 2 :\n        return True\n    else :\n        if n % 2 == 0 :\n            return False\n        else :\n            for i in range(3,int(n**0.5)+1,2) :\n                if n % i == 0 :\n                    return False\n            return True\n    \ndef sum_of_consecutive_primes(n) :\n    '''\n    Write a python function to find the sum of the first n consecutive primes.\n    '''\n    result = 2\n    for i in range(3,n+1) :\n        if is_prime(i) :\n            result += i\n    return result\n    \ndef sieve(n) :\n    '''\n    Write a python function to find the sum of the prime numbers less than n.\n    '''\n    result = 2\n    sieve = [True]*(n+1)\n    for i in range(3,int(n**0.5)+1,2) :\n        if sieve[i] :\n            for j in range(i*i,n+1,i) :\n                sieve[j] = False\n    for i in range(3,n+1) :\n        if sieve[i] :\n            result += i\n    return result\n    \ndef sum_of_perfect_squares(n) : \n    '''\n    Write a python function to find the sum of the first n perfect squares, where each perfect square is a natural number whose square root is an integer.\n    '''\n    result = 0\n    for i in range(1,n+1) :\n        if int(i**0.5)**2 == i :\n            result += i\n    return result\n    \ndef sum_of_perfect_squares_with_difference(n) : \n    '''\n    Write a python function to find the sum of the first n perfect squares, where each perfect square is a natural number whose square root is an integer, such that the difference between the square root and the square is a prime number.\n    '''\n    result = 0\n    for i in range(1,n+1) :\n        if int(i**0.5)**2 == i and is_prime(i-int(i**0.5)**2) :\n            result += i\n    return result\n    \ndef sum_of_digits(n) :\n    '''\n    Write a python function to find the sum of the digits of a given natural number n.\n    '''\n    s = str(n)\n    result = 0\n    for i in range(len(s)) :\n        result += int(s[i])\n    return result\n    \ndef sum_of_digits_with_difference(n,m) :\n    '''\n    Write a python function to find the sum of the digits of a given natural number n, such that the difference between the sum of digits and m is a prime number.\n    '''\n    result = 0\n    for i in range(len(str(n))) :\n        if is_prime(int(str(n)[i])) and is_prime(int(str(n)[i])-m) :\n            result += int(str(n)[i])\n    return result\n    \ndef sum_of_palindromes(n) :\n    '''\n    Write a python function to find the sum of the first n palindromes, where each palindrome is a string of digits which reads the same backwards.\n    '''\n    result = 0\n    for i in range(10**(n-1),10**n) :\n        s = str(i)\n        if s == s[::-1] :\n            result += i\n    return result\n    \ndef is_palindrome(n) : \n    '''\n    Write a python function to return whether a given number n is a palindrome or not.\n    '''\n    s = str(n)\n    if s == s[::-1] :\n        return True\n    else :\n        return False\n    \ndef sum_of_digits_of_palindromes(n) : \n    '''\n    Write a python function to find the sum of the digits of all the palindromes of length n, where each palindrome is a string of digits which reads the same backwards.\n    '''\n    result = 0\n    for i in range(10**(n-1),10**n) :\n        if is_palindrome(i) :\n            result += sum_of_digits(i)\n    return result\n    \ndef sum_of_digits_of_palindromes_with_difference(n,m) :\n    '''\n    Write a python function to find the sum of the digits of all the palindromes of length n, where each palindrome is a string of digits which reads the same backwards, such that the difference between the sum of digits and m is a prime number.\n    '''\n    result = 0\n    for i in range(10**(n-1),10**n) :\n        if is_palindrome(i) and is_prime(int(str(i)[::-1])-m) :\n            result += sum_of_digits(i)\n    return result\n    \ndef prime_pairs(n) :\n    '''\n    Write a python function to find the sum of the first n pairs of the Fibonacci sequence, such that each pair is a prime number.\n    '''\n    result = 0\n    for i in range(n) :\n        if is_prime(i+1) and is_prime(i+2) :\n            result += i+1\n    return result\n    \ndef prime_pairs_with_difference(n,m) :\n    '''\n    Write a python function to find the sum of the first n pairs of the Fibonacci sequence, such that each pair has a difference of k, where k is a prime number.\n    '''\n    result = 0\n    for i in range(n) :\n        if is_prime(i+1) and is_prime(i+2) and abs(i+1-i+2) == "
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Code\n    sum = 0\n    for i in range(1, n+1) :\n        sum = sum + i**3\n    print \"The sum of cubes of the first \", n, \" natural numbers is \", sum\n    s = n*(n+1)*(2*n+1)/6\n    print \"The difference is \", abs(sum - s)\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    X = []\n    for i in range(N) : \n        x = A[i]\n        X.append(x)\n    \n    s = 0\n    for i in range(N) : \n        for j in range(i+1,N) : \n            xor = X[i] ^ X[j]\n            if xor % 2 == 1 : \n                s = s + 1\n    return s\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    A = sorted(A)\n    count = 0\n    for i in range(N) :\n        if A[i] ^ A[N-1-i] & 0x1 == 1 :\n            count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if N%2==0 :\n        print(\"Not Possible\")\n    else :\n        count=0\n        for i in range(0,N) :\n            if A[i]^A[(i+1)%N]^A[(i+2)%N]^A[(i+3)%N]==1 :\n                count=count+1\n        print(count)\n        "
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    count = 0\n    for i in range(N-1) : \n        for j in range(i+1,N) : \n            if (A[i]^A[j]&1) : \n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    count=0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if (A[i]^A[j])&1 :\n                count+=1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N-1) :\n        for j in range(i+1,N) :\n            if (A[i]^A[j]&1) : \n                count+=1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_pairs = 0\n    for i in xrange(0,N):\n        for j in xrange(i+1,N):\n            if A[i]^A[j]&1:\n                odd_pairs = odd_pairs + 1\n    return odd_pairs\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count=0\n    for i in range(0,N-1) : \n        for j in range(i+1,N) :\n            if (A[i]^A[j])%2==1 : \n                count+=1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    '''\n    Count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if (A[i]^A[j])%2 == 1 :\n                count+=1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    i = 0\n    res = 0\n    while i < N : \n        j = i\n        while j < N : \n            if A[i] ^ A[j] == 1 : \n                res = res + 1\n                break\n            j = j + 1\n        i = i + 1\n    return res\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return \"\".join(map(lambda x: x.swapcase(), string))\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    output = []\n    for letter in string:\n        output.append(letter.swapcase())\n    return ''.join(output)\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return \"\".join( [c.upper() if c.islower() else c.lower() for c in string] )\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = string.swapcase()\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for i in range(len(string)):\n        if string[i].isupper():\n            result += string[i].lower()\n        else:\n            result += string[i].upper()\n    return result\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    characters = []\n    for c in string:\n        characters.append(c.swapcase())\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    \n    return ''.join([x.lower() if x.isupper() else x.upper() for x in string])\n    \n    \n    \ndef find_min_max(nums):\n    '''\n    Find the minimum and maximum numbers in an array.\n    '''\n    \n    if nums:\n        return min(nums), max(nums)\n    else:\n        return None, None\n    \n    \n    \ndef sum_of_proper_divisors(number):\n    '''\n    Return the sum of all proper divisors of a given number.\n    \n    Proper divisor: a divisor of a number is divisible by the number itself.\n    '''\n    \n    return sum([x for x in range(1, number) if number % x == 0])\n    \n    \n    \ndef sum_of_divisors(number):\n    '''\n    Return the sum of all divisors of a given number.\n    \n    divisor: a divisor of a number is a factor of the number.\n    '''\n    \n    return sum([x for x in range(1, number) if number % x == 0])\n    \n    \n    \ndef sum_of_divisors_of_sqrt(number):\n    '''\n    Return the sum of all divisors of the square root of a number.\n    \n    divisor: a divisor of a number is a factor of the number.\n    '''\n    \n    return sum([x for x in range(1, int(number ** 0.5) + 1) if number % x == 0])\n    \n    \n    \ndef sum_of_divisors_of_sqrt_of_sqrt(number):\n    '''\n    Return the sum of all divisors of the square root of a number.\n    \n    divisor: a divisor of a number is a factor of the number.\n    '''\n    \n    return sum([x for x in range(1, int(number ** 0.5) + 1) if number % x == 0])\n    \n    \n    \ndef palindrome_divisor_chain(number):\n    '''\n    Return the sum of all the numbers from 1 to the given number which is a palindrome,\n    and when written in the given base, the result is the same as the original number.\n    \n    Ex: palindrome_divisor_chain(8) = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8, the result is the same as the original number.\n    '''\n    \n    return sum([x for x in range(1, number) if str(x) == str(x)[::-1]])\n    \n    \n    \ndef is_prime(number):\n    '''\n    Return whether a number is prime or not.\n    \n    Note: A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n    '''\n    \n    return all([number % x!= 0 for x in range(2, int(number ** 0.5) + 1)])\n    \n    \n    \ndef is_anagram(string1, string2):\n    '''\n    Return whether the two strings are anagram or not.\n    '''\n    \n    return sorted(string1) == sorted(string2)\n    \n    \n    \ndef is_anagram_of_length(string1, string2):\n    '''\n    Return whether the two strings are anagram of a given length.\n    '''\n    \n    return len(string1) == len(string2) and sorted(string1) == sorted(string2)\n    \n    \n    \ndef factorial(number):\n    '''\n    Return the factorial of a number.\n    \n    Factorial: the factorial of a number is the product of all numbers between 1 and the given number.\n    \n    Ex: factorial(2) = 2 * 1 = 2\n    '''\n    \n    return reduce(lambda x, y: x * y, range(1, number + 1))\n    \n    \n    \ndef sum_of_primes(number):\n    '''\n    Return the sum of all primes below the given number.\n    \n    primes: a prime is a natural number greater than 1 that is not a product of two smaller natural numbers.\n    '''\n    \n    return sum([x for x in range(1, number) if is_prime(x)])\n    \n    \n    \ndef primes_less_than(number):\n    '''\n    Return the sum of all primes below the given number.\n    \n    primes: a prime is a natural number greater than 1 that is not a product of two smaller natural numbers.\n    '''\n    \n    return sum([x for x in range(1, number) if is_prime(x)])\n    \n    \n    \ndef sum_of_divisors_of_squares(number):\n    '''\n    Return the sum of all divisors of the square root of a number.\n    \n    divisor: a divisor of a number is a factor of the number.\n    '''\n    \n    return sum([x for x in range(1, int(number ** 0.5) + 1) if number % x == 0])\n    \n    \n    \ndef sum_of_divisors_of_squares_of_squares(number):\n    '''\n    Return the sum of all divisors of the square root of a number.\n    \n    divisor: a divisor of a number is a factor of the number.\n    '''\n    \n    return sum([x for x in range(1, int(number ** 0.5) + 1) if number % x == 0])\n    \n    \n    \ndef sum_of_divisors_of_squares_of_squares_of_squares(number):\n    '''\n    Return the sum of all divisors of the square root of a number.\n    \n    divisor: a divisor of a number is a factor of the number.\n    '''\n    \n    return sum([x for x in range(1, int(number ** 0.5) + 1) if number % x == 0])\n    \n    \n    \ndef sum_of_divisors_of_squares_of_squares_of_squares_of_squares(number):\n    '''\n    Return the sum of all divisors of the square root of a number.\n    \n    divisor: a divisor of a number is a factor of the number.\n    '''\n    \n    return sum([x for x in range(1, int(number ** 0.5) + 1) if number % x == 0])\n    \n    \n    \ndef is_pythagorean_triplet(a, b, c):\n    '''\n    Return whether a, b, and c are a pythagorean triplet or not.\n    \n    a, b, c: natural numbers\n    '''\n    \n    return a ** 2 + b ** 2 == c ** 2\n    \n    \n    \ndef is_pythagorean_triplet_of_ab(a, b):\n    '''\n    Return whether a and b are pythagorean triplets or not.\n    \n    a, b: natural numbers\n    '''\n    \n    return a ** 2 + b ** 2 == a * b\n    \n    \n    \ndef is_pythagorean_triplet_of_abc(a, b, c):\n    '''\n    Return whether a, b, and c are pythagorean triplets or not.\n    \n    a, b, c: natural numbers\n    '''\n    \n    return a ** 2 + b ** 2 == c ** 2\n    \n    \n    \ndef pythagorean_triplet_with_a_less_than_b_and_less_than_c(a, b, c):\n    '''\n    Return all pythagorean triplets with a < b < c.\n    \n    a, b, c: natural numbers\n    '''\n    \n    return [(a, b, c), (b, a, c), (a, c, b), (c, b, a)]\n    \n    \n    \ndef pythagorean_triplet_with_a_less_than_b_and_less_than_c_of_ab(a, b):\n    '''\n    Return all pythagorean triplets with a < b < c.\n    \n    a, b, c: natural numbers\n    '"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for i in range(len(string)):\n        if string[i].isupper():\n            new_string += string[i].lower()\n        elif string[i].islower():\n            new_string += string[i].upper()\n        else:\n            new_string += string[i]\n    return new_string\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(n1 - n2) for n1, n2 in zip(str(n1), str(n2))])\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(int(i) - int(j)) for i, j in zip(str(n1), str(n2))])\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(int(x) - int(y) for x, y in zip(str(n1), str(n2)))\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = abs(n1)\n    n2 = abs(n2)\n    count = 0\n    if n1 < n2:\n        n1, n2 = n2, n1\n    for i in range(n1, n2):\n        if n1 % 10 == n2 % 10:\n            count += 1\n        n1 = n1 // 10\n    return count\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_str = str(n1)\n    n2_str = str(n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1, n2 = abs(n1), abs(n2)\n    d = 0\n    while n1 > 0:\n        d += (n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return d\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = int(n1)\n    n2 = int(n2)\n    if n1 < n2:\n        n1, n2 = n2, n1\n    d1 = n1%10\n    d2 = n2%10\n    return abs(d1-d2) + digit_distance_nums(n1//10, n2//10)\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    if n1 > n2:\n        for i in range(len(str(n1))):\n            d1 = int(str(n1)[i])\n            d2 = int(str(n2)[i])\n            sum += abs(d1 - d2)\n        return sum\n    else:\n        for i in range(len(str(n2))):\n            d1 = int(str(n2)[i])\n            d2 = int(str(n1)[i])\n            sum += abs(d1 - d2)\n        return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    \n    max_n = max(n1, n2)\n    min_n = min(n1, n2)\n    return sum([int(i) for i in str(max_n) if int(i)!= int(min_n)])\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # x = int(str(n1) + str(n2))\n    # y = int(str(n2) + str(n1))\n    # z = int(str(n1) + str(n2))\n    # z = int(str(n2) + str(n1))\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # if size <= 1:\n    #     return a[size-1]\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return a[0]\n    max_ending_here = a[0]\n    max_so_far = a[0]\n    for i in xrange(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    elif size == 2:\n        return max(a[0],a[1])\n    else:\n        mid = size/2\n        left_sum = max_sub_array_sum(a[0:mid], mid)\n        right_sum = max_sub_array_sum(a[mid:size], size-mid)\n        left_max = max(left_sum, right_sum)\n        right_max = max(right_sum, left_sum)\n        left_max_index = 0\n        right_max_index = size-1\n        left_max_value = a[mid-1]\n        right_max_value = a[mid]\n        for i in range(mid-1, -1, -1):\n            curr_value = a[i]\n            if left_max_value < curr_value:\n                left_max_value = curr_value\n                left_max_index = i\n        for j in range(mid+1, size):\n            curr_value = a[j]\n            if right_max_value < curr_value:\n                right_max_value = curr_value\n                right_max_index = j\n        max_sub = a[left_max_index] + a[right_max_index]\n        return max(max_sub, left_max, right_max)\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sub_sum = a[0]\n    max_sum = a[0]\n    for i in range(1, size):\n        sub_sum = max(a[i], sub_sum + a[i])\n        max_sum = max(max_sum, sub_sum)\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return None\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = 0\n    max_ending_here = 0\n    start_index = 0\n    end_index = 0\n    for i in range(0, size):\n        max_ending_here += a[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n            start_index = i\n            end_index = i\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    left = 0\n    right = size - 1\n    curr_sum = a[0]\n    curr_max = a[0]\n    while right <= len(a) - 1:\n        curr_sum += a[right]\n        curr_max = max(curr_max, curr_sum)\n        while left <= right and curr_sum < 0:\n            curr_sum -= a[left]\n            left += 1\n        right += 1\n    return curr_max\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    return max(a)\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    max_ending_here = a[size - 1]\n    max_so_far = a[size - 1]\n    for i in range(size-2, -1, -1):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if not a:\n        return 0\n    max_sum = a[0]\n    curr_sum = a[0]\n    for i in xrange(1, size):\n        if curr_sum < 0:\n            curr_sum = a[i]\n        else:\n            curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return print(\"Tuples are not of equal length\")\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set(test_tup1).union(test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    res = []\n    for x in test_tup1:\n        if x not in res:\n            res.append(x)\n    for x in test_tup2:\n        if x not in res:\n            res.append(x)\n    res.sort()\n    return tuple(res)\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return (list(set(test_tup1) | set(test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    elem_list1 = []\n    elem_list2 = []\n    for tup in test_tup1:\n        elem_list1.append(tup)\n    for tup in test_tup2:\n        elem_list2.append(tup)\n    union = sorted(set(elem_list1 + elem_list2))\n    return union\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    sorted_tuples = sorted(test_tup1+test_tup2)\n    print sorted_tuples\n    "
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return (sorted(test_tup1+test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # print test_tup1\n    # print test_tup2\n    # print '--------'\n    # print sorted(test_tup1 + test_tup2)\n    return sorted(set(test_tup1 + test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    for elem in test_tup1:\n        if elem not in test_tup2:\n            test_tup2.append(elem)\n    for elem in test_tup2:\n        if elem not in test_tup1:\n            test_tup1.append(elem)\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(set(test_tup1 + test_tup2))\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    m = 0\n    temp = []\n    for i in range(len(lst)):\n        if i == 0:\n            m = len(lst[i])\n        else:\n            if len(lst[i]) > m:\n                m = len(lst[i])\n            elif len(lst[i]) == m:\n                m = len(lst[i])\n    return m\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    d = {}\n    for i in lst:\n        if i not in d:\n            d[i]=1\n        else:\n            d[i]+=1\n    return max(d.values())\n    \ndef test_find_max_length():\n    assert (Find_Max_Length([1,3,4,6,7,1,2,3,4,5]) == 4)\n    assert (Find_Max_Length([1,2,3,4,5,6,7,8,9,10]) == 10)\n    assert (Find_Max_Length([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]) == 9)\n    assert (Find_Max_Length([1,1,1,1,1]) == 1)\n    assert (Find_Max_Length([1,2,3]) == 3)\n    assert (Find_Max_Length([1,2,3,4]) == 3)\n    assert (Find_Max_Length([1,2,3,4,5]) == 4)\n    assert (Find_Max_Length([1,2,3,4,5,6]) == 5)\n    assert (Find_Max_Length([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]) == 9)\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    table = {-1:0}\n    max_len = 0\n    for i in range(len(lst)):\n        if lst[i] > table.get(i-1, 0):\n            table[i] = 1 + table.get(i-1, 0)\n        else:\n            table[i] = 1\n        max_len = max(max_len, table[i])\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0 \n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n    print(\"The length of the longest sublists are: \", max_length)\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    Max = 0 \n    for i in range(len(lst)):\n        if i+1 == len(lst):\n            if len(lst[i]) > Max:\n                Max = len(lst[i])\n        else:\n            if len(lst[i]) > Len_of_sublists and len(lst[i+1]) > Len_of_sublists:\n                if len(lst[i]) > Len_of_sublists and len(lst[i+1]) > Len_of_sublists:\n                    Max = Len_of_sublists\n                else:\n                    Max = len(lst[i])\n            else:\n                if len(lst[i]) > Len_of_sublists:\n                    Max = Len_of_sublists\n                else:\n                    Max = len(lst[i])\n    return Max\ndef Count_Largest_sublists(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if i+1 == len(lst):\n            if len(lst[i]) > count:\n                count = len(lst[i])\n        else:\n            if len(lst[i]) > Len_of_sublists and len(lst[i+1]) > Len_of_sublists:\n                if len(lst[i]) > Len_of_sublists and len(lst[i+1]) > Len_of_sublists:\n                    if len(lst[i]) > Len_of_sublists and len(lst[i+1]) > Len_of_sublists:\n                        count = Len_of_sublists\n                    else:\n                        count = len(lst[i])\n                else:\n                    count = Len_of_sublists\n            else:\n                if len(lst[i]) > Len_of_sublists:\n                    count = Len_of_sublists\n                else:\n                    count = len(lst[i])\n    return count\ndef Count_All_Sublists(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if i+1 == len(lst):\n            if len(lst[i]) > count:\n                count = len(lst[i])\n        else:\n            if len(lst[i]) > Len_of_sublists and len(lst[i+1]) > Len_of_sublists:\n                if len(lst[i]) > Len_of_sublists and len(lst[i+1]) > Len_of_sublists:\n                    if len(lst[i]) > Len_of_sublists and len(lst[i+1]) > Len_of_sublists:\n                        count = Len_of_sublists\n                    else:\n                        count = len(lst[i])\n                else:\n                    count = Len_of_sublists\n            else:\n                if len(lst[i]) > Len_of_sublists:\n                    count = Len_of_sublists\n                else:\n                    count = len(lst[i])\n    return count\ndef Find_Sorted_Sublists(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if i+1 == len(lst):\n            if len(lst[i]) > count:\n                count = len(lst[i])\n        else:\n            if len(lst[i]) > Len_of_sublists and len(lst[i+1]) > Len_of_sublists:\n                if len(lst[i]) > Len_of_sublists and len(lst[i+1]) > Len_of_sublists:\n                    if len(lst[i]) > Len_of_sublists and len(lst[i+1]) > Len_of_sublists:\n                        count = Len_of_sublists\n                    else:\n                        count = len(lst[i])\n                else:\n                    count = Len_of_sublists\n            else:\n                if len(lst[i]) > Len_of_sublists:\n                    count = Len_of_sublists\n                else:\n                    count = len(lst[i])\n    return count\ndef Find_Sorted_Sublists(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if i+1 == len(lst):\n            if len(lst[i]) > count:\n                count = len(lst[i])\n        else:\n            if len(lst[i]) > Len_of_sublists and len(lst[i+1]) > Len_of_sublists:\n                if len(lst[i]) > Len_of_sublists and len(lst[i+1]) > Len_of_sublists:\n                    if len(lst[i]) > Len_of_sublists and len(lst[i+1]) > Len_of_sublists:\n                        count = Len_of_sublists\n                    else:\n                        count = len(lst[i])\n                else:\n                    count = Len_of_sublists\n            else:\n                if len(lst[i]) > Len_of_sublists:\n                    count = Len_of_sublists\n                else:\n                    count = len(lst[i])\n    return count\ndef Find_Sorted_Sublists(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if i+1 == len(lst):\n            if len(lst[i]) > count:\n                count = len(lst[i])\n        else:\n            if len(lst[i]) > Len_of_sublists and len(lst[i+1]) > Len_of_sublists:\n                if len(lst[i]) > Len_of_sublists and len(lst[i+1]) > Len_of_sublists:\n                    if len(lst[i]) > Len_of_sublists and len(lst[i+1]) > Len_of_sublists:\n                        count = Len_of_sublists\n                    else:\n                        count = len(lst[i])\n                else:\n                    count = Len_of_sublists\n            else:\n                if len(lst[i]) > Len_of_sublists:\n                    count = Len_of_sublists\n                else:\n                    count = len(lst[i])\n    return count\ndef Find_Sorted_Sublists(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if i+1 == len(lst):\n            if len(lst[i]) > count:\n                count = len(lst[i])\n        else:\n            if len(lst[i]) > Len_of_sublists and len(lst[i+1]) > Len_of_sublists:\n                if len(lst[i]) > Len_of_sublists and len(lst[i+1]) > Len_of_sublists:\n                    if len(lst[i]) > Len_of_sublists and len(lst[i+1]) > Len_of_sublists:\n                        count = Len_of_sublists\n                    else:\n                        count = len(lst[i])\n                else:\n                    count = Len_of_sublists\n            else:\n                if len(lst[i]) > Len_of_sublists:\n                    count = Len_of_sublists\n                else:\n                    count = len(lst[i])\n    return count\ndef Find_Sorted_Sublists(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if i+1 == len(lst):"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 1:\n        return 1\n    else:\n        return max([Find_Max_Length(lst[i:]) for i in range(len(lst))]) + 1\ndef sort_list(lst):\n    '''\n    Write a python function to sort a list in increasing order.\n    '''\n    if len(lst) == 1:\n        return lst\n    else:\n        return sort_list(lst[1:]) + [lst[0]]\ndef rotate_matrix(matrix):\n    '''\n    Write a python function to rotate a matrix 90 degrees to the right.\n    '''\n    # if len(matrix) == 1:\n    #     return matrix\n    # else:\n    #     return [matrix[j][:len(matrix) - 1] for j in range(len(matrix) - 1, -1, -1)] + [matrix[0]]\n    #return [matrix[i][:len(matrix) - 1] + matrix[i][len(matrix) - 1:] for i in range(len(matrix) - 1, -1, -1)] + [matrix[0]]\n    \ndef flatten(lst):\n    '''\n    Write a python function to flatten a list of lists.\n    '''\n    return [val for sublist in lst for val in sublist]\ndef Add_to_matrix(matrix, num):\n    '''\n    Write a python function to add a number to a matrix.\n    '''\n    return [[matrix[i][j] + num for j in range(len(matrix))] for i in range(len(matrix))]\ndef Polygon(n):\n    '''\n    Write a python function to count the number of ways to fill a polygon with n sides.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return Polygon(n - 1) + Polygon(n - 2)\ndef reverse_list(lst):\n    '''\n    Write a python function to reverse a list.\n    '''\n    if len(lst) == 1:\n        return [lst[0]]\n    else:\n        return [lst[-1]] + reverse_list(lst[:-1])\ndef build_tower(tower_length):\n    '''\n    Write a python function to build a tower.\n    '''\n    return [1] * tower_length + [0]\ndef count_char(str, ch):\n    '''\n    Write a python function to count the number of times a character appears in a string.\n    '''\n    return str.count(ch)\ndef prime_list(num):\n    '''\n    Write a python function to get a list of prime numbers up to a number.\n    '''\n    if num <= 1:\n        return []\n    elif num == 2:\n        return [2]\n    else:\n        return [2] + [i for i in range(3, num, 2) if 0 not in [i % j for j in range(2, i)]]\ndef build_transition_matrix(states, alphabet):\n    '''\n    Write a python function to build a transition matrix.\n    '''\n    return [[1 / len(alphabet) for j in range(len(alphabet))] for i in range(len(states))]\ndef get_probability(matrix, string):\n    '''\n    Write a python function to get the probability of a string for a given transition matrix.\n    '''\n    # print(matrix)\n    if string == \"\":\n        return 1\n    else:\n        return matrix[0][ord(string[0]) - 97] * get_probability(matrix, string[1:])\ndef build_dictionary(str, dictionary):\n    '''\n    Write a python function to build a dictionary.\n    '''\n    if str == \"\":\n        return\n    else:\n        build_dictionary(str[1:], dictionary)\n        dictionary[str[0]] = 1\ndef build_prefix_tree(prefix_list):\n    '''\n    Write a python function to build a prefix tree.\n    '''\n    tree = {}\n    for word in prefix_list:\n        current_tree = tree\n        for letter in word:\n            if letter not in current_tree:\n                current_tree[letter] = {}\n            current_tree = current_tree[letter]\n        current_tree[\"$\"] = \"end\"\n    return tree\ndef get_paths(tree, prefix, path, path_list):\n    '''\n    Write a python function to get the paths for a given prefix tree.\n    '''\n    if prefix == \"\":\n        if \"$\" in tree:\n            path_list.append(path)\n        return\n    else:\n        get_paths(tree[prefix], prefix, path + prefix, path_list)\n        if \"$\" in tree:\n            path_list.append(path + prefix)\n        return\ndef is_matrix(matrix):\n    '''\n    Write a python function to check if a matrix is a valid adjacency matrix.\n    '''\n    if len(matrix)!= len(matrix[0]):\n        return False\n    else:\n        for i in range(len(matrix)):\n            if len(matrix[i])!= len(matrix):\n                return False\n        return True\ndef find_kth_to_last(lst, k):\n    '''\n    Write a python function to find the kth to last element of a list.\n    '''\n    if k > len(lst):\n        return None\n    else:\n        return lst[-k]\ndef is_palindrome(str):\n    '''\n    Write a python function to check if a string is a palindrome.\n    '''\n    return str == str[::-1]\ndef contains(lst, val):\n    '''\n    Write a python function to check if a list contains a value.\n    '''\n    return val in lst\ndef get_max_char(str, max_char):\n    '''\n    Write a python function to find the character that occurs the most times.\n    '''\n    if str == \"\":\n        return max_char\n    else:\n        if str[0] > max_char:\n            max_char = str[0]\n        return get_max_char(str[1:], max_char)\ndef build_suffix_tree(suffix_list):\n    '''\n    Write a python function to build a suffix tree.\n    '''\n    tree = {}\n    for word in suffix_list:\n        current_tree = tree\n        for letter in word[::-1]:\n            if letter not in current_tree:\n                current_tree[letter] = {}\n            current_tree = current_tree[letter]\n        current_tree[\"$\"] = \"end\"\n    return tree\ndef get_suffix_tree_paths(tree, prefix):\n    '''\n    Write a python function to get the paths for a given prefix tree.\n    '''\n    if prefix == \"\":\n        if \"$\" in tree:\n            yield \"\"\n        return\n    else:\n        for letter in tree:\n            if letter == prefix[0]:\n                for path in get_suffix_tree_paths(tree[letter], prefix[1:]):\n                    yield letter + path\n            elif letter == \"$\":\n                return\n            else:\n                for path in get_suffix_tree_paths(tree[letter], prefix):\n                    yield letter + path\ndef get_longest_word(str):\n    '''\n    Write a python function to get the longest word in a string.\n    '''\n    if str == \"\":\n        return \"\"\n    else:\n        return max(get_longest_word(str[1:]), str[0])\ndef check_overlap(lst1, lst2):\n    '''\n    Write a python function to check if two lists overlap.\n    '''\n    for word1 in lst1:\n        for word2 in lst2:\n            if word1 == word2:\n                return True\n    return False\ndef non_overlapping(lst1, lst2):\n    '''\n    Write a python function to check if two lists are non overlapping.\n    '''\n    return len(lst1) > len(lst2) and lst1[-"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    sublist_length = []\n    for i in range(len(lst)):\n        if i == 0:\n            sublist_length.append(1)\n        else:\n            sublist_length.append(1)\n            for j in range(i):\n                if lst[i] > lst[j]:\n                    sublist_length[i] = sublist_length[j]+1\n    return max(sublist_length)\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    start = 0\n    end = 0\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n = len(lst)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2 if lst[1] > lst[0] else 1\n    elif n == 3:\n        return 3 if lst[2] > lst[1] and lst[2] > lst[0] else 2\n    elif n == 4:\n        return 4 if lst[3] > lst[2] and lst[3] > lst[1] and lst[3] > lst[0] else 3\n    else:\n        if lst[3] > lst[2] and lst[3] > lst[1] and lst[3] > lst[0]:\n            return 4\n        elif lst[2] > lst[1] and lst[2] > lst[0]:\n            return 3\n        elif lst[1] > lst[0]:\n            return 2\n        else:\n            return 1\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    #initializing start and end\n    start=0\n    end=0\n    #initializing max_length\n    max_length=0\n    #initializing new list\n    new_list=[]\n    #loop for finding max length\n    while end<len(lst):\n        #loop to append new elements to new list\n        while (end<len(lst)) and (lst[end]>lst[start]):\n            new_list.append(lst[end])\n            end=end+1\n        #finding max length\n        if(max_length<end-start):\n            max_length=end-start\n        #making start index\n        start=start+1\n        #making end index\n        end=end+1\n    return max_length,new_list\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r'\\\"(.*?)\\\"', text)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    start = text.find('\"')\n    if start == -1:\n        return\n    end = text.rfind('\"', start)\n    if end == -1:\n        return\n    return text[start+1:end]\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    x = re.findall(r'\\\"(.*?)\\\"', text)\n    if x == []:\n        return None\n    else:\n        return x\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'\\\".+?\\\"',text)\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    res = re.findall(r'\\\"(.*?)\\\"', text)\n    return res\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    new_text = re.findall(r'\\\"(.*?)\\\"',text)\n    return new_text\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\\\"(.+?)\\\"', re.DOTALL)\n    result = pattern.findall(text)\n    return result\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if not text:\n        return ''\n    result = re.findall(r'\"([^\"]*)\"', text)\n    return result\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return [x[1:-1] for x in re.findall(r'\\\".+?\\\"', text)]\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\\"(.*?)\\\"'\n    matches = re.findall(pattern, text)\n    return matches\ndef extract_values2(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches\ndef extract_values3(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\'(.*?)\\''\n    matches = re.findall(pattern, text)\n    return matches\ndef extract_values4(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\[(.*?)\\]'\n    matches = re.findall(pattern, text)\n    return matches\ndef extract_values5(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\{(.*?)\\}'\n    matches = re.findall(pattern, text)\n    return matches\ndef extract_values6(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\((.*?)\\)'\n    matches = re.findall(pattern, text)\n    return matches\ndef extract_values7(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\*(.*?)\\*'\n    matches = re.findall(pattern, text)\n    return matches\ndef extract_values8(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\*\\*(.*?)\\*\\*'\n    matches = re.findall(pattern, text)\n    return matches\ndef extract_values9(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\*\\*\\*(.*?)\\*\\*\\*'\n    matches = re.findall(pattern, text)\n    return matches\ndef extract_values10(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\*\\*\\*\\*(.*?)\\*\\*\\*\\*'\n    matches = re.findall(pattern, text)\n    return matches\ndef extract_values11(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\*\\*\\*(.*?)\\*\\*\\*\\*'\n    matches = re.findall(pattern, text)\n    return matches\ndef extract_values12(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\*(.*?)\\*'\n    matches = re.findall(pattern, text)\n    return matches\ndef extract_values13(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\*(.*?)\\*'\n    matches = re.findall(pattern, text)\n    return matches\ndef extract_values14(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\*(.*?)\\*'\n    matches = re.findall(pattern, text)\n    return matches\ndef extract_values15(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\*(.*?)\\*'\n    matches = re.findall(pattern, text)\n    return matches\ndef extract_values16(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\*\\*(.*?)\\*\\*'\n    matches = re.findall(pattern, text)\n    return matches\ndef extract_values17(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\*\\*\\*(.*?)\\*\\*\\*'\n    matches = re.findall(pattern, text)\n    return matches\ndef extract_values18(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\*\\*\\*(.*?)\\*\\*\\*'\n    matches = re.findall(pattern, text)\n    return matches\ndef extract_values19(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\*\\*\\*(.*?)\\*\\*'\n    matches = re.findall(pattern, text)\n    return matches\ndef extract_values20(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\*\\*\\*(.*?)\\*\\*'\n    matches = re.findall(pattern, text)\n    return matches\ndef extract_values21(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\*\\*(.*?)\\*\\*'\n    matches = re.findall(pattern, text)\n    return matches\ndef extract_values22(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\*(.*?)\\*'\n    matches = re.findall(pattern, text)\n    return matches\ndef extract_values23(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\*(.*?)\\*'\n    matches = re.findall(pattern, text)\n    return matches\ndef extract_values24(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\*(.*?)\\*'\n    matches = re.findall(pattern, text)\n    return matches\ndef extract_values25(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\*(.*?)\\*'\n    matches = re.findall(pattern, text)\n    return matches\ndef extract_values26(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\*\\*(.*?)\\*\\*'\n    matches = re.findall(pattern, text)\n    return matches\ndef extract_values27(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\*\\*\\*(.*?)\\*\\*\\*'\n    matches = re.findall(pattern, text)\n    return matches\ndef extract_values28(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\*\\*\\*(.*?)\\*\\*\\*'\n    matches = re.findall(pattern, text)\n    return matches\ndef extract_values29(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\*\\*\\*(.*?)\\*\\*\\*'\n    matches = re.findall(pattern, text)\n    return matches\ndef extract_values30(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\*\\*\\*(.*?)\\*\\*'\n    matches = re.findall(pattern, text)\n    return matches\ndef extract_values31(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    return n * (n - 1) // 2\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    hashtable = {}\n    for i in range(n):\n        if (arr[i] not in hashtable):\n            hashtable[arr[i]] = 1\n        else:\n            hashtable[arr[i]] += 1\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (arr[i]!= arr[j]):\n                if (hashtable[arr[i]] > 1):\n                    count += hashtable[arr[i]] * hashtable[arr[j]]\n                else:\n                    count += hashtable[arr[j]]\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    result = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                result += 1\n    return result\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                result = result + 1\n    return result\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count = count+1\n    return count\narr = [1,2,3,4,5,6,7,8,9]\nn = len(arr)\nprint \"Pairs = %d\" % count_Pairs(arr,n)\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in xrange(n):\n        for j in xrange(i+1,n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr.sort()\n    result = 0\n    for i in range(n):\n        j = i + 1\n        while j < n:\n            if arr[j]!= arr[i]:\n                result += 1\n            j += 1\n    return result\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Base case\n    if n==0:\n        return 0\n    # If last pair is the same then no. of pairs is same as count of elements in arr\n    if arr[n-1] == arr[n-2]:\n        return 1+count_Pairs(arr,n-2)\n    # If last pair is not the same then count the number of pairs \n    # where first element is not equal to last element\n    else:\n        return count_Pairs(arr,n-1) + count_Pairs(arr,n-2) \n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs = 0\n    for i in xrange(n):\n        for j in xrange(i+1,n):\n            if arr[i]!= arr[j]:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # print(count_Pairs([1,2,3,4,5,6,7],7))\n    count=0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n    \ndef get_word_count(words):\n    '''\n    Write a python function to count the characters in a string.\n    '''\n    count = 0\n    for word in words:\n        count += len(word)\n    return count\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n    \n    \ndef f(s):\n    '''\n    Write a python function to get the last item from a list.\n    '''\n    return s[-1]\n    \n    \ndef max(s):\n    '''\n    Write a python function to return the maximum value from a list.\n    '''\n    return max(s)\n    \n    \ndef get_input_from_user(string):\n    '''\n    Write a python function to get a string from the user.\n    '''\n    return input(string)\n    \n    \ndef get_input_from_user_until(string, user_input):\n    '''\n    Write a python function to get a string from the user until a certain string is entered.\n    '''\n    return input(string +'(enter'+ user_input +'to quit): ')\n    \n    \ndef get_int_input_from_user(string):\n    '''\n    Write a python function to get a valid integer from the user.\n    '''\n    val = None\n    while val is None:\n        try:\n            val = int(get_input_from_user(string))\n        except ValueError:\n            print('Invalid input!')\n    return val\n    \n    \ndef get_int_input_from_user_until(string, user_input):\n    '''\n    Write a python function to get a valid integer from the user.\n    '''\n    val = None\n    while val is None:\n        try:\n            val = int(get_input_from_user_until(string, user_input))\n        except ValueError:\n            print('Invalid input!')\n    return val\n    \n    \ndef get_float_input_from_user(string):\n    '''\n    Write a python function to get a valid float from the user.\n    '''\n    val = None\n    while val is None:\n        try:\n            val = float(get_input_from_user(string))\n        except ValueError:\n            print('Invalid input!')\n    return val\n    \n    \ndef get_float_input_from_user_until(string, user_input):\n    '''\n    Write a python function to get a valid float from the user.\n    '''\n    val = None\n    while val is None:\n        try:\n            val = float(get_input_from_user_until(string, user_input))\n        except ValueError:\n            print('Invalid input!')\n    return val\n    \n    \ndef get_float_input_from_user_and_skip_whitespace(string):\n    '''\n    Write a python function to get a valid float from the user and skip all the whitespaces.\n    '''\n    val = None\n    while val is None:\n        try:\n            val = float(get_input_from_user(string))\n        except ValueError:\n            print('Invalid input!')\n    return val\n    \n    \ndef get_float_input_from_user_and_skip_whitespace_until(string, user_input):\n    '''\n    Write a python function to get a valid float from the user and skip all the whitespaces.\n    '''\n    val = None\n    while val is None:\n        try:\n            val = float(get_input_from_user_until(string, user_input))\n        except ValueError:\n            print('Invalid input!')\n    return val\n    \n    \ndef get_bool_input_from_user(string):\n    '''\n    Write a python function to get a valid boolean from the user.\n    '''\n    val = None\n    while val is None:\n        try:\n            val = get_input_from_user(string)\n            if val == 'True':\n                val = True\n            elif val == 'False':\n                val = False\n            else:\n                print('Invalid input!')\n        except ValueError:\n            print('Invalid input!')\n    return val\n    \n    \ndef get_bool_input_from_user_until(string, user_input):\n    '''\n    Write a python function to get a valid boolean from the user.\n    '''\n    val = None\n    while val is None:\n        try:\n            val = get_input_from_user_until(string, user_input)\n            if val == 'True':\n                val = True\n            elif val == 'False':\n                val = False\n            else:\n                print('Invalid input!')\n        except ValueError:\n            print('Invalid input!')\n    return val\n    \n    \ndef get_int_input_from_user_and_skip_whitespace(string):\n    '''\n    Write a python function to get a valid integer from the user and skip all the whitespaces.\n    '''\n    val = None\n    while val is None:\n        try:\n            val = int(get_input_from_user(string))\n        except ValueError:\n            print('Invalid input!')\n    return val\n    \n    \ndef get_int_input_from_user_until_and_skip_whitespace(string, user_input):\n    '''\n    Write a python function to get a valid integer from the user and skip all the whitespaces.\n    '''\n    val = None\n    while val is None:\n        try:\n            val = int(get_input_from_user_until(string, user_input))\n        except ValueError:\n            print('Invalid input!')\n    return val\n    \n    \ndef get_float_input_from_user_and_skip_whitespace(string):\n    '''\n    Write a python function to get a valid float from the user and skip all the whitespaces.\n    '''\n    val = None\n    while val is None:\n        try:\n            val = float(get_input_from_user(string))\n        except ValueError:\n            print('Invalid input!')\n    return val\n    \n    \ndef get_float_input_from_user_until_and_skip_whitespace(string, user_input):\n    '''\n    Write a python function to get a valid float from the user and skip all the whitespaces.\n    '''\n    val = None\n    while val is None:\n        try:\n            val = float(get_input_from_user_until(string, user_input))\n        except ValueError:\n            print('Invalid input!')\n    return val\n    \n    \ndef get_input_from_user_and_skip_n(string, n):\n    '''\n    Write a python function to get a string from the user and skip 'n' characters from the beginning.\n    '''\n    return get_input_from_user(string)[n:]\n    \n    \ndef get_input_from_user_until_and_skip_n(string, n, user_input):\n    '''\n    Write a python function to get a string from the user until a certain character is entered and skip 'n' characters from the beginning.\n    '''\n    return get_input_from_user_until(string, user_input)[n:]\n    \n    \ndef get_input_from_user_until_and_skip_n_until(string, n, user_input):\n    '''\n    Write a python function to get a string from the user until a certain character is entered and skip 'n' characters from the beginning.\n    '''\n    return get_input_from_user_until(string, user_input)[n:]\n    \n    \ndef get_input_from_user_until_and_skip_n_from_end(string, n):\n    '''\n    Write a python function to get a string from the user until a certain character is entered and skip 'n' characters from the end.\n    '''\n    return get_input_from_user(string)[:-n]\n    \n    \ndef get_input_from_user_until_and_skip_n_from_end_until(string, n, user_input):\n    '''\n    Write a python function to get a string from the user until a certain character is entered and skip 'n' characters from the end.\n    '''\n    return get_input_from_user_until(string, user_input)[:-n]\n    \n    \ndef get_input_from_user_until_and_skip_n_from_end_until_and_skip_whitespace(string, n, user_input):\n    '''\n    Write a python function to get a string from the user until a certain characte"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n    \n    \n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word) \n    \n    \ndef join(char): \n    '''\n    Write a python function to join a list of characters into a string.\n    '''\n    return ''.join(char) \n    \n    \ndef capitalize(char): \n    '''\n    Write a python function to capitalize a single character.\n    '''\n    if len(char) == 1: \n        return char.upper() \n    else: \n        return char \n    \n    \ndef reverse(char): \n    '''\n    Write a python function to reverse a string.\n    '''\n    return char[::-1] \n    \n    \ndef strip(char): \n    '''\n    Write a python function to strip a string of leading and trailing spaces.\n    '''\n    return char.strip() \n    \n    \ndef lstrip(char): \n    '''\n    Write a python function to strip a string of leading spaces.\n    '''\n    return char.lstrip() \n    \n    \ndef rstrip(char): \n    '''\n    Write a python function to strip a string of trailing spaces.\n    '''\n    return char.rstrip() \n    \n    \ndef replace(char): \n    '''\n    Write a python function to replace a character with another character.\n    '''\n    return char.replace('a', '@') \n    \n    \ndef replace_all(char): \n    '''\n    Write a python function to replace a character with another character.\n    '''\n    return char.replace('a', '@').replace('e', '3').replace('i', '1').replace('o', '0') \n    \n    \ndef is_vowel(char): \n    '''\n    Write a python function to check if a character is a vowel.\n    '''\n    if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u': \n        return True \n    else: \n        return False \n    \n    \ndef is_consonant(char): \n    '''\n    Write a python function to check if a character is a consonant.\n    '''\n    if char == 'b' or char == 'c' or char == 'd' or char == 'f' or char == 'g' or char == 'h' or char == 'j' or char == 'k' or char == 'l' or char =='m' or char == 'n' or char == 'p' or char == 'q' or char == 'r' or char =='s' or char == 't' or char == 'v' or char == 'w' or char == 'x' or char == 'y' or char == 'z': \n        return True \n    else: \n        return False \n    \n    \ndef is_letter(char): \n    '''\n    Write a python function to check if a character is a letter.\n    '''\n    if char == 'a' or char == 'b' or char == 'c' or char == 'd' or char == 'e' or char == 'f' or char == 'g' or char == 'h' or char == 'i' or char == 'j' or char == 'k' or char == 'l' or char =='m' or char == 'n' or char == 'o' or char == 'p' or char == 'q' or char == 'r' or char =='s' or char == 't' or char == 'u' or char == 'v' or char == 'w' or char == 'x' or char == 'y' or char == 'z': \n        return True \n    else: \n        return False \n    \n    \ndef is_number(char): \n    '''\n    Write a python function to check if a character is a number.\n    '''\n    if char == '1' or char == '2' or char == '3' or char == '4' or char == '5' or char == '6' or char == '7' or char == '8' or char == '9' or char == '0': \n        return True \n    else: \n        return False \n    \n    \ndef is_alphanum(char): \n    '''\n    Write a python function to check if a character is an alphanumeric character.\n    '''\n    if char == 'a' or char == 'b' or char == 'c' or char == 'd' or char == 'e' or char == 'f' or char == 'g' or char == 'h' or char == 'i' or char == 'j' or char == 'k' or char == 'l' or char =='m' or char == 'n' or char == 'o' or char == 'p' or char == 'q' or char == 'r' or char =='s' or char == 't' or char == 'u' or char == 'v' or char == 'w' or char == 'x' or char == 'y' or char == 'z' or char == '1' or char == '2' or char == '3' or char == '4' or char == '5' or char == '6' or char == '7' or char == '8' or char == '9' or char == '0': \n        return True \n    else: \n        return False \n    \n    \ndef is_punctuation(char): \n    '''\n    Write a python function to check if a character is a punctuation.\n    '''\n    if char == '!' or char == '@' or char == '#' or char == '$' or char == '%' or char == '^' or char == '&' or char == '*' or char == '(' or char == ')' or char == '-' or char == '_' or char == '=' or char == '[' or char == ']' or char == '{' or char == '}' or char == '\\\\' or char == '|' or char == ';' or char == ':': \n        return True \n    else: \n        return False \n    \n    \ndef is_space(char): \n    '''\n    Write a python function to check if a character is a space.\n    '''\n    if char =='': \n        return True \n    else: \n        return False \n    \n    \ndef is_lower(char): \n    '''\n    Write a python function to check if a character is a lowercase character.\n    '''\n    if char == 'a' or char == 'b' or char == 'c' or char == 'd' or char == 'e' or char == 'f' or char == 'g' or char == 'h' or char == 'i' or char == 'j' or char == 'k' or char == 'l' or char =='m' or char == 'n' or char == 'o' or char == 'p' or char == 'q' or char == 'r' or char =='s' or char == 't' or char == 'u' or char == 'v' or char == 'w' or char == 'x' or char == 'y' or char == 'z': \n        return True \n    else: \n        return False \n    \n    \ndef is_upper(char): \n    '''\n    Write a python function to check if a character is uppercase character.\n    '''\n    if char == 'A' or char == 'B' or char == 'C' or char == 'D' or char == 'E' or char == 'F' or char == 'G' or char == 'H' or char == 'I' or char == 'J' or char == 'K' or char == 'L' or char == 'M' or char == 'N' or char == 'O' or char == 'P' or char == 'Q' or char == 'R' or char == 'S' or char == 'T' or char == 'U' or char == 'V' or char == 'W' or char == 'X' or char == 'Y' or char == 'Z': \n        return True \n    else: \n        return False \n    \n    \ndef is_digit(char): \n    '''\n    Write a python function to check if a character is a digit.\n    '''\n    if char == '1' or char == '2' or char == '3' or char == '4' or char == '5' or char == '6' or char == '7' or char == '8' or char == '9' or char == "
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n / 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(x) for x in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    return sum_digits(n/10) + n%10\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    \n    sum_ = 0\n    while n > 0:\n        sum_ += n % 10\n        n //= 10\n    return sum_\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Assume n is not negative\n    assert n >= 0\n    if n == 0:\n        return 0\n    elif n % 10 == 0:\n        return sum_digits(n / 10)\n    else:\n        return n % 10 + sum_digits(n / 10)\n    \n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(x) for x in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(i) for i in str(n)])\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    \n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return n if n < 10 else n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return (sorted(list1)==list1)\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if sorted(list1) == list1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if not isinstance(list1,list):\n        raise Exception(\"input is not a list\")\n    if len(list1)<2:\n        return True\n    elif list1[0]<=list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if(list1[i] > list1[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 1:\n        return True\n    if list1[0] > list1[1]:\n        return False\n    return issort_list(list1[1:])\n    \nlist1 = [1,2,3,4,5,6,7,8,9]\nprint issort_list(list1)\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    l = []\n    for i in range(length):\n        l.append({})\n    return l\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [dict() for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for i in range(length):\n        dic = {}\n        lst.append(dic)\n    return lst\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    new_list = []\n    for i in range(length):\n        new_list.append({})\n    return new_list\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    l = []\n    for i in range(length):\n        l.append({})\n    return l\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dicts = []\n    for i in range(length):\n        empty_dicts.append({})\n    return empty_dicts\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(i) for i in list1]\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list2 = []\n    for item in list1:\n        list2.append(sorted(item))\n    return list2\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublist_sort = []\n    for item in list1:\n        sublist_sort.append(sorted(item))\n    return sublist_sort\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [[l[i] for l in list1] for i in range(len(list1[0]))]\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublist_sorted = []\n    for sublist in list1:\n        sublist_sorted.append(sorted(sublist))\n    return sublist_sorted\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(elem) for elem in list1]\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_sublists_helper(list1):\n        '''\n        This is a helper function that can be used to sort a list of lists.\n        It works by sorting the strings, which is the same as sorting the\n        integers, which is done by using the len() function.\n        '''\n        # The sorted_list is a list that contains all of the sorted strings.\n        sorted_list = sorted(list1, key=len)\n        # This is a helper function that sorts the strings in a list.\n        # It will be used in the second step of the function.\n        def sort_strings(list1):\n            '''\n            This is a helper function that sorts a list of strings.\n            '''\n            # This is a helper function that sorts the integers in a list.\n            def sort_integers(list1):\n                '''\n                This is a helper function that sorts the integers in a list.\n                '''\n                # This is a helper function that sorts the integers in a list.\n                def sort_integers_helper(list1):\n                    '''\n                    This is a helper function that can be used to sort the integers\n                    in a list.\n                    '''\n                    # This is a helper function that sorts the integers in a list.\n                    def sort_integers_helper(list1):\n                        '''\n                        This is a helper function that can be used to sort the integers\n                        in a list.\n                        '''\n                        # The sorted_list is a list that contains all of the sorted strings.\n                        sorted_list = sorted(list1, key=len)\n                        # The list is returned.\n                        return sorted_list\n                    # This is a helper function that sorts the integers in a list.\n                    # It returns the sorted list.\n                    return sort_integers_helper(list1)\n                # This is a helper function that sorts the strings in a list.\n                # It returns the sorted list.\n                return sort_strings_helper(list1)\n            # This is a helper function that sorts the strings in a list.\n            # It returns the sorted list.\n            return sort_strings_helper(list1)\n        # This is a helper function that sorts the strings in a list.\n        # It returns the sorted list.\n        return sort_strings(list1)\n    # This is a helper function that sorts the strings in a list.\n    # It returns the sorted list.\n    return sort_strings_helper(list1)\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sublist_key(x):\n        '''\n        Use built-in python function sorted to sort each sublist\n        '''\n        return sorted(x)\n    # Use built-in python function sorted to sort each sublist\n    return map(sublist_key, list1)\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return list(map(sorted, list1))\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(set(nums))\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    pass\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(set(nums))\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return len(set(nums))\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    for num in nums:\n        while len(nums)!= len(set(nums)):\n            for x in num:\n                if x in nums:\n                    nums.remove(x)\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    l = len(nums)\n    i = 0\n    while i < l:\n        if nums.count(nums[i]) == 1:\n            nums.remove(nums[i])\n            l = len(nums)\n        else:\n            i += 1\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return len(nums) == len(set(nums))\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = []\n    for num in nums:\n        if num not in seen:\n            seen.append(num)\n    return seen\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return len(set(nums)) == 2\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    uniq = []\n    for i in nums:\n        if i not in uniq:\n            uniq.append(i)\n    return uniq\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_product = 1\n    for number in list_data:\n        unique_product *= number\n    return unique_product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Write your code here\n    product = 1\n    for i in set(list_data):\n        product *= i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # base case\n    if len(list_data) == 1:\n        return list_data[0]\n    else:\n        return list_data[0]*unique_product(list_data[1:])\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    temp = {}\n    for i in list_data:\n        if i in temp:\n            temp[i] = temp[i] + 1\n        else:\n            temp[i] = 1\n    res = 1\n    for i in temp.keys():\n        res = res * (i ** temp[i])\n    return res\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    from collections import Counter\n    list_data = sorted(list_data)\n    dict_data = Counter(list_data)\n    return dict_data[list_data[0]]*dict_data[list_data[-1]]\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return(reduce(lambda x,y:x*y, set(list_data)))\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    dict_data = {}\n    for x in list_data:\n        if x in dict_data:\n            dict_data[x] += 1\n        else:\n            dict_data[x] = 1\n    return dict_data\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for x in list_data:\n        product *= x\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for data in list_data:\n        product = product * data\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    pass\n    # your code goes here\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 3.1415 * r * r + 2 * 3.1415 * r * h\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return pi*r**2 + 2*pi*r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return pi * r**2 + 2*pi*r*h\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return pi * r**2 * h\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0) * pi * r**3\n    \ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4.0*pi*r**2\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0) * pi * r**3\n    \ndef surfacearea_torus(r,h):\n    '''\n    Write a function to find the surface area of a torus.\n    '''\n    return 2*pi*r*(r+h)\n    \ndef volume_torus(r,h):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return 2*pi*r*(r+h)**2\n    \ndef volume_spheroid(r,h):\n    '''\n    Write a function to find the volume of a spheroid.\n    '''\n    return volume_sphere(r) + volume_cylinder(r,h)\n    \ndef surfacearea_spheroid(r,h):\n    '''\n    Write a function to find the surface area of a spheroid.\n    '''\n    return surfacearea_sphere(r) + surfacearea_cylinder(r,h)\n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return pi*r*(r+h)**2\n    \ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return pi*r*(r+h)\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return pi * r**2 + 2*pi*r*h\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return pi * r**2 + 2*pi*r*h\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0) * pi * r**3\n    \ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4.0*pi*r**2\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0) * pi * r**3\n    \ndef surfacearea_torus(r,h):\n    '''\n    Write a function to find the surface area of a torus.\n    '''\n    return 2*pi*r*(r+h)\n    \ndef volume_torus(r,h):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return 2*pi*r*(r+h)**2\n    \ndef volume_spheroid(r,h):\n    '''\n    Write a function to find the volume of a spheroid.\n    '''\n    return volume_sphere(r) + volume_cylinder(r,h)\n    \ndef surfacearea_spheroid(r,h):\n    '''\n    Write a function to find the surface area of a spheroid.\n    '''\n    return surfacearea_sphere(r) + surfacearea_cylinder(r,h)\n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return pi*r*(r+h)**2\n    \ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return pi*r*(r+h)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0) * pi * r**3\n    \ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4.0*pi*r**2\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0) * pi * r**3\n    \ndef surfacearea_torus(r,h):\n    '''\n    Write a function to find the surface area of a torus.\n    '''\n    return 2*pi*r*(r+h)\n    \ndef volume_torus(r,h):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return 2*pi*r*(r+h)**2\n    \ndef volume_spheroid(r,h):\n    '''\n    Write a function to find the volume of a spheroid.\n    '''\n    return volume_sphere(r) + volume_cylinder(r,h)\n    \ndef surfacearea_spheroid(r,h):\n    '''\n    Write a function to find the surface area of a spheroid.\n    '''\n    return surfacearea_sphere(r) + surfacearea_cylinder(r,h)\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return pi * r**2 + 2*pi*r*h\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return pi * r**2 + 2*pi*r*h\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0) * pi * r**3\n    \ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4.0*pi*r**2\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0) * pi * r**3\n    \ndef surfacearea_torus(r,h):\n    '''\n    Write a function to find the surface area of a torus.\n    '''\n    return 2*pi*r*(r+h)\n    \ndef volume_torus(r,h):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return 2*pi*r*(r+h)**2\n    \ndef volume_spheroid(r,h):\n    '''\n    Write a function to find the volume of a spheroid.\n    '''\n    return volume_sphere(r) + volume_cylinder(r,h)\n    \ndef surfacearea_spheroid(r,h):\n    '''\n    Write a function to find the surface area of a spheroid.\n    '''\n    return surfacearea_sphere(r) + surfacearea_cylinder(r,h)\n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return pi*r*(r+h)**2\n    \ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return pi*r*(r+h)\n    \ndef volume_sphere"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return pi*(r**2+h**2)*2\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    \n    from math import pi\n    \n    return pi*r**2+2*pi*r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (math.pi * (r**2) + 2 * math.pi * r * h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    SA = math.pi*(r**2 + r*h)\n    return SA\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = 2*pi*r*(r+h)\n    return surfacearea\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a = pi * 2 * r + pi * r * h\n    return a\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 3.14 * r * 2 + 2.0 * 3.14 * r**2\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A): return False\n    for i in range(len(A)):\n        if A[i]!= B[i]: return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    if len(B) == len(A):\n        return all(i in A for i in B)\n    else:\n        return any(i in A for i in B)\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)):\n        if A[i] == B[0] and A[i:i+len(B)] == B:\n            return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)):\n        if B[i] == A[0] and is_Sub_Array(A[1:],B[i+1:]):\n            return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)):\n        if B[i] not in A:\n            return False\n        return True\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    #list = [1,2,3,4,5,6,7,8,9,10]\n    #print list[-1::-1]\n    #print len(A)\n    #print len(B)\n    #print len(list)\n    #if len(A)==len(B):\n    #    for i in range(len(A)):\n    #        if A[i]==B[i]:\n    #            continue\n    #        else:\n    #            return False\n    #return True\n    return B in A\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)):\n        if B[i] not in A:\n            return False\n    return True\n    \ndef is_Sup_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)):\n        if B[i] not in A:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    if A[0:len(B)] == B:\n        return True\n    return is_Sub_Array(A[1:],B)\ndef is_Anagram(A,B):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    if len(A)!= len(B):\n        return False\n    if sorted(A) == sorted(B):\n        return True\n    return is_Anagram(A,B[1:])\ndef is_Palindrome(A):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    if A == A[::-1]:\n        return True\n    return is_Palindrome(A[1:])\ndef is_Anagram(A,B):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    if len(A)!= len(B):\n        return False\n    if sorted(A) == sorted(B):\n        return True\n    return is_Anagram(A,B[1:])\ndef Rotate_Left(A,n):\n    '''\n    Write a python function to rotate an array by n times or left.\n    '''\n    if n == 0:\n        return A\n    if len(A) <= 1:\n        return A\n    A.append(A[0])\n    return A[1:n+1] + A[:1] + A[n+1:]\ndef Rotate_Right(A,n):\n    '''\n    Write a python function to rotate an array by n times or right.\n    '''\n    if n == 0:\n        return A\n    if len(A) <= 1:\n        return A\n    A.append(A[0])\n    return A[n:] + A[:n+1]\ndef Min_Window_Substring(S,T):\n    '''\n    Write a python function to find the minimum size substring in a given string S which is a \n    substring of S.\n    '''\n    if len(S) < len(T):\n        return -1\n    if len(S) == len(T):\n        return T\n    if len(T) == 1:\n        return T\n    S_Set = set(S)\n    T_Set = set(T)\n    if S_Set & T_Set:\n        return T\n    minimum_len = len(T)\n    for i in xrange(len(S)-len(T)+1):\n        if is_Sub_Array(S[i:i+len(T)],T):\n            if i == 0:\n                minimum_len = len(T)\n            else:\n                minimum_len = min(minimum_len,i+len(T))\n    return S[minimum_len:minimum_len+len(T)]\ndef is_Anagram(A,B):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    if len(A)!= len(B):\n        return False\n    if sorted(A) == sorted(B):\n        return True\n    return is_Anagram(A,B[1:])\ndef is_Anagram(A,B):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    if len(A)!= len(B):\n        return False\n    if sorted(A) == sorted(B):\n        return True\n    return is_Anagram(A,B[1:])\ndef is_Anagram(A,B):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    if len(A)!= len(B):\n        return False\n    if sorted(A) == sorted(B):\n        return True\n    return is_Anagram(A,B[1:])\ndef Rotate_Left(A,n):\n    '''\n    Write a python function to rotate an array by n times or left.\n    '''\n    if n == 0:\n        return A\n    if len(A) <= 1:\n        return A\n    A.append(A[0])\n    return A[1:n+1] + A[:1] + A[n+1:]\ndef Rotate_Right(A,n):\n    '''\n    Write a python function to rotate an array by n times or right.\n    '''\n    if n == 0:\n        return A\n    if len(A) <= 1:\n        return A\n    A.append(A[0])\n    return A[n:] + A[:n+1]\ndef Min_Window_Substring(S,T):\n    '''\n    Write a python function to find the minimum size substring in a given string S which is a \n    substring of S.\n    '''\n    if len(S) < len(T):\n        return -1\n    if len(S) == len(T):\n        return T\n    if len(T) == 1:\n        return T\n    S_Set = set(S)\n    T_Set = set(T)\n    if S_Set & T_Set:\n        return T\n    minimum_len = len(T)\n    for i in xrange(len(S)-len(T)+1):\n        if is_Sub_Array(S[i:i+len(T)],T):\n            if i == 0:\n                minimum_len = len(T)\n            else:\n                minimum_len = min(minimum_len,i+len(T))\n    return S[minimum_len:minimum_len+len(T)]\ndef is_Anagram(A,B):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    if len(A)!= len(B):\n        return False\n    if sorted(A) == sorted(B):\n        return True\n    return is_Anagram(A,B[1:])\ndef is_Anagram(A,B):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    if len(A)!= len(B):\n        return False\n    if sorted(A) == sorted(B):\n        return True\n    return is_Anagram(A,B[1:])\ndef is_Anagram(A,B):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    if len(A)!= len(B):\n        return False\n    if sorted(A) == sorted(B):\n        return True\n    return is_Anagram(A,B[1:])\ndef Rotate_Left(A,n):\n    '''\n    Write a python function to rotate an array by n times or left.\n    '''\n    if n == 0:\n        return A\n    if len(A) <= 1:\n        return A\n    A.append(A[0])\n    return A[1:n+1] + A[:1] + A[n+1:]\ndef Rotate_Right(A,n):\n    '''\n    Write a python function to rotate an array by n times or right.\n    '''\n    if n == 0:\n        return A\n    if len(A) <= 1:\n        return A\n    A.append(A[0])\n    return A[n:] + A[:n+1]\ndef Min_Window_Substring(S,T):\n    '''\n    Write a python function to find the minimum size substring in a given string S which is a \n    substring of S.\n    '''\n    if len(S) < len(T):\n        return -1\n    if len(S) == len(T):\n        return T\n    if len(T) == 1:\n        return T\n    S_Set = set(S)\n    T_Set = set(T)\n    if S_Set & T_Set:\n        return T\n    minimum_len = len(T)\n    for i in xrange(len(S)-len(T)+1):\n        if is_Sub_Array(S[i:i+len(T)],T):\n            if i == 0:\n                minimum_len = len(T)\n            else:\n                minimum_le"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not A:\n        return True\n    if not B:\n        return False\n    if A[0] == B[0]:\n        return is_Sub_Array(A[1:],B[1:])\n    return is_Sub_Array(A[1:],B)\ndef is_Permutation(A,B):\n    '''\n    Write a python function to check whether two lists are permutations of each other or not.\n    '''\n    if not A:\n        return True\n    if not B:\n        return False\n    if len(A)!= len(B):\n        return False\n    return is_Sub_Array(A,B) and is_Sub_Array(B,A)\ndef is_Palindrome(A):\n    '''\n    Write a python function to check whether a list is palindrome or not.\n    '''\n    if not A:\n        return True\n    mid = len(A)//2\n    for i in xrange(mid):\n        if A[i]!= A[-1-i]:\n            return False\n    return True\ndef is_Permutation_2(A,B):\n    '''\n    Write a python function to check whether two lists are permutations of each other or not.\n    '''\n    if not A:\n        return True\n    if not B:\n        return False\n    if len(A)!= len(B):\n        return False\n    A = sorted(A)\n    B = sorted(B)\n    for i in xrange(len(A)):\n        if A[i]!= B[i]:\n            return False\n    return True\ndef is_Permutation_3(A,B):\n    '''\n    Write a python function to check whether two lists are permutations of each other or not.\n    '''\n    if not A:\n        return True\n    if not B:\n        return False\n    if len(A)!= len(B):\n        return False\n    A = sorted(A)\n    B = sorted(B)\n    for i in xrange(len(A)):\n        if A[i]!= B[i]:\n            return False\n    return True\ndef is_Permutation_4(A,B):\n    '''\n    Write a python function to check whether two lists are permutations of each other or not.\n    '''\n    if not A:\n        return True\n    if not B:\n        return False\n    if len(A)!= len(B):\n        return False\n    A = sorted(A)\n    B = sorted(B)\n    for i in xrange(len(A)):\n        if A[i]!= B[i]:\n            return False\n    return True\ndef is_Permutation_5(A,B):\n    '''\n    Write a python function to check whether two lists are permutations of each other or not.\n    '''\n    if not A:\n        return True\n    if not B:\n        return False\n    if len(A)!= len(B):\n        return False\n    A = sorted(A)\n    B = sorted(B)\n    for i in xrange(len(A)):\n        if A[i]!= B[i]:\n            return False\n    return True\ndef is_Permutation_6(A,B):\n    '''\n    Write a python function to check whether two lists are permutations of each other or not.\n    '''\n    if not A:\n        return True\n    if not B:\n        return False\n    if len(A)!= len(B):\n        return False\n    A = sorted(A)\n    B = sorted(B)\n    for i in xrange(len(A)):\n        if A[i]!= B[i]:\n            return False\n    return True\ndef is_Permutation_7(A,B):\n    '''\n    Write a python function to check whether two lists are permutations of each other or not.\n    '''\n    if not A:\n        return True\n    if not B:\n        return False\n    if len(A)!= len(B):\n        return False\n    A = sorted(A)\n    B = sorted(B)\n    for i in xrange(len(A)):\n        if A[i]!= B[i]:\n            return False\n    return True\ndef is_Permutation_8(A,B):\n    '''\n    Write a python function to check whether two lists are permutations of each other or not.\n    '''\n    if not A:\n        return True\n    if not B:\n        return False\n    if len(A)!= len(B):\n        return False\n    A = sorted(A)\n    B = sorted(B)\n    for i in xrange(len(A)):\n        if A[i]!= B[i]:\n            return False\n    return True\ndef is_Permutation_9(A,B):\n    '''\n    Write a python function to check whether two lists are permutations of each other or not.\n    '''\n    if not A:\n        return True\n    if not B:\n        return False\n    if len(A)!= len(B):\n        return False\n    A = sorted(A)\n    B = sorted(B)\n    for i in xrange(len(A)):\n        if A[i]!= B[i]:\n            return False\n    return True\ndef is_Permutation_10(A,B):\n    '''\n    Write a python function to check whether two lists are permutations of each other or not.\n    '''\n    if not A:\n        return True\n    if not B:\n        return False\n    if len(A)!= len(B):\n        return False\n    A = sorted(A)\n    B = sorted(B)\n    for i in xrange(len(A)):\n        if A[i]!= B[i]:\n            return False\n    return True\ndef is_Permutation_11(A,B):\n    '''\n    Write a python function to check whether two lists are permutations of each other or not.\n    '''\n    if not A:\n        return True\n    if not B:\n        return False\n    if len(A)!= len(B):\n        return False\n    A = sorted(A)\n    B = sorted(B)\n    for i in xrange(len(A)):\n        if A[i]!= B[i]:\n            return False\n    return True\ndef is_Permutation_12(A,B):\n    '''\n    Write a python function to check whether two lists are permutations of each other or not.\n    '''\n    if not A:\n        return True\n    if not B:\n        return False\n    if len(A)!= len(B):\n        return False\n    A = sorted(A)\n    B = sorted(B)\n    for i in xrange(len(A)):\n        if A[i]!= B[i]:\n            return False\n    return True\ndef is_Permutation_13(A,B):\n    '''\n    Write a python function to check whether two lists are permutations of each other or not.\n    '''\n    if not A:\n        return True\n    if not B:\n        return False\n    if len(A)!= len(B):\n        return False\n    A = sorted(A)\n    B = sorted(B)\n    for i in xrange(len(A)):\n        if A[i]!= B[i]:\n            return False\n    return True\ndef is_Permutation_14(A,B):\n    '''\n    Write a python function to check whether two lists are permutations of each other or not.\n    '''\n    if not A:\n        return True\n    if not B:\n        return False\n    if len(A)!= len(B):\n        return False\n    A = sorted(A)\n    B = sorted(B)\n    for i in xrange(len(A)):\n        if A[i]!= B[i]:\n            return False\n    return True\ndef is_Permutation_15(A,B):\n    '''\n    Write a python function to check whether two lists are permutations of each other or not.\n    '''\n    if not A:\n        return True\n    if not B:\n        return False\n    if len(A)!= len(B):\n        return False\n    A = sorted(A)\n    B = sorted(B)\n    for i in xrange"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n*last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    count = 1\n    while (count <= n):\n        count *= 10\n    return count % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    i = 10\n    while (i>0):\n        n = n//i\n        i = i-1\n    return n\ndef find_Digit_Factorial(n):\n    '''\n    Write a python function to find the first digit in factorial of a given number.\n    '''\n    i = 9\n    while (i>0):\n        n = n//i\n        i = i-1\n    return n\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 0:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef factorial_Digit_Count(n):\n    '''\n    Write a python function to find the count of digits in the factorial of a given number.\n    '''\n    i = 10\n    while (i>0):\n        n = n//i\n        i = i-1\n    return i\ndef factorial_Digit_Sum(n):\n    '''\n    Write a python function to find the sum of digits in the factorial of a given number.\n    '''\n    i = 10\n    total = 0\n    while (i>0):\n        n = n//i\n        i = i-1\n        total = total + n%10\n    return total\ndef first_Digit_Sum(n):\n    '''\n    Write a python function to find the sum of digits in the factorial of a given number.\n    '''\n    i = 9\n    total = 0\n    while (i>0):\n        n = n//i\n        i = i-1\n        total = total + n%10\n    return total\ndef first_Digit_Product(n):\n    '''\n    Write a python function to find the product of digits in the factorial of a given number.\n    '''\n    i = 9\n    total = 1\n    while (i>0):\n        n = n//i\n        i = i-1\n        total = total*n%10\n    return total\ndef first_Digit_Multiplication(n):\n    '''\n    Write a python function to find the multiplication of digits in the factorial of a given number.\n    '''\n    i = 9\n    total = 1\n    while (i>0):\n        n = n//i\n        i = i-1\n        total = total*n%10\n    return total\ndef first_Digit_Division(n):\n    '''\n    Write a python function to find the division of digits in the factorial of a given number.\n    '''\n    i = 9\n    total = 0\n    while (i>0):\n        n = n//i\n        i = i-1\n        total = total + n%10\n    return total\ndef first_Digit_Remainder(n):\n    '''\n    Write a python function to find the remainder of digits in the factorial of a given number.\n    '''\n    i = 9\n    total = 0\n    while (i>0):\n        n = n//i\n        i = i-1\n        total = total + n%10\n    return total\ndef last_Digit_Sum(n):\n    '''\n    Write a python function to find the sum of last digits in the factorial of a given number.\n    '''\n    i = 1\n    total = 0\n    while (i<=n):\n        n = n//i\n        i = i+1\n        total = total + n%10\n    return total\ndef last_Digit_Product(n):\n    '''\n    Write a python function to find the product of last digits in the factorial of a given number.\n    '''\n    i = 1\n    total = 1\n    while (i<=n):\n        n = n//i\n        i = i+1\n        total = total*n%10\n    return total\ndef last_Digit_Division(n):\n    '''\n    Write a python function to find the division of last digits in the factorial of a given number.\n    '''\n    i = 1\n    total = 0\n    while (i<=n):\n        n = n//i\n        i = i+1\n        total = total + n%10\n    return total\ndef last_Digit_Remainder(n):\n    '''\n    Write a python function to find the remainder of last digits in the factorial of a given number.\n    '''\n    i = 1\n    total = 0\n    while (i<=n):\n        n = n//i\n        i = i+1\n        total = total + n%10\n    return total\ndef first_Digit_Euclidean(n):\n    '''\n    Write a python function to find the Euclidean of first digits in the factorial of a given number.\n    '''\n    i = 10\n    while (i>0):\n        n = n//i\n        i = i-1\n    return n\ndef last_Digit_Euclidean(n):\n    '''\n    Write a python function to find the Euclidean of last digits in the factorial of a given number.\n    '''\n    i = 1\n    total = 0\n    while (i<=n):\n        n = n//i\n        i = i+1\n        total = total + n%10\n    return total\ndef first_Digit_Euclidean_Count(n):\n    '''\n    Write a python function to find the count of digits in the Euclidean of first digits in the factorial of a given number.\n    '''\n    i = 10\n    while (i>0):\n        n = n//i\n        i = i-1\n    return i\ndef last_Digit_Euclidean_Count(n):\n    '''\n    Write a python function to find the count of digits in the Euclidean of last digits in the factorial of a given number.\n    '''\n    i = 1\n    total = 0\n    while (i<=n):\n        n = n//i\n        i = i+1\n        total = total + n%10\n    return total\ndef first_Digit_Euclidean_Sum(n):\n    '''\n    Write a python function to find the sum of digits in the Euclidean of first digits in the factorial of a given number.\n    '''\n    i = 10\n    total = 0\n    while (i>0):\n        n = n//i\n        i = i-1\n        total = total + n%10\n    return total\ndef last_Digit_Euclidean_Sum(n):\n    '''\n    Write a python function to find the sum of digits in the Euclidean of last digits in the factorial of a given number.\n    '''\n    i = 1\n    total = 0\n    while (i<=n):\n        n = n//i\n        i = i+1\n        total = total + n%10\n    return total\ndef first_Digit_Euclidean_Product(n):\n    '''\n    Write a python function to find the product of digits in the Euclidean of first digits in the factorial of a given number.\n    '''\n    i = 10\n    total = 1\n    while (i>0):\n        n = n//i\n        i = i-1\n        total = total*n%10\n    return total\ndef last_Digit_Euclidean_Product(n):\n    '''\n    Write a python function to find the product of digits in the Euclidean of last digits in the factorial of a given number.\n    '''\n    i = 1\n    total = 1\n    while (i<=n):\n        n = n//i\n        i = i+1\n        total = total*n%10\n    return total\ndef first_Digit_Euclidean_Division(n):\n    '''\n    Write a python function to find the division of digits in the Euclidean of first digits in the factorial of a given number.\n    '''\n    i = 10\n    total = 0\n    while (i>0):\n        n = n//i\n        i = i-1\n        total = total + n%10\n    return total\ndef last_Digit_Euclidean_Division(n):\n    '''\n    Write a python function to find the division of digits in the Euclidean of last digits in the factorial of a given number.\n    ''"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    #print(\"This is the last digit in factorial of {}\".format(n))\n    return n%10\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0: \n        return -1\n    elif n == 1: \n        return 1\n    else: \n        return (n % 10) * last_Digit_Factorial(n // 10)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    assert type(n)==int and n>0\n    last_Digit_Factorial.res=1\n    for i in range(1,n+1):\n        last_Digit_Factorial.res*=i%10\n    return last_Digit_Factorial.res\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    Factorial = 1\n    for i in range(1, n + 1):\n        Factorial = Factorial * i\n    \n    # Python3 code to find the last digit \n    # of the factorial of a number \n    Factorial = str(Factorial)\n    return int(Factorial[-1])\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    Factorial = 1\n    while(n!= 1):\n        Factorial *= n\n        n = n-1\n    Factorial = str(Factorial)\n    if Factorial[-1] == '1':\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list(zip(list1,list2,list3))\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = [list1[i] + list2[i] + list3[i] for i in range(len(list1))]\n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [x for x in zip(list1, list2, list3)]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    res=[]\n    for i in range(len(list1)):\n        res.append(list1[i])\n        res.append(list2[i])\n        res.append(list3[i])\n    return res\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list(zip(list1,list2,list3))\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    inter_list=[]\n    for i,j,k in zip(list1,list2,list3):\n        inter_list.extend([i,j,k])\n    return inter_list\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    output = []\n    for i in range(len(list1)):\n        output.append(list1[i])\n        output.append(list2[i])\n        output.append(list3[i])\n    return output\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = [list1[i] + list2[i] + list3[i] for i in range(len(list1))]\n    return interleaved_list\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # I did not realize how to interleave 3 lists of the same length, so I looked it up.\n    # I noticed there's a set of python functions that I could use to interleave three lists, but I couldn't get that to work.\n    # This function will be very useful for things like keypad combos.\n    # It takes in 3 lists of the same length, and interleaves them.\n    # It will return a single list, with the items from each list interleaved according to their position.\n    # If you don't know the interleave function, Google it.\n    # To use this function, enter interleave_lists([1,2,3],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # It should return [1,\"a\",2,\"b\",3,\"c\"]\n    # You can also use it to interleave two lists of different lengths.\n    # It should return [1,2,3,4,5,6,7]\n    # Do you understand this function?\n    # I made it more complicated than I wanted because it's the only way I found to do this without using a library.\n    # As it stands, it works, but it is very clunky.\n    # I will try to use a library that I know to work, but it will be clunky and tedious to use.\n    # I would need to google it, so I just made this function.\n    # If you want to get to the library, you can do so here.\n    # >>> from interleave_lists import interleave_lists\n    # >>> interleave_lists([1,2,3],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4,5],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4,5,6],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,2,3,4],[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"c\"])\n    # >>> interleave_lists([1,"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] + [list2[i]] + [list3[i]] for i in range(len(list1))]\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    res = []\n    for val1, val2 in zip(test_tup1, test_tup2):\n        if val1!= val2:\n            res.append(val1)\n    return tuple(res)\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # This is the pythonic way to do the problem.\n    # return [t for t in test_tup1 if t not in test_tup2]\n    # This is the pythonic way to do the problem.\n    # return [t for t in test_tup1 if t not in test_tup2]\n    # The following solution is the pythonic way to do the problem.\n    # Instead of using the method above, you can write code in one line\n    return [t for t in test_tup1 if t not in test_tup2]\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if(len(test_tup1)!= len(test_tup2)):\n        print \"You have given 2 tuples with different lengths\"\n        return\n    result = []\n    for i in range(len(test_tup1)):\n        if(test_tup1[i]!= test_tup2[i]):\n            result.append(test_tup1[i])\n    return result\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return (tup1[0]!=tup2[0] and tup1[1]!=tup2[1] and tup1[2]!=tup2[2]) or (tup1[0]!=tup2[0] and tup1[1]!=tup2[1] and tup1[2]==tup2[2]) or (tup1[0]!=tup2[0] and tup1[1]==tup2[1] and tup1[2]!=tup2[2]) or (tup1[0]!=tup2[0] and tup1[1]==tup2[1] and tup1[2]==tup2[2])\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result = set(test_tup1) & set(test_tup2)\n    if result:\n        print(\"There are dissimilar elements: {}\".format(result))\n    else:\n        print(\"There are no dissimilar elements\")\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = set(test_tup1) ^ set(test_tup2)\n    return dissimilar_elements\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    \n    for tup1_elem in test_tup1:\n        if not tup1_elem in test_tup2:\n            dissimilar.append(tup1_elem)\n    \n    for tup2_elem in test_tup2:\n        if not tup2_elem in test_tup1:\n            dissimilar.append(tup2_elem)\n    \n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    if len(test_set1.symmetric_difference(test_set2)) == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    #find the index of dissimilar elements in tup1 and tup2\n    dissimilar_ind = []\n    for i in xrange(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_ind.append(i)\n    \n    #output the indices\n    return dissimilar_ind\n    \ndef get_min_index(a):\n    '''\n    Write a function to get the index of the minimum value in the given list.\n    '''\n    \n    #get the minimum value\n    min_ind = a.index(min(a))\n    \n    #return the index\n    return min_ind\n    \ndef new_tuple(old_tup, index, new_val):\n    '''\n    Write a function to create a new tuple by inserting a new value at the given index.\n    '''\n    \n    #create a new tuple\n    new_tup = tuple()\n    \n    #add the elements to the new tuple\n    for i in xrange(len(old_tup)):\n        if i == index:\n            new_tup += (new_val,)\n        else:\n            new_tup += (old_tup[i],)\n    \n    #return the new tuple\n    return new_tup\n    \ndef get_expectation(dist, prob):\n    '''\n    Write a function to calculate the expectation of a random variable, whose distribution is given by the given probability.\n    '''\n    \n    #calculate the expectation\n    expect = 0\n    for i in xrange(len(dist)):\n        expect += dist[i]*prob[i]\n    \n    #return the expectation\n    return expect\n    \ndef get_expectation_of_list(dist, prob):\n    '''\n    Write a function to calculate the expectation of a list of random variables, whose distribution is given by the given probability.\n    '''\n    \n    #initialize the list\n    expect_list = []\n    \n    #for each random variable\n    for i in xrange(len(dist)):\n        expect = get_expectation(dist, prob)\n        expect_list.append(expect)\n    \n    #return the list\n    return expect_list\n    \ndef get_var_of_list(expect_list):\n    '''\n    Write a function to calculate the variance of a list of random variables, whose distribution is given by the given probability.\n    '''\n    \n    #initialize the var_list\n    var_list = []\n    \n    #for each random variable\n    for i in xrange(len(expect_list)):\n        #calculate the variance\n        var = (expect_list[i]-expect_list[i]**2)**2\n        var_list.append(var)\n    \n    #return the list\n    return var_list\n    \ndef get_std_of_list(var_list):\n    '''\n    Write a function to calculate the standard deviation of a list of random variables, whose distribution is given by the given probability.\n    '''\n    \n    #initialize the std_list\n    std_list = []\n    \n    #for each random variable\n    for i in xrange(len(var_list)):\n        #calculate the standard deviation\n        std = var_list[i]**(1/2)\n        std_list.append(std)\n    \n    #return the list\n    return std_list\n    \ndef get_sum_of_list(a):\n    '''\n    Write a function to calculate the sum of a list.\n    '''\n    \n    #initialize the sum\n    sum = 0\n    \n    #for each element\n    for i in xrange(len(a)):\n        sum += a[i]\n    \n    #return the sum\n    return sum\n    \ndef get_mean_of_list(a):\n    '''\n    Write a function to calculate the mean of a list.\n    '''\n    \n    #initialize the mean\n    mean = 0\n    \n    #for each element\n    for i in xrange(len(a)):\n        mean += a[i]\n    \n    #get the mean\n    mean = mean/len(a)\n    \n    #return the mean\n    return mean\n    \ndef get_max_of_list(a):\n    '''\n    Write a function to get the maximum of a list.\n    '''\n    \n    #initialize the max\n    max = a[0]\n    \n    #for each element\n    for i in xrange(len(a)):\n        if a[i] > max:\n            max = a[i]\n    \n    #return the max\n    return max\n    \ndef get_min_of_list(a):\n    '''\n    Write a function to get the minimum of a list.\n    '''\n    \n    #initialize the min\n    min = a[0]\n    \n    #for each element\n    for i in xrange(len(a)):\n        if a[i] < min:\n            min = a[i]\n    \n    #return the min\n    return min\n    \ndef get_median_of_list(a):\n    '''\n    Write a function to calculate the median of a list.\n    '''\n    \n    #get the length of the list\n    len_a = len(a)\n    \n    #if the length of the list is odd\n    if len_a % 2:\n        #get the element at the middle index\n        median = a[len_a/2]\n    \n    #if the length of the list is even\n    else:\n        #get the first element\n        median = (a[len_a/2]+a[len_a/2-1])/2.0\n    \n    #return the median\n    return median\n    \ndef get_mode_of_list(a):\n    '''\n    Write a function to calculate the mode of a list.\n    '''\n    \n    #initialize the mode\n    mode = 0\n    \n    #get the frequency of each element\n    freq_of_element = [0 for i in xrange(len(a))]\n    for i in xrange(len(a)):\n        freq_of_element[a[i]] += 1\n    \n    #get the mode\n    for i in xrange(len(a)):\n        if freq_of_element[i] > mode:\n            mode = freq_of_element[i]\n            mode_index = i\n    \n    #get the mode index\n    mode_index = a.index(mode_index)\n    \n    #return the mode index\n    return mode_index\n    \ndef get_variance_of_list(expect_list, std_list):\n    '''\n    Write a function to calculate the variance of a list of random variables, whose distribution is given by the given probability.\n    '''\n    \n    #initialize the var_list\n    var_list = []\n    \n    #for each random variable\n    for i in xrange(len(expect_list)):\n        #calculate the variance\n        var = (expect_list[i]-expect_list[i]**2)*std_list[i]**2\n        var_list.append(var)\n    \n    #return the list\n    return var_list\n    \ndef get_std_of_list_with_var(var_list):\n    '''\n    Write a function to calculate the standard deviation of a list of random variables, whose distribution is given by the given probability.\n    '''\n    \n    #initialize the std_list\n    std_list = []\n    \n    #for each random variable\n    for i in xrange(len(var_list)):\n        #calculate the standard deviation\n        std = var_list[i]**(1/2)\n        std_list.append(std)\n    \n    #return the list\n    return std_list\n    \ndef get_histogram(a):\n    '''\n    Write a function to generate a histogram of a given list.\n    '''\n    \n    #initialize the histogram\n    hist = {}\n    \n    #for each element\n    for i in xrange(len(a)):\n        #get the frequency\n        freq = a.count"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple):\n        return tuple(even_fnc(test_tuple))\n    else:\n        return even_fnc(test_tuple)\n    \ndef odd_ele(test_tuple, odd_fnc): \n    '''\n    Write a function to remove even elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple):\n        return tuple(odd_fnc(test_tuple))\n    else:\n        return odd_fnc(test_tuple)\n        \n    \ndef odd_ele_tuple(test_tuple):\n    '''\n    Write a function that returns the odd tuple.\n    '''\n    return odd_ele(test_tuple, tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for ele in test_tuple: \n        if isinstance(ele, (int, float, complex)): \n            if even_fnc(ele) == False: \n                return tuple([ele])\n        elif isinstance(ele, (list, tuple)): \n            return tuple([even_ele(ele, even_fnc)])\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple([x for x in test_tuple if x % 2 == 0])\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple):\n        return tuple([even_fnc(elem) for elem in test_tuple if elem % 2 == 0])\n    else:\n        return even_fnc(test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n    \ndef even_ele_func(element):\n    return len(element) % 2 == 0\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = []\n    for ele in test_tuple: \n        if even_fnc(ele): \n            even_tuple.append(ele)\n    return tuple(even_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(lambda ele: even_fnc(ele), test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return even_fnc(test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for ele in test_tuple:\n        if even_fnc(ele):\n            even_list.append(ele)\n    return tuple(even_list)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if not isinstance(test_tuple, tuple):\n        raise TypeError('Invalid input, expected tuple')\n    if even_fnc not in ['even','odd']:\n        raise ValueError('Invalid input, valid inputs are even or odd')\n    return tuple([x for x in test_tuple if x % 2 == 0][::2])\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return(b*b+s*s)\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b * (s**2) / 4\n    print('The surface area of the square pyramid is',area)\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    s = b * s\n    return s\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    S = (b**2) + (b*2) + (b*2) \n    print \"The surface area of the square pyramid is: \", S\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # pass\n    b=float(b)\n    s=float(s)\n    return (b*s)\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\ndef perimeter(b,s):\n    return 2*(b+s)\ndef volume(b,s):\n    return b*s\ndef surface_Area(b,s):\n    return 2*(b+s)\ndef perimeter(b,s):\n    return 2*(b+s)\ndef volume(b,s):\n    return b*s\ndef surface_Area(b,s):\n    return 2*(b+s)\ndef perimeter(b,s):\n    return 2*(b+s)\ndef volume(b,s):\n    return b*s\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\ndef Volume(b,h):\n    '''\n    Write a python function to find the volume of a right circular cone with a given base edge and height.\n    '''\n    return 3.14*(b*b*h/3)\ndef EquilateralTriangleArea(s):\n    '''\n    Write a python function to find the area of an equilateral triangle with a given side length.\n    '''\n    return (3*s*s)/2\ndef TriangleArea(b,h):\n    '''\n    Write a python function to find the area of a triangle with a given base edge and height.\n    '''\n    return b*h/2\ndef RightCircularConeArea(b,h):\n    '''\n    Write a python function to find the area of a right circular cone with a given base edge and height.\n    '''\n    return 3.14*(b*b+h*h)/4\ndef AreaSquare(s):\n    '''\n    Write a python function to find the area of a square with a given side length.\n    '''\n    return s*s\ndef FindArea(s,b,h):\n    '''\n    Write a python function to find the area of a square pyramid with a given base edge and height.\n    '''\n    return surface_Area(b,s) + Volume(b,h)\ndef FindVolume(s,b,h):\n    '''\n    Write a python function to find the volume of a right circular cone with a given base edge and height.\n    '''\n    return Volume(b,h)\ndef FindEquilateralTriangleArea(s):\n    '''\n    Write a python function to find the area of an equilateral triangle with a given side length.\n    '''\n    return EquilateralTriangleArea(s)\ndef FindTriangleArea(b,h):\n    '''\n    Write a python function to find the area of a triangle with a given base edge and height.\n    '''\n    return TriangleArea(b,h)\ndef FindRightCircularConeArea(b,h):\n    '''\n    Write a python function to find the area of a right circular cone with a given base edge and height.\n    '''\n    return RightCircularConeArea(b,h)\ndef FindAreaSquare(s):\n    '''\n    Write a python function to find the area of a square with a given side length.\n    '''\n    return AreaSquare(s)\ndef SolveProblem(n):\n    '''\n    Write a python function to solve the problem.\n    '''\n    s = 1\n    b = 1\n    h = 1\n    for i in range(1,n+1):\n        s *= 4\n        b += 2\n        h *= 2\n        print FindArea(s,b,h)\n        print FindVolume(s,b,h)\n        print FindEquilateralTriangleArea(s)\n        print FindTriangleArea(b,h)\n        print FindRightCircularConeArea(b,h)\n        print FindAreaSquare(s)\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = (b*s) + (b*(s-1))\n    return surface_area\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not bool(dict1):\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        return True\n    else:\n        return False\ndef my_dict2(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    dict2={}\n    for i in dict1:\n        if dict1[i]==dict2[i]:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not bool(dict1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"Empty\")\n    else:\n        print(\"Not Empty\")\n    print(\"\\n\")\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print \"It's an empty dictionary\"\n    else:\n        print \"It's not an empty dictionary\"\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 1:\n        return 0\n    \n    if num == 1:\n        return 1\n    \n    count = 1\n    previous = 1\n    next_previous = 0\n    while count < num:\n        next_previous, previous = previous, next_previous\n        next_previous = previous + next_previous\n        count += 1\n    \n    return next_previous\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return 'Invalid input'\n    if num == 0:\n        return 1\n    catalan_list = [0] * (num + 1)\n    catalan_list[0] = 1\n    catalan_list[1] = 1\n    for i in range(2, num + 1):\n        catalan_list[i] = 0\n        for j in range(i):\n            catalan_list[i] += catalan_list[j] * catalan_list[i - j - 1]\n    return catalan_list[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    c_numbers = [1]\n    for i in range(num):\n        c_numbers.append(0)\n        for j in range(len(c_numbers)-1):\n            c_numbers[j+1] += c_numbers[j]*(i+1)\n    return c_numbers[num-1]\n    \n    \ndef catalan_numbers():\n    '''\n    Write a generator which returns the nth catalan number,\n    using the definition from above.\n    '''\n    \n    for n in range(10):\n        yield catalan_number(n)\n        \n        \ndef supercatalan_number(num):\n    '''\n    Write a function which returns the nth supercatalan number.\n    '''\n    \n    s_c_numbers = [1, 1]\n    for i in range(num-1):\n        s_c_numbers.append(0)\n        for j in range(len(s_c_numbers)-1):\n            s_c_numbers[j+1] += s_c_numbers[j]*(i+1)\n    return s_c_numbers[num-1]\n    \n    \ndef supercatalan_numbers():\n    '''\n    Write a generator which returns the nth supercatalan number,\n    using the definition from above.\n    '''\n    \n    for n in range(10):\n        yield supercatalan_number(n)\n        \n        \ndef supercatalan_numbers_2():\n    '''\n    Write a generator which returns the nth supercatalan number,\n    using the definition from above.\n    '''\n    \n    t = [1, 1]\n    for n in range(10):\n        yield t\n        t = [0] + t\n        for i in range(len(t)-1):\n            t[i+1] += t[i]*(n+1)\n        \n        \ndef supercatalan_number_2(num):\n    '''\n    Write a function which returns the nth supercatalan number.\n    '''\n    \n    t = [1, 1]\n    for n in range(num):\n        t = [0] + t\n        for i in range(len(t)-1):\n            t[i+1] += t[i]*(n+1)\n    return t[-1]\n    \n    \ndef supercatalan_numbers_3():\n    '''\n    Write a generator which returns the nth supercatalan number,\n    using the definition from above.\n    '''\n    \n    t = [1, 1]\n    for n in range(10):\n        yield t\n        t = [0] + t\n        for i in range(len(t)-1):\n            t[i+1] += t[i]*(n+1)\n    \n        \ndef supercatalan_number_3(num):\n    '''\n    Write a function which returns the nth supercatalan number.\n    '''\n    \n    t = [1, 1]\n    for n in range(num):\n        t = [0] + t\n        for i in range(len(t)-1):\n            t[i+1] += t[i]*(n+1)\n    return t[-1]\n    \n    \ndef supercatalan_numbers_4():\n    '''\n    Write a generator which returns the nth supercatalan number,\n    using the definition from above.\n    '''\n    \n    t = [1, 1]\n    for n in range(10):\n        yield t\n        t = [0] + t\n        for i in range(len(t)-1):\n            t[i+1] += t[i]*(n+1)\n    \n        \ndef supercatalan_number_4(num):\n    '''\n    Write a function which returns the nth supercatalan number.\n    '''\n    \n    t = [1, 1]\n    for n in range(num):\n        t = [0] + t\n        for i in range(len(t)-1):\n            t[i+1] += t[i]*(n+1)\n    return t[-1]\n    \n    \ndef catalan_recurrence(n):\n    '''\n    Write a recurrence relation for the nth catalan number.\n    '''\n    \n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return 2*n - 1\n    \n    \ndef supercatalan_recurrence(n):\n    '''\n    Write a recurrence relation for the nth supercatalan number.\n    '''\n    \n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return 2*n\n    \n    \ndef supercatalan_recurrence_2(n):\n    '''\n    Write a recurrence relation for the nth supercatalan number.\n    '''\n    \n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return 2*n + 1\n    \n    \ndef supercatalan_recurrence_3(n):\n    '''\n    Write a recurrence relation for the nth supercatalan number.\n    '''\n    \n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return 2*n + 2\n    \n    \ndef supercatalan_recurrence_4(n):\n    '''\n    Write a recurrence relation for the nth supercatalan number.\n    '''\n    \n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return 2*n + 3\n    \n    \ndef supercatalan_number_recurrence():\n    '''\n    Write a generator which returns the nth supercatalan number,\n    using the recurrence relation from above.\n    '''\n    \n    t = [1, 1]\n    for n in range(10):\n        yield t\n        t = [0] + t\n        for i in range(len(t)-1):\n            t[i+1] += t[i]*(n+1)\n    \n        \ndef supercatalan_number_recurrence_2():\n    '''\n    Write a generator which returns the nth supercatalan number,\n    using the recurrence relation from above.\n    '''\n    \n    t = [1, 1]\n    for n in range(10):\n        yield t\n        t = [0] + t\n        for i in range(len(t)-1):\n            t[i+1] += t[i]*(n+1)\n    \n        \ndef supercatalan_number_recurrence_3():\n    '''\n    Write a generator which returns the nth supercatalan number,\n    using the recurrence relation from above.\n    '''\n    \n    t = [1, 1]\n    for n in range(10):\n        yield t\n        t = [0] + t\n        for i in range(len(t)-1):\n            t[i+1] += t[i]*(n+1)\n    \n        \ndef supercatalan_number_recurrence_4():\n    '''\n    Write a generator which returns the nth supercatalan number,\n    using the recurrence relation from above.\n    '''\n    \n    t = [1, 1]\n    for n in range(10):\n        yield t\n        t = [0] + t\n        for i in range(len(t)-1):\n            t[i+1] += t[i]*(n+1)\n    \n        \ndef supercatalan_numbers_recurrence():\n    '''\n    Write a generator which returns the nth supercatalan number,\n    using the recurrence relation from above.\n    '''\n    \n    t = [1, 1]\n    for n in range(10):\n        yield t\n        t = [0] + t\n        for i in range(len(t)-1):\n            t[i+1] += t[i]*(n+1)\n    \n        \ndef supercatalan_numbers_recurrence_2():\n    '''\n    Write a generator which returns the nth supercatalan number,\n    using the recurrence relation from abov"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    if num == 0:\n        return 1\n    \n    catalan_numbers = [0] * (num+1)\n    catalan_numbers[0] = 1\n    \n    for i in range(1,num+1):\n        catalan_numbers[i] = 0\n        for j in range(i):\n            catalan_numbers[i] += catalan_numbers[j] * catalan_numbers[i-j-1]\n    \n    return catalan_numbers[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    table = [1, 1]\n    if num == 1:\n        return table[-1]\n    for i in range(2, num+1):\n        table.append(0)\n        for j in range(len(table)-1):\n            table[j] += table[j+1]\n    return table[-1]\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = [1]\n    for i in range(num):\n        catalan.append(sum(catalan[-2:])*(num+1-len(catalan)))\n    return catalan[-1]\n    \ndef catalan_list(num):\n    '''\n    Write a function which returns the list of nth catalan number\n    '''\n    catalan = [1]\n    for i in range(num):\n        catalan.append(sum(catalan[-2:])*(num+1-len(catalan)))\n    return catalan\n    \ndef sum_of_catalan_list(num):\n    '''\n    Write a function which returns the sum of the list of nth catalan number.\n    '''\n    catalan = [1]\n    for i in range(num):\n        catalan.append(sum(catalan[-2:])*(num+1-len(catalan)))\n    return sum(catalan)\n    \ndef sum_of_catalan_number(num):\n    '''\n    Write a function which returns the sum of the nth catalan number.\n    '''\n    catalan = [1]\n    for i in range(num):\n        catalan.append(sum(catalan[-2:])*(num+1-len(catalan)))\n    return sum(catalan)\n    \ndef sum_of_catalan(num):\n    '''\n    Write a function which returns the sum of the nth catalan number.\n    '''\n    catalan = [1]\n    for i in range(num):\n        catalan.append(sum(catalan[-2:])*(num+1-len(catalan)))\n    return sum(catalan)\n    \ndef pentagonal_number(num):\n    '''\n    Write a function which returns nth pentagonal number.\n    '''\n    pentagonal = [1]\n    for i in range(num):\n        pentagonal.append(sum(pentagonal[-2:])*(num+1-len(pentagonal)))\n    return pentagonal[-1]\n    \ndef pentagonal_list(num):\n    '''\n    Write a function which returns the list of nth pentagonal number.\n    '''\n    pentagonal = [1]\n    for i in range(num):\n        pentagonal.append(sum(pentagonal[-2:])*(num+1-len(pentagonal)))\n    return pentagonal\n    \ndef sum_of_pentagonal_list(num):\n    '''\n    Write a function which returns the sum of the list of nth pentagonal number.\n    '''\n    pentagonal = [1]\n    for i in range(num):\n        pentagonal.append(sum(pentagonal[-2:])*(num+1-len(pentagonal)))\n    return sum(pentagonal)\n    \ndef sum_of_pentagonal(num):\n    '''\n    Write a function which returns the sum of the nth pentagonal number.\n    '''\n    pentagonal = [1]\n    for i in range(num):\n        pentagonal.append(sum(pentagonal[-2:])*(num+1-len(pentagonal)))\n    return sum(pentagonal)\n    \ndef sum_of_pentagonal(num):\n    '''\n    Write a function which returns the sum of the nth pentagonal number.\n    '''\n    pentagonal = [1]\n    for i in range(num):\n        pentagonal.append(sum(pentagonal[-2:])*(num+1-len(pentagonal)))\n    return sum(pentagonal)\n    \ndef sum_of_pentagonal(num):\n    '''\n    Write a function which returns the sum of the nth pentagonal number.\n    '''\n    pentagonal = [1]\n    for i in range(num):\n        pentagonal.append(sum(pentagonal[-2:])*(num+1-len(pentagonal)))\n    return sum(pentagonal)\n    \ndef sum_of_pentagonal(num):\n    '''\n    Write a function which returns the sum of the nth pentagonal number.\n    '''\n    pentagonal = [1]\n    for i in range(num):\n        pentagonal.append(sum(pentagonal[-2:])*(num+1-len(pentagonal)))\n    return sum(pentagonal)\n    \ndef sum_of_pentagonal(num):\n    '''\n    Write a function which returns the sum of the nth pentagonal number.\n    '''\n    pentagonal = [1]\n    for i in range(num):\n        pentagonal.append(sum(pentagonal[-2:])*(num+1-len(pentagonal)))\n    return sum(pentagonal)\n    \ndef sum_of_pentagonal(num):\n    '''\n    Write a function which returns the sum of the nth pentagonal number.\n    '''\n    pentagonal = [1]\n    for i in range(num):\n        pentagonal.append(sum(pentagonal[-2:])*(num+1-len(pentagonal)))\n    return sum(pentagonal)\n    \ndef sum_of_pentagonal(num):\n    '''\n    Write a function which returns the sum of the nth pentagonal number.\n    '''\n    pentagonal = [1]\n    for i in range(num):\n        pentagonal.append(sum(pentagonal[-2:])*(num+1-len(pentagonal)))\n    return sum(pentagonal)\n    \ndef sum_of_pentagonal(num):\n    '''\n    Write a function which returns the sum of the nth pentagonal number.\n    '''\n    pentagonal = [1]\n    for i in range(num):\n        pentagonal.append(sum(pentagonal[-2:])*(num+1-len(pentagonal)))\n    return sum(pentagonal)\n    \ndef sum_of_pentagonal(num):\n    '''\n    Write a function which returns the sum of the nth pentagonal number.\n    '''\n    pentagonal = [1]\n    for i in range(num):\n        pentagonal.append(sum(pentagonal[-2:])*(num+1-len(pentagonal)))\n    return sum(pentagonal)\n    \ndef sum_of_pentagonal(num):\n    '''\n    Write a function which returns the sum of the nth pentagonal number.\n    '''\n    pentagonal = [1]\n    for i in range(num):\n        pentagonal.append(sum(pentagonal[-2:])*(num+1-len(pentagonal)))\n    return sum(pentagonal)\n    \ndef sum_of_pentagonal(num):\n    '''\n    Write a function which returns the sum of the nth pentagonal number.\n    '''\n    pentagonal = [1]\n    for i in range(num):\n        pentagonal.append(sum(pentagonal[-2:])*(num+1-len(pentagonal)))\n    return sum(pentagonal)\n    \ndef sum_of_pentagonal(num):\n    '''\n    Write a function which returns the sum of the nth pentagonal number.\n    '''\n    pentagonal = [1]\n    for i in range(num):\n        pentagonal.append(sum(pentagonal[-2:])*(num+1-len(pentagonal)))\n    return sum(pentagonal)\n    \ndef sum_of_pentagonal(num):\n    '''\n    Write a function which returns the sum of the nth pentagonal number.\n    '''\n    pentagonal = [1]\n    for i in range(num):\n        pentagonal.append(sum(pentagonal[-2:])*(num+1-len(pentagonal)))\n    return sum(pentagonal)\n    \ndef sum_of_pentagonal(num):\n    '''\n    Write a function which returns the sum of the nth pentagonal number.\n    '''\n    pentagonal = [1]\n    for i in range(num):\n        pentagonal.append(sum(pentagonal[-2:])*(num+1-len(pentagonal)))\n    return sum(pentagonal)\n    \ndef sum_of_pentagonal(num):\n    '''\n    Write a function which returns the sum of the nth pentagonal number.\n    '''\n    pentagonal = [1]\n    for i in range(num):\n        pentagonal.append(sum(pentagonal[-2:])*(num+1-len(pentagonal)))\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    if num == 1:\n        return 1\n    return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    count = 0\n    n = 0\n    \n    for i in range(num):\n        count += 1/((2*i+1)*(2*i+2))\n        n += 1/((2*i+1)*(2*i+2))\n        \n    return (n/2 - count/2)\n    "
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return catalan_number(num-1) + (num + 1)*catalan_number(num-1)\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = []\n    x = re.findall('[ly][^e]*?ly', text)\n    for i in x:\n        result.append(i)\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    print(re.findall(r'ly$', text))\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ly_regex = r'[\\w]+ly'\n    result = re.findall(ly_regex, text)\n    return result\n    \ndef find_first_persons_name(text):\n    '''\n    Write a function to find the first name followed by the string'is ', \n    and the name's position in the given string.\n    '''\n    name_regex = r'[\\w]+\\s+\\b(is)\\b'\n    result = re.findall(name_regex, text)\n    return result\n    \ndef find_first_persons_first_name(text):\n    '''\n    Write a function to find the first name after the string'is ',\n    and the name's position in the given string.\n    '''\n    name_regex = r'\\b(is)\\b\\s+[\\w]+'\n    result = re.findall(name_regex, text)\n    return result\n    \ndef find_first_persons_last_name(text):\n    '''\n    Write a function to find the last name after the string'is ',\n    and the name's position in the given string.\n    '''\n    name_regex = r'\\b(is)\\b\\s+[\\w]+\\s[\\w]+'\n    result = re.findall(name_regex, text)\n    return result\n    \ndef find_first_persons_middle_name(text):\n    '''\n    Write a function to find the middle name (if any) after the string'is ',\n    and the name's position in the given string.\n    '''\n    name_regex = r'\\b(is)\\b\\s+[\\w]+\\s+[\\w]+'\n    result = re.findall(name_regex, text)\n    return result\n    \ndef find_numbers(text):\n    '''\n    Write a function to find all the numbers in the string,\n    and their positions in the given string.\n    '''\n    number_regex = r'[0-9]+'\n    result = re.findall(number_regex, text)\n    return result\n    \ndef find_words_ending_with_ly(text):\n    '''\n    Write a function to find all the words ending with ly in the given string.\n    '''\n    ly_regex = r'[\\w]+ly'\n    result = re.findall(ly_regex, text)\n    return result\n    \ndef find_words_starting_with_ly(text):\n    '''\n    Write a function to find all the words starting with ly in the given string.\n    '''\n    ly_regex = r'ly\\b[\\w]+'\n    result = re.findall(ly_regex, text)\n    return result\n    \ndef find_words_of_length_between(text, min_length, max_length):\n    '''\n    Write a function to find all the words of length between the given length \n    in the given string.\n    '''\n    words_length_regex = r'[\\w]{%d,%d}' % (min_length, max_length)\n    result = re.findall(words_length_regex, text)\n    return result\n    \ndef find_words_of_length_excluding(text, exclude_length):\n    '''\n    Write a function to find all the words of length excluding the given length \n    in the given string.\n    '''\n    words_length_regex = r'[\\w]{1,%d}' % exclude_length\n    result = re.findall(words_length_regex, text)\n    return result\n    \ndef find_all_numbers(text):\n    '''\n    Write a function to find all the numbers in the given string.\n    '''\n    number_regex = r'[0-9]+'\n    result = re.findall(number_regex, text)\n    return result\n    \ndef find_all_numbers_of_length_between(text, min_length, max_length):\n    '''\n    Write a function to find all the numbers of length between the given length \n    in the given string.\n    '''\n    number_length_regex = r'[0-9]{%d,%d}' % (min_length, max_length)\n    result = re.findall(number_length_regex, text)\n    return result\n    \ndef find_all_numbers_of_length_excluding(text, exclude_length):\n    '''\n    Write a function to find all the numbers of length excluding the given length \n    in the given string.\n    '''\n    number_length_regex = r'[0-9]{1,%d}' % exclude_length\n    result = re.findall(number_length_regex, text)\n    return result\n    \ndef find_all_words_ending_with_ly(text):\n    '''\n    Write a function to find all the words ending with ly in the given string.\n    '''\n    ly_regex = r'[\\w]+ly'\n    result = re.findall(ly_regex, text)\n    return result\n    \ndef find_all_words_starting_with_ly(text):\n    '''\n    Write a function to find all the words starting with ly in the given string.\n    '''\n    ly_regex = r'ly\\b[\\w]+'\n    result = re.findall(ly_regex, text)\n    return result\n    \ndef find_all_words_of_length_between(text, min_length, max_length):\n    '''\n    Write a function to find all the words of length between the given length \n    in the given string.\n    '''\n    words_length_regex = r'[\\w]{%d,%d}' % (min_length, max_length)\n    result = re.findall(words_length_regex, text)\n    return result\n    \ndef find_all_words_of_length_excluding(text, exclude_length):\n    '''\n    Write a function to find all the words of length excluding the given length \n    in the given string.\n    '''\n    words_length_regex = r'[\\w]{1,%d}' % exclude_length\n    result = re.findall(words_length_regex, text)\n    return result\n    \ndef find_all_numbers(text):\n    '''\n    Write a function to find all the numbers in the given string.\n    '''\n    number_regex = r'[0-9]+'\n    result = re.findall(number_regex, text)\n    return result\n    \ndef find_all_numbers_of_length_between(text, min_length, max_length):\n    '''\n    Write a function to find all the numbers of length between the given length \n    in the given string.\n    '''\n    number_length_regex = r'[0-9]{%d,%d}' % (min_length, max_length)\n    result = re.findall(number_length_regex, text)\n    return result\n    \ndef find_all_numbers_of_length_excluding(text, exclude_length):\n    '''\n    Write a function to find all the numbers of length excluding the given length \n    in the given string.\n    '''\n    number_length_regex = r'[0-9]{1,%d}' % exclude_length\n    result = re.findall(number_length_regex, text)\n    return result\n    \ndef find_all_words_ending_with_ly(text):\n    '''\n    Write a function to find all the words ending with ly in the given string.\n    '''\n    ly_regex = r'[\\w]+ly'\n    result = re.findall(ly_regex, text)\n    return result\n    \ndef find_all_words_starting_with_ly(text):\n    '''\n    Write a function to find all the words starting with ly in the given string.\n    '''\n    ly_regex = r'ly\\b[\\w]+'\n    result = re.findall(ly_regex, text)\n    return result\n    \ndef find_all_words_o"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = re.compile(r'[^a-z]ly')\n    words = regex.split(text)\n    #print(words)\n    count = 0\n    for i in range(len(words)):\n        if words[i] == 'ly':\n            count += 1\n    print(count)\n    return count\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    '''\n    regex = r'ly\\b'\n    m = re.search(regex, text)\n    print(m.span())\n    '''\n    positions = []\n    \n    regex = r'ly\\b'\n    for m in re.finditer(regex, text):\n        positions.append(m.span())\n    print(positions)\n    return positions\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = text.strip()\n    found_adverbs = []\n    #print(text)\n    ly_pos = re.findall(r'ly$', text)\n    ly_pos = ly_pos[0]\n    if ly_pos:\n        pos = text.index(ly_pos)\n        found_adverbs.append(ly_pos)\n        #print(ly_pos)\n        #print(pos)\n    return found_adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #pattern = r'ly\\b[a-zA-Z]+\\b'\n    pattern = r'ly\\b'\n    result = re.findall(pattern, text)\n    print('Found adverbial words:', result)\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #pattern = r'(.*)(\\w+ly$)'\n    pattern = r'(.*)(ly$)'\n    result = re.search(pattern, text)\n    if result:\n        print result.group()\n        print result.start()\n        print result.end()\n        print result.span()\n    else:\n        print 'not found'\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #print text\n    #l=list(text)\n    #pattern = re.compile(r'(^|[^a-zA-Z0-9])(ly)([a-zA-Z0-9]*ly$)')\n    #match = re.search(pattern, text)\n    #if match:\n        #print match.group(1)+match.group(2)+match.group(3)\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_endings = set(['ly', 'ing', 'ed', 'ies', 'ly'])\n    match = re.search(r'\\b(.*ly)\\b(.*)', text)\n    if match is None:\n        return []\n    else:\n        positions = []\n        for ending in adverb_endings:\n            if match.group(1).endswith(ending):\n                positions.append(match.start(1))\n        return list(zip(positions, [match.group(1)]))\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    minheap = []\n    for item in items:\n        heapq.heappush(minheap, item)\n        if len(minheap) > n:\n            heapq.heappop(minheap)\n    return minheap\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # sort the items in descending order by price\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n    # return the top n items\n    return sorted_items[0:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return heapq.nlargest(n,items,key = lambda x : x[1])\nprint(expensive_items([['phone', 100], ['book', 50], ['bike', 200], ['newspaper', 50], ['house', 600]],3))\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return heapq.nlargest(n,items,key=lambda x:x[1])\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap=[]\n    result=[]\n    for i in items:\n        heapq.heappush(heap,i)\n        if len(heap)>n:\n            heapq.heappop(heap)\n    for i in heap:\n        result.append(i)\n    return result\ndef search(a,b,c,d,m,n,k):\n    '''\n    Write a function to determine the position of a number in a sorted array.\n    '''\n    b=a[b]\n    c=a[c]\n    d=a[d]\n    l=b-c\n    if d-b<=l:\n        return 0\n    else:\n        if (m-c)*(d-b)<l:\n            return 1\n        else:\n            return 2\ndef search_in_rotated_sorted_array(a,k):\n    '''\n    Write a function to search for an element in a sorted array.\n    '''\n    if len(a)==0:\n        return -1\n    else:\n        a=a[len(a)-1:]+a[0:len(a)-1]\n        i=0\n        j=len(a)-1\n        while i<=j:\n            m=(i+j)//2\n            if a[m]==k:\n                return m\n            if a[m]<k:\n                i=m+1\n            else:\n                j=m-1\n    return -1\ndef search_in_rotated_sorted_array_bisect(a,k):\n    '''\n    Write a function to search for an element in a sorted array.\n    '''\n    if len(a)==0:\n        return -1\n    else:\n        l=0\n        r=len(a)-1\n        while l<=r:\n            m=(l+r)//2\n            if a[m]==k:\n                return m\n            if a[m]<k:\n                l=m+1\n            else:\n                r=m-1\n    return -1\ndef search_in_rotated_sorted_array_ternary(a,k):\n    '''\n    Write a function to search for an element in a sorted array.\n    '''\n    if len(a)==0:\n        return -1\n    else:\n        l=0\n        r=len(a)-1\n        while l<=r:\n            m=(l+r)//2\n            if a[m]==k:\n                return m\n            if a[m]<k:\n                if a[l]<a[m]:\n                    l=m+1\n                else:\n                    r=m-1\n            else:\n                if a[r]>a[m]:\n                    r=m-1\n                else:\n                    l=m+1\n    return -1\ndef search_in_rotated_sorted_array_interpolation(a,k):\n    '''\n    Write a function to search for an element in a sorted array.\n    '''\n    if len(a)==0:\n        return -1\n    else:\n        l=0\n        r=len(a)-1\n        while l<=r:\n            m=(l+r)//2\n            if a[m]==k:\n                return m\n            if a[m]<a[r]:\n                if k>=a[m] and k<=a[r]:\n                    l=m+1\n                else:\n                    r=m-1\n            else:\n                if k>=a[l] and k<=a[m]:\n                    r=m-1\n                else:\n                    l=m+1\n    return -1\ndef smallest_subarray(nums):\n    '''\n    Write a function to find the sum of the smallest subarray in a given array.\n    '''\n    if len(nums)==0:\n        return 0\n    else:\n        result=nums[0]\n        count=1\n        for i in range(1,len(nums)):\n            if nums[i]>=nums[i-1]:\n                count+=1\n            else:\n                result=min(result,count)\n                count=1\n        result=min(result,count)\n        return result\ndef smallest_subarray_b(nums):\n    '''\n    Write a function to find the sum of the smallest subarray in a given array.\n    '''\n    if len(nums)==0:\n        return 0\n    else:\n        min_sum=nums[0]\n        temp_sum=nums[0]\n        for i in range(1,len(nums)):\n            temp_sum+=nums[i]\n            if temp_sum<min_sum:\n                min_sum=temp_sum\n            if temp_sum<nums[i]:\n                temp_sum=nums[i]\n        return min_sum\ndef smallest_subarray_c(nums):\n    '''\n    Write a function to find the sum of the smallest subarray in a given array.\n    '''\n    if len(nums)==0:\n        return 0\n    else:\n        min_sum=nums[0]\n        for i in range(1,len(nums)):\n            if nums[i]-nums[i-1]<min_sum:\n                min_sum=nums[i]-nums[i-1]\n        return min_sum\ndef smallest_subarray_d(nums):\n    '''\n    Write a function to find the sum of the smallest subarray in a given array.\n    '''\n    if len(nums)==0:\n        return 0\n    else:\n        temp_sum=0\n        min_sum=nums[0]\n        for i in range(len(nums)):\n            temp_sum+=nums[i]\n            if temp_sum<min_sum:\n                min_sum=temp_sum\n            if temp_sum<nums[i]:\n                temp_sum=nums[i]\n        return min_sum\ndef smallest_subarray_e(nums):\n    '''\n    Write a function to find the sum of the smallest subarray in a given array.\n    '''\n    if len(nums)==0:\n        return 0\n    else:\n        min_sum=nums[0]\n        max_sum=nums[0]\n        for i in range(len(nums)):\n            min_sum=min(nums[i],min_sum)\n            max_sum=max(nums[i],max_sum)\n        return max_sum-min_sum\ndef smallest_subarray_f(nums):\n    '''\n    Write a function to find the sum of the smallest subarray in a given array.\n    '''\n    if len(nums)==0:\n        return 0\n    else:\n        min_sum=nums[0]\n        max_sum=nums[0]\n        for i in range(len(nums)):\n            min_sum=min(nums[i],min_sum)\n            max_sum=max(nums[i],max_sum)\n        start=0\n        end=len(nums)-1\n        while start<end:\n            if max_sum-nums[start]<nums[end]-min_sum:\n                end-=1\n            else:\n                start+=1\n        return max_sum-min_sum\ndef smallest_subarray_g(nums):\n    '''\n    Write a function to find the sum of the smallest subarray in a given array.\n    '''\n    if len(nums)==0:\n        return 0\n    else:\n        min_sum=nums[0]\n        max_sum=nums[0]\n        for i in range(len(nums)):\n            min_sum=min(nums[i],min_sum)\n            max_sum=max(nums[i],max_sum)\n        start=0\n        end=len(nums)-1\n        while start<end:\n            if max_sum-nums[start]<nums[end]-min_sum:\n                end-=1\n            else:\n                start+=1\n        return max_sum-min_sum\ndef smallest_subarray_h(nums):\n    '''\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #First thing, we have to get the price from the item.\n    prices=[i[1] for i in items]\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n == 0:\n        return []\n    if n > len(items):\n        return items\n    item_with_price = [(item,price) for item,price in items]\n    heapq.heapify(item_with_price)\n    ret = []\n    for i in range(n):\n        ret.append(item_with_price[0][0])\n        heapq.heappop(item_with_price)\n    return ret\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap=[]\n    for item in items:\n        heapq.heappush(heap,(item[1],item[0]))\n    return [heapq.heappop(heap)[1] for i in range(n)]\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return heapq.nlargest(n,items)\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    # for i in items:\n    #     heapq.heappush(heap,items[i])\n    #     if len(heap) > n:\n    #         heapq.heappop(heap)\n    # return heap\n    return heapq.nlargest(n,items,key=lambda x: items[x])\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n]+l[n:len(l):2]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    list = l[0:n]\n    list.extend(l[n:])\n    return list\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    i = 0\n    while i < (len(l) - 1):\n        l.append(l.pop(0))\n        i += 1\n    return l\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = []\n    for i in range(n):\n        arr.append(l[:n])\n        l = l[n:]\n    return arr\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:].reverse()\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:len(l)]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    \n    return l[:n]+l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[0:n] + l[n:len(l)]\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    listx=tuple(listx)\n    return listx\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if nums == []:\n        return None\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    big = 0\n    small = 9999\n    for i in nums:\n        if i > big:\n            big = i\n        elif i < small:\n            small = i\n    return big - small\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if not nums:\n        return None\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums)-min(nums)\n    \ndef check_anagram(a, b):\n    '''\n    Write a python function to check if two strings are anagram or not.\n    '''\n    a = a.lower()\n    b = b.lower()\n    if sorted(a)==sorted(b):\n        return True\n    else:\n        return False\n    \ndef most_frequent(string):\n    '''\n    Write a python function to find the most frequent word in a string.\n    '''\n    string = string.lower()\n    dict = {}\n    for word in string.split():\n        if word not in dict:\n            dict[word] = 1\n        else:\n            dict[word] += 1\n    sort_dict = sorted(dict.items(), key=lambda x:x[1], reverse=True)\n    return sort_dict[0][0]\n    \ndef longest_word(string):\n    '''\n    Write a python function to find the longest word in a string.\n    '''\n    string = string.lower()\n    dict = {}\n    for word in string.split():\n        if word not in dict:\n            dict[word] = len(word)\n        else:\n            dict[word] += len(word)\n    sort_dict = sorted(dict.items(), key=lambda x:x[1], reverse=True)\n    return sort_dict[0][0]\n    \ndef prime_factors(n):\n    '''\n    Write a python function to find prime factors of a number.\n    '''\n    i = 2\n    factors = []\n    while n > 1:\n        while n%i == 0:\n            factors.append(i)\n            n = n/i\n        i += 1\n    return factors\n    \ndef is_palindrome(n):\n    '''\n    Write a python function to check if a number is a palindrome or not.\n    '''\n    string = str(n)\n    return string == string[::-1]\n    \ndef is_pandigital(n, digits=9):\n    '''\n    Write a python function to check if a number is pandigital or not.\n    '''\n    string = str(n)\n    for i in range(1,10):\n        if string.count(str(i))!=digits:\n            return False\n    return True\n    \ndef perfect_num(n):\n    '''\n    Write a python function to check if a number is perfect or not.\n    '''\n    div = 1\n    sum = 0\n    while div<n:\n        if n%div == 0:\n            sum += div\n        div += 1\n    if sum == n:\n        return True\n    else:\n        return False\n    \ndef to_arabic(n):\n    '''\n    Write a python function to convert a number to Arabic number.\n    '''\n    if n == 0:\n        return '\u0635\u0641\u0631'\n    elif n == 1:\n        return '\u0648\u0627\u062d\u062f'\n    elif n == 2:\n        return '\u0625\u0632\u0627\u0631'\n    elif n == 3:\n        return '\u062b\u0644\u0627\u062b\u0629'\n    elif n == 4:\n        return '\u0623\u0631\u0628\u0639\u0629'\n    elif n == 5:\n        return '\u062e\u0645\u0633\u0629'\n    elif n == 6:\n        return '\u0633\u062a\u0629'\n    elif n == 7:\n        return '\u0633\u0628\u0639\u0629'\n    elif n == 8:\n        return '\u062b\u0645\u0627\u0646\u064a\u0629'\n    elif n == 9:\n        return '\u062a\u0633\u0639\u0629'\n    \ndef to_roman(n):\n    '''\n    Write a python function to convert a number to Roman number.\n    '''\n    roman = ['', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX']\n    arabic = [1, 5, 10, 50, 100, 500, 1000, 5000, 10000, 50000]\n    for i in range(8):\n        if n >= arabic[i]:\n            return roman[i] + roman[i+1]*(n//arabic[i])\n            \ndef is_perfect_square(n):\n    '''\n    Write a python function to check if a number is a perfect square or not.\n    '''\n    i = 0\n    while n%4 == 0:\n        i += 1\n        n = n/4\n    return i*i == n\n    \ndef fibonacci(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    first = 0\n    second = 1\n    i = 0\n    while i < n-2:\n        first, second = second, first+second\n        i += 1\n    return second\n    \ndef is_prime(n):\n    '''\n    Write a python function to check if a number is a prime or not.\n    '''\n    i = 2\n    while i < n:\n        if n%i == 0:\n            return False\n        i += 1\n    return True\n    \ndef gcd(n, m):\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    if m == 0:\n        return n\n    else:\n        return gcd(m, n%m)\n    \ndef count_rotations(s):\n    '''\n    Write a python function to find the number of times a string is rotated\n    '''\n    length = len(s)\n    if length <= 1:\n        return 0\n    middle = length/2\n    if s[middle:] + s[:middle] == s:\n        return 0\n    return count_rotations(s[1:]) + 1\n    \ndef is_palindrome_permutation(a):\n    '''\n    Write a python function to check if a string is a permutation of a palindrome.\n    '''\n    a = a.lower()\n    dict = {}\n    for i in a:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    flag = True\n    for i in dict:\n        if dict[i]%2!= 0:\n            flag = False\n            break\n    return flag\n    \ndef is_letter_constructible_from_others(letters, word):\n    '''\n    Write a python function to check if a word can be constructed from letters.\n    '''\n    for i in word:\n        if i not in letters:\n            return False\n    return True\n    \ndef word_break(string, list_of_words):\n    '''\n    Write a python function to check if a string can be break into words.\n    '''\n    string = string.lower()\n    list_of_words = [word.lower() for word in list_of_words]\n    if string in list_of_words:\n        return True\n    dict = {}\n    for i in range(len(string)):\n        if string[:i+1] in list_of_words:\n            dict[string[:i+1]] = 1\n    for word in list_of_words:\n        if word in dict:\n            continue\n        else:\n            return False\n    return True\n    \ndef is_hex(n):\n    '''\n    Write a python function to check if a number is a hex number or not.\n    '''\n    if n < 10:\n        return False\n    elif n%10 < 2:\n        return is_hex(n//10)\n    else:\n        return False\n    \ndef is_triangle(n):\n    '''\n    Write a python function to check if a number is a triangle number or not.\n    '''\n    n = n//2\n    i = 1\n    triangle = 0\n    while triangle < n:\n        triangle = i*(i+1)//2\n        i += 1\n    if triangle == n:\n        return True\n    else:\n        return False\n    \ndef is_pandigital_triangular(n):\n    '''\n    Write a python function to check if a number is pandigital and triangular or not.\n    '''\n    pandigital = '123456789'\n    for i in pandigital:\n        if i not in str(n):\n            return False\n    triangular = "
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums)-min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums)-min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    a, b = max(nums), min(nums)\n    return a-b\n    \ndef zip_demo():\n    '''\n    Write a python function to zip two lists of equal length together.\n    '''\n    a = [1,2,3,4,5,6]\n    b = [5,6,7,8,9,10]\n    c = zip(a,b)\n    return c\n    \ndef unzip_demo():\n    '''\n    Write a python function to unzip a list of tuples into two lists.\n    '''\n    a = [1,2,3,4,5,6]\n    b, c = zip(*(a,))\n    return b, c\n    \ndef find_missing_numbers(nums):\n    '''\n    Write a python function to find the missing numbers in a list of numbers.\n    '''\n    a = set(nums)\n    b = set(range(1, len(nums)+1))\n    c = list(b.difference(a))\n    return c\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b):\n        if is_perfect_square(i):\n            print i\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    if b > a:\n        a, b = b, a\n    for num in range(a, b + 1):\n        if num**0.5 == int(num**0.5):\n            perfect_squares.append(num)\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    list = []\n    for i in range(a, b):\n        if i*i > a and i*i < b:\n            list.append(i*i)\n    return list\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for n in range(a, b):\n        if int(n ** 0.5) ** 2 == n:\n            print n\n    return None\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        max = a\n        min = b\n    else:\n        max = b\n        min = a\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in xrange(max(a,b), math.floor(math.sqrt(b)) - 1, -1):\n        if math.floor(math.sqrt(a)) == math.sqrt(a):\n            return i\n    return None\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in xrange(a, b+1):\n        j = int(i**0.5)\n        if j*j == i:\n            print i\n        elif j*j > i:\n            break\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    if a < b:\n        for x in range(a, b + 1):\n            if int(x**.5) == x**.5:\n                squares.append(x)\n    else:\n        for x in range(b, a + 1):\n            if int(x**.5) == x**.5:\n                squares.append(x)\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for i in range(a,b+1):\n        if int(i ** 0.5) ** 2 == i:\n            perfect_squares.append(i)\n    return perfect_squares\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for x in range(a, b):\n        if x * x == b:\n            print(x)\n    return\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x1,y1=complex(x,y),complex(x,y)\n    x1=x1.conjugate()\n    y1=y1.conjugate()\n    return x1,y1\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x_rec = []\n    y_rec = []\n    r = [0,1]\n    while len(r) < len(x):\n        r.append(1)\n    for i in range(0,len(x)):\n        x_rec.append(x[i]*r[i])\n        y_rec.append(y[i]*r[i])\n    return x_rec, y_rec\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2 + y**2\n    theta = cmath.atan2(y,x)\n    return r,theta\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x*cos(y)-y*sin(x),x*sin(y)+y*cos(x))\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*math.cos(y), x*math.sin(y)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x_rec = (x*x + y*y)**(1/2)\n    y_rec = (x*y)**(1/2)\n    return x_rec,y_rec\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = (x**2 + y**2)**0.5\n    theta = cmath.acos(y/r)\n    if x < 0:\n        theta = 2*math.pi - theta\n    return (r, theta)\n    \ndef main():\n    print(\"This program computes the area of a right circular cone.\")\n    print(\"Given the lengths of the two sides of the cone:\")\n    x = eval(input(\"Enter the length of side 1: \"))\n    y = eval(input(\"Enter the length of side 2: \"))\n    r = (x**2 + y**2)**0.5\n    print(\"The area is\", float(0.25*3.14159265359*r*r*r))\n    print()\n    \n    print(\"This program computes the area of a right circular cone.\")\n    print(\"Given the lengths of the two sides of the cone:\")\n    x = eval(input(\"Enter the length of side 1: \"))\n    y = eval(input(\"Enter the length of side 2: \"))\n    r = (x**2 + y**2)**0.5\n    print(\"The area is\", float(0.25*3.14159265359*r*r))\n    print()\n    \n    print(\"This program computes the area of a right circular cone.\")\n    print(\"Given the lengths of the two sides of the cone:\")\n    x = eval(input(\"Enter the length of side 1: \"))\n    y = eval(input(\"Enter the length of side 2: \"))\n    r = (x**2 + y**2)**0.5\n    print(\"The area is\", float(0.25*3.14159265359*r*r))\n    print()\n    \n    print(\"This program computes the area of a right circular cone.\")\n    print(\"Given the lengths of the two sides of the cone:\")\n    x = eval(input(\"Enter the length of side 1: \"))\n    y = eval(input(\"Enter the length of side 2: \"))\n    print(\"The area is\", float(0.25*3.14159265359*r*r))\n    print()\n    \n    print(\"This program computes the area of a right circular cone.\")\n    print(\"Given the lengths of the two sides of the cone:\")\n    x = eval(input(\"Enter the length of side 1: \"))\n    y = eval(input(\"Enter the length of side 2: \"))\n    print(\"The area is\", float(0.25*3.14159265359*r*r))\n    print()\n    \n    print(\"This program computes the area of a right circular cone.\")\n    print(\"Given the lengths of the two sides of the cone:\")\n    x = eval(input(\"Enter the length of side 1: \"))\n    y = eval(input(\"Enter the length of side 2: \"))\n    print(\"The area is\", float(0.25*3.14159265359*r*r))\n    print()\n    \n    print(\"This program computes the area of a right circular cone.\")\n    print(\"Given the lengths of the two sides of the cone:\")\n    x = eval(input(\"Enter the length of side 1: \"))\n    y = eval(input(\"Enter the length of side 2: \"))\n    print(\"The area is\", float(0.25*3.14159265359*r*r))\n    print()\n    \n    print(\"This program computes the area of a right circular cone.\")\n    print(\"Given the lengths of the two sides of the cone:\")\n    x = eval(input(\"Enter the length of side 1: \"))\n    y = eval(input(\"Enter the length of side 2: \"))\n    print(\"The area is\", float(0.25*3.14159265359*r*r))\n    print()\n    \n    print(\"This program computes the area of a right circular cone.\")\n    print(\"Given the lengths of the two sides of the cone:\")\n    x = eval(input(\"Enter the length of side 1: \"))\n    y = eval(input(\"Enter the length of side 2: \"))\n    print(\"The area is\", float(0.25*3.14159265359*r*r))\n    print()\n    \n    print(\"This program computes the area of a right circular cone.\")\n    print(\"Given the lengths of the two sides of the cone:\")\n    x = eval(input(\"Enter the length of side 1: \"))\n    y = eval(input(\"Enter the length of side 2: \"))\n    print(\"The area is\", float(0.25*3.14159265359*r*r))\n    print()\n    \n    print(\"This program computes the area of a right circular cone.\")\n    print(\"Given the lengths of the two sides of the cone:\")\n    x = eval(input(\"Enter the length of side 1: \"))\n    y = eval(input(\"Enter the length of side 2: \"))\n    print(\"The area is\", float(0.25*3.14159265359*r*r))\n    print()\n    \n    print(\"This program computes the area of a right circular cone.\")\n    print(\"Given the lengths of the two sides of the cone:\")\n    x = eval(input(\"Enter the length of side 1: \"))\n    y = eval(input(\"Enter the length of side 2: \"))\n    print(\"The area is\", float(0.25*3.14159265359*r*r))\n    print()\n    \n    print(\"This program computes the area of a right circular cone.\")\n    print(\"Given the lengths of the two sides of the cone:\")\n    x = eval(input(\"Enter the length of side 1: \"))\n    y = eval(input(\"Enter the length of side 2: \"))\n    print(\"The area is\", float(0.25*3.14159265359*r*r))\n    print()\n    \n    print(\"This program computes the area of a right circular cone.\")\n    print(\"Given the lengths of the two sides of the cone:\")\n    x = eval(input(\"Enter the length of side 1: \"))\n    y = eval(input(\"Enter the length of side 2: \"))\n    print(\"The area is\", float(0.25*3.14159265359*r*r))\n    print()\n    \n    print(\"This program computes the area of a right circular cone.\")\n    print(\"Given the lengths of the two sides of the cone:\")\n    x = eval(input(\"Enter the length of side 1: \"))\n    y = eval(input(\"Enter the length of side 2: \"))\n    print(\"The area is\", float(0.25*3.14159265359*r*r))\n    print()\n    \n    print(\"This program computes the area of a right circular cone.\")\n    print(\"Given the lengths of the two sides of the cone:\")\n    x = eval(input(\"Enter the length of side 1: \"))\n    y = eval(input(\"Enter the length of side 2: \"))\n    print(\"The area is\", float(0.25*3.14159265359*r*r))\n    print()\n    \n    print(\"This program computes the area of a right circular cone.\")\n    print(\"Given the lengths of the two sides of the cone:\")\n    x = eval(input(\"Enter the length of side 1: \"))\n    y = eval(input(\"Enter the length of side 2: \"))\n    print(\"The area is\", float(0.25*3.14159265359*r*r))\n    print()\n    \n    print(\"This program computes the area of a right circular cone.\")\n    print(\"Given the lengths of the two sides of the cone:\")\n    x = eval(input(\"Enter the length of side 1: \"))\n    y = eval(input(\"Enter the length of side 2: \"))\n    print(\"The area is\", float(0.25*3.14159265359*r*r))\n    print()\n    \n    print(\"This program computes the area of a right circular cone.\")\n    print(\"Given the lengths of the two sides of the cone:\")\n    x = eval(input(\"Enter the length of side 1: \"))\n    y = eval(input(\"Enter the length of side 2: \"))\n    print(\"The area is\", float(0.25*3.14159265359*r*r))\n    print()\n    \n    print(\"This program computes the area of a right circular cone.\")\n    print(\"Given the lengths of the two sides of the cone:\")\n    x = eval(input(\"Enter the length of side 1: \"))\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*cmath.cos(y), x*cmath.sin(y)\ndef rectangle_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return cmath.polar(complex(x,y))\ndef test_rect_polar():\n    '''\n    Write a test that converts rectangular coordinates to polar coordinates and back again\n    '''\n    assert (rectangle_to_polar(*polar_rect(3,-1)) == (3,1))\n    assert (rectangle_to_polar(*rectangle_to_polar(3,-1)) == (3,-1))\n    assert (rectangle_to_polar(*rectangle_to_polar(-3,1)) == (-3,1))\n    assert (rectangle_to_polar(*rectangle_to_polar(3,-3)) == (3,-3))\ndef kangaroo(x1,v1,x2,v2):\n    '''\n    You are on an infinite number line. The objects at the end of the line are x1 and x2. You know that the m second object at the end of the line\n    takes v1 more seconds to reach the other end of the line than it does to reach x2.\n    \n    You start at the origin, and your goal is to reach x2 by the end of the earliest time.\n    \n    Return 'YES' if you can catch the other object, or 'NO' otherwise.\n    \n    Example\n    \n    Input: x1 = 3, v1 = 1, x2 = 4, v2 = 2\n    Output: YES\n    \n    Input: x1 = 2, v1 = 3, x2 = 3, v2 = 1\n    Output: NO\n    '''\n    if (x1 - x2) % (v2 - v1) == 0:\n        return 'YES'\n    return 'NO'\ndef find_position(h, m, s):\n    '''\n    Given an object at time t, you can apply force F on it. At the end of the time interval, return the position of the object after applying the force.\n    \n    An object moves along a straight line. It has initial position 0 at time 0, and it has not been at time 0.\n    \n    Return the position after time t.\n    \n    Example\n    \n    Input: h = 3, m = 2, s = 7\n    Output: 22\n    \n    Input: h = 3, m = 3, s = 11\n    Output: 19\n    \n    Input: h = 4, m = 1, s = 1\n    Output: 1\n    \n    Note:\n    \n    1 <= t <= 10^9\n    0 <= h, m, s <= 1000\n    '''\n    x = 0\n    if s!= 0:\n        x = (h*m) / s\n    return x + h\ndef find_position2(h, m, s):\n    '''\n    Given an object at time t, you can apply force F on it. At the end of the time interval, return the position of the object after applying the force.\n    \n    An object moves along a straight line. It has initial position 0 at time 0, and it has not been at time 0.\n    \n    Return the position after time t.\n    \n    Example\n    \n    Input: h = 3, m = 2, s = 7\n    Output: 22\n    \n    Input: h = 3, m = 3, s = 11\n    Output: 19\n    \n    Input: h = 4, m = 1, s = 1\n    Output: 1\n    \n    Note:\n    \n    1 <= t <= 10^9\n    0 <= h, m, s <= 1000\n    '''\n    x = 0\n    if s!= 0:\n        x = (h*m) / s\n    if x < h:\n        x = 0\n    return x + h\ndef gcd(a, b):\n    '''\n    Write a function to find the greatest common divisor of two numbers.\n    '''\n    return a if not b else gcd(b, a%b)\ndef find_lcm(a,b):\n    '''\n    Write a function to find the least common multiple of two numbers.\n    '''\n    return (a*b) / gcd(a,b)\ndef find_lcm2(a,b):\n    '''\n    Write a function to find the least common multiple of two numbers.\n    '''\n    return a*b/gcd(a,b)\ndef gcd2(a, b):\n    '''\n    Write a function to find the greatest common divisor of two numbers.\n    '''\n    while b!= 0:\n        a, b = b, a%b\n    return a\ndef find_lcm3(a,b):\n    '''\n    Write a function to find the least common multiple of two numbers.\n    '''\n    return a*b/gcd2(a,b)\ndef is_palindrome(n):\n    '''\n    A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 * 99.\n    \n    Find the largest palindrome made from the product of two 3-digit numbers.\n    '''\n    return n == n[::-1]\ndef is_palindrome2(n):\n    '''\n    A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 * 99.\n    \n    Find the largest palindrome made from the product of two 3-digit numbers.\n    '''\n    n = str(n)\n    return n[::-1] == n\ndef search_rotated_sorted_array(nums, target):\n    '''\n    Write a function to search for an element in a sorted array that may be rotated, but still be \n    in increasing order.\n    \n    Example 1:\n    \n    Input: [4,5,6,7,0,1,2], 0\n    Output: 4\n    \n    Example 2:\n    \n    Input: [4,5,6,7,0,1,2], 3\n    Output: -1\n    \n    Example 3:\n    \n    Input: [1], 0\n    Output: -1\n    \n    '''\n    low = 0\n    high = len(nums) - 1\n    while low <= high:\n        mid = (low + high) / 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] > nums[high]:\n            if target >= nums[low] and target <= nums[mid]:\n                high = mid - 1\n            else:\n                low = mid + 1\n        elif nums[mid] < nums[high]:\n            if target > nums[mid] and target <= nums[high]:\n                low = mid + 1\n            else:\n                high = mid - 1\n    return -1\ndef search_rotated_sorted_array2(nums, target):\n    '''\n    Write a function to search for an element in a sorted array that may be rotated, but still be \n    in increasing order.\n    \n    Example 1:\n    \n    Input: [4,5,6,7,0,1,2], 0\n    Output: 4\n    \n    Example 2:\n    \n    Input: [4,5,6,7,0,1,2], 3\n    Output: -1\n    \n    Example 3:\n    \n    Input: [1], 0\n    Output: -1\n    \n    '''\n    low = 0\n    high = len(nums) - 1\n    while low <= high:\n        mid = (low + high) / 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] > nums[high]:\n            if target >= nums[low] and target < nums[mid]:\n                low = mid + 1\n            else:\n                high = mid - 1\n        elif nums[mid] < nums[high]:\n            if target > nums[mid] and target <= nums[high]:\n                high = mid - 1\n            else:\n                low = mid + 1\n    return -1\ndef search_rotated_sorted_array3(nums, target):\n    '''\n    Write a function to search for an element in a sorted array that may be rotated, but still be \n    in increasin"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (complex(x,y),(cmath.sqrt(x**2+y**2)))\n    # or\n    # return (complex(x,y),(x**2+y**2)**0.5)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import cmath\n    x_rect = cmath.rect(x,y)\n    print(\"x_rect = \", x_rect)\n    return x_rect\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    newList[0], newList[-1] = newList[-1], newList[0]\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.append(newList.pop(0))\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    newList[0], newList[length - 1] = newList[length - 1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #the length of the list\n    lenList = len(newList)\n    #assigning first and last elements\n    newList[0] = newList[lenList-1]\n    newList[lenList-1] = newList[1]\n    return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == k:\n        return 1\n    elif n < k:\n        return 0\n    else:\n        a = 1\n        b = 1\n        for i in range(k):\n            a = a * (n - i)\n            b = b * (i + 1)\n        return a // b\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if (k>n-k):\n        k=n-k\n    res=1\n    for i in range(k):\n        res=res*(n-i)/(i+1)\n    return res\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = [[0 for x in range(k+1)] for x in range(n+1)] \n    for i in range(n+1): \n        for j in range(min(i,k)+1): \n            if j == 0 or j == i: \n                C[i][j] = 1\n            else: \n                C[i][j] = C[i-1][j-1] + C[i-1][j] \n    return C[n][k] \n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    if k>=n-k:\n        k = n-k\n    for i in range(k):\n        res = res * (n-i)\n        res = res // (i+1)\n    return res\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return nCk = [1,1];\n    for i in range(1,k+1):\n        binomialCoeff(n,k)\n        nCk *= i;\n        nCk /= (i + 1);\n    return nCk;\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(1, k+1): \n        res = res * (n - i + 1) / i \n    return res \n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in xrange(0,n-k+1):\n        res = res * (n-i)\n        res = res // (i+1)\n    return res\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k==0:\n        return 1\n    if k>n:\n        return 0\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k==0:\n        return 1\n    if k>n:\n        return 0\n    else:\n        a = 1\n        b = 1\n        for i in range(1,n-k+1):\n            a = a*(n-i)\n            b = b*i\n        return a/b\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = [[0 for x in xrange(k+1)] for x in xrange(n+1)] \n    for i in range(0,n+1): \n        for j in range(0,min(i,k)+1): \n            if j == 0 or j == i: \n                C[i][j] = 1\n            else: \n                C[i][j] = C[i-1][j-1] + C[i-1][j] \n    return C[n][k] \n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    while ip[0]=='0':\n        ip = ip[1:]\n    return ip\ndef validateIP(ip):\n    '''\n    Write a function to check whether an input string is a valid IPv4 address or IPv6 address or neither.\n    '''\n    ip = ip.split('.')\n    if len(ip)!= 4:\n        return False\n    for x in ip:\n        if not x.isdigit():\n            return False\n        i = int(x)\n        if i < 0 or i > 255:\n            return False\n    return True\ndef isValidNetmask(netmask):\n    '''\n    Write a function to check whether an input string is a valid IPv4 or IPv6 netmask or neither.\n    '''\n    if netmask[0]!= '/':\n        return False\n    netmask = netmask.split('/')[1]\n    if not netmask.isdigit():\n        return False\n    i = int(netmask)\n    if i < 0 or i > 32:\n        return False\n    return True\ndef getMaxNetmask(netmask):\n    '''\n    Write a function to calculate the maximal possible integer value with a given netmask.\n    '''\n    return max(2 ** (32 - int(netmask)) - 2, 0)\ndef getNetmask(ip, netmask):\n    '''\n    Write a function to calculate the network address with a given netmask.\n    '''\n    ip = ip.split('.')\n    net = []\n    for x in ip:\n        if int(x) & int(netmask) == int(x):\n            net.append('1')\n        else:\n            net.append('0')\n    return '.'.join(net)\ndef getBroadcast(ip, netmask):\n    '''\n    Write a function to calculate the broadcast address with a given netmask.\n    '''\n    ip = ip.split('.')\n    net = []\n    for x in ip:\n        if int(x) & int(netmask) == int(x):\n            net.append('1')\n        else:\n            net.append('0')\n    for x in range(4):\n        if netmask[x]!= '1':\n            net[x] = '1'\n    return '.'.join(net)\ndef getHosts(ip, netmask):\n    '''\n    Write a function to calculate the number of hosts within a given network with a given netmask.\n    '''\n    ip = ip.split('.')\n    net = []\n    for x in ip:\n        if int(x) & int(netmask) == int(x):\n            net.append('1')\n        else:\n            net.append('0')\n    return 2 ** (32 - int(''.join(net), 2)) - 2\ndef getAvailableIps(ip, netmask):\n    '''\n    Write a function to calculate all the possible ip addresses with a given netmask.\n    '''\n    ip = ip.split('.')\n    net = []\n    for x in ip:\n        if int(x) & int(netmask) == int(x):\n            net.append('1')\n        else:\n            net.append('0')\n    for x in range(4):\n        if netmask[x]!= '1':\n            net[x] = '1'\n    net.reverse()\n    ip = []\n    for x in range(4):\n        ip.append(str(int(''.join(net[:x+1]), 2)))\n    ip.reverse()\n    return '.'.join(ip)\ndef getAvailableIps2(ip, netmask):\n    '''\n    Write a function to calculate all the possible ip addresses with a given netmask.\n    '''\n    ip = ip.split('.')\n    net = []\n    for x in ip:\n        if int(x) & int(netmask) == int(x):\n            net.append('1')\n        else:\n            net.append('0')\n    for x in range(4):\n        if netmask[x]!= '1':\n            net[x] = '1'\n    return '.'.join(net)\ndef isValidIp(ip):\n    '''\n    Write a function to check whether an input string is a valid IPv4 address or IPv6 address or neither.\n    '''\n    ip = ip.split('.')\n    if len(ip)!= 4:\n        return False\n    for x in ip:\n        if not x.isdigit():\n            return False\n        i = int(x)\n        if i < 0 or i > 255:\n            return False\n    return True\ndef isValidNetmask(netmask):\n    '''\n    Write a function to check whether an input string is a valid IPv4 or IPv6 netmask or neither.\n    '''\n    if netmask[0]!= '/':\n        return False\n    netmask = netmask.split('/')[1]\n    if not netmask.isdigit():\n        return False\n    i = int(netmask)\n    if i < 0 or i > 32:\n        return False\n    return True\ndef isValidNetmask2(netmask):\n    '''\n    Write a function to check whether an input string is a valid IPv4 or IPv6 netmask or neither.\n    '''\n    if netmask[0]!= '/':\n        return False\n    netmask = netmask.split('/')[1]\n    if not netmask.isdigit():\n        return False\n    return True\ndef getMaximumHosts(netmask):\n    '''\n    Write a function to calculate the maximal possible integer value with a given netmask.\n    '''\n    return max(2 ** (32 - int(netmask)) - 2, 0)\ndef getAvailableHosts(ip, netmask):\n    '''\n    Write a function to calculate the number of hosts within a given network with a given netmask.\n    '''\n    ip = ip.split('.')\n    net = []\n    for x in ip:\n        if int(x) & int(netmask) == int(x):\n            net.append('1')\n        else:\n            net.append('0')\n    return 2 ** (32 - int(''.join(net), 2)) - 2\ndef getAvailableHosts2(ip, netmask):\n    '''\n    Write a function to calculate the number of hosts within a given network with a given netmask.\n    '''\n    ip = ip.split('.')\n    net = []\n    for x in ip:\n        if int(x) & int(netmask) == int(x):\n            net.append('1')\n        else:\n            net.append('0')\n    hosts = 2 ** (32 - int(''.join(net), 2)) - 2\n    return hosts\ndef isValidHost(ip):\n    '''\n    Write a function to check whether an input string is a valid IPv4 address or IPv6 address or neither.\n    '''\n    ip = ip.split('.')\n    if len(ip)!= 4:\n        return False\n    for x in ip:\n        if not x.isdigit():\n            return False\n        i = int(x)\n        if i < 0 or i > 255:\n            return False\n    return True\ndef getValidHosts(ip, netmask):\n    '''\n    Write a function to calculate the number of hosts within a given network with a given netmask.\n    '''\n    ip = ip.split('.')\n    net = []\n    for x in ip:\n        if int(x) & int(netmask) == int(x):\n            net.append('1')\n        else:\n            net.append('0')\n    hosts = 2 ** (32 - int(''.join(net), 2)) - 2\n    return hosts\ndef getValidHosts2(ip, netmask):\n    '''\n    Write a function to calculate the number of hosts within a given network with a given netmask.\n    '''\n    ip = ip.split('.')\n    net = []\n    for x in ip:\n        if int(x) & int(netmask) == int(x):\n            net.append('1')\n        else:\n            net.append('0')\n    hosts = 2 ** (32 - int(''.join(net), 2)) - 2\n    return hosts\ndef getMaximumHosts(netmask):\n    '''\n    Write a function to calculate the maximal possible integer value with a given netmask."
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip is None:\n        return ip\n    \n    ip = ip.split(\".\")\n    ip = map(lambda x:x.lstrip(\"0\"),ip)\n    ip = \".\".join(ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return '.'.join([s for s in ip.split('.') if s.isdigit()])\ndef find_key(line):\n    '''\n    Return the key for the given line.\n    '''\n    k = line.strip().split()[0]\n    return k.strip().split('/')[0].strip()\ndef find_mask(line):\n    '''\n    Return the mask for the given line.\n    '''\n    m = line.strip().split()[0]\n    return m.strip().split('/')[1].strip()\ndef get_ip(line):\n    '''\n    Return the IP address for the given line.\n    '''\n    ip = line.strip().split()[1].strip().split(',')\n    return ','.join([removezero_ip(ip_) for ip_ in ip])\ndef get_mask(line):\n    '''\n    Return the mask for the given line.\n    '''\n    mask = line.strip().split()[1].strip().split(',')\n    return ','.join([m.split('/')[1].strip() for m in mask])\ndef get_interfaces(file_name):\n    '''\n    Return a list of interfaces (without 'GigabitEthernet' in front of them)\n    '''\n    intf_list = []\n    for line in open(file_name):\n        if line.startswith('GigabitEthernet'):\n            intf_list.append(line.strip())\n    return intf_list\ndef get_ip_interface(file_name):\n    '''\n    Return a dictionary of interfaces (without 'GigabitEthernet' in front of them)\n    as key and the IP as value.\n    '''\n    ip_intf_dict = {}\n    for line in open(file_name):\n        if line.startswith('GigabitEthernet'):\n            k = line.strip().split()[0]\n            ip_intf_dict[k] = get_ip(line)\n    return ip_intf_dict\ndef get_ip_interface_mask(file_name):\n    '''\n    Return a dictionary of interfaces (without 'GigabitEthernet' in front of them)\n    as key and the IP and mask as value.\n    '''\n    ip_intf_dict = {}\n    for line in open(file_name):\n        if line.startswith('GigabitEthernet'):\n            k = line.strip().split()[0]\n            ip_intf_dict[k] = get_ip(line)+','+get_mask(line)\n    return ip_intf_dict\ndef get_ip_interface_mask_vrf(file_name):\n    '''\n    Return a dictionary of interfaces (without 'GigabitEthernet' in front of them)\n    as key and the IP, mask, vrf as value.\n    '''\n    ip_intf_dict = {}\n    for line in open(file_name):\n        if line.startswith('GigabitEthernet'):\n            k = line.strip().split()[0]\n            ip_intf_dict[k] = get_ip(line)+','+get_mask(line)+','+line.strip().split()[4]\n    return ip_intf_dict\ndef get_ip_interface_route_table(file_name):\n    '''\n    Return a dictionary of interfaces (without 'GigabitEthernet' in front of them)\n    as key and the IP, mask, vrf, route_table as value.\n    '''\n    ip_intf_dict = {}\n    for line in open(file_name):\n        if line.startswith('GigabitEthernet'):\n            k = line.strip().split()[0]\n            ip_intf_dict[k] = get_ip(line)+','+get_mask(line)+','+line.strip().split()[4]+','+line.strip().split()[5]\n    return ip_intf_dict\ndef get_ip_interface_route_table_next_hop(file_name):\n    '''\n    Return a dictionary of interfaces (without 'GigabitEthernet' in front of them)\n    as key and the IP, mask, vrf, route_table, next_hop as value.\n    '''\n    ip_intf_dict = {}\n    for line in open(file_name):\n        if line.startswith('GigabitEthernet'):\n            k = line.strip().split()[0]\n            ip_intf_dict[k] = get_ip(line)+','+get_mask(line)+','+line.strip().split()[4]+','+line.strip().split()[5]+','+line.strip().split()[8]\n    return ip_intf_dict\ndef get_ip_interface_route_table_next_hop_vrf(file_name):\n    '''\n    Return a dictionary of interfaces (without 'GigabitEthernet' in front of them)\n    as key and the IP, mask, vrf, route_table, next_hop, next_hop_vrf as value.\n    '''\n    ip_intf_dict = {}\n    for line in open(file_name):\n        if line.startswith('GigabitEthernet'):\n            k = line.strip().split()[0]\n            ip_intf_dict[k] = get_ip(line)+','+get_mask(line)+','+line.strip().split()[4]+','+line.strip().split()[5]+','+line.strip().split()[8]+','+line.strip().split()[9]\n    return ip_intf_dict\ndef get_ip_interface_route_table_next_hop_vrf_route_dest(file_name):\n    '''\n    Return a dictionary of interfaces (without 'GigabitEthernet' in front of them)\n    as key and the IP, mask, vrf, route_table, next_hop, next_hop_vrf, route_dest as value.\n    '''\n    ip_intf_dict = {}\n    for line in open(file_name):\n        if line.startswith('GigabitEthernet'):\n            k = line.strip().split()[0]\n            ip_intf_dict[k] = get_ip(line)+','+get_mask(line)+','+line.strip().split()[4]+','+line.strip().split()[5]+','+line.strip().split()[8]+','+line.strip().split()[9]+','+line.strip().split()[10]\n    return ip_intf_dict\ndef get_ip_interface_route_table_next_hop_vrf_route_dest_distance(file_name):\n    '''\n    Return a dictionary of interfaces (without 'GigabitEthernet' in front of them)\n    as key and the IP, mask, vrf, route_table, next_hop, next_hop_vrf, route_dest, distance as value.\n    '''\n    ip_intf_dict = {}\n    for line in open(file_name):\n        if line.startswith('GigabitEthernet'):\n            k = line.strip().split()[0]\n            ip_intf_dict[k] = get_ip(line)+','+get_mask(line)+','+line.strip().split()[4]+','+line.strip().split()[5]+','+line.strip().split()[8]+','+line.strip().split()[9]+','+line.strip().split()[10]+','+line.strip().split()[11]\n    return ip_intf_dict\ndef get_ip_interface_route_table_next_hop_vrf_route_dest_distance_tag(file_name):\n    '''\n    Return a dictionary of interfaces (without 'GigabitEthernet' in front of them)\n    as key and the IP, mask, vrf, route_table, next_hop, next_hop_vrf, route_dest, distance, tag as value.\n    '''\n    ip_intf_dict = {}\n    for line in open(file_name):\n        if line.startswith('GigabitEthernet'):\n            k = line.strip().split()[0]\n            ip_in"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if(ip.startswith('0')):\n        return ip[1:]\n    else:\n        return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    i = re.sub(r'(?<!\\d)(?:\\d{1,3}\\.){0,3}(?=\\d)', '', ip)\n    return i\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern=re.compile(r'^0+')\n    return pattern.sub(\"\",ip)\ndef removezero_mac(mac):\n    '''\n    Write a function to remove leading zeroes from a mac address.\n    '''\n    pattern=re.compile(r'^0+')\n    return pattern.sub(\"\",mac)\ndef removezero_interface(interface):\n    '''\n    Write a function to remove leading zeroes from an interface name.\n    '''\n    pattern=re.compile(r'^0+')\n    return pattern.sub(\"\",interface)\ndef find_ip(ip,data):\n    ip_pattern=re.compile(r'\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3}')\n    ips=ip_pattern.findall(data)\n    for i in ips:\n        if i==ip:\n            return True\n    return False\ndef find_mac(mac,data):\n    mac_pattern=re.compile(r'\\w\\w:\\w\\w:\\w\\w:\\w\\w:\\w\\w:\\w\\w')\n    macs=mac_pattern.findall(data)\n    for i in macs:\n        if i==mac:\n            return True\n    return False\ndef find_interface(interface,data):\n    pattern=re.compile(r'^\\w{1,}')\n    interface_pattern=re.compile(r'\\w{1,}')\n    interfaces=interface_pattern.findall(data)\n    for i in interfaces:\n        if i==interface:\n            return True\n    return False\ndef find_all(pattern,data):\n    return re.findall(pattern,data)\ndef find_all_macs(data):\n    return re.findall(r'[0-9a-fA-F]{2}([:])[0-9a-fA-F]{2}(\\\\')\ndef get_ip_for_mac(data,mac):\n    pattern=re.compile(r'(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})')\n    ips=pattern.findall(data)\n    for i in ips:\n        if i==mac:\n            return True\n    return False\ndef get_mac_for_ip(data,ip):\n    pattern=re.compile(r'(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})')\n    macs=pattern.findall(data)\n    for i in macs:\n        if i==ip:\n            return True\n    return False\ndef get_interface_for_ip(data,ip):\n    pattern=re.compile(r'(^\\w{1,})\\s')\n    interfaces=pattern.findall(data)\n    for i in interfaces:\n        if i==ip:\n            return True\n    return False\ndef get_interface_for_mac(data,mac):\n    pattern=re.compile(r'(^\\w{1,})\\s')\n    interfaces=pattern.findall(data)\n    for i in interfaces:\n        if i==mac:\n            return True\n    return False\ndef get_all_interfaces(data):\n    pattern=re.compile(r'(^\\w{1,})\\s')\n    interfaces=pattern.findall(data)\n    return interfaces\ndef interface_status(data):\n    pattern=re.compile(r'\\s\\d{1,3}\\/\\d{1,3}\\s')\n    interfaces=pattern.findall(data)\n    return interfaces\ndef parse_line(line):\n    if re.match(r'^\\s*$',line):\n        return None\n    if re.match(r'^.*:',line):\n        line=line.split(':')\n        if re.match(r'^\\s*$',line[1]):\n            return None\n        if re.match(r'^\\s*$',line[0]):\n            return None\n        line[0]=line[0].strip()\n        line[1]=line[1].strip()\n        line[2]=line[2].strip()\n        line[3]=line[3].strip()\n        return line\n    line=line.split()\n    return line\ndef parse_interface_line(line):\n    if re.match(r'^\\s*$',line):\n        return None\n    if re.match(r'^\\s*$',line):\n        return None\n    line=line.split()\n    if re.match(r'^\\s*$',line[0]):\n        return None\n    line[0]=line[0].strip()\n    line[1]=line[1].strip()\n    line[2]=line[2].strip()\n    line[3]=line[3].strip()\n    return line\ndef parse_status_line(line):\n    if re.match(r'^\\s*$',line):\n        return None\n    if re.match(r'^\\s*$',line):\n        return None\n    line=line.split()\n    if re.match(r'^\\s*$',line[0]):\n        return None\n    line[0]=line[0].strip()\n    line[1]=line[1].strip()\n    line[2]=line[2].strip()\n    line[3]=line[3].strip()\n    return line\ndef parse_ip_line(line):\n    if re.match(r'^\\s*$',line):\n        return None\n    if re.match(r'^\\s*$',line):\n        return None\n    line=line.split()\n    if re.match(r'^\\s*$',line[0]):\n        return None\n    line[0]=line[0].strip()\n    line[1]=line[1].strip()\n    line[2]=line[2].strip()\n    line[3]=line[3].strip()\n    return line\ndef parse_mac_line(line):\n    if re.match(r'^\\s*$',line):\n        return None\n    if re.match(r'^\\s*$',line):\n        return None\n    line=line.split()\n    if re.match(r'^\\s*$',line[0]):\n        return None\n    line[0]=line[0].strip()\n    line[1]=line[1].strip()\n    line[2]=line[2].strip()\n    line[3]=line[3].strip()\n    return line\ndef parse_interface_line(line):\n    if re.match(r'^\\s*$',line):\n        return None\n    if re.match(r'^\\s*$',line):\n        return None\n    line=line.split()\n    if re.match(r'^\\s*$',line[0]):\n        return None\n    line[0]=line[0].strip()\n    line[1]=line[1].strip()\n    line[2]=line[2].strip()\n    line[3]=line[3].strip()\n    return line\ndef parse_mac_line(line):\n    if re.match(r'^\\s*$',line):\n        return None\n    if re.match(r'^\\s*$',line):\n        return None\n    line=line.split()\n    if re.match(r'^\\s*$',line[0]):\n        return None\n    line[0]=line[0].strip()\n    line[1]=line[1].strip()\n    line[2]=line[2].strip()\n    line[3]=line[3].strip()\n    return line\ndef parse_interface_status_line(line):\n    if re.match(r'^\\s*$',line):\n        return None\n    if re.match(r'^\\s*$',line):\n        return None\n    line=line.split()\n    if re.match(r'^\\s*$',line[0]):\n        return None\n    line[0]=line[0].strip()\n    line[1]=line[1].strip()\n    line[2]=line[2].strip()\n    line[3]=lin"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    def removezeroes(ip):\n        return ip.lstrip('0')\n    ip = re.sub('\\.[0]*','.',ip)\n    return removezeroes(ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = ip.split('.')\n    for i in range(len(ip_list)):\n        if ip_list[i] == '':\n            ip_list[i] = 0\n    ip_string = '.'.join(str(x) for x in ip_list)\n    return ip_string\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if not ip:\n        return ''\n    ip = re.sub('^0+', '', ip)\n    return ip\ndef isIP(ip):\n    ip = re.findall(r'(?:\\d{1,2}|1\\d{2}|2[0-4]\\d|25[0-5])\\.(?:\\d{1,2}|1\\d{2}|2[0-4]\\d|25[0-5])\\.(?:\\d{1,2}|1\\d{2}|2[0-4]\\d|25[0-5])\\.(?:\\d{1,2}|1\\d{2}|2[0-4]\\d|25[0-5])',ip)\n    if len(ip) == 4:\n        return True\n    return False\ndef removezeros_ip(ip):\n    if not ip:\n        return ''\n    if isIP(ip):\n        return removezero_ip(ip)\n    if re.match(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$',ip):\n        return removezero_ip(ip)\n    if re.match(r'^\\d+\\.\\d+\\.\\d+$',ip):\n        return removezero_ip(ip)\n    if re.match(r'^\\d+\\.\\d+$',ip):\n        return removezero_ip(ip)\n    return ip\ndef to_ip_mask(ip):\n    if not ip:\n        return ''\n    if re.match(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$',ip):\n        return ip\n    if re.match(r'^\\d+\\.\\d+\\.\\d+$',ip):\n        return ip\n    if re.match(r'^\\d+\\.\\d+$',ip):\n        return '0.0.0.0'\n    return ''\ndef to_mask(mask):\n    if not mask:\n        return ''\n    if re.match(r'^\\d+$',mask):\n        return mask\n    if re.match(r'^\\d+\\.\\d+$',mask):\n        return mask\n    if re.match(r'^\\d+\\.\\d+\\.\\d+$',mask):\n        return mask\n    if re.match(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$',mask):\n        return mask\n    return ''\ndef ip_and_mask(ip,mask):\n    if not ip:\n        return ''\n    if not mask:\n        return ''\n    if re.match(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$',ip):\n        ip = removezeros_ip(ip)\n        if not re.match(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$',mask):\n            mask = to_mask(mask)\n            if not mask:\n                return ''\n        mask = to_ip_mask(mask)\n        if not mask:\n            return ''\n        return ip+'/'+mask\n    if re.match(r'^\\d+\\.\\d+\\.\\d+$',ip):\n        ip = removezeros_ip(ip)\n        if not re.match(r'^\\d+\\.\\d+\\.\\d+$',mask):\n            mask = to_mask(mask)\n            if not mask:\n                return ''\n        mask = to_ip_mask(mask)\n        if not mask:\n            return ''\n        return ip+'/'+mask\n    if re.match(r'^\\d+\\.\\d+$',ip):\n        ip = removezeros_ip(ip)\n        if not re.match(r'^\\d+\\.\\d+$',mask):\n            mask = to_mask(mask)\n            if not mask:\n                return ''\n        mask = to_ip_mask(mask)\n        if not mask:\n            return ''\n        return ip+'/'+mask\n    if re.match(r'^\\d+$',ip):\n        ip = removezeros_ip(ip)\n        if not re.match(r'^\\d+\\.\\d+$',mask):\n            mask = to_mask(mask)\n            if not mask:\n                return ''\n        mask = to_ip_mask(mask)\n        if not mask:\n            return ''\n        return ip+'/'+mask\n    if re.match(r'^\\d+\\.\\d+\\.\\d+$',ip):\n        ip = removezeros_ip(ip)\n        if not re.match(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$',mask):\n            mask = to_mask(mask)\n            if not mask:\n                return ''\n        mask = to_ip_mask(mask)\n        if not mask:\n            return ''\n        return ip+'/'+mask\n    if re.match(r'^\\d+\\.\\d+\\.\\d+$',ip):\n        ip = removezeros_ip(ip)\n        if not re.match(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$',mask):\n            mask = to_mask(mask)\n            if not mask:\n                return ''\n        mask = to_ip_mask(mask)\n        if not mask:\n            return ''\n        return ip+'/'+mask\n    if re.match(r'^\\d+\\.\\d+$',ip):\n        ip = removezeros_ip(ip)\n        if not re.match(r'^\\d+\\.\\d+\\.\\d+$',mask):\n            mask = to_mask(mask)\n            if not mask:\n                return ''\n        mask = to_ip_mask(mask)\n        if not mask:\n            return ''\n        return ip+'/'+mask\n    if re.match(r'^\\d+$',ip):\n        ip = removezeros_ip(ip)\n        if not re.match(r'^\\d+\\.\\d+$',mask):\n            mask = to_mask(mask)\n            if not mask:\n                return ''\n        mask = to_ip_mask(mask)\n        if not mask:\n            return ''\n        return ip+'/'+mask\n    return ''\ndef to_ip_network(ip,mask):\n    ip_and_mask = ip_and_mask(ip,mask)\n    if not ip_and_mask:\n        return ''\n    return ip_and_mask\ndef to_network(network):\n    if not network:\n        return ''\n    if re.match(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$',network):\n        return network\n    if re.match(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$',network):\n        return network\n    if re.match(r'^\\d+\\.\\d+\\.\\d+$',network):\n        return network\n    if re.match(r'^\\d+\\.\\d+\\.\\d+$',network):\n        return network\n    return ''\ndef to_netmask(netmask):\n    if not netmask:\n        return ''\n    if re.match(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$',netmask):\n        return netmask\n    if re.match(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$',netmask):\n        return netmask\n    if re.match(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$',netmask):\n        return netmask\n    if re.match(r'^\\d+\\.\\d+\\.\\d+$',netmask):\n        return netmask\n    return ''\ndef get_networks(ip,mask):\n    ip_network = to_ip_network(ip,mask)\n    network = to_network(ip_network)\n    netmask = to_netmask(mask)\n    if not network:\n        return ''\n    if not netmask:\n        return ''\n    return network+'/'+netmask\ndef to_cidr(ip,mask):\n    ip_network = to_ip_network(ip,mask)\n    cidr = str(sum([bin(in"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip == '':\n        return ''\n    ip1 = ip.split('.')\n    ip2 = [str(int(ip1[0])),str(int(ip1[1])),str(int(ip1[2])),str(int(ip1[3]))]\n    ip3 = [str(int(ip2[0])),str(int(ip2[1])),str(int(ip2[2])),str(int(ip2[3]))]\n    ip4 = [str(int(ip3[0])),str(int(ip3[1])),str(int(ip3[2])),str(int(ip3[3]))]\n    ip5 = [str(int(ip4[0])),str(int(ip4[1])),str(int(ip4[2])),str(int(ip4[3]))]\n    ip6 = [str(int(ip5[0])),str(int(ip5[1])),str(int(ip5[2])),str(int(ip5[3]))]\n    ip7 = [str(int(ip6[0])),str(int(ip6[1])),str(int(ip6[2])),str(int(ip6[3]))]\n    ip8 = [str(int(ip7[0])),str(int(ip7[1])),str(int(ip7[2])),str(int(ip7[3]))]\n    ip9 = [str(int(ip8[0])),str(int(ip8[1])),str(int(ip8[2])),str(int(ip8[3]))]\n    ip10 = [str(int(ip9[0])),str(int(ip9[1])),str(int(ip9[2])),str(int(ip9[3]))]\n    ip11 = [str(int(ip10[0])),str(int(ip10[1])),str(int(ip10[2])),str(int(ip10[3]))]\n    ip12 = [str(int(ip11[0])),str(int(ip11[1])),str(int(ip11[2])),str(int(ip11[3]))]\n    ip13 = [str(int(ip12[0])),str(int(ip12[1])),str(int(ip12[2])),str(int(ip12[3]))]\n    ip14 = [str(int(ip13[0])),str(int(ip13[1])),str(int(ip13[2])),str(int(ip13[3]))]\n    ip15 = [str(int(ip14[0])),str(int(ip14[1])),str(int(ip14[2])),str(int(ip14[3]))]\n    ip16 = [str(int(ip15[0])),str(int(ip15[1])),str(int(ip15[2])),str(int(ip15[3]))]\n    ip17 = [str(int(ip16[0])),str(int(ip16[1])),str(int(ip16[2])),str(int(ip16[3]))]\n    ip18 = [str(int(ip17[0])),str(int(ip17[1])),str(int(ip17[2])),str(int(ip17[3]))]\n    ip19 = [str(int(ip18[0])),str(int(ip18[1])),str(int(ip18[2])),str(int(ip18[3]))]\n    ip20 = [str(int(ip19[0])),str(int(ip19[1])),str(int(ip19[2])),str(int(ip19[3]))]\n    ip21 = [str(int(ip20[0])),str(int(ip20[1])),str(int(ip20[2])),str(int(ip20[3]))]\n    ip22 = [str(int(ip21[0])),str(int(ip21[1])),str(int(ip21[2])),str(int(ip21[3]))]\n    ip23 = [str(int(ip22[0])),str(int(ip22[1])),str(int(ip22[2])),str(int(ip22[3]))]\n    ip24 = [str(int(ip23[0])),str(int(ip23[1])),str(int(ip23[2])),str(int(ip23[3]))]\n    ip25 = [str(int(ip24[0])),str(int(ip24[1])),str(int(ip24[2])),str(int(ip24[3]))]\n    ip26 = [str(int(ip25[0])),str(int(ip25[1])),str(int(ip25[2])),str(int(ip25[3]))]\n    ip27 = [str(int(ip26[0])),str(int(ip26[1])),str(int(ip26[2])),str(int(ip26[3]))]\n    ip28 = [str(int(ip27[0])),str(int(ip27[1])),str(int(ip27[2])),str(int(ip27[3]))]\n    ip29 = [str(int(ip28[0])),str(int(ip28[1])),str(int(ip28[2])),str(int(ip28[3]))]\n    ip30 = [str(int(ip29[0])),str(int(ip29[1])),str(int(ip29[2])),str(int(ip29[3]))]\n    ip31 = [str(int(ip30[0])),str(int(ip30[1])),str(int(ip30[2])),str(int(ip30[3]))]\n    ip32 = [str(int(ip31[0])),str(int(ip31[1])),str(int(ip31[2])),str(int(ip31[3]))]\n    ip33 = [str(int(ip32[0])),str(int(ip32[1])),str(int(ip32[2])),str(int(ip32[3]))]\n    ip34 = [str(int(ip33[0])),str(int(ip33[1])),str(int(ip33[2])),str(int(ip33[3]))]\n    ip35 = [str(int(ip34[0])),str(int(ip34[1])),str(int(ip34[2])),str(int(ip34[3]))]\n    ip36 = [str(int(ip35[0])),str(int(ip35[1])),str(int(ip35[2])),str(int(ip35[3]))]\n    ip37 = [str(int(ip36[0])),str(int(ip36[1])),str(int(ip36[2])),str(int(ip36[3]))]\n    ip38 = [str(int(ip37[0])),str(int(ip37[1])),str(int(ip37[2])),str(int(ip37[3]))]\n    ip39 = [str(int(ip38[0])),str(int(ip38[1])),str(int(ip38[2])),str(int(ip38[3]))]\n    ip40 = [str(int(ip39[0])),str(int(ip39[1])),str(int(ip39[2])),str(int(ip39[3]))]\n    ip41 = [str(int(ip40[0])),str(int(ip40[1])),str(int(ip40[2])),str(int(ip40[3]))]\n    ip42 = [str(int(ip41[0])),str(int(ip41[1])),str(int(ip41[2])),str(int(ip41[3]))]\n    ip43 = [str(int(ip42[0])),str(int(ip42[1])),str(int(ip42[2])),str(int(ip42[3]))]\n    ip44 = [str(int(ip43[0])),st"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return None\n    elif len(list1) == 2:\n        return list1[0] - list1[1]\n    else:\n        return list1[0] - list1[1] + diff_even_odd(list1[2:])\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = even_list = odd_num = odd_list = None\n    for num in list1:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    if even_list:\n        even_num = even_list[0]\n    if odd_list:\n        odd_num = odd_list[0]\n    return abs(even_num - odd_num)\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list_even = []\n    list_odd = []\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            list_even.append(list1[i])\n        else:\n            list_odd.append(list1[i])\n    diff = abs(list_even[0] - list_odd[0])\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if not list1:\n        return 0\n    odd_num = list1[0]\n    even_num = list1[1]\n    for index in xrange(2, len(list1)):\n        if index % 2 == 0:\n            even_num = even_num + list1[index]\n        else:\n            odd_num = odd_num + list1[index]\n    return even_num - odd_num\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return (list1[0]+list1[2]) - (list1[1]+list1[3])\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if not list1:\n        return 0\n    if len(list1) == 1:\n        return list1[0]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return None\n    elif len(list1) == 1:\n        return list1[0]\n    else:\n        return list1[0] - list1[1]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for item in list1:\n        if item % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count - odd_count\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    \n    assert type(list1) == list\n    \n    l = len(list1)\n    \n    if l % 2!= 0:\n        return list1[l//2] - list1[l//2 - 1]\n    else:\n        return list1[l//2] - list1[l//2 - 1] - 1\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list2 = []\n    for item in list1:\n        if item % 2 == 0:\n            list2.append(item - 2)\n        else:\n            list2.append(item + 2)\n    return list2\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    n = len(str1)\n    count = 0\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    i = 0\n    while (i < len(str1) and i < len(str2)) :\n        if (str1[i]!= str2[i]) :\n            return (abs(i-int(str2[i],2) ) + abs(i-int(str1[i],2) ) )\n        i += 1\n    return 0\n    "
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = list(str1)\n    str2 = list(str2)\n    res = 0\n    \n    for i in range(len(str1)) : \n        if str1[i]!= str2[i] : \n            res += 1\n            str1[i],str2[i] = str2[i],str1[i]\n    return res \n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2) :\n        return -1\n    count = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            count += 1\n    return count\n    \n    "
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    N = len(str1)\n    count = 0\n    for i in range(N) :\n        if str1[i]!= str2[i] :\n            count += 1\n            tmp = str1[i]\n            str1 = str1[:i] + str2[i] + str1[i+1:]\n            str2 = str2[:i] + tmp + str2[i+1:]\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            str2 = str2[:i] + str2[i+1:]\n            count += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1) == len(str2):\n        l = 0\n        for i in range(len(str1)):\n            if(str1[i]!= str2[i]):\n                l += 1\n        return l\n    elif len(str1) > len(str2):\n        return min_Swaps(str2,str1)\n    else:\n        return min_Swaps(str2,str1)\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = list(str1)\n    str2 = list(str2)\n    count = 0\n    for i in range(len(str1)) : \n        if (str1[i]!= str2[i]) : \n            str1[i], str2[i] = str2[i], str1[i]\n            count += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    #print(str1, str2)\n    str1 = list(str1)\n    str2 = list(str2)\n    i=0\n    j=0\n    count=0\n    while i < len(str1) and j < len(str2):\n        if str1[i]!= str2[j]:\n            if int(str1[i])==1 and int(str2[j])==0:\n                str1[i],str2[j] = str2[j],str1[i]\n                count+=1\n            elif int(str1[i])==0 and int(str2[j])==1:\n                str1[i],str2[j] = str2[j],str1[i]\n                count+=1\n        i+=1\n        j+=1\n    #print(count)\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    char1=list(str1)\n    char2=list(str2)\n    count=0\n    for i in range(len(char1)):\n        if char1[i]!=char2[i]:\n            char1[i],char2[i]=char2[i],char1[i]\n            count+=1\n    return count\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size = 1\n    for tuple_element in tuple_list:\n        tuple_size *= sys.getsizeof(tuple_element)\n    return tuple_size\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size=sys.getsizeof(tuple_list)\n    print'size of tuple is',size,'Bytes'\ntuple_size([])"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sz=0\n    for i in tuple_list:\n        sz=sz+sys.getsizeof(i)\n    return sz\ndef convert_tuple_to_list(tuple_list):\n    '''\n    Write a function to convert a tuple to a list.\n    '''\n    tup_lst=[]\n    for i in tuple_list:\n        tup_lst.append(i)\n    return tup_lst\ndef convert_list_to_tuple(list_list):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup=()\n    for i in list_list:\n        tup=tup+(i,)\n    return tup\ndef add_to_tuple(tuple_list,element):\n    '''\n    Write a function to add an element to a tuple.\n    '''\n    for i in tuple_list:\n        tuple_list.append(element)\n    return tuple_list\ndef remove_from_tuple(tuple_list,element):\n    '''\n    Write a function to remove an element from a tuple.\n    '''\n    for i in tuple_list:\n        if i==element:\n            tuple_list.remove(element)\n    return tuple_list\ndef tuple_nth_element(tuple_list,n):\n    '''\n    Write a function to return the nth element from a tuple.\n    '''\n    return tuple_list[n]\ndef tuple_sort(tuple_list):\n    '''\n    Write a function to sort the given tuple.\n    '''\n    for i in range(len(tuple_list)-1):\n        for j in range(i+1,len(tuple_list)):\n            if tuple_list[i]>tuple_list[j]:\n                temp=tuple_list[i]\n                tuple_list[i]=tuple_list[j]\n                tuple_list[j]=temp\n    return tuple_list\ndef tuple_reverse(tuple_list):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    tuple_list.reverse()\n    return tuple_list\ndef tuple_membership(tuple_list,element):\n    '''\n    Write a function to check if an element is present in a tuple.\n    '''\n    if element in tuple_list:\n        return True\n    else:\n        return False\ndef tuple_count(tuple_list,element):\n    '''\n    Write a function to count the occurrence of an element in a tuple.\n    '''\n    return tuple_list.count(element)\ndef tuple_concat(tuple_list1,tuple_list2):\n    '''\n    Write a function to concatenate two tuples.\n    '''\n    tuple_list3=tuple_list1+tuple_list2\n    return tuple_list3\ndef tuple_index(tuple_list,element):\n    '''\n    Write a function to return the index of an element in a tuple.\n    '''\n    return tuple_list.index(element)\ndef tuple_copy(tuple_list):\n    '''\n    Write a function to copy a tuple.\n    '''\n    tuple_list1=tuple_list\n    return tuple_list1\ndef tuple_max(tuple_list):\n    '''\n    Write a function to return the maximum element from the tuple.\n    '''\n    return max(tuple_list)\ndef tuple_min(tuple_list):\n    '''\n    Write a function to return the minimum element from the tuple.\n    '''\n    return min(tuple_list)\ndef tuple_slice(tuple_list,start,stop):\n    '''\n    Write a function to return a slice from a tuple.\n    '''\n    tup_lst=tuple_list[start:stop]\n    return tup_lst\ndef tuple_slice_assignment(tuple_list,start,stop):\n    '''\n    Write a function to assign a slice from a tuple to a new tuple.\n    '''\n    tup_lst=tuple_list[start:stop]\n    tuple_list=tup_lst\n    return tuple_list\ndef tuple_len(tuple_list):\n    '''\n    Write a function to return the length of a tuple.\n    '''\n    return len(tuple_list)\ndef tuple_map(tuple_list,func):\n    '''\n    Write a function to map the values of a tuple using a function.\n    '''\n    tup_lst=[]\n    for i in tuple_list:\n        tup_lst.append(func(i))\n    return tuple_lst\ndef tuple_filter(tuple_list,func):\n    '''\n    Write a function to filter the elements of a tuple using a function.\n    '''\n    tup_lst=[]\n    for i in tuple_list:\n        if func(i):\n            tup_lst.append(i)\n    return tup_lst\ndef tuple_reduce(tuple_list,func,initializer=None):\n    '''\n    Write a function to reduce the values of a tuple using a function.\n    '''\n    if initializer is None:\n        return reduce(func,tuple_list)\n    else:\n        return reduce(func,tuple_list,initializer)\ndef tuple_reduce_with_initializer(tuple_list,func,initializer):\n    '''\n    Write a function to reduce the values of a tuple using a function.\n    '''\n    return reduce(func,tuple_list,initializer)\ndef tuple_unpack(tuple_list):\n    '''\n    Write a function to unpack a tuple.\n    '''\n    a,b,c=tuple_list\n    return a,b,c\ndef tuple_comprehension(tuple_list):\n    '''\n    Write a function to create a new tuple using the elements of a given tuple.\n    '''\n    lst=[]\n    for i in tuple_list:\n        lst.append(i)\n    tup_lst=tuple(lst)\n    return tup_lst\ndef tuple_max_min_reduce(tuple_list):\n    '''\n    Write a function to return the maximum, minimum and sum of a tuple.\n    '''\n    tup_lst=tuple_list\n    max_tup=tup_lst[0]\n    min_tup=tup_lst[0]\n    sum_tup=0\n    for i in tup_lst:\n        if i>max_tup:\n            max_tup=i\n        elif i<min_tup:\n            min_tup=i\n        sum_tup=sum_tup+i\n    return max_tup,min_tup,sum_tup\ndef tuple_rev(tuple_list):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    tuple_list.reverse()\n    return tuple_list\ndef tuple_reverse_by_index(tuple_list,start,stop):\n    '''\n    Write a function to reverse a tuple by index.\n    '''\n    tuple_list=tuple_list[start:stop]\n    tuple_list.reverse()\n    return tuple_list\ndef tuple_zip(tuple_list1,tuple_list2):\n    '''\n    Write a function to zip two tuples.\n    '''\n    tup_lst=[]\n    for i in range(len(tuple_list1)):\n        tup_lst.append((tuple_list1[i],tuple_list2[i]))\n    return tup_lst\ndef tuple_pow(tuple_list,power):\n    '''\n    Write a function to compute the power of a tuple.\n    '''\n    tuple_list=tuple_list**power\n    return tuple_list\ndef tuple_exch(tuple_list,n):\n    '''\n    Write a function to exchange the ith and jth element of a tuple.\n    '''\n    tup_lst=[]\n    for i in range(len(tuple_list)):\n        tup_lst.append("
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size = sys.getsizeof(tuple_list)\n    print \"The size in bytes of the tuple is:\",tuple_size\n    return tuple_size\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for t in tuple_list:\n        size = size + sys.getsizeof(t)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    #size = sys.getsizeof(tuple_list)\n    size = sys.getsizeof(tuple_list)\n    return size \n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    byte_size = 0\n    for element in tuple_list:\n        byte_size = byte_size + sys.getsizeof(element)\n    return byte_size\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size = 0\n    for i in tuple_list:\n        tuple_size = tuple_size + sys.getsizeof(i)\n    print tuple_size\ndef list_size(list_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    list_size = 0\n    for i in list_list:\n        list_size = list_size + sys.getsizeof(i)\n    print list_size\ndef set_size(set_list):\n    '''\n    Write a function to find the size in bytes of the given set.\n    '''\n    set_size = 0\n    for i in set_list:\n        set_size = set_size + sys.getsizeof(i)\n    print set_size\ndef dict_size(dict_list):\n    '''\n    Write a function to find the size in bytes of the given dictionary.\n    '''\n    dict_size = 0\n    for i in dict_list:\n        dict_size = dict_size + sys.getsizeof(i)\n    print dict_size\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    result = 0\n    for i in range(len(tuple_list)):\n        result += sys.getsizeof(tuple_list[i])\n    return result\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\ndef tuple_count(tuple_list):\n    '''\n    Write a function to count the number of tuples in a given tuple list.\n    '''\n    return len(tuple_list)\ndef tuple_repetition(tuple_list):\n    '''\n    Write a function to check if the given tuple list is a duplicate.\n    '''\n    return tuple_list.count(tuple_list)\ndef tuple_find_indice(tuple_list):\n    '''\n    Write a function to find the indice of a given element in a given tuple list.\n    '''\n    return tuple_list.index(tuple_list)\ndef tuple_is_empty(tuple_list):\n    '''\n    Write a function to check if the given tuple list is empty.\n    '''\n    return len(tuple_list) == 0\ndef tuple_empty_list(tuple_list):\n    '''\n    Write a function to remove the duplicates in a given tuple list.\n    '''\n    return tuple(set(tuple_list))\ndef tuple_find_indice_repetition(tuple_list):\n    '''\n    Write a function to find the indice and count of the given element in a given tuple list.\n    '''\n    return tuple_list.count(tuple_list)\ndef tuple_list_elements(tuple_list):\n    '''\n    Write a function to return the individual elements of a tuple list.\n    '''\n    return tuple_list\ndef tuple_element_list(tuple_list):\n    '''\n    Write a function to return the individual elements of a tuple list.\n    '''\n    element_list = []\n    for i in tuple_list:\n        element_list.append(i)\n    return element_list\ndef tuple_element_repetition(tuple_list):\n    '''\n    Write a function to check the count of the given element in a given tuple list.\n    '''\n    return tuple_list.count(tuple_list)\ndef tuple_element_repetition_remove(tuple_list):\n    '''\n    Write a function to remove the given element in the given tuple list.\n    '''\n    return tuple_list.remove(tuple_list)\ndef tuple_element_count(tuple_list):\n    '''\n    Write a function to count the number of given element in a given tuple list.\n    '''\n    return tuple_list.count(tuple_list)\ndef tuple_element_count_remove(tuple_list,element):\n    '''\n    Write a function to count the number of given element in a given tuple list.\n    '''\n    return tuple_list.count(element)\ndef tuple_element_count_remove_all(tuple_list,element):\n    '''\n    Write a function to count the number of given element in a given tuple list.\n    '''\n    return tuple_list.count(element)\ndef tuple_element_count_remove_all_repeated(tuple_list,element):\n    '''\n    Write a function to count the number of given element in a given tuple list.\n    '''\n    return tuple_list.count(element)\ndef tuple_element_count_remove_all_repeated_using_function(tuple_list,element):\n    '''\n    Write a function to count the number of given element in a given tuple list.\n    '''\n    return tuple_list.count(element)\ndef tuple_element_remove(tuple_list,element):\n    '''\n    Write a function to remove the given element in the given tuple list.\n    '''\n    return tuple_list.remove(element)\ndef tuple_element_remove_all(tuple_list,element):\n    '''\n    Write a function to remove all the given element in the given tuple list.\n    '''\n    return tuple_list.remove(element)\ndef tuple_reverse(tuple_list):\n    '''\n    Write a function to reverse the tuple list.\n    '''\n    return tuple_list[::-1]\ndef tuple_reverse_find_indice(tuple_list):\n    '''\n    Write a function to find the indice of the given element in the reversed tuple list.\n    '''\n    return tuple_list.index(tuple_list)\ndef tuple_reverse_find_indice_repetition(tuple_list):\n    '''\n    Write a function to find the indice and count of the given element in the reversed tuple list.\n    '''\n    return tuple_list.count(tuple_list)\ndef tuple_reverse_find_indice_repetition_remove(tuple_list):\n    '''\n    Write a function to find the indice and count of the given element in the reversed tuple list.\n    '''\n    return tuple_list.count(tuple_list)\ndef tuple_reverse_find_indice_repetition_remove_all(tuple_list):\n    '''\n    Write a function to find the indice and count of the given element in the reversed tuple list.\n    '''\n    return tuple_list.count(tuple_list)\ndef tuple_reverse_find_indice_repetition_remove_all_repeated(tuple_list):\n    '''\n    Write a function to find the indice and count of the given element in the reversed tuple list.\n    '''\n    return tuple_list.count(tuple_list)\ndef tuple_reverse_find_indice_repetition_remove_all_repeated_using_function(tuple_list):\n    '''\n    Write a function to find the indice and count of the given element in the reversed tuple list.\n    '''\n    return tuple_list.count(tuple_list)\ndef tuple_reverse_remove(tuple_list,element):\n    '''\n    Write a function to remove the given element in the reversed tuple list.\n    '''\n    return tuple_list.remove(element)\ndef tuple_reverse_remove_all(tuple_list,element):\n    '''\n    Write a function to remove the all the given element in the reversed tuple list.\n    '''\n    return tuple_list.remove(element)\ndef tuple_find_first_repetition(tuple_list):\n    '''\n    Write a function to find the first repetition of a given element in the tuple list.\n    '''\n    return tuple_list.index(tuple_list)\ndef tuple_first_repetition_find_indice(tuple_list):\n    '''\n    Write a function to find the indice of the first repetition of a given element in the tuple list.\n    '''\n    return tuple_list.index(tuple_list)\ndef tuple_first_repetition_find_indice_repetition(tuple_list):\n    '''\n    Write a function to find the indice and count of the first repetition of a given element in the tuple list.\n    '''\n    return tuple_list.count(tuple_list)\ndef tuple_first_repetition_find_indice_repetition_remove(tuple_list):\n    '''\n    Write a function to find the indice and count of the first repetition of a given element in the tuple list.\n    '''\n    return tuple_list.count(tuple_list)\ndef tuple_first_repetition_find_indice_repetition_remove_all(tuple_list):\n    '''\n    Write a function to find the indice and count of the first repetition of a given element in the tuple list.\n    '''\n    return tuple_list.count(tuple_list)\ndef tuple_first_repetition_find_indice_repetition_remove_all_repeated(tuple_list):\n    '''\n    Write a function to find the indice and count of the first repetition of a given element in the tuple list.\n    '''\n    return tuple_list.count(tuple_list)\ndef tuple_first_repetition_find_indice_repetition_remove_all_repeated_using_function(tuple_list):\n    '''\n    Write a function to find the indice and count of the first repetition of a given element in the tuple list.\n    '''\n    return tuple_list.count(tuple_list)\ndef tuple_first_repetition_remove(tuple_list,element):\n    '''"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1 == None or arr2 == None:\n        return -1\n    if len(arr1) == 0 or len(arr2) == 0:\n        return -1\n    # print \"arr1\", arr1, \"arr2\", arr2\n    idx1 = 0\n    idx2 = 0\n    while True:\n        if idx1 == len(arr1):\n            return arr2[idx2 + k - 1]\n        if idx2 == len(arr2):\n            return arr1[idx1 + k - 1]\n        if k == 1:\n            return min(arr1[idx1], arr2[idx2])\n        if k > 1:\n            if arr1[idx1] < arr2[idx2]:\n                idx1 += 1\n            else:\n                idx2 += 1\n        else:\n            if arr1[idx1] > arr2[idx2]:\n                idx1 += 1\n            else:\n                idx2 += 1\n            k -= 1\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    idx1 = 0\n    idx2 = 0\n    while idx1 < len(arr1) and idx2 < len(arr2):\n        if arr1[idx1] < arr2[idx2]:\n            idx1 += 1\n        elif arr1[idx1] > arr2[idx2]:\n            idx2 += 1\n        else:\n            idx1 += 1\n            idx2 += 1\n        if idx1 == len(arr1) or idx2 == len(arr2):\n            return arr1[idx1]\n    # return None\n    return arr1[idx1 - 1]\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def _find_kth(arr1, arr2, k):\n        '''\n        Args:\n            arr1, arr2: sorted arrays\n            k: integer, index of element to find\n        Returns:\n            element at the kth position from the two sorted arrays\n        '''\n        if arr1 is None:\n            return arr2[k-1]\n        if arr2 is None:\n            return arr1[k-1]\n        if k == 1:\n            return min(arr1[0], arr2[0])\n        mid1 = len(arr1) // 2\n        mid2 = len(arr2) // 2\n        if arr1[mid1] > arr2[mid2]:\n            if k > mid2 + 1:\n                return _find_kth(arr1, arr2[mid2+1:], k - mid2 - 1)\n            else:\n                return _find_kth(arr1[:mid1], arr2, k)\n        elif arr1[mid1] < arr2[mid2]:\n            if k > mid1 + 1:\n                return _find_kth(arr1[mid1+1:], arr2, k - mid1 - 1)\n            else:\n                return _find_kth(arr1, arr2[:mid2], k)\n        else:\n            if k > mid1 + mid2 + 1:\n                return _find_kth(arr1[mid1+1:mid1+mid2+1], arr2[mid2+1:], k - mid1 - mid2 - 1)\n            else:\n                return min(arr1[mid1], arr2[mid2])\n    if arr1 is None or arr2 is None or len(arr1) == 0 or len(arr2) == 0:\n        return None\n    return _find_kth(arr1, arr2, k)\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    return binary_search(arr1, 0, len(arr1)-1, arr2, 0, len(arr2)-1, k)\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n        if i + j == k:\n            return arr1[i]\n        elif i + j > k:\n            return arr2[j - (k - i)]\n        elif i + j < k:\n            return arr1[i]\n        "
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    if not arr2:\n        return arr1[k-1]\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if k <= mid1:\n        return find_kth(arr1[:mid1], arr2, k)\n    elif k > mid1 + mid2:\n        return find_kth(arr1, arr2[mid2+1:], k-mid1-mid2-1)\n    else:\n        return arr2[mid2] if arr1[mid1] == arr2[mid2] else find_kth(arr1[mid1+1:], arr2[:mid2], k)\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while True:\n        if i == len(arr1):\n            return arr2[j + k - 1]\n        if j == len(arr2):\n            return arr1[i + k - 1]\n        if k == 1:\n            return min(arr1[i], arr2[j])\n        if k > 1:\n            i1 = arr1[i]\n            j1 = arr2[j]\n            if i1 < j1:\n                return arr2[j + k - 1]\n            if i1 > j1:\n                return arr1[i + k - 1]\n        if arr1[i] == arr2[j]:\n            i += 1\n            j += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    p1 = 0\n    p2 = 0\n    while p1 < len(arr1) and p2 < len(arr2):\n        if arr1[p1] < arr2[p2]:\n            if p2 == k - 1:\n                return arr1[p1]\n            p1 += 1\n        else:\n            if p1 == k - 1:\n                return arr2[p2]\n            p2 += 1\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            if i == k:\n                return arr1[i]\n            if i < k:\n                i += 1\n            if j < k:\n                j += 1\n            \n    return -1\n    \n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k > len(arr1) + len(arr2):\n        return None\n    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    smaller = min(find_kth(arr1, arr2, k/2), find_kth(arr1, arr2, k - k/2))\n    return smaller\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    s = str(number)\n    l = len(s)\n    tmp = 0\n    for i in s:\n        tmp = tmp + (int(i) ** l)\n    return tmp == int(number)\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 0:\n        return False\n    digits = []\n    while number > 0:\n        digits.append(number % 10)\n        number //= 10\n    total = 0\n    for item in digits:\n        total += item**3\n    return total == number\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    # if number is of the form of 6k+-1 \n    if number > 9 and number < 100:\n        sum = 0\n        number_list = []\n        number_list.append(number)\n        \n        while (number > 0):\n            number_list.append(int(number%10))\n            number = number/10\n        \n        for item in number_list:\n            sum += item**len(number_list)\n        \n        if number == sum:\n            return True\n        \n    # if number is of the form of 3k+-1\n    if number > 99 and number < 1000:\n        sum = 0\n        number_list = []\n        number_list.append(number)\n        \n        while (number > 0):\n            number_list.append(int(number%10))\n            number = number/10\n        \n        for item in number_list:\n            sum += item**len(number_list)\n        \n        if number == sum:\n            return True\n    \n    # if number is of the form of 9k+-2\n    if number > 999 and number < 10000:\n        sum = 0\n        number_list = []\n        number_list.append(number)\n        \n        while (number > 0):\n            number_list.append(int(number%10))\n            number = number/10\n        \n        for item in number_list:\n            sum += item**len(number_list)\n        \n        if number == sum:\n            return True\n        \n    # if number is of the form of 4k+-2\n    if number > 999 and number < 10000:\n        sum = 0\n        number_list = []\n        number_list.append(number)\n        \n        while (number > 0):\n            number_list.append(int(number%10))\n            number = number/10\n        \n        for item in number_list:\n            sum += item**len(number_list)\n        \n        if number == sum:\n            return True\n        \n    # if number is of the form of 8k+-3\n    if number > 9999 and number < 100000:\n        sum = 0\n        number_list = []\n        number_list.append(number)\n        \n        while (number > 0):\n            number_list.append(int(number%10))\n            number = number/10\n        \n        for item in number_list:\n            sum += item**len(number_list)\n        \n        if number == sum:\n            return True\n    \n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    return str(number) == str(sum([int(x)**3 for x in str(number)]))\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if number == sum:\n        return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = abs(number)\n    string_number = str(number)\n    length = len(string_number)\n    result = 0\n    for i in range(length):\n        digit = int(string_number[i])**length\n        result = result + digit\n    if number == result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    return number == sum(int(i) ** len(str(number)) for i in str(number))\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # initialize sum of the square of the digits\n    sum = 0\n    temp = number\n    while temp > 0:\n        # the last digit\n        d = temp % 10\n        # adding the square of the last digit to the sum\n        sum += d * d\n        # removing the last digit from the number\n        temp /= 10\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    #convert number to string\n    number_str = str(number)\n    # calculate length of string\n    len_str = len(number_str)\n    # calculate sum of squares of each digit\n    sum_of_squares = 0\n    for i in range(len_str):\n        digit_str = number_str[i]\n        digit_sum = int(digit_str) ** len_str\n        sum_of_squares = sum_of_squares + digit_sum\n    # check if sum of squares is equal to number\n    if sum_of_squares == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 0:\n        return False\n    elif number == 0:\n        return True\n    else:\n        count = 0\n        power = len(str(number))\n        for digit in str(number):\n            count += int(digit)**power\n        return count == number\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    assert isinstance(number, int) and number >= 1, 'Number should be a positive integer.'\n    return sum(range(1, number + 1)), sum(range(1, number + 1)) / number\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return number*(number+1)/2\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    avg = 0.0\n    sum = 0.0\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    \n    sum = 0\n    average = 0\n    \n    for i in range(number):\n        sum += i+1\n    average = sum / number\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    number_count = 0\n    while number_count < number:\n        sum = sum + number_count\n        number_count = number_count + 1\n    average = sum / number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return sum(range(number+1))/number\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    assert type(number) == int, 'Number should be an integer'\n    assert number >= 0, 'Number should be an positive'\n    sum, avg = 0, 0\n    for i in range(number+1):\n        sum += i\n        avg = sum/number\n    return sum, avg\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # n = int(input(\"Enter a number: \"))\n    n = number\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i\n    average = sum / n\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1, number+1):\n        sum = sum + i\n        average = average + i\n    print 'Sum: ', sum\n    print 'Average: ', (average/number)\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,number+1):\n        sum += i\n    average = sum / number\n    print(sum)\n    print(average)\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n%2 == 0) : \n        return True\n    return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    return n%2!=0\ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    return n>1 and not any(n%i==0 for i in range(2,int(n**0.5)+1))\ndef is_Palindrome(n) : \n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    return str(n)==str(n)[::-1]\ndef is_Permutation(n) : \n    '''\n    Write a python function to check whether the given number is permutation of each other or not.\n    '''\n    temp = set(str(n))\n    return len(temp)==len(str(n))\ndef is_Pentagonal(n) : \n    '''\n    Write a python function to check whether the given number is pentagonal or not.\n    '''\n    temp = (24*n+1)**0.5\n    return temp == int(temp)\ndef is_Hexagonal(n) : \n    '''\n    Write a python function to check whether the given number is hexagonal or not.\n    '''\n    temp = (8*n+1)**0.5\n    return temp == int(temp)\ndef is_Heptagonal(n) : \n    '''\n    Write a python function to check whether the given number is heptagonal or not.\n    '''\n    temp = (7*n+1)**0.5\n    return temp == int(temp)\ndef is_Octagonal(n) : \n    '''\n    Write a python function to check whether the given number is octagonal or not.\n    '''\n    temp = (6*n+1)**0.5\n    return temp == int(temp)\ndef is_Hexagonal_Pyramid(n) : \n    '''\n    Write a python function to check whether the given number is hexagonal or not.\n    '''\n    temp = (8*n+1)**0.5\n    return temp == int(temp)\ndef is_Triangular(n) : \n    '''\n    Write a python function to check whether the given number is triangular or not.\n    '''\n    temp = int((1+8*n)**0.5)\n    return temp == int(temp)\ndef is_Square(n) : \n    '''\n    Write a python function to check whether the given number is square or not.\n    '''\n    return n==int(n**0.5)**2\ndef is_Fibonacci(n) : \n    '''\n    Write a python function to check whether the given number is fibonacci or not.\n    '''\n    return ((5*n**2 + 4)**0.5 - 5*n) == int((5*n**2 + 4)**0.5 - 5*n)\ndef is_Composite(n) : \n    '''\n    Write a python function to check whether the given number is composite or not.\n    '''\n    return all(n%i!=0 for i in range(2,int(n**0.5)+1))\ndef is_Perfect(n) : \n    '''\n    Write a python function to check whether the given number is perfect or not.\n    '''\n    temp = sum(int(i) for i in str(n))\n    return temp==n\ndef is_Pentagonal_Prime(n) : \n    '''\n    Write a python function to check whether the given number is pentagonal and prime or not.\n    '''\n    temp = (24*n+1)**0.5\n    return temp == int(temp) and is_Prime(temp)\ndef is_Hexagonal_Prime(n) : \n    '''\n    Write a python function to check whether the given number is hexagonal and prime or not.\n    '''\n    temp = (8*n+1)**0.5\n    return temp == int(temp) and is_Prime(temp)\ndef is_Heptagonal_Prime(n) : \n    '''\n    Write a python function to check whether the given number is heptagonal and prime or not.\n    '''\n    temp = (7*n+1)**0.5\n    return temp == int(temp) and is_Prime(temp)\ndef is_Octagonal_Prime(n) : \n    '''\n    Write a python function to check whether the given number is octagonal and prime or not.\n    '''\n    temp = (6*n+1)**0.5\n    return temp == int(temp) and is_Prime(temp)\ndef is_Hexagonal_Triangular_Prime(n) : \n    '''\n    Write a python function to check whether the given number is hexagonal, triangular and prime or not.\n    '''\n    temp = (8*n+1)**0.5\n    return temp == int(temp) and is_Prime(temp)\ndef is_Heptagonal_Triangular_Prime(n) : \n    '''\n    Write a python function to check whether the given number is heptagonal, triangular and prime or not.\n    '''\n    temp = (7*n+1)**0.5\n    return temp == int(temp) and is_Prime(temp)\ndef is_Octagonal_Triangular_Prime(n) : \n    '''\n    Write a python function to check whether the given number is octagonal, triangular and prime or not.\n    '''\n    temp = (6*n+1)**0.5\n    return temp == int(temp) and is_Prime(temp)\ndef is_Hexagonal_Octagonal_Prime(n) : \n    '''\n    Write a python function to check whether the given number is hexagonal, octagonal and prime or not.\n    '''\n    temp = (8*n+1)**0.5\n    return temp == int(temp) and is_Prime(temp)\ndef is_Hexagonal_Octagonal_Prime_Tup(n) : \n    '''\n    Write a python function to check whether the given number is hexagonal, octagonal and prime or not.\n    '''\n    temp = (7*n+1)**0.5\n    return temp == int(temp) and is_Prime(temp)\ndef is_Hexagonal_Octagonal_Prime_Trig(n) : \n    '''\n    Write a python function to check whether the given number is hexagonal, octagonal and prime or not.\n    '''\n    temp = (6*n+1)**0.5\n    return temp == int(temp) and is_Prime(temp)\ndef is_Hexagonal_Octagonal_Prime_Tet(n) : \n    '''\n    Write a python function to check whether the given number is hexagonal, octagonal and prime or not.\n    '''\n    temp = (5*n+1)**0.5\n    return temp == int(temp) and is_Prime(temp)\ndef is_Hexagonal_Octagonal_Prime_Pent(n) : \n    '''\n    Write a python function to check whether the given number is hexagonal, octagonal and prime or not.\n    '''\n    temp = (4*n+1)**0.5\n    return temp == int(temp) and is_Prime(temp)\ndef is_Hexagonal_Octagonal_Prime_Hex(n) : \n    '''\n    Write a python function to check whether the given number is hexagonal, octagonal and prime or not.\n    '''\n    temp = (3*n+1)**0.5\n    return temp == int(temp) and is_Prime(temp)\ndef is_Hexagonal_Octagonal_Prime_Oct(n) : \n    '''\n    Write a python function to check whether the given number is hexagonal, octagonal and prime or not.\n    '''\n    temp = (2*n+1)**0.5\n    return temp == int(temp) and is_Prime(temp)\ndef is_Hexagonal_Octagonal_Prime_Nint(n) : \n    '''\n    Write a python function to check whether the given number is hexagonal, octagonal and prime or not.\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2 == 0\n    \ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n <= 3 : \n        return n > 1 \n    elif n%2 == 0 or n%3 == 0 : \n        return False \n    else : \n        return True \n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2) == 0: \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return (n%2) == 0\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] in str1[i+1:]:\n            return str1[i]\n    return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            return char\n        else:\n            char_freq[char] = 1\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    freq = {}\n    for i in str1:\n        if i in freq:\n            return i\n        else:\n            freq[i] = 1\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    d = {}\n    for i in str1:\n        d[i] = d.get(i, 0) + 1\n    for i in str1:\n        if d[i] == 1:\n            return i\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    temp = str1.split(' ')\n    result = ''\n    for i in temp:\n        result += i[0]\n    return result\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    d = {}\n    for char in str1:\n        if char not in d:\n            d[char] = 1\n        else:\n            d[char] += 1\n    for key,value in d.items():\n        if value == 1:\n            return key\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) > 1:\n            return i\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for i in str1:\n        if i in char_count:\n            return i\n        else:\n            char_count[i] = 1\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        count = 0\n        for j in range(i,len(str1)):\n            if str1[i] == str1[j]:\n                count = count + 1\n                if count > 1:\n                    return str1[i]\n            else:\n                break\n    return -1\n    \ndef test_first_repeated_char():\n    assert first_repeated_char('abc') == -1\n    assert first_repeated_char('abababab') == 'a'\n    assert first_repeated_char('aaa') == -1\n    assert first_repeated_char('bbbbbbbbb') == -1\n    assert first_repeated_char('abababab') == 'a'\n    assert first_repeated_char('abca') == 'a'\n    print('Test finished successfully')\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    i = 1\n    while len(ludic) < n:\n        divisors = [1]\n        for divisor in range(2, int(math.sqrt(i)) + 1):\n            if i % divisor == 0:\n                divisors.append(divisor)\n                divisors.append(i // divisor)\n        if sum(divisors) == i:\n            ludic.append(i)\n        i += 1\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = [1,2,3,4]\n    # we already know that there is no number smaller than 4\n    while len(ludic_numbers) <= n:\n        new_numbers = []\n        for i in ludic_numbers:\n            new_numbers.append(i+1)\n            new_numbers.append(i+2)\n            new_numbers.append(i+3)\n        ludic_numbers += new_numbers\n    return ludic_numbers[:n]\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n):\n        ludic.append(1)\n    for i in range(n):\n        l = len(ludic)\n        if l % 2 == 0:\n            ludic.append(ludic[l/2] + ludic[l/2 - 1])\n        else:\n            ludic.append(ludic[l/2])\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 1:\n        return []\n    res = [n]\n    for i in range(n-1, 0, -1):\n        if i % 2 == 0:\n            res.append(i)\n        else:\n            res.append(i + 1)\n    return res\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 0:\n        return [0]\n    nums = [i for i in range(1, n+1)]\n    for i in range(1, n):\n        if i % 3 == 0:\n            nums[i] *= nums[i]\n        elif i % 2 == 0:\n            nums[i] *= nums[i]**2\n        else:\n            nums[i] = nums[i]**3\n    return nums\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n <= 1:\n        return [n]\n    \n    # filter out all 1's and 3's\n    lucids = get_ludic(n//2)\n    lucids = [i*i + 3*i + 2 for i in lucids]\n    lucids = [i for i in lucids if i < n]\n    \n    return lucids + get_ludic(n-1)\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1,2]\n    ludic = [1,2]\n    for i in range(2,n+1):\n        ludic.append(ludic[i-1] + 2*ludic[i-2])\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 6:\n        return []\n    ludic = [1, 2, 3]\n    for x in xrange(4, n+1):\n        l = x/3\n        l_limit = int(math.sqrt(x))\n        l_sum = sum(ludic[:l])\n        if l_sum < l_limit:\n            ludic.append(x)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    for i in range(n+1):\n        if i**2 == n:\n            return i\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = [True] * (n + 1)\n    ludic[1] = False\n    for i in range(2, n):\n        if not ludic[i]:\n            continue\n        j = i\n        while j * j <= n:\n            ludic[j * j] = False\n            j += 1\n    return [str(x) for x in range(1, n + 1) if ludic[x]]\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(reversed(s.split(\" \")))\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    \n    def reverse_word(word):\n        reversed_word = word[::-1]\n        return reversed_word\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if len(s) == 0:\n        return s\n    words = []\n    start = 0\n    for i in range(len(s)):\n        if s[i] =='':\n            words.append(s[start:i])\n            start = i+1\n    words.append(s[start:])\n    s =''.join(words)\n    return s\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s: return s\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    n = len(s)\n    s = list(s)\n    start = 0\n    end = 0\n    for i in range(n):\n        if s[i] =='':\n            end = i - 1\n            s[start:end+1] = s[end:start:-1]\n            start = i+1\n    s[start:end+1] = s[end:start:-1]\n    return ''.join(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if s.strip() == \"\": return \"\"\n    s = s.strip()\n    i = len(s) - 1\n    j = i\n    res = []\n    while i >= 0:\n        if s[i] == \" \":\n            i -= 1\n            continue\n        res.append(s[i])\n        i -= 1\n    return \"\".join(res)\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    result = ''\n    temp = ''\n    for i in s:\n        if i =='':\n            if temp:\n                result = result + temp +''\n            temp = ''\n        else:\n            temp = temp + i\n    if temp:\n        result = result + temp +''\n    return result[:-1]\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(\" \")\n    ans = []\n    for word in words:\n        ans.append(word[::-1])\n    return \" \".join(ans)\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num%2 == 0:\n        return False\n    for i in range(3, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    elif num == 3:\n        return True\n    else:\n        for i in range(3,num,2):\n            if num % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    \n    for i in range(3, num, 2):\n        if num % i == 0:\n            return False\n    return True\n    \ndef gcd(num1, num2):\n    '''\n    Write a function that computes the gcd of two numbers.\n    '''\n    if num1 == 0:\n        return num2\n    return gcd(num2%num1, num1)\n    \ndef lcm(num1, num2):\n    '''\n    Write a function that computes the lcm of two numbers.\n    '''\n    return (num1 * num2) / gcd(num1, num2)\n    \ndef is_permutation(str1, str2):\n    '''\n    Write a function to check if the two strings are permutations of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        for i in range(len(str1)):\n            if str1[i] in str2:\n                continue\n            else:\n                return False\n        return True\n    \ndef top_n_words(text, n):\n    '''\n    Write a function that takes a text string and an integer n, and returns the top n \n    words in the text.\n    '''\n    words = text.split(' ')\n    for i in range(len(words)):\n        words[i] = words[i].strip('.,!?:;()\\'')\n    \n    counts = {}\n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n    \n    return sorted(counts.items(), key=lambda x: x[1], reverse=True)[:n]\n    \ndef is_anagram(str1, str2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    str1 = str1.strip('.,!?:;()\\'')\n    str2 = str2.strip('.,!?:;()\\'')\n    return sorted(str1.lower()) == sorted(str2.lower())\n    \ndef palindromic_substrings(str1):\n    '''\n    Write a function to find all the palindromic substrings of a string.\n    '''\n    substr_list = []\n    for i in range(len(str1)):\n        for j in range(i, len(str1)):\n            if str1[i:j+1] == str1[i:j+1][::-1]:\n                substr_list.append(str1[i:j+1])\n    return substr_list\n    \ndef bannagram(str1, str2):\n    '''\n    Write a function that finds the number of common characters between two strings.\n    '''\n    str1 = str1.strip('.,!?:;()\\'')\n    str2 = str2.strip('.,!?:;()\\'')\n    cnt = 0\n    for i in range(len(str1)):\n        for j in range(len(str2)):\n            if str1[i] == str2[j]:\n                cnt += 1\n                break\n    return cnt\n    \ndef rotate_array(arr, n):\n    '''\n    Write a function to rotate an array of n elements to the right by k steps.\n    '''\n    for i in range(n):\n        arr.insert(0, arr.pop())\n    return arr\n    \ndef reverse_string(str1):\n    '''\n    Write a function that takes a string and returns a new string with the characters in \n    the reverse order.\n    '''\n    str1 = str1.strip('.,!?:;()\\'')\n    return str1[::-1]\n    \ndef reverse_vowels(str1):\n    '''\n    Write a function that takes a string and returns a new string with all the vowels \n    replaced with %%.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = ''\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            new_str += '%'\n        else:\n            new_str += str1[i]\n    return new_str\n    \ndef roman_to_int(str1):\n    '''\n    Write a function that takes a roman numeral as a string and returns the integer \n    value of the numeral.\n    '''\n    values = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    int_num = 0\n    \n    for i in range(len(str1)):\n        if i > 0 and values[str1[i]] > values[str1[i - 1]]:\n            int_num += values[str1[i]] - 2 * values[str1[i - 1]]\n        else:\n            int_num += values[str1[i]]\n    return int_num\n    \ndef is_isogram(str1):\n    '''\n    Write a function to check if a string is an isogram.\n    '''\n    str1 = str1.strip('.,!?:;()\\'')\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return False\n    return True\n    \ndef count_vowels(str1):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    cnt = 0\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            cnt += 1\n    return cnt\n    \ndef unique_characters(str1):\n    '''\n    Write a function to return the number of unique characters in a string.\n    '''\n    unique_chars = []\n    for i in range(len(str1)):\n        if str1[i] not in unique_chars:\n            unique_chars.append(str1[i])\n    return len(unique_chars)\n    \ndef is_unique(str1):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    str1 = str1.strip('.,!?:;()\\'')\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return False\n    return True\n    \ndef is_valid_parenthesis(str1):\n    '''\n    Write a function to check if a string is a valid parenthesis.\n    '''\n    stack = []\n    for i in range(len(str1)):\n        if str1[i] == '(' or str1[i] == '[' or str1[i] == '{':\n            stack.append(str1[i])\n        elif str1[i] == ')':\n            if len(stack) == 0 or stack.pop()!= '(':\n                return False\n        elif str1[i] == ']':\n            if len(stack) == 0 or stack.pop()!= '[':\n                return False\n        elif str1[i] == '}':\n            if len(stack) == 0 or stack.pop()!= '{':\n                return False\n    if len(stack) > 0:\n        return False\n    return True\n    \ndef word_search(mat, word):\n    '''\n    Write a function that takes in a two dimensional grid and a word, and that returns \n    whether the word can be found in the grid.\n    '''\n    for i in range(len(mat)):\n        for j in range(len(mat[i])):\n            if mat[i][j] == word[0]:\n                if word_search_rec(mat, word, i, j, 0):\n                    return True\n    return False\n    \ndef word_search_rec(mat, word, i, j, index):\n    '''\n    Write a function that takes in a two dimensional grid and a wor"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        if num % 2 == 0:\n            return False\n        for i in range(3, num, 2):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef radian_degree_exception(degree):\n    if degree < 0 or degree > 360:\n        raise ValueError('The angle value is not within the range of 0 to 360')\n    return degree * math.pi / 180\ndef test_radian_degree():\n    print '1 radian is {0:0.2f} degree'.format(radian_degree(1))\n    print '1 radian is {0:0.2f} degree'.format(radian_degree(360))\n    print '1 radian is {0:0.2f} degree'.format(radian_degree(-1))\n    print '1 radian is {0:0.2f} degree'.format(radian_degree(0))\n    print '1 radian is {0:0.2f} degree'.format(radian_degree(91))\n    print '1 radian is {0:0.2f} degree'.format(radian_degree(180))\n    print '1 radian is {0:0.2f} degree'.format(radian_degree(270))\n    try:\n        radian_degree_exception(361)\n    except ValueError as e:\n        print e\ndef angle_between_degrees(degree1, degree2):\n    '''\n    Write a function to determine the angle between two degrees.\n    The value returned is in radians, and is always between 0 and pi.\n    '''\n    return abs(radian_degree(degree1) - radian_degree(degree2))\ndef test_angle_between_degrees():\n    print '90 degree is {0:0.2f} radians'.format(angle_between_degrees(90, 0))\n    print '180 degree is {0:0.2f} radians'.format(angle_between_degrees(180, 90))\n    print '270 degree is {0:0.2f} radians'.format(angle_between_degrees(270, 90))\n    print '360 degree is {0:0.2f} radians'.format(angle_between_degrees(360, 90))\ndef get_angle_between_degrees(degree1, degree2):\n    if degree1 > 360:\n        degree1 = degree1 - 360\n    if degree2 > 360:\n        degree2 = degree2 - 360\n    if degree1 < 0:\n        degree1 = degree1 + 360\n    if degree2 < 0:\n        degree2 = degree2 + 360\n    return angle_between_degrees(degree1, degree2)\ndef test_get_angle_between_degrees():\n    print '360 degree is {0:0.2f} radians'.format(get_angle_between_degrees(360, 0))\n    print '270 degree is {0:0.2f} radians'.format(get_angle_between_degrees(270, 0))\n    print '180 degree is {0:0.2f} radians'.format(get_angle_between_degrees(180, 0))\n    print '90 degree is {0:0.2f} radians'.format(get_angle_between_degrees(90, 0))\n    print '-180 degree is {0:0.2f} radians'.format(get_angle_between_degrees(-180, 0))\n    print '-90 degree is {0:0.2f} radians'.format(get_angle_between_degrees(-90, 0))\ndef angle_between_radians(radian1, radian2):\n    return abs(radian1 - radian2)\ndef test_angle_between_radians():\n    print '90 radians is {0:0.2f} degrees'.format(angle_between_radians(math.pi / 2, 0))\n    print '180 radians is {0:0.2f} degrees'.format(angle_between_radians(math.pi, math.pi))\n    print '270 radians is {0:0.2f} degrees'.format(angle_between_radians(math.pi / 2, math.pi))\n    print '360 radians is {0:0.2f} degrees'.format(angle_between_radians(math.pi, 0))\ndef get_angle_between_radians(radian1, radian2):\n    return angle_between_radians(radian1, radian2)\ndef test_get_angle_between_radians():\n    print '180 radians is {0:0.2f} degrees'.format(get_angle_between_radians(math.pi, 0))\n    print '270 radians is {0:0.2f} degrees'.format(get_angle_between_radians(math.pi / 2, 0))\n    print '360 radians is {0:0.2f} degrees'.format(get_angle_between_radians(math.pi, 0))\n    print '90 radians is {0:0.2f} degrees'.format(get_angle_between_radians(math.pi / 2, 0))\n    print '-90 radians is {0:0.2f} degrees'.format(get_angle_between_radians(math.pi / 2, 0))\n    print '-180 radians is {0:0.2f} degrees'.format(get_angle_between_radians(math.pi / 2, 0))\n    print '-270 radians is {0:0.2f} degrees'.format(get_angle_between_radians(math.pi, 0))\ndef get_positive_angle_between_degrees(degree1, degree2):\n    if degree1 > 360:\n        degree1 = degree1 - 360\n    if degree2 > 360:\n        degree2 = degree2 - 360\n    if degree1 < 0:\n        degree1 = degree1 + 360\n    if degree2 < 0:\n        degree2 = degree2 + 360\n    return get_angle_between_degrees(degree1, degree2)\ndef test_get_positive_angle_between_degrees():\n    print '360 degree is {0:0.2f} radians'.format(get_positive_angle_between_degrees(360, 0))\n    print '270 degree is {0:0.2f} radians'.format(get_positive_angle_between_degrees(270, 0))\n    print '180 degree is {0:0.2f} radians'.format(get_positive_angle_between_degrees(180, 0))\n    print '90 degree is {0:0.2f} radians'.format(get_positive_angle_between_degrees(90, 0))\n    print '-90 degree is {0:0.2f} radians'.format(get_positive_angle_between_degrees(-90, 0))\n    print '-180 degree is {0:0.2f} radians'.format(get_positive_angle_between_degrees(-180, 0))\n    print '-270 degree is {0:0.2f} radians'.format(get_positive_angle_between_degrees(-270, 0))\ndef get_positive_angle_between_radians(radian1, radian2):\n    return abs(radian1 - radian2)\ndef test_get_positive_angle_between_radians():\n    print '90 radians is {0:0.2f} degrees'.format(get_positive_angle_between_radians(math.pi / 2, 0))\n    print '180 radians is {0:0.2f} degrees'.format(get_positive_angle_between_radians(math.pi, math.pi))\n    print '270 radians is {0:0.2f} degrees'.format(get_positive_angle_between_radians(math.pi / 2, math.pi))\n    print '360 radians is {0:0.2f} degrees'.format(get_positive_angle_between_radians(math.pi, 0))\n    print '90 radians is {0:0.2f} degrees'.format(get_positive_angle_between_radians(math.pi / 2, 0))\n    print '-90 radians is {0:0.2f} degrees'.format(get_positive_angle_between_radians(math.pi / 2, 0))\n    print '-180 radians is {0:0.2f} degrees'.format(get_positive_angle_between_radians(math.pi / 2, 0))\n    print '-270 radians is {0:0.2f} degrees'.format(get_positive"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\ndef make_transform(x, y, theta, scale = 1):\n    '''\n    Write a function to compute translation and rotation using the linear algebra system.\n    '''\n    return [[math.cos(theta), math.sin(theta), scale*x],\n            [-math.sin(theta), math.cos(theta), scale*y],\n            [0,0,1]]\ndef scale_transform(x, y, theta, scale = 1):\n    '''\n    Write a function to compute translation and rotation using the linear algebra system.\n    '''\n    return [[math.cos(theta), math.sin(theta), 0],\n            [-math.sin(theta), math.cos(theta), 0],\n            [0,0,1]]\ndef rotation_transform(theta, x = 0, y = 0):\n    '''\n    Write a function to compute translation and rotation using the linear algebra system.\n    '''\n    return [[math.cos(theta), math.sin(theta), 0],\n            [-math.sin(theta), math.cos(theta), 0],\n            [0,0,1]]\ndef apply_transform(transform, x, y):\n    '''\n    Write a function to apply the transform to a point.\n    '''\n    new_x = transform[0][0] * x + transform[0][1] * y + transform[0][2]\n    new_y = transform[1][0] * x + transform[1][1] * y + transform[1][2]\n    return [new_x, new_y]\ndef apply_transform_to_list(transform, points):\n    '''\n    Write a function to apply the transform to a list of points.\n    '''\n    new_points = []\n    for i in range(len(points)):\n        new_points.append(apply_transform(transform, points[i][0], points[i][1]))\n    return new_points\ndef get_polygon_edges(polygon):\n    '''\n    Write a function that gets the edges of a polygon.\n    '''\n    return [polygon[i] for i in range(len(polygon))]\ndef get_polygon_centroid(polygon):\n    '''\n    Write a function that gets the centroid of a polygon.\n    '''\n    polygon_edges = get_polygon_edges(polygon)\n    centroid = [0, 0]\n    for i in range(len(polygon_edges)):\n        centroid[0] += polygon_edges[i][0]\n        centroid[1] += polygon_edges[i][1]\n    return [centroid[0]/len(polygon_edges), centroid[1]/len(polygon_edges)]\ndef transform_point(transform, point, scale = 1):\n    '''\n    Write a function to apply a transform to a point.\n    '''\n    new_x = transform[0][0] * point[0] + transform[0][1] * point[1] + transform[0][2]\n    new_y = transform[1][0] * point[0] + transform[1][1] * point[1] + transform[1][2]\n    return [new_x, new_y]\ndef get_rotation_center(transform):\n    '''\n    Write a function to compute the rotation center of a transform.\n    '''\n    return [transform[0][0] + transform[1][0], transform[0][1] + transform[1][1]]\ndef get_rotation_matrix(transform):\n    '''\n    Write a function to compute the rotation matrix of a transform.\n    '''\n    return [[transform[0][0], transform[1][0]], [transform[0][1], transform[1][1]]]\ndef transform_rotation_matrix(transform):\n    '''\n    Write a function to compute the rotation matrix of a transform.\n    '''\n    return [[transform[0][0], transform[1][0]], [transform[0][1], transform[1][1]]]\ndef compute_rotation_angle(transform):\n    '''\n    Write a function to compute the rotation angle of a transform.\n    '''\n    return math.atan(transform[1][0]/transform[1][1])\ndef get_rotation_matrix_inverse(transform):\n    '''\n    Write a function to compute the rotation matrix inverse of a transform.\n    '''\n    rotation_matrix = get_rotation_matrix(transform)\n    return [[rotation_matrix[1][1], -rotation_matrix[0][1]], [-rotation_matrix[1][0], rotation_matrix[0][0]]]\ndef get_rotation_matrix_from_transform(transform):\n    '''\n    Write a function to compute the rotation matrix from a transform.\n    '''\n    return get_rotation_matrix_inverse(get_rotation_matrix(transform))\ndef transform_rotation_matrix_from_transform(transform):\n    '''\n    Write a function to compute the rotation matrix from a transform.\n    '''\n    return get_rotation_matrix_inverse(get_rotation_matrix(transform))\ndef apply_rotation(transform, point):\n    '''\n    Write a function to apply a rotation to a point.\n    '''\n    rotation_matrix = get_rotation_matrix(transform)\n    return [rotation_matrix[0][0] * point[0] + rotation_matrix[0][1] * point[1] + transform[0][2], rotation_matrix[1][0] * point[0] + rotation_matrix[1][1] * point[1] + transform[1][2]]\ndef transform_rotation_point(transform, point):\n    '''\n    Write a function to apply a rotation to a point.\n    '''\n    rotation_matrix = get_rotation_matrix(transform)\n    return [rotation_matrix[0][0] * point[0] + rotation_matrix[0][1] * point[1] + transform[0][2], rotation_matrix[1][0] * point[0] + rotation_matrix[1][1] * point[1] + transform[1][2]]\ndef rotate_transform(theta, transform = None):\n    '''\n    Write a function to rotate a transform by theta.\n    '''\n    if transform is None:\n        transform = [[0,0,1], [0,0,1]]\n    transform_matrix = get_rotation_matrix(transform)\n    new_transform = [transform_matrix[0][0] * math.cos(theta) - transform_matrix[0][1] * math.sin(theta) + transform[0][2], transform_matrix[0][0] * math.sin(theta) + transform_matrix[0][1] * math.cos(theta) + transform[0][2], transform_matrix[0][2]]\n    new_transform[1][0] = transform_matrix[1][0] * math.cos(theta) - transform_matrix[1][1] * math.sin(theta) + transform[1][2]\n    new_transform[1][1] = transform_matrix[1][0] * math.sin(theta) + transform_matrix[1][1] * math.cos(theta) + transform[1][2]\n    return new_transform\ndef transform_translate(translate, transform = None):\n    '''\n    Write a function to translate a transform by translate.\n    '''\n    if transform is None:\n        transform = [[0,0,1], [0,0,1]]\n    transform_matrix = get_rotation_matrix(transform)\n    new_transform = [transform_matrix[0][0] * translate[0] + transform_matrix[0][1] * translate[1] + transform[0][2], transform_matrix[1][0] * translate[0] + transform_matrix[1][1] * translate[1] + transform[1][2], transform_matrix[0][2]]\n    new_transform[1][0] = transform_matrix[1][0] * translate[0] + transform_matrix[1]"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_degree(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians*(180/math.pi)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_degree(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians*(180/math.pi)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to ra"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    pi = 3.14\n    return degree * (pi/180)\ndef radian_degree_list(degree_list):\n    '''\n    Write a function to convert degree_list to radian_list\n    '''\n    radian_list = []\n    for each_degree in degree_list:\n        radian_list.append(radian_degree(each_degree))\n    return radian_list\ndef to_radians(degree_list):\n    '''\n    Write a function to convert degree_list to radian_list\n    '''\n    radian_list = []\n    for each_degree in degree_list:\n        radian_list.append(radian_degree(each_degree))\n    return radian_list\ndef is_equal(r1, r2):\n    '''\n    Write a function to check if two radian are equal\n    '''\n    r1_radian = radian_degree(r1)\n    r2_radian = radian_degree(r2)\n    return r1_radian == r2_radian\ndef is_equal_list(r1, r2):\n    '''\n    Write a function to check if two radian are equal\n    '''\n    r1_radian = radian_degree_list(r1)\n    r2_radian = radian_degree_list(r2)\n    return r1_radian == r2_radian\ndef vector_modulus(v):\n    '''\n    Write a function to calculate vector modulus\n    '''\n    return math.sqrt(v[0]**2 + v[1]**2)\ndef vector_modulus_list(vector_list):\n    '''\n    Write a function to calculate vector modulus\n    '''\n    modulus_list = []\n    for each_vector in vector_list:\n        modulus_list.append(vector_modulus(each_vector))\n    return modulus_list\ndef dot_product(v1, v2):\n    '''\n    Write a function to calculate dot product\n    '''\n    return v1[0]*v2[0] + v1[1]*v2[1]\ndef vector_scalar_product(v1, v2):\n    '''\n    Write a function to calculate vector scalar product\n    '''\n    return v1[0]*v2[0] + v1[1]*v2[1]\ndef vector_scalar_product_list(v1, v2):\n    '''\n    Write a function to calculate vector scalar product\n    '''\n    scalar_product_list = []\n    for i in range(len(v1)):\n        scalar_product_list.append(vector_scalar_product(v1[i], v2[i]))\n    return scalar_product_list\ndef cross_product(v1, v2):\n    '''\n    Write a function to calculate cross product\n    '''\n    return v1[0]*v2[1] - v1[1]*v2[0]\ndef vector_normalization(v):\n    '''\n    Write a function to calculate vector normalization\n    '''\n    modulus = vector_modulus(v)\n    return [v[0]/modulus, v[1]/modulus]\ndef vector_normalization_list(vector_list):\n    '''\n    Write a function to calculate vector normalization\n    '''\n    normalization_list = []\n    for each_vector in vector_list:\n        normalization_list.append(vector_normalization(each_vector))\n    return normalization_list\ndef angle_between_two_vector(v1, v2):\n    '''\n    Write a function to calculate angle between two vector\n    '''\n    return math.acos(vector_scalar_product(v1, v2)/(vector_modulus(v1)*vector_modulus(v2)))\ndef angle_between_two_vector_list(v1, v2):\n    '''\n    Write a function to calculate angle between two vector\n    '''\n    angle_between_list = []\n    for i in range(len(v1)):\n        angle_between_list.append(angle_between_two_vector(v1[i], v2[i]))\n    return angle_between_list\ndef angle_between_vector_and_x_axis(v):\n    '''\n    Write a function to calculate angle between vector and x axis\n    '''\n    return math.pi - angle_between_two_vector(v, [1, 0])\ndef angle_between_vector_and_x_axis_list(vector_list):\n    '''\n    Write a function to calculate angle between vector and x axis\n    '''\n    angle_between_x_axis_list = []\n    for each_vector in vector_list:\n        angle_between_x_axis_list.append(angle_between_vector_and_x_axis(each_vector))\n    return angle_between_x_axis_list\ndef angle_between_vector_and_y_axis(v):\n    '''\n    Write a function to calculate angle between vector and y axis\n    '''\n    return angle_between_two_vector(v, [0, 1])\ndef angle_between_vector_and_y_axis_list(vector_list):\n    '''\n    Write a function to calculate angle between vector and y axis\n    '''\n    angle_between_y_axis_list = []\n    for each_vector in vector_list:\n        angle_between_y_axis_list.append(angle_between_vector_and_y_axis(each_vector))\n    return angle_between_y_axis_list\ndef angle_between_vector_and_z_axis(v):\n    '''\n    Write a function to calculate angle between vector and z axis\n    '''\n    return math.pi/2 - angle_between_two_vector(v, [0, 0, 1])\ndef angle_between_vector_and_z_axis_list(vector_list):\n    '''\n    Write a function to calculate angle between vector and z axis\n    '''\n    angle_between_z_axis_list = []\n    for each_vector in vector_list:\n        angle_between_z_axis_list.append(angle_between_vector_and_z_axis(each_vector))\n    return angle_between_z_axis_list\ndef rotate_x_axis(angle):\n    '''\n    Write a function to rotate x axis by angle\n    '''\n    return [math.cos(angle), -math.sin(angle)]\ndef rotate_x_axis_list(angle_list):\n    '''\n    Write a function to rotate x axis by angle\n    '''\n    rotate_x_axis_list = []\n    for each_angle in angle_list:\n        rotate_x_axis_list.append(rotate_x_axis(each_angle))\n    return rotate_x_axis_list\ndef rotate_y_axis(angle):\n    '''\n    Write a function to rotate y axis by angle\n    '''\n    return [math.sin(angle), math.cos(angle)]\ndef rotate_y_axis_list(angle_list):\n    '''\n    Write a function to rotate y axis by angle\n    '''\n    rotate_y_axis_list = []\n    for each_angle in angle_list:\n        rotate_y_axis_list.append(rotate_y_axis(each_angle))\n    return rotate_y_axis_list\ndef rotate_z_axis(angle):\n    '''\n    Write a function to rotate z axis by angle\n    '''\n    return [-math.sin(angle), math.cos(angle)]\ndef rotate_z_axis_list(angle_list):\n    '''\n    Write a function to rotate z axis by angle\n    '''\n    rotate_z_axis_list = []\n    for each_angle in angle_list:\n        rotate_z_axis_list.append(rotate_z_axis(each_angle))\n    return rotate_z_axis_list\ndef rotate_vector(rotate_axis, angle, v):\n    '''\n    Write a function to rotate vector by rotate axis and angle\n    '''\n    return [rotate_axis[0]*(v[0]*math.cos(angle) - v[1]*math.sin(angle)) + rotat"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return (math.pi * degree)/180\ndef radian_degrees(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return (180*radians)/math.pi\ndef cosine(radians):\n    '''\n    Write a function to find the value of cosine of an angle.\n    '''\n    return math.cos(radians)\ndef sine(radians):\n    '''\n    Write a function to find the value of sine of an angle.\n    '''\n    return math.sin(radians)\ndef tangent(radians):\n    '''\n    Write a function to find the value of tangent of an angle.\n    '''\n    return math.tan(radians)\ndef atan(radians):\n    '''\n    Write a function to find the value of atan of an angle.\n    '''\n    return math.atan(radians)\ndef degrees(radians):\n    '''\n    Write a function to find the value of radians in degrees.\n    '''\n    return (radians*180)/math.pi\ndef radians(degrees):\n    '''\n    Write a function to find the value of degrees in radians.\n    '''\n    return (degrees*math.pi)/180\ndef arc_tan(radians):\n    '''\n    Write a function to find the value of arc_tan of an angle.\n    '''\n    return math.atan(radians)\ndef distance(x1,y1,x2,y2):\n    '''\n    Write a function to find the distance between two points.\n    '''\n    return math.sqrt((x1-x2)**2+(y1-y2)**2)\ndef distance_two_points(point1,point2):\n    '''\n    Write a function to find the distance between two points.\n    '''\n    return math.sqrt((point1[0]-point2[0])**2+(point1[1]-point2[1])**2)\ndef distance_two_points_manual(point1,point2):\n    '''\n    Write a function to find the distance between two points.\n    '''\n    return math.sqrt((point1[0]-point2[0])**2+(point1[1]-point2[1])**2)\ndef distance_one_point_to_another(point1,point2):\n    '''\n    Write a function to find the distance between one point and another point.\n    '''\n    return math.sqrt((point1[0]-point2[0])**2+(point1[1]-point2[1])**2)\ndef distance_one_point_to_another_manual(point1,point2):\n    '''\n    Write a function to find the distance between one point and another point.\n    '''\n    return math.sqrt((point1[0]-point2[0])**2+(point1[1]-point2[1])**2)\ndef euclidean_distance(point1,point2):\n    '''\n    Write a function to find the Euclidean distance between two points.\n    '''\n    return math.sqrt((point1[0]-point2[0])**2+(point1[1]-point2[1])**2)\ndef euclidean_distance_manual(point1,point2):\n    '''\n    Write a function to find the Euclidean distance between two points.\n    '''\n    return math.sqrt((point1[0]-point2[0])**2+(point1[1]-point2[1])**2)\ndef slope(x1,y1,x2,y2):\n    '''\n    Write a function to find the slope of the line that connects two points.\n    '''\n    return (y2-y1)/(x2-x1)\ndef slope_manual(point1,point2):\n    '''\n    Write a function to find the slope of the line that connects two points.\n    '''\n    return (point2[1]-point1[1])/(point2[0]-point1[0])\ndef slope_one_point_to_another(point1,point2):\n    '''\n    Write a function to find the slope of the line that connects two points.\n    '''\n    return (point2[1]-point1[1])/(point2[0]-point1[0])\ndef slope_one_point_to_another_manual(point1,point2):\n    '''\n    Write a function to find the slope of the line that connects two points.\n    '''\n    return (point2[1]-point1[1])/(point2[0]-point1[0])\ndef dot_product(vector1,vector2):\n    '''\n    Write a function to find the dot product of two vectors.\n    '''\n    return vector1[0]*vector2[0] + vector1[1]*vector2[1]\ndef dot_product_manual(vector1,vector2):\n    '''\n    Write a function to find the dot product of two vectors.\n    '''\n    return vector1[0]*vector2[0] + vector1[1]*vector2[1]\ndef cross_product(vector1,vector2):\n    '''\n    Write a function to find the cross product of two vectors.\n    '''\n    return vector1[0]*vector2[1] - vector1[1]*vector2[0]\ndef cross_product_manual(vector1,vector2):\n    '''\n    Write a function to find the cross product of two vectors.\n    '''\n    return vector1[0]*vector2[1] - vector1[1]*vector2[0]\ndef angle_between(vector1,vector2):\n    '''\n    Write a function to find the angle between two vectors.\n    '''\n    vector1_magnitude = math.sqrt(vector1[0]**2 + vector1[1]**2)\n    vector2_magnitude = math.sqrt(vector2[0]**2 + vector2[1]**2)\n    dot_product_result = dot_product(vector1,vector2)\n    denominator = vector1_magnitude*vector2_magnitude\n    angle_in_radians = math.acos(dot_product_result/denominator)\n    return angle_in_radians\ndef angle_between_manual(vector1,vector2):\n    '''\n    Write a function to find the angle between two vectors.\n    '''\n    vector1_magnitude = math.sqrt(vector1[0]**2 + vector1[1]**2)\n    vector2_magnitude = math.sqrt(vector2[0]**2 + vector2[1]**2)\n    dot_product_result = dot_product(vector1,vector2)\n    denominator = vector1_magnitude*vector2_magnitude\n    angle_in_radians = math.acos(dot_product_result/denominator)\n    return angle_in_radians\ndef triangle_area(point1,point2,point3):\n    '''\n    Write a function to find the area of a triangle given three points.\n    '''\n    return abs(cross_product(point1,point2))/2\ndef triangle_area_manual(point1,point2,point3):\n    '''\n    Write a function to find the area of a triangle given three points.\n    '''\n    return abs(cross_product(point1,point2))/2\ndef triangle_perimeter(point1,point2,point3):\n    '''\n    Write a function to find the perimeter of a triangle given three points.\n    '''\n    return distance(point1[0],point1[1],point2[0],point2[1])+distance(point2[0],point2[1],point3[0],point3[1])+distance(point1[0],point1[1],point3[0],point3[1])\ndef triangle_perimeter_manual(point1,point2,point3):\n    '''\n    Write a function to find the perimeter of a triangle given three points.\n    '''\n    return distance(point1[0],point1[1],point2[0],point2[1])+distance(point2[0],point2[1],point3[0],point3[1])+distance(point1"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\ndef radian_degree_array(array):\n    return [radian_degree(deg) for deg in array]\ndef cartesian_to_polar(x, y):\n    '''\n    Write a function to convert cartesian to polar coordinates.\n    '''\n    r = math.sqrt(x**2+y**2)\n    theta = math.atan2(y,x)\n    return (r, theta)\ndef polar_to_cartesian(r, theta):\n    '''\n    Write a function to convert polar to cartesian coordinates.\n    '''\n    x = r*math.cos(theta)\n    y = r*math.sin(theta)\n    return (x, y)\ndef radian_deg_array_to_cartesian(rad_array,x0,y0):\n    '''\n    Write a function to convert radians to cartesian.\n    '''\n    return [cartesian_to_polar(x,y) for x,y in zip(rad_array,radian_deg_array(rad_array))]\ndef unit_vector(vector):\n    '''\n    Write a function to return the unit vector of a vector.\n    '''\n    return vector/numpy.linalg.norm(vector)\ndef angle_between(v1, v2):\n    '''\n    Write a function to return the angle in radians between vectors 'v1' and 'v2'\n    '''\n    v1_u = unit_vector(v1)\n    v2_u = unit_vector(v2)\n    return numpy.arccos(numpy.clip(numpy.dot(v1_u, v2_u), -1.0, 1.0))\ndef get_d(v1, v2):\n    '''\n    Write a function to return the angle in radians between vectors 'v1' and 'v2'\n    '''\n    v1_u = unit_vector(v1)\n    v2_u = unit_vector(v2)\n    return numpy.arccos(numpy.clip(numpy.dot(v1_u, v2_u), -1.0, 1.0))\ndef get_deg_d(v1, v2):\n    '''\n    Write a function to return the angle in degrees between vectors 'v1' and 'v2'\n    '''\n    return get_d(v1, v2)*180/math.pi\ndef get_tan(v1, v2):\n    '''\n    Write a function to return the angle in radians between vectors 'v1' and 'v2'\n    '''\n    v1_u = unit_vector(v1)\n    v2_u = unit_vector(v2)\n    return numpy.tan(numpy.arccos(numpy.clip(numpy.dot(v1_u, v2_u), -1.0, 1.0)))\ndef get_tan_deg(v1, v2):\n    '''\n    Write a function to return the angle in degrees between vectors 'v1' and 'v2'\n    '''\n    return get_tan(v1, v2)*180/math.pi\ndef get_angle(v1, v2):\n    '''\n    Write a function to return the angle in radians between vectors 'v1' and 'v2'\n    '''\n    v1_u = unit_vector(v1)\n    v2_u = unit_vector(v2)\n    return numpy.arccos(numpy.clip(numpy.dot(v1_u, v2_u), -1.0, 1.0))\ndef get_deg_angle(v1, v2):\n    '''\n    Write a function to return the angle in degrees between vectors 'v1' and 'v2'\n    '''\n    return get_angle(v1, v2)*180/math.pi\ndef get_theta(v1, v2):\n    '''\n    Write a function to return the angle in radians between vectors 'v1' and 'v2'\n    '''\n    v1_u = unit_vector(v1)\n    v2_u = unit_vector(v2)\n    return math.atan2(numpy.dot(v1_u,v2_u), numpy.dot(v1_u,v2_u))\ndef get_deg_theta(v1, v2):\n    '''\n    Write a function to return the angle in degrees between vectors 'v1' and 'v2'\n    '''\n    return get_theta(v1, v2)*180/math.pi\ndef get_angle_v(v1, v2):\n    '''\n    Write a function to return the angle in radians between vectors 'v1' and 'v2'\n    '''\n    v1_u = unit_vector(v1)\n    v2_u = unit_vector(v2)\n    return numpy.arccos(numpy.clip(numpy.dot(v1_u, v2_u), -1.0, 1.0))\ndef get_deg_angle_v(v1, v2):\n    '''\n    Write a function to return the angle in degrees between vectors 'v1' and 'v2'\n    '''\n    return get_angle_v(v1, v2)*180/math.pi\ndef get_dot(v1, v2):\n    '''\n    Write a function to return the dot product of vectors 'v1' and 'v2'\n    '''\n    v1_u = unit_vector(v1)\n    v2_u = unit_vector(v2)\n    return numpy.dot(v1_u, v2_u)\ndef get_prod(v1, v2):\n    '''\n    Write a function to return the dot product of vectors 'v1' and 'v2'\n    '''\n    v1_u = unit_vector(v1)\n    v2_u = unit_vector(v2)\n    return numpy.dot(v1_u, v2_u)\ndef get_cossim(v1, v2):\n    '''\n    Write a function to return the dot product of vectors 'v1' and 'v2'\n    '''\n    v1_u = unit_vector(v1)\n    v2_u = unit_vector(v2)\n    return numpy.dot(v1_u, v2_u)\ndef get_cos_deg_v(v1, v2):\n    '''\n    Write a function to return the dot product of vectors 'v1' and 'v2'\n    '''\n    return get_cos_deg(v1, v2)*180/math.pi\ndef get_cos_deg(v1, v2):\n    '''\n    Write a function to return the dot product of vectors 'v1' and 'v2'\n    '''\n    v1_u = unit_vector(v1)\n    v2_u = unit_vector(v2)\n    return numpy.dot(v1_u, v2_u)\ndef get_cos_sim(v1, v2):\n    '''\n    Write a function to return the dot product of vectors 'v1' and 'v2'\n    '''\n    v1_u = unit_vector(v1)\n    v2_u = unit_vector(v2)\n    return numpy.dot(v1_u, v2_u)\ndef get_cos_deg_array(v1, v2):\n    '''\n    Write a function to return the dot product of vectors 'v1' and 'v2'\n    '''\n    return [get_cos_deg(v1, v2) for v1, v2 in zip(v1, v2)]\ndef get_cos_deg_array_v(v1, v2):\n    '''\n    Write a function to return the dot product of vectors 'v1' and 'v2'\n    '''\n    return [get_cos_deg_v(v1, v2) for v1, v2 in zip(v1, v2)]\ndef get_cos_deg_array_v_np(v1, v2):\n    '''\n    Write a function to return the dot product of vectors 'v1' and 'v2'\n    '''\n    return numpy.array([ge"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * (math.pi/180)\n    return rad\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef degree_radian(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians*180/math.pi\ndef radian_radian(radians):\n    '''\n    Write a function to convert radians to radians.\n    '''\n    return radians\ndef radian_pi(radians):\n    '''\n    Write a function to convert radians to radians.\n    '''\n    return radians*(math.pi/180)\ndef degree_pi(degree):\n    '''\n    Write a function to convert radians to radians.\n    '''\n    return degree/180*math.pi\ndef pythagorean_triple(a,b,c):\n    '''\n    Write a function to generate pythagorean triples.\n    '''\n    pythagorean_triple=(math.sqrt(a**2+b**2-2*a*b*math.cos(math.radians(c))),math.sqrt(a**2+b**2+2*a*b*math.cos(math.radians(c))),math.sqrt(a**2-b**2+2*a*b*math.cos(math.radians(c))))\n    return pythagorean_triple\ndef pythagorean_hypotenuse(a,b):\n    '''\n    Write a function to calculate the hypotenuse of a right triangle.\n    '''\n    pythagorean_hypotenuse=(a**2+b**2)**0.5\n    return pythagorean_hypotenuse\ndef left_triangle(a,b):\n    '''\n    Write a function to calculate the hypotenuse of a right triangle.\n    '''\n    left_triangle=(a**2+b**2)**0.5\n    return left_triangle\ndef triangle_type(a,b,c):\n    '''\n    Write a function to determine the type of a triangle.\n    '''\n    if a == b == c:\n        return 'equilateral'\n    if a == b!= c or a == c!= b or b == c!= a:\n        return 'isosceles'\n    if a!= b!= c!= a:\n        return'scalene'\ndef area_of_triangle(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    area=(s*(s-a)*(s-b)*(s-c))**0.5\n    return area\ndef area_of_rectangle(a,b):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    area=(a*b)\n    return area\ndef area_of_triangle_heron(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    area=(s*(s-a)*(s-b)*(s-c))**0.5\n    return area\ndef area_of_quadrilateral(a,b,c,d):\n    '''\n    Write a function to calculate the area of a quadrilateral.\n    '''\n    area=(a*b+c*d)/2\n    return area\ndef area_of_circle(r):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    area=math.pi*(r**2)\n    return area\ndef area_of_ellipse(a,b):\n    '''\n    Write a function to calculate the area of an ellipse.\n    '''\n    area=(a*b*(math.pi/4))\n    return area\ndef side_of_circle(r):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    side=(r**2)*(math.pi)\n    return side\ndef side_of_rectangle(a,b):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    side=(a*b)\n    return side\ndef side_of_triangle(a,b,c):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    s=(a+b+c)/2\n    side=(s*(s-a)*(s-b)*(s-c))**0.5\n    return side\ndef side_of_triangle_heron(a,b,c):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    s=(a+b+c)/2\n    area=(s*(s-a)*(s-b)*(s-c))**0.5\n    return area\ndef volume_of_cylinder(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    volume=(math.pi*(r**2)*h)\n    return volume\ndef volume_of_cuboid(l,w,h):\n    '''\n    Write a function to calculate the volume of a cuboid.\n    '''\n    volume=(l*w*h)\n    return volume\ndef volume_of_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    volume=(4/3)*math.pi*(r**3)\n    return volume\ndef volume_of_sphere_cylinder(r,h):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    volume=(4/3)*math.pi*(r**3)*h\n    return volume\ndef volume_of_sphere_sphere(r,r2):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    volume=(4/3)*math.pi*(r**3)*(r2**3)\n    return volume\ndef volume_of_sphere_cube(r,d):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    volume=(4/3)*math.pi*(r**3)*(d**3)\n    return volume\ndef volume_of_sphere_cube_circle(r,d):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    volume=(4/3)*math.pi*(r**3)*(d**3)/3\n    return volume\ndef volume_of_cone(r,h):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    volume=(1/3)*math.pi*(r**2)*(h**3)\n    return volume\ndef volume_of_sphere_sphere_cylinder(r,r2,h):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    volume=(1/3)*math.pi*(r**2)*(r2**2)*h\n    return volume\ndef volume_of_sphere_cube_sphere(r,r2,h):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    volume=(1/3)*math.pi*(r**2)*(r2**3)*h\n    return volume\ndef volume_of_cylinder_cylinder(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    volume=(math.pi*(r**2)*h)\n    return volume\ndef volume_of_sphere_sphere_circle(r,r2,h):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    volume=(1/3)*math.pi*(r**2)*(r2**3)*h\n    return volume\ndef volume_of_sphere_cube_sphere(r,r2,h):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    volume=(1/3)*math.pi*(r**2)*(r2**3)*h\n    return volume\ndef volume_of_sphere_circle_cylinder(r,h):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    volume="
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # find the first occurrence of the pattern\n    index = text.find(pattern)\n    if index!= -1:\n        # find the end index of the pattern\n        index_end = index + len(pattern)\n        # return the substring, index and end index\n        return [text[index:index_end], index, index_end]\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return result.group(0)\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #return re.search(pattern, text).start(), re.search(pattern, text).end()\n    #res = re.search(pattern, text)\n    res = re.search(pattern, text)\n    if res:\n        return res.start(), res.end()\n    else:\n        return 0, 0\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start = 0\n    end = len(text)\n    while True:\n        match = re.search(pattern, text[start:end])\n        if match:\n            return text[start:end], match.start(), match.end()\n        start += 1\n        end += 1\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start = 0\n    while True:\n        start = pattern.search(text, start)\n        if start == -1:\n            return None, start, start\n        yield pattern.search(text, start)\n        start += 1\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    search_string = text\n    match_string = pattern\n    start_index = re.search(match_string, search_string)\n    return (match_string, start_index.start(), start_index.end())\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start_index = 0\n    end_index = -1\n    while True:\n        m = pattern.search(text, start_index)\n        if m is None:\n            return start_index, end_index\n        if m.start() > start_index:\n            start_index = m.start()\n        if m.end() > end_index:\n            end_index = m.end()\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    start = match.start()\n    end = match.end()\n    return (match.group(), start, end)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    #first, create list of numbers that are <= n\n    n_less_than_n = range(0,n+1)\n    #now, add the nth bell number\n    n_bell_number = 1\n    #then, add every other number to this list until you have n elements in the list\n    for x in range(0,n):\n        n_bell_number = n_bell_number + n_less_than_n[x]\n        #remove the first number in the list\n        n_less_than_n.pop(0)\n    return n_bell_number\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    if n < 0: \n        return \"Invalid Input\"\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return bell_Number_Iterative(n)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return (n*(n+1))//2\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_n = 1\n    for i in range(0, n):\n        bell_n = bell_n * (i + 1)\n    return bell_n\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # We will use itertools.chain to get the \n    # interleaved tuples of first and second numbers\n    # from an interleaved tuple of numbers\n    # using zip.\n    # An interleaved tuple is a sequence of numbers\n    # that are not necessarily consecutive\n    # The number of interleaved tuples is \n    # 2^n where n is the number of bits of \n    # n that we need to pick.\n    # The first interleaved tuple consists of \n    # the first number in the sequence and the \n    # second number.\n    # The second interleaved tuple consists of \n    # the second number and the first number.\n    # The next interleaved tuple is then made of \n    # the first number and the second number \n    # that are the second number and the second \n    # number in the first interleaved tuple.\n    # and so on.\n    # For example: (1,2,3,4) is made by interleaving \n    # (1,2), (2,3), (3,4)\n    # (1,2,3,4) is made by interleaving \n    # (1,2), (2,3), (3,4), (4,1)\n    # The first number of the interleaved tuple is \n    # the first number of the first interleaved tuple\n    # and so on\n    # Hint: Try to get the interleaved tuples in a list \n    # using zip and itertools.chain\n    # bell_numbers = \n    return 1\ndef allFactors(n): \n    '''\n    Write a python function to find all the factors of a number n\n    '''\n    # One way to do this is to use the sieve of Eratosthenes\n    # Another way is to use the lcm of two numbers\n    # For example,\n    # if n is 12 then\n    # 12 = 1 * 2 * 3 = 2 * 3 * 2 = 4 * 3 = 6\n    # the factors of 12 are 1, 2, 3, 4, 6, 12\n    # One way to find the factors of 12 is to use \n    # the lcm of the two numbers 12 and 6\n    # 6 = 2 * 3 = 3 * 3 = 9\n    # The factors of 12 are 1, 2, 3, 9\n    # Write a python function to find all the factors of n\n    # Hint: Use sieve of Eratosthenes\n    return []\ndef rFactors(n): \n    '''\n    Write a python function to find the prime factors \n    of a number n\n    '''\n    # Find all the factors of n using function allFactors\n    # The prime factors of n are the non-trivial factors of n\n    # The function will return a list of factors of n\n    # Hint: Use sieve of Eratosthenes\n    return []\ndef nth_Fibonacci(n): \n    '''\n    Write a python function to find nth fibonacci number\n    '''\n    # Fibonacci numbers are defined as follows\n    # 0 1 1 2 3 5 8 13\n    # In order to find nth fibonacci number, we will use \n    # the iterative formula for Fibonacci numbers\n    # nth_fib = (n - 1) * nth_fib - nth_fib - 1\n    # for example:\n    # if n = 4, then the nth fibonacci number is 5\n    # 4th_fib = 5 - 4 = 1\n    # 5th_fib = 5 - 4 - 1 = 2\n    # 6th_fib = 5 - 4 - 2 = 1\n    # The nth_fib is the nth Fibonacci number\n    return 1\ndef numberOfTriangles(n):\n    '''\n    Write a python function to find the number of triangles\n    '''\n    # Given n triangles and m sides each, the total number of triangles\n    # is n(n + 1)/2\n    # For example, if n = 2 then 2 triangles are made of \n    # the two sides (1,2), (2,3)\n    # and the total number of triangles is 2\n    # For example, if n = 4 then 4 triangles are made of \n    # the two sides (1,2), (2,3), (3,4), (4,1)\n    # and the total number of triangles is 4\n    return n*(n + 1)/2\ndef triangle_Number_List(n):\n    '''\n    Write a python function to find a list of the nth triangle number\n    '''\n    # Write a python function to find a list of the nth triangle number\n    # The first triangle number is 1\n    # The nth triangle number is the sum of first n natural numbers\n    # triangle_numbers = []\n    return []\ndef digitSum(n):\n    '''\n    Write a python function to find the sum of digits of a number\n    '''\n    # Write a python function to find the sum of digits of a number\n    # The sum of the digits of a number is the sum of the digits of n\n    # For example, if n = 12345, then the sum of the digits of n is \n    # 1 + 2 + 3 + 4 + 5 = 15\n    # If we want the sum of the digits of a number to be a natural number\n    # then we need to remove all the non-natural numbers from the number\n    # For example, if n = 1234567 then the sum of the digits of n is \n    # 1 + 2 + 3 + 4 + 5 + 6 = 28\n    # if we want to find the sum of digits of a number to be a natural number\n    # we remove all the non-natural numbers from the number\n    # For example, if n = 123456789 then the sum of the digits of n is \n    # 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45\n    # If we want to find the sum of digits of a number to be a natural number\n    # we remove all the non-natural numbers from the number\n    # For example, if n = 1234567890123456789 then the sum of the digits of n is \n    # 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 1 = 70\n    # if we want to find the sum of digits of a number to be a natural number\n    # we remove all the non-natural numbers from the number\n    # For example, if n = 123456789012345678901234567890123456789012345678901234567890\n    # then the sum of the digits of n is \n    # 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 1 = 136\n    return \ndef digit_Reverse(n):\n    '''\n    Write a python function to find the reverse of a number\n    '''\n    # Write a python function to find the reverse of a number\n    # The reverse of a number is the number in reverse order\n    # For example, if n = 12345, then the reverse of n is 54321\n    # If we want the reverse of a number to be a natural number\n    # we remove all the non-natural numbers from the number\n    # For example, if n = 123456789012345678901234567890123456789012345678901234567890\n    # then the reverse of n is 9876543210987654321098765432109876543210987654321098765432109876543210987654321\n    # If we want the reverse of a number to be a natural number\n    # we remove all the non-natural numbers from the number\n    # For example, if n = 123456789012345678901234567890123456789012345678901234567890\n    # then the reverse of n is 987654321098765432109876543210987654321098765432109876543210987654321\n    return \ndef digits_to_n(n):\n    '''\n    Write a python function to find the sum of digits of a number\n    '''\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    def factorial(n):\n        if n <= 1:\n            return 1\n        else:\n            return n*factorial(n-1)\n    \n    def formula(n,k):\n        return (factorial(n)//factorial(n-k))\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    #print(n)\n    if n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + n \n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n    \ndef Catalan_number(n):\n    '''\n    Write a python function to find nth Catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return Catalan_number(n-1) + Catalan_number(n-2)\n    \ndef Fibonacci_number(n):\n    '''\n    Write a python function to find nth Fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return Fibonacci_number(n-1) + Fibonacci_number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 1\n    elif n < 0:\n        return 0\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[L:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L]+list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L < 1:\n        return list1\n    if L > len(list1):\n        return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1 = [1, 2, 3, 4, 5, 6, 7]\n    L = 2\n    return [i for i in list1 if i!= list1[L]]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in xrange(L):\n        list1.remove(list1[i])\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L[1]\n    L.remove(k)\n    return L\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L]+list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # L = list1[-L]\n    # list1.remove(L)\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N > len(test_list) or len(test_list) < 1:\n        return None\n    max_val = test_list[0][N-1]\n    for row in test_list[1:]:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_list = []\n    \n    for list_ in test_list:\n        max_list.append(list_[N-1])\n        \n    return max_list\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) == 0:\n        return None\n    if len(test_list[0]) == 0:\n        return None\n    if len(test_list) < N:\n        raise ValueError(\"N is larger than the size of the list\")\n    return max([row[N - 1] for row in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([x[N] for x in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    n_list = []\n    for i in test_list:\n        n_list.append(i[N])\n    return max(n_list)\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([i[N] for i in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    list_max = []\n    \n    for i in range(0,len(test_list)):\n        list_max.append(test_list[i][N-1])\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([max(test_list[N])])\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_column = []\n    for row in test_list:\n        max_column.append(max(row[N-1::]))\n    return max_column\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_nth = []\n    for index in range(len(test_list)):\n        max_nth.append(max(test_list[index][N-1]))\n    return max_nth\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return list(zip(*lst))\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = [x[0] for x in lst]\n    merged += [x[1] for x in lst]\n    return merged\n    \n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [ [lst[i][0], lst[i][1]] for i in range(len(lst)) ]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return map(lambda x: [x[0],x[1]], zip(*lst))\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = [ ]\n    \n    for l in lst:\n        result.append( [ l[0], l[1] ] )\n    \n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    a = []\n    b = []\n    for x in lst:\n        a.append(x[0])\n        b.append(x[1])\n    return [a,b]\ndef swap_case(s):\n    '''\n    Write a python function, which takes a string and returns the string with all the upper case characters converted to lower case and all the lower case characters converted to upper case.\n    '''\n    return s.swapcase()\ndef square_number(n):\n    '''\n    Write a python function, which takes a number and returns the square of that number.\n    '''\n    return n**2\ndef count_letters(s):\n    '''\n    Write a python function, which takes a string and returns a dictionary with all the letters of the string as keys and the number of times each letter occurs as values.\n    '''\n    d = {}\n    for x in s:\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n    return d\ndef count_letters_dict(s):\n    '''\n    Write a python function, which takes a string and returns a dictionary with all the letters of the string as keys and the number of times each letter occurs as values.\n    '''\n    d = {}\n    for x in s:\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n    return d\ndef count_letters_items(s):\n    '''\n    Write a python function, which takes a string and returns a dictionary with all the letters of the string as keys and the number of times each letter occurs as values.\n    '''\n    d = {}\n    for x in s:\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n    return d.items()\ndef max_of_three(a,b,c):\n    '''\n    Write a python function, which takes three integers and returns the largest of them.\n    '''\n    return max(a,b,c)\ndef max_of_three_rec(a,b,c):\n    '''\n    Write a python function, which takes three integers and returns the largest of them.\n    '''\n    return max(a,b,c)\ndef max_of_three_rec_2(a,b,c):\n    '''\n    Write a python function, which takes three integers and returns the largest of them.\n    '''\n    return max(a,b,c)\ndef max_of_three_rec_3(a,b,c):\n    '''\n    Write a python function, which takes three integers and returns the largest of them.\n    '''\n    return max(a,b,c)\ndef max_of_three_rec_4(a,b,c):\n    '''\n    Write a python function, which takes three integers and returns the largest of them.\n    '''\n    return max(a,b,c)\ndef max_of_three_rec_5(a,b,c):\n    '''\n    Write a python function, which takes three integers and returns the largest of them.\n    '''\n    return max(a,b,c)\ndef max_of_three_rec_6(a,b,c):\n    '''\n    Write a python function, which takes three integers and returns the largest of them.\n    '''\n    return max(a,b,c)\ndef max_of_three_rec_7(a,b,c):\n    '''\n    Write a python function, which takes three integers and returns the largest of them.\n    '''\n    return max(a,b,c)\ndef max_of_three_rec_8(a,b,c):\n    '''\n    Write a python function, which takes three integers and returns the largest of them.\n    '''\n    return max(a,b,c)\ndef max_of_three_rec_9(a,b,c):\n    '''\n    Write a python function, which takes three integers and returns the largest of them.\n    '''\n    return max(a,b,c)\ndef max_of_three_rec_10(a,b,c):\n    '''\n    Write a python function, which takes three integers and returns the largest of them.\n    '''\n    return max(a,b,c)\ndef max_of_three_rec_11(a,b,c):\n    '''\n    Write a python function, which takes three integers and returns the largest of them.\n    '''\n    return max(a,b,c)\ndef max_of_three_rec_12(a,b,c):\n    '''\n    Write a python function, which takes three integers and returns the largest of them.\n    '''\n    return max(a,b,c)\ndef max_of_three_rec_13(a,b,c):\n    '''\n    Write a python function, which takes three integers and returns the largest of them.\n    '''\n    return max(a,b,c)\ndef max_of_three_rec_14(a,b,c):\n    '''\n    Write a python function, which takes three integers and returns the largest of them.\n    '''\n    return max(a,b,c)\ndef max_of_three_rec_15(a,b,c):\n    '''\n    Write a python function, which takes three integers and returns the largest of them.\n    '''\n    return max(a,b,c)\ndef max_of_three_rec_16(a,b,c):\n    '''\n    Write a python function, which takes three integers and returns the largest of them.\n    '''\n    return max(a,b,c)\ndef max_of_three_rec_17(a,b,c):\n    '''\n    Write a python function, which takes three integers and returns the largest of them.\n    '''\n    return max(a,b,c)\ndef max_of_three_rec_18(a,b,c):\n    '''\n    Write a python function, which takes three integers and returns the largest of them.\n    '''\n    return max(a,b,c)\ndef max_of_three_rec_19(a,b,c):\n    '''\n    Write a python function, which takes three integers and returns the largest of them.\n    '''\n    return max(a,b,c)\ndef max_of_three_rec_20(a,b,c):\n    '''\n    Write a python function, which takes three integers and returns the largest of them.\n    '''\n    return max(a,b,c)\ndef max_of_three_rec_21(a,b,c):\n    '''\n    Write a python function, which takes three integers and returns the largest of them.\n    '''\n    return max(a,b,c)\ndef max_of_three_rec_22(a,b,c):\n    '''\n    Write a python function, which takes three integers and returns the largest of them.\n    '''\n    return max(a,b,c)\ndef max_of_three_rec_23(a,b,c):\n    '''\n    Write a python function, which takes three integers and returns the largest of them.\n    '''\n    return max(a,b,c)\ndef max_of_three_rec_24(a,b,c):\n    '''\n    Write a python function, which takes three integers and returns the largest of them.\n    '''\n    return max(a,b,c)\ndef max_of_three_rec_25(a,b,c):\n    '''\n    Write a python function, which takes three integers and returns the largest of them.\n    '''\n    return max(a,b,c)\ndef max_of_three_rec_26(a,b,c):\n    '''\n    Write a python function, which takes three integers and returns the largest of them.\n    '''\n    return max(a,b,c)\ndef max_of_three_rec_27(a,b,c):\n    '''\n    Write a python function, which takes three integers and returns the largest of them.\n    '''\n    return max(a,b,c)\ndef max_of_three_rec_28(a"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[x[0],x[1]] for x in lst]\n    \ndef merge_sort(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) <= 1:\n        return lst\n    else:\n        mid = len(lst)/2\n        left = merge_sort(lst[:mid])\n        right = merge_sort(lst[mid:])\n        return merge(left + right)\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    ans = []\n    for i in lst:\n        ans.append([i[0], i[1]])\n    return ans\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    list_len = len(lst)\n    new_lst = [[lst[i][0], lst[i][1]] for i in range(list_len)]\n    return new_lst\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for value in test_list:\n        total_sum += value\n    return total_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum_list = []\n    cum_sum = 0\n    for i in test_list:\n        cum_sum = cum_sum + i\n        cum_sum_list.append(cum_sum)\n    return cum_sum_list\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = []\n    for i in test_list:\n        cum_sum.append(sum(i))\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    s = 0\n    cum_sum = []\n    for i in test_list:\n        s += i\n        cum_sum.append(s)\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = []\n    for i in range(0,len(test_list)):\n        cum_sum.append(0)\n    for i in range(0,len(test_list)):\n        for j in range(0,len(test_list)):\n            cum_sum[i] = cum_sum[i] + test_list[j]\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum_list = []\n    for x in test_list:\n        cummulative_sum_list.append(sum(x))\n    return cummulative_sum_list\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # print len(test_list)\n    # print range(1, len(test_list))\n    # print test_list[0:10]\n    # print test_list[0:10:2]\n    # print test_list[-10:]\n    # print test_list[-10:-5:-1]\n    # print sum(test_list)\n    # print sum(test_list[0:len(test_list)])\n    # print sum(test_list[:len(test_list)])\n    # print sum(test_list[:len(test_list)])\n    return sum(test_list[0:len(test_list)])\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # cumulative_sum = []\n    # for i in range(len(test_list)):\n    #     cumulative_sum.append(sum(test_list[:i+1]))\n    # return cumulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = []\n    cumulative_sum.append(test_list[0])\n    for i in range(1,len(test_list)):\n        cumulative_sum.append(cumulative_sum[i-1] + test_list[i])\n    return cumulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum_list = []\n    for i in range(len(test_list)):\n        cumulative_sum = sum(test_list[:i+1])\n        cumulative_sum_list.append(cumulative_sum)\n    return cumulative_sum_list\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = sum([sum(t) for t in nums])\n    return [(sum(t)) / len(nums) for t in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    lst = []\n    for i in nums:\n        lst.append(sum(i)/len(i))\n    return lst\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(e)/len(e) for e in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    length = len(nums)\n    avg_list = []\n    for i in range(length):\n        avg_list.append(sum(nums[i])/len(nums[i]))\n    return avg_list\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for index, value in enumerate(nums):\n        averages.append(float(sum(nums[index])/len(nums[index])))\n    return averages\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return map(lambda x: sum(x)/len(x), nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average = []\n    for i in nums:\n        sum = 0\n        for j in i:\n            sum += j\n        average.append(sum / len(i))\n    return average\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tuples in nums:\n        sum_nums = 0\n        for num in tuples:\n            sum_nums += num\n        result.append(sum_nums/len(tuples))\n    return result\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(sum(i)/len(i))\n    return result\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    \n    total = 0\n    for i in nums:\n        total += sum(i)\n    \n    return [total / len(nums)]\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([a % b for a, b in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Your code here\n    return zip(test_tup1, test_tup2)\n    \n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([tup1[i] % tup2[i] for i in range(len(tup1))])\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tuples must be the same length')\n    return tuple(x%y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return [(tup1[i] % tup2[i]) for i in range(len(tup1))]\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    test_tup_new = ()\n    for i in range(len(test_tup1)):\n        test_tup_new += (test_tup1[i] % test_tup2[i],)\n    return test_tup_new\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    mod_tup1 = []\n    mod_tup2 = []\n    \n    for i in range(len(test_tup1)):\n        mod_tup1.append(test_tup1[i]%test_tup2[i])\n    \n    return mod_tup1, mod_tup2\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    return (zip(*(a % b for a, b in zip(test_tup1, test_tup2))))\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    test_tup1_mod = []\n    test_tup2_mod = []\n    for element in range(len(test_tup1)):\n        test_tup1_mod.append(test_tup1[element] % test_tup2[element])\n        test_tup2_mod.append(test_tup2[element] % test_tup1[element])\n    return (test_tup1_mod, test_tup2_mod)\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([test_tup1[x] % test_tup2[x] for x in range(len(test_tup1))])\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0 or d == 0:\n        return 0\n    if steps == 1:\n        return 1\n    elif d == 1:\n        return steps\n    elif d == 2:\n        return 1 + min_Jumps(steps - 1, 1)\n    else:\n        return 1 + min_Jumps(steps - 1, 2)\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = [0] * (steps + 1)\n    for i in range(1, steps + 1):\n        jumps[i] = float('inf')\n        for j in range(1, i):\n            if i - j >= d and jumps[j] + 1 < jumps[i]:\n                jumps[i] = jumps[j] + 1\n    return jumps[steps]\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return steps\n    elif steps == 0:\n        return -1\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    l = len(steps)\n    if l == 1:\n        return abs(steps[0] - d)\n    if l == 2:\n        if steps[0] == d:\n            return abs(steps[1] - d)\n        else:\n            return abs(steps[1] - d) + 1\n    # The idea is to use BFS to reach all the possible points for a particular point, and check the difference in distance\n    visited = []\n    queue = []\n    queue.append([steps[0], 0])\n    visited.append(steps[0])\n    while queue:\n        x = queue[0]\n        queue.pop(0)\n        if x[0] == d:\n            return x[1]\n        if x[1] < l - 1:\n            if x[0] + steps[x[1] + 1] > d:\n                return x[1]\n            if x[0] + steps[x[1] + 1] not in visited:\n                visited.append(x[0] + steps[x[1] + 1])\n                queue.append([x[0] + steps[x[1] + 1], x[1] + 1])\n        if x[1] < len(steps) - 1:\n            if x[0] + steps[x[1] + 2] > d:\n                return x[1]\n            if x[0] + steps[x[1] + 2] not in visited:\n                visited.append(x[0] + steps[x[1] + 2])\n                queue.append([x[0] + steps[x[1] + 2], x[1] + 2])\n        if x[1] < len(steps) - 2:\n            if x[0] + steps[x[1] + 3] > d:\n                return x[1]\n            if x[0] + steps[x[1] + 3] not in visited:\n                visited.append(x[0] + steps[x[1] + 3])\n                queue.append([x[0] + steps[x[1] + 3], x[1] + 3])\n    return -1\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    def dfs(steps, d): \n        if (steps == 0): \n            return 0 \n        # visit all the next steps \n        for i in xrange(0, 4): \n            if (steps - d[0][i] >= 0): \n                d[1][i] = 1 + dfs(steps - d[0][i], d) \n        return 1 + min(d[1]) \n    \n    n = len(steps) \n    d = [[0]*4 for _ in xrange(n)] \n    d[0][steps[0]] = 1 \n    \n    return dfs(steps[-1], d) \n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Base Case: 0 or 1 steps in given direction\n    if d == 0 or d == 1:\n        return 1\n    \n    # d == 2 means move to origin\n    # We know we can reach origin from (2, 0) or (1, 0), so we can count 2 more steps from origin in all other directions\n    if d == 2:\n        return 2\n    \n    # In this case, we can reach the origin from (d-1, 0) in one step or (d-1, 1) in two steps\n    return 1 + min_Jumps(steps, d - 1) + min_Jumps(steps, d - 2)\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def recur(curr_idx, steps):\n        if steps == 0:\n            return True\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    n = len(steps)\n    table = [float('inf') for i in xrange(n + 1)]\n    table[0] = 0\n    for i in xrange(1, n + 1):\n        for j in xrange(i):\n            if steps[i - j - 1] + j >= d and steps[i - j - 1] + j < table[i]:\n                table[i] = steps[i - j - 1] + j\n    return table[n]\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    #return int(d == 0) or min_Jumps(steps-1, d-1) or min_Jumps(steps-2, d-2) or min_Jumps(steps-3, d-3)\n    \n    # this is the DP solution\n    # can be seen as the solution of the min-paths problem, but a slight modification in the objective function\n    # the min-paths problem is to find the minimum number of steps needed to reach the final point \n    # which means, the objective is to find the minimum number of steps required to reach the final point from a particular position\n    # the DP problem is to find the minimum number of steps required to reach the final point from a particular position\n    # so, the objective is to find the minimum number of steps to reach the final point, and the base condition is the min-paths problem\n    # we can write the objective function as the sum of the steps for all the jumps\n    # then we can go backwards to find the minimum number of steps to reach the final point\n    \n    dp = [0] * steps\n    dp[0] = 1\n    for i in xrange(steps):\n        for j in xrange(i):\n            if dp[j]!= 0:\n                dp[i] = min(dp[i], dp[j] + 1)\n    return dp[steps-1]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # base case\n    if d==0:\n        return 0\n    if steps<=1:\n        return -1\n    if d<0 or d>=steps:\n        return -1\n    # recursion\n    minimum_jumps = float('inf')\n    for j in range(1, steps):\n        temp = min_Jumps(steps, d-j)\n        if temp!=-1 and temp<minimum_jumps:\n            minimum_jumps = temp+1\n    return minimum_jumps\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div_lst = []\n    for i in range(len(nums1)):\n        div_lst.append(nums1[i] / nums2[i])\n    return div_lst\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div = []\n    for i in range(len(nums1)):\n        div.append(nums1[i] / nums2[i])\n    return div\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    r = []\n    for i in range(len(nums1)):\n        r.append(nums1[i] / nums2[i])\n    return r\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    num_list = []\n    for i in range(0,len(nums1)):\n        num_list.append(nums1[i]/nums2[i])\n    return num_list\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    res = []\n    for i in xrange(len(nums1)):\n        res.append(nums1[i] / nums2[i])\n    return res\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) > len(nums2):\n        nums1,nums2 = nums2,nums1\n    for i in xrange(len(nums1)):\n        nums1[i] = nums1[i]/nums2[i]\n    return nums1\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    assert len(nums1)==len(nums2)\n    result=[]\n    for i in xrange(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result=[]\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i]/=nums2[i]\n    return nums1\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    assert type(nums1) == list\n    assert type(nums2) == list\n    if len(nums1)!= len(nums2):\n        raise ValueError('input lists of different length')\n    return [nums1[i]/nums2[i] for i in range(len(nums1))]\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = re.findall(r'\\d+', test_str)\n    return ''.join(nums + list(set(test_str) - set(nums)))\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] not in '0123456789':\n            test_str = test_str[:i] + test_str[i+1:]\n            count += 1\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    string_list = list(test_str)\n    print string_list\n    string_list.sort(reverse = True)\n    print string_list\n    if string_list[0] == '0':\n        string_list.remove('0')\n    new_str = ''.join(string_list)\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            count = count + 1\n    index = len(test_str) - count\n    for i in range(index,len(test_str)):\n        test_str[i] = test_str[i] + test_str[i-index]\n        test_str[i-index] =''\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join(reversed([x for x in test_str if x.isdigit()]))\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    #keeps track of where the numbers are\n    num_pos = []\n    #counter\n    count = 0\n    #counts how many numbers are there\n    for i in range(len(test_str)):\n        #counts how many times the string is repeated\n        if test_str[i] in num_pos:\n            #if the string is repeated, it will be added to the end of the list\n            count += 1\n        else:\n            #if the string is not repeated, it will not be added to the end of the list\n            num_pos.append(test_str[i])\n    #the new string is made up of the repeated string and the numbers, since the repeated string\n    #will always be the first item in the list\n    new_string = test_str * count + ''.join(num_pos)\n    return new_string\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    #define a function to return the non-numbers from the string\n    def non_num_str(test_str):\n        non_num_list = []\n        for i in test_str:\n            if i.isdigit():\n                pass\n            else:\n                non_num_list.append(i)\n        return ''.join(non_num_list)\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    for i in test_str:\n        if i.isdigit():\n            return test_str[:test_str.index(i)] + test_str[test_str.index(i) + 1:] + i\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    res = []\n    for i in test_str:\n        if i.isdigit():\n            res.append(i)\n    return ''.join(res + sorted(list(set(test_str) - set(res))))\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if not test_str:\n        return ''\n    digit_list = []\n    for c in test_str:\n        if c in '0123456789':\n            digit_list.append(c)\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 0:\n        return 0\n    s = {a[0]:1}\n    l = len(a)\n    for i in xrange(1,len(a)):\n        if a[i]%a[i-1]!= 0:\n            s[a[i]] = 1\n        else:\n            s[a[i]] = s[a[i-1]] + 1\n    return max(s.values())\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def divisible(a, b):\n        '''\n        Return whether or not a and b are divisible.\n        '''\n        return not(a % b)\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) <= 1:\n        return len(a)\n    max_length = 0\n    for i in range(len(a)):\n        max_length = max(max_length, largest_subset(a[i+1:]))\n    if len(a) % 2 == 0:\n        return max(max_length, len(a)-max_length)\n    else:\n        return max_length + 1\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # a = [7,6,3,4,5,6,9,8]\n    # print(largest_subset(a))\n    \n    \n    # if a == None or len(a) <= 0:\n    #     return 0\n    # return largest_subset(a[1:]) + 1 if max(a) % min(a) == 0 else largest_subset(a[1:])\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if not a:\n        return 0\n    best = 0\n    i = 1\n    while i < len(a):\n        best = max(best, largest_subset(a[:i]) + largest_subset(a[i:]))\n        i += 1\n    return max(best, 1)\n    \nprint(largest_subset([2,3,4,6,7,8,10]))\nprint(largest_subset([2,3,4,6,7,8,10,14]))\nprint(largest_subset([2,3,4,6,7,8,10,14,16]))\nprint(largest_subset([1,2,3,4,5,6]))\nprint(largest_subset([1,2,3,4,5,6,7]))\nprint(largest_subset([1,2,3,4,5,6,7,8]))\nprint(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,14]))\nprint(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,14,16]))\nprint(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,14,16,17]))\nprint(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,14,16,17,18]))\nprint(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,14,16,17,18,19]))\nprint(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,14,16,17,18,19,20]))\nprint(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,14,16,17,18,19,20,21]))\nprint(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,14,16,17,18,19,20,21,22]))\nprint(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23]))\nprint(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24]))\nprint(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25]))\nprint(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26]))\nprint(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,27]))\nprint(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,27,28]))\nprint(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29]))\nprint(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]))\nprint(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]))\nprint(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]))\nprint(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]))\nprint(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]))\nprint(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]))\nprint(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]))\nprint(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]))\nprint(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]))\nprint(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39]))\nprint(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]))\nprint(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41]))\nprint(largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42]))\nprint(largest_subset([1,2,3,4,5,"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if not a:\n        return []\n    elif len(a) == 1:\n        return a\n    else:\n        n = len(a)\n        max_size = 0\n        max_subset = []\n        for i in xrange(0, n):\n            for j in xrange(i + 1, n):\n                if a[i] % a[j] == 0:\n                    subset = [a[i], a[j]]\n                    if len(subset) > max_size:\n                        max_size = len(subset)\n                        max_subset = subset\n        return max_subset\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    l = []\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if a[i] % a[j] == 0:\n                l.append((a[i] / a[j], a[j]))\n    s = 0\n    for i in l:\n        s += i[0]\n    print(s)\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    if len(a) == 0:\n        return 0\n    \n    s = [1 for i in a]\n    s[0] = 0\n    \n    for i in range(1,len(a)):\n        for j in range(i):\n            if a[j] <= a[i] and s[i] < s[j] + 1:\n                s[i] = s[j] + 1\n    \n    return max(s)\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) < 2:\n        return len(a)\n    min = a[0]\n    max = len(a) - 1\n    subsets = 0\n    while min < max:\n        if a[min] % a[max] == 0:\n            subsets += 1\n            max -= 1\n        else:\n            min += 1\n    return subsets\n    \ndef max_subset(a):\n    if len(a) < 2:\n        return len(a)\n    max = 1\n    for i in range(len(a)-1):\n        max = max + 1\n        for j in range(len(a)-1-i):\n            if a[j] > a[j+1]:\n                a[j], a[j+1] = a[j+1], a[j]\n    return max\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    if n == 1:\n        return 1\n    elif n == 2:\n        if a[0] % a[1] == 0:\n            return 2\n        else:\n            return 1\n    else:\n        div = a[0]\n        first = 1\n        if div % a[1] == 0:\n            first = 2\n        for i in xrange(1, n - 1):\n            if div % a[i + 1] == 0:\n                first += 1\n        if div % a[n - 1] == 0:\n            first += 1\n        return first\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    median = 0\n    if n%2 == 0:\n        median = (arr1[n//2] + arr2[n//2])/2\n    elif n%2!= 0:\n        median = arr1[n//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    a1 = arr1[n // 2]\n    a2 = arr2[n // 2]\n    if a1 > a2:\n        return a2\n    elif a1 < a2:\n        return a1\n    elif n % 2 == 0:\n        return (a1 + a2) / 2\n    else:\n        return a1\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return int((arr1[0] + arr2[0])/2)\n    mid1 = int(n/2)\n    mid2 = mid1+1\n    if arr1[mid1] > arr2[mid2]:\n        return get_median(arr1, arr2[mid2:], mid2-mid1)\n    else:\n        return get_median(arr1[mid1:], arr2, mid2-mid1)\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return (arr1[n/2]+arr2[n/2])/2\n    else:\n        return arr1[n/2]\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n==1:\n        return (arr1[0]+arr2[0])/2\n    if n==2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1]))/2\n    x=int(n/2)\n    y=n-(x*2)\n    if x==y:\n        return get_median(arr1[:x], arr2[:x], x)\n    elif x>y:\n        return get_median(arr1, arr2[x:], y)\n    elif x<y:\n        return get_median(arr1[x:], arr2, y)\n    else:\n        return 0\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return (arr1[int(n / 2)] + arr2[int(n / 2)]) / 2\n    else:\n        return arr1[int((n - 1) / 2)]\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    for i in xrange(n):\n        arr1[i], arr2[i] = arr2[i], arr1[i]\n    \n    median = 0\n    if n%2 == 0:\n        median = (arr1[int(n/2)]+arr1[int(n/2)-1])/2.0\n    else:\n        median = arr1[int((n-1)/2)]\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) < len(arr2):\n        return get_median(arr2, arr1, n)\n    \n    i, j = 0, 0\n    while j < len(arr1) and i < len(arr2):\n        if arr1[j] < arr2[i]:\n            j += 1\n        elif arr1[j] > arr2[i]:\n            i += 1\n        else:\n            return arr1[j]\n    if i < len(arr2):\n        return arr2[i]\n    if j < len(arr1):\n        return arr1[j]\n    return -1\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = []\n    for i in range(n):\n        arr.append(arr1[i] + arr2[i])\n    \n    arr = sorted(arr)\n    \n    if (n % 2 == 0):\n        return (arr[n/2] + arr[(n-1)/2]) / 2\n    else:\n        return arr[n/2]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [nums[i]**n for i in range(len(nums))]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i]=nums[i]**n\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nth = []\n    for i in nums:\n        nth.append(i**n)\n    return nth\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums_power = []\n    for i in nums:\n        nums_power.append(i**n)\n    return nums_power\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i]=nums[i]**n\n    return nums\n    \n    \n    \n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n == 1:\n        for num in nums:\n            yield num ** n\n    else:\n        for i,num in enumerate(nums):\n            for j in nth_nums(nums[i+1:],n-1):\n                yield num ** j\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power_nums = []\n    for num in nums:\n        power_nums.append(num ** n)\n    return power_nums\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    num_list = []\n    for num in nums:\n        num_list.append(num**n)\n    return num_list\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i ** n)\n    return result\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if not string:\n        return True\n    if not isinstance(string,str):\n        return False\n    return string.isupper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string[0].isupper():\n        return string\n    return string[0].upper() + string[1:]\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper():\n        return True\n    return False\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    firstElement = newList[0]\n    lastElement = newList[-1]\n    newList[-1] = firstElement\n    newList[0] = lastElement\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    return newList[-1:] + newList[1:-1] + newList[:1]\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    return newList[-1:] + newList[1:-1] + newList[:1]\n    \n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    newList.append(newList[0])\n    del newList[0]\n    newList.insert(0, newList[-1])\n    del newList[-1]\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList)<2:\n        return newList\n    else:\n        newList[0],newList[-1]=newList[-1],newList[0]\n        return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    temp = newList[0]\n    newList[0] = newList[length-1]\n    newList[length-1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    newList[0], newList[-1] = newList[-1], newList[0]\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (3 * math.pi * r**2) / 2\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    A = math.pi * r**2 / 4\n    return A\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return 3*(r**2)/4\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # we can solve for the area by using the formula \n    # A = (2*r*sin(a/2))/tan(a/2)\n    # a is the angle of the triangle\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (3*math.sqrt(2)*r**2) / 4 \n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = math.pi * r**2 /4\n    return area\n    \ndef compute_area_of_inscribed_circle(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = (math.pi * r**2) /4\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    h = math.sqrt(3) * r\n    area = (h*h)/4\n    return area\n    \n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return math.pi*r*r/4\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (3*r**2)/4.0\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return 3*r*r*pi/4\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end = len(array)-1\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start==end:\n        return start\n    mid=(start+end)//2\n    if array[mid]!=mid and array[mid]!=mid+1:\n        return mid\n    if array[mid]==mid:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start>=end:\n        return start\n    mid=int(start+end/2)\n    if mid>end:\n        return find_First_Missing(array,start,mid)\n    if array[mid]!=mid+1:\n        return mid+1\n    else:\n        return find_First_Missing(array,mid+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n    if start > end:\n        return 0\n    mid = int((end - start)/2) + start\n    if mid == end:\n        return mid + 1\n    if array[mid] == mid:\n        return find_First_Missing(array,mid+1,end)\n    return find_First_Missing(array,start,mid-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if array[start]!=start+1:\n        return start+1\n    elif array[end]!=end+1:\n        return end+1\n    else:\n        return find_First_Missing(array,start+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start > end:\n        return -1\n    if end - start == 1:\n        return start + 1\n    mid = (start + end) // 2\n    if array[mid] == mid:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return min(find_First_Missing(array,start,mid),find_First_Missing(array,mid,end))\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if end<=start:\n        return 1\n    if array[start]==array[end-1]:\n        return find_First_Missing(array,start+1,end)\n    return array[start]+(find_First_Missing(array,start+1,end) - array[start])\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)-1\n    if start>=end:\n        return start\n    if array[start]==start:\n        return find_First_Missing(array, start+1, end)\n    else:\n        return find_First_Missing(array, start+1, end)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # We are finding the first missing number in a sorted list of numbers\n    # Assume that we have an array of length n where all elements of the array are integers between 1 and n\n    # Start the traversal from the beginning of the array\n    # For each element, check if it is in the array, if not, return it\n    # Repeat the process until the traversal ends.\n    # The time complexity is O(n)\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    result = []\n    for c in string:\n        if c =='':\n            result.append('%20')\n        else:\n            result.append(c)\n    return ''.join(result)\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \",\"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    \n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return ''.join(string.split())\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \",\"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    # list = [1,2,3,4,5,6,7,8,9]\n    print \"A list of numbers:\"\n    for each in list:\n        print each\n    even_list = []\n    for each in list:\n        if each % 2 == 0:\n            even_list.append(each)\n    print \"Even numbers from the list:\"\n    for each in even_list:\n        print each\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [i for i in list if i%2==0]\n    \n    \ndef FindMean(list):\n    '''\n    Write a python function to find the mean of the list of numbers.\n    '''\n    return sum(list)/len(list)\n    \ndef FindStandardDeviation(list):\n    '''\n    Write a python function to find the standard deviation of the list of numbers.\n    '''\n    list_mean = FindMean(list)\n    sum_dev = 0\n    for i in list:\n        sum_dev += (i - list_mean)**2\n    return sqrt(sum_dev / len(list))\n    \ndef FindVariance(list):\n    '''\n    Write a python function to find the variance of the list of numbers.\n    '''\n    list_mean = FindMean(list)\n    sum_dev = 0\n    for i in list:\n        sum_dev += (i - list_mean)**2\n    return sum_dev / len(list)\n    \ndef FindMedian(list):\n    '''\n    Write a python function to find the median of the list of numbers.\n    '''\n    list.sort()\n    return list[len(list)//2]\n    \ndef FindInterquartile(list):\n    '''\n    Write a python function to find the interquartile of the list of numbers.\n    '''\n    list.sort()\n    return list[(len(list)//2)+1]\n    \ndef FindMode(list):\n    '''\n    Write a python function to find the mode of the list of numbers.\n    '''\n    mode = 0\n    counter = 0\n    for i in list:\n        if list.count(i) > counter:\n            counter = list.count(i)\n            mode = i\n    return mode\n    \ndef FindRange(list):\n    '''\n    Write a python function to find the range of the list of numbers.\n    '''\n    return max(list) - min(list)\n    \ndef FindIntersection(list1, list2):\n    '''\n    Write a python function to find the intersection of two lists.\n    '''\n    return [i for i in list1 if i in list2]\n    \ndef FindUnion(list1, list2):\n    '''\n    Write a python function to find the union of two lists.\n    '''\n    return list(set(list1).union(set(list2)))\n    \ndef FindDifference(list1, list2):\n    '''\n    Write a python function to find the difference of two lists.\n    '''\n    return list(set(list1).difference(set(list2)))\n    \ndef FindCommonElement(list1, list2):\n    '''\n    Write a python function to find the common elements of two lists.\n    '''\n    return list(set(list1).intersection(set(list2)))\n    \ndef FindProportion(list1, list2):\n    '''\n    Write a python function to find the proportion of two lists.\n    '''\n    return len(FindCommonElement(list1, list2)) / len(list2)\n    \ndef FindProportions(list1, list2):\n    '''\n    Write a python function to find the proportions of two lists.\n    '''\n    proportions = []\n    for i in list2:\n        proportions.append(FindProportion(list1, i))\n    return proportions\n    \ndef PrintResult(list):\n    '''\n    Write a python function to print a list of results to the console.\n    '''\n    print(list)\n    \ndef PrintResults(list):\n    '''\n    Write a python function to print a list of results to the console.\n    '''\n    print(list)\n    \ndef FindDispersion(list1, list2):\n    '''\n    Write a python function to find the dispersion of two lists.\n    '''\n    return FindInterquartile(list1) - FindInterquartile(list2)\n    \ndef FindQuartiles(list):\n    '''\n    Write a python function to find the quartiles of a list of numbers.\n    '''\n    list.sort()\n    if len(list) % 2 == 0:\n        return [list[len(list)//2], list[len(list)//2-1]]\n    else:\n        return [list[len(list)//2], list[len(list)//2]]\n        \ndef FindMeanMedianMode(list):\n    '''\n    Write a python function to find the mean, median and mode of a list of numbers.\n    '''\n    list.sort()\n    if len(list) % 2 == 0:\n        return [FindMean(list), FindMedian(list), FindMode(list)]\n    else:\n        return [FindMean(list), FindMedian(list), list[len(list)//2]]\n    \ndef FindCovariance(list1, list2):\n    '''\n    Write a python function to find the covariance of two lists.\n    '''\n    list1.sort()\n    list2.sort()\n    return FindMean(list1) - FindMean(list2)\n    \ndef FindCorrelation(list1, list2):\n    '''\n    Write a python function to find the correlation of two lists.\n    '''\n    list1.sort()\n    list2.sort()\n    mean1 = FindMean(list1)\n    mean2 = FindMean(list2)\n    return FindCovariance(list1, list2) / FindStandardDeviation(list1) / FindStandardDeviation(list2)\n    \ndef FindCohenD(list1, list2):\n    '''\n    Write a python function to find the cohen's d of two lists.\n    '''\n    list1.sort()\n    list2.sort()\n    return FindMean(list1) - FindMean(list2)\n    \ndef FindFlexibility(list1, list2):\n    '''\n    Write a python function to find the flexibility of two lists.\n    '''\n    list1.sort()\n    list2.sort()\n    return FindDispersion(list1, list2) / FindStandardDeviation(list1)\n    \ndef FindExponentiallyDistributed(list):\n    '''\n    Write a python function to find the exponentially distributed function of a list of numbers.\n    '''\n    return len(list) / (1 - (FindMean(list) / FindStandardDeviation(list)))\n    \ndef FindBoxplot(list):\n    '''\n    Write a python function to find the boxplot of a list of numbers.\n    '''\n    list.sort()\n    list.reverse()\n    q1 = FindQuartiles(list)[0]\n    q3 = FindQuartiles(list)[1]\n    iqr = q3 - q1\n    return [q1 - 1.5 * iqr, q3 + 1.5 * iqr]\n    \ndef FindInterquartileRange(list):\n    '''\n    Write a python function to find the interquartile range of a list of numbers.\n    '''\n    list.sort()\n    return FindInterquartile(list) - FindInterquartile(list)[0]\n    \ndef FindSkewness(list):\n    '''\n    Write a python function to find the skewness of a list of numbers.\n    '''\n    return 3 * FindInterquartile(list) / FindStandardDeviation(list)**3\n    \ndef FindKurtosis(list):\n    '''\n    Write a python function to find the kurtosis of a list of numbers.\n    '''\n    return 3 * FindStandardDeviation(list)**4 / len(list)**2\n    \ndef FindSkewnessMedian(list):\n    '''\n    Write a python function to find the skewness of a list of numbers.\n    '''\n    list.sort()\n    list.reverse()\n    q1 = FindQuartiles(list)[0]\n    q3 = FindQuartiles(list)[1]\n    iqr = q3 - q1\n    return FindMean(list) - FindInterquartile(list)\n    \ndef FindKurtosisMedian(list):\n    '''\n    Write a python function to find the kurtosis of a list of numbers.\n    '''\n    list.sort()\n    list.reverse()\n    q1 = FindQuartile"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for number in list:\n        if number % 2 == 0:\n            even_list.append(number)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_num = []\n    for num in list:\n        if num%2 == 0:\n            even_num.append(num)\n    print even_num\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list1 = []\n    list2 = []\n    for i in list:\n        if i%2==0:\n            list1.append(i)\n        else:\n            list2.append(i)\n    return [list1,list2]\ndef Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list1 = []\n    list2 = []\n    for i in list:\n        if i%2==0:\n            list1.append(i)\n        else:\n            list2.append(i)\n    return [list1,list2]\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for i in range(0, len(list)):\n        if list[i] % 2 == 0:\n            evens.append(list[i])\n    return evens\n    \ndef main():\n    mylist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    print(Split(mylist))\n    \nmain()"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list2 = []\n    for item in list: \n        if item % 2 == 0: \n            list2.append(item)\n    return list2\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [i for i in list if i%2==0]\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    # Make a new list to store the even numbers\n    list_even = []\n    # Iterate over the list\n    for i in list:\n        # Check if the number is even\n        if i % 2 == 0:\n            # Add the number to the even list\n            list_even.append(i)\n    # Return the list\n    return list_even\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    # list = []\n    # for i in range(1,101):\n    #     if i%2 == 0:\n    #         list.append(i)\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x = ele[0]\n    y = ele[1]\n    return [(x + 1, y), (x - 1, y), (x, y + 1), (x, y - 1)]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x,y = ele\n    adj = [(x+1,y),(x,y+1),(x-1,y),(x,y-1)]\n    \n    if sub: \n        new_sub = []\n        for ele in sub: \n            for pair in adj:\n                new_sub.append(pair)\n        return new_sub\n    return adj\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # print(ele)\n    if type(ele)!= tuple:\n        return []\n    if len(ele) == 1:\n        return [ele]\n    return [ele[0] - ele[1], ele[0] + ele[1]]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    if isinstance(ele, tuple):\n        if len(ele) == 2:\n            return sub + [tuple(list(ele) + [0]), tuple(list(ele) + [1])]\n        if len(ele) == 3:\n            return sub + [tuple(list(ele) + [0,0])]\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append(ele)\n    if len(sub) > 1: \n        print sub[-2],\n    return [sub[-2][0]-1, sub[-2][1]-1, sub[-2][0]+1, sub[-2][1]+1]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for i in range(len(ele)): \n        if i!= 0: \n            new = ele[:i] + ele[i + 1:]\n            sub.append(new)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(ele) == 1: \n        return sub \n    else: \n        adj = [ele[1], ele[0], ele[2], ele[3]]\n        return adjac(adj, sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for i in range(len(ele)):\n        for j in range(len(ele[i])):\n            if i == 0:\n                if j == 0:\n                    sub.append((ele[i][j+1], ele[i+1][j], ele[i+1][j+1]))\n                elif j == len(ele[i]) - 1:\n                    sub.append((ele[i][j-1], ele[i+1][j-1], ele[i+1][j]))\n                else:\n                    sub.append((ele[i][j-1], ele[i+1][j-1], ele[i+1][j], ele[i+1][j+1]))\n            elif i == len(ele) - 1:\n                if j == 0:\n                    sub.append((ele[i][j+1], ele[i-1][j], ele[i-1][j+1]))\n                elif j == len(ele[i]) - 1:\n                    sub.append((ele[i][j-1], ele[i-1][j-1], ele[i-1][j]))\n                else:\n                    sub.append((ele[i][j-1], ele[i-1][j-1], ele[i-1][j], ele[i-1][j+1]))\n            else:\n                if j == 0:\n                    sub.append((ele[i][j+1], ele[i-1][j], ele[i-1][j+1], ele[i+1][j], ele[i+1][j+1]))\n                elif j == len(ele[i]) - 1:\n                    sub.append((ele[i][j-1], ele[i-1][j-1], ele[i-1][j], ele[i+1][j-1], ele[i+1][j]))\n                else:\n                    sub.append((ele[i][j-1], ele[i-1][j-1], ele[i-1][j], ele[i+1][j-1], ele[i+1][j], ele[i+1][j+1], ele[i][j+1], ele[i-1][j+1], ele[i-1][j+1]))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    res = []\n    for x, y in ele:\n        res.append((x - 1, y))\n        res.append((x, y - 1))\n        res.append((x + 1, y))\n        res.append((x, y + 1))\n    return res\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] > 0 and ele[1] > 0:\n        return [(ele[0]-1, ele[1]-1), (ele[0]-1, ele[1]), (ele[0]-1, ele[1]+1), (ele[0], ele[1]-1), (ele[0], ele[1]+1), (ele[0]+1, ele[1]-1), (ele[0]+1, ele[1]), (ele[0]+1, ele[1]+1)]\n    elif ele[0] > 0 and ele[1] == 0:\n        return [(ele[0]-1, ele[1]), (ele[0]-1, ele[1]+1), (ele[0], ele[1]+1), (ele[0]+1, ele[1]+1), (ele[0]+1, ele[1]), (ele[0]+1, ele[1]-1)]\n    elif ele[0] == 0 and ele[1] > 0:\n        return [(ele[0], ele[1]-1), (ele[0], ele[1]+1), (ele[0]+1, ele[1]-1), (ele[0]+1, ele[1]), (ele[0]+1, ele[1]+1)]\n    elif ele[0] == 0 and ele[1] == 0:\n        return [(ele[0]+1, ele[1]+1), (ele[0]+1, ele[1])]\n    elif ele[0] == 0 and ele[1] < 0:\n        return [(ele[0]+1, ele[1]-1), (ele[0]+1, ele[1]), (ele[0]+1, ele[1]+1)]\n    elif ele[0] < 0 and ele[1] > 0:\n        return [(ele[0]-1, ele[1]-1), (ele[0]-1, ele[1]), (ele[0]-1, ele[1]+1), (ele[0], ele[1]-1), (ele[0], ele[1]+1), (ele[0]+1, ele[1]-1), (ele[0]+1, ele[1]), (ele[0]+1, ele[1]+1)]\n    elif ele[0] < 0 and ele[1] == 0:\n        return [(ele[0]-1, ele[1]), (ele[0]-1, ele[1]+1), (ele[0], ele[1]+1), (ele[0]+1, ele[1]+1), (ele[0]+1, ele[1]), (ele[0]+1, ele[1]-1)]\n    elif ele[0] < 0 and ele[1] < 0:\n        return [(ele[0]-1, ele[1]-1), (ele[0]-1, ele[1]), (ele[0]-1, ele[1]+1), (ele[0], ele[1]-1), (ele[0], ele[1]+1), (ele[0]+1, ele[1]-1), (ele[0]+1, ele[1]), (ele[0]+1, ele[1]+1)]\n    elif ele[0] == 0 and ele[1] < 0:\n        return [(ele[0], ele[1]-1), (ele[0], ele[1]+1), (ele[0]+1, ele[1]-1), (ele[0]+1, ele[1]), (ele[0]+1, ele[1]+1)]\n    elif ele[0] > 0 and ele[1] < 0:\n        return [(ele[0]-1, ele[1]-1), (ele[0]-1, ele[1]), (ele[0]-1, ele[1]+1), (ele[0], ele[1]-1), (ele[0], ele[1]+1), (ele[0]+1, ele[1]-1), (ele[0]+1, ele[1]), (ele[0]+1, ele[1]+1)]\n    else:\n        return sub\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    #replace space with underscore\n    return ''.join(['_' if x =='' else x for x in text])\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = []\n    for i in text:\n        if i =='':\n            new_text.append('_')\n        else:\n            new_text.append(i)\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    out = []\n    for s in text:\n        if s =='':\n            out.append('_')\n        else:\n            out.append(s)\n    return ''.join(out)\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if not text:\n        return text\n    if text == text.strip():\n        return text\n    return text.replace(' ', '_').replace('_','').strip()\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return ''.join(['_' if char =='' else char for char in text])\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    #splitting by spaces\n    s = re.split('\\s+', text)\n    #joining to form a string with an underscore\n    result = '_'.join(s)\n    #joining to form a string with a space\n    result =''.join(s)\n    return result\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    l = list(text)\n    for i in range(len(l)):\n        if l[i] =='':\n            l[i] = '_'\n        elif l[i] == '_':\n            l[i] =''\n    return ''.join(l)\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_') if type(text) is str else text.replace('_','')\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    return [i for i in num_list if i!=0] + [0] * num_list.count(0)\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    index = 0\n    for num in num_list:\n        if num!= 0:\n            num_list[index] = num\n            index = index + 1\n    \n    while index < len(num_list):\n        num_list[index] = 0\n        index = index + 1\n    \n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # for i in num_list:\n    #     if i==0:\n    #         num_list.remove(i)\n    #         num_list.append(i)\n    # return num_list\n    index = 0\n    for i in num_list:\n        if i==0:\n            num_list.remove(i)\n            num_list.append(0)\n        else:\n            index += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # getting index of all zeros\n    zero_index = [i for i,num in enumerate(num_list) if num == 0]\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in num_list:\n        if i == 0:\n            num_list.remove(i)\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in num_list:\n        if i==0:\n            num_list.remove(i)\n            num_list.append(i)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    return [num for num in num_list if num!= 0] + [0] * (len(num_list) - len(num_list))\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for index, item in enumerate(num_list):\n        if item == 0:\n            num_list.remove(0)\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    index = 0\n    while index < len(num_list):\n        if num_list[index] == 0:\n            num_list.append(0)\n            num_list.pop(index)\n        index += 1\n    return num_list\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    for i in range(n) :\n        for j in range(i+1,n) :\n            print (arr[i] ^ arr[j])\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in xrange(n):\n        for j in xrange(i+1,n):\n            sum = sum + (arr[i] ^ arr[j])\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # finding the sum of xor of all pairs of numbers\n    sum = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            sum = sum ^ (arr[i] ^ arr[j])\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return sum(arr) ^ n\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    total = 0\n    for i in range(n) : \n        for j in range(i+1,n) : \n            total += arr[i] ^ arr[j]\n    return total \n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    for i in range(n-1) : \n        res = res ^ arr[i]\n    return res\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    assert type(arr) == list\n    assert len(arr) == n\n    assert type(n) == int\n    assert n>=2\n    sum = 0\n    for i in range(0,n) :\n        for j in range(i+1,n) :\n            sum = sum ^ (arr[i] ^ arr[j])\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(n) : \n        for j in range(i+1,n) : \n            s += arr[i] ^ arr[j]\n    return s\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return sum([arr[i] ^ arr[j] for i in range(n) for j in range(i+1, n)])\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if len(arr)==0 : \n        return 0\n    elif len(arr)==1 : \n        return arr[0]\n    elif len(arr)==2 : \n        return arr[0]^arr[1]\n    else : \n        return arr[0]^arr[1]^arr[2]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap,item)\n    return [hq.heappop(heap) for i in range(len(heap))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    lst = [hq.heappop(iterable) for _ in range(len(iterable))]\n    return lst\ndef heapify(arr, n, i):\n    # build max heap\n    # convert it to min heap\n    # use -1 as place holder, swap the place holder with the last element of the array\n    # heapify the new heap\n    # finally, convert it back to max heap\n    root = i\n    l = 2*i + 1\n    r = 2*i + 2\n    if l < n and arr[l] > arr[root]:\n        root = l\n    if r < n and arr[r] > arr[root]:\n        root = r\n    if root!= i:\n        arr[i], arr[root] = arr[root], arr[i]\n        heapify(arr, n, root)\ndef heap_sort_min(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    lst = [hq.heappop(iterable) for _ in range(len(iterable))]\n    for i in range(len(lst)-1, -1, -1):\n        lst[i], lst[0] = lst[0], lst[i]\n        heapify(lst, i, 0)\n    return lst\ndef heap_sort_max(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    lst = [hq.heappop(iterable) for _ in range(len(iterable))]\n    for i in range(len(lst)-1, -1, -1):\n        lst[i], lst[0] = lst[0], lst[i]\n        heapify(lst, i, 0)\n    return lst\ndef heap_sort_merge(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    lst = [hq.heappop(iterable) for _ in range(len(iterable))]\n    result = []\n    for i in range(len(lst)):\n        lst[i] = (lst[i], i)\n    for i in range(len(lst)):\n        if len(lst) == 0:\n            break\n        elif len(lst) == 1:\n            hq.heappush(lst, (lst[0][0], lst[0][1]))\n            result.append(lst[0][0])\n            lst = []\n            break\n        else:\n            hq.heappush(lst, (lst[0][0], lst[0][1]))\n            result.append(lst[0][0])\n            lst.pop(0)\n            hq.heappush(lst, (lst[0][0], lst[0][1]))\n            lst.pop(0)\n            if len(lst) > 1:\n                while lst[0][0] > lst[1][0]:\n                    if len(lst) > 2:\n                        hq.heappush(lst, (lst[0][0], lst[0][1]))\n                        lst.pop(0)\n                        hq.heappush(lst, (lst[0][0], lst[0][1]))\n                        lst.pop(0)\n                    else:\n                        hq.heappush(lst, (lst[0][0], lst[0][1]))\n                        lst.pop(0)\n                        break\n    return result\ndef find_min_num(a):\n    return min(a)\ndef min_heapify(arr, i, n):\n    l = 2*i + 1\n    r = 2*i + 2\n    if l < n and arr[l] < arr[i]:\n        smallest = l\n    else:\n        smallest = i\n    if r < n and arr[r] < arr[smallest]:\n        smallest = r\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        min_heapify(arr, smallest, n)\ndef min_heap_sort(iterable):\n    arr = [hq.heappop(iterable) for _ in range(len(iterable))]\n    for i in range(len(arr)-1, -1, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        min_heapify(arr, 0, i)\n    return arr\ndef max_heapify(arr, i, n):\n    l = 2*i + 1\n    r = 2*i + 2\n    if l < n and arr[l] > arr[i]:\n        largest = l\n    else:\n        largest = i\n    if r < n and arr[r] > arr[largest]:\n        largest = r\n    if largest!= i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        max_heapify(arr, largest, n)\ndef max_heap_sort(iterable):\n    arr = [hq.heappop(iterable) for _ in range(len(iterable))]\n    for i in range(len(arr)-1, -1, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        max_heapify(arr, 0, i)\n    return arr\ndef heap_sort_max_min(iterable):\n    arr = [hq.heappop(iterable) for _ in range(len(iterable))]\n    for i in range(len(arr)-1, -1, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        max_heapify(arr, 0, i)\n    return arr\ndef heap_sort_max_min_med(iterable):\n    arr = [hq.heappop(iterable) for _ in range(len(iterable))]\n    for i in range(len(arr)-1, -1, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        max_heapify(arr, 0, i)\n    return arr\ndef heap_sort_max_min_med_sorted(iterable):\n    arr = [hq.heappop(iterable) for _ in range(len(iterable))]\n    for i in range(len(arr)-1, -1, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        max_heapify(arr, 0, i)\n    return arr\ndef heap_sort_max_min_med_sorted_back(iterable):\n    arr = [hq.heappop(iterable) for _ in range(len(iterable))]\n    for i in range(len(arr)-1, -1, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        max_heapify(arr, 0, i)\n    return arr\ndef heap_sort_max_min_med_sorted_reverse(iterable):\n    arr = [hq.heappop(iterable) for _ in range(len(iterable))]\n    for i in range(len(arr)-1, -1, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        max_heapify(arr, 0, i)\n    return arr\ndef max_heapify_reverse(arr, i, n):\n    l = 2*i + 1\n    r = 2*i + 2\n    if l < n and arr[l] < arr[i]:\n        largest = l\n    else:\n        largest = i\n    if r < n and arr[r] < arr[largest]:\n        largest = r\n    if largest!= i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        max_heapify_reverse(arr, largest, n)\ndef max_heap_sort_reverse(iterable):\n    arr = [hq.heappop(iterable) for _ in range(len(iterable))]\n    for i in range(len(arr)-1, -1, -1):\n        arr["
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for e in iterable:\n        hq.heappush(h, e)\n    return [hq.heappop(h) for i in range(len(h))]\ndef quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = []\n    mid = []\n    right = []\n    for e in arr:\n        if e < pivot:\n            left.append(e)\n        elif e == pivot:\n            mid.append(e)\n        else:\n            right.append(e)\n    return quick_sort(left) + mid + quick_sort(right)\ndef quick_sort_array(arr):\n    def partition(arr, lo, hi):\n        pivot = arr[hi]\n        left = lo\n        for i in range(lo, hi):\n            if arr[i] < pivot:\n                arr[i], arr[left] = arr[left], arr[i]\n                left += 1\n        arr[left], arr[hi] = arr[hi], arr[left]\n        return left\n    def sort(arr, lo, hi):\n        if lo < hi:\n            p = partition(arr, lo, hi)\n            sort(arr, lo, p - 1)\n            sort(arr, p + 1, hi)\n    sort(arr, 0, len(arr) - 1)\n    return arr\ndef selection_sort(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[min_idx], arr[i] = arr[i], arr[min_idx]\n    return arr\ndef merge_sort(arr):\n    def merge(arr, lo, mid, hi):\n        tmp = [0 for i in range(len(arr))]\n        i = lo\n        j = mid + 1\n        for k in range(lo, hi + 1):\n            if i > mid:\n                tmp[k] = arr[j]\n                j += 1\n            elif j > hi:\n                tmp[k] = arr[i]\n                i += 1\n            elif arr[i] < arr[j]:\n                tmp[k] = arr[i]\n                i += 1\n            else:\n                tmp[k] = arr[j]\n                j += 1\n        arr[lo:hi + 1] = tmp\n    def sort(arr, lo, hi):\n        if lo < hi:\n            mid = (lo + hi) // 2\n            sort(arr, lo, mid)\n            sort(arr, mid + 1, hi)\n            merge(arr, lo, mid, hi)\n    sort(arr, 0, len(arr) - 1)\n    return arr\ndef merge_sort_array(arr):\n    def merge(arr, lo, mid, hi):\n        i = lo\n        j = mid + 1\n        tmp = [0 for i in range(len(arr))]\n        for k in range(lo, hi + 1):\n            if i > mid:\n                tmp[k] = arr[j]\n                j += 1\n            elif j > hi:\n                tmp[k] = arr[i]\n                i += 1\n            elif arr[i] < arr[j]:\n                tmp[k] = arr[i]\n                i += 1\n            else:\n                tmp[k] = arr[j]\n                j += 1\n        arr[lo:hi + 1] = tmp\n    def sort(arr, lo, hi):\n        if lo < hi:\n            mid = (lo + hi) // 2\n            sort(arr, lo, mid)\n            sort(arr, mid + 1, hi)\n            merge(arr, lo, mid, hi)\n    sort(arr, 0, len(arr) - 1)\n    return arr\ndef insertion_sort(arr):\n    for i in range(1, len(arr)):\n        current = arr[i]\n        pos = i\n        while pos > 0 and arr[pos - 1] > current:\n            arr[pos] = arr[pos - 1]\n            pos -= 1\n        arr[pos] = current\n    return arr\ndef insertion_sort_array(arr):\n    for i in range(1, len(arr)):\n        current = arr[i]\n        pos = i\n        while pos > 0 and arr[pos - 1] > current:\n            arr[pos] = arr[pos - 1]\n            pos -= 1\n        arr[pos] = current\n    return arr\ndef bucket_sort(arr):\n    max_num = max(arr)\n    size = max_num // len(arr) + 1\n    bucket = [[] for i in range(size)]\n    for i in arr:\n        bucket[i // size].append(i)\n    for i in bucket:\n        i.sort()\n    res = []\n    for i in range(size):\n        res.extend(bucket[i])\n    return res\ndef bucket_sort_array(arr):\n    max_num = max(arr)\n    size = max_num // len(arr) + 1\n    bucket = [[] for i in range(size)]\n    for i in arr:\n        bucket[i // size].append(i)\n    for i in range(size):\n        bucket[i].sort()\n    res = []\n    for i in range(size):\n        res.extend(bucket[i])\n    return res\ndef counting_sort(arr, digit):\n    count = [0 for i in range(10)]\n    for i in arr:\n        count[i // digit] += 1\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    res = [0 for i in range(len(arr))]\n    for i in range(len(arr) - 1, -1, -1):\n        res[count[arr[i] // digit] - 1] = arr[i]\n        count[arr[i] // digit] -= 1\n    return res\ndef counting_sort_array(arr, digit):\n    count = [0 for i in range(10)]\n    for i in arr:\n        count[i // digit] += 1\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    res = [0 for i in range(len(arr))]\n    for i in range(len(arr) - 1, -1, -1):\n        res[count[arr[i] // digit] - 1] = arr[i]\n        count[arr[i] // digit] -= 1\n    return res\ndef radix_sort(arr):\n    max_num = max(arr)\n    digit = 1\n    while max_num // digit > 0:\n        count = [0 for i in range(10)]\n        for i in arr:\n            count[i // digit % 10] += 1\n        for i in range(1, 10):\n            count[i] += count[i - 1]\n        res = [0 for i in range(len(arr))]\n        for i in range(len(arr) - 1, -1, -1):\n            res[count[arr[i] // digit % 10] - 1] = arr[i]\n            count[arr[i] // digit % 10] -= 1\n        arr = res\n        digit *= 10\n    return arr\ndef radix_sort_array(arr):\n    max_num = max(arr)\n    digit = 1\n    while max_num // digit > 0:\n        count = [0 for i in range(10)]\n        for i in arr:\n            count[i // digit % 10] += 1\n        for i in range(1, 10):\n            count[i] += count[i - 1]\n        res = [0 for i in range(len(arr))]\n        for i in range(len(arr) - 1, -1, -1):\n            res[count[arr[i] // digit % 10] - 1] = arr[i]\n            count[arr[i] // digit % 10] -= 1\n        arr = res\n        digit *= 10\n    return arr\ndef bucket_sort_radix(arr):\n    max_num = max(arr)\n    digit = 1\n    while max_num // digit > 0"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h, i)\n    return [hq.heappop(h) for i in range(len(h))]\ndef heap_sort_2(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h, i)\n    return [hq.heappop(h) for i in range(len(h))]\ndef heap_sort_3(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, value)\n    return [hq.heappop(heap) for i in range(len(heap))]\ndef sort_with_heap(iterable, func):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, func(value))\n    return [hq.heappop(heap) for i in range(len(heap))]\ndef sort_with_heap_2(iterable, func):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, func(value))\n    return [hq.heappop(heap) for i in range(len(heap))]\ndef sort_with_heap_3(iterable, func):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, (func(value), value))\n    return [hq.heappop(heap) for i in range(len(heap))]\ndef find_top_k_numbers(iterable, k):\n    '''\n    Write a function to find the top k elements.\n    '''\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, value)\n    return [hq.heappop(heap) for i in range(k)]\ndef find_top_k_numbers_2(iterable, k):\n    '''\n    Write a function to find the top k elements.\n    '''\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, (value, value))\n    return [hq.heappop(heap) for i in range(k)]\ndef find_top_k_numbers_3(iterable, k):\n    '''\n    Write a function to find the top k elements.\n    '''\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, (value, 1))\n    return [hq.heappop(heap)[0] for i in range(k)]\ndef heapsort(iterable):\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, value)\n    return [hq.heappop(heap) for i in range(len(heap))]\ndef heap_sort_4(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, value)\n    return [hq.heappop(heap) for i in range(len(heap))]\ndef sort_k_numbers(iterable, k):\n    '''\n    Write a function to find the top k elements.\n    '''\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, value)\n    return [hq.heappop(heap) for i in range(k)]\ndef sort_k_numbers_2(iterable, k):\n    '''\n    Write a function to find the top k elements.\n    '''\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, (value, value))\n    return [hq.heappop(heap)[0] for i in range(k)]\ndef sort_k_numbers_3(iterable, k):\n    '''\n    Write a function to find the top k elements.\n    '''\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, (value, 1))\n    return [hq.heappop(heap)[0] for i in range(k)]\ndef heap_sort_5(iterable, k):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, (value, value))\n    return [hq.heappop(heap)[0] for i in range(k)]\ndef sort_k_numbers_4(iterable, k):\n    '''\n    Write a function to find the top k elements.\n    '''\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, (value, 1))\n    return [hq.heappop(heap)[0] for i in range(k)]\ndef sort_k_numbers_5(iterable, k):\n    '''\n    Write a function to find the top k elements.\n    '''\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, (value, 1))\n    return [hq.heappop(heap)[0] for i in range(k)]\ndef sort_k_numbers_6(iterable, k):\n    '''\n    Write a function to find the top k elements.\n    '''\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, (value, 1))\n    return [hq.heappop(heap)[0] for i in range(k)]\ndef sort_k_numbers_7(iterable, k):\n    '''\n    Write a function to find the top k elements.\n    '''\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, (value, 1))\n    return [hq.heappop(heap)[0] for i in range(k)]\ndef sort_k_numbers_8(iterable, k):\n    '''\n    Write a function to find the top k elements.\n    '''\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, (value, 1))\n    return [hq.heappop(heap)[0] for i in range(k)]\ndef sort_k_numbers_9(iterable, k):\n    '''\n    Write a function to find the top k elements.\n    '''\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, (value, 1))\n    return [hq.heappop(heap)[0] for i in range(k)]\ndef sort_k_numbers_10(iterable, k):\n    '''\n    Write a function to find the top k elements.\n    '''\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, (value, 1))\n    return [hq.heappop(heap)[0] for i in range(k)]\ndef sort_k_numbers_11(iterable, k):\n    '''\n    Write a function to find the top k elements.\n    '''\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, (value, 1))\n    return [hq.heappop(heap)[0] for i in range(k)]\ndef sort_k_numbers_12(iterable, k):\n    '''\n    Write a function to find the top k elements.\n    '''\n    heap = []\n    for value in iterable:"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a heap\n    h = []\n    # iterate over the elements\n    for x in iterable:\n        # push the element to the heap\n        hq.heappush(h, x)\n    # initialize the new list\n    sorted_list = []\n    # iterate over the elements again and extract the smallest element\n    for _ in range(len(h)):\n        sorted_list.append(hq.heappop(h))\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h, i)\n    return [hq.heappop(h) for i in range(len(h))]\ndef merge_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sort_helper(iterable, [], 0, len(iterable))\ndef sort_helper(iterable, result, left, right):\n    if left >= right:\n        return result\n    mid = (left+right)//2\n    left_list = sort_helper(iterable, result, left, mid)\n    right_list = sort_helper(iterable, result, mid+1, right)\n    return merge_helper(left_list, right_list, result)\ndef merge_helper(left_list, right_list, result):\n    left_index = 0\n    right_index = 0\n    index = 0\n    while left_index < len(left_list) and right_index < len(right_list):\n        if left_list[left_index] < right_list[right_index]:\n            result[index] = left_list[left_index]\n            left_index += 1\n        else:\n            result[index] = right_list[right_index]\n            right_index += 1\n        index += 1\n    for i in range(left_index, len(left_list)):\n        result[index] = left_list[i]\n        index += 1\n    for i in range(right_index, len(right_list)):\n        result[index] = right_list[i]\n        index += 1\n    return result\ndef merge_sort_iter(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    result = []\n    for i in iterable:\n        hq.heappush(result, i)\n    for i in range(len(result)):\n        hq.heappop(result)\n    return result\ndef list_to_str(list):\n    return ''.join([str(i) for i in list])\ndef str_to_list(string):\n    return [int(i) for i in string]\ndef list_to_str_reverse(list):\n    return ''.join([str(i) for i in list])[::-1]\ndef str_to_list_reverse(string):\n    return [int(i) for i in string][::-1]\ndef list_to_str_ascii(list):\n    return ''.join([str(chr(i)) for i in list])\ndef str_to_list_ascii(string):\n    return [ord(i) for i in string]\ndef list_to_str_ascii_reverse(list):\n    return ''.join([str(chr(i)) for i in list])[::-1]\ndef str_to_list_ascii_reverse(string):\n    return [ord(i) for i in string][::-1]\ndef int_to_str(n):\n    return str(n)\ndef str_to_int(n):\n    return int(n)\ndef int_to_str_reverse(n):\n    return str_to_int(list_to_str_reverse(int_to_str(n)))\ndef str_to_int_reverse(n):\n    return int(str_to_int(list_to_str_reverse(n)))\ndef add_to_front(n, string):\n    return list_to_str_ascii(str_to_list_ascii(string) + str_to_list_ascii(int_to_str(n)))\ndef add_to_back(n, string):\n    return list_to_str_ascii(str_to_list_ascii(string) + str_to_list_ascii(int_to_str(n)))\ndef add_to_front_reverse(n, string):\n    return list_to_str_ascii_reverse(str_to_list_ascii_reverse(string) + str_to_list_ascii_reverse(int_to_str(n)))\ndef add_to_back_reverse(n, string):\n    return list_to_str_ascii_reverse(str_to_list_ascii_reverse(string) + str_to_list_ascii_reverse(int_to_str(n)))\ndef add_to_front_reverse_ascii(n, string):\n    return list_to_str_reverse(str_to_list_ascii_reverse(string) + str_to_list_ascii_reverse(int_to_str(n)))\ndef add_to_back_reverse_ascii(n, string):\n    return list_to_str_reverse(str_to_list_ascii_reverse(string) + str_to_list_ascii_reverse(int_to_str(n)))\ndef add_to_front(n, string):\n    return list_to_str_ascii(str_to_list_ascii(string) + str_to_list_ascii(int_to_str(n)))\ndef add_to_back(n, string):\n    return list_to_str_ascii(str_to_list_ascii(string) + str_to_list_ascii(int_to_str(n)))\ndef add_to_front_reverse(n, string):\n    return list_to_str_reverse(str_to_list_reverse(string) + str_to_list_reverse(int_to_str(n)))\ndef add_to_back_reverse(n, string):\n    return list_to_str_reverse(str_to_list_reverse(string) + str_to_list_reverse(int_to_str(n)))\ndef add_to_front_reverse_ascii(n, string):\n    return list_to_str_reverse(str_to_list_reverse_ascii(string) + str_to_list_reverse_ascii(int_to_str(n)))\ndef add_to_back_reverse_ascii(n, string):\n    return list_to_str_reverse(str_to_list_reverse_ascii(string) + str_to_list_reverse_ascii(int_to_str(n)))\ndef add_to_front_ascii(n, string):\n    return list_to_str_ascii(str_to_list_ascii(string) + str_to_list_ascii(int_to_str(n)))\ndef add_to_back_ascii(n, string):\n    return list_to_str_ascii(str_to_list_ascii(string) + str_to_list_ascii(int_to_str(n)))\ndef add_to_front_reverse_ascii(n, string):\n    return list_to_str_reverse(str_to_list_reverse_ascii(string) + str_to_list_reverse_ascii(int_to_str(n)))\ndef add_to_back_reverse_ascii(n, string):\n    return list_to_str_reverse(str_to_list_reverse_ascii(string) + str_to_list_reverse_ascii(int_to_str(n)))\ndef multiply_ascii(n, string):\n    return list_to_str_ascii(str_to_list_ascii(string) * int_to_str(n))\ndef multiply_reverse_ascii(n, string):\n    return list_to_str_reverse_ascii(str_to_list_reverse_ascii(string) * int_to_str(n))\ndef multiply_ascii_reverse(n, string):\n    return list_to_str_ascii(str_to_list_ascii(string) * int_to_str(n))\ndef multiply_reverse_ascii_reverse(n, string):\n    return list_to_str_reverse_ascii(str_to_list_reverse_ascii(string) * int_to_str(n))\ndef factorial_ascii(n, string):\n    return list_t"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    \n    def heapsort(iterable):\n        h = []\n        for value in iterable:\n            hq.heappush(h, value)\n        return [hq.heappop(h) for i in range(len(h))]\n    \n    return heapsort(iterable)\n    \ndef largest_contiguous_sum(array):\n    '''\n    Given an array of integers, find the contiguous subarray which has the largest sum and return its sum.\n    '''\n    \n    curr_sum = max_sum = array[0]\n    for i in range(1,len(array)):\n        curr_sum = max(array[i],curr_sum+array[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n    \ndef find_max_contiguous_sum(array):\n    '''\n    Given an array of integers, find the contiguous subarray which has the largest sum and return its sum.\n    '''\n    \n    max_sum, curr_sum = -float('inf'), 0\n    for i in range(len(array)):\n        curr_sum = max(array[i],curr_sum+array[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    lst = list(iterable)\n    hq.heapify(lst)\n    return [hq.heappop(lst) for i in range(len(lst))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return list(sorted(iterable))\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost>sale_amount: \n        return False\n    return True\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    cost=0\n    for i in range(len(actual_cost)):\n        cost=cost+actual_cost[i]\n    if cost==sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == 0:\n        return True\n    elif sale_amount == 0:\n        return False\n    else:\n        if sale_amount < actual_cost:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost<0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    actual_cost=float(actual_cost)\n    sale_amount=float(sale_amount)\n    return actual_cost >= sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if (actual_cost == sale_amount):\n        print(\"No profit no loss\")\n    elif (actual_cost > sale_amount):\n        print(\"No profit\")\n    else:\n        print(\"No loss\")\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        print '\\tERROR: The cost is greater than the sale amount'\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost<sale_amount\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 35.74 + 0.6215 * t + (0.4275 * t - 35.75) * v**0.16\n    return int(wci)\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #Chap 10\n    wci = 35.74 + 0.6215 * t + (0.4275 * t - 35.75) * math.pow(v, 0.16)\n    return round(wci)\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #WCI = (35.74 + 0.6215*t) + (35.75*(v**0.16))\n    #print(WCI)\n    #WCI = (35.74 + (0.6215*t) + (35.75*(v**0.16)))\n    WCI = 35.74 + (0.6215*t) + (35.75*math.pow(v,0.16))\n    print(round(WCI))\nwind_chill(10,40)"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Standard wind chill index = (v**3/4)*(t+45)\n    return (v**3/4)*(t+45)\ndef wind_chill_closest(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the closest integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Standard wind chill index = (v**3/4)*(t+45)\n    return (math.floor(v**3/4)*(t+45))\ndef closest_to_standard(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the closest integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Standard wind chill index = (v**3/4)*(t+45)\n    return (math.ceil(v**3/4)*(t+45))\ndef find_closest(v,t,wind_chill_f):\n    '''\n    Write a function to calculate the wind chill index rounded to the closest integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Standard wind chill index = (v**3/4)*(t+45)\n    return (math.ceil(v**3/4)*(t+45))\n    # Standard wind chill index = (v**3/4)*(t+45)\n    return wind_chill(v,t)\n    # Standard wind chill index = (v**3/4)*(t+45)\n    return wind_chill_f(v,t)\ndef closest_to_standard2(v,t,wind_chill_f):\n    '''\n    Write a function to calculate the wind chill index rounded to the closest integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Standard wind chill index = (v**3/4)*(t+45)\n    return (math.floor(v**3/4)*(t+45))\n    # Standard wind chill index = (v**3/4)*(t+45)\n    return wind_chill(v,t)\n    # Standard wind chill index = (v**3/4)*(t+45)\n    return wind_chill_f(v,t)\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return int(35.74+0.6215*t+(35.75*(v**0.16))+(0.4275*t*(v**0.16)))\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = math.ceil(v)\n    t = math.ceil(t)\n    a = 35.74 + 0.6215 * t - 35.75 * v ** 0.16 + 0.4275 * t * v ** 0.16\n    return a\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    assert type(v) is int or type(v) is float\n    assert type(t) is int or type(t) is float\n    assert v >=0\n    assert t >= 0\n    v=v/3.6\n    wci=35.74+0.6215*t+(0.4275*t-35.75)*v**0.16\n    wci=round(wci)\n    return wci\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    if (v < 3) or (t < -25):\n        wci = 32\n    elif (t >= -15) and (t <= 5):\n        wci = 13.12 + (0.6215*t) - (11.37*(v**0.16)) + (0.3965*(v**0.16))\n    elif (t > 5) and (t <= 15):\n        wci = (13.12 + (0.6215*t) - (11.37*(v**0.16)) + (0.3965*(v**0.16)))\n    elif (t > 15) and (t <= 25):\n        wci = ((13.12 + (0.6215*t) - (11.37*(v**0.16)) + (0.3965*(v**0.16)))/1.01)\n    return int(math.ceil(wci))\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = int(v)\n    t = int(t)\n    if v > 80:\n        return (35.74 + 0.6215 * t)\n    else:\n        return (35.74 + 0.622 * t)\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 13.12 + (0.6215 * t) - (11.37 * v ** 0.16) + (0.3965 * t) * (v ** 0.16)\n    return round(wci)\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    for i in sample_names:\n        if i[0].islower():\n            sample_names.remove(i)\n    return sum(len(i) for i in sample_names)\n    \n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name[0].isupper()])\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize empty list to store sum of length of each name\n    sums = []\n    # Iterate over list of names\n    for nam in sample_names:\n        # Find length of name\n        nam_len = len(nam)\n        # Check if name starts with a lowercase letter\n        if nam[0].islower():\n            # Add to sum list\n            sums.append(nam_len)\n    # Find sum of all the sums\n    sum_of_sums = sum(sums)\n    # Return sum\n    return sum_of_sums\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(sample_name) for sample_name in sample_names if sample_name[0].isupper())\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    if len(sample_names) == 0:\n        return 0\n    return sum(len(name) for name in sample_names if name[0].isupper())\n    \n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    print('input:', sample_names)\n    print('output:', sum([len(name) for name in sample_names if name[0].isupper() == False]))\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    l=len(sample_names)\n    new_sample_names=[]\n    for i in range(0,l):\n        if sample_names[i][0].isupper() == True:\n            new_sample_names.append(sample_names[i])\n    l1=len(new_sample_names)\n    total=0\n    for i in range(0,l1):\n        total=total+len(new_sample_names[i])\n    return total\n    \n    \ndef save_money(n):\n    '''\n    Write a function to read a positive integer number and return the amount of money that can be saved by a specific person on a specific day.\n    '''\n    if n%5!= 0:\n        print(\"Invalid number\")\n        return -1\n    else:\n        m=n/5\n        return m\n    \n    \ndef shopping_list(items):\n    '''\n    Write a function to create a shopping list of n items.\n    '''\n    print(\"Shopping list created:\")\n    for i in range(0,len(items)):\n        print(items[i])\n    return\n    \n    \ndef main():\n    '''\n    Write a function to create a list of shopping items. After this, write a function to ask the user how many items they would like to add to the list, and add that number of items to the list.\n    '''\n    my_list=[]\n    n=input(\"Enter the number of items you would like to add:\")\n    i=0\n    while i<n:\n        item=input(\"Enter a new item:\")\n        my_list.append(item)\n        i=i+1\n    print(\"Shopping list created:\")\n    for i in range(0,len(my_list)):\n        print(my_list[i])\n    return\n    \n    \ndef main1():\n    '''\n    Write a function that will print the numbers from 1 to 100. But for multiples of three print \u201cFizz\u201d instead of the number and for the multiples of five print \u201cBuzz\u201d. For numbers which are multiples of both three and five print \u201cFizzBuzz\u201d.\n    '''\n    for i in range(0,100):\n        if (i%3 == 0) and (i%5 == 0):\n            print(\"FizzBuzz\")\n        elif (i%3 == 0):\n            print(\"Fizz\")\n        elif (i%5 == 0):\n            print(\"Buzz\")\n        else:\n            print(i)\n    return\n    \n    \ndef main2():\n    '''\n    Write a function that will print the numbers from 1 to 100. But for multiples of three print \u201cFizz\u201d instead of the number and for the multiples of five print \u201cBuzz\u201d. For numbers which are multiples of both three and five print \u201cFizzBuzz\u201d.\n    '''\n    for i in range(1,101):\n        if (i%3 == 0) and (i%5 == 0):\n            print(\"FizzBuzz\")\n        elif (i%3 == 0):\n            print(\"Fizz\")\n        elif (i%5 == 0):\n            print(\"Buzz\")\n        else:\n            print(i)\n    return\n    \n    \ndef main3():\n    '''\n    Write a function that will print the numbers from 1 to 100. But for multiples of three print \u201cFizz\u201d instead of the number and for the multiples of five print \u201cBuzz\u201d. For numbers which are multiples of both three and five print \u201cFizzBuzz\u201d.\n    '''\n    for i in range(1,101):\n        if (i%3 == 0) and (i%5 == 0):\n            print(\"FizzBuzz\")\n        elif (i%3 == 0):\n            print(\"Fizz\")\n        elif (i%5 == 0):\n            print(\"Buzz\")\n        else:\n            print(i)\n    return\n    \n    \ndef main4():\n    '''\n    Write a function that will print the numbers from 1 to 100. But for multiples of three print \u201cFizz\u201d instead of the number and for the multiples of five print \u201cBuzz\u201d. For numbers which are multiples of both three and five print \u201cFizzBuzz\u201d.\n    '''\n    for i in range(1,101):\n        if (i%3 == 0) and (i%5 == 0):\n            print(\"FizzBuzz\")\n        elif (i%3 == 0):\n            print(\"Fizz\")\n        elif (i%5 == 0):\n            print(\"Buzz\")\n        else:\n            print(i)\n    return\n    \n    \ndef main5():\n    '''\n    Write a function that will print the numbers from 1 to 100. But for multiples of three print \u201cFizz\u201d instead of the number and for the multiples of five print \u201cBuzz\u201d. For numbers which are multiples of both three and five print \u201cFizzBuzz\u201d.\n    '''\n    for i in range(1,101):\n        if (i%3 == 0) and (i%5 == 0):\n            print(\"FizzBuzz\")\n        elif (i%3 == 0):\n            print(\"Fizz\")\n        elif (i%5 == 0):\n            print(\"Buzz\")\n        else:\n            print(i)\n    return\n    \n    \ndef main6():\n    '''\n    Write a function that will print the numbers from 1 to 100. But for multiples of three print \u201cFizz\u201d instead of the number and for the multiples of five print \u201cBuzz\u201d. For numbers which are multiples of both three and five print \u201cFizzBuzz\u201d.\n    '''\n    for i in range(1,101):\n        if (i%3 == 0) and (i%5 == 0):\n            print(\"FizzBuzz\")\n        elif (i%3 == 0):\n            print(\"Fizz\")\n        elif (i%5 == 0):\n            print(\"Buzz\")\n        else:\n            print(i)\n    return\n    \n    \ndef main7():\n    '''\n    Write a function that will print the numbers from 1 to 100. But for multiples of three print \u201cFizz\u201d instead of the number and for the multiples of five print \u201cBuzz\u201d. For numbers which are multiples of both three and five print \u201cFizzBuzz\u201d.\n    '''\n    for i in range(1,101):\n        if (i%3 == 0) and (i%5 == 0):\n            print(\"FizzBuzz\")\n        elif (i%3 == 0):\n            print(\"Fizz\")\n        elif (i%5 == 0):\n            print(\"Buzz\")\n        else:\n            print(i)\n    return\n    \n    \ndef main8():\n    '''\n    Write a function that will print the numbers from 1 to 100. But for multiples of three print \u201cFizz\u201d instead of the number and for the multiples of five print \u201cBuzz\u201d. For numbers which are multiples of both three and five print \u201cFizzBuzz\u201d.\n    '''\n    for i in range(1,101):\n        if (i%3 == 0) and (i%5 == 0):\n            print(\"FizzBuzz\")\n        elif (i%3 == 0):\n            print(\"Fizz\")\n        elif (i%5 == 0):\n            print(\"Buzz\")\n        else:\n            print(i)\n    return\n    \n    \ndef main9():\n    '''\n    Write a function that will print the numbers from 1 to 100. But for multiples of three print \u201cFizz\u201d instead of the number and for the multiples of five print \u201cBuzz\u201d. For numbers which are multiples of both three and five print \u201cFizzBuzz\u201d.\n    '''\n    for i in range(1,101):\n        if (i%3 == 0) and (i%5 == 0):\n            print(\"FizzBuzz\")\n        elif (i%3 == 0):\n            print(\"Fizz\")\n        elif (i%5 == 0):\n            print(\"Buzz\")\n        else:\n            print(i)\n    return\n    \n    \ndef main10():\n    '''\n    Write a function that will print the numbers from 1 to 100. But for multiples of three print \u201cFizz\u201d instead of the number and for the multiples of five print "
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name_list=[]\n    name_list.append(sample_names)\n    x=0\n    for i in range(len(name_list)):\n        # print name_list[i]\n        for j in range(len(name_list[i])):\n            if name_list[i][j][0].isupper():\n                # print name_list[i][j]\n                name_list.append(name_list[i][j])\n                name_list[i].pop(j)\n            else:\n                pass\n    # print name_list\n    # for i in range(len(name_list)):\n    #     print (len(name_list[i]))\n    # print len(name_list)\n    # for i in range(len(name_list)):\n    #     print (sum(len(name_list[i])))\n    return sum(len(name_list[i]) for i in range(len(name_list)))\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for name in sample_names:\n        if not name.islower():\n            sum += len(name)\n    return sum\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # return sum([len(name) for name in sample_names if name[0].isupper()])\n    return sum([len(name) for name in sample_names if name.isupper()])\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    \n    pass\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if '(' in items:\n        items=items.split('(')[1]\n    if ')' in items:\n        items=items.split(')')[0]\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in range(0,len(items)-1):\n        if items[i] == '(':\n            if items[i+1] == ')':\n                items[i:i+2] = []\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    temp = ''\n    for i in items:\n        if i!= '(':\n            temp += i\n        else:\n            break\n    return temp\ndef remove_brackets(items):\n    '''\n    Write a function to remove the brackets and what is inbetween them from a string.\n    '''\n    temp = ''\n    for i in items:\n        if i!= ')':\n            temp += i\n        else:\n            break\n    return temp\ndef digits(items):\n    '''\n    Write a function to check if a string is a digit or not.\n    '''\n    for i in items:\n        if i!= '0' and i!= '1' and i!= '2' and i!= '3' and i!= '4' and i!= '5' and i!= '6' and i!= '7' and i!= '8' and i!= '9':\n            return False\n    return True\ndef separate_num_and_char(items):\n    '''\n    Write a function to separate the numbers from the characters and return a tuple with the numbers and the characters.\n    '''\n    temp = ''\n    for i in items:\n        if i!='':\n            temp += i\n        else:\n            break\n    return temp,items[len(temp):]\ndef reverse_string(items):\n    '''\n    Write a function to reverse a string.\n    '''\n    temp = ''\n    for i in items:\n        temp = i + temp\n    return temp\ndef is_palindrome(items):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    if items == items[::-1]:\n        return True\n    return False\ndef is_anagram(items):\n    '''\n    Write a function to check if two strings are anagram or not.\n    '''\n    if len(items)!= len(items[0]):\n        return False\n    temp = ''\n    for i in items[0]:\n        temp += items[1][0]\n    if temp == items[1]:\n        return True\n    return False\ndef is_pangram(items):\n    '''\n    Write a function to check if a string is a pangram or not.\n    '''\n    for i in range(97,123):\n        if chr(i) not in items:\n            return False\n    return True\ndef is_permutation(items1,items2):\n    '''\n    Write a function to check if two strings are permutations of each other or not.\n    '''\n    if len(items1)!= len(items2):\n        return False\n    temp = ''\n    for i in items1:\n        temp += i\n    if temp == items2:\n        return True\n    return False\ndef is_binary_number(items):\n    '''\n    Write a function to check if a string is a binary number or not.\n    '''\n    if items[0]!= '0' and items[0]!= '1':\n        return False\n    for i in items[1:]:\n        if i!= '0' and i!= '1':\n            return False\n    return True\ndef is_phone_number(items):\n    '''\n    Write a function to check if a string is a phone number or not.\n    '''\n    temp = ''\n    for i in items:\n        if i!='' and i!= '-':\n            temp += i\n    if len(temp)!= 10:\n        return False\n    if temp[0]!= '1' or temp[1]!= '0' or temp[2]!= '0' or temp[3]!= '0':\n        return False\n    for i in temp[4:]:\n        if i!= '1' and i!= '0':\n            return False\n    return True\ndef is_group_of_digits(items):\n    '''\n    Write a function to check if a string is a group of digits or not.\n    '''\n    if digits(items):\n        return True\n    return False\ndef is_fraction(items):\n    '''\n    Write a function to check if a string is a fraction or not.\n    '''\n    if '.' in items:\n        return True\n    return False\ndef is_integer(items):\n    '''\n    Write a function to check if a string is an integer or not.\n    '''\n    if digits(items):\n        return True\n    return False\ndef is_decimal(items):\n    '''\n    Write a function to check if a string is a decimal number or not.\n    '''\n    if digits(items) and is_fraction(items):\n        return True\n    return False\ndef is_taxid(items):\n    '''\n    Write a function to check if a string is a taxid or not.\n    '''\n    if is_integer(items) or is_decimal(items):\n        return True\n    return False\ndef is_date(items):\n    '''\n    Write a function to check if a string is a date or not.\n    '''\n    if is_integer(items[4:]) and items[:3] == '201' and (items[3] == '0' or items[3] == '1' or items[3] == '2'):\n        return True\n    return False\ndef is_ip(items):\n    '''\n    Write a function to check if a string is an ip or not.\n    '''\n    if is_integer(items[0:3]) and items[3] == '.' and is_integer(items[4:7]) and items[7] == '.' and is_integer(items[8:11]) and items[11] == '.' and is_integer(items[12:15]) and items[15] == '.' and is_integer(items[16:]):\n        return True\n    return False\ndef is_time(items):\n    '''\n    Write a function to check if a string is a time or not.\n    '''\n    if is_integer(items[0:2]) and items[2] == ':' and is_integer(items[3:5]) and items[5] == ':' and is_integer(items[6:8]):\n        return True\n    return False\ndef is_url(items):\n    '''\n    Write a function to check if a string is a url or not.\n    '''\n    if items[:7] == 'http://' or items[:8] == 'https://':\n        return True\n    return False\ndef is_email(items):\n    '''\n    Write a function to check if a string is an email or not.\n    '''\n    if items[:5] =='mailto:' and is_integer(items[5:7]) and items[7] == '@':\n        return True\n    return False\ndef is_ip_or_url(items):\n    '''\n    Write a function to check if a string is an ip or an url or not.\n    '''\n    if is_ip(items):\n        return True\n    if is_url(items):\n        return True\n    return False\ndef is_pilot_name(items):\n    '''\n    Write a function to check if a string is a pilot name or not.\n    '''\n    if items[0]!= 'P' and items[0]!= 'p':\n        return False\n    if items[1]!= 'I' and items[1]!= 'i':\n        return False\n    if items[2]!= 'L' and items[2]!= 'l':\n        return False\n    if items[3]!= 'T' and items[3]!= 't':\n        return False\n    return True\ndef is_pilot_id(items):\n    '''\n    Write a function to check if a string is a pilot id or not.\n    '''\n    if items[0]!= 'P' and items[0]!= 'p':\n        return False\n    if items[1]!= 'I' and items[1]!= 'i':\n        return False\n    if items[2]!= 'L' and items[2]!= 'l':\n        return False\n    if items[3]!= 'T' and items[3]!= 't':\n        return False\n    if items[4]!= 'I' and items[4]!= 'i':\n        return False\n    return True\ndef is_pilot_id_or_name(items):\n    '''\n    Write a function to check if a strin"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    i=0\n    while i<len(items):\n        if '(' in items[i]:\n            items[i]=items[i].split('(')[0]\n            items.insert(i+1, items[i].split('(')[1])\n        i=i+1\n    items=items[0:len(items)-1]\n    return items\ndef to_lower_case(items):\n    '''\n    Write a function to convert string to lowercase string.\n    '''\n    items=items.lower()\n    return items\ndef to_lower_case_and_add_dot(items):\n    '''\n    Write a function to convert string to lowercase string and add a dot to the end of string.\n    '''\n    items=to_lower_case(items)\n    items=items+'.'\n    return items\ndef remove_numbers(items):\n    '''\n    Write a function to remove all the numbers from a string.\n    '''\n    items=items.replace('1', '')\n    items=items.replace('2', '')\n    items=items.replace('3', '')\n    items=items.replace('4', '')\n    items=items.replace('5', '')\n    items=items.replace('6', '')\n    items=items.replace('7', '')\n    items=items.replace('8', '')\n    items=items.replace('9', '')\n    items=items.replace('0', '')\n    items=items.replace('-', '')\n    items=items.replace('_', '')\n    return items\ndef remove_accented_chars(items):\n    '''\n    Write a function to remove all the accents from a string.\n    '''\n    items=items.replace('\u00e1', '')\n    items=items.replace('\u00e0', '')\n    items=items.replace('\u00e2', '')\n    items=items.replace('\u00e4', '')\n    items=items.replace('\u00e9', '')\n    items=items.replace('\u00e8', '')\n    items=items.replace('\u00ea', '')\n    items=items.replace('\u00ed', '')\n    items=items.replace('\u00f3', '')\n    items=items.replace('\u00f2', '')\n    items=items.replace('\u00f4', '')\n    items=items.replace('\u00f6', '')\n    items=items.replace('\u00fa', '')\n    items=items.replace('\u00f9', '')\n    items=items.replace('\u00fc', '')\n    return items\ndef remove_special_characters(items):\n    '''\n    Write a function to remove all the special characters from a string.\n    '''\n    items=re.sub('[^a-zA-Z0-9 \\n\\.]', '', items)\n    return items\ndef remove_end_space(items):\n    '''\n    Write a function to remove the end space from a string.\n    '''\n    items=items.rstrip()\n    return items\ndef remove_start_space(items):\n    '''\n    Write a function to remove the start space from a string.\n    '''\n    items=items.lstrip()\n    return items\ndef check_comma_in_string(items):\n    '''\n    Write a function to check if there is a comma at the end of a string.\n    '''\n    if items.endswith(','):\n        items=items.rstrip(',')\n    return items\ndef remove_multiple_space(items):\n    '''\n    Write a function to remove multiple spaces from a string.\n    '''\n    items=re.sub(' +','', items)\n    return items\ndef check_whitespace_in_string(items):\n    '''\n    Write a function to check if there is a whitespace at the end of a string.\n    '''\n    if items.endswith(' '):\n        items=items.rstrip()\n    return items\ndef remove_end_whitespace(items):\n    '''\n    Write a function to remove the end space from a string.\n    '''\n    items=items.rstrip()\n    return items\ndef remove_extra_whitespace(items):\n    '''\n    Write a function to remove the extra white space from a string.\n    '''\n    items=items.strip()\n    return items\ndef remove_multiple_whitespace(items):\n    '''\n    Write a function to remove multiple white spaces from a string.\n    '''\n    items=re.sub(' +','', items)\n    return items\ndef remove_extra_space_in_between(items):\n    '''\n    Write a function to remove the extra space in between two string items.\n    '''\n    items=re.sub('\\s+','', items)\n    return items\ndef remove_leading_space(items):\n    '''\n    Write a function to remove the leading space from a string.\n    '''\n    items=items.lstrip()\n    return items\ndef remove_trailing_space(items):\n    '''\n    Write a function to remove the trailing space from a string.\n    '''\n    items=items.rstrip()\n    return items\ndef remove_multiple_spaces(items):\n    '''\n    Write a function to remove multiple white spaces from a string.\n    '''\n    items=re.sub(' +','', items)\n    return items\ndef remove_multiple_space_in_between(items):\n    '''\n    Write a function to remove multiple white spaces from a string.\n    '''\n    items=re.sub('\\s+','', items)\n    return items\ndef remove_multiple_space_in_between_start_and_end(items):\n    '''\n    Write a function to remove multiple white spaces from a string.\n    '''\n    items=re.sub('\\s+','', items)\n    return items\ndef remove_trailing_and_leading_whitespace(items):\n    '''\n    Write a function to remove the leading and trailing white space from a string.\n    '''\n    items=items.strip()\n    return items\ndef remove_multiple_whitespace_in_between(items):\n    '''\n    Write a function to remove multiple white spaces from a string.\n    '''\n    items=re.sub('\\s+','', items)\n    return items\ndef remove_multiple_whitespace_in_between_start_and_end(items):\n    '''\n    Write a function to remove multiple white spaces from a string.\n    '''\n    items=re.sub('\\s+','', items)\n    return items\ndef remove_multiple_whitespace_in_between_start_and_end(items):\n    '''\n    Write a function to remove multiple white spaces from a string.\n    '''\n    items=re.sub('\\s+','', items)\n    return items\ndef remove_whitespaces_in_between_strings(items):\n    '''\n    Write a function to remove the white spaces in between strings.\n    '''\n    items=re.sub('\\s+','', items)\n    return items\ndef remove_leading_and_trailing_whitespaces(items):\n    '''\n    Write a function to remove the leading and trailing white spaces from a string.\n    '''\n    items=items.strip()\n    return items\ndef remove_multiple_whitespaces(items):\n    '''\n    Write a function to remove multiple white spaces from a string.\n    '''\n    items=re.sub('\\s+','', items)\n    return items\ndef remove_multiple_whitespaces_in_between(items):\n    '''\n    Write a function to remove multiple white spaces from a string.\n    '''\n    items=re.sub('\\s+','', items)\n    return items\ndef remove_multiple_whitespaces_in_between_start_and_end(items):\n    '''\n    Write a function to remove multiple white spaces from a string.\n    '''\n    items=re.sub('\\s+','', items)\n    return items\ndef remove_multiple_whitespaces_in_between_start_and_end(items):\n    '''\n    Write a function to remove multiple white spaces from a string.\n    '''\n    items=re.sub('\\s+','', items)\n    return items\ndef remove_whitespaces_in_between_strings(items):\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    def remove_between(items):\n        new_items = items\n        pattern = re.compile('(\\d+|[a-z]+)')\n        \n        while True:\n            temp = pattern.findall(new_items)\n            if temp == []:\n                break\n            \n            if new_items[0] == '(' and new_items[-1] == ')':\n                new_items = new_items[1:-1]\n            else:\n                break\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    output = []\n    for item in items:\n        if re.search('\\(\\s?[^()]*', item):\n            item = re.sub('\\(\\s?[^()]*', '', item)\n            item = re.sub('\\s?\\)\\s?', '', item)\n            output.append(item)\n        else:\n            output.append(item)\n    return output\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        new_item = item.lstrip('(').rstrip(')')\n        new_items.append(new_item)\n    return new_items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = ''\n    for item in items:\n        if item == '(' or item == ')':\n            continue\n        else:\n            result += item\n    return result\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while True:\n        if len(items) < 2:\n            break\n        elif items[0] == \")\" and items[-1] == \"(\":\n            del items[0]\n            del items[-1]\n        else:\n            break\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # nonagonal = 1 + 3 + 5 +...\n    # n = 1, nonagonal = 1\n    # n = 2, nonagonal = 3\n    # n = 3, nonagonal = 5\n    # n = 4, nonagonal = 7\n    # n = 5, nonagonal = 11\n    # nonagonal = 13\n    # n = 6, nonagonal = 15\n    # nonagonal = 17\n    # n = 7, nonagonal = 19\n    # nonagonal = 21\n    # n = 8, nonagonal = 23\n    # nonagonal = 25\n    # nonagonal = 27\n    # n = 9, nonagonal = 29\n    # nonagonal = 31\n    # nonagonal = 33\n    # n = 10, nonagonal = 35\n    # nonagonal = 37\n    # nonagonal = 39\n    # n = 11, nonagonal = 41\n    # nonagonal = 43\n    # n = 12, nonagonal = 45\n    # nonagonal = 47\n    # nonagonal = 49\n    # n = 13, nonagonal = 51\n    # nonagonal = 53\n    # nonagonal = 55\n    # n = 14, nonagonal = 57\n    # nonagonal = 59\n    # nonagonal = 61\n    # n = 15, nonagonal = 63\n    # nonagonal = 65\n    # nonagonal = 67\n    # n = 16, nonagonal = 69\n    # nonagonal = 71\n    # nonagonal = 73\n    # n = 17, nonagonal = 75\n    # nonagonal = 77\n    # nonagonal = 79\n    # n = 18, nonagonal = 81\n    # nonagonal = 83\n    # nonagonal = 85\n    # n = 19, nonagonal = 87\n    # nonagonal = 89\n    # nonagonal = 91\n    # n = 20, nonagonal = 93\n    # nonagonal = 95\n    # nonagonal = 97\n    # n = 21, nonagonal = 99\n    # nonagonal = 101\n    # nonagonal = 103\n    # n = 22, nonagonal = 105\n    # nonagonal = 107\n    # nonagonal = 109\n    # n = 23, nonagonal = 111\n    # nonagonal = 113\n    # nonagonal = 115\n    # n = 24, nonagonal = 117\n    # nonagonal = 119\n    # nonagonal = 121\n    # n = 25, nonagonal = 123\n    # nonagonal = 125\n    # nonagonal = 127\n    # n = 26, nonagonal = 129\n    # nonagonal = 131\n    # nonagonal = 133\n    # n = 27, nonagonal = 135\n    # nonagonal = 137\n    # nonagonal = 139\n    # n = 28, nonagonal = 141\n    # nonagonal = 143\n    # nonagonal = 145\n    # n = 29, nonagonal = 147\n    # nonagonal = 149\n    # nonagonal = 151\n    # n = 30, nonagonal = 153\n    # nonagonal = 155\n    # nonagonal = 157\n    # n = 31, nonagonal = 159\n    # nonagonal = 161\n    # nonagonal = 163\n    # n = 32, nonagonal = 165\n    # nonagonal = 167\n    # nonagonal = 169\n    # n = 33, nonagonal = 171\n    # nonagonal = 173\n    # nonagonal = 175\n    # n = 34, nonagonal = 177\n    # nonagonal = 179\n    # nonagonal = 181\n    # n = 35, nonagonal = 183\n    # nonagonal = 185\n    # nonagonal = 187\n    # n = 36, nonagonal = 189\n    # nonagonal = 191\n    # nonagonal = 193\n    # n = 37, nonagonal = 195\n    # nonagonal = 197\n    # nonagonal = 199\n    # n = 38, nonagonal = 201\n    # nonagonal = 203\n    # nonagonal = 205\n    # n = 39, nonagonal = 207\n    # nonagonal = 209\n    # nonagonal = 211\n    # n = 40, nonagonal = 213\n    # nonagonal = 215\n    # nonagonal = 217\n    # n = 41, nonagonal = 219\n    # nonagonal = 221\n    # nonagonal = 223\n    # n = 42, nonagonal = 225\n    # nonagonal = 227\n    # nonagonal = 229\n    # n = 43, nonagonal = 231\n    # nonagonal = 233\n    # nonagonal = 235\n    # n = 44, nonagonal = 237\n    # nonagonal = 239\n    # nonagonal = 241\n    # n = 45, nonagonal = 243\n    # nonagonal = 245\n    # nonagonal = 247\n    # n = 46, nonagonal = 249\n    # nonagonal = 251\n    # nonagonal = 253\n    # n = 47, nonagonal = 255\n    # nonagonal = 257\n    # nonagonal = 259\n    # n = 48, nonagonal = 261\n    # nonagonal = 263\n    # nonagonal = 265\n    # n = 49, nonagonal = 267\n    # nonagonal = 269\n    # nonagonal = 271\n    # n = 50, nonagonal = 273\n    # nonagonal = 275\n    # nonagonal = 277\n    # n = 51, nonagonal = 279\n    # nonagonal = 281\n    # nonagonal = 283\n    # n = 52, nonagonal = 285\n    # nonagonal = 287\n    # nonagonal = 289\n    # n = 53, nonagonal = 291\n    # nonagonal = 293\n    # nonagonal = 295\n    # n = 54, nonagonal = 297\n    # nonagonal = 299\n    # nonagonal = 301\n    # n = 55, nonagonal = 303\n    # nonagonal = 305\n    # nonagonal = 307\n    # n = 56, nonagonal = 309\n    # nonagonal = 311\n    # nonagonal = 313\n    # n = 57, nonagonal = 315\n    # nonagonal = 317\n    # nonagonal = 319\n    # n = 58, nonagonal = 321\n    # nonagonal = 323\n    # nonagonal = 325\n    # n = 59, nonagonal = 327\n    # nonagonal = 329\n    # nonagonal = 331\n    # n = 60, nonagonal = 333\n    # nonagonal = 335\n    # nonagonal = 337\n    # n = 61, nonagonal = 339\n    # nonagonal = 341\n    # nonagonal = 343\n    # n = 62, nonagonal = 345\n    # nonagonal = 347\n    # nonagonal = 349\n    # n = 63, nonagonal = 351\n    # nonagonal = 353\n    # nonagonal = 355\n    # n = 64, nonagonal = 357\n    # nonagonal = 359\n    # nonagonal = 361\n    # n = 65, nonagonal = 363\n    # nonagonal = 365\n    # nonagonal = 367\n    # n = 66, nonagonal = 369\n    # nonagonal = 371\n    # nonagonal = 373\n    # n = 67, nonagonal = 375\n    # nonagonal = 377\n    # nonagonal = 379\n    # n = 68, nonagonal = 383\n    # nonagonal = 385\n    # nonagonal = 387\n    # n = 69, nonagonal = 389\n    # nonagonal = 391\n    # nonagonal = 393\n    # n = 70, nonagonal = 395\n    # nonagonal = 397\n    # nonagonal = 399\n    # n = 71, nonagonal = 401\n    # nonagonal = 403\n    # nonagonal = 405\n    # n = 72, nonagonal = 407\n    # nonagonal = 409\n    # nonagonal = 411\n    # n = 73, nonagonal = 413\n    # nonagonal = 415\n    # nonagonal = 417\n    # n = 74, nonagonal = 419\n    # nonagonal = 421\n    # nonagonal = 423\n    # n = 75, nonagonal = 425\n    # nonagonal = 427\n    # nonagonal = 429\n    # n = 76, nonagonal = 431\n    # nonagonal = 433\n    # nonagonal = 435\n    # n = 77, nonagonal = 437\n    # nonagonal = 439\n    # nonagonal = 441\n    # n = 78, nonagonal = 443\n    # nonagonal = 445\n    # nonagonal = 447\n    # n = 79, nonagonal = 449\n    # nonagonal = 451\n    # nonagonal = 453\n    # n = 80, nonagonal = 455\n    # nonagonal = 457\n    # nonagonal = 459\n    # n = 81, nonagonal = 461\n    # nonagonal = 463\n    # nonagonal = 465\n    # n = 82, nonagonal = 467\n    # nonagonal = 469\n    # nonagonal = 471\n    # n = 83, nonagonal = 473\n    # nonagonal = 475\n    "
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    l = [1,2,3]\n    for i in range(4,n+1):\n        l.append(l[-1]-l[-2])\n    return l[-1]"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 6\n    else:\n        return 2*(n**2)-1\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n + 1)) / 2\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n - 1) * (n - 2) + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    count = 0\n    result = 1\n    while count < n:\n        result += 2 * (n - count)\n        count += 1\n    return result\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * (n - 2)\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * (n - 1) + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # 2 non-diagonals are 3n - 1, 3n - 2\n    # non-diagonals are 2n-1, 2n-2, 3n - 1, 3n - 2, 3n - 3\n    # so, for n = 1, 2, 3, 4, 5, 6, 7, 8\n    # the non-diagonal number is 3n - 1, 3n - 2, 3n - 3\n    # if n is odd, return 3n - 1\n    # if n is even, return 3n - 2\n    if (n%2 == 0):\n        return 3*n - 2\n    else:\n        return 3*n - 1\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n**2 - (n - 1)**2\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    word = 'z'\n    if word in text:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    list_of_words = text.split(' ')\n    for word in list_of_words:\n        if word[0]!= 'z' or word[-1]!= 'z':\n            return False\n    return True\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0]!= 'z' and text[-1]!= 'z':\n        return False\n    else:\n        return True\ndef text_match_wordz_middle_best(text):\n    return text[1:-1].lower().startswith('z') and text[:-1].lower().endswith('z')\ndef text_match_wordz_middle_hash(text):\n    return text[1:-1].lower().startswith('z') and text[:-1].lower().endswith('z')\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0] == \"z\" and text[len(text)-1] == \"z\":\n        print \"True\"\n    else:\n        print \"False\"\n    return\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = text.split(' ')\n    count = 0\n    for word in words:\n        if word[0]!= 'z' and word[-1]!= 'z':\n            count += 1\n    return count\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    patt = re.compile('z+[a-zA-Z]+z+')\n    if patt.search(text):\n        return True\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    \n    def middle_condition(words):\n        \n        for i in range(1, len(words)-1):\n            if words[i] == 'z' and words[i-1]!= 'z' and words[i+1]!= 'z':\n                return True\n        return False\n    return middle_condition(text)\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0]!= 'z' and text[-1]!= 'z':\n        return True\n    return False\ndef text_match_wordz_middle2(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0] == 'z' or text[-1] == 'z':\n        return False\n    return True\ndef text_match_wordz_middle3(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if (text[0]!= 'z' and text[-1]!= 'z') or (text[0] == 'z' or text[-1] == 'z'):\n        return False\n    return True\ndef text_match_wordz_middle4(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z', text):\n        return False\n    return True\ndef text_match_wordz_middle5(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z', text) and (text[0]!= 'z' and text[-1]!= 'z'):\n        return True\n    return False\ndef text_match_wordz_middle6(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z', text) and (text[0] == 'z' or text[-1] == 'z'):\n        return False\n    return True\ndef text_match_wordz_middle7(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if (re.search('z', text) and (text[0]!= 'z' and text[-1]!= 'z')):\n        return True\n    return False\ndef text_match_wordz_middle8(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if (re.search('z', text) and (text[0] == 'z' or text[-1] == 'z')):\n        return False\n    return True\ndef text_match_wordz_middle9(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z', text) and (text[0]!= 'z' and text[-1]!= 'z'):\n        return True\n    return False\ndef text_match_wordz_middle10(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z', text) and (text[0] == 'z' or text[-1] == 'z'):\n        return False\n    return True\ndef text_match_wordz_middle11(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z', text) and (text[0]!= 'z' and text[-1]!= 'z'):\n        return True\n    return False\ndef text_match_wordz_middle12(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z', text) and (text[0] == 'z' or text[-1] == 'z'):\n        return False\n    return True\ndef text_match_wordz_middle13(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if (re.search('z', text) and (text[0]!= 'z' and text[-1]!= 'z')):\n        return True\n    return False\ndef text_match_wordz_middle14(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if (re.search('z', text) and (text[0] == 'z' or text[-1] == 'z')):\n        return False\n    return True\ndef text_match_wordz_middle15(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if (re.search('z', text) and (text[0]!= 'z' and text[-1]!= 'z')):\n        return True\n    return False\ndef text_match_wordz_middle16(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if (re.search('z', text) and (text[0] == 'z' or text[-1] == 'z')):\n        return False\n    return True\ndef text_match_wordz_middle17(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if (re.search('z', text) and (text[0]!= 'z' and text[-1]!= 'z')):\n        return True\n    return False\ndef text_match_wordz_middle18(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if (re.search('z', text) and (text[0] == 'z' or text[-1] == 'z')):\n        return False\n    return True\ndef text_match_wordz_middle19(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if (re.search('z', text) and (text[0]!= 'z' and text[-1]!= 'z')):\n        return True\n    return False\ndef text_match_wordz_middle20(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if (re.search('z', text) and (text[0] == 'z' or text[-1] == 'z')):\n        return False\n    return True\ndef text_match_wordz_middle21(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if (re.search('z', text) and (text[0]!= 'z' and text[-1]!= 'z')):\n        return True\n    return False\ndef text_match_wordz_middle22(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if (re.search('z', text) and (text[0] == 'z' or text[-1] == 'z')):\n        return False\n    return True\ndef text_match_wordz_middle23(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if (re.search('z', text) and (text[0]!= 'z' and text[-1]!= 'z')):\n        return True\n    return False\ndef text_match_wordz_middle24(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if (re.search('z', text) and (text[0] == 'z' or text[-1] == 'z')):\n        return False\n    return True"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z\\w*z', text):\n        return True\n    else:\n        return False\ndef text_match_wordz_exact(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z.z', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input = input[:]\n    for i in range(len(input)-1, k-1, -1):\n        input[i], input[i-1] = input[i-1], input[i]\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    count = k -1\n    start = 0\n    end = count\n    while(start <= end):\n        input[start], input[end] = input[end], input[start]\n        start = start + 1\n        end = end - 1\n    return input\n    \ndef reverse_Array_Every_K_Elements(input, k): \n    '''\n    Write a python function to reverse an array every k elements.\n    '''\n    i = 0\n    while(i < len(input)):\n        input[i:i+k] = input[i:i+k][::-1]\n        i = i + k\n    return input\n    \ndef isPalindrome(input): \n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    reverse_Array_Upto_K(input, len(input))\n    return input == input[::-1]\n    \ndef isPalindrome2(input): \n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    i = 0\n    j = len(input) - 1\n    while(i <= j):\n        if (input[i]!= input[j]):\n            return False\n        i = i + 1\n        j = j - 1\n    return True\n    \ndef isPalindrome3(input): \n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    left = 0\n    right = len(input) - 1\n    while(left < right):\n        if (input[left]!= input[right]):\n            return False\n        left = left + 1\n        right = right - 1\n    return True\n    \ndef isPalindrome4(input): \n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    input = input.lower()\n    i = 0\n    j = len(input) - 1\n    while(i <= j):\n        if (input[i]!= input[j]):\n            return False\n        i = i + 1\n        j = j - 1\n    return True\n    \ndef isPalindrome5(input): \n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    left = 0\n    right = len(input) - 1\n    while(left < right):\n        if (input[left]!= input[right]):\n            return False\n        left = left + 1\n        right = right - 1\n    return True\n    \ndef isPalindrome6(input): \n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    input = input.lower()\n    i = 0\n    j = len(input) - 1\n    while(i < j):\n        if (input[i]!= input[j]):\n            return False\n        i = i + 1\n        j = j - 1\n    return True\n    \ndef isPalindrome7(input): \n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    input = input.lower()\n    i = 0\n    j = len(input) - 1\n    while(i < j):\n        if (input[i]!= input[j]):\n            return False\n        i = i + 1\n        j = j - 1\n    return True\n    \ndef isPalindrome8(input): \n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    input = input.lower()\n    i = 0\n    j = len(input) - 1\n    while(i < j):\n        if (input[i]!= input[j]):\n            return False\n        i = i + 1\n        j = j - 1\n    return True\n    \ndef isPalindrome9(input): \n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    input = input.lower()\n    i = 0\n    j = len(input) - 1\n    while(i < j):\n        if (input[i]!= input[j]):\n            return False\n        i = i + 1\n        j = j - 1\n    return True\n    \ndef isPalindrome10(input): \n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    input = input.lower()\n    i = 0\n    j = len(input) - 1\n    while(i < j):\n        if (input[i]!= input[j]):\n            return False\n        i = i + 1\n        j = j - 1\n    return True\n    \ndef isPalindrome11(input): \n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    input = input.lower()\n    i = 0\n    j = len(input) - 1\n    while(i < j):\n        if (input[i]!= input[j]):\n            return False\n        i = i + 1\n        j = j - 1\n    return True\n    \ndef isPalindrome12(input): \n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    input = input.lower()\n    i = 0\n    j = len(input) - 1\n    while(i < j):\n        if (input[i]!= input[j]):\n            return False\n        i = i + 1\n        j = j - 1\n    return True\n    \ndef isPalindrome13(input): \n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    input = input.lower()\n    i = 0\n    j = len(input) - 1\n    while(i < j):\n        if (input[i]!= input[j]):\n            return False\n        i = i + 1\n        j = j - 1\n    return True\n    \ndef isPalindrome14(input): \n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    input = input.lower()\n    i = 0\n    j = len(input) - 1\n    while(i < j):\n        if (input[i]!= input[j]):\n            return False\n        i = i + 1\n        j = j - 1\n    return True\n    \ndef isPalindrome15(input): \n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    input = input.lower()\n    i = 0\n    j = len(input) - 1\n    while(i < j):\n        if (input[i]!= input[j]):\n            return False\n        i = i + 1\n        j = j - 1\n    return True\n    \ndef isPalindrome16(input): \n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    input = input.lower()\n    i = 0\n    j = len(input) - 1\n    while(i < j):\n        if (input[i]!= input[j]):\n            return False\n        i = i + 1\n        j = j - 1\n    return True\n    \ndef isPalindrome17(input): \n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    input = input.lower()\n    i = 0\n    j = len(input) - 1\n    while(i < j):\n        if (input[i]!= input[j]):\n            return False\n        i = i + 1\n        j = j - 1\n    return True\n    \ndef isPalindrome18(input): \n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    input = input.lower()\n    i = 0\n    j = len(input) - 1\n    while(i < j):\n        if (input[i]!= input[j]):\n            return False\n        i = i + 1\n        j = j - 1\n    return True\n    \ndef isPalindrome1"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    i = 0\n    while i < k:\n        input.append(input.pop(0))\n        i+=1\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    def reverseArray(arr, start, end): \n        while start < end: \n            temp = arr[start] \n            arr[start] = arr[end] \n            arr[end] = temp \n            start += 1\n            end -= 1\n    \n    n = len(input) \n    if k > n: \n        print(\"Invalid input\") \n    else: \n        reverseArray(input, 0, k-1) \n        reverseArray(input, k, n-1) \n        reverseArray(input, 0, n-1) \n        \n    return input\n    \n    \n    \ndef reverse_LinkedList(head): \n    '''\n    Write a python function to reverse a linked list. \n    '''\n    \n    def reverse_linked_list(head): \n        if head == None or head.next == None: \n            return head\n        smaller_head = reverse_linked_list(head.next)\n        head.next.next = head\n        head.next = None\n        return smaller_head\n    \n    \n    \n    # Reverse a given linked list \n    rev = None\n    while head: \n        tmp = head.next\n        head.next = rev \n        rev = head \n        head = tmp \n    return rev \n    \n    \n    \n    \ndef reverse_LinkedList_In_Place(head): \n    '''\n    Write a python function to reverse a linked list in place. \n    '''\n    \n    # Reverse a given linked list \n    def reverse_linked_list_in_place(head): \n        if head == None or head.next == None: \n            return head \n        smallerHead = reverse_linked_list_in_place(head.next)\n        head.next.next = head\n        head.next = None\n        return smallerHead \n    \n    return reverse_linked_list_in_place(head)\n    \n    \n    \ndef is_palindrome_linked_list(head): \n    '''\n    Write a python function to check if a linked list is a palindrome. \n    '''\n    def reverse_list(head): \n        if head == None or head.next == None: \n            return head \n        smallerHead = reverse_list(head.next)\n        head.next.next = head\n        head.next = None\n        return smallerHead \n    \n    slow = fast = head \n    while fast and fast.next: \n        slow = slow.next\n        fast = fast.next.next \n    \n    if fast: \n        slow = slow.next \n    \n    new_head = reverse_list(slow) \n    \n    while new_head: \n        if new_head.val!= head.val: \n            return False\n        head = head.next \n        new_head = new_head.next \n    return True \n    \n    \n    \ndef is_palindrome_Array(arr): \n    '''\n    Write a python function to check if a given array is a palindrome. \n    '''\n    \n    left = 0 \n    right = len(arr)-1 \n    while left <= right: \n        if arr[left]!= arr[right]: \n            return False \n        left += 1 \n        right -= 1 \n    return True \n    \n    \n    \ndef is_palindrome_LinkedList(head): \n    '''\n    Write a python function to check if a given linked list is a palindrome. \n    '''\n    \n    def reverse(head): \n        if head == None or head.next == None: \n            return head \n        smallerHead = reverse(head.next)\n        head.next.next = head\n        head.next = None\n        return smallerHead \n    \n    def is_palindrome(head): \n        fast = slow = head \n        while fast and fast.next: \n            slow = slow.next\n            fast = fast.next.next \n        if fast: \n            slow = slow.next \n        \n        new_head = reverse(slow) \n        \n        while new_head: \n            if new_head.val!= head.val: \n                return False\n            head = head.next \n            new_head = new_head.next \n        return True \n    \n    return is_palindrome(head)\n    \n    \n    \ndef is_palindrome_LinkedList_2nd_Solution(head): \n    '''\n    Write a python function to check if a given linked list is a palindrome. \n    '''\n    \n    def reverse(head): \n        if head == None or head.next == None: \n            return head \n        smallerHead = reverse(head.next)\n        head.next.next = head\n        head.next = None\n        return smallerHead \n    \n    def is_palindrome(head): \n        fast = slow = head \n        while fast and fast.next: \n            slow = slow.next\n            fast = fast.next.next \n        if fast: \n            slow = slow.next \n        \n        new_head = reverse(slow) \n        \n        while new_head: \n            if new_head.val!= head.val: \n                return False\n            head = head.next \n            new_head = new_head.next \n        return True \n    \n    return is_palindrome(head) \n    \n    \n    \ndef partition(head, x): \n    '''\n    Write a python function to partition a linked list around a value x. \n    '''\n    def partition_helper(head, x): \n        if head == None: \n            return None \n        \n        smallerHead = None \n        smallerTail = None \n        greaterHead = None \n        greaterTail = None \n        \n        current = head \n        while current: \n            if current.val < x: \n                if smallerHead == None: \n                    smallerHead = current \n                    smallerTail = current \n                else: \n                    smallerTail.next = current \n                    smallerTail = current \n            else: \n                if greaterHead == None: \n                    greaterHead = current \n                    greaterTail = current \n                else: \n                    greaterTail.next = current \n                    greaterTail = current \n            current = current.next \n        \n        if smallerHead == None: \n            return greaterHead \n        smallerTail.next = greaterHead \n        return smallerHead \n    \n    return partition_helper(head, x) \n    \n    \n    \n    \ndef partition_2(head, x): \n    '''\n    Write a python function to partition a linked list around a value x. \n    '''\n    \n    # Base case: empty list \n    if head == None: \n        return None \n    \n    # Base case: head node is the pivot \n    if head.val == x: \n        return head \n    \n    # Recursive case \n    smallerHead = partition_2(head.next, x) \n    head.next = smallerHead \n    return head \n    \n    \n    \ndef find_kth_element_in_array(arr, k): \n    '''\n    Write a python function to find the kth element in a sorted array. \n    '''\n    def find_kth_element_in_array_helper(arr, k, start, end): \n        if start > end: \n            return None \n        \n        if k == start: \n            return arr[start] \n        mid = (start+end)/2 \n        if mid+1 < end and arr[mid+1] > arr[mid]: \n            return find_kth_element_in_array_helper(arr, k, mid+1, end) \n        elif mid > start and arr[mid] < arr[mid-1]: \n            return find_kth_element_in_array_helper(arr, k, start, mid-1) \n        else: \n            return find_kth_element_in_array_helper(arr, k, mid+1, end) \n    return find_kth_element_in_array_helpe"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if (input == None or len(input) == 0): \n        return None\n    if (k < 0 or k > len(input)): \n        print (\"Invalid Position\") \n        return None\n    else: \n        return input[len(input) - k:len(input)]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    i, j, k = 0, 0, k-1\n    input = input[::-1]\n    while i < k:\n        input[i], input[j] = input[j], input[i]\n        i += 1\n        j += 1\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[k:][::-1]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k == 0:\n        return input\n    else:\n        return input[k:] + input[:k]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    result = []\n    for i in range(k, len(input)):\n        result.append(input[i])\n    for i in range(0, k):\n        result.append(input[i])\n    return result\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input = list(input)\n    count = 0\n    for i in range(k):\n        count = count + 1\n        input[i], input[k - count] = input[k - count], input[i]\n    return ''.join(input)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return_tup = ()\n    return_tup = test_tup + (test_dict,)\n    return return_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup\n    for key in test_dict:\n        new_tup = new_tup + (test_dict[key],)\n    return new_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup) + tuple(test_dict)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1], test_dict)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    tup = tuple(test_tup)\n    for key in test_dict.keys():\n        tup = tup + (test_dict[key],)\n    return tup\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup + tuple(test_dict.values()))\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = ()\n    for item in test_tup:\n        if item in test_dict.keys():\n            new_tup = new_tup + (test_dict[item],)\n        else:\n            new_tup = new_tup + (item,)\n    return new_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup[:]\n    new_tup.append(test_dict)\n    return tuple(new_tup)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = ()\n    for item in test_tup:\n        new_tup = new_tup + (item,)\n    for key, value in test_dict.items():\n        new_tup = new_tup + (value,)\n    return new_tup\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for i in xrange(n)] for j in xrange(n)]\n    dp[0][0] = cost[0][0]\n    for i in xrange(1, n):\n        dp[0][i] = cost[0][i] + dp[0][i-1]\n    for i in xrange(1, n):\n        dp[i][0] = cost[i][0] + dp[i-1][0]\n    for i in xrange(1, n):\n        for j in xrange(1, n):\n            dp[i][j] = cost[i][j] + min(dp[i-1][j], dp[i][j-1])\n    maxSum = dp[n-1][n-1]\n    for i in xrange(n-1, -1, -1):\n        for j in xrange(i+1, n):\n            maxSum = max(maxSum, dp[i][j] - maxSum)\n    return maxSum / (n*n)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def maxAverageOfPath(cost, i, j):\n        if i == len(cost)-1 and j == len(cost[0])-1:\n            return cost[i][j]\n        max_path = cost[i][j]\n        if i < len(cost)-1:\n            max_path = max(max_path, maxAverageOfPath(cost, i+1, j))\n        if j < len(cost[0])-1:\n            max_path = max(max_path, maxAverageOfPath(cost, i, j+1))\n        return max_path\n    \n    max_cost = 0\n    for i in xrange(len(cost)):\n        max_cost = max(max_cost, maxAverageOfPath(cost, 0, 0))\n    return max_cost\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows, cols = len(cost), len(cost[0])\n    dp = [cols*[float('inf')] for _ in range(rows)]\n    max_avg, total, visited = 0, 0, 0\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n    for j in range(1,n):\n        dp[0][j] = cost[0][j] + dp[0][j-1]\n    for i in range(1,n):\n        for j in range(1,n):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j],dp[i][j-1])\n    res = dp[n-1][n-1]\n    for i in range(n-1,-1,-1):\n        for j in range(i,-1,-1):\n            res = min(res,dp[i][j])\n    return res\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows,cols = len(cost),len(cost[0])\n    dp = [[0]*cols for _ in range(rows)]\n    \n    for i in range(rows):\n        for j in range(cols):\n            dp[i][j] = cost[i][j]\n            if i==j==0:\n                continue\n            if j == 0:\n                dp[i][j] += dp[i-1][j]\n            elif i == 0:\n                dp[i][j] += dp[i][j-1]\n            else:\n                dp[i][j] += max(dp[i-1][j],dp[i][j-1])\n    \n    print dp\n    return dp[-1][-1]/float(rows*cols)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    m = len(cost[0])\n    paths = [[[None, None] for i in range(m)] for j in range(n)]\n    # cost[i][j] = min(cost[i-1][j], cost[i][j-1]) + cost[i][j]\n    max_path = [0, None]\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                paths[i][j][0] = cost[i][j]\n            elif i == 0 and j!= 0:\n                paths[i][j][0] = paths[i][j-1][0] + cost[i][j]\n            elif i!= 0 and j == 0:\n                paths[i][j][1] = paths[i-1][j][1] + cost[i][j]\n            else:\n                paths[i][j][0] = min(paths[i-1][j][0], paths[i][j-1][0]) + cost[i][j]\n                paths[i][j][1] = min(paths[i-1][j][1], paths[i][j-1][1]) + cost[i][j]\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if not cost:\n        return 0\n    rows, cols = len(cost), len(cost[0])\n    max_sum = [[0] * cols for i in range(rows)]\n    max_sum[0][0] = cost[0][0]\n    for i in range(1, rows):\n        max_sum[i][0] = max_sum[i-1][0] + cost[i][0]\n    for j in range(1, cols):\n        max_sum[0][j] = max_sum[0][j-1] + cost[0][j]\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m = len(cost)\n    n = len(cost[0])\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    cols = len(cost[0])\n    cost.append([0 for i in xrange(cols)])\n    cost.append([0 for i in xrange(cols)])\n    for i in xrange(rows+1):\n        cost[i].append(0)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    cols = len(cost[0])\n    max_val = -sys.maxsize\n    if rows == 0:\n        return 0\n    if rows == 1:\n        return cost[0][0]\n    if cols == 1:\n        return max(cost[0][0], cost[1][0])\n    if rows == 2:\n        return max(cost[0][0] + cost[1][1], cost[1][0] + cost[0][1])\n    if rows == 3:\n        return max(cost[0][0] + cost[1][1] + cost[2][2], cost[1][0] + cost[2][1] + cost[2][2], cost[0][1] + cost[1][2] + cost[2][1])\n    for i in range(rows):\n        for j in range(cols):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                t1 = cost[i][j-1] + cost[i][j]\n                t2 = cost[i][j-1]\n                max_val = max(max_val, t1, t2)\n            elif j == 0:\n                t1 = cost[i-1][j] + cost[i][j]\n                t2 = cost[i-1][j]\n                max_val = max(max_val, t1, t2)\n            else:\n                t1 = cost[i][j-1] + cost[i][j]\n                t2 = cost[i-1][j] + cost[i][j-1]\n                t3 = cost[i-1][j-1]\n                max_val = max(max_val, t1, t2, t3)\n    return max_val\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for student,(height,weight) in students.items():\n        if height > h and weight > w:\n            result[student] = (height,weight)\n    return result\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for student,data in students.iteritems():\n        if data[0] > h and data[1] > w:\n            result[student] = data\n    return result\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # write your code here\n    out=[]\n    for s in students:\n        if students[s][0]>=h and students[s][1]>=w:\n            out.append(s)\n    return out\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student,(height,weight) in students.items():\n        if height >= h and weight >= w:\n            print(student)\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student in students.values():\n        if student[0] > h and student[1] > w:\n            pass\n        else:\n            del students[student[0]]\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students_filtered = {}\n    for name,student_tuple in students.items():\n        if student_tuple[0] > h and student_tuple[1] > w:\n            students_filtered[name] = student_tuple\n    return students_filtered\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {key:value for key,value in students.items() if value[0]>h and value[1]>w}\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student,details in students.items():\n        height = details[0]\n        weight = details[1]\n        if(height>=h and weight>=w):\n            yield student\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    out = {}\n    for student, values in students.items():\n        if values[0] > h and values[1] > w:\n            out[student] = values\n    return out\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name in students:\n        if (students[name][0] > h and students[name][1] > w):\n            result[name] = students[name]\n    return result\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    index = 0\n    count = 0\n    while index < len(nums1):\n        if nums1[index] == nums2[index]:\n            count += 1\n        index += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    counter = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    dict1 = {}\n    dict2 = {}\n    for i in range(len(nums1)):\n        dict1[nums1[i]] = i\n    for j in range(len(nums2)):\n        dict2[nums2[j]] = j\n    same = 0\n    for key in dict1:\n        if key in dict2:\n            same += 1\n    return same\ndef sort_an_array(nums):\n    '''\n    Given an array with n elements, write a function to sort this array.\n    The algorithm is an insertion sort.\n    '''\n    for i in range(1, len(nums)):\n        cur = nums[i]\n        j = i-1\n        while j >= 0 and nums[j] > cur:\n            nums[j+1] = nums[j]\n            j -= 1\n        nums[j+1] = cur\n    return nums\ndef sort_array_using_sort_and_two_pointers(nums):\n    '''\n    Given an array with n elements, write a function to sort this array.\n    The algorithm is an insertion sort.\n    '''\n    if not nums:\n        return []\n    for i in range(1, len(nums)):\n        if nums[i] < nums[i-1]:\n            temp = nums[i]\n            for j in range(i, 0, -1):\n                if temp < nums[j-1]:\n                    nums[j] = nums[j-1]\n                else:\n                    nums[j] = temp\n                    break\n    return nums\ndef sort_array_using_merge(nums):\n    '''\n    Given an array with n elements, write a function to sort this array.\n    The algorithm is an insertion sort.\n    '''\n    if not nums:\n        return []\n    def merge(nums, p, q, r):\n        left_len = q - p + 1\n        right_len = r - q\n        left_list = [0] * left_len\n        right_list = [0] * right_len\n        for i in range(left_len):\n            left_list[i] = nums[p+i]\n        for i in range(right_len):\n            right_list[i] = nums[q+i+1]\n        i = 0\n        j = 0\n        for k in range(p, r+1):\n            if i >= left_len:\n                nums[k] = right_list[j]\n                j += 1\n            elif j >= right_len:\n                nums[k] = left_list[i]\n                i += 1\n            elif left_list[i] <= right_list[j]:\n                nums[k] = left_list[i]\n                i += 1\n            else:\n                nums[k] = right_list[j]\n                j += 1\n    def sort_helper(nums, p, r):\n        if p < r:\n            q = int((p+r)/2)\n            sort_helper(nums, p, q)\n            sort_helper(nums, q+1, r)\n            merge(nums, p, q, r)\n    sort_helper(nums, 0, len(nums)-1)\n    return nums\ndef count_ways(nums):\n    '''\n    Given a sorted array of integers, find the number of ways to reach the last index of an array.\n    '''\n    if not nums:\n        return 0\n    memo = [0] * (len(nums)+1)\n    memo[0] = 1\n    for i in range(1, len(memo)):\n        if i >= nums[0]:\n            memo[i] = memo[i-nums[0]]\n        if i >= nums[0]+1:\n            memo[i] += memo[i-1]\n        if i >= nums[0]+2:\n            memo[i] += memo[i-2]\n    return memo[len(memo)-1]\ndef sort_list(nums):\n    '''\n    Given a list of integers, sort the array and return the result.\n    '''\n    if not nums:\n        return []\n    for i in range(1, len(nums)):\n        cur = nums[i]\n        j = i-1\n        while j >= 0 and nums[j] > cur:\n            nums[j+1] = nums[j]\n            j -= 1\n        nums[j+1] = cur\n    return nums\ndef kth_smallest(nums, k):\n    '''\n    Given a list of integers, find the kth smallest value in the list.\n    '''\n    if not nums:\n        return None\n    if k >= len(nums):\n        return None\n    low = 0\n    high = len(nums) - 1\n    while low <= high:\n        pivot = low + (high-low) / 2\n        if nums[pivot] < nums[k]:\n            low = pivot + 1\n        elif nums[pivot] > nums[k]:\n            high = pivot - 1\n        else:\n            return nums[k]\n    return nums[k-low]\ndef is_valid_move(field, row, col, direction):\n    '''\n    Write a function that accepts three parameters:\n    A field, a row and a column of the field.\n    The function should return true if there is a valid move to make on the field.\n    The field is a 2D array where each element is a string consisting of 'X', 'O' or '.'.\n    The row and the column are positive integers between 0 and the number of rows/columns in the field.\n    The direction parameter is either 'up', 'down', 'left' or 'right'.\n    '''\n    field_len = len(field)\n    if direction == 'up':\n        if row - 1 >= 0 and field[row-1][col]!= 'X' and field[row-1][col]!= 'O':\n            return True\n        else:\n            return False\n    elif direction == 'down':\n        if row + 1 < field_len and field[row+1][col]!= 'X' and field[row+1][col]!= 'O':\n            return True\n        else:\n            return False\n    elif direction == 'left':\n        if col - 1 >= 0 and field[row][col-1]!= 'X' and field[row][col-1]!= 'O':\n            return True\n        else:\n            return False\n    elif direction == 'right':\n        if col + 1 < field_len and field[row][col+1]!= 'X' and field[row][col+1]!= 'O':\n            return True\n        else:\n            return False\n    else:\n        return False\ndef game_state(field):\n    '''\n    Write a function that accepts a field as input and returns the state of the game.\n    The field is a 2D array where each element is a string consisting of 'X', 'O' or '.'.\n    The function should return the state of the game:\n    'WON' if someone has won the game,\n    'CONTINUE' if the game is still going on,\n    'DRAW' if the game ended in a draw.\n    '''\n    field_len = len(field)\n    row_count = field_len\n    col_count = len(field[0])\n    if field_len < 3:\n        return 'CONTINUE'\n    for row in range(field_len):\n        if field[row][0] == field[row][1] and field[row][1] == field[row][2] and field[row][0]!= '.':\n            return 'WON'\n        if field[0][row] == field[1][row] and field[1][row] == field[2][row] and field[0][row]!= '.':\n            return 'WON'\n    for col in range(3):\n        if field[0][col] == field[1][col] and field[1][col] == field[2][col] and field[0][col]!= '.':\n            return 'WON'\n        i"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    hash_table = {}\n    result = []\n    for i in range(len(nums1)):\n        if nums1[i] in hash_table:\n            hash_table[nums1[i]] += 1\n        else:\n            hash_table[nums1[i]] = 1\n    for i in range(len(nums2)):\n        if nums2[i] in hash_table:\n            if hash_table[nums2[i]] == 1:\n                result.append(i)\n            else:\n                hash_table[nums2[i]] -= 1\n    return result\ndef count_same_pair_v2(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    hash_table = {}\n    result = []\n    for i in range(len(nums1)):\n        if nums1[i] in hash_table:\n            hash_table[nums1[i]] += 1\n        else:\n            hash_table[nums1[i]] = 1\n    for i in range(len(nums2)):\n        if nums2[i] in hash_table:\n            if hash_table[nums2[i]] == 1:\n                result.append(i)\n            else:\n                hash_table[nums2[i]] -= 1\n    return result\ndef count_same_pair_v3(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    hash_table = {}\n    result = []\n    for i in range(len(nums1)):\n        if nums1[i] in hash_table:\n            hash_table[nums1[i]] += 1\n        else:\n            hash_table[nums1[i]] = 1\n    for i in range(len(nums2)):\n        if nums2[i] in hash_table:\n            if hash_table[nums2[i]] == 1:\n                result.append(i)\n            else:\n                hash_table[nums2[i]] -= 1\n    return result\ndef count_same_pair_v4(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    hash_table = {}\n    result = []\n    for i in range(len(nums1)):\n        if nums1[i] in hash_table:\n            hash_table[nums1[i]] += 1\n        else:\n            hash_table[nums1[i]] = 1\n    for i in range(len(nums2)):\n        if nums2[i] in hash_table:\n            if hash_table[nums2[i]] == 1:\n                result.append(i)\n            else:\n                hash_table[nums2[i]] -= 1\n    return result\ndef count_same_pair_v5(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    hash_table = {}\n    result = []\n    for i in range(len(nums1)):\n        if nums1[i] in hash_table:\n            hash_table[nums1[i]] += 1\n        else:\n            hash_table[nums1[i]] = 1\n    for i in range(len(nums2)):\n        if nums2[i] in hash_table:\n            if hash_table[nums2[i]] == 1:\n                result.append(i)\n            else:\n                hash_table[nums2[i]] -= 1\n    return result\ndef count_same_pair_v6(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    hash_table = {}\n    result = []\n    for i in range(len(nums1)):\n        if nums1[i] in hash_table:\n            hash_table[nums1[i]] += 1\n        else:\n            hash_table[nums1[i]] = 1\n    for i in range(len(nums2)):\n        if nums2[i] in hash_table:\n            if hash_table[nums2[i]] == 1:\n                result.append(i)\n            else:\n                hash_table[nums2[i]] -= 1\n    return result\ndef count_same_pair_v7(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    hash_table = {}\n    result = []\n    for i in range(len(nums1)):\n        if nums1[i] in hash_table:\n            hash_table[nums1[i]] += 1\n        else:\n            hash_table[nums1[i]] = 1\n    for i in range(len(nums2)):\n        if nums2[i] in hash_table:\n            if hash_table[nums2[i]] == 1:\n                result.append(i)\n            else:\n                hash_table[nums2[i]] -= 1\n    return result\ndef count_same_pair_v8(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    hash_table = {}\n    result = []\n    for i in range(len(nums1)):\n        if nums1[i] in hash_table:\n            hash_table[nums1[i]] += 1\n        else:\n            hash_table[nums1[i]] = 1\n    for i in range(len(nums2)):\n        if nums2[i] in hash_table:\n            if hash_table[nums2[i]] == 1:\n                result.append(i)\n            else:\n                hash_table[nums2[i]] -= 1\n    return result\ndef count_same_pair_v9(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    hash_table = {}\n    result = []\n    for i in range(len(nums1)):\n        if nums1[i] in hash_table:\n            hash_table[nums1[i]] += 1\n        else:\n            hash_table[nums1[i]] = 1\n    for i in range(len(nums2)):\n        if nums2[i] in hash_table:\n            if hash_table[nums2[i]] == 1:\n                result.append(i)\n            else:\n                hash_table[nums2[i]] -= 1\n    return result\ndef count_same_pair_v10(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    hash_table = {}\n    result = []\n    for i in range(len(nums1)):\n        if nums1[i] in hash_table:\n            hash_table[nums1[i]] += 1\n        else:\n            hash_table[nums1[i]] = 1\n    for i in range(len(nums2)):\n        if nums2[i] in hash_table:\n            if hash_table[nums2[i]] == 1:\n                result.append(i)\n            else:\n                hash_table[nums2[i]] -= 1\n    return result\ndef count_same_pair_v11(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        raise Exception(\"Invalid Input\")\n    else:\n        count = 0\n        for i in range(len(nums1)):\n            if nums1[i] == nums2[i]:\n                count += 1\n        return count\ndef max_number_of_consecutive_ones(nums):\n    '''\n    Given an array, find the maximum number of consecutive 1's in the array.\n    '''\n    if len(nums) <= 1:\n        return nums\n    else:\n        start = 0\n        max_count = 0\n        while start < len(nums) - 1:\n            count = 1\n            while start + 1 < len(nums) and nums[start] == nums[start + 1]:\n                count += 1\n                start += 1\n            if count > max_count:\n                max_count = count\n            start += 1\n        return max_count\ndef count_same_val_list_recursive(nums):\n    if len(nums) <= 1:\n        return nums\n    else:\n        #Start from the end of the list. If it's equal to the next val, increase count.\n        return count_same_val_list_recursive(nums[1:]) + [nums[0]] if nums[0] == nums[1] else count_same_val_list_recursive(nums[1:])\ndef compare_two_lists(list1, list2):\n    '''\n    Write a function that takes in two lists and returns a list that contains all the elements that appear in both lists.\n    '''\n    if len(list1)!= len(list2):\n        raise Exception(\"Invalid Input\")\n    else:\n        return [val for val in list1 if val in list2]\ndef find_missing_number_in_an_array(nums):\n    '''\n    Given an array, find the missing number in the array\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return 0 if nums[0] == 0 else 1\n    else:\n        return find_missing_number_in_an_array_helper(nums, 0, len(nums) - 1)\ndef find_missing_number_in_an_array_helper(nums, start, end):\n    if start > end:\n        return 0\n    else:\n        mid = start + ((end - start) / 2)\n        if nums[mid] == mid:\n            return find_missing_number_in_an_array_helper(nums, start, mid - 1)\n        else:\n            return find_missing_number_in_an_array_helper(nums, mid + 1, end)\ndef find_missing_number_in_an_array_recursive(nums):\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return 0 if nums[0] == 0 else 1\n    else:\n        return find_missing_number_in_an_array_helper(nums, 0, len(nums) - 1)\ndef find_missing_number_in_an_array_helper(nums, start, end):\n    if start > end:\n        return 0\n    else:\n        mid = start + ((end - start) / 2)\n        if nums[mid] == mid:\n            return find_missing_number_in_an_array_helper(nums, start, mid - 1)\n        else:\n            return find_missing_number_in_an_array_helper(nums, mid + 1, end)\ndef count_even_and_odd(nums):\n    '''\n    Given an array of integers, return a list of 2 integers, where the first integer is the number of even integers in the array, and the second is the number of odd integers.\n    '''\n    if len(nums) <= 1:\n        return [0, 0]\n    else:\n        if nums[0] % 2 == 0:\n            return [1, len(nums) - 1 - nums[-1]]\n        else:\n            return [len(nums) - 1 - nums[0], 1]\ndef count_even_and_odd_recursive(nums):\n    if len(nums) <= 1:\n        return [0, 0]\n    else:\n        return count_even_and_odd_recursive(nums[1:]) + [nums[0]] if nums[0] % 2 == 0 else count_even_and_odd_recursive(nums[1:]) + [nums[0]]\ndef sum_of_list(nums):\n    '''\n    Given a list of integers, return the sum of all the integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        return nums[0] + sum_of_list(nums[1:])\ndef sum_of_list_recursive(nums):\n    if len(nums) == 0:\n        return 0\n    else:\n        return nums[0] + sum_of_list_recursive(nums[1:])\ndef sum_of_list_recursive_1(nums):\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        return nums[0] + sum_of_list_recursive_1(nums[1:])\ndef sum_of_list_recursive_2(nums):\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        return nums[0] + sum_of_list_recursive_2(nums[1:])\ndef sort_the_list(nums):\n    '''\n    Given a list, sort the list in-place so that the list is sorted in ascending order.\n    '''\n    if len(nums) <= 1:\n        return nums\n    else:\n        return sort_the_list_helper(nums, 0, len(nums) - 1)\ndef sort_the_list_helper(nums, start, end):\n    if start > end:\n        return nums\n    else:\n        mid = start + ((end - start) / 2)\n        nums[start], nums[mid] = nums[mid], nums[start]\n        return sort_the_list_helper(nums, start + 1, end)\ndef find_the_smallest_number_in_the_list(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the number that is the smallest in the list.\n    '''\n    if len(nums) == 0:\n        return None\n    else:\n        return find_the_smallest_number_in_the_list_helper(nums, 0, len(nums) - 1)\ndef find_the_smallest_number_in_the_list_helper(nums, start, end):\n    if start > end:\n        return None\n    else:\n        mid = start + ((end - start) / 2)\n        if nums[start] <= nums[mid]:\n            return find_the_smallest_number_in_the_list_helper(nums, start + 1, end)\n        else:\n            return find_the_smallest_number_in_the_list_helper(nums, start, mid)\ndef max_difference_between_two_numbers(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the maximum difference between any two numbers in the list.\n    '''\n    if len(nums) <= 1:\n        return 0\n    else:\n        return max_difference_between_two_numbers_helper(nums, 0, len(nums) - 1)\ndef max_difference_between_two_numbers_helper(nums, start, end):\n    if start > end:\n        return 0\n    else:\n        mid = start + ((end - start) / 2)\n        retur"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # for i in range(len(nums1)):\n    #     if nums1[i]!= nums2[i]:\n    #         print (i, nums1[i], nums2[i])\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    hash_map = {}\n    for i in range(len(nums1)):\n        hash_map[nums1[i]] = hash_map.get(nums1[i], 0) + 1\n    ans = 0\n    for i in range(len(nums2)):\n        if nums2[i] in hash_map and hash_map[nums2[i]] > 1:\n            ans += 1\n            hash_map[nums2[i]] -= 1\n    return ans\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    i = 0\n    count = 0\n    while i < len(nums1):\n        if nums1[i] == nums2[i]:\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    counter = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 0:\n        return 0\n    return base * (power_base_sum(base, power - 1)) + (base - 1)\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power < 1:\n        return 0\n    if power == 1:\n        return base\n    if power % 2 == 0:\n        return power_base_sum(base, power / 2) + power_base_sum(base, power / 2)\n    else:\n        return base * power_base_sum(base, (power - 1) / 2) + power_base_sum(base, (power - 1) / 2)\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    num_of_digits = len(str(power))\n    sum = 0\n    for power in range(1, num_of_digits + 1):\n        digit = int(base) ** (power - 1)\n        sum += digit\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power = int(power)\n    n = 0\n    for i in range(power):\n        n += power - i\n    if power == 0:\n        return 1\n    else:\n        return sum_base(n)\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for digit in str(base**power):\n        sum += int(digit)\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(str(base) * (power / len(str(base)))) for power in range(len(str(base)), power + 1)])\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for x in range(power):\n        result += base ** x\n    return result\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for x in str(base ** power):\n        total += int(x)\n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base < 0 or power < 0:\n        raise ValueError(\"Negative number doesn't have a sum\")\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(digit) ** power for digit in str(base)])\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotes_pattern = re.compile(r'\\\"(.*)\\\"')\n    return quotes_pattern.findall(text1)\ndef extract_tokens(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    tokens_pattern = re.compile(r'[^\\\"]+(?=\\\"|\\')[^\\\"]*(?=\\\"|\\')')\n    return tokens_pattern.findall(text1)\ndef extract_sentence(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    sentence_pattern = re.compile(r'[^\\\"]+(?=\\\"|\\')[^\\\"]*(?=\\\"|\\')[^\\\"]+(?=\\\"|\\')')\n    return sentence_pattern.findall(text1)\ndef extract_interrogative_sentence(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    interrogative_sentence_pattern = re.compile(r'[^\\\"]+(?=\\\"|\\')[^\\\"]*(?=\\\"|\\')[^\\\"]+(?=\\\"|\\')[^\\\"]+(?=\\\"|\\')')\n    return interrogative_sentence_pattern.findall(text1)\ndef extract_capitalized_words(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    capitalized_words_pattern = re.compile(r'[A-Z][A-Za-z]+')\n    return capitalized_words_pattern.findall(text1)\ndef extract_numbers(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    numbers_pattern = re.compile(r'\\d+')\n    return numbers_pattern.findall(text1)\ndef extract_capitalized_words_or_punctuation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    capitalized_words_or_punctuation_pattern = re.compile(r'[A-Za-z]+|[\\W]+')\n    return capitalized_words_or_punctuation_pattern.findall(text1)\ndef extract_tokenized_sentences(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    tokenized_sentences_pattern = re.compile(r'[^\\\"]+(?=\\\"|\\')[^\\\"]*(?=\\\"|\\')[^\\\"]+(?=\\\"|\\')[^\\\"]+(?=\\\"|\\')')\n    return tokenized_sentences_pattern.findall(text1)\ndef extract_tokenized_interrogative_sentences(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    tokenized_interrogative_sentences_pattern = re.compile(r'[^\\\"]+(?=\\\"|\\')[^\\\"]*(?=\\\"|\\')[^\\\"]+(?=\\\"|\\')[^\\\"]+(?=\\\"|\\')[^\\\"]+(?=\\\"|\\')')\n    return tokenized_interrogative_sentences_pattern.findall(text1)\ndef extract_sentence_pairs(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    sentence_pairs_pattern = re.compile(r'[^\\\"]+(?=\\\"|\\')[^\\\"]*(?=\\\"|\\')[^\\\"]+(?=\\\"|\\')[^\\\"]+(?=\\\"|\\')[^\\\"]+(?=\\\"|\\')')\n    return sentence_pairs_pattern.findall(text1)\ndef extract_punctuation_pairs(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    punctuation_pairs_pattern = re.compile(r'[\\W]+|[\\W][\\\"]')\n    return punctuation_pairs_pattern.findall(text1)\ndef extract_words(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    words_pattern = re.compile(r'[^\\\"]+(?=\\\"|\\')')\n    return words_pattern.findall(text1)\ndef extract_capitalized_words_or_punctuation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    capitalized_words_or_punctuation_pattern = re.compile(r'[A-Za-z]+|[\\W]+')\n    return capitalized_words_or_punctuation_pattern.findall(text1)\ndef extract_tokenized_words(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    tokenized_words_pattern = re.compile(r'[^\\\"]+(?=\\\"|\\')[^\\\"]*(?=\\\"|\\')[^\\\"]+(?=\\\"|\\')[^\\\"]+(?=\\\"|\\')')\n    return tokenized_words_pattern.findall(text1)\ndef extract_tokens_with_numbers(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    tokens_with_numbers_pattern = re.compile(r'[^\\\"]+(?=\\\"|\\')[^\\\"]*(?=\\\"|\\')[^\\\"]+(?=\\\"|\\')[^\\\"]+(?=\\\"|\\')[^\\\"]+(?=\\\"|\\')')\n    return tokens_with_numbers_pattern.findall(text1)\ndef extract_tokens_with_punctuation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    tokens_with_punctuation_pattern = re.compile(r'[\\W]+|[\\W][\\\"]')\n    return tokens_with_punctuation_pattern.findall(text1)\ndef extract_punctuation_tokens_with_numbers(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    punctuation_tokens_with_numbers_pattern = re.compile(r'[\\W]+|[\\W][\\\"]')\n    return punctuation_tokens_with_numbers_pattern.findall(text1)\ndef extract_sentence_pairs_with_punctuation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    sentence_pairs_with_punctuation_pattern = re.compile(r'[^\\\"]+(?=\\\"|\\')[^\\\"]*(?=\\\"|\\')[^\\\"]+(?=\\\"|\\')[\\W]+|[\\W][\\\"]')\n    return sentence_pairs_with_punctuation_pattern.findall(text1)\ndef extract_interrogative_sentence_pairs_with_punctuation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    interrogative_sentence_pairs_with_punctuation_pattern = re.compile(r'[^\\\"]+(?=\\\"|\\')[^\\\"]*(?=\\\"|\\')[^\\\"]+(?=\\\"|\\')[\\W]+[\\W][\\\"]')\n    return interrogative_sentence_pairs_with_punctuation_pattern.findall(text1)\ndef extract_interrogative_sentence_pairs_with_punctuation_and_numbers(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    interrogative_sentence_pairs_with"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result = re.findall(r'\"(.*?)\"', text1)\n    return result\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation = re.findall(r'\\\"[^\\\"]*\\\"', text1)\n    return quotation\n    \ndef extract_email(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    email = re.findall(r'[\\w\\.-]+@[\\w\\.-]+', text1)\n    return email\n    \ndef extract_number(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    number = re.findall(r'[0-9]+', text1)\n    return number\n    \ndef extract_web(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    web = re.findall(r'[\\w\\.-]+@[\\w\\.-]+', text1)\n    return web\n    \ndef extract_name(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    name = re.findall(r'[A-Z][a-z]+', text1)\n    return name\n    \ndef extract_date(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    date = re.findall(r'[0-9]+/[0-9]+/[0-9]+', text1)\n    return date\n    \ndef extract_link(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    link = re.findall(r'[A-Z][a-z]+', text1)\n    return link\n    \ndef extract_hashtag(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    hashtag = re.findall(r'#[\\w\\.]+', text1)\n    return hashtag\n    \ndef extract_capitalize(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    capitalize = re.findall(r'[A-Z][a-z]+', text1)\n    return capitalize\n    \ndef extract_sentence(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    sentence = re.findall(r'[A-Z][a-z]+', text1)\n    return sentence\n    \ndef extract_token(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    token = re.findall(r'[\\w\\.-]+', text1)\n    return token\n    \ndef extract_description(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    description = re.findall(r'[\\w\\.-]+', text1)\n    return description\n    \ndef extract_elongation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    elongation = re.findall(r'[\\w\\.-]+', text1)\n    return elongation\n    \ndef extract_shortening(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    shortening = re.findall(r'[\\w\\.-]+', text1)\n    return shortening\n    \ndef extract_newline(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    newline = re.findall(r'\\n', text1)\n    return newline\n    \ndef extract_tab(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    tab = re.findall(r'\\t', text1)\n    return tab\n    \ndef extract_space(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    space = re.findall(r'\\s', text1)\n    return space\n    \ndef extract_space(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    space = re.findall(r'\\s', text1)\n    return space\n    \ndef extract_space(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    space = re.findall(r'\\s', text1)\n    return space\n    \ndef extract_space(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    space = re.findall(r'\\s', text1)\n    return space\n    \ndef extract_space(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    space = re.findall(r'\\s', text1)\n    return space\n    \ndef extract_space(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    space = re.findall(r'\\s', text1)\n    return space\n    \ndef extract_space(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    space = re.findall(r'\\s', text1)\n    return space\n    \ndef extract_space(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    space = re.findall(r'\\s', text1)\n    return space\n    \ndef extract_space(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    space = re.findall(r'\\s', text1)\n    return space\n    \ndef extract_space(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    space = re.findall(r'\\s', text1)\n    return space\n    \ndef extract_space(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    space = re.findall(r'\\s', text1)\n    return space\n    \ndef extract_space(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    space = re.findall(r'\\s', text1)\n    return space\n    \ndef extract_space(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    space = re.findall(r'\\s', text1)\n    return space\n    \ndef extract_space(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    space = re.findall(r'\\s', text1)\n    return space\n    \ndef extract_space(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    space = re.findall(r'\\s', text1)\n    return space\n    \ndef extract_space(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    space = re.findall(r'\\s', text1)\n    return space\n    \ndef extract_space(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    space = re.findall(r'\\s', text1)\n    return space\n    \ndef extract_space(text1):\n    '''\n    Write a function to extract value"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if type(text1)!=str:\n        return 'TEXT MUST BE STRING'\n    elif len(text1)<2:\n        return 'NO QUOTATION MARKS'\n    else:\n        quotation=re.findall('\"([^\"]*)\"',text1)\n        return quotation\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #return ''.join(text1).split('\\\"')[1]\n    return re.sub(r'\\\"([^\\\"]*)\\\"', r'\\1', text1)\ndef extract_num(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #return ''.join(text).split('\\\"')[1]\n    return re.sub(r'\\\"([^\\\"]*)\\\"', r'\\1', text)\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    try:\n        return re.findall('\"(.*?)\"',text1)\n    except:\n        return ''\ndef extract_number(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    try:\n        return re.findall('-?[0-9]+',text1)\n    except:\n        return ''\ndef extract_operator(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    try:\n        return re.findall('[-+*/]',text1)\n    except:\n        return ''\ndef extract_variable(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    try:\n        return re.findall('[a-z]+',text1)\n    except:\n        return ''\ndef extract_other(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    try:\n        return re.findall('[0-9a-zA-Z]+',text1)\n    except:\n        return ''\ndef parse(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    l1=extract_quotation(text1)\n    l2=[]\n    for i in l1:\n        l3=i.split(' ')\n        l2.append(l3)\n    return l2\ndef evaluate(text1,l2,l3):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    l4=[]\n    for i in l2:\n        l5=[]\n        for j in i:\n            l5.append(eval(j))\n        l4.append(l5)\n    return l4\ndef construct_quotation(l4,l5):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    l6=[]\n    for i in l4:\n        l7=[]\n        for j in i:\n            l7.append(str(j))\n        l6.append(''.join(l7))\n    return l6\ndef pprint(text1,l2,l3,l4,l5,l6):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    l7=[]\n    for i in l5:\n        l8=[]\n        for j in i:\n            l8.append(str(j))\n        l7.append(''.join(l8))\n    l9=[]\n    for i in l7:\n        l8=[]\n        for j in i.split(' '):\n            l8.append(l6[l3.index(j)])\n        l9.append(l8)\n    l10=[]\n    for i in l9:\n        l11=[]\n        for j in i:\n            l11.append(l2[l4.index(j)])\n        l10.append(l11)\n    l12=[]\n    for i in l10:\n        l13=[]\n        for j in i:\n            l13.append(l3[l2.index(j)])\n        l12.append(l13)\n    l14=[]\n    for i in l12:\n        l15=[]\n        for j in i:\n            l15.append(l1[l2.index(j)])\n        l14.append(l15)\n    return l14\ndef calculator(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    l2=parse(text1)\n    l3=extract_operator(text1)\n    l4=extract_number(text1)\n    l5=extract_variable(text1)\n    l6=extract_other(text1)\n    l7=extract_quotation(text1)\n    l8=evaluate(text1,l2,l3)\n    l9=construct_quotation(l8,l3)\n    l10=pprint(text1,l2,l3,l4,l5,l6)\n    return l10\ndef is_all_numeric(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    l2=parse(text1)\n    l3=extract_operator(text1)\n    l4=extract_number(text1)\n    l5=extract_variable(text1)\n    l6=extract_other(text1)\n    l7=extract_quotation(text1)\n    l8=evaluate(text1,l2,l3)\n    l9=construct_quotation(l8,l3)\n    l10=pprint(text1,l2,l3,l4,l5,l6)\n    l11=[]\n    for i in l10:\n        l12=[]\n        for j in i:\n            if j not in l12:\n                l12.append(j)\n        l11.append(l12)\n    if len(l11)==1:\n        return True\n    else:\n        return False\ndef is_binary(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    l2=parse(text1)\n    l3=extract_operator(text1)\n    l4=extract_number(text1)\n    l5=extract_variable(text1)\n    l6=extract_other(text1)\n    l7=extract_quotation(text1)\n    l8=evaluate(text1,l2,l3)\n    l9=construct_quotation(l8,l3)\n    l10=pprint(text1,l2,l3,l4,l5,l6)\n    l11=[]\n    for i in l10:\n        l12=[]\n        for j in i:\n            if j not in l12:\n                l12.append(j)\n        l11.append(l12)\n    if len(l11)==1:\n        return True\n    else:\n        return False\ndef is_factor(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    l2=parse(text1)\n    l3=extract_operator(text1)\n    l4=extract_number(text1)\n    l5=extract_variable(text1)\n    l6=extract_other(text1)\n    l7=extract_quotation(text1)\n    l8=evaluate(text1,l2,l3)\n    l9=construct_quotation(l8,l3)\n    l10=pprint(text1,l2,l3,l4,l5,l6)\n    l11=[]\n    for i in l10:\n        l12=[]\n        for j in i:\n            if j not in l12:\n                l12.append(j)\n        l11.append(l12)\n    if len(l11)==1:\n        return True\n    else:\n        return False\ndef is_multiple(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    l2=parse(text1)\n    l3=extract_operator(text1)\n    l4=extract_number(text1)\n    l5=extract_variable(text1)\n    l6=extract_other(text1)\n    l7=extract_quotation(text1)\n    l8=evaluate(text1,l2,l3)\n    l9=construct_quotation(l8,l3)\n    l10=pprint(text1,l2,l3,l4,l5,l6)\n    l11=[]\n    for i in l10:\n        l12=[]\n        for j in i:\n            if "
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    l1 = len(text1)\n    l2 = len(text1)\n    while(True):\n        i = text1.find(\"\\\"\", l2)\n        if i==-1:\n            break\n        else:\n            text1 = text1[0:i] + \" \" + text1[i+1:l1]\n            l2 = i\n    return text1\ndef remove_quotation(text1):\n    '''\n    Write a function to remove values between quotation marks \" \" of the given string.\n    '''\n    l1 = len(text1)\n    l2 = len(text1)\n    while(True):\n        i = text1.find(\"\\\"\", l2)\n        if i==-1:\n            break\n        else:\n            text1 = text1[0:i] + text1[i+1:l1]\n            l2 = i\n    return text1\ndef remove_space(text1):\n    '''\n    Write a function to remove any space in the given string\n    '''\n    l1 = len(text1)\n    l2 = len(text1)\n    while(True):\n        i = text1.find(\" \", l2)\n        if i==-1:\n            break\n        else:\n            text1 = text1[0:i] + text1[i+1:l1]\n            l2 = i\n    return text1\ndef find_word(text1, word):\n    '''\n    Write a function to find if a word is present in a given string\n    '''\n    l1 = len(text1)\n    l2 = len(text1)\n    while(True):\n        i = text1.find(word, l2)\n        if i==-1:\n            break\n        else:\n            text1 = text1[0:i] + text1[i+len(word):l1]\n            l2 = i\n    return text1\ndef find_word_len_equal(text1, word, length):\n    '''\n    Write a function to find if a word is present in a given string, if the word length is equal to the given length\n    '''\n    l1 = len(text1)\n    l2 = len(text1)\n    while(True):\n        i = text1.find(word, l2)\n        if i==-1:\n            break\n        else:\n            if len(text1[i:l1])==length:\n                text1 = text1[0:i] + text1[i+len(word):l1]\n                l2 = i\n    return text1\ndef find_word_len_more_equal(text1, word, length):\n    '''\n    Write a function to find if a word is present in a given string, if the word length is more than the given length\n    '''\n    l1 = len(text1)\n    l2 = len(text1)\n    while(True):\n        i = text1.find(word, l2)\n        if i==-1:\n            break\n        else:\n            if len(text1[i:l1])>=length:\n                text1 = text1[0:i] + text1[i+len(word):l1]\n                l2 = i\n    return text1\ndef find_word_len_less_equal(text1, word, length):\n    '''\n    Write a function to find if a word is present in a given string, if the word length is less than the given length\n    '''\n    l1 = len(text1)\n    l2 = len(text1)\n    while(True):\n        i = text1.find(word, l2)\n        if i==-1:\n            break\n        else:\n            if len(text1[i:l1])<=length:\n                text1 = text1[0:i] + text1[i+len(word):l1]\n                l2 = i\n    return text1\ndef find_word_len_more(text1, word, length):\n    '''\n    Write a function to find if a word is present in a given string, if the word length is more than the given length\n    '''\n    l1 = len(text1)\n    l2 = len(text1)\n    while(True):\n        i = text1.find(word, l2)\n        if i==-1:\n            break\n        else:\n            if len(text1[i:l1])>length:\n                text1 = text1[0:i] + text1[i+len(word):l1]\n                l2 = i\n    return text1\ndef find_word_len_less(text1, word, length):\n    '''\n    Write a function to find if a word is present in a given string, if the word length is less than the given length\n    '''\n    l1 = len(text1)\n    l2 = len(text1)\n    while(True):\n        i = text1.find(word, l2)\n        if i==-1:\n            break\n        else:\n            if len(text1[i:l1])<length:\n                text1 = text1[0:i] + text1[i+len(word):l1]\n                l2 = i\n    return text1\ndef extract_keyword(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    l1 = len(text1)\n    l2 = len(text1)\n    while(True):\n        i = text1.find(\"\\\"\", l2)\n        if i==-1:\n            break\n        else:\n            text1 = text1[0:i] + \" \" + text1[i+1:l1]\n            l2 = i\n    return text1\ndef extract_word(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    l1 = len(text1)\n    l2 = len(text1)\n    while(True):\n        i = text1.find(\"\\\"\", l2)\n        if i==-1:\n            break\n        else:\n            text1 = text1[0:i] + \" \" + text1[i+1:l1]\n            l2 = i\n    return text1\ndef extract_word_len_equal(text1, word, length):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    l1 = len(text1)\n    l2 = len(text1)\n    while(True):\n        i = text1.find(word, l2)\n        if i==-1:\n            break\n        else:\n            if len(text1[i:l1])==length:\n                text1 = text1[0:i] + text1[i+len(word):l1]\n                l2 = i\n    return text1\ndef extract_word_len_more_equal(text1, word, length):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    l1 = len(text1)\n    l2 = len(text1)\n    while(True):\n        i = text1.find(word, l2)\n        if i==-1:\n            break\n        else:\n            if len(text1[i:l1])>=length:\n                text1 = text1[0:i] + text1[i+len(word):l1]\n                l2 = i\n    return text1\ndef extract_word_len_less_equal(text1, word, length):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    l1 = len(text1)\n    l2 = len(text1)\n    while(True):\n        i = text1.find(word, l2)\n        if i==-1:\n            break\n        else:\n            if len(text1[i:l1])<=length:\n                text1 = text1[0:i] + text1[i+len(word):l1]\n                l2 = i\n    return text1\ndef extract_word_len_more(text1, word, length):\n    '''\n    Write a function to extract values between quotation marks \" \" of the give"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #pattern = re.compile(r'\"(.*)\"')\n    #pattern = re.compile(r'\\\".*?\\\"')\n    pattern = re.compile(r'\"(.*?)\"')\n    #print pattern.findall(text1)\n    #return pattern.findall(text1)\n    return pattern.findall(text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if text1 is None:\n        return ''\n    if not isinstance(text1,str):\n        return ''\n    text1=text1.strip()\n    if len(text1)==0:\n        return ''\n    quotation_flag=0\n    quotation_string=''\n    for i,j in enumerate(text1):\n        if j=='\"':\n            quotation_flag=1-quotation_flag\n            if quotation_flag==0:\n                quotation_string+=j\n        elif j==''and quotation_flag==1:\n            quotation_flag=0\n            quotation_string+=j\n        elif i==len(text1)-1:\n            quotation_string+=j\n    if len(quotation_string)==0:\n        return ''\n    return quotation_string\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quot_val=''\n    quot_flag=0\n    text2=text1\n    for i in text2:\n        if i=='\"':\n            if quot_flag==0:\n                quot_flag=1\n                quot_val+='\"'\n            elif quot_flag==1:\n                quot_flag=0\n                quot_val+='\"'\n        elif i==''and quot_flag==0:\n            quot_val+=' '\n        elif i==''and quot_flag==1:\n            quot_val+=' '\n        else:\n            quot_val+=i\n    return quot_val\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = tuple()\n    for i in range(len(test_tup)):\n        if i == 0:\n            result = (test_tup[i],)\n        else:\n            result = result + (test_tup[i] * test_tup[i+1],)\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    a = test_tup[0]\n    for i in range(1, len(test_tup)):\n        a = a * test_tup[i]\n    return a\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    def multiply(x, y):\n        return x * y\n    return tuple(map(multiply, test_tup))\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([test_tup[i]*test_tup[i+1] for i in range(len(test_tup)-1)])\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(i*j for i,j in zip(test_tup[:-1], test_tup[1:]))\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    test_tup = list(test_tup)\n    for i in range(0, len(test_tup)-1):\n        test_tup[i] = test_tup[i] * test_tup[i+1]\n    return tuple(test_tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if not isinstance(test_tup, tuple):\n        raise TypeError('tuple')\n    if len(test_tup) < 2:\n        return (test_tup[0],)\n    else:\n        return tuple(test_tup[i]*test_tup[i+1] for i in range(len(test_tup)-1))\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([t_i * t_j for t_i, t_j in zip(test_tup[0:-1], test_tup[1:])])\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup)\n    new_tup = ()\n    for i in range(n):\n        new_tup += (test_tup[i],)\n    return new_tup\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        return None\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst3 = []\n    for i in range(len(lst1)):\n        lst3.append(lst1[i] + lst2[i])\n    return lst3\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    for index,element in enumerate(lst1):\n        lst1[index] = element + lst2[index]\n    return lst1\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # this function is just your main function, no code to handle input\n    # other than that, you can start writing your code here\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    new_list = []\n    for i in range(len(lst1)):\n        new_list.append(lst1[i] + lst2[i])\n    return new_list\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a_i+b_i for a_i,b_i in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a,b in zip(lst1, lst2)]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #check for empty list\n    if not nums:\n        return []\n    #if the list is already sorted\n    if sorted(nums) == nums:\n        return [nums[0]]\n    #if the list is not sorted\n    else:\n        #assign default value to the list\n        ans = []\n        #iterate through the list\n        for i in nums:\n            #if the current element is equal to the next element in the list\n            if i == nums[i+1]:\n                #append the current element to the answer\n                ans.append(i)\n            #if the current element is not equal to the next element\n            else:\n                #append the current element to the answer\n                ans.append(i)\n        #return the answer\n        return ans\ndef consecutive_duplicates2(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #check for empty list\n    if not nums:\n        return []\n    #if the list is already sorted\n    if sorted(nums) == nums:\n        return [nums[0]]\n    #if the list is not sorted\n    else:\n        #assign default value to the list\n        ans = []\n        #iterate through the list\n        for i in nums:\n            #if the current element is equal to the next element in the list\n            if i == nums[i+1]:\n                #append the current element to the answer\n                ans.append(i)\n            #if the current element is not equal to the next element\n            else:\n                #append the current element to the answer\n                ans.append(i)\n        #return the answer\n        return ans\ndef remove_consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #check for empty list\n    if not nums:\n        return []\n    #if the list is already sorted\n    if sorted(nums) == nums:\n        return [nums[0]]\n    #if the list is not sorted\n    else:\n        #assign default value to the list\n        ans = []\n        #iterate through the list\n        for i in nums:\n            #if the current element is equal to the next element in the list\n            if i == nums[i+1]:\n                #append the current element to the answer\n                ans.append(i)\n            #if the current element is not equal to the next element\n            else:\n                #append the current element to the answer\n                ans.append(i)\n        #return the answer\n        return ans\ndef get_character_code(char):\n    '''\n    Write a function to get the Unicode code of a character.\n    '''\n    #check for a single element\n    if not char:\n        return char\n    #check for empty list\n    if not isinstance(char, list):\n        return char\n    #check for empty list\n    if not char:\n        return char\n    #assign the default value to the list\n    ans = []\n    #iterate through the list\n    for i in char:\n        #if the current element is a character\n        if isinstance(i, str):\n            #assign the code to the character\n            ans.append(ord(i))\n        #if the current element is not a character\n        else:\n            #append the current element to the answer\n            ans.append(i)\n    #return the answer\n    return ans\ndef get_character_code2(char):\n    '''\n    Write a function to get the Unicode code of a character.\n    '''\n    #check for a single element\n    if not char:\n        return char\n    #check for empty list\n    if not isinstance(char, list):\n        return char\n    #check for empty list\n    if not char:\n        return char\n    #assign the default value to the list\n    ans = []\n    #iterate through the list\n    for i in char:\n        #if the current element is a character\n        if isinstance(i, str):\n            #assign the code to the character\n            ans.append(ord(i))\n        #if the current element is not a character\n        else:\n            #append the current element to the answer\n            ans.append(i)\n    #return the answer\n    return ans\ndef remove_consecutive_duplicates3(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #check for empty list\n    if not nums:\n        return []\n    #if the list is already sorted\n    if sorted(nums) == nums:\n        return [nums[0]]\n    #if the list is not sorted\n    else:\n        #assign default value to the list\n        ans = []\n        #iterate through the list\n        for i in nums:\n            #if the current element is equal to the next element in the list\n            if i == nums[i+1]:\n                #append the current element to the answer\n                ans.append(i)\n            #if the current element is not equal to the next element\n            else:\n                #append the current element to the answer\n                ans.append(i)\n        #return the answer\n        return ans\ndef remove_consecutive_duplicates4(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #check for empty list\n    if not nums:\n        return []\n    #if the list is already sorted\n    if sorted(nums) == nums:\n        return [nums[0]]\n    #if the list is not sorted\n    else:\n        #assign default value to the list\n        ans = []\n        #iterate through the list\n        for i in nums:\n            #if the current element is equal to the next element in the list\n            if i == nums[i+1]:\n                #append the current element to the answer\n                ans.append(i)\n            #if the current element is not equal to the next element\n            else:\n                #append the current element to the answer\n                ans.append(i)\n        #return the answer\n        return ans\ndef get_character_code3(char):\n    '''\n    Write a function to get the Unicode code of a character.\n    '''\n    #check for a single element\n    if not char:\n        return char\n    #check for empty list\n    if not isinstance(char, list):\n        return char\n    #check for empty list\n    if not char:\n        return char\n    #assign the default value to the list\n    ans = []\n    #iterate through the list\n    for i in char:\n        #if the current element is a character\n        if isinstance(i, str):\n            #assign the code to the character\n            ans.append(ord(i))\n        #if the current element is not a character\n        else:\n            #append the current element to the answer\n            ans.append(i)\n    #return the answer\n    return ans\ndef get_character_code4(char):\n    '''\n    Write a function to get the Unicode code of a character.\n    '''\n    #check for a single element\n    if not char:\n        return char\n    #check for empty list\n    if not isinstance(char, list):\n        return char\n    #check for empty list\n    if not char:\n        return char\n    #assign the default value to the list\n    ans = []\n    #iterate through the list\n    for i in char:\n        #if the current element is a character\n        if isinstance(i, str):\n            #assign the code to the character\n            ans.append(ord(i))\n        #if the current element is not a character\n        else:\n            #append the current element to the answer\n            ans.append(i)\n    #return the answer\n    return ans\ndef remove_consecutive_duplicates5(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #check for empty list\n    if not nums:\n        return []\n    #if the list is already sorted\n    if sorted(nums) == nums:\n        return [nums[0]]\n    #if the list is not sorted\n    else:\n        #assign default value to the list\n        ans = []\n        #iterate throug"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    res = []\n    for k, g in groupby(nums):\n        l = list(g)\n        if len(l) > 1:\n            res.append(l[0])\n    return res\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    i = 0\n    while i < len(nums):\n        if i == len(nums) - 1:\n            return nums\n        if nums[i] == nums[i+1]:\n            nums.pop(i)\n        else:\n            i += 1\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for (l,k) in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(enumerate(nums), lambda x: x[0]-x[1]):\n        group = map(itemgetter(1), group)\n        if len(group) > 1:\n            yield group[0]\n            yield group[-1]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums.sort()\n    consecutive_duplicates = [key for key, group in groupby(nums)]\n    return consecutive_duplicates\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    i = 0\n    for item in nums:\n        if item == nums[i]:\n            continue\n        else:\n            nums[i+1] = item\n            i += 1\n    return nums[:i+1]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for k, g in groupby(nums):\n        yield sum(1 for _ in g)\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(g) for k, g in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    ans = []\n    for k, g in groupby(enumerate(nums), lambda x: x[0] - x[1]):\n        ans.append(map(itemgetter(1), g))\n    return ans\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (r*r + r*r*math.pi - h*math.pi)/(2*math.pi)\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (r*r + r*r*math.pi - h*math.pi)/(2*math.pi)\ndef volumelateral_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (r*r*math.pi*math.pi - r*r*math.pi - h*math.pi)/(math.pi*math.pi)\ndef area_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (r*r*math.pi - r*r*math.pi)/(2*math.pi)\ndef volume_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (r*r*math.pi*math.pi - r*r*math.pi)/(2*math.pi)\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    r = float(r)\n    h = float(h)\n    lateral = (3*(math.pi/2)*(r**2) - math.pi*(r**2)*(h/3))*(1/2)\n    return lateral\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * math.sqrt(r**2 + h**2) * 2\n    print(area)\n    \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2\n    area = math.pi * math.sqrt(r**2 + h**2)\n    area = math.pi * math.sqrt((r**2)+(h**2))\n    area = math.pi * r * math.sqrt(r**2 + h**2)\n    print(area)\n    \n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    pi = 3.14159\n    v = 4.0/3.0 * pi * r**3\n    print(v)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    pi = 3.14159\n    v = 4.0/3.0 * pi * r**3\n    print(v)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    pi = 3.14159\n    v = 4.0/3.0 * pi * r**3\n    print(v)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    pi = 3.14159\n    v = 4.0/3.0 * pi * r**3\n    print(v)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    pi = 3.14159\n    v = 4.0/3.0 * pi * r**3\n    print(v)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    pi = 3.14159\n    v = 4.0/3.0 * pi * r**3\n    print(v)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    pi = 3.14159\n    v = 4.0/3.0 * pi * r**3\n    print(v)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    pi = 3.14159\n    v = 4.0/3.0 * pi * r**3\n    print(v)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    pi = 3.14159\n    v = 4.0/3.0 * pi * r**3\n    print(v)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    pi = 3.14159\n    v = 4.0/3.0 * pi * r**3\n    print(v)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    pi = 3.14159\n    v = 4.0/3.0 * pi * r**3\n    print(v)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    pi = 3.14159\n    v = 4.0/3.0 * pi * r**3\n    print(v)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    pi = 3.14159\n    v = 4.0/3.0 * pi * r**3\n    print(v)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    pi = 3.14159\n    v = 4.0/3.0 * pi * r**3\n    print(v)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    pi = 3.14159\n    v = 4.0/3.0 * pi * r**3\n    print(v)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    pi = 3.14159\n    v = 4.0/3.0 * pi * r**3\n    print(v)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    pi = 3.14159\n    v = 4.0/3.0 * pi * r**3\n    print(v)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    pi = 3.14159\n    v = 4.0/3.0 * pi * r**3\n    print(v)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    pi = 3.14159\n    v = 4.0/3.0 * pi * r**3\n    print(v)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    pi = 3.14159\n    v = 4.0/3.0 * pi * r**3\n    print(v)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    pi = 3.14159\n    v = 4.0/3.0 * pi * r**3\n    print(v)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    pi = 3.14159\n    v = 4.0/3.0 * pi * r**3\n    print(v)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    pi = 3.14159\n    v = 4.0/3.0 * pi * r**3\n    print(v)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    pi = 3.14159\n    v = 4.0/3.0 * pi * r**3\n    print(v)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    pi = 3.14159\n    v = 4.0/3.0 * pi * r**3\n    print(v)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    pi = 3.14159\n    v = 4.0/3.0 * pi * r**3\n    print(v)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    pi = 3.14159\n    v = 4.0/3.0 * pi * r**3\n    print(v)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    pi = 3.14159\n    v = 4.0/3.0 * pi * r**3\n    print"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #http://mathworld.wolfram.com/Cone.html\n    return math.pi*(r**2 + r*h - h**2)\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    #http://mathworld.wolfram.com/Sphere.html\n    return 4*math.pi*r**2\ndef lateralsurface_ellipsoid(a,b,c):\n    '''\n    Write a function to find the lateral surface area of an ellipsoid given semi-major axes a, semi-minor axes b, and semi-minor axes c.\n    '''\n    #http://mathworld.wolfram.com/Ellipsoid.html\n    return 4*math.pi*a*b*c\ndef lateralsurface_parallelepiped(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a parallelepiped given semi-major axes a, semi-minor axes b, and semi-minor axes c.\n    '''\n    #http://mathworld.wolfram.com/Parallelepiped.html\n    return 4*a*b*c\ndef volumetric_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and height h.\n    '''\n    #http://mathworld.wolfram.com/Cone.html\n    return math.pi*(r**2)*h/3\ndef volumetric_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    #http://mathworld.wolfram.com/Sphere.html\n    return 4/3*math.pi*r**3\ndef volumetric_ellipsoid(a,b,c):\n    '''\n    Write a function to find the volume of an ellipsoid given semi-major axes a, semi-minor axes b, and semi-minor axes c.\n    '''\n    #http://mathworld.wolfram.com/Ellipsoid.html\n    return 4/3*math.pi*a*b*c\ndef volumetric_parallelepiped(a,b,c):\n    '''\n    Write a function to find the volume of a parallelepiped given semi-major axes a, semi-minor axes b, and semi-minor axes c.\n    '''\n    #http://mathworld.wolfram.com/Parallelepiped.html\n    return 4/3*a*b*c\ndef volumetric_spheroid(a,b,c):\n    '''\n    Write a function to find the volume of a spheroid given semi-major axes a, semi-minor axes b, and semi-minor axes c.\n    '''\n    #http://mathworld.wolfram.com/Spheroid.html\n    return 4/3*math.pi*a*b*c\ndef volumetric_torus(r,R):\n    '''\n    Write a function to find the volume of a torus given radius r and major radius R.\n    '''\n    #http://mathworld.wolfram.com/Torus.html\n    return math.pi*r**2*(R**2 - r**2)\ndef volumetric_convex_cup(a,b,c):\n    '''\n    Write a function to find the volume of a convex cup given semi-major axes a, semi-minor axes b, and semi-minor axes c.\n    '''\n    #http://mathworld.wolfram.com/Cup.html\n    return 2*math.pi*a*b*c\ndef volumetric_convex_sphere(a):\n    '''\n    Write a function to find the volume of a convex sphere given semi-major axes a.\n    '''\n    #http://mathworld.wolfram.com/Sphere.html\n    return 4/3*math.pi*a**3\ndef volumetric_convex_ellipsoid(a,b,c):\n    '''\n    Write a function to find the volume of a convex ellipsoid given semi-major axes a, semi-minor axes b, and semi-minor axes c.\n    '''\n    #http://mathworld.wolfram.com/Ellipsoid.html\n    return 4/3*math.pi*a*b*c\ndef volumetric_convex_parallelepiped(a,b,c):\n    '''\n    Write a function to find the volume of a convex parallelepiped given semi-major axes a, semi-minor axes b, and semi-minor axes c.\n    '''\n    #http://mathworld.wolfram.com/Parallelepiped.html\n    return 4/3*a*b*c\ndef volumetric_convex_spheroid(a,b,c):\n    '''\n    Write a function to find the volume of a convex spheroid given semi-major axes a, semi-minor axes b, and semi-minor axes c.\n    '''\n    #http://mathworld.wolfram.com/Spheroid.html\n    return 4/3*math.pi*a*b*c\ndef volumetric_convex_torus(r,R):\n    '''\n    Write a function to find the volume of a convex torus given radius r and major radius R.\n    '''\n    #http://mathworld.wolfram.com/Torus.html\n    return 2*math.pi*r**2*(R**2 - r**2)\ndef int_perimeter_circle(r):\n    '''\n    Write a function to find the area of a circle given radius r and the area of a circle with radius r.\n    '''\n    #http://mathworld.wolfram.com/Circle.html\n    return math.pi*r*r\ndef int_perimeter_cone(r,h):\n    '''\n    Write a function to find the area of a cone given radius r and height h and the area of a cone with radius r and height h.\n    '''\n    #http://mathworld.wolfram.com/Cone.html\n    return math.pi*(r**2 + r*h - h**2)\ndef int_perimeter_sphere(r):\n    '''\n    Write a function to find the area of a sphere given radius r and the area of a sphere with radius r.\n    '''\n    #http://mathworld.wolfram.com/Sphere.html\n    return 4*math.pi*r**2\ndef int_perimeter_ellipsoid(a,b,c):\n    '''\n    Write a function to find the area of an ellipsoid given semi-major axes a, semi-minor axes b, and semi-minor axes c and the area of an ellipsoid with semi-major axes a, semi-minor axes b, and semi-minor axes c.\n    '''\n    #http://mathworld.wolfram.com/Ellipsoid.html\n    return 4*math.pi*a*b*c\ndef int_perimeter_parallelepiped(a,b,c):\n    '''\n    Write a function to find the area of a parallelepiped given semi-major axes a, semi-minor axes b, and semi-minor axes c and the area of a parallelepiped with semi-major axes a, semi-minor axes b, and semi-minor axes c.\n    '''\n    #http://mathworld.wolfram.com/Parallelepiped.html\n    return 4*a*b*c\ndef int_perimeter_spheroid(a,b,c):\n    '''\n    Write a function to find the area of a spheroid given semi-major axes a, semi-minor axes b, and semi-minor axes c and the area of a spheroid with semi-major axes a, semi-minor axes b, and semi-minor axes c.\n    '''\n    #http://mathworld.wolfram.com/Spheroid.html\n    return 4*math.pi*a*b*c\ndef int_perimeter_torus(r,R):\n    '''\n    Write a function to find the area of a torus given radius r and major radius R and the area of a torus wit"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A=math.pi*r**2\n    B=math.pi*(r**2-h**2)**0.5\n    return A-B\ndef sumofdiagonals(n):\n    '''\n    Write a function to find the sum of the diagonals of a right sided square matrix.\n    '''\n    sum=0\n    for i in range(n):\n        sum=sum+n**2-i**2\n    return sum\ndef rowscalar(A,k):\n    '''\n    Write a function to multiply each row in a matrix by a scalar k.\n    '''\n    for i in range(len(A)):\n        A[i]=k*A[i]\n    return A\ndef columnscalar(A,k):\n    '''\n    Write a function to multiply each column in a matrix by a scalar k.\n    '''\n    for i in range(len(A)):\n        A[i]=k*A[i]\n    return A\ndef matrixmultiplication(A,B):\n    '''\n    Write a function to multiply two matrices.\n    '''\n    C=[]\n    for i in range(len(A)):\n        C.append([])\n        for j in range(len(B[0])):\n            C[i].append(0)\n    for i in range(len(A)):\n        for j in range(len(B[0])):\n            for k in range(len(B)):\n                C[i][j]+=A[i][k]*B[k][j]\n    return C\ndef rotate(A,theta,r,c,s):\n    '''\n    Write a function to rotate a matrix by a given angle theta in radians.\n    '''\n    theta=math.radians(theta)\n    cos=math.cos(theta)\n    sin=math.sin(theta)\n    for i in range(len(A)):\n        for j in range(len(A[0])):\n            x=r*(A[i][j]-c)\n            y=s*(A[i][j]-c)\n            A[i][j]=c+x*cos-y*sin\n            B=s*(A[i][j]-c)\n            C=r*(A[i][j]-c)\n            A[i][j]=c+B*sin+C*cos\n    return A\ndef tranpose(A):\n    '''\n    Write a function to transpose a matrix.\n    '''\n    C=[]\n    for i in range(len(A[0])):\n        C.append([])\n        for j in range(len(A)):\n            C[i].append(A[j][i])\n    return C\ndef matrixaddition(A,B):\n    '''\n    Write a function to add matrices.\n    '''\n    C=[]\n    for i in range(len(A)):\n        C.append([])\n        for j in range(len(A[0])):\n            C[i].append(A[i][j]+B[i][j])\n    return C\ndef matrixsubtraction(A,B):\n    '''\n    Write a function to subtract matrices.\n    '''\n    C=[]\n    for i in range(len(A)):\n        C.append([])\n        for j in range(len(A[0])):\n            C[i].append(A[i][j]-B[i][j])\n    return C\ndef matrixtranspose(A):\n    '''\n    Write a function to transpose a matrix.\n    '''\n    return tranpose(A)\ndef matrixinverse(A):\n    '''\n    Write a function to find the inverse of a matrix.\n    '''\n    C=[]\n    for i in range(len(A)):\n        C.append([])\n        for j in range(len(A[0])):\n            C[i].append(A[j][i])\n    if len(A)==len(A[0]):\n        for i in range(len(C)):\n            for j in range(len(C)):\n                if i>j:\n                    C[i][j]=-C[i][j]\n                else:\n                    C[i][j]=C[i][j]\n    else:\n        print(\"Error in matrix inverse\")\n    return C\ndef householder(A):\n    '''\n    Write a function to find the lower triangular matrix R, the upper triangular matrix U and the upper triangular matrix V using Householder reflection.\n    '''\n    n=len(A)\n    R=[]\n    U=[]\n    V=[]\n    V.append([1])\n    for i in range(n-1):\n        V.append([])\n        V[i+1].append(0)\n    for i in range(n):\n        R.append([])\n        U.append([])\n        for j in range(n-i):\n            U[i].append(A[j][i])\n            R[j].append(0)\n        V[i+1][0]=math.sqrt(A[i][i])\n        for j in range(n-i-1):\n            R[j][i]=A[j][i]/V[i+1][0]\n            U[i][j]=A[j][i]/V[i+1][0]\n            V[i+1][j+1]=(A[j][i]/V[i+1][0])-(2*R[j][i]*R[i][i])\n    return R,U,V\ndef householder2(A):\n    '''\n    Write a function to find the lower triangular matrix R, the upper triangular matrix U and the upper triangular matrix V using Householder reflection.\n    '''\n    n=len(A)\n    R=[]\n    U=[]\n    V=[]\n    V.append([1])\n    for i in range(n):\n        R.append([])\n        U.append([])\n        for j in range(n-i):\n            U[i].append(A[j][i])\n            R[j].append(0)\n        V[i+1][0]=math.sqrt(A[i][i])\n        for j in range(n-i-1):\n            R[j][i]=A[j][i]/V[i+1][0]\n            U[i][j]=A[j][i]/V[i+1][0]\n            V[i+1][j+1]=(A[j][i]/V[i+1][0])-(2*R[j][i]*R[i][i])\n    return R,U,V\ndef rowhill(A):\n    '''\n    Write a function to find the lower triangular matrix R, the upper triangular matrix U and the upper triangular matrix V using Householder reflection.\n    '''\n    n=len(A)\n    R=[]\n    U=[]\n    V=[]\n    V.append([1])\n    for i in range(n):\n        R.append([])\n        U.append([])\n        for j in range(n-i):\n            U[i].append(A[j][i])\n            R[j].append(0)\n        V[i+1][0]=math.sqrt(A[i][i])\n        for j in range(n-i-1):\n            R[j][i]=A[j][i]/V[i+1][0]\n            U[i][j]=A[j][i]/V[i+1][0]\n            V[i+1][j+1]=(A[j][i]/V[i+1][0])-(2*R[j][i]*R[i][i])\n    return R,U,V\ndef rkbasis(A):\n    '''\n    Write a function to find the orthogonal basis given by the columns of the upper triangular matrix R.\n    '''\n    n=len(A)\n    R=[]\n    for i in range(n):\n        R.append([])\n        for j in range(n-i):\n            R[i].append(0)\n    for i in range(n):\n        R[i][i]=1\n    return R\ndef rkbasis"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    theta = math.pi*h/r\n    return 1/3.0*math.pi*r**2*math.sin(theta)\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    S = math.pi*(3*r**2+h**2)\n    return S\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a=math.pi*r**2\n    b=math.pi*(r**2+h**2)\n    return a*(b/a)\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = math.pi*r**2\n    c = math.pi*r**2\n    return s, c\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    s = 2*math.pi*r*(r+h)\n    c = 2*math.pi*r*h\n    return s, c\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    s = 4*math.pi*r**2\n    c = 4*math.pi*r**2\n    return s, c\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    s = 4*math.pi*r**2\n    c = 4*math.pi*r**2\n    return s, c\ndef total_surface(r,h):\n    '''\n    Write a function to find the total surface area of a solid sphere given the radius r and the height h.\n    '''\n    s = 4*math.pi*r**2\n    c = 4*math.pi*r**2\n    return s, c\ndef volume(r,h):\n    '''\n    Write a function to find the volume of a solid sphere given the radius r and the height h.\n    '''\n    v = (4/3)*math.pi*r**3\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a solid cylinder given the radius r and the height h.\n    '''\n    v = (2*math.pi*r**2)*h\n    return v\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a solid cone given the radius r and the height h.\n    '''\n    v = (math.pi*r**2*h)/3\n    return v\ndef volumefraction(r1,r2):\n    '''\n    Write a function to calculate the volumefraction between two objects.\n    '''\n    v = (4*math.pi*r1*r2)/(r1+r2)\n    return v\ndef idealgaslaw(v,T):\n    '''\n    Write a function to calculate the ideal gas law for a given volume v and temperature T.\n    '''\n    P = (v/math.pi)*T*(273.15+32)\n    return P\ndef idealgaslaw(v,T):\n    '''\n    Write a function to calculate the ideal gas law for a given volume v and temperature T.\n    '''\n    P = (v/math.pi)*T*(273.15+32)\n    return P\ndef kinematics(v,T):\n    '''\n    Write a function to calculate the kinematics for a given volume v and temperature T.\n    '''\n    P = (v/math.pi)*T*(273.15+32)\n    v = (4/3)*math.pi*(P/T)**(1/3)\n    return v\ndef mass(r,m):\n    '''\n    Write a function to calculate the mass of a solid sphere or solid cylinder given radius r and mass m.\n    '''\n    mass = (4/3)*math.pi*r**3*m\n    return mass\ndef density(r,m,T):\n    '''\n    Write a function to calculate the density of a solid sphere or solid cylinder given radius r, mass m, and temperature T.\n    '''\n    P = (4/3)*math.pi*r**3*m\n    v = (4/3)*math.pi*r**3\n    density = P/v\n    return density\ndef pressure(r,m,T):\n    '''\n    Write a function to calculate the pressure of a solid sphere or solid cylinder given radius r, mass m, and temperature T.\n    '''\n    P = (4/3)*math.pi*r**3*m\n    v = (4/3)*math.pi*r**3\n    pressure = P/v\n    return pressure\ndef enthalpy(r,m,T):\n    '''\n    Write a function to calculate the enthalpy of a solid sphere or solid cylinder given radius r, mass m, and temperature T.\n    '''\n    P = (4/3)*math.pi*r**3*m\n    v = (4/3)*math.pi*r**3\n    enthalpy = P/v\n    return enthalpy\ndef internalenergy(r,m,T):\n    '''\n    Write a function to calculate the internal energy of a solid sphere or solid cylinder given radius r, mass m, and temperature T.\n    '''\n    P = (4/3)*math.pi*r**3*m\n    v = (4/3)*math.pi*r**3\n    internalenergy = P/v\n    return internalenergy\ndef soundspeed(r,T):\n    '''\n    Write a function to calculate the sound speed of a solid sphere or solid cylinder given radius r and temperature T.\n    '''\n    v = (math.sqrt(8*math.pi*r**3*T/273.15))\n    return v\ndef kineticenergy(v,m,T):\n    '''\n    Write a function to calculate the kinetic energy of a solid sphere or solid cylinder given velocity v, mass m, and temperature T.\n    '''\n    v = (4/3)*math.pi*r**3*m\n    v = v*T\n    return v\ndef thermalconductivity(r,m,T):\n    '''\n    Write a function to calculate the thermal conductivity of a solid sphere or solid cylinder given radius r, mass m, and temperature T.\n    '''\n    P = (4/3)*math.pi*r**3*m\n    v = (4/3)*math.pi*r**3\n    thermalconductivity = (P*v)/(T**2)\n    return thermalconductivity\ndef massflowrate(P,T):\n    '''\n    Write a function to calculate the massflowrate of a solid sphere or solid cylinder given pressure P and temperature T.\n    '''\n    massflowrate = P/T\n    return massflowrate\ndef molarvolume(m,mole,T):\n    '''\n    Write a function to calculate the molar volume of a solid sphere or solid cylinder given mass m, mole molar mass mole, and temperature T.\n    '''\n    molarvolume = m/mole\n    return molarvolume\ndef molarpressure(r,m,mole,T):\n    '''\n    Write a function to calculate the molar pressure of a solid sphere or solid cylinder given radius r, mass m, mole molar mass mole, and temperature T.\n    '''\n    P = (4/3)*math.pi*r**3*m\n    v = (4/3)*math.pi*r**3\n    molarpressure = P/v\n    return molarpressure\ndef molarfugacity(m,mole,T):\n    '''\n    Write a function to calculate the molar fugacity of a solid sphere or solid cylinder given mass m, mole molar mass mole, and temperature T.\n    '''\n    molarfugacity = m*T/mole\n    return molarfugacity\ndef molarfugacity(m,mole,T):\n    '''\n    Write a function to calculate the molar fugacity of a solid sphere or solid cylinder given mass m, mole molar mass mole, and temperature T.\n    '''\n    molarfugacity = m*T/mole\n    return molarfugacity\ndef idealgaslaw(v,T):\n    '''\n    Write a function to calculate the ideal gas law for a given volume v and temperature T.\n    '''\n    P = (v/math.pi)*T*(273.15+32)\n    return P\ndef idealgaslaw(v,T):\n    '''\n    Write a function to calculate the ideal gas law for a given volume v and temperature T.\n    '''\n    P = (v/math.pi)*T*(273.15+32)\n    return P\ndef kinematics(v,T):\n    '''\n    Write a function to calculate the kinematics for a give"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area=math.pi*r**2*h/3\n    return area\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    str_array = list(text)\n    for i in range(len(str_array)):\n        if str_array[i]==' ':\n            str_array[i]=':'\n        elif str_array[i]==',':\n            str_array[i]=':'\n        elif str_array[i]=='.':\n            str_array[i]=':'\n    return ''.join(str_array)\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+','',text)\n    text = re.sub(r'[,]','',text)\n    text = re.sub(r'\\.','',text)\n    return text\ndef is_substring(test,original):\n    '''\n    Write a function that takes two strings and returns true if the first string is a substring of the second string.\n    '''\n    test = replace_specialchar(test)\n    original = replace_specialchar(original)\n    if original.find(test) > -1:\n        return True\n    else:\n        return False\ndef is_substring2(test,original):\n    '''\n    Write a function that takes two strings and returns true if the first string is a substring of the second string.\n    '''\n    return test in original\ndef extract_string(text):\n    '''\n    Write a function that takes a string and returns a list of substrings that are longer than 3 characters.\n    '''\n    return [x for x in text if len(x) > 3]\ndef extract_string2(text):\n    '''\n    Write a function that takes a string and returns a list of substrings that are longer than 3 characters.\n    '''\n    return [x for x in text if len(x) > 3 and x.isalpha()]\ndef extract_string3(text):\n    '''\n    Write a function that takes a string and returns a list of substrings that are longer than 3 characters.\n    '''\n    return [x for x in text if len(x) > 3 and x.isalpha() and x.isupper()]\ndef extract_string4(text):\n    '''\n    Write a function that takes a string and returns a list of substrings that are longer than 3 characters.\n    '''\n    return [x for x in text if len(x) > 3 and x.isalpha() and x.islower()]\ndef extract_string5(text):\n    '''\n    Write a function that takes a string and returns a list of substrings that are longer than 3 characters.\n    '''\n    return [x for x in text if len(x) > 3 and x.isalpha() and x.istitle()]\ndef extract_string6(text):\n    '''\n    Write a function that takes a string and returns a list of substrings that are longer than 3 characters.\n    '''\n    return [x for x in text if len(x) > 3 and x.isalpha() and x.isupper() and x.istitle()]\ndef extract_string7(text):\n    '''\n    Write a function that takes a string and returns a list of substrings that are longer than 3 characters.\n    '''\n    return [x for x in text if len(x) > 3 and x.isalpha() and x.isupper() and x.isalpha()]\ndef extract_string8(text):\n    '''\n    Write a function that takes a string and returns a list of substrings that are longer than 3 characters.\n    '''\n    return [x for x in text if len(x) > 3 and x.isalpha() and x.isalpha() and x.istitle()]\ndef extract_string9(text):\n    '''\n    Write a function that takes a string and returns a list of substrings that are longer than 3 characters.\n    '''\n    return [x for x in text if len(x) > 3 and x.isalpha() and x.isalpha() and x.istitle() and x.islower()]\ndef extract_string10(text):\n    '''\n    Write a function that takes a string and returns a list of substrings that are longer than 3 characters.\n    '''\n    return [x for x in text if len(x) > 3 and x.isalpha() and x.isalpha() and x.istitle() and x.isupper()]\ndef extract_string11(text):\n    '''\n    Write a function that takes a string and returns a list of substrings that are longer than 3 characters.\n    '''\n    return [x for x in text if len(x) > 3 and x.isalpha() and x.isalpha() and x.istitle() and x.isdigit()]\ndef extract_string12(text):\n    '''\n    Write a function that takes a string and returns a list of substrings that are longer than 3 characters.\n    '''\n    return [x for x in text if len(x) > 3 and x.isalpha() and x.isalpha() and x.istitle() and x.isalnum()]\ndef extract_string13(text):\n    '''\n    Write a function that takes a string and returns a list of substrings that are longer than 3 characters.\n    '''\n    return [x for x in text if len(x) > 3 and x.isalpha() and x.isalpha() and x.istitle() and x.isalpha()]\ndef extract_string14(text):\n    '''\n    Write a function that takes a string and returns a list of substrings that are longer than 3 characters.\n    '''\n    return [x for x in text if len(x) > 3 and x.isalpha() and x.isalpha() and x.istitle() and x.isdigit()]\ndef extract_string15(text):\n    '''\n    Write a function that takes a string and returns a list of substrings that are longer than 3 characters.\n    '''\n    return [x for x in text if len(x) > 3 and x.isalpha() and x.isalpha() and x.istitle() and x.isalpha()]\ndef extract_string16(text):\n    '''\n    Write a function that takes a string and returns a list of substrings that are longer than 3 characters.\n    '''\n    return [x for x in text if len(x) > 3 and x.isalpha() and x.isalpha() and x.istitle() and x.isdigit()]\ndef extract_string17(text):\n    '''\n    Write a function that takes a string and returns a list of substrings that are longer than 3 characters.\n    '''\n    return [x for x in text if len(x) > 3 and x.isalpha() and x.isalpha() and x.istitle() and x.isdigit()]\ndef extract_string18(text):\n    '''\n    Write a function that takes a string and returns a list of substrings that are longer than 3 characters.\n    '''\n    return [x for x in text if len(x) > 3 and x.isalpha() and x.isalpha() and x.istitle() and x.isalpha() and x.isdigit()]\ndef extract_string19(text):\n    '''\n    Write a function that takes a string and returns a list of substrings that are longer than 3 characters.\n    '''\n    return [x for x in text if len(x) > 3 and x.isalpha() and x.isalpha() and x.istitle() and x.isalpha() and x.isdigit()]\ndef extract_string20(text):\n    '''\n    Write a function that takes a string and returns a list of substrings that are longer than 3 characters.\n    '''\n    return [x for x in text if len(x) > 3 and x.isalpha() and x.isalpha() and x.istitle() and x.isalpha() and x.isdigit()]\ndef extract_string21(text):\n    '''\n    Write a function that takes a string and returns a list of substrings that are longer than 3 characters.\n    '''\n    return [x for x in text if len(x) > 3 and x.isalpha() and x.isalpha() and x.istitle() and x.isalpha() and x.isdigit()]\ndef extract_string22(text):\n    '''\n    Write a function that takes a string and returns a list of substrings that are longer than 3 characters.\n    '''\n    return [x for x in text if len(x) > 3 and x.isalpha() and x.isalpha() and x.istitle() and x.isalpha() and x.isdigit()]\ndef extract_string23(text):\n    '''\n    Write a function that takes a string and returns a list of substrings that are longer than 3 characters.\n    '''\n    return [x for x in text if len(x) > 3 and x.isalpha() and x.isalpha() and x.istitle() and x.isalpha() and x.isdigit()"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text=text.replace(\"\\r\\n\",\" \")\n    text=text.replace(\"\\n\",\" \")\n    text=text.replace(\",\",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\" \",\":\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #text = text.replace('.',':')\n    text = text.replace(',',' : ')\n    text = text.replace(' ',' : ')\n    text = text.replace(';',' : ')\n    text = text.replace('-',' : ')\n    text = text.replace('\\n',' : ')\n    text = text.replace('\\r',' : ')\n    text = text.replace('\\t',' : ')\n    return text\n    \ndef get_vocabulary_set(file_name):\n    f = open(file_name)\n    vocabulary = set()\n    for line in f:\n        vocabulary.update(line.split())\n    f.close()\n    return vocabulary\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #return text.replace(' ',':').replace(',',':').replace('.',':').replace('  ',' ')\n    return re.sub('[ ]+',' ',text)\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # text = text.replace(\",\",\":\")\n    # text = text.replace(\" \",\":\")\n    text = text.replace(\".\",\":\")\n    text = text.replace(\"(\",\":\")\n    text = text.replace(\")\",\":\")\n    text = text.replace(\"-\",\":\")\n    text = text.replace(\"/\",\":\")\n    text = text.replace(\"@\",\":\")\n    text = text.replace(\"&\",\":\")\n    text = text.replace(\"=\",\":\")\n    text = text.replace(\"+\",\":\")\n    text = text.replace(\"\\\\\",\":\")\n    text = text.replace(\"\\\"\",\":\")\n    text = text.replace(\"'\",\":\")\n    text = text.replace(\"`\",\":\")\n    text = text.replace(\"#\",\":\")\n    text = text.replace(\"$\",\":\")\n    text = text.replace(\"%\",\":\")\n    text = text.replace(\"*\",\":\")\n    text = text.replace(\"^\",\":\")\n    text = text.replace(\"?\",\":\")\n    text = text.replace(\"~\",\":\")\n    text = text.replace(\"_\",\":\")\n    text = text.replace(\"-\",\":\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \",\":\")\n    text = text.replace(\".\",\":\")\n    text = text.replace(\",\",\":\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+',':',text)\n    text = re.sub(r',',':',text)\n    text = re.sub(r'\\.',':',text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[^a-zA-Z0-9\\s:]+', '', text)\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    lo = 0\n    hi = len(A)\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    if n == 0:\n        return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A)\n    while left < right:\n        mid = (left + right) / 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            right = mid\n        else:\n            left = mid + 1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low, high = 0, len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if x > A[mid]:\n            low = mid + 1\n        elif x < A[mid]:\n            high = mid - 1\n        else:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    l, r = 0, n\n    while l < r:\n        mid = (l + r) // 2\n        if A[mid] == x:\n            return mid\n        if A[mid] > x:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if A[0] == x:\n        return 0\n    if A[-1] == x:\n        return len(A)-1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if not A:\n        return None\n    if x == A[0]:\n        return 0\n    if x > A[0]:\n        return None\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l = 0\n    r = len(A) - 1\n    while l <= r:\n        mid = l + ((r-l)>>1)\n        if A[mid] == x:\n            if mid == 0 or A[mid-1] < A[mid]:\n                return mid\n            else:\n                r = mid - 1\n        elif A[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    for i in xrange(n):\n        if A[i] == x:\n            return i\n    return -1\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum_of_products = 0\n    product_of_list = 1\n    for i in arr:\n        product_of_list = product_of_list * i\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            product_of_list = product_of_list / arr[j]\n            sum_of_products = sum_of_products + product_of_list\n    return sum_of_products\n    \ndef max_in_Subarray(arr):\n    '''\n    Write a python function to find the max element in a sublist of a given list. https://www.geeksforgeeks.org/find-maximum-sublist-product-possible-from-given-list/\n    '''\n    max_product = 0\n    product_of_list = 1\n    for i in arr:\n        product_of_list = product_of_list * i\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if product_of_list > max_product:\n                max_product = product_of_list\n            product_of_list = product_of_list / arr[j]\n    return max_product\n    \ndef max_of_Subarray(arr):\n    '''\n    Write a python function to find the max element in a sublist of a given list. https://www.geeksforgeeks.org/find-maximum-sublist-product-possible-from-given-list/\n    '''\n    max_of_list = arr[0]\n    for i in arr:\n        if max_of_list < i:\n            max_of_list = i\n    return max_of_list\n    \ndef sigma(arr):\n    '''\n    Write a python function to find sum of a given array. https://www.geeksforgeeks.org/find-sum-of-array-elements/\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n    \ndef find_max_subarray(arr):\n    '''\n    Write a python function to find the max of the given array. https://www.geeksforgeeks.org/find-maximum-sublist-product-possible-from-given-list/\n    '''\n    max_of_list = arr[0]\n    for i in arr:\n        if max_of_list < i:\n            max_of_list = i\n    return max_of_list\n    \ndef smallest_of_Subarray(arr):\n    '''\n    Write a python function to find the smallest element in a sublist of a given list. https://www.geeksforgeeks.org/find-minimum-sublist-product-possible-from-given-list/\n    '''\n    smallest_of_list = arr[0]\n    for i in arr:\n        if smallest_of_list > i:\n            smallest_of_list = i\n    return smallest_of_list\n    \ndef swap_in_Subarray(arr, pos1, pos2):\n    '''\n    Write a python function to swap two elements of a given list. https://www.geeksforgeeks.org/swap-elements-in-an-array/\n    '''\n    arr[pos1], arr[pos2] = arr[pos2], arr[pos1]\n    return arr\n    \ndef reverse_in_Subarray(arr, start, end):\n    '''\n    Write a python function to reverse a given list. https://www.geeksforgeeks.org/reverse-a-list-in-place/\n    '''\n    while(start < end):\n        arr[start], arr[end] = arr[end], arr[start]\n        start = start + 1\n        end = end - 1\n    return arr\n    \ndef rotate_in_Subarray(arr, n):\n    '''\n    Write a python function to rotate a given list. https://www.geeksforgeeks.org/rotate-array-by-n-gates/\n    '''\n    #number of times to rotate\n    num_of_rotations = n % len(arr)\n    if num_of_rotations == 0:\n        return arr\n    else:\n        #number of times to rotate\n        rotate_array(arr, 0, num_of_rotations)\n        return arr\n    \ndef rotate_array(arr, start, n):\n    '''\n    Write a python function to rotate a given array. https://www.geeksforgeeks.org/rotate-array-by-n-gates/\n    '''\n    for i in range(n):\n        temp = arr[start]\n        for j in range(start, len(arr)):\n            arr[j] = arr[j+1]\n        arr[len(arr)-1] = temp\n        start = start + 1\n    return arr\n    \ndef count_in_Subarray(arr, n):\n    '''\n    Write a python function to count number of elements less than a given value. https://www.geeksforgeeks.org/count-number-of-elements-less-than-a-given-value/\n    '''\n    count = 0\n    for i in arr:\n        if i < n:\n            count = count + 1\n    return count\n    \ndef count_in_Subarray(arr, n):\n    '''\n    Write a python function to count number of elements less than a given value. https://www.geeksforgeeks.org/count-number-of-elements-less-than-a-given-value/\n    '''\n    count = 0\n    for i in arr:\n        if i < n:\n            count = count + 1\n    return count\n    \ndef count_in_Subarray(arr, n):\n    '''\n    Write a python function to count number of elements less than a given value. https://www.geeksforgeeks.org/count-number-of-elements-less-than-a-given-value/\n    '''\n    count = 0\n    for i in arr:\n        if i < n:\n            count = count + 1\n    return count\n    \ndef count_in_Subarray(arr, n):\n    '''\n    Write a python function to count number of elements less than a given value. https://www.geeksforgeeks.org/count-number-of-elements-less-than-a-given-value/\n    '''\n    count = 0\n    for i in arr:\n        if i < n:\n            count = count + 1\n    return count\n    \ndef count_in_Subarray(arr, n):\n    '''\n    Write a python function to count number of elements less than a given value. https://www.geeksforgeeks.org/count-number-of-elements-less-than-a-given-value/\n    '''\n    count = 0\n    for i in arr:\n        if i < n:\n            count = count + 1\n    return count\n    \ndef count_in_Subarray(arr, n):\n    '''\n    Write a python function to count number of elements less than a given value. https://www.geeksforgeeks.org/count-number-of-elements-less-than-a-given-value/\n    '''\n    count = 0\n    for i in arr:\n        if i < n:\n            count = count + 1\n    return count\n    \ndef count_in_Subarray(arr, n):\n    '''\n    Write a python function to count number of elements less than a given value. https://www.geeksforgeeks.org/count-number-of-elements-less-than-a-given-value/\n    '''\n    count = 0\n    for i in arr:\n        if i < n:\n            count = count + 1\n    return count\n    \ndef count_in_Subarray(arr, n):\n    '''\n    Write a python function to count number of elements less than a given value. https://www.geeksforgeeks.org/count-number-of-elements-less-than-a-given-value/\n    '''\n    count = 0\n    for i in arr:\n        if i < n:\n            count = count + 1\n    return count\n    \ndef count_in_Subarray"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # initialise result\n    result = 0\n    # if list is empty, return 0\n    if not arr:\n        return result\n    # else, apply recursive function on all sublists\n    result = prod(arr[:1]) + sum_Of_Subarray_Prod(arr[1:])\n    return result\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # this is subarray generator\n    def generate_subarrays(arr, n):\n        subarrays = []\n        for i in range(1, n):\n            subarrays.append([arr[j:j + i] for j in range(n - i)])\n        return subarrays\n    # subarrays are [[1,2,3,4],[2,3,4],[3,4],[4],[]]\n    subarrays = generate_subarrays(arr, len(arr))\n    # return sum of products of all subarrays\n    return sum([reduce(lambda x, y: x * y, subarray) for subarray in subarrays])\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    total = 0\n    for i in range(0, len(arr)):\n        for j in range(i, len(arr)):\n            total += arr[j] * arr[i]\n    return total\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod_sum = arr[0]\n    for i in xrange(1,len(arr)):\n        prod_sum = prod_sum * arr[i]\n    print prod_sum\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod = 1\n    for i in range(len(arr)):\n        prod *= arr[i]\n    return prod\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    res = []\n    for x in range(len(arr)):\n        for y in range(x,len(arr)):\n            res.append(np.prod(arr[x:y+1]))\n    return sum(res)\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    arr.sort()\n    res = [0] * len(arr)\n    res[0] = arr[0]\n    res[1] = arr[0] * arr[1]\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod = 1\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            prod = 1\n            for k in range(i, j + 1):\n                prod *= arr[k]\n            sum += prod\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    return sum([reduce(lambda x,y:x*y,arr[i:j+1]) for i in range(len(arr)) for j in range(i,len(arr))])\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ (n & (n - 1))\n    return n ^ (n & 2)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    bit_num = int(math.log(n, 2) + 1)\n    i = bit_num-1\n    binary = bin(n)[2:]\n    binary = binary[:-1] + str(1 - int(binary[-1]))\n    return int(binary, 2)\n    \nif __name__ == \"__main__\":\n    n = int(raw_input())\n    print set_middle_bits(n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return (n ^ (n >> 1)) ^ (n >> 2)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    \ndef find_largest_set(arr, n):\n    '''\n    Write a python function to find the largest subset of an array which elements are consecutive elements. https://www.geeksforgeeks.org/find-largest-subset-of-an-array-which-elements-are-consecutive/\n    '''\n    \n    \ndef find_leap_years(arr, n):\n    '''\n    Write a python function to find the number of leap years in the range from range 1 to n (both inclusive) https://www.geeksforgeeks.org/find-number-of-leap-years-in-range-1-to-n-both-inclusive/\n    '''\n    \n    \ndef find_perfect_squares(n):\n    '''\n    Write a python function to find the first n perfect square numbers. https://www.geeksforgeeks.org/find-first-n-perfect-squares-numbers/\n    '''\n    \n    \ndef find_max_perms(arr, n):\n    '''\n    Write a python function to find the maximum permutations of an array https://www.geeksforgeeks.org/find-maximum-permutations-of-an-array/\n    '''\n    \n    \ndef find_nearest_int(arr, n):\n    '''\n    Write a python function to find the nearest integer to the given number. https://www.geeksforgeeks.org/find-nearest-integer-to-the-given-number/\n    '''\n    \n    \ndef get_digits(n):\n    '''\n    Write a python function to find all the digits of a number. https://www.geeksforgeeks.org/get-all-the-digits-of-a-number/\n    '''\n    \n    \ndef build_array(k, n):\n    '''\n    Write a python function to build a array of size n and fill the array with elements of the given array. https://www.geeksforgeeks.org/build-an-array-of-size-n-and-fill-the-array-with-elements-of-the-given-array/\n    '''\n    \n    \ndef is_perm(str1, str2):\n    '''\n    Write a python function to check if two strings are permutations of each other. https://www.geeksforgeeks.org/check-if-two-strings-are-permutations-of-each-other/\n    '''\n    \n    \ndef find_all_anagrams(arr, n):\n    '''\n    Write a python function to find all the anagrams of a word from an array. https://www.geeksforgeeks.org/find-all-the-anagrams-of-a-word-from-an-array/\n    '''\n    \n    \ndef remove_duplicates(arr):\n    '''\n    Write a python function to remove duplicates from an array. https://www.geeksforgeeks.org/remove-duplicates-from-an-array/\n    '''\n    \n    \ndef get_longest_repetition(arr, n):\n    '''\n    Write a python function to find the longest repetition of a number in a given array. https://www.geeksforgeeks.org/get-the-longest-repetition-of-a-number-in-a-given-array/\n    '''\n    \n    \ndef count_wins(arr, n):\n    '''\n    Write a python function to count the number of wins in a game of tic-tac-toe. https://www.geeksforgeeks.org/count-the-number-of-wins-in-a-game-of-tic-tac-toe/\n    '''\n    \n    \ndef get_all_subsets(arr, n):\n    '''\n    Write a python function to find all the subsets of a set of size n. https://www.geeksforgeeks.org/find-all-the-subsets-of-a-set-of-size-n/\n    '''\n    \n    \ndef find_all_x(arr, n):\n    '''\n    Write a python function to find the all the subarrays with equal number of xs and ys in a given array. https://www.geeksforgeeks.org/find-the-all-subarrays-with-equal-number-of-xs-and-ys/\n    '''\n    \n    \ndef count_rotations(arr, n):\n    '''\n    Write a python function to count the number of rotations in a given array. https://www.geeksforgeeks.org/count-the-number-of-rotations-in-an-array/\n    '''\n    \n    \ndef are_all_unique(arr):\n    '''\n    Write a python function to check if all the elements of an array are unique. https://www.geeksforgeeks.org/check-if-all-the-elements-of-an-array-are-unique/\n    '''\n    \n    \ndef get_max_array_sum(arr, k):\n    '''\n    Write a python function to find the maximum sum of k non-overlapping subarrays. https://www.geeksforgeeks.org/find-the-maximum-sum-of-k-non-overlapping-subarrays/\n    '''\n    \n    \ndef reverse_bit_arr(arr):\n    '''\n    Write a python function to reverse bits of an array. https://www.geeksforgeeks.org/reverse-bits-of-an-array-without-using-extra-space/\n    '''\n    \n    \ndef max_bitwise(arr, n):\n    '''\n    Write a python function to find the maximum subarray whose elements are in non-decreasing order. https://www.geeksforgeeks.org/find-the-maximum-subarray-whose-elements-are-in-non-decreasing-order/\n    '''\n    \n    \ndef sort_arr(arr):\n    '''\n    Write a python function to sort an array in non-decreasing order. https://www.geeksforgeeks.org/sort-an-array-in-non-decreasing-order/\n    '''\n    \n    \ndef get_min_max_diff(arr, n):\n    '''\n    Write a python function to find the minimum and maximum difference between two elements in an array. https://www.geeksforgeeks.org/find-the-minimum-and-maximum-difference-between-two-elements-in-an-array/\n    '''\n    \n    \ndef get_min_max(arr, n):\n    '''\n    Write a python function to find the minimum and maximum value of an array. https://www.geeksforgeeks.org/find-minimum-and-maximum-value-of-an-array/\n    '''\n    \n    \ndef reverse_word(arr):\n    '''\n    Write a python function to reverse words in an array. https://www.geeksforgeeks.org/reverse-words-in-an-array-in-python/\n    '''\n    \n    \ndef is_string_palin(arr):\n    '''\n    Write a python function to check if a string is a palindrome. https://www.geeksforgeeks.org/check-if-a-string-is-a-palindrome/\n    '''\n    \n    \ndef find_perm_indices(arr, n):\n    '''\n    Write a python function to find the indices of an array element equal to the given element. https://www.geeksforgeeks.org/find-the-indices-of-an-array-element-equal-to-the-given-element/\n    '''\n    \n    \ndef find_rotate_array(arr, n):\n    '''\n    Write a python function to find the index of the element at given index. https://www.geeksforgeeks.org/find-the-index-of-the-element-at-given-index/\n    '''\n    \n    \ndef remove_element(arr, n):\n    '''\n    Write a python function to remove element from array. https://www.geeksforgeeks.org/remove-element-from-array/\n    '''\n    \n    \ndef find_subarray(arr, n):\n    '"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mid = n & 0x5555555555555555\n    mid = mid | ((n & 0x3333333333333333) << 1)\n    mid = mid | ((n & 0x0F0F0F0F0F0F0F0F) << 4)\n    mid = mid | ((n & 0xCCCCCCCCCCCCCCCC) << 8)\n    mid = mid | ((n & 0xF1F1F1F1F1F1F1F1) << 12)\n    mid = mid | ((n & 0xE0E0E0E0E0E0E0E0E0) << 16)\n    mid = mid | ((n & 0xFFFFFFFFFFFFFFF) << 24)\n    return mid\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    n_bits = 32 #max number of bits is 32 bits\n    n = bin(n)[2:].zfill(n_bits)\n    first_bit = n[0]\n    last_bit = n[-1]\n    n = n[1:-1]\n    res = first_bit + n + last_bit\n    return int(res,2)\n    \nif __name__ == '__main__':\n    print(set_middle_bits(5))\n    print(set_middle_bits(18))"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    s = bin(n)[2:].zfill(32)\n    l = list(s)\n    l[0],l[-1] = l[-1],l[0]\n    return int(''.join(l),2)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # clear the first and the last bit of the number\n    n &= ~(0b1 << 0)\n    n &= ~(0b1 << 7)\n    \n    # flip the bits in the middle of the number\n    n = n ^ 0b11000000\n    n = n ^ 0b10111101\n    n = n ^ 0b10001110\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    x=n^(n>>1)\n    print(x)\n    \n    \ndef get_even_num():\n    '''\n    Write a python function to return the even number of the number\n    '''\n    n=int(input())\n    if n%2==0:\n        print('YES')\n    else:\n        print('NO')\n    \n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return ((n & 0x55555555) << 1) ^ 0x5555555"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # if a[x-1] >= x:\n    #     return x\n    # else:\n    #     a.insert(x-1,x)\n    #     return x-1\n    return bisect.bisect_left(a, x)\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    # Search for the insertion point\n    k = bisect.bisect_left(a, x)\n    # Insert the value\n    a.insert(k, x)\n    return k\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    k = bisect.bisect_left(a, x)\n    if k == n or a[k]!= x:\n        return k\n    else:\n        return k-1\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return 0\n    elif a[0] > x:\n        return 0\n    else:\n        left = bisect.bisect_left(a, x)\n        return left\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if not a:\n        return 0\n    if x > a[-1]:\n        return len(a)\n    return bisect.bisect_left(a, x)\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if x < a[0]:\n        return 0\n    else:\n        return bisect.bisect_left(a, x)\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if x > a[-1]:\n        return len(a)\n    else:\n        return bisect.bisect_right(a, x)\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if a[i] == x:\n        return -1\n    elif a[i] > x:\n        return i\n    else:\n        return i + 1\n    \ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if a[i] == x:\n        return -1\n    elif a[i] < x:\n        return i\n    else:\n        return i - 1\n    "
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return -1\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a,x)\n    if i == len(a) or a[i]!= x:\n        return i\n    else:\n        return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a.insert(bisect.bisect_left(a, x), x)\n    return a\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    try:\n        if re.match(regex, string):\n            print 'Yes'\n        else:\n            print 'No'\n    except TypeError:\n        print \"Enter String\"\ncheck_str(raw_input())\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels = re.findall(regex, string)\n    return True if vowels else False\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matcher = re.finditer(regex, string)\n    for match in matcher:\n        print match.start() \n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string) is not None:\n        print(\"String starts with a vowel\")\n    else:\n        print(\"String does not start with a vowel\")\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if (re.match(regex, string)):\n        print(\"Match\")\n    else:\n        print(\"No Match\")\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    m = re.match(regex, string)\n    if m:\n        return m.group()\n    return None\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex,string):\n        return True\n    return False\ndef solution(string):\n    '''\n    Given a string, reverse the string and print only the first 10 characters of the string.\n    '''\n    if not check_str(string):\n        return 'String is not starting with a vowel'\n    reversed_string = string[::-1]\n    if len(string)<10:\n        return reversed_string[:len(string)]\n    else:\n        return reversed_string[:10]\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.fullmatch(regex, string)\n    if match: \n        print(\"String starts with a vowel\")\n    else: \n        print(\"String does not start with a vowel\")\nstring = \"a\"\ncheck_str(string)"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    if pattern.search(string):\n        return True\n    return False\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return (n ** n) / math.factorial(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return 1 + (1/n)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return (1/n)*(1+geometric_sum(n-1))\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # base case\n    if n == 0:\n        return 1\n    # recursive case\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    #geometric_sum = 1\n    #i = 1\n    #while i < n:\n    #    geometric_sum *= i\n    #    i += 1\n    #return geometric_sum\n    #return pow(2,n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if (n == 0):\n        return 0\n    else:\n        dig = 1\n        numbers = []\n        while (n>0):\n            index = dig + (9 * (9 * dig + 1)) / 2\n            n -= 1\n            dig += 1\n            numbers.append(int(index))\n        return numbers[-1]\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int('1'+'0'*n)\ndef find_smallest_triangular_number(n):\n    return int(n*(n+1)/2)\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    num = n*(n+1)//2\n    return int(num)\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 1\n    while True:\n        if len(str(i*(i+1)*(i+2)//6)) == n:\n            return i \n        i+=1\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #Assigning the base to 2\n    base=2\n    #Assigning the number of digits to n\n    digits=n\n    #The while loop will run until base * (base + 1) / 2 is greater than or equal to the number of digits\n    while base * (base + 1) / 2 < digits: \n        #Incrementing the base\n        base += 1\n    #Returning the base * (base + 1) / 2 which is the number of digits\n    return base * (base + 1) / 2\ndef find_factorial(n):\n    '''\n    Write a python function to find the factorial of a number. https://www.geeksforgeeks.org/factorial-functions-python/\n    '''\n    #The if statement will check for the number 0. If the number is zero, the factorial will return 1\n    if n == 0: \n        return 1\n    #The else statement will check for the number, 1, 2, 3, etc. If the number is not zero, the factorial will return the number multiplied by the next number\n    else: \n        return n * find_factorial(n - 1)\ndef find_digit(n):\n    '''\n    Write a python function to find the number of digits of a number. https://www.geeksforgeeks.org/python-number-of-digits/\n    '''\n    #The if statement will check for the number 0. If the number is zero, the factorial will return 1\n    if n == 0: \n        return 1\n    #The else statement will check for the number, 1, 2, 3, etc. If the number is not zero, the factorial will return the number multiplied by the next number\n    else: \n        return 1 + find_digit(n / 10)\ndef find_triangle_number(n):\n    '''\n    Write a python function to find the nth triangular number. https://www.geeksforgeeks.org/nth-triangular-number/\n    '''\n    #Assigning the base to 2\n    base=2\n    #Assigning the number of digits to n\n    digits=n\n    #The while loop will run until base * (base + 1) / 2 is greater than or equal to the number of digits\n    while base * (base + 1) / 2 < digits: \n        #Incrementing the base\n        base += 1\n    #Returning the base * (base + 1) / 2 which is the number of digits\n    return base * (base + 1) / 2\ndef find_triangular_number_iter(n):\n    '''\n    Write a python function to find the nth triangular number. https://www.geeksforgeeks.org/nth-triangular-number/\n    '''\n    #Assigning the base to 2\n    base=2\n    #Assigning the number of digits to n\n    digits=n\n    #The while loop will run until base * (base + 1) / 2 is greater than or equal to the number of digits\n    while base * (base + 1) / 2 < digits: \n        #Incrementing the base\n        base += 1\n    #Returning the base * (base + 1) / 2 which is the number of digits\n    return base * (base + 1) / 2\ndef find_binary_number(n):\n    '''\n    Write a python function to find the number of bits of a number. https://www.geeksforgeeks.org/python-number-of-bits/\n    '''\n    #The if statement will check for the number 0. If the number is zero, the factorial will return 1\n    if n == 0: \n        return 1\n    #The else statement will check for the number, 1, 2, 3, etc. If the number is not zero, the factorial will return the number multiplied by the next number\n    else: \n        return 1 + find_binary_number(n / 2)\ndef find_number_of_divisors(n):\n    '''\n    Write a python function to find the number of divisors of a number. https://www.geeksforgeeks.org/python-number-of-divisors/\n    '''\n    #The if statement will check for the number 0. If the number is zero, the factorial will return 1\n    if n == 0: \n        return 1\n    #The else statement will check for the number, 1, 2, 3, etc. If the number is not zero, the factorial will return the number multiplied by the next number\n    else: \n        return find_factorial(n / 2)\ndef find_number_of_divisors_iter(n):\n    '''\n    Write a python function to find the number of divisors of a number. https://www.geeksforgeeks.org/python-number-of-divisors/\n    '''\n    #Assigning the base to 2\n    base=2\n    #Assigning the number of digits to n\n    digits=n\n    #The while loop will run until base * (base + 1) / 2 is greater than or equal to the number of digits\n    while base * (base + 1) / 2 < digits: \n        #Incrementing the base\n        base += 1\n    #Returning the base * (base + 1) / 2 which is the number of digits\n    return base * (base + 1) / 2\ndef find_number_of_divisors_for_prime(n):\n    '''\n    Write a python function to find the number of divisors of a number for prime numbers. https://www.geeksforgeeks.org/python-number-of-divisors-for-prime-numbers/\n    '''\n    #The if statement will check for the number 0. If the number is zero, the factorial will return 1\n    if n == 0: \n        return 1\n    #The else statement will check for the number, 1, 2, 3, etc. If the number is not zero, the factorial will return the number multiplied by the next number\n    else: \n        return find_factorial(n)\ndef find_perfect_number(n):\n    '''\n    Write a python function to find the sum of the proper divisors of a number. https://www.geeksforgeeks.org/python-perfect-number-perfect-number/\n    '''\n    #The if statement will check for the number 0. If the number is zero, the factorial will return 1\n    if n == 0: \n        return 1\n    #The else statement will check for the number, 1, 2, 3, etc. If the number is not zero, the factorial will return the number multiplied by the next number\n    else: \n        return find_factorial(n) + find_number_of_divisors(n)\ndef find_perfect_number_iter(n):\n    '''\n    Write a python function to find the sum of the proper divisors of a number. https://www.geeksforgeeks.org/python-perfect-number-perfect-number/\n    '''\n    #Assigning the base to 2\n    base=2\n    #Assigning the number of digits to n\n    digits=n\n    #The while loop will run until base * (base + 1) / 2 is greater than or equal to the number of digits\n    while base * (base + 1) / 2 < digits: \n        #Incrementing the base\n        base += 1\n    #Returning the base * (base + 1) / 2 which is the number of digits\n    return base * (base + 1) / 2 + find_number_of_divisors_iter(base)\ndef find_number_of_factors(n):\n    '''\n    Write a python function to find the number of factors of a number. https://www.geeksforgeeks.org/python-number-of-factors-of-a-number/\n    '''\n    #The if statement will check for the number 0. If the number is zero, the factorial will return 1\n    if n == 0: \n        return 1\n    #The else statement will check for the number, 1, 2, 3, etc. If the number is not zero, the factorial will return the number multiplied by the next number\n    else: \n        return find_factorial(n)\ndef find_number_of_factors_iter(n):\n    '''\n    Write a python function to find the number of factors of a number. https://www.geeksforgeeks.org/python-number-of"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    k = int(math.ceil(math.log10(n) + 1))\n    return (n - ((k - 1) ** 2 + k)) // k\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int(math.ceil(n * (n+1) / 2))\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #return 'hello'\n    a = n * (n + 1) / 2\n    x = math.floor(math.log10(a)) + 1\n    return int(a / math.pow(10, x - 1))\ndef find_Index_root(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int(math.ceil(math.sqrt(n * (n + 1) / 2)))\ndef find_Index_pruduct(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int(math.ceil((n + 1) / 2))\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if (n == 0):\n        return 0;\n    for i in range(1,n+1):\n        if(i*(i+1)/2 == n):\n            return i\n    return -1\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return int(math.ceil(math.sqrt(n * (n + 1) / 2)))\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {i+1:j for i,j in enumerate(test_tup)}\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:]))\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    \n    output_dict = {}\n    for i in range(0, len(test_tup)):\n        output_dict[test_tup[i]] = test_tup[i+1]\n    return output_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    try:\n        if (not (isinstance(test_tup, tuple))):\n            raise TypeError\n        dict1 = {}\n        for i in range(0, len(test_tup) - 1, 2):\n            dict1[test_tup[i]] = test_tup[i+1]\n        return dict1\n    except TypeError:\n        print('Error: invalid input')\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {str(test_tup[x])+'-'+str(test_tup[x+1]):test_tup[x+2] for x in range(0,len(test_tup),3)}\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_dict = {}\n    for x, y in zip(test_tup, test_tup[1:]):\n        new_dict[x] = y\n    return new_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(len(test_tup)):\n        d[test_tup[i]] = test_tup[i+1]\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_in_tup = {}\n    for i in range(0, len(test_tup), 2):\n        dict_in_tup[test_tup[i]] = test_tup[i + 1]\n    return dict_in_tup\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_dict = {}\n    if len(test_tup) % 2 == 0:\n        for i in range(0, len(test_tup) - 1, 2):\n            new_dict[test_tup[i]] = test_tup[i + 1]\n    else:\n        for i in range(0, len(test_tup) - 1, 2):\n            new_dict[test_tup[i]] = test_tup[i + 1]\n        new_dict[test_tup[-1]] = None\n    return new_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    assert type(test_tup) == tuple, \"tuple_to_dict: The input argument must be a tuple.\"\n    assert len(test_tup) >= 2, \"tuple_to_dict: The input argument must have at least two elements.\"\n    \n    out_dict = {}\n    for i in range(0, len(test_tup) - 1, 2):\n        out_dict[test_tup[i]] = test_tup[i + 1]\n    \n    return out_dict\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    a = []\n    b = s[0]\n    for i in s :\n        if i in a :\n            return False\n        else :\n            a.append(i)\n            b = i\n    return True\ndef all_Characters_Same_v2(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    a = []\n    b = s[0]\n    for i in s :\n        if i in a :\n            return False\n        else :\n            a.append(i)\n            b = i\n    return True\ndef all_Characters_Same_v3(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    a = []\n    b = s[0]\n    for i in s :\n        if i in a :\n            return False\n        else :\n            a.append(i)\n            b = i\n    return True\ndef all_Characters_Same_v4(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\ndef all_Characters_Same_v5(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\ndef all_Characters_Same_v6(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\ndef all_Characters_Same_v7(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\ndef all_Characters_Same_v8(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\ndef all_Characters_Same_v9(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\ndef all_Characters_Same_v10(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\ndef all_Characters_Same_v11(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\ndef all_Characters_Same_v12(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\ndef all_Characters_Same_v13(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\ndef all_Characters_Same_v14(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\ndef all_Characters_Same_v15(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\ndef all_Characters_Same_v16(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\ndef all_Characters_Same_v17(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\ndef all_Characters_Same_v18(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\ndef all_Characters_Same_v19(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\ndef all_Characters_Same_v20(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\ndef all_Characters_Same_v21(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\ndef all_Characters_Same_v22(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\ndef all_Characters_Same_v23(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\ndef all_Characters_Same_v24(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\ndef all_Characters_Same_v25(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\ndef all_Characters_Same_v26(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\ndef all_Characters_Same_v27(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\ndef all_Characters_Same_v28(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\ndef all_Characters_Same_v29(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\ndef all_Characters_Same_v30(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\ndef all_Characters_Same_v31(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\ndef all_Characters_Same_v32(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\ndef all_Characters_Same_v33(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\ndef all_Characters_Same_v34(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\ndef all_Characters_Same_v35(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\ndef all_Characters_Same_v36(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\ndef all_Characters_Same_v37(s) :\n    '''\n    Write a python function to check whether all the character"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) == 1\n    \n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    l = len(s)\n    f = 0\n    for i in range(l) :\n        if(s[i]!= s[0]) :\n            f = 1\n            break\n    if(f==0) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) == 1\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    \n    if len(set(s)) == 1 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)) :\n        if s[i]!= s[0] :\n            return 0\n    return 1\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if(s[0]==s[1] and s[1]==s[2] and s[2]==s[3]) :\n        return 1\n    else :\n        return 0\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in s:\n        if (s.count(i) > 1) :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) == 1\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s = str(s)\n    result = True\n    for i in range(len(s) - 1):\n        if s[i]!= s[i+1] :\n            result = False\n            break\n    return result\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # side = float(input(\"What is the length of the side?\"))\n    area = math.sqrt(3) / 4 * math.pow(side, 2)\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3.0/4.0)*(side**2)\ndef vol_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return (1.0/3.0)*(side**3)\ndef area_triangle(side1,side2):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return 0.5*side1*side2\ndef vol_triangle(side1,side2):\n    '''\n    Write a function to calculate the volume of a triangle.\n    '''\n    return 0.5*side1*side2\ndef area_quad(side1,side2,side3,side4):\n    '''\n    Write a function to calculate the area of a quadrilateral.\n    '''\n    return side1*side2+side2*side3+side3*side4+side4*side1\ndef vol_quad(side1,side2,side3,side4):\n    '''\n    Write a function to calculate the volume of a quadrilateral.\n    '''\n    return side1*side2*side3*side4\ndef area_rectangle(side1,side2):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return side1*side2\ndef vol_rectangle(side1,side2):\n    '''\n    Write a function to calculate the volume of a rectangle.\n    '''\n    return side1*side2\ndef area_circle(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return math.pi*radius**2\ndef vol_circle(radius):\n    '''\n    Write a function to calculate the volume of a circle.\n    '''\n    return math.pi*radius**3\ndef area_sphere(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    return 4.0*math.pi*radius**2\ndef vol_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return 4.0/3.0*math.pi*radius**3\ndef area_cylinder(radius,height):\n    '''\n    Write a function to calculate the area of a cylinder.\n    '''\n    return 2*math.pi*radius*height\ndef vol_cylinder(radius,height):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    return math.pi*radius**2*height\ndef area_cone(radius,height):\n    '''\n    Write a function to calculate the area of a cone.\n    '''\n    return math.pi*radius*(radius+height)\ndef vol_cone(radius,height):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    return math.pi*radius**2*height/3\ndef area_sector(radius,height,angle):\n    '''\n    Write a function to calculate the area of a sector.\n    '''\n    return (angle/360.0)*(2.0*math.pi*radius*height)\ndef vol_sector(radius,height,angle):\n    '''\n    Write a function to calculate the volume of a sector.\n    '''\n    return (angle/360.0)*(math.pi*radius**2*height)\ndef surface_volume(radius,height):\n    '''\n    Write a function to calculate the surface and volume of a cylinder.\n    '''\n    return (2*math.pi*radius*height)+2*math.pi*radius**2\ndef surface_surface(radius,height):\n    '''\n    Write a function to calculate the surface and volume of a cylinder.\n    '''\n    return 2*math.pi*radius**2+2*math.pi*radius*height\ndef area_triangle_prism(side1,side2,height,angle):\n    '''\n    Write a function to calculate the area of a triangle in a prism.\n    '''\n    return side1*side2*(math.sin(angle/360.0))\ndef vol_triangle_prism(side1,side2,height,angle):\n    '''\n    Write a function to calculate the volume of a triangle in a prism.\n    '''\n    return side1*side2*(math.sin(angle/360.0))\ndef area_triangle_pyramid(side1,side2,side3,angle):\n    '''\n    Write a function to calculate the area of a triangle in a pyramid.\n    '''\n    return side1*side2*(math.sin(angle/360.0))/2\ndef vol_triangle_pyramid(side1,side2,side3,angle):\n    '''\n    Write a function to calculate the volume of a triangle in a pyramid.\n    '''\n    return side1*side2*(math.sin(angle/360.0))/2\ndef area_trapezoid(side1,side2,height,angle):\n    '''\n    Write a function to calculate the area of a trapezoid.\n    '''\n    return (side1+side2)*(math.sin(angle/360.0))\ndef vol_trapezoid(side1,side2,height,angle):\n    '''\n    Write a function to calculate the volume of a trapezoid.\n    '''\n    return (side1+side2)*(math.sin(angle/360.0))\ndef area_rectangular_prism(side1,side2,side3,angle):\n    '''\n    Write a function to calculate the area of a rectangular prism.\n    '''\n    return 2*(side1+side2)*(math.sin(angle/360.0))\ndef vol_rectangular_prism(side1,side2,side3,angle):\n    '''\n    Write a function to calculate the volume of a rectangular prism.\n    '''\n    return 2*(side1+side2)*(math.sin(angle/360.0))\ndef area_parallelogram(side1,side2):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return side1*side2\ndef vol_parallelogram(side1,side2):\n    '''\n    Write a function to calculate the volume of a parallelogram.\n    '''\n    return side1*side2\ndef area_tricircle(side1,side2,side3):\n    '''\n    Write a function to calculate the area of a tricircle.\n    '''\n    return (side1+side2+side3)/3.0\ndef vol_tricircle(side1,side2,side3):\n    '''\n    Write a function to calculate the volume of a tricircle.\n    '''\n    return (side1+side2+side3)/3.0\ndef area_trisector(side1,side2,side3,side4):\n    '''\n    Write a function to calculate the area of a trisector.\n    '''\n    return (side1+side2+side3+side4)/2.0\ndef vol_trisector(side1,side2,side3,side4):\n    '''\n    Write a function to calculate the volume of a trisector.\n    '''\n    return (side1+side2+side3+side4)/2.0\ndef area_trisector_prism(side1,side2,side3,side4,angle):\n    '''\n    Write a function to calculate the area of a trisector in a prism.\n    '''\n    return ((side1+side2)*(math.sin(angle/360.0))+side3+side4)/2.0\ndef vol_trisector_prism(side1,side2,side3,side4,angle):\n    '''\n    Write a function to calculate the volume of a trisector in a prism.\n    '''\n    return ((side1+side2)*(math.sin(angle/360.0))+side3+side4)/2.0\ndef area_tristriangle(side1,side2,side3):\n    '''\n    Write a function to calculate the area of a tristriangle.\n    '''\n    return (side1+side2+side3)/2"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**3/6.0\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3**0.5)/4 * math.sqrt(3) * side\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**3*(3.0/4.0)\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    sides = [side, side, side, side]\n    return reduce(lambda x, y: x*y, sides)**(1/2)\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side**2)*1/4\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3.0*(side**2))/4.0\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3*math.sqrt(3)/4)*(side**2)\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3*(side**2))/4\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return (side**3)/12\ndef area_prism(side1, side2):\n    '''\n    Write a function to caluclate the area of a prism.\n    '''\n    return (side1*side2)/2\ndef volume_prism(side1, side2):\n    '''\n    Write a function to caluclate the volume of a prism.\n    '''\n    return side1*side2\ndef area_rectangle(length, width):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    return length*width\ndef volume_rectangle(length, width):\n    '''\n    Write a function to caluclate the volume of a rectangle.\n    '''\n    return length*width\ndef area_rectangle_s(length, width):\n    '''\n    Write a function to caluclate the area of a rectangle using\n    the shortest side.\n    '''\n    return min(length, width)*(max(length, width)-min(length, width))\ndef volume_rectangle_s(length, width):\n    '''\n    Write a function to caluclate the volume of a rectangle using\n    the shortest side.\n    '''\n    return length*width\ndef area_triangle(base, height):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    return base*height/2\ndef volume_triangle(base, height):\n    '''\n    Write a function to caluclate the volume of a triangle.\n    '''\n    return base*height/2\ndef area_trapezium(base1, base2, height):\n    '''\n    Write a function to caluclate the area of a trapezium.\n    '''\n    return 1/2*(base1+base2)*height\ndef volume_trapezium(base1, base2, height):\n    '''\n    Write a function to caluclate the volume of a trapezium.\n    '''\n    return 1/2*(base1+base2)*height\ndef area_octahedron(side):\n    '''\n    Write a function to caluclate the area of an octahedron.\n    '''\n    return (3*(side**2))/4\ndef volume_octahedron(side):\n    '''\n    Write a function to caluclate the volume of an octahedron.\n    '''\n    return (side**3)/12\ndef area_dodecahedron(side1, side2):\n    '''\n    Write a function to caluclate the area of a dodecahedron.\n    '''\n    return (5*(side1**2))/4\ndef volume_dodecahedron(side1, side2):\n    '''\n    Write a function to caluclate the volume of a dodecahedron.\n    '''\n    return (side1**3)*(side2**3)/8\ndef area_icosahedron(side):\n    '''\n    Write a function to caluclate the area of an icosahedron.\n    '''\n    return (5*(side**2))/4\ndef volume_icosahedron(side):\n    '''\n    Write a function to caluclate the volume of an icosahedron.\n    '''\n    return (side**3)/12\ndef area_icosahedron_s(side):\n    '''\n    Write a function to caluclate the area of an icosahedron using\n    the shortest side.\n    '''\n    return math.sqrt(area_icosahedron(side) - area_icosahedron_s(side))\ndef volume_icosahedron_s(side):\n    '''\n    Write a function to caluclate the volume of an icosahedron using\n    the shortest side.\n    '''\n    return math.sqrt(area_icosahedron(side) - area_icosahedron_s(side))\ndef area_hexahedron(side1, side2):\n    '''\n    Write a function to caluclate the area of a hexahedron.\n    '''\n    return (3*(side1**2))/2\ndef volume_hexahedron(side1, side2):\n    '''\n    Write a function to caluclate the volume of a hexahedron.\n    '''\n    return (side1**3)*(side2**3)/4\ndef area_hexahedron_s(side1, side2):\n    '''\n    Write a function to caluclate the area of a hexahedron using\n    the shortest side.\n    '''\n    return math.sqrt(area_hexahedron(side1, side2) - area_hexahedron_s(side1, side2))\ndef volume_hexahedron_s(side1, side2):\n    '''\n    Write a function to caluclate the volume of a hexahedron using\n    the shortest side.\n    '''\n    return math.sqrt(area_hexahedron(side1, side2) - area_hexahedron_s(side1, side2))\ndef area_icosahedron_2(side1, side2):\n    '''\n    Write a function to caluclate the area of a icosahedron with two\n    sides.\n    '''\n    return (5*(side1**2))/4\ndef volume_icosahedron_2(side1, side2):\n    '''\n    Write a function to caluclate the volume of a icosahedron with two\n    sides.\n    '''\n    return (side1**3)*(side2**3)/8\ndef area_tetrahedron_2(side1, side2):\n    '''\n    Write a function to caluclate the area of a tetrahedron with two\n    sides.\n    '''\n    return (3*(side1**2))/2\ndef volume_tetrahedron_2(side1, side2):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with two\n    sides.\n    '''\n    return (side1**3)*(side2**3)/4\ndef area_octahedron_2(side1, side2):\n    '''\n    Write a function to caluclate the area of an octahedron with two\n    sides.\n    '''\n    return (5*(side1**2))/2\ndef volume_octahedron_2(side1, side2):\n    '''\n    Write a function to caluclate the volume of an octahedron with two\n    sides.\n    '''\n    return (side1**3)*(side2**3)/4\ndef area_dodecahedron_2(side1, side2):\n    '''\n    Write a function to caluclate the area of a dodecahedron with two\n    sides.\n    '''\n    return (5*(side1**2))/2\ndef volume_dodecahedron_2(side1, side2):\n    '''\n    Write a function to caluclate the volume of a dodecahedron with two\n    sides.\n    '''\n    return (side1**3)*(side2**3)/8\ndef area_icosahedron_2_s(side1, side2):\n    '''\n    Write a function to caluclate the area of an icosahedron with two\n    sides using the shortest side.\n    '''\n    return math.sqrt(area_icosahedron_2(side1, side2) - area_icosahedron_2_s(side1, side2))\ndef volume_icosahedron_2_s(side1, side2):\n    '''\n    Write a function to caluclate the volume of an icosahedron with two\n    sides using the shortest side.\n    '''\n    return math.sqrt(area_icosahedron_2(side1, side2) - area_icosahedron_2_s(side1, side2))\ndef area_hexahedron_2_s(side1, side2):\n    ''"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    return list[n - m:] + list[:n - m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    return list[m:n] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    m = m%len(list)\n    new_list = list[m:len(list)] + list[0:m]\n    return new_list\n    \ndef rotate_left(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the left direction. https://www.geeksforgeeks.org/python-program-left-rotate-list-n/\n    '''\n    m = m%len(list)\n    new_list = list[len(list)-m:len(list)] + list[0:len(list)-m]\n    return new_list\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m == 0:\n        return list\n    if m > len(list):\n        m = m % len(list)\n    return list[-m:] + list[:-m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n    \n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    test_tup = tuple(test_tup)\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    test_tup = (1, 2, 3, 4, 5)\n    if None in test_tup:\n        print 'The tuple has a None value'\n    else:\n        print 'The tuple does not have a None value'\n        \ndef check_none2(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for ele in test_tup:\n        if ele == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return False\n    return True\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [x for x in range(startnum, endnum) if all(x % d == 0 for d in map(int, str(x)))]\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        if all(num % int(i) == 0 for i in str(num)):\n            result.append(num)\n    return result\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    print(list(filter(lambda x: all(num%int(char) for char in str(x)), range(startnum,endnum+1))))\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    divisible_by_digits = list(filter(lambda x: all([int(x)%int(y)==0 for y in str(x)]), range(startnum,endnum)))\n    return divisible_by_digits\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    print startnum, endnum\n    numbers = range(startnum, endnum)\n    for number in numbers:\n        numstr = str(number)\n        if all([number % int(digit) == 0 for digit in numstr]):\n            print number\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [num for num in range(startnum, endnum+1) if all(num%int(str(digit))==0 for digit in str(num))]\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def check_divisible(num):\n        # get the list of the digits of the number\n        strnum = str(num)\n        digits = [int(i) for i in strnum]\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: x % int(str(x)[0]) == 0 and x % int(str(x)[1]) == 0 and x % int(str(x)[2]) == 0 and x % int(str(x)[3]) == 0, range(startnum, endnum + 1)))\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [num for num in range(startnum, endnum+1) if all(num % int(digit) == 0 for digit in str(num))]\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all([x % int(y) == 0 for y in str(x)]), range(startnum, endnum + 1)))\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    angle=a\n    if angle>360:\n        angle=angle-360\n    return 3.14159265359*(r**2)*(angle/180)\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #print \"r = \", r, \"a = \", a\n    if a > 360:\n        return None\n    else:\n        return math.pi*(r**2)*(math.sin(math.radians(a)))\ndef triangle_area(b,c):\n    '''\n    Write a function to find the area of a triangle. The function takes the length of the two sides as inputs. Function should return None if the input is not a positive number.\n    '''\n    if (b > 0) and (c > 0):\n        return (b*c)/2\n    else:\n        return None\ndef rectangle_area(b,h):\n    '''\n    Write a function to find the area of a rectangle. The function takes the length and width as inputs. Function should return None if the input is not a positive number.\n    '''\n    if (b > 0) and (h > 0):\n        return (b*h)\n    else:\n        return None\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle. The function takes the radius as input. Function should return None if the input is not a positive number.\n    '''\n    if (r > 0):\n        return (math.pi*(r**2))\n    else:\n        return None\ndef is_triangle_right(b,c):\n    '''\n    Write a function to check if a triangle is right angle. The function takes the length of the side as input. Function should return True if the side is greater than the hypotenuse. It should return False otherwise.\n    '''\n    #print \"b = \", b, \"c = \", c\n    if (b > c) and (b**2 + c**2) > (2*b*c):\n        return True\n    else:\n        return False\ndef is_triangle_obtuse(b,c):\n    '''\n    Write a function to check if a triangle is obtuse. The function takes the length of the side as input. Function should return True if the side is greater than the hypotenuse. It should return False otherwise.\n    '''\n    #print \"b = \", b, \"c = \", c\n    if (b > c) and (b**2 + c**2) <= (2*b*c):\n        return True\n    else:\n        return False\ndef is_triangle_acute(b,c):\n    '''\n    Write a function to check if a triangle is acute. The function takes the length of the side as input. Function should return True if the side is smaller than the hypotenuse. It should return False otherwise.\n    '''\n    #print \"b = \", b, \"c = \", c\n    if (b > c) and (b**2 + c**2) < (2*b*c):\n        return True\n    else:\n        return False\ndef is_triangle_valid(b,c):\n    '''\n    Write a function to check if a triangle is valid. The function takes the length of the side as input. Function should return True if the side is larger than 0 and is not equal to the hypotenuse. It should return False otherwise.\n    '''\n    #print \"b = \", b, \"c = \", c\n    if (b > 0) and (b!= c) and (c**2 + b**2) > (2*b*c):\n        return True\n    else:\n        return False\ndef is_rectangle_valid(b,h):\n    '''\n    Write a function to check if a rectangle is valid. The function takes the length and width as input. Function should return True if the length and width are positive. It should return False otherwise.\n    '''\n    #print \"b = \", b, \"h = \", h\n    if (b > 0) and (h > 0):\n        return True\n    else:\n        return False\ndef is_circle_valid(r):\n    '''\n    Write a function to check if a circle is valid. The function takes the radius as input. Function should return True if the radius is positive. It should return False otherwise.\n    '''\n    #print \"r = \", r\n    if (r > 0):\n        return True\n    else:\n        return False\ndef is_triangle_valid(b,c):\n    '''\n    Write a function to check if a triangle is valid. The function takes the length of the side as input. Function should return True if the side is larger than 0 and is not equal to the hypotenuse. It should return False otherwise.\n    '''\n    #print \"b = \", b, \"c = \", c\n    if (b > 0) and (b!= c) and (c**2 + b**2) > (2*b*c):\n        return True\n    else:\n        return False\ndef is_rectangle_valid(b,h):\n    '''\n    Write a function to check if a rectangle is valid. The function takes the length and width as input. Function should return True if the length and width are positive. It should return False otherwise.\n    '''\n    #print \"b = \", b, \"h = \", h\n    if (b > 0) and (h > 0):\n        return True\n    else:\n        return False\ndef is_circle_valid(r):\n    '''\n    Write a function to check if a circle is valid. The function takes the radius as input. Function should return True if the radius is positive. It should return False otherwise.\n    '''\n    #print \"r = \", r\n    if (r > 0):\n        return True\n    else:\n        return False\ndef is_obtuse_angle(b,c):\n    '''\n    Write a function to check if an angle is obtuse. The function takes the length of the side as input. Function should return True if the side is greater than the hypotenuse. It should return False otherwise.\n    '''\n    #print \"b = \", b, \"c = \", c\n    if (b > c) and (b**2 + c**2) <= (2*b*c):\n        return True\n    else:\n        return False\ndef is_acute_angle(b,c):\n    '''\n    Write a function to check if an angle is acute. The function takes the length of the side as input. Function should return True if the side is smaller than the hypotenuse. It should return False otherwise.\n    '''\n    #print \"b = \", b, \"c = \", c\n    if (b > c) and (b**2 + c**2) > (2*b*c):\n        return True\n    else:\n        return False\ndef is_right_angle(b,c):\n    '''\n    Write a function to check if an angle is right angle. The function takes the length of the side as input. Function should return True if the side is greater than the hypotenuse. It should return False otherwise.\n    '''\n    #print \"b = \", b, \"c = \", c\n    if (b > c) and (b**2 + c**2) > (2*b*c):\n        return True\n    else:\n        return False\ndef is_point_in_triangle(x,y,b,c,p):\n    '''\n    Write a function to check if a point is inside a triangle. The function takes the x and y coordinates of the point and the length of the side as input. Function should return True if the point is in the triangle and False otherwise.\n    '''\n    #print \"x = \", x, \"y = \", y, \"b = \", b, \"c = \", c, \"p = \", p\n    if (((x - p)**2 + (y - p)**2) <= ((b*b) + (c*c))):\n        return True\n    else:\n        return False\ndef is_point_in_rectangle(x,y,b,h):\n    '''\n    Write a function to check if a point is inside a rectangle. The function takes the x and y coordinates of the point and the length and width of the rectangle as input. Function should return True if the point is in the rectangle and False otherwise.\n    '''\n    #print \"x = \", x, \"y = \", y, \"b = \", b, \"h = \", h\n    if ((x > 0) and (x < b) and (y > 0) and (y < h)):\n        return True\n    else:\n        return False\ndef is_point_in_circle(x,y,r):\n    '''\n    Write a function to check i"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (a < 0):\n        print(\"The angle cannot be negative.\")\n    elif (a > 360):\n        print(\"The angle cannot be greater than 360 degrees.\")\n    else:\n        area = (math.pi*r*r)*(a/360.0)\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return a*math.pi*r*r\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*(r**2)*(math.sin(math.radians(a)))\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    else:\n        return 3.1416*r*r*(1-math.cos(math.radians(a)))\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*r*r*(1-math.cos(a))/4\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return (math.pi * (r ** 2) * (a / 360))\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    try:\n        assert r >= 0\n        assert a >= 0\n    except AssertionError:\n        return None\n    else:\n        return math.pi * (r**2) * abs(a % 360) / 180\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (a > 360):\n        return None\n    else:\n        return 3.14 * r**2 * math.sin(math.radians(a))\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    L = [[[0 for k in range(m+1)] for j in range(n+1)] for i in range(3)]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    X = list(X)\n    Y = list(Y)\n    Z = list(Z)\n    m = len(X) \n    n = len(Y) \n    p = len(Z) \n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    return lcs(X, Y, Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n    LCS = [[[0 for i in range(l+1)] for j in range(n+1)] for k in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(l+1):\n                if i == 0 or j == 0 or k == 0:\n                    LCS[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    LCS[i][j][k] = LCS[i-1][j-1][k-1] + 1\n                else:\n                    LCS[i][j][k] = max(LCS[i-1][j][k], LCS[i][j-1][k], LCS[i][j][k-1])\n    return LCS[m][n][l]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n    L = [[[0 for i in range(l + 1)] for j in range(n + 1)] for k in range(m + 1)] \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(l + 1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] == Z[k - 1]: \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else: \n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], \n                        L[i][j][k - 1]) \n    return L[m][n][l] \n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    lcs_matrix = []\n    for i in range(len(X)):\n        lcs_matrix.append([0] * len(Y))\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k],L[i][j-1][k],L[i][j][k-1]) \n    return L[m][n][o] \n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if X == Y == Z:\n        return len(X)\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    L = [[[0 for i in range(o + 1)] for j in range(n + 1)] for k in range(m + 1)] \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(o + 1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n    return L[m][n][o] \ndef max_sequence(S):\n    if len(S) == 0:\n        return 0\n    max_seq = []\n    for i in range(len(S)):\n        if i == 0:\n            max_seq.append(1)\n        else:\n            max_seq.append(1 + max(max_seq[i-1], max(max_seq[:i]) - 1))\n    return max_seq[len(S) - 1]\ndef max_sequence2(S):\n    max_seq = []\n    for i in range(len(S)):\n        if i == 0:\n            max_seq.append(1)\n        else:\n            max_seq.append(1 + max(max_seq[i-1], max_seq[i-1] - 1))\n    return max(max_seq)\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall('[A-Z][^A-Z]*', str1)\n    for i in range(len(words)):\n        words[i] = words[i].split()\n    \n    result = []\n    for word in words:\n        for word2 in word:\n            result.append(word2)\n    return''.join(result)\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    m = re.findall(r'[A-Z][^A-Z\\s]+', str1, re.I)\n    for i in m:\n        new_str =''.join(i)\n        print new_str\n    return new_str\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    new_str = re.sub('([A-Z][a-z]+)',r' \\1',str1)\n    return new_str\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'[A-Z][^A-Z]*',str1)\n    for word in words:\n        str1 = str1.replace(word, word +'')\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.strip()\n    str1 = str1.lower()\n    #all letters\n    if len(str1) == 0:\n        return''\n    #one letter\n    elif len(str1) == 1:\n        return str1\n    #more than one letter\n    else:\n        temp = ''\n        for i in range(len(str1)):\n            if str1[i].isupper() and i!= 0:\n                temp +=''\n            temp += str1[i]\n        return temp\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub('([A-Z][a-z])', r' \\1', str1)\n    print(str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1=str1.split()\n    str1=' '.join(str1)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    s1 = re.sub(r'[A-Z][^A-Z]*', r' \\1', str1)\n    return s1\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    result = re.sub(\"([A-Z][a-z]+)\",r\"\\1 \", str1)\n    return result\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(\"[A-Z][a-zA-Z]+\",str1)\n    return''.join(words)\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    new_nums = sorted(nums_str, key=lambda x: int(x))\n    return new_nums\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # using sort()\n    nums_str.sort(key = lambda x : int(x))\n    print(nums_str)\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    for i in range(len(nums_str)):\n        for j in range(len(nums_str) - 1):\n            if int(nums_str[j]) > int(nums_str[j+1]):\n                nums_str[j], nums_str[j+1] = nums_str[j+1], nums_str[j]\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # To sort strings in a list we use built-in sort() and string formatting for sorting strings\n    # to numerically\n    # Sample list: ['100','1','0','99']\n    # Sorted list: ['0', '1', '99', '100']\n    # Return list in ascending order\n    return sorted([s for s in nums_str if s.isdigit()])\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    nums_str = [i for i in nums_str if i.isdigit()]\n    for i in nums_str:\n        nums.append(int(i))\n    nums.sort()\n    for i in range(len(nums)):\n        nums[i] = str(nums[i])\n    return ''.join(nums)\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(s) for s in nums_str]\n    nums.sort()\n    return nums\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: float(x))\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sorted_list = sorted(nums_str, key=lambda string: [int(x) for x in string.split('-')])\n    return sorted_list\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Assuming the input is a list of numbers.\n    # We need to sort the list of numbers numerically.\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key = int)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + [test_tup]\n    \ndef sub_tuple(test_list, test_tup):\n    '''\n    Write a function to substract the given tuple from the given list.\n    '''\n    return test_list - [test_tup]\n    \ndef append_list(test_list, test_list2):\n    '''\n    Write a function to append the second list to the first list.\n    '''\n    return test_list + test_list2\n    \ndef insert_list(test_list, test_list2, test_index):\n    '''\n    Write a function to insert the second list to the first list at the given index.\n    '''\n    return test_list[:test_index] + test_list2 + test_list[test_index:]\n    \ndef remove_list(test_list, test_index):\n    '''\n    Write a function to remove the value at the given index from the list.\n    '''\n    return test_list[:test_index] + test_list[test_index+1:]\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.extend(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if test_tup in test_list:\n        return\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + [test_tup]\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + [test_tup]\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    if i >= len(arr):\n        return True\n    \n    if arr[i] > arr[2*i+1] or arr[i] > arr[2*i+2]:\n        return False\n    \n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n    \n    \n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    parent_index = i\n    left_child_index = i * 2 + 1\n    right_child_index = i * 2 + 2\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) or len(arr) == 0:\n        return False\n    if arr[i] < arr[int(i/2)]:\n        return False\n    if arr[i] > arr[int(i/2)]:\n        return True\n    return check_min_heap_helper(arr, int(i/2))\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return\n    if i*2 < len(arr):\n        if arr[i*2] < arr[i] and arr[i*2+1] < arr[i]:\n            return True\n    if i*2 + 1 < len(arr):\n        if arr[i*2] < arr[i] and arr[i*2+1] < arr[i]:\n            return True\n    if check_min_heap_helper(arr, i*2):\n        return True\n    if check_min_heap_helper(arr, i*2+1):\n        return True\n    return False\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    l = len(arr)\n    if l <= 1:\n        return True\n    # if parent is smaller than any of children\n    if (arr[i] > arr[i*2]) or (arr[i] > arr[i*2 + 1]):\n        return False\n    return check_min_heap_helper(arr, i * 2) and check_min_heap_helper(arr, i * 2 + 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    min_element = arr[0]\n    if i >= 1:\n        if arr[i] < min_element:\n            return False\n    if i > 1:\n        if arr[i] > arr[1]:\n            return False\n    if i > 2:\n        if arr[i] > arr[2]:\n            return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    l = len(arr)\n    if i == 0:\n        return True\n    if i == l:\n        return False\n    return (arr[i] < arr[(i - 1) // 2]) and check_min_heap_helper(arr, i - 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2*i+1\n    right = 2*i+2\n    if left >= len(arr) or arr[i] > arr[left] or right >= len(arr) or arr[i] > arr[right]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0 or i >= len(arr):\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    #return fib(n+1)\n    return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 0:\n        print(\"jacobsthal_num: n must be positive\")\n        return\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else: \n        return jacobsthal_num(n-1) + jacobsthal_num(n-2) \n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n <= 0: return 0\n    if n == 1: return 1\n    if n == 2: return 1\n    if n == 3: return 2\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 0:\n        return 0\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    fib_prev = 0\n    fib_curr = 1\n    while n > 1:\n        fib_next = fib_prev + fib_curr\n        fib_prev = fib_curr\n        fib_curr = fib_next\n        n -= 1\n    return fib_next\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return sum(list(map(lambda i: pow(2, i) * (pow(2, i) - 1), range(0, n+1))))\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 0:\n        return 'Invalid Input'\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    else: \n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return sorted(test_list)[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    #Sorting the list to get the smallest record first\n    test_list.sort(key=lambda x: x[1])\n    result = test_list[:K]\n    return result\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_K = test_list[:K]\n    for i in range(K, len(test_list)):\n        if test_list[i] < min_K[0][1]:\n            min_K = [test_list[i]] + min_K\n        elif test_list[i] == min_K[0][1]:\n            min_K.append(test_list[i])\n    return min_K\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    try:\n        # check if K is positive integer\n        if not isinstance(K, int) or K < 1:\n            print(\"K must be a positive integer\")\n            return -1\n        test_list.sort(key=itemgetter(1))\n        return test_list[:K]\n    except:\n        print(\"Input is not a tuple\")\n        return -1\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # test_list = [(\"Mumbai\", \"TataSky\", \"Cricket\"),\n    #             (\"Delhi\", \"TataSky\", \"Cricket\"),\n    #             (\"Chennai\", \"TataSky\", \"Cricket\"),\n    #             (\"Kolkata\", \"TataSky\", \"Cricket\"),\n    #             (\"Mumbai\", \"TataSky\", \"Golf\"),\n    #             (\"Delhi\", \"TataSky\", \"Golf\"),\n    #             (\"Chennai\", \"TataSky\", \"Golf\"),\n    #             (\"Kolkata\", \"TataSky\", \"Golf\"),\n    #             (\"Mumbai\", \"TataSky\", \"Chess\"),\n    #             (\"Delhi\", \"TataSky\", \"Chess\"),\n    #             (\"Chennai\", \"TataSky\", \"Chess\"),\n    #             (\"Kolkata\", \"TataSky\", \"Chess\"),\n    #             (\"Mumbai\", \"TataSky\", \"Dance\"),\n    #             (\"Delhi\", \"TataSky\", \"Dance\"),\n    #             (\"Chennai\", \"TataSky\", \"Dance\"),\n    #             (\"Kolkata\", \"TataSky\", \"Dance\"),\n    #             (\"Mumbai\", \"TataSky\", \"Football\"),\n    #             (\"Delhi\", \"TataSky\", \"Football\"),\n    #             (\"Chennai\", \"TataSky\", \"Football\"),\n    #             (\"Kolkata\", \"TataSky\", \"Football\"),\n    #             (\"Mumbai\", \"TataSky\", \"Hockey\"),\n    #             (\"Delhi\", \"TataSky\", \"Hockey\"),\n    #             (\"Chennai\", \"TataSky\", \"Hockey\"),\n    #             (\"Kolkata\", \"TataSky\", \"Hockey\"),\n    #             (\"Mumbai\", \"TataSky\", \"Kabaddi\"),\n    #             (\"Delhi\", \"TataSky\", \"Kabaddi\"),\n    #             (\"Chennai\", \"TataSky\", \"Kabaddi\"),\n    #             (\"Kolkata\", \"TataSky\", \"Kabaddi\"),\n    #             (\"Mumbai\", \"TataSky\", \"Tennis\"),\n    #             (\"Delhi\", \"TataSky\", \"Tennis\"),\n    #             (\"Chennai\", \"TataSky\", \"Tennis\"),\n    #             (\"Kolkata\", \"TataSky\", \"Tennis\"),\n    #             (\"Mumbai\", \"TataSky\", \"Volleyball\"),\n    #             (\"Delhi\", \"TataSky\", \"Volleyball\"),\n    #             (\"Chennai\", \"TataSky\", \"Volleyball\"),\n    #             (\"Kolkata\", \"TataSky\", \"Volleyball\"),\n    #             (\"Mumbai\", \"TataSky\", \"Badminton\"),\n    #             (\"Delhi\", \"TataSky\", \"Badminton\"),\n    #             (\"Chennai\", \"TataSky\", \"Badminton\"),\n    #             (\"Kolkata\", \"TataSky\", \"Badminton\"),\n    #             (\"Mumbai\", \"TataSky\", \"Snooker\"),\n    #             (\"Delhi\", \"TataSky\", \"Snooker\"),\n    #             (\"Chennai\", \"TataSky\", \"Snooker\"),\n    #             (\"Kolkata\", \"TataSky\", \"Snooker\"),\n    #             (\"Mumbai\", \"TataSky\", \"Singing\"),\n    #             (\"Delhi\", \"TataSky\", \"Singing\"),\n    #             (\"Chennai\", \"TataSky\", \"Singing\"),\n    #             (\"Kolkata\", \"TataSky\", \"Singing\"),\n    #             (\"Mumbai\", \"TataSky\", \"Swimming\"),\n    #             (\"Delhi\", \"TataSky\", \"Swimming\"),\n    #             (\"Chennai\", \"TataSky\", \"Swimming\"),\n    #             (\"Kolkata\", \"TataSky\", \"Swimming\"),\n    #             (\"Mumbai\", \"TataSky\", \"Wrestling\"),\n    #             (\"Delhi\", \"TataSky\", \"Wrestling\"),\n    #             (\"Chennai\", \"TataSky\", \"Wrestling\"),\n    #             (\"Kolkata\", \"TataSky\", \"Wrestling\"),\n    #             (\"Mumbai\", \"TataSky\", \"Golf\"),\n    #             (\"Delhi\", \"TataSky\", \"Golf\"),\n    #             (\"Chennai\", \"TataSky\", \"Golf\"),\n    #             (\"Kolkata\", \"TataSky\", \"Golf\"),\n    #             (\"Mumbai\", \"TataSky\", \"Chess\"),\n    #             (\"Delhi\", \"TataSky\", \"Chess\"),\n    #             (\"Chennai\", \"TataSky\", \"Chess\"),\n    #             (\"Kolkata\", \"TataSky\", \"Chess\"),\n    #             (\"Mumbai\", \"TataSky\", \"Dance\"),\n    #             (\"Delhi\", \"TataSky\", \"Dance\"),\n    #             (\"Chennai\", \"TataSky\", \"Dance\"),\n    #             (\"Kolkata\", \"TataSky\", \"Dance\"),\n    #             (\"Mumbai\", \"TataSky\", \"Football\"),\n    #             (\"Delhi\", \"TataSky\", \"Football\"),\n    #             (\"Chennai\", \"TataSky\", \"Football\"),\n    #             (\"Kolkata\", \"TataSky\", \"Football\"),\n    #             (\"Mumbai\", \"TataSky\", \"Golf\"),\n    #             (\"Delhi\", \"TataSky\", \"Golf\"),\n    #             (\"Chennai\", \"TataSky\", \"Golf\"),\n    #             (\"Kolkata\", \"TataSky\", \"Golf\"),\n    #             (\"Mumbai\", \"TataSky\", \"Chess\"),\n    #             (\"Delhi\", \"TataSky\", \"Chess\"),\n    #             (\"Chennai\", \"TataSky\", \"Chess\"),\n    #             (\"Kolkata\", \"TataSky\", \"Chess\"),\n    #             (\"Mumbai\", \"TataSky\", \"Dance\"),\n    #             (\"Delhi\", \"TataSky\", \"Dance\"),\n    #             (\"Chennai\", \"TataSky\", \"Dance\"),\n    #             (\"Kolkata\", \"TataSky\", \"Dance\"),\n    #             (\"Mumbai\", \"TataSky\", \"Football\"),\n    #             (\"Delhi\", \"TataSky\", \"Football\"),\n    #             (\"Chennai\", \"TataSky\", \"Football\"),\n    #             (\"Kolkata\", \"TataSky\", \"Football\"),\n    #             (\"Mumbai\", \"TataSky\", \"Golf\"),\n    #             (\"Delhi\", \"TataSky\", \"Golf\"),\n    #             (\"Chennai\", \"TataSky\", \"Golf\"),\n    #             (\"Kolkata\", \"TataSky\", \"Golf\"),\n    #             (\"Mumbai\", \"TataSky\", \"Swimming\"),\n    #             (\"Delhi\", \"TataSky\", \"Swimming\"),\n    #             (\"Chennai\", \"TataSky\", \"Swimming\"),\n    #             (\"Kolkata\", \"TataSky\", \"Swimming\"),\n    #             (\"Mumbai\", \"TataSky\", \"Tennis\"),\n    #             (\"Delhi\", \"TataSky\", \"Tennis\"),\n    #             (\"Chennai\", \"TataSky\", \"Tennis\"),\n    #             (\"Kolkata\", \"TataSky\", \"Tennis\"),\n    #             (\"Mumbai\", \"TataSky\", \"Volleyball\"),\n    #             (\"Delhi\", \"TataSky\", \"Volleyball\"),\n    #             (\"Chennai\", \"TataSky\", \"Volleyball\"),\n    #             (\"Kolkata\", \"TataSky\", \"Volleyball\"),\n    #             (\"Mumbai\", \"TataSky\", \"Badminton\"),\n    #             (\"Delhi\", \"Tat"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) == 0:\n        return -1\n    if len(test_list) == 1:\n        return 0\n    if len(test_list) < K:\n        return -1\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    output = []\n    # test_list = test_list.sort(key=lambda x: x[2])\n    # for i in range(len(test_list)):\n    #     output.append(test_list[i][:2])\n    #     if i >= K:\n    #         break\n    # return output\n    return test_list[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if not test_list or not K:\n        return\n    # first sort on key\n    test_list = sorted(test_list, key=lambda x: x[2])\n    # pick kth smallest\n    return test_list[K-1]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    global M\n    M = K\n    for i in range(len(test_list)):\n        if i == 0:\n            max_val = test_list[i][M]\n            max_tuple = test_list[i]\n        else:\n            if test_list[i][M] > max_val:\n                max_val = test_list[i][M]\n                max_tuple = test_list[i]\n    return max_tuple\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    start_time = time.time()\n    # sort_list = sorted(test_list, key = lambda x: x[1])\n    # print(sort_list)\n    minimum = test_list[K - 1]\n    return minimum\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return set(l1) & set(l2) & set(l3)\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    i = 0\n    while i < len(l1):\n        for j in range(0, len(l2)):\n            if l1[i] == l2[j]:\n                for k in range(0, len(l3)):\n                    if l2[j] == l3[k]:\n                        index_list.append(l1[i])\n        i += 1\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    lst = []\n    for i in l1:\n        if i in l2 and i in l3:\n            lst.append(i)\n    return lst\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [l1[i] for i in range(0,len(l1)) if l1[i] in l2 and l1[i] in l3]\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [x for x in l1 if x in l2 and x in l3]\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] and l2[j] == l3[k]:\n                    common.append(l1[i])\n    return common\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # List1: List of words for search\n    # List2: List of words to be searched\n    # List3: List of words to be searched\n    # Find intersection\n    intersection = [x for x in l1 if x in l2 and x in l3]\n    return intersection\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    '''\n    list1 = l1\n    list2 = l2\n    list3 = l3\n    result = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if (i == j) and (j == k) and (i == k):\n                    if list1[i] == list2[j] == list3[k]:\n                        result.append(list1[i])\n    return result\n    '''\n    \n    '''\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if (i == j) and (j == k) and (i == k):\n                    if l1[i] == l2[j] == l3[k]:\n                        result.append(l1[i])\n    return result\n    '''\n    \n    '''\n    list1 = l1\n    list2 = l2\n    list3 = l3\n    result = []\n    i = 0\n    while i < len(list1):\n        j = 0\n        while j < len(list2):\n            k = 0\n            while k < len(list3):\n                if (i == j) and (j == k) and (i == k):\n                    if list1[i] == list2[j] == list3[k]:\n                        result.append(list1[i])\n                k = k + 1\n            j = j + 1\n        i = i + 1\n    return result\n    '''\n    \n    \n    \n    \n    '''\n    l1 = l1\n    l2 = l2\n    l3 = l3\n    result = []\n    \n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if (i == j) and (j == k) and (i == k):\n                    if l1[i] == l2[j] == l3[k]:\n                        result.append(l1[i])\n    return result\n    '''\n    \n    \n    '''\n    l1 = l1\n    l2 = l2\n    l3 = l3\n    result = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if (i == j) and (j == k) and (i == k):\n                    if l1[i] == l2[j] == l3[k]:\n                        result.append(l1[i])\n    return result\n    '''\n    \n    '''\n    l1 = l1\n    l2 = l2\n    l3 = l3\n    result = []\n    i = 0\n    while i < len(l1):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if (i == j) and (j == k) and (i == k):\n                    if l1[i] == l2[j] == l3[k]:\n                        result.append(l1[i])\n        i = i + 1\n    return result\n    '''\n    \n    \n    '''\n    l1 = l1\n    l2 = l2\n    l3 = l3\n    result = []\n    i = 0\n    while i < len(l1):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if (i == j) and (j == k) and (i == k):\n                    if l1[i] == l2[j] == l3[k]:\n                        result.append(l1[i])\n        i = i + 1\n    return result\n    '''\n    \n    \n    \n    \n    \n    '''\n    l1 = l1\n    l2 = l2\n    l3 = l3\n    result = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if (i == j) and (j == k) and (i == k):\n                    if l1[i] == l2[j] == l3[k]:\n                        result.append(l1[i])\n    return result\n    '''\n    \n    \n    \n    \n    \n    '''\n    l1 = l1\n    l2 = l2\n    l3 = l3\n    result = []\n    i = 0\n    while i < len(l1):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if (i == j) and (j == k) and (i == k):\n                    if l1[i] == l2[j] == l3[k]:\n                        result.append(l1[i])\n        i = i + 1\n    return result\n    '''\n    \n    \n    \n    '''\n    l1 = l1\n    l2 = l2\n    l3 = l3\n    result = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if (i == j) and (j == k) and (i == k):\n                    if l1[i] == l2[j] == l3[k]:\n                        result.append(l1[i])\n    return result\n    '''\n    \n    \n    \n    \n    \n    '''\n    l1 = l1\n    l2 = l2\n    l3 = l3\n    result = []\n    i = 0\n    while i < len(l1):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if (i == j) and (j == k) and (i == k):\n                    if l1[i] == l2[j] == l3[k]:\n                        result.append(l1[i])\n        i = i + 1\n    return result\n    '''\n    \n    \n    \n    \n    \n    '''\n    l1 = l1\n    l2 = l2\n    l3 = l3\n    result = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if (i == j) and (j == k) and (i == k):\n                    if l1[i] == l2[j] == l3[k]:\n                        result.append(l1[i])\n    return result\n    '''\n    \n    \n    \n    \n    \n    '''\n    l1 = l1\n    l2 = l2\n    l3 = l3\n    result = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if (i == j) and (j == k) and (i == k):\n                    if l1[i] == l2[j] == l3[k]:\n                        result.append(l1[i])\n    return result\n    '''\n    \n    \n    \n    \n    \n    '''\n    l1 = l1\n    l2 = l2\n    l3 = l3\n    result = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if (i == j) and (j == k) and (i == k):\n                    if l1[i] == l2[j] == l3[k]:\n                        result.append(l1[i])\n    return result\n    '''\n    \n    \n    \n    \n    \n    '''\n    l1 = l1\n    l2 = l2\n    l3 = l3\n    result = []\n    for i in range(len(l1)):\n        fo"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if (l1[i] == l2[i]) and (l2[i] == l3[i]):\n            common.append(l1[i])\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for x in l1:\n        for y in l2:\n            if x == y:\n                for z in l3:\n                    if x == z:\n                        index_list.append(x)\n    return index_list\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        raise ValueError('List must have at least two numbers')\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    min = None\n    second_min = None\n    for i in range(len(numbers)):\n        if numbers[i] < min or min == None:\n            min = numbers[i]\n            second_min = numbers[i]\n    for i in range(len(numbers)):\n        if numbers[i] < second_min and numbers[i] > min:\n            second_min = numbers[i]\n    return second_min\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = None\n    second_smallest = None\n    for number in numbers:\n        if smallest is None or number < smallest:\n            smallest, second_smallest = number, smallest\n        elif second_smallest is None or number < second_smallest:\n            second_smallest = number\n    return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if not numbers:\n        return None\n    numbers = sorted(numbers)\n    if len(numbers) == 1:\n        return None\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Find the smallest number using min function\n    # Store the smallest number in a variable\n    # Now find the next smallest number using a loop\n    # and compare it with the smallest number.\n    # If the next number is smaller than the smallest number,\n    # make it the smallest number\n    # Repeat the process until the list is exhausted\n    # In the end return the second smallest number\n    smallest = min(numbers)\n    next_smallest = smallest + 1\n    while next_smallest in numbers:\n        next_smallest += 1\n    return next_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_list = sorted(numbers)\n    return sorted_list[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    if len(numbers) == 2:\n        return min(numbers)\n    first_min = min(numbers)\n    second_min = min(x for x in numbers if x!= first_min)\n    return second_min\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return\n    else:\n        first_smallest = min(numbers)\n        for i in numbers:\n            if i < first_smallest:\n                second_smallest = i\n                break\n        return second_smallest\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    import re\n    return re.search(r'(?=.*a.*b)*', text)\n    \ndef test_text_match_zero_one():\n    assert text_match_zero_one('abababab') == None\n    assert text_match_zero_one('aaaaabab') == None\n    assert text_match_zero_one('abbbbbbaa') == None\n    assert text_match_zero_one('abbbbaab') == None\n    assert text_match_zero_one('aaababbab') == None\n    assert text_match_zero_one('abababbba') == None\n    assert text_match_zero_one('abbbabbba') == None\n    assert text_match_zero_one('bbbbbbbaa') == None\n    assert text_match_zero_one('bbbbbbbaa') == None\n    assert text_match_zero_one('aaaaaaaaaa') == None\n    assert text_match_zero_one('aaaaaaaaab') == None\n    assert text_match_zero_one('aaaaaaaaaab') == None\n    assert text_match_zero_one('aaaaaaaaaaab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaa') == None\n    assert text_match_zero_one('aaaaaaaaaaaaab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaaba') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbaa') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbaab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbaabbbaa') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbaabbbbaa') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbbaabbbaab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbbaabbbaaa') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbbaabbbaaba') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbbaabbbaabaababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbbaabbbaabaababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbbaabbbaabaababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbbaabbbaabaababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbbaabbbaabaababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbbaabbbaabaababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbbaabbbaabaababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbbaabbbaabaababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbbaabbbaabaababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbbaabbbaabaababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbbaabbbaabaababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbbaabbbaabaababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbbaabbbaabaababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbbaabbbaabaababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbbaabbbaabaababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbbaabbbaabaababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbbaabbbaabaababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbbaabbbaabaababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbbaabbbaabaababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbbaabbbaabaababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbbaabbbaabaababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbbaabbbaabaababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbaabbbaabaabababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbaabbbaabaabababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbaabbbaabaabababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbaabbbaabaabababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbaabbbaabaabababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbaabbbaabaabababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbaabbbaabaabababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbaabbbaabaabababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbaabbbaabaabababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbaabbbaabaabababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbaabbbaabaabababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbaabbbaabaabababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbaabbbaabaabababababababababababababababababab') == None\n    assert text_match_zero_one('aaaaaaaaaaaaaaabbbaabbbaabaabababababababababababa"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    print re.match(r\"a[ab]+\",text)\n    \n    \ndef text_match_zero_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-4.php\n    '''\n    print re.match(r\"a[ab]+\",text)\n    \ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-5.php\n    '''\n    print re.match(r\"a[ab]+\",text)\n    \ndef text_match_question_mark(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-6.php\n    '''\n    print re.match(r\"a[ab]+\",text)\n    \ndef text_match_multiple_question_mark(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-7.php\n    '''\n    print re.match(r\"a[ab]+\",text)\n    \ndef text_match_escaped_digit_or_space(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-8.php\n    '''\n    print re.match(r\"a[ab]+\",text)\n    \ndef text_match_escaped_char(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-9.php\n    '''\n    print re.match(r\"a[ab]+\",text)\n    \ndef text_match_escaped_character(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-10.php\n    '''\n    print re.match(r\"a[ab]+\",text)\n    \ndef text_match_escape_sequence(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-11.php\n    '''\n    print re.match(r\"a[ab]+\",text)\n    \ndef text_match_escape_sequence_2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-12.php\n    '''\n    print re.match(r\"a[ab]+\",text)\n    \ndef text_match_escape_sequence_3(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-13.php\n    '''\n    print re.match(r\"a[ab]+\",text)\n    \ndef text_match_escape_sequence_4(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-14.php\n    '''\n    print re.match(r\"a[ab]+\",text)\n    \ndef text_match_escape_sequence_5(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-15.php\n    '''\n    print re.match(r\"a[ab]+\",text)\n    \ndef text_match_escape_sequence_6(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-16.php\n    '''\n    print re.match(r\"a[ab]+\",text)\n    \ndef text_match_escape_sequence_7(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-17.php\n    '''\n    print re.match(r\"a[ab]+\",text)\n    \ndef text_match_escape_sequence_8(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-18.php\n    '''\n    print re.match(r\"a[ab]+\",text)\n    \ndef text_match_escape_sequence_9(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-19.php\n    '''\n    print re.match(r\"a[ab]+\",text)\n    \ndef text_match_escape_sequence_10(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-20.php\n    '''\n    print re.match(r\"a[ab]+\",text)\n    \ndef text_match_escape_sequence_11(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-21.php\n    '''\n    print re.match(r\"a[ab]+\",text)\n    \ndef text_match_escape_sequence_12(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-22.php\n    '''\n    print re.match(r\"a[ab]+\",text)\n    \ndef text_match_escape_sequence_13(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-23.php\n    '''\n    print re.match(r\"a[ab]+\",text)\n    \ndef text_match_escape_sequence_14(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-24.php\n    '''\n    print re.match(r\"a[ab]+\",text)\n    \ndef text_match_escape_sequence_15(text):\n    '''\n    Write a function that matche"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.match(text):\n        print('Match Found')\n    else:\n        print('Match not found')\n        \ndef text_match_zero_many(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-4.php\n    '''\n    pattern = re.compile(r'ab*')\n    if pattern.match(text):\n        print('Match Found')\n    else:\n        print('Match not found')\n        \ndef text_match_one_many(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-5.php\n    '''\n    pattern = re.compile(r'ab+?')\n    if pattern.match(text):\n        print('Match Found')\n    else:\n        print('Match not found')\n        \ndef text_match_one_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-6.php\n    '''\n    pattern = re.compile(r'ab{1}?')\n    if pattern.match(text):\n        print('Match Found')\n    else:\n        print('Match not found')\n        \ndef text_match_exactly(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-7.php\n    '''\n    pattern = re.compile(r'ab{1}')\n    if pattern.match(text):\n        print('Match Found')\n    else:\n        print('Match not found')\n        \ndef text_match_exactly_once(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-8.php\n    '''\n    pattern = re.compile(r'ab{1,1}')\n    if pattern.match(text):\n        print('Match Found')\n    else:\n        print('Match not found')\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print(match.group())\n    else:\n        print('-1')\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    regex = re.compile(r'a+b')\n    if re.search(regex,text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search('ab*',text)\n    if result:\n        return result.start()\n    else:\n        return False\ndef text_match_zero_n(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 0 or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search('ab*',text)\n    if result:\n        return result.start()\n    else:\n        return False\ndef text_match_one_or_more_a(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 1 or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search('ab+',text)\n    if result:\n        return result.start()\n    else:\n        return False\ndef text_match_one_or_more_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 0 or 1 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search('ab+',text)\n    if result:\n        return result.start()\n    else:\n        return False\ndef text_match_one_or_more_ab(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 1 or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search('ab+',text)\n    if result:\n        return result.start()\n    else:\n        return False\ndef text_match_one_or_more_b_ab(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 0, 1 or 2 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search('ab+',text)\n    if result:\n        return result.start()\n    else:\n        return False\ndef text_match_zero_or_one_a(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 0 or 1 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search('ab*',text)\n    if result:\n        return result.start()\n    else:\n        return False\ndef text_match_zero_or_one_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 0 or 1 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search('ab*',text)\n    if result:\n        return result.start()\n    else:\n        return False\ndef text_match_zero_or_more_a(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 0 or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search('ab*',text)\n    if result:\n        return result.start()\n    else:\n        return False\ndef text_match_zero_or_more_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 0 or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search('ab*',text)\n    if result:\n        return result.start()\n    else:\n        return False\ndef text_match_one_or_more_a_or_more_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 1 or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search('ab*',text)\n    if result:\n        return result.start()\n    else:\n        return False\ndef text_match_zero_or_one_a_or_more_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 0 or 1 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search('ab*',text)\n    if result:\n        return result.start()\n    else:\n        return False\ndef text_match_zero_or_more_a_or_more_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 0 or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search('ab*',text)\n    if result:\n        return result.start()\n    else:\n        return False\ndef text_match_one_or_more_a_or_more_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 1 or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search('ab*',text)\n    if result:\n        return result.start()\n    else:\n        return False\ndef text_match_zero_or_one_a_or_more_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 0 or 1 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search('ab*',text)\n    if result:\n        return result.start()\n    else:\n        return False\ndef text_match_zero_or_more_a_or_more_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 0 or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search('ab*',text)\n    if result:\n        return result.start()\n    else:\n        return False\ndef text_match_one_or_more_a_or_more_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 1 or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search('ab*',text)\n    if result:\n        return result.start()\n    else:\n        return False\ndef text_match_zero_or_one_a_or_more_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by 0 or 1 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search('ab*',text)\n    if result:\n        return result.start()\n    else:\n        return False\ndef text_match_zero_or_more_a_or_more_b(text):\n    '''\n    Write a function that matches a string that has an '"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'(?<=a)(?:\\s)*(?=b)')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a_pattern = re.compile(r'a+b')\n    m = a_pattern.search(text)\n    if m:\n        print 'Found a match!'\n    else:\n        print 'no match found'\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"(.)a(.)b.*\")\n    if pattern.match(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # Using regex to match text\n    match = re.search(r\"(ab)*\", text)\n    #Check if match is found\n    if match:\n        return match.group()\n    else:\n        return \"\"\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pairs_count = 0\n    for word1, word2 in combinations(test_list, 2):\n        if word1[::-1] == word2:\n            pairs_count += 1\n    return pairs_count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if(test_list[i] == test_list[j][::-1]):\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    l = len(test_list)\n    if l == 0:\n        return 0\n    for i in range(l):\n        test_list[i] = \"\".join(reversed(test_list[i]))\n    count = 0\n    for i in range(l):\n        for j in range(i + 1, l):\n            if test_list[i] == \"\".join(reversed(test_list[j])):\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    return len([s for s in test_list if s[::-1] in test_list])\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[-1-i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_list = []\n    for i in range(len(test_list)):\n        reverse_list.append(test_list[i][::-1])\n    for i in range(len(reverse_list)):\n        for j in range(i+1, len(reverse_list)):\n            if reverse_list[i] == reverse_list[j]:\n                return 1\n    return 0\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][::-1] == test_list[j][::-1]):\n                reverse_pairs += 1\n    return reverse_pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n    "
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    return len(test_list)//2\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    dict1 = {}\n    for i in list1:\n        tup1 = tuple(i)\n        if tup1 in dict1:\n            dict1[tup1] += 1\n        else:\n            dict1[tup1] = 1\n    return dict1\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_of_tuples = []\n    count = 0\n    for l in list1:\n        for i in range(0,len(l)):\n            count = 0\n            for j in range(i,len(l)):\n                if l[i:j+1] in l[i:len(l)]:\n                    count += 1\n            list_of_tuples.append((tuple(l[i:j+1]),count))\n    return {t:list_of_tuples.count(t) for t in list_of_tuples}\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict={}\n    for l in list1:\n        if tuple(l) in dict:\n            dict[tuple(l)]+=1\n        else:\n            dict[tuple(l)]=1\n    return dict\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    new_list = [list(i) for i in list1]\n    new_list = list(set(new_list))\n    new_list = [tuple(i) for i in new_list]\n    dict_list = {k: new_list.count(k) for k in new_list}\n    return dict_list\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict = {}\n    for i in range(len(list1)):\n        if list1[i] in dict:\n            dict[list1[i]] += 1\n        else:\n            dict[list1[i]] = 1\n    return dict\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    freq = {}\n    for i in list1:\n        if type(i) == list:\n            for j in i:\n                tup = tuple(j)\n                if tup in freq:\n                    freq[tup] += 1\n                else:\n                    freq[tup] = 1\n        else:\n            tup = tuple(i)\n            if tup in freq:\n                freq[tup] += 1\n            else:\n                freq[tup] = 1\n    return freq\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    def sublist_occurance(list1):\n        occurrences = {}\n        for sublist in list1:\n            occurrences[tuple(sublist)] = list1.count(sublist)\n        return occurrences\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in list1:\n        if tuple(i) not in count:\n            count[tuple(i)] = 1\n        else:\n            count[tuple(i)] += 1\n    return count\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for i in list1:\n        t = tuple(i)\n        if t in counts:\n            counts[t] += 1\n        else:\n            counts[t] = 1\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    if len(list1) < 1:\n        return {}\n    elif len(list1) == 1:\n        return {tuple(list1): 1}\n    else:\n        unique_sublists_dict = {}\n        for i in range(len(list1)):\n            if i == 0:\n                unique_sublists_dict[tuple(list1[i])] = 1\n            else:\n                new_sublist = list(list1[:i]) + list(list1[i+1:])\n                unique_sublists_dict[tuple(new_sublist)] = unique_sublists_dict[tuple(list1[:i])] + unique_sublists_dict[tuple(list1[i+1:])]\n        return unique_sublists_dict\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # method 1\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.count('.')!= 1:\n        return False\n    \n    if num.find('E')!= -1:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    s = str(num)\n    for i in range(len(s)):\n        if s[i] == '.':\n            if s[i-1] == '0' or s[i-1] == '1' or s[i-1] == '2' or s[i-1] == '3' or s[i-1] == '4' or s[i-1] == '5' or s[i-1] == '6' or s[i-1] == '7' or s[i-1] == '8' or s[i-1] == '9':\n                return True\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.count('.')!= 1:\n        return False\n    num = num.split('.')\n    if len(num[0]) > 3 or len(num[1]) > 3:\n        return False\n    for i in num[0]:\n        if not i in '0123456789':\n            return False\n    for i in num[1]:\n        if not i in '0123456789':\n            return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return re.match(r'^\\d*\\.\\d*$', num) is not None\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if len(num) > 1:\n        if num[0] == '-':\n            return False\n        if num[-1] == '0':\n            return False\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n    \ndef is_permutation(str1, str2):\n    '''\n    Write a function to check whether two strings are permutations of one another. \n    Two strings are said to be permutations if you can rearrange one string into the other,\n    in any possible way, without changing the meaning of the characters.\n    For example, \u201ccat\u201d and \u201ctca\u201d are permutations of each other, but \u201cdog\u201d and \u201cog\u201d are not.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    \n    str1 = sorted(str1)\n    str2 = sorted(str2)\n    \n    if str1 == str2:\n        return True\n    return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if len(num) > 1 and num.index('.')!= 0:\n        return False\n    if num.count('.') > 1:\n        return False\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num == '' or num =='':\n        return False\n    elif num[0] == '-':\n        return is_decimal(num[1:])\n    else:\n        return is_digit(num) and num == str(float(num))\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.find('.') == -1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    def is_decimal_recursive(num, start, len):\n        if start == len:\n            return True\n        elif num[start] == '.':\n            if num[start+1] == '.':\n                return False\n            elif num[start+1] in '0123456789':\n                return is_decimal_recursive(num, start+1, len)\n            else:\n                return False\n        else:\n            return is_decimal_recursive(num, start+1, len)\n    return is_decimal_recursive(num, 0, len(num))\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr=arr[:]\n    n=len(arr)\n    for i in xrange(n):\n        for j in xrange(i+1,n):\n            if arr[i]==arr[j]:\n                arr[j]='REMOVED'\n                break\n    arr=[x for x in arr if x!='REMOVED']\n    return arr\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] == arr[j]:\n                return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    dict1={}\n    for i in range(len(arr)):\n        dict1[arr[i]]=0\n    for i in range(len(arr)):\n        dict1[arr[i]]+=1\n    for i in dict1:\n        if(dict1[i]>1):\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) > 2:\n        return False\n    elif len(arr) == 2:\n        return (arr[0]!= arr[1])\n    else:\n        return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    count = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            count += 1\n    if count == 1:\n        print 'Yes'\n    else:\n        print 'No'\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == len(arr)\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(arr) == len(set(arr))\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    ele_arr = []\n    for ele in arr:\n        if ele not in ele_arr:\n            ele_arr.append(ele)\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr_1 = set(arr)\n    if len(arr_1) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d = {}\n    for i in arr:\n        if i not in d.keys():\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in d.keys():\n        if d[i] > 1:\n            return False\n    return True\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    if (monthnum3 in [1,3,5,7,8,10,12]):\n        return 1\n    elif (monthnum3 in [4,6,9,11]):\n        return 2\n    elif (monthnum3 == 2):\n        return 3\n    else:\n        return 0\n    \n    \ndef check_leapyear(year):\n    '''\n    Write a function to check whether a given year is a leap year or not.\n    '''\n    \n    if (year % 400 == 0):\n        return 1\n    elif (year % 100 == 0):\n        return 0\n    elif (year % 4 == 0):\n        return 1\n    else:\n        return 0\n    \n    \ndef check_dayname(dayname,monthnum3):\n    '''\n    Write a function to check whether the given day name is valid for the month.\n    '''\n    \n    if (monthnum3 == 1):\n        if (dayname in ['Friday','Saturday']):\n            return 1\n        else:\n            return 0\n    elif (monthnum3 == 2):\n        if (dayname in ['Saturday','Sunday']):\n            return 1\n        else:\n            return 0\n    elif (monthnum3 == 3):\n        if (dayname in ['Thursday','Friday','Saturday']):\n            return 1\n        else:\n            return 0\n    elif (monthnum3 == 4):\n        if (dayname in ['Friday','Saturday']):\n            return 1\n        else:\n            return 0\n    elif (monthnum3 == 5):\n        if (dayname in ['Friday','Saturday']):\n            return 1\n        else:\n            return 0\n    elif (monthnum3 == 6):\n        if (dayname in ['Wednesday','Thursday','Friday','Saturday']):\n            return 1\n        else:\n            return 0\n    elif (monthnum3 == 7):\n        if (dayname in ['Wednesday','Thursday','Friday','Saturday']):\n            return 1\n        else:\n            return 0\n    elif (monthnum3 == 8):\n        if (dayname in ['Wednesday','Thursday','Friday','Saturday']):\n            return 1\n        else:\n            return 0\n    elif (monthnum3 == 9):\n        if (dayname in ['Wednesday','Thursday','Friday','Saturday']):\n            return 1\n        else:\n            return 0\n    elif (monthnum3 == 10):\n        if (dayname in ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']):\n            return 1\n        else:\n            return 0\n    elif (monthnum3 == 11):\n        if (dayname in ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']):\n            return 1\n        else:\n            return 0\n    elif (monthnum3 == 12):\n        if (dayname in ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']):\n            return 1\n        else:\n            return 0\n    else:\n        return 0\n    \ndef get_time_str(h,m):\n    '''\n    Write a function to get the current time in the form of 24 hour clock.\n    '''\n    \n    if (h == 12):\n        return str(h) + ':' + str(m)\n    elif (h < 12):\n        return str(h) + ':' + str(m)\n    else:\n        h = h - 12\n        return str(h) + ':' + str(m)\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in range(1, 13):\n        if monthnum3 == 2:\n            if is_leapyear(yearnum3):\n                return 30\n            else:\n                return 29\n        else:\n            return 30\n    else:\n        return \"Month number does not exist\"\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        if day_number_of_month(monthnum3) == 30:\n            return True\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        if day_number_of_month(monthnum3) == 31:\n            return True\n    if monthnum3 == 2:\n        if day_number_of_month(monthnum3) == 28:\n            return True\n    return False\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,2,3,4,5,6,7,8,9,10,11,12]:\n        return \"This month has 31 days\"\n    else:\n        return \"This month has 30 days\"\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,2,3,4,5,6,7,8,9,10,11,12]:\n        print 'The number of days is 30 days'\n    else:\n        print 'The number of days is 28 days'\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    return False\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    return monthnum3 in [1, 3, 5, 7, 8, 10, 12]\ndef is_leapyear(yearnum):\n    '''\n    Write a function to check whether the given year number is a leap year or not. Leap years are years which contain 366 days or February 29 days.\n    '''\n    if yearnum % 4 == 0:\n        if check_monthnumber_number(yearnum % 100) == True:\n            return yearnum % 400 == 0\n        else:\n            return True\n    else:\n        return False\ndef find_max_days_in_month(monthnum, yearnum):\n    '''\n    Write a function to find the maximum number of days in the given month number and year number.\n    '''\n    if check_monthnumber_number(monthnum) == True:\n        daysinmonth = 31\n    elif check_monthnumber_number(monthnum) == False:\n        daysinmonth = 30\n    elif is_leapyear(yearnum) == True:\n        daysinmonth = 29\n    else:\n        daysinmonth = 28\n    return daysinmonth\ndef find_min_days_in_month(monthnum, yearnum):\n    '''\n    Write a function to find the minimum number of days in the given month number and year number.\n    '''\n    if check_monthnumber_number(monthnum) == True:\n        daysinmonth = 31\n    elif check_monthnumber_number(monthnum) == False:\n        daysinmonth = 30\n    elif is_leapyear(yearnum) == True:\n        daysinmonth = 29\n    else:\n        daysinmonth = 28\n    return daysinmonth\ndef get_month_days(monthnum, yearnum):\n    '''\n    Write a function to get the number of days in the given month number and year number.\n    '''\n    daysinmonth = find_max_days_in_month(monthnum, yearnum)\n    return daysinmonth\ndef days_in_month_range(monthnum1, yearnum1, monthnum2, yearnum2):\n    '''\n    Write a function to get the number of days between the given month number 1 and year number 1, and the given month number 2 and year number 2.\n    '''\n    daysinmonth1 = get_month_days(monthnum1, yearnum1)\n    daysinmonth2 = get_month_days(monthnum2, yearnum2)\n    return daysinmonth1 + daysinmonth2\ndef days_in_year_range(monthnum1, yearnum1, monthnum2, yearnum2):\n    '''\n    Write a function to get the number of days between the given month number 1 and year number 1, and the given month number 2 and year number 2.\n    '''\n    daysinyear1 = days_in_month_range(monthnum1, yearnum1, monthnum1, yearnum2)\n    daysinyear2 = days_in_month_range(monthnum1, yearnum1, monthnum2, yearnum2)\n    return daysinyear1 + daysinyear2\ndef days_in_month_range_list(monthnumlist, yearnumlist):\n    '''\n    Write a function to get the number of days between the given month number 1 and year number 1, and the given month number 2 and year number 2.\n    '''\n    daysinmonthlist = []\n    for i in range(len(monthnumlist)):\n        daysinmonthlist.append(get_month_days(monthnumlist[i], yearnumlist[i]))\n    return daysinmonthlist\ndef days_in_year_range_list(monthnumlist, yearnumlist):\n    '''\n    Write a function to get the number of days between the given month number 1 and year number 1, and the given month number 2 and year number 2.\n    '''\n    daysinyearlist = []\n    for i in range(len(monthnumlist)):\n        daysinyearlist.append(days_in_month_range(monthnumlist[i], yearnumlist[i], monthnumlist[i], yearnumlist[i]))\n    return daysinyearlist\ndef days_in_month_range_list_test(monthnumlist, yearnumlist):\n    '''\n    Write a function to get the number of days between the given month number 1 and year number 1, and the given month number 2 and year number 2.\n    '''\n    daysinmonthlist = []\n    for i in range(len(monthnumlist)):\n        daysinmonthlist.append(get_month_days(monthnumlist[i], yearnumlist[i]))\n    return daysinmonthlist\ndef days_in_year_range_list_test(monthnumlist, yearnumlist):\n    '''\n    Write a function to get the number of days between the given month number 1 and year number 1, and the given month number 2 and year number 2.\n    '''\n    daysinyearlist = []\n    for i in range(len(monthnumlist)):\n        daysinyearlist.append(days_in_month_range(monthnumlist[i], yearnumlist[i], monthnumlist[i], yearnumlist[i]))\n    return daysinyearlist\ndef calendar_function(yearnum):\n    '''\n    Write a function to get the calendar in a string format. The number of rows should be equal to the number of days in the given year number.\n    '''\n    monthlist = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    daylist = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n    monthlist = list(reversed(monthlist))\n    yearnum = int(yearnum)\n    monthnumlist = []\n    for i in range(12):\n        monthnumlist.append(i + 1)\n    monthnumlist = list(reversed(monthnumlist))\n    monthdaylist = []\n    for i in range(12):\n        monthdaylist.append(monthlist[i])\n    monthdaylist = list(reversed(monthdaylist))\n    monthdaylist_to_daylist = []\n    for i in range(12):\n        monthdaylist_to_daylist.append(daylist[i])\n    monthdaylist_to_daylist = list(reversed(monthdaylist_to_daylist))\n    yeardaylist = []\n    for i in range(366):\n        yeardaylist.append(i + 1)\n    yeardaylist = list(reversed(yeardaylist))\n    yeardaylist_to_daylist = []\n    for i in range(366):\n        yeardaylist_to_daylist.append(daylist[i])\n    yeardaylist_to_daylist = list(reversed(yeardaylist_to_daylist))\n    daylist_to_daylist = []\n    for i in range(7):\n        daylist_to_daylist.append(daylist[i])\n    daylist_to_daylist = list(reversed(daylist_to_daylist))\n    yeardaylist_to_monthlist = []\n    for i in range(366):\n        yeardaylist_to_monthlist.append(monthnumlist[i % 12])\n    yeardaylist_to_monthlist = list(reversed(yeardaylist_to_monthlist))\n    yeardaylist_to_monthlist_to_daylist = []\n    for i in range(366):\n        yeardaylist_to_monthlist_to_daylist.append(monthdaylist[i % 12])\n    yeardaylist_to_monthlist_to_daylist = list(reversed(yeardaylist_to_monthlist_to_daylist))\n    yeardaylist_to_monthlist_to_daylist_to_daylist = []\n    for i in range(366):\n        yeardaylist_to_monthlist_to_daylist_to_daylist.append(daylist_to_daylist[i % 7])\n    yeardaylist_to_monthlist_to_daylist_to_daylist = list(reversed(yeardaylist_to_monthlist_to_daylist_to_daylist))\n    yeardaylist_to_monthlist_to_daylist_to_daylist_to_daylist = list(reversed(yeardaylist_to_monthlist_to_daylist_to_da"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        if day_of_month_number(monthnum3) == 30:\n            return True\n        else:\n            return False\n    elif monthnum3 == 2:\n        if day_of_month_number(monthnum3) == 28:\n            return True\n        else:\n            return False\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        if day_of_month_number(monthnum3) == 31:\n            return True\n        else:\n            return False\n    elif monthnum3 == 12:\n        if day_of_month_number(monthnum3) == 31:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[n-1] - arr[0]\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    smallest = 10**5\n    for i in range(0,n-1):\n        smallest = min(smallest, abs(arr[i] - arr[i+1]))\n    return smallest\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    ans = 0\n    for i in range(n-1):\n        ans = min(ans, arr[i+1]-arr[i])\n    return ans\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = abs(arr[0]-arr[1])\n    \n    for i in range(n): \n        for j in range(i+1,n):\n            min_diff = min(min_diff,abs(arr[i]-arr[j]))\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(n-1):\n        min_diff = min(min_diff, arr[i+1] - arr[i])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    mini = arr[1] - arr[0]\n    for i in range(1, n-1):\n        mini = min(mini, arr[i+1] - arr[i])\n    return mini\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n==1:\n        return 0\n    \n    arr.sort()\n    min_diff=arr[n-1]-arr[0]\n    for i in range(n-1):\n        min_diff=min(min_diff,arr[i+1]-arr[i])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[n-1] - arr[0]\n    for i in range(0, n - 1):\n        if arr[i] + arr[i+1] < min_diff:\n            min_diff = arr[i] + arr[i+1]\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff=abs(arr[0]-arr[1])\n    for i in range(n-1):\n        min_diff=min(min_diff,abs(arr[i]-arr[i+1]))\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    l = len(arr)\n    # Use a two pointer approach to find the minimum diff\n    for i in range(l-1):\n        diff = arr[i+1] - arr[i]\n        if diff < 0:\n            return arr[i+1] - arr[i]\n    return arr[-1] - arr[0]\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str) - len(str.lstrip('0'))\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    \n    count = 0\n    for i in str:\n        if i.isdigit():\n            count+=1\n    return count\n            \n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for digit in str:\n        if digit.isdigit():\n            count = count + 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in range(len(str)):\n        if str[i].isdigit():\n            ctr+=1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    #   Try and Except Block\n    try:\n        #   Assign Result to variable Count\n        Count = 0\n        #   Loop Through String\n        for x in str:\n            #   If Character is Digit\n            if x.isdigit():\n                #   Add One to Count\n                Count += 1\n        #   Return Count\n        return Count\n    #   If Error Occurs\n    except:\n        #   Return Zero\n        return 0\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for x in str:\n        if x.isdigit():\n            count += 1\n    return count\n    \ndef c2f(c):\n    '''\n    Write a python function to convert Celsius to Fahrenheit.\n    '''\n    c = float(c)\n    return (c*9/5)+32\n    \ndef f2c(f):\n    '''\n    Write a python function to convert Fahrenheit to Celsius.\n    '''\n    f = float(f)\n    return (f-32)*5/9\n    \ndef num_to_num(n):\n    '''\n    Write a python function to convert number to string.\n    '''\n    s = str(n)\n    return s\n    \ndef c2r(c):\n    '''\n    Write a python function to convert Celsius to Rankine.\n    '''\n    c = float(c)\n    return c+273.15\n    \ndef r2c(r):\n    '''\n    Write a python function to convert Rankine to Celsius.\n    '''\n    r = float(r)\n    return (r-273.15)\n    \ndef num_to_unit(n):\n    '''\n    Write a python function to convert number to unit.\n    '''\n    if n == 0:\n        return \"\"\n    units = [\"\",\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\",\"eleven\",\"twelve\",\"thirteen\",\"fourteen\",\"fifteen\",\"sixteen\",\"seventeen\",\"eighteen\",\"nineteen\"]\n    tens = [\"\",\"\",\"twenty\",\"thirty\",\"forty\",\"fifty\",\"sixty\",\"seventy\",\"eighty\",\"ninety\"]\n    if n == 0:\n        return \"\"\n    if n > 19:\n        return tens[n//10] + units[n%10]\n    else:\n        return units[n]\n    \ndef unit_to_num(s):\n    '''\n    Write a python function to convert unit to number.\n    '''\n    if s == \"\":\n        return 0\n    units = [\"\",\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\",\"eleven\",\"twelve\",\"thirteen\",\"fourteen\",\"fifteen\",\"sixteen\",\"seventeen\",\"eighteen\",\"nineteen\"]\n    tens = [\"\",\"\",\"twenty\",\"thirty\",\"forty\",\"fifty\",\"sixty\",\"seventy\",\"eighty\",\"ninety\"]\n    if s in units:\n        return units.index(s)\n    elif s in tens:\n        return 10+units.index(tens[tens.index(s)-2])\n    else:\n        return -1\n    \ndef unit_to_unit(s):\n    '''\n    Write a python function to convert unit to unit.\n    '''\n    if s == \"\":\n        return \"unit\"\n    if s in [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\"]:\n        return \"digit\"\n    if s in [\"ten\",\"eleven\",\"twelve\",\"thirteen\",\"fourteen\",\"fifteen\",\"sixteen\",\"seventeen\",\"eighteen\",\"nineteen\"]:\n        return \"digit\"\n    if s in [\"twenty\",\"thirty\",\"forty\",\"fifty\",\"sixty\",\"seventy\",\"eighty\",\"ninety\"]:\n        return \"number\"\n    return -1\n    \ndef reverse(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    if s == \"\":\n        return \"\"\n    return s[::-1]\n    \ndef palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    if len(s) <= 1:\n        return True\n    if s[0]!= s[-1]:\n        return False\n    return palindrome(s[1:-1])\n    \ndef prime_number(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n == 0 or n == 1:\n        return False\n    for x in range(2,n//2):\n        if n%x == 0:\n            return False\n    return True\n    \ndef is_prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n == 0 or n == 1:\n        return False\n    for x in range(2,n//2):\n        if n%x == 0:\n            return False\n    return True\n    \ndef factorial(n):\n    '''\n    Write a python function to find factorial of a number.\n    '''\n    if n == 0:\n        return 1\n    return n*factorial(n-1)\n    \ndef sum_of_digits(n):\n    '''\n    Write a python function to sum of digits of a number.\n    '''\n    if n == 0:\n        return 0\n    return (n%10) + sum_of_digits(n//10)\n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    if len(s) <= 1:\n        return True\n    if s[0]!= s[-1]:\n        return False\n    return is_palindrome(s[1:-1])\n    \ndef is_anagram(s1,s2):\n    '''\n    Write a python function to check whether two strings are anagram or not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    return sorted(s1) == sorted(s2)\n    \ndef count_vowels(s):\n    '''\n    Write a python function to count vowels in a string.\n    '''\n    count = 0\n    for x in s:\n        if x in ['a','e','i','o','u','A','E','I','O','U']:\n            count += 1\n    return count\n    \ndef vowel_count(s):\n    '''\n    Write a python function to count vowels in a string.\n    '''\n    count = 0\n    for x in s:\n        if x in ['a','e','i','o','u','A','E','I','O','U']:\n            count += 1\n    return count\n    \ndef factorial(n):\n    '''\n    Write a python function to find factorial of a number.\n    '''\n    if n == 0:\n        return 1\n    return n*factorial(n-1)\n    \ndef fibonacci(n):\n    '''\n    Write a python function to find nth fibonacci number.\n    '''\n    if n <= 1:\n        return 1\n    return fibonacci(n-1) + fibonacci(n-2)\n    \ndef prime_factor(n):\n    '''\n    Write a python function to find prime factor of a number.\n    '''\n    for x in range(2,n//2):\n        if n%x == 0:\n            return x\n    return n\n    \ndef is_prime_number(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n == 0 or n == 1:\n        return False\n    for x in range(2,n//2):\n        if n%x == 0:\n            return False\n    return True\n    \ndef is_super_prime(n):\n    '''\n    Write a python function to check whether a number is super prime or not.\n    '''\n    if is_prime_number(n) == False:\n        return False\n    for x in range(2,n//2):\n        if n%x == 0:\n            if is_prime_number(x) == True:\n                return False\n    return True\n    \ndef is_super_palindrome(s):\n    '''\n    Write a python function to check whether a string is super palindrome or not.\n    '''\n    if len(s) <= 1:\n        return True\n    if s[0]!= s[-1]:\n        return False\n    return is_super_palindrome(s[1:-1])\n    \ndef is_super_anagram(s1,s2):\n    '''\n    Write a python function to check whether two strings are super anagram or not.\n    '''\n    if len(s1)!= len(s"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    numbers = 0\n    for s in str:\n        if s.isdigit():\n            numbers += 1\n    return numbers\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for char in str:\n        if char.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #if n <= 10:\n    #    return True\n    if n % 2 == 0:\n        return False\n    n = n // 2\n    num_1, num_2 = 1, 2\n    for i in range(3, n + 1, 2):\n        num_1, num_2 = num_2, (num_1 + num_2)\n    return (num_1 % 10 == 0)\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==1: return 1\n    if n==2: return 2\n    if n==3: return 4\n    if n%2==0: return is_polite(n-1)+is_polite(n-2)\n    return is_polite(n-1)+3*is_polite(n-2)\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return sum(int(math.log(n, i)) for i in range(2, n+1))\n    \ndef next_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<3: \n        return n\n    p = (n+1)//2\n    if (n+1)%2==1: \n        return 2*p+1\n    else:\n        return 2*p\ndef count_polite(n): \n    '''\n    Write a function to count the number of polite numbers in a range. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<3: \n        return n\n    p = (n+1)//2\n    if (n+1)%2==1: \n        return 2*p\n    else:\n        return 2*p+1\ndef num_perms_of_size_k(k): \n    '''\n    Write a function to count the number of permutations of size k. geeksforgeeks.org/count-number-of-permutations-of-size-k/\n    '''\n    if k==0: \n        return 1\n    elif k==1: \n        return 1\n    elif k==2: \n        return 2\n    elif k==3: \n        return 4\n    else: \n        return num_perms_of_size_k(k-1) + num_perms_of_size_k(k-2) + num_perms_of_size_k(k-3)\ndef count_polite(n): \n    '''\n    Write a function to count the number of polite numbers in a range. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<3: \n        return n\n    p = (n+1)//2\n    if (n+1)%2==1: \n        return 2*p\n    else:\n        return 2*p+1\n    \ndef num_perms_of_size_k(k): \n    '''\n    Write a function to count the number of permutations of size k. geeksforgeeks.org/count-number-of-permutations-of-size-k/\n    '''\n    if k==0: \n        return 1\n    elif k==1: \n        return 1\n    elif k==2: \n        return 2\n    elif k==3: \n        return 4\n    else: \n        return num_perms_of_size_k(k-1) + num_perms_of_size_k(k-2) + num_perms_of_size_k(k-3)\ndef count_polite(n): \n    '''\n    Write a function to count the number of polite numbers in a range. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<3: \n        return n\n    p = (n+1)//2\n    if (n+1)%2==1: \n        return 2*p\n    else:\n        return 2*p+1\ndef num_perms_of_size_k(k): \n    '''\n    Write a function to count the number of permutations of size k. geeksforgeeks.org/count-number-of-permutations-of-size-k/\n    '''\n    if k==0: \n        return 1\n    elif k==1: \n        return 1\n    elif k==2: \n        return 2\n    elif k==3: \n        return 4\n    else: \n        return num_perms_of_size_k(k-1) + num_perms_of_size_k(k-2) + num_perms_of_size_k(k-3)\ndef num_perms_of_size_k(k): \n    '''\n    Write a function to count the number of permutations of size k. geeksforgeeks.org/count-number-of-permutations-of-size-k/\n    '''\n    if k==0: \n        return 1\n    elif k==1: \n        return 1\n    elif k==2: \n        return 2\n    elif k==3: \n        return 4\n    else: \n        return num_perms_of_size_k(k-1) + num_perms_of_size_k(k-2) + num_perms_of_size_k(k-3)\ndef count_polite(n): \n    '''\n    Write a function to count the number of polite numbers in a range. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<3: \n        return n\n    p = (n+1)//2\n    if (n+1)%2==1: \n        return 2*p\n    else:\n        return 2*p+1\ndef count_polite(n): \n    '''\n    Write a function to count the number of polite numbers in a range. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<3: \n        return n\n    p = (n+1)//2\n    if (n+1)%2==1: \n        return 2*p\n    else:\n        return 2*p+1\ndef num_perms_of_size_k(k): \n    '''\n    Write a function to count the number of permutations of size k. geeksforgeeks.org/count-number-of-permutations-of-size-k/\n    '''\n    if k==0: \n        return 1\n    elif k==1: \n        return 1\n    elif k==2: \n        return 2\n    elif k==3: \n        return 4\n    else: \n        return num_perms_of_size_k(k-1) + num_perms_of_size_k(k-2) + num_perms_of_size_k(k-3)\ndef count_polite(n): \n    '''\n    Write a function to count the number of polite numbers in a range. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<3: \n        return n\n    p = (n+1)//2\n    if (n+1)%2==1: \n        return 2*p\n    else:\n        return 2*p+1\ndef num_perms_of_size_k(k): \n    '''\n    Write a function to count the number of permutations of size k. geeksforgeeks.org/count-number-of-permutations-of-size-k/\n    '''\n    if k==0: \n        return 1\n    elif k==1: \n        return 1\n    elif k==2: \n        return 2\n    elif k==3: \n        return 4\n    else: \n        return num_perms_of_size_k(k-1) + num_perms_of_size_k(k-2) + num_perms_of_size_k(k-3)\ndef num_perms_of_size_k(k): \n    '''\n    Write a function to count the number of permutations of size k. geeksforgeeks.org/count-number-of-permutations-of-size-k/\n    '''\n    if k==0: \n        return 1\n    elif k==1: \n        return 1\n    elif k==2: \n        return 2\n    elif k==3: \n        return 4\n    else: \n        return num_perms_of_size_k(k-1) + num_perms_of_size_k(k-2) + num_perms_of_size_k(k-3)\ndef num_perms_of_size_k(k): \n    '''\n    Write a function to count the number of permutations of size k. geeksforgeeks.org/count-number-of-permutations-of-size-k/\n    ''"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #print \"n = \",n\n    if n == 0: \n        return 2\n    #print \"n-1 = \",n-1\n    else: \n        return (n-1) * (1 + n) / 2\n        \ndef mcm(a, b): \n    '''\n    gives the least common multiple of two numbers\n    '''\n    return a * b / math.gcd(a, b)\ndef get_min(a, b): \n    '''\n    get the minimum value of two numbers\n    '''\n    if a < b: \n        return a\n    else: \n        return b\n    \ndef get_mcm(array): \n    '''\n    get the least common multiple of an array of numbers\n    '''\n    if len(array) == 1: \n        return array[0]\n    else: \n        return mcm(array[0], get_mcm(array[1:]))\ndef prime_factors(n): \n    '''\n    Returns an array with prime factors of the given number\n    '''\n    if n <= 1: \n        return []\n    factors = []\n    for i in xrange(2, n):\n        if n % i == 0:\n            factors.append(i)\n    return factors\ndef is_prime(n): \n    '''\n    A number is prime if its prime factorization contains only prime numbers\n    '''\n    return len(prime_factors(n)) == 1\ndef is_perfect(n): \n    '''\n    Perfect number is a number that is equal to sum of all its factors\n    '''\n    return int(n) == sum(prime_factors(n))\ndef is_abundant(n): \n    '''\n    Abundant number is a number that is greater than the sum of its proper divisors\n    '''\n    return sum(prime_factors(n)) > n\ndef get_abundant_numbers(): \n    '''\n    Returns a list of abundant numbers below 28123\n    '''\n    abundant_numbers = []\n    for i in xrange(1, 28124): \n        if is_abundant(i): \n            abundant_numbers.append(i)\n    return abundant_numbers\ndef get_perfect_numbers(): \n    '''\n    Returns a list of perfect numbers below 28123\n    '''\n    perfect_numbers = []\n    for i in xrange(1, 28124): \n        if is_perfect(i): \n            perfect_numbers.append(i)\n    return perfect_numbers\ndef get_proper_divisors(n): \n    '''\n    Returns an array of proper divisors of the given number\n    '''\n    if n == 1: \n        return []\n    else: \n        return [1] + get_proper_divisors(n / 2)\n        \ndef get_proper_divisors_until_limit(n, limit): \n    '''\n    Returns an array of proper divisors of the given number\n    until the limit is reached\n    '''\n    if n == 1: \n        return []\n    elif n <= limit: \n        return [1] + get_proper_divisors_until_limit(n / 2, limit)\n    else: \n        return [n] + get_proper_divisors_until_limit(n / 2, limit)\n    \ndef get_abundant_numbers_below_limit(limit): \n    '''\n    Returns a list of abundant numbers below the given limit\n    '''\n    abundant_numbers = []\n    for i in xrange(1, limit): \n        if is_abundant(i): \n            abundant_numbers.append(i)\n    return abundant_numbers\ndef get_proper_divisors_until_limit(n, limit): \n    '''\n    Returns an array of proper divisors of the given number\n    until the limit is reached\n    '''\n    if n == 1: \n        return []\n    elif n <= limit: \n        return [1] + get_proper_divisors_until_limit(n / 2, limit)\n    else: \n        return [n] + get_proper_divisors_until_limit(n / 2, limit)\ndef get_proper_divisors_of_abundant_numbers(abundant_numbers): \n    '''\n    Returns an array of proper divisors of the given number\n    until the limit is reached\n    '''\n    proper_divisors = []\n    for n in abundant_numbers: \n        proper_divisors.append(n)\n        for i in xrange(1, int(math.sqrt(n)) + 1): \n            if n % i == 0 and n / i not in proper_divisors: \n                proper_divisors.append(n / i)\n    return proper_divisors\ndef get_proper_divisors_of_abundant_numbers_until_limit(abundant_numbers, limit): \n    '''\n    Returns an array of proper divisors of the given number\n    until the limit is reached\n    '''\n    proper_divisors = []\n    for n in abundant_numbers: \n        proper_divisors.append(n)\n        for i in xrange(1, int(math.sqrt(n)) + 1): \n            if n % i == 0 and n / i not in proper_divisors: \n                proper_divisors.append(n / i)\n    return proper_divisors[:-1]\ndef get_proper_divisors_of_perfect_numbers(perfect_numbers): \n    '''\n    Returns an array of proper divisors of the given number\n    until the limit is reached\n    '''\n    proper_divisors = []\n    for n in perfect_numbers: \n        proper_divisors.append(n)\n        for i in xrange(1, int(math.sqrt(n)) + 1): \n            if n % i == 0 and n / i not in proper_divisors: \n                proper_divisors.append(n / i)\n    return proper_divisors\ndef get_proper_divisors_of_perfect_numbers_until_limit(perfect_numbers, limit): \n    '''\n    Returns an array of proper divisors of the given number\n    until the limit is reached\n    '''\n    proper_divisors = []\n    for n in perfect_numbers: \n        proper_divisors.append(n)\n        for i in xrange(1, int(math.sqrt(n)) + 1): \n            if n % i == 0 and n / i not in proper_divisors: \n                proper_divisors.append(n / i)\n    return proper_divisors[:-1]\ndef get_perfect_and_abundant_numbers_below_limit(limit): \n    '''\n    Returns a list of perfect and abundant numbers below the given limit\n    '''\n    perfect_numbers = get_perfect_numbers()\n    abundant_numbers = get_abundant_numbers()\n    for i in xrange(len(perfect_numbers), limit): \n        perfect_numbers.append(i)\n    for i in xrange(len(abundant_numbers), limit): \n        abundant_numbers.append(i)\n    return abundant_numbers\ndef get_perfect_and_abundant_numbers_below_limit_until_limit(limit, limit2): \n    '''\n    Returns a list of perfect and abundant numbers below the given limit\n    until the limit is reached\n    '''\n    perfect_numbers = get_perfect_numbers()\n    abundant_numbers = get_abundant_numbers()\n    for i in xrange(len(perfect_numbers), limit): \n        perfect_numbers.append(i)\n    for i in xrange(len(abundant_numbers), limit): \n        abundant_numbers.append(i)\n    return abundant_numbers\ndef ge"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1 or n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    if n < 12: \n        return True\n    n = int(math.log10(n)) + 1\n    a = [1,3,7,15]\n    while n > 3: \n        for i in a: \n            if n % i == 0: \n                n = n/i\n                break\n    return n == 1\ndef find_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    num = 2\n    while count!= n: \n        num += 1\n        if is_polite(num): \n            count += 1\n    return num\ndef is_polite2(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1 or n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    if n < 12: \n        return True\n    n = int(math.log10(n)) + 1\n    a = [1,3,7,15]\n    while n > 3: \n        for i in a: \n            if n % i == 0: \n                n = n/i\n                break\n    return n == 1\ndef find_polite2(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    num = 2\n    while count!= n: \n        num += 1\n        if is_polite2(num): \n            count += 1\n    return num\ndef find_polite3(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    prime = [2,3,5,7,11,13,17,19,23,29]\n    count = 1\n    num = 2\n    while count!= n: \n        num += 1\n        for i in prime: \n            if num % i == 0: \n                num = num/i\n                break\n    return num\ndef find_polite4(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    num = 2\n    while count!= n: \n        num += 1\n        if is_polite3(num): \n            count += 1\n    return num\ndef is_polite3(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1 or n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    if n < 12: \n        return True\n    n = int(math.log10(n)) + 1\n    a = [1,3,7,15]\n    while n > 3: \n        for i in a: \n            if n % i == 0: \n                n = n/i\n                break\n    return n == 1\ndef find_polite5(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    num = 2\n    while count!= n: \n        num += 1\n        if is_polite3(num): \n            count += 1\n    return num\ndef find_polite6(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    prime = [2,3,5,7,11,13,17,19,23,29]\n    count = 1\n    num = 2\n    while count!= n: \n        num += 1\n        for i in prime: \n            if num % i == 0: \n                num = num/i\n                break\n    return num\ndef find_polite7(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    num = 2\n    while count!= n: \n        num += 1\n        if is_polite4(num): \n            count += 1\n    return num\ndef find_polite8(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    num = 2\n    while count!= n: \n        num += 1\n        if is_polite5(num): \n            count += 1\n    return num\ndef find_polite9(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    num = 2\n    while count!= n: \n        num += 1\n        if is_polite6(num): \n            count += 1\n    return num\ndef find_polite10(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    num = 2\n    while count!= n: \n        num += 1\n        if is_polite7(num): \n            count += 1\n    return num\ndef find_polite11(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    num = 2\n    while count!= n: \n        num += 1\n        if is_polite8(num): \n            count += 1\n    return num\ndef find_polite12(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    num = 2\n    while count!= n: \n        num += 1\n        if is_polite9(num): \n            count += 1\n    return num\ndef find_polite13(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    num = 2\n    while count!= n: \n        num += 1\n        if is_polite10(num): \n            count += 1\n    return num\ndef find_polite14(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    num = 2\n    while count!= n: \n        num += 1\n        if is_polite11(num): \n            count += 1\n    return num\ndef find_polite15(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    num = 2\n    while count!= n: \n        num += 1\n        if is_polite12(num): \n            count += 1\n    return num\ndef find_polite16(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    num = 2\n    while count!= n: \n        num += 1\n        if is_polite13(num): \n            count += 1\n    return num\ndef find_polite17(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    a = 4\n    for i in range(1,n+1):\n        c = i\n        while c > 0:\n            b = (a**c)%n\n            if b == 1:\n                a = a+1\n                break\n            elif b == n-1:\n                a = a-1\n                break\n            c = c - 1\n        if c == 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return 3 * n + 1\ndef nth_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return 3 * n + 1\ndef nth_polite_factorial(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 1\n    else:\n        return n * nth_polite_factorial(n - 1)\ndef nth_polite_constant(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n * n\ndef nth_polite_series(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return 3 * n + 1\ndef nth_polite_series_constant(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n * n\ndef nth_polite_series_constant_factorial(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 1\n    else:\n        return n * nth_polite_series_constant_factorial(n - 1)\ndef nth_polite_series_constant_factorial_constant(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n * n\ndef nth_polite_series_constant_factorial_constant_power(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 1\n    else:\n        return n * nth_polite_series_constant_factorial_constant_power(n - 1)\ndef nth_polite_series_constant_factorial_constant_power_constant(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n * n\ndef nth_polite_series_constant_factorial_constant_power_constant_power(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 1\n    else:\n        return n * nth_polite_series_constant_factorial_constant_power_constant_power(n - 1)\ndef nth_polite_series_constant_factorial_constant_power_constant_power_constant(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n * n\ndef nth_polite_series_constant_factorial_constant_power_constant_power_constant_power(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 1\n    else:\n        return n * nth_polite_series_constant_factorial_constant_power_constant_power_constant_power(n - 1)\ndef nth_polite_series_constant_factorial_constant_power_constant_power_constant_power_constant(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n * n\ndef nth_polite_series_constant_factorial_constant_power_constant_power_constant_power_constant_power(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 1\n    else:\n        return n * nth_polite_series_constant_factorial_constant_power_constant_power_constant_power_constant_power(n - 1)\ndef nth_polite_series_constant_factorial_constant_power_constant_power_constant_power_constant_power_constant(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n * n\ndef nth_polite_series_constant_factorial_constant_power_constant_power_constant_power_constant_power_constant_power_constant(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 1\n    else:\n        return n * nth_polite_series_constant_factorial_constant_power_constant_power_constant_power_constant_power_constant_power_constant(n - 1)\ndef nth_polite_series_constant_factorial_constant_power_constant_power_constant_power_constant_power_constant_power_constant_power_constant_power(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 1\n    else:\n        return n * nth_polite_series_constant_factorial_constant_power_constant_power_constant_power_constant_power_constant_power_constant_power_constant_power_constant(n - 1)\ndef nth_polite_series_constant_factorial_constant_power_constant_power_constant_power_constant_power_constant_power_constant_power_constant_power_constant_power_constant_power_constant_power_constant(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 1\n    else:\n        return n * nth_polite_series_constant_factorial_constant_power_constant_power_constant_power_constant_power_constant_power_constant_power_constant_power_constant_power_constant_power_constant_power_constant_power(n - 1)\ndef nth_polite_series_constant_factorial_constant_power_constant_power_constant_power_constant_power_constant_power_constant_power_constant_power_constant_power_constant_power_constant_power_constant_power_constant_power_constant(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 1\n    else:\n        return n "
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def foo(num):\n        i = 0\n        n = 0\n        while(n<num):\n            n = n+1\n            i = i+1\n            if(i==num):\n                print(n)\n    foo(n)\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if i**i%i == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = 0\n    b = 1\n    while b < n:\n        s += 1\n        b = b + s\n    if b == n:\n        return True\n    return False\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return list(zip(l1[:-1], l1[1:]))\n    # l1[1:] = [2, 3, 4, 5, 6, 7]\n    # l1[:-1] = [1, 2, 3, 4, 5, 6]\n    # zip() takes 3 argments, the element of list and the element of list\n    # print(list(zip(l1[:-1], l1[1:])))\n    # [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2=[]\n    if len(l1)<2:\n        return l2\n    else:\n        for i in range(len(l1)-1):\n            l2.append(l1[i],l1[i+1])\n        return l2\ndef replace_last(l1):\n    '''\n    Write a function to replace the last element of a list with another list. The function takes 2 parameters: the list you want to replace the last element with and a list you want to use for the replacement.\n    '''\n    if len(l1)<=1:\n        return l1\n    else:\n        l1[-1]=l1[-2]\n        return l1\ndef add_string(str1,str2):\n    '''\n    Write a function to add 2 strings together.\n    '''\n    return str1+str2\ndef prime_checker(number):\n    '''\n    Write a function that takes a number as a parameter and checks to see if the number is prime. For numbers less than 2, we define primes as numbers greater than 1 that have no divisors other than 1 and themselves.\n    '''\n    if number>1:\n        for i in range(2,number):\n            if number%i==0:\n                return False\n    else:\n        return False\n    return True\ndef word_count(str):\n    '''\n    Write a function that takes a string and prints the number of characters and word frequency in the string. The string will be in the format 'this is some test string'. For this example, the output would be 'characters 3 words 2'\n    '''\n    count_char=0\n    count_words=1\n    for i in range(len(str)):\n        if str[i]==' ':\n            count_char+=1\n            count_words+=1\n        elif i==len(str)-1:\n            count_char+=1\n            count_words+=1\n        else:\n            count_char+=1\n    return 'characters '+str(count_char)+' words '+str(count_words)\ndef recursive_list_sum(list):\n    '''\n    Write a function that returns the sum of a list, where each element is multiplied by the next element. Return a list of all products that would result.\n    '''\n    if len(list)<2:\n        return list\n    else:\n        return [list[0]*list[1]]+recursive_list_sum(list[1:])\ndef recursive_factorial(num):\n    '''\n    Write a function that takes a number and returns the factorial of that number. The factorial of a number is the product of all the integers from 1 to the number (like 1*2*3*4*5*...*num).\n    '''\n    if num==0 or num==1:\n        return 1\n    else:\n        return num*recursive_factorial(num-1)\ndef recursive_reverse(str):\n    '''\n    Write a function that takes a string and returns the reverse of the string. This can be done iteratively or recursively.\n    '''\n    if len(str)==0:\n        return str\n    else:\n        return recursive_reverse(str[1:])+str[0]\ndef recursive_fibonacci(n):\n    '''\n    Write a function that takes a number and returns the nth number in the Fibonacci sequence.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return recursive_fibonacci(n-1)+recursive_fibonacci(n-2)\ndef recursive_count_letters(str):\n    '''\n    Write a function that takes a string and returns a dictionary where the keys are the letters of the alphabet and the values are the number of times that letter appears in the string.\n    '''\n    if len(str)<2:\n        return str\n    else:\n        return recursive_count_letters(str[1:])+str[0]\ndef recursive_binary_search(list, element):\n    '''\n    Write a function that takes a sorted list and an element and returns the index of the element in the list.\n    '''\n    if len(list)==1:\n        if list[0]==element:\n            return 0\n        else:\n            return -1\n    else:\n        if list[len(list)/2]==element:\n            return len(list)/2\n        elif element>list[len(list)/2]:\n            return recursive_binary_search(list[len(list)/2:],element)+len(list)/2\n        else:\n            return recursive_binary_search(list[:len(list)/2],element)+0\ndef pyramid(base_list):\n    '''\n    Write a function that takes a list of lists and returns a new list of lists.\n    '''\n    if len(base_list)==0:\n        return []\n    else:\n        return pyramid(base_list[1:])+[base_list[0]]\ndef duplicates(list):\n    '''\n    Write a function that takes a list and returns a list of all the duplicates in the original list. For example: duplicates([1, 2, 2, 3, 4]) should return [2, 2].\n    '''\n    duplicates_list=[]\n    for i in range(len(list)):\n        count=0\n        for j in range(i+1,len(list)):\n            if list[i]==list[j]:\n                count+=1\n        if count>1:\n            duplicates_list.append(list[i])\n    return duplicates_list\ndef has_duplicates(list):\n    '''\n    Write a function that takes a list and returns True if there is any element that appears more than once in the list. It should not modify the original list.\n    '''\n    duplicates_list=[]\n    for i in range(len(list)):\n        count=0\n        for j in range(i+1,len(list)):\n            if list[i]==list[j]:\n                count+=1\n        if count>1:\n            duplicates_list.append(list[i])\n    if len(duplicates_list)==0:\n        return False\n    else:\n        return True\ndef count_first_last(list, item):\n    '''\n    Write a function that takes a list and returns the number of the first and last elements in the list. If the item does not appear in the list, return -1.\n    '''\n    if list[0]==item:\n        return 1\n    elif list[-1]==item:\n        return 1\n    else:\n        return -1\ndef rotate_list(list):\n    '''\n    Write a function that takes a list and returns the list with the elements rotated to the left by 1. For example:\n    '''\n    if len(list)<=1:\n        return list\n    else:\n        return [list[-1]]+rotate_list(list[:-1])\ndef reverse_list(list):\n    '''\n    Write a function that takes a list and returns the list with the elements reversed.\n    '''\n    if len(list)<=1:\n        return list\n    else:\n        return [list[-1]]+reverse_list(list[:-1])\ndef is_sorted(list):\n    '''\n    Write a function that takes a list and returns True if the list is sorted in ascending order. It should not modify the original list.\n    '''\n    if len(list)==0:\n        return True\n    elif len(list)==1:\n        return True\n    else:\n        if list[0]<list[1]:\n            return is_sorted(list[1:])\n        else:\n            return False\ndef swap(list, index1, index2):\n    '''\n    Write a function that takes a list and two indices and swaps the values at those indices.\n    '''\n    list[index1],list[index2]=list[index2],list[index1]\n    return list\ndef get_max_value(list):\n    '''\n    Write a function that takes a list and returns the maximum value in the list.\n    '''\n    if len(list)==1:\n        return list[0]\n    else:\n        return max(list[0],get_max_value(list[1:]))\ndef get_ma"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    i = 0\n    l2 = []\n    while i < len(l1):\n        l2.append(l1[i])\n        l2.append(l1[i+1])\n        i += 2\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    import itertools\n    l = list(l1)\n    return list(itertools.combinations(l,2))\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    out_list = []\n    for i in range(len(l1)-1):\n        out_list.append((l1[i],l1[i+1]))\n    return out_list\n    \ndef pairs(l1,l2):\n    '''\n    Write a function to return a list of all pairs of consecutive items in two given lists.\n    '''\n    out_list = []\n    for i in l1:\n        for j in l2:\n            if i == j:\n                out_list.append((i,j))\n    return out_list\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return zip(l1[::2],l1[1::2])\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return\n    temp = l1[0:2]\n    for i in range(2, len(l1)):\n        if l1[i - 1] + 1 == l1[i]:\n            temp.append(l1[i])\n        else:\n            yield temp\n            temp = [l1[i]]\n    if temp:\n        yield temp\n    \ndef list_to_bit_string(l1):\n    '''\n    Write a function that accepts a list and returns a string made up of the individual bits from each item in the list.\n    '''\n    temp = ''\n    for i in l1:\n        temp = temp + str(format(i, 'b'))\n    return temp\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    i = 0\n    if len(l1) < 2:\n        return result\n    while i < len(l1)-1:\n        result.append([l1[i],l1[i+1]])\n        i += 1\n    return result\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    import itertools\n    return list(itertools.combinations(l1, 2))\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i],l1[i+1]) for i in range(len(l1)-1)]\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49]\n    # sum = 54\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    from collections import defaultdict\n    c = defaultdict(int)\n    for i in arr:\n        c[sum - i] += 1\n    return c[sum]\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] + arr[j]) == sum:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if sum == 0:\n        return 1\n    count = 0\n    for i in xrange(len(arr)):\n        for j in xrange(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    d = {}\n    for i in arr:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    \n    pairs = 0\n    for i in arr:\n        temp = sum - i\n        if temp in d:\n            pairs += d[temp]\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    table = {num: 0 for num in arr}\n    # print(table)\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    n = len(arr)\n    dp = [[0 for i in range(sum+1)] for j in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, sum+1):\n            if arr[i-1] <= j:\n                dp[i][j] = dp[i-1][j-arr[i-1]] + dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][sum]\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = [li1[i] for i in xrange(len(li1)) if li1[i] not in li2]\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = [li1[i] for i in range(len(li1)) if li1[i] not in li2]\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(list(set(li1)-set(li2)) + list(set(li2)-set(li1)))\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum([i**4 for i in range(1, n+1, 2)])\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Time : O(n)\n    # Space : O(1)\n    return sum(x**4 for x in range(1, n, 2))\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    ans = 0\n    for i in range(n) :\n        ans += (i+1)*(i+2)*(i+3)*(i+4)\n    return ans\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return n*n*n*n\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 0: \n        return 0\n    else: \n        return (n*(n+1)*(2*n+1)*(3*n+1))/6\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_n = 0\n    for i in range(1, n + 1):\n        if i % 2!= 0:\n            sum_of_n = sum_of_n + i ** 4\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n<1:\n        print \"invalid input\"\n        return \n    else:\n        result=0\n        for i in range(1,n+1,2):\n            result=result+i**4\n        print \"The sum of the fourth power of the odd number is\",result\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    \n    num_list = [x for x in range(1, n+1) if x%2!= 0]\n    num_sum = 0\n    for num in num_list:\n        num_sum += num**4\n    return num_sum\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0 \n    if n > 1 : \n        for i in range(2, n+1, 2) : \n            sum += i ** 4 \n    return sum \n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total_sum = 0\n    for num in range(1, n+1, 2) :\n        total_sum += num**4\n    return total_sum\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return True if not stack else False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0 or stack.pop()!= '(':\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    s = []\n    exp = exp.split(' ')\n    for i in exp:\n        if i == '(':\n            s.append(i)\n        elif i == ')':\n            if len(s) == 0:\n                return False\n            s.pop()\n    return len(s) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            if char == ')':\n                if stack[-1]!= '(':\n                    return False\n                else:\n                    stack.pop()\n            elif char == '}':\n                if stack[-1]!= '{':\n                    return False\n                else:\n                    stack.pop()\n            elif char == ']':\n                if stack[-1]!= '[':\n                    return False\n                else:\n                    stack.pop()\n    if not stack:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    d = deque()\n    for i in exp:\n        if i == '(':\n            d.append(i)\n        elif i == ')':\n            if len(d) == 0:\n                return False\n            d.pop()\n    return len(d) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stk = []\n    for ch in exp:\n        if ch in '({[':\n            stk.append(ch)\n        elif ch in ')}]':\n            if not stk or stk.pop()+ch!='{}':\n                return 0\n    return 1 if not stk else 0\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for element in exp:\n        if element == '(':\n            stack.append(element)\n        elif element == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack)!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    if stack:\n        return False\n    return True\ndef check_parenthesis(exp):\n    '''\n    https://www.hackerrank.com/challenges/30-2d-arrays\n    Given an integer N and a binary array B of length N. Each element of the array is either 0 or 1. Count the number of subarrays having all 1s.\n    https://www.hackerrank.com/challenges/2d-array\n    '''\n    count = 0\n    for i in xrange(len(exp)):\n        if exp[i] == '1':\n            j = i\n            while j < len(exp):\n                if exp[j]!= '1':\n                    break\n                j += 1\n            count += (j-i)\n    print count\n    \ndef largest_rectangle_in_histogram(h):\n    '''\n    https://www.hackerrank.com/challenges/largest-rectangle\n    https://www.hackerrank.com/challenges/largest-rectangle/editorial\n    Given a non-negative integer N, find the number of ways to make a change for N cents.\n    https://www.hackerrank.com/challenges/ctci-making-change\n    '''\n    dp = [1] + [0] * len(h)\n    for i in xrange(len(h)):\n        for j in xrange(i):\n            if h[i] > h[j]:\n                dp[i] += dp[j]\n    print dp[-1]\n    \ndef count_number_of_subarrays(arr, target):\n    '''\n    https://www.hackerrank.com/challenges/ctci-making-change\n    Given an array of positive numbers and a positive number S, find the number of (contiguous) subarrays whose sum is less than or equal to S.\n    '''\n    s = 0\n    i, j = 0, 0\n    count = 0\n    while i < len(arr):\n        while j < len(arr):\n            if s == target:\n                count += 1\n            if s > target:\n                break\n            s += arr[j]\n            j += 1\n        i, j = j, i+1\n        s = 0\n    print count\n    \ndef check_subarray_sum(arr, target):\n    '''\n    https://www.hackerrank.com/challenges/ctci-making-change\n    Given an array of positive numbers and a positive number S, find the number of (contiguous) subarrays whose sum is less than or equal to S.\n    '''\n    count = 0\n    i = 0\n    while i < len(arr):\n        s = 0\n        j = i\n        while j < len(arr):\n            s += arr[j]\n            if s > target:\n                break\n            j += 1\n        if s <= target:\n            count += 1\n        i += 1\n    print count\n    \ndef check_strings_are_anagram(s1, s2):\n    '''\n    https://www.hackerrank.com/challenges/ctci-making-change\n    Given two strings, S1 and S2, find the minimum number of characters you have to delete to make S1 and S2 anagrams.\n    '''\n    from collections import Counter\n    counter1 = Counter(s1)\n    counter2 = Counter(s2)\n    diff = 0\n    for key in counter1:\n        if key in counter2:\n            if counter1[key]!= counter2[key]:\n                diff += abs(counter1[key] - counter2[key])\n        else:\n            diff += counter1[key]\n    for key in counter2:\n        if key not in counter1:\n            diff += counter2[key]\n    print diff\n    \ndef check_anagram(s1, s2):\n    '''\n    https://www.hackerrank.com/challenges/ctci-making-change\n    Given two strings, S1 and S2, find the minimum number of characters you have to delete to make S1 and S2 anagrams.\n    '''\n    from collections import Counter\n    counter1 = Counter(s1)\n    counter2 = Counter(s2)\n    diff = 0\n    for key in counter1:\n        if key in counter2:\n            if counter1[key]!= counter2[key]:\n                diff += abs(counter1[key] - counter2[key])\n        else:\n            diff += counter1[key]\n    for key in counter2:\n        if key not in counter1:\n            diff += counter2[key]\n    print diff\n    \ndef super_reduced_string(s):\n    '''\n    https://www.hackerrank.com/challenges/ctci-making-change\n    Given a string, find the superstring made using the smallest set of characters from this string.\n    '''\n    i, j, count = 0, 0, 0\n    super_string = ''\n    while i < len(s):\n        while j < len(s):\n            if j!= i:\n                super_string += s[j]\n            j += 1\n        if count > 1:\n            super_string = super_string[:-1]\n            count -= 1\n        super_string += s[i]\n        i += 1\n        j = i\n        count += 1\n    print super_string\n    \ndef binary_search(arr, target, start, end):\n    '''\n    https://www.hackerrank.com/challenges/ctci-making-change\n    Given an array of positive numbers and a positive number S, find the number of pairs in the array whose sum is divisible by S.\n    '''\n    count = 0\n    while start <= end:\n        mid = (start + end)//2\n        if sum([i%mid for i in arr]) == target:\n            return mid\n        elif sum([i%mid for i in arr]) > target:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n    \ndef minimum_platforms(arr, dep, n):\n    '''\n    https://www.hackerrank.com/challenges/ctci-making-change\n    Given a list of projects and a list of dependencies (which is a list of pairs of projects, where the second project is dependent on the first project). All of a project's dependencies must be built before the project is. Find a build order that will allow the projects to be built. If there is no valid build order, return an error.\n    '''\n    from collections import deque\n    q = deque()\n    graph = {}\n    for i in xrange(len(arr)):\n        graph[arr[i]] = []\n    for pair in dep:\n        graph[pair[0]].append(pair[1])\n    for key in graph:\n        if len(graph[key]) == 0:\n            q.append(key)\n    build = []\n    while q:\n        node = q.popleft()\n        build.append(node)\n        for i in graph[node]:\n            graph[i].remove(node)\n            if len(graph[i]) == 0:\n                q.append(i)\n    if len(build) < n:\n        return -1\n    return build\n    \ndef can_see_stage(arr, stage):\n    '''\n    https://www.hackerrank.com/challenges/ctci-making-change\n    Given an array of people standing in a queue. Each person has different strength, and you are giving them strength in such a way that whenever two people standing next to each other, their strength becomes equal.\n    Your task is to restore the queue to a state where the first person is the one with the highest strength and the last person is the one with the second highest strength.\n    https://www.hackerrank.com/challenges/ctci-making-change\n    '''\n    i, j = 0, 1\n    while j < len(arr):\n        if arr[j] < arr[i]:\n            i = j\n        j += 1\n    arr[i], arr[len(arr)-1] = arr[len(arr)-1]"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if exp[0]!= '(':\n        return False\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack)!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if not test_str:\n        return \"\"\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    if not test_str:\n        return 0\n    words = test_str.split(' ')\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return \" \".join([word for word in test_str.split() if len(word) == K])\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    result = []\n    for word in test_str.split():\n        if len(word) == K:\n            result.append(word)\n    return''.join(result)\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    return''.join([test_str.split(' ')[i] for i in range(len(test_str.split(' '))-K+1)])\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return''.join([word for word in test_str.split() if len(word)!= K])\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split(' ')\n    return''.join([i for i in words if len(i)!= K])\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return''.join([word for word in test_str.split(' ') if len(word)!= K])\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return''.join(filter(lambda x: len(x)!= K, test_str.split(' ')))\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.search(pattern,text)\n    if result:\n        return result.span()\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    return re.findall(pattern,text)\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    print re.findall('a',text)\n    print re.findall('a',text,re.IGNORECASE)\n    print re.findall('a',text,re.I)\n    print re.findall('a',text,re.I|re.M)\n    print re.findall('a',text,re.M)\n    print re.findall('a',text,re.M|re.I)\n    print re.findall(pattern,'this is a test string for testing')\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    n = len(text)\n    m = len(pattern)\n    if m > n:\n        return None\n    for i in range(n-m+1):\n        if text[i:i+m] == pattern:\n            return i\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if pattern in text:\n        pos=[]\n        text_list=text.split(pattern)\n        for i in text_list:\n            if i!='':\n                pos.append(text_list.index(i))\n        return pos\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    text_length = len(text)\n    pattern_length = len(pattern)\n    if pattern_length > text_length:\n        return None\n    text_word_list = text.split()\n    pattern_word_list = pattern.split()\n    match_count = 0\n    for word in text_word_list:\n        if word in pattern_word_list:\n            match_count += 1\n            text_word_list.remove(word)\n    if match_count > 0:\n        return match_count,text_word_list\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    regex = re.compile(pattern)\n    match = regex.search(text)\n    if match:\n        print match.start()\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.search(pattern,text)\n    if result:\n        start = result.start()\n        end = result.end()\n        print(start)\n        print(end)\n        print(text[start:end])\n    else:\n        print(None)\n    return None\noccurance_substring(\"this is a test\",\"is\")\noccurance_substring(\"this is a test\",\"test\")\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    positions=[]\n    for i in range(len(text)):\n        if text[i:i+len(pattern)]==pattern:\n            positions.append(i)\n    return positions\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    index=0\n    n=len(text)\n    m=len(pattern)\n    while index<n-m+1:\n        if text[index:index+m]==pattern:\n            return index,index+m\n        index+=1\n    return None\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (i + 1) % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i]%2:\n            return True\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    def odd_position(nums):\n        odd_list = []\n        for i in range(1, len(nums), 2):\n            if nums[i] % 2!= 0:\n                odd_list.append(nums[i])\n        return odd_list\n    \n    print(odd_position([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(odd_position([1, 3, 5]))\n    \n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    def odd_position(nums):\n        odd_list = []\n        for i in range(1, len(nums), 2):\n            if nums[i] % 2!= 0:\n                odd_list.append(i)\n        return odd_list\n    \n    print(odd_position([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(odd_position([1, 3, 5]))\n    \n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    def odd_position(nums):\n        odd_list = []\n        for i in range(1, len(nums), 2):\n            if nums[i] % 2!= 0:\n                odd_list.append(nums[i])\n        return odd_list\n    \n    print(odd_position([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(odd_position([1, 3, 5]))\n    \n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    def odd_position(nums):\n        odd_list = []\n        for i in range(1, len(nums), 2):\n            if nums[i] % 2!= 0:\n                odd_list.append(i)\n        return odd_list\n    \n    print(odd_position([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(odd_position([1, 3, 5]))\n    \n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    def odd_position(nums):\n        odd_list = []\n        for i in range(1, len(nums), 2):\n            if nums[i] % 2!= 0:\n                odd_list.append(i)\n        return odd_list\n    \n    print(odd_position([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(odd_position([1, 3, 5]))\n    \n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    def odd_position(nums):\n        odd_list = []\n        for i in range(1, len(nums), 2):\n            if nums[i] % 2!= 0:\n                odd_list.append(i)\n        return odd_list\n    \n    print(odd_position([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(odd_position([1, 3, 5]))\n    \n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    def odd_position(nums):\n        odd_list = []\n        for i in range(1, len(nums), 2):\n            if nums[i] % 2!= 0:\n                odd_list.append(i)\n        return odd_list\n    \n    print(odd_position([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(odd_position([1, 3, 5]))\n    \n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    def odd_position(nums):\n        odd_list = []\n        for i in range(1, len(nums), 2):\n            if nums[i] % 2!= 0:\n                odd_list.append(i)\n        return odd_list\n    \n    print(odd_position([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(odd_position([1, 3, 5]))\n    \n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    def odd_position(nums):\n        odd_list = []\n        for i in range(1, len(nums), 2):\n            if nums[i] % 2!= 0:\n                odd_list.append(i)\n        return odd_list\n    \n    print(odd_position([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(odd_position([1, 3, 5]))\n    \n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    def odd_position(nums):\n        odd_list = []\n        for i in range(1, len(nums), 2):\n            if nums[i] % 2!= 0:\n                odd_list.append(i)\n        return odd_list\n    \n    print(odd_position([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(odd_position([1, 3, 5]))\n    \n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    def odd_position(nums):\n        odd_list = []\n        for i in range(1, len(nums), 2):\n            if nums[i] % 2!= 0:\n                odd_list.append(i)\n        return odd_list\n    \n    print(odd_position([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(odd_position([1, 3, 5]))\n    \n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    def odd_position(nums):\n        odd_list = []\n        for i in range(1, len(nums), 2):\n            if nums[i] % 2!= 0:\n                odd_list.append(i)\n        return odd_list\n    \n    print(odd_position([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(odd_position([1, 3, 5]))\n    \n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    def odd_position(nums):\n        odd_list = []\n        for i in range(1, len(nums), 2):\n            if nums[i] % 2!= 0:\n                odd_list.append(i)\n        return odd_list\n    \n    print(odd_position([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(odd_position([1, 3, 5]))\n    \n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    def odd_position(nums):\n        odd_list = []\n        for i in range(1, len(nums), 2):\n            if nums[i] % 2!= 0:\n                odd_list.append(i)\n        return odd_list\n    \n    print(odd_position([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(odd_position([1, 3, 5]))\n    \n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    def odd_position(nums):\n        odd_list = []\n        for i in range(1, len(nums), 2):\n            if nums[i] % 2!= 0:\n                odd_list.append(i"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i]%2!=0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    nums = list(nums)\n    odd = [nums[i] for i in range(1, len(nums), 2)]\n    odd.append(nums[0])\n    return all(odd[i] % 2!= odd[i-1] % 2 for i in range(len(odd)))\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for index, num in enumerate(nums):\n        if index % 2 == 1 and num % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i]%2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (i + 1) % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n        else:\n            if nums[i] % 2 == 0:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all([num % 2 == 1 for num in nums[1::2]])\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(num % 2 == 1 for num in nums)\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    d={}\n    for i in range(len(test_str)-1):\n        if test_str[i] in ['a','e','i','o','u']:\n            d[test_str[i]]=d.get(test_str[i],0)+1\n    return d\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    test_str = test_str.lower()\n    vowel_count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in 'aeiou':\n            if i == 0:\n                vowel_count += 1\n            elif test_str[i-1] not in 'aeiou':\n                vowel_count += 1\n    print vowel_count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in VOWELS and test_str[i+1] in VOWELS:\n            vowels += 1\n    return vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    result = 0\n    for i in range(1, len(test_str)):\n        if test_str[i-1] in 'aeiou':\n            if test_str[i+1] in 'aeiou':\n                result += 1\n    return result\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        for j in range(i+1, len(test_str)+1):\n            test = test_str[i:j]\n            if test[0] in vowels:\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    str_len = len(test_str)\n    result = 0\n    for i in range(str_len):\n        if test_str[i] in vowels:\n            if i == 0 or test_str[i-1] not in vowels:\n                result += 1\n        if test_str[str_len - i - 1] in vowels:\n            if i == 0 or test_str[str_len - i - 2] not in vowels:\n                result += 1\n    return result\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_count = 0\n    for i in xrange(len(test_str)-1):\n        if test_str[i] in 'aeiou':\n            if test_str[i+1] in 'aeiou':\n                vowel_count += 1\n    return vowel_count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for index, letter in enumerate(test_str):\n        if index+1 == len(test_str):\n            break\n        if letter in 'aeiou':\n            if test_str[index+1] in 'aeiou':\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a','e','i','o','u']\n    vowels_count = 0\n    for i in xrange(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            vowels_count += 1\n    return vowels_count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_dict = {}\n    for i in xrange(len(test_str)-1):\n        if test_str[i] in \"aeiou\":\n            if test_str[i] not in vowel_dict:\n                vowel_dict[test_str[i]] = 1\n            else:\n                vowel_dict[test_str[i]] += 1\n    return vowel_dict\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    # Initialize the sum as 0\n    # Now loop through the array and sum the non-repeated elements\n    sum = 0\n    \n    for i in range(0,len(arr)):\n        if arr.count(arr[i]) == 1:\n            sum = sum + arr[i]\n    \n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr = list(arr)\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[0] + find_sum(arr[1:])\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    for each in arr: \n        if arr.count(each) == 1: \n            return each\n    return sum(arr)\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    result = 0\n    for elem in arr:\n        if arr.count(elem) == 1:\n            result += elem\n    return result\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if arr == []: \n        return 0\n    else:\n        return arr[0] + find_sum(arr[1:])\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    list_sum = 0\n    for i in arr:\n        list_sum += i\n    return list_sum\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    total = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            total += i\n    return total\n    \ndef find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    total = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            total += i\n    return total\n    "
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr.sort()\n    total = 0\n    for i in arr:\n        if i not in arr[:arr.index(i)+1]:\n            total += i\n    return total\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # return [list(g) for k, g in groupby(list1)]\n    return list(map(list, groupby(list1)))\n    # return [list(g) for k, g in groupby(list1)]\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = []\n    for k, g in groupby(list1):\n        groups.append(list(g))\n    print(groups)\n    return groups\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    d = {1:[], 2:[]}\n    for i in list1:\n        d[i[1]].append(i[0])\n    return d\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    new_list = []\n    for k,g in groupby(list1):\n        new_list.append(list(g))\n    return new_list\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if len(list1) == 0:\n        return []\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1 = sorted(list1)\n    final_list = []\n    \n    for k, g in groupby(list1):\n        final_list.append([item for item in g])\n    return final_list\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    #base case: list length is one, return list\n    if len(list1) == 1:\n        return [list1]\n    #base case: list length is two, return list\n    if len(list1) == 2:\n        return [list1] if list1[0]!= list1[1] else [[list1[0],list1[1]]]\n    #initialize values\n    final_list = []\n    temp_list = []\n    last_value = list1[0]\n    for element in list1:\n        if element!= last_value:\n            #if last value is different from current value, append sublist to final list\n            if len(temp_list) > 0:\n                final_list.append(temp_list)\n                #reset temp list\n                temp_list = []\n            last_value = element\n        temp_list.append(element)\n    #append last sublist to final list\n    if len(temp_list) > 0:\n        final_list.append(temp_list)\n    #return final list\n    return final_list\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = [[list1[0]]]\n    for k, g in groupby(enumerate(list1), lambda ix: ix[0] - ix[1]):\n        result.append(list(map(itemgetter(1), g)))\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for k, g in groupby(enumerate(list1), lambda (i,x): i-x):\n        l1 = map(itemgetter(1), g)\n        print l1\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = [(k, len(list(v))) for k, v in groupby(list1)]\n    return sum( ( [list1[i] for i in range(0,j) ] for (j,k) in groups), [])\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    result = {}\n    for i in list1:\n        if type(i) == list:\n            result[tuple(i)] = result.get(tuple(i), 0) + 1\n    return result\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    #define the function here\n    def count_list(a_list):\n        a_dict = {}\n        for i in a_list:\n            if i in a_dict:\n                a_dict[i] += 1\n            else:\n                a_dict[i] = 1\n        return a_dict\n    #call the function here\n    return count_list(list1)\n    \n    \n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict1 = {}\n    for i in list1:\n        t = tuple(i)\n        if t not in dict1:\n            dict1[t] = [1]\n        else:\n            dict1[t][0] += 1\n    return dict1\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict = {}\n    for sublist in list1:\n        if tuple(sublist) not in dict:\n            dict[tuple(sublist)] = 0\n        dict[tuple(sublist)] += 1\n    return dict\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for i in list1:\n        if type(i) == list:\n            counts[tuple(i)] = counts.get(tuple(i),0) + 1\n    return counts\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d = {}\n    for i in list1:\n        if tuple(i) not in d.keys():\n            d[tuple(i)] = 1\n        else:\n            d[tuple(i)] += 1\n    return d\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # the output of this function is the dictionary of all unique sublists\n    def sublist_count(list1):\n        # this function returns a dictionary, where each sublist is turned into a tuple, and the value is the number of its occurrence\n        def count_n(list1, n):\n            # count how many times each sublist occurs in the list\n            count = {}\n            for i in range(len(list1) - n + 1):\n                if tuple(list1[i:i + n]) in count:\n                    count[tuple(list1[i:i + n])] += 1\n                else:\n                    count[tuple(list1[i:i + n])] = 1\n            return count\n        # this function is used to count how many sublists are unique\n        def unique_count(list1, n):\n            # count how many times each sublist occurs in the list\n            count = {}\n            for i in range(len(list1) - n + 1):\n                if tuple(list1[i:i + n]) in count:\n                    count[tuple(list1[i:i + n])] += 1\n                else:\n                    count[tuple(list1[i:i + n])] = 1\n            return len(count)\n        count = {}\n        for i in range(len(list1) - 1):\n            # get the sublist from the list\n            sublist = list1[i:i + 1]\n            # turn the sublist into a tuple\n            sublist = tuple(sublist)\n            # if the sublist is not in the dictionary yet\n            if sublist not in count:\n                # add the sublist into the dictionary\n                count[sublist] = unique_count(list1, len(sublist))\n        return count\n    # this function is used to count how many sublists are unique\n    def unique_count(list1, n):\n        # count how many times each sublist occurs in the list\n        count = {}\n        for i in range(len(list1) - n + 1):\n            if tuple(list1[i:i + n]) in count:\n                count[tuple(list1[i:i + n])] += 1\n            else:\n                count[tuple(list1[i:i + n])] = 1\n        return len(count)\n    # this function is used to count how many sublists are unique\n    def unique_count2(list1, n):\n        # count how many times each sublist occurs in the list\n        count = {}\n        for i in range(len(list1) - n + 1):\n            if tuple(list1[i:i + n]) in count:\n                count[tuple(list1[i:i + n])] += 1\n            else:\n                count[tuple(list1[i:i + n])] = 1\n        return len(count)\n    # get the dictionary of all unique sublists\n    count = sublist_count(list1)\n    # get the dictionary of all unique sublists\n    count = unique_count(list1, 1)\n    # get the dictionary of all unique sublists\n    count = unique_count2(list1, 1)\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Creates a list of tuples.\n    lst = []\n    for i in list1:\n        lst.append(tuple(i))\n    return {i:lst.count(i) for i in lst}\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return dict(collections.Counter(tuple(sorted(list1)) for list1 in list1))\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict1 = {}\n    for item in list1:\n        if isinstance(item, list):\n            if item not in dict1:\n                dict1[tuple(item)] = 1\n            else:\n                dict1[tuple(item)] += 1\n    return dict1\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combs = list(combinations(test_list,2))\n    return combs\ndef test_combination_function(test_list):\n    #print(find_combinations(test_list))\n    return find_combinations(test_list)\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #len(test_list) = 2\n    #test_list[0] = [1, 2, 3]\n    #test_list[1] = [4, 5, 6]\n    #print (list(combinations(test_list[0], 2)))\n    #print (list(combinations(test_list[1], 2)))\n    #[[1, 2], [1, 4], [1, 5], [1, 6], [2, 4], [2, 5], [2, 6], [3, 4], [3, 5], [3, 6]]\n    #[[4, 5], [4, 6], [5, 6]]\n    for i in range(0, len(test_list)):\n        print ([list(x) for x in combinations(test_list[i], 2)])\n        \ndef find_permutations(test_list):\n    '''\n    Write a function to find the permutations of a list in a tuple. https://www.geeksforgeeks.org/python-permutations-of-a-list-in-tuple/\n    '''\n    for i in range(0, len(test_list)):\n        print (list(combinations(test_list, i+1)))\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for x in range(len(test_list)):\n        for y in range(x,len(test_list)):\n            if x == y:\n                break\n            else:\n                res.append((test_list[x],test_list[y]))\n    return res\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for i in range(1, len(test_list)):\n        combinations_list.extend(list(combinations(test_list, i)))\n    return combinations_list\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    new_list = []\n    for i in range(1,len(test_list)+1):\n        for j in combinations(test_list,i):\n            new_list.append(j)\n    return new_list\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #test_list = [(10,20),(30,40),(50,60)]\n    return [c for c in combinations(test_list,2) if sum(c) == sum(test_list[0])]\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    output = []\n    for i in range(1, len(test_list)):\n        for x in combinations(test_list, i):\n            if sum(x) == 0:\n                output.append(x)\n    return output\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            combinations_list.append(test_list[i]+test_list[j])\n    combinations_list = list(set(combinations_list))\n    return combinations_list\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    from itertools import combinations \n    for i in test_list:\n        sum_of_combinations=0\n        #list_of_combinations = list(combinations(test_list,i))\n        for j in combinations(test_list,i):\n            sum_of_combinations=sum_of_combinations+sum(j)\n        print(\"sum of combinations is\",sum_of_combinations)\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = list(test_list)\n    for i in range(len(test_list), 0, -1):\n        for j in combinations(test_list, i):\n            print(j)\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n + 1) : \n        if n % i == 0 : \n            count += 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    s = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            s = s + 1\n        i = i + 1\n    if s % 2 == 0:\n        return True\n    else :\n        return False\ndef sum_of_prime_digits(n) : \n    '''\n    Write a python function to return the sum of the prime digits of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    num = 0\n    i = 2\n    while i <= n:\n        while (n % i == 0):\n            num = num + i\n            n = n / i\n        i = i + 1\n    return num\ndef is_prime(n) : \n    '''\n    Write a python function to check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return is_prime(n-1)\ndef euler_func(n) : \n    '''\n    Write a python function to return the Euler function E(n) of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    if n == 1 :\n        return 1\n    elif n == 2 :\n        return 1\n    else :\n        return euler_func(n - 1) + euler_func(n - 2)\ndef is_pandigital(n) : \n    '''\n    Write a python function to check whether a number is pandigital or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    n_list = [1,2,3,4,5,6,7,8,9]\n    for i in n_list:\n        if i not in n:\n            return False\n    return True\ndef factorial(n) : \n    '''\n    Write a python function to return the factorial of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if n <= 1:\n        return 1\n    else :\n        return n * factorial(n - 1)\ndef fibonacci(n) : \n    '''\n    Write a python function to return the Fibonacci series upto nth term. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    if n <= 1:\n        return n\n    else :\n        return fibonacci(n-1) + fibonacci(n-2)\ndef is_perfect_square(n) : \n    '''\n    Write a python function to check whether a number is perfect square or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    x = math.sqrt(n)\n    return x == int(x)\ndef is_palindrome(n) : \n    '''\n    Write a python function to check whether a number is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    s = str(n)\n    if s[:] == s[::-1]:\n        return True\n    else :\n        return False\ndef is_rotated(s1, s2) : \n    '''\n    Write a python function to check whether two strings are rotated or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    if len(s1)!= len(s2) or s1 == s2 :\n        return False\n    else :\n        for i in range(len(s1)):\n            if s1[i:] + s1[:i] == s2 :\n                return True\n            else :\n                return False\ndef is_anagram(s1, s2) : \n    '''\n    Write a python function to check whether two strings are anagram or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    s1 = s1.lower()\n    s2 = s2.lower()\n    if len(s1)!= len(s2) :\n        return False\n    else :\n        s1_dict = {}\n        s2_dict = {}\n        for i in s1 :\n            if i in s1_dict :\n                s1_dict[i] = s1_dict[i] + 1\n            else :\n                s1_dict[i] = 1\n        for i in s2 :\n            if i in s2_dict :\n                s2_dict[i] = s2_dict[i] + 1\n            else :\n                s2_dict[i] = 1\n        if s1_dict == s2_dict :\n            return True\n        else :\n            return False\ndef has_digit(s) : \n    '''\n    Write a python function to check whether a string has a digit or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-35.php\n    '''\n    for i in s :\n        if i.isdigit() :\n            return True\n    return False\ndef has_letter(s) : \n    '''\n    Write a python function to check whether a string has a letter or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-36.php\n    '''\n    for i in s :\n        if i.isalpha() :\n            return True\n    return False\ndef is_pangram(s) : \n    '''\n    Write a python function to check whether a string is a pangram or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-37.php\n    '''\n    if len(s) == 26 :\n        return True\n    else :\n        for i in s :\n            if i.isalpha() :\n                return True\n        return False\ndef get_leap_years(start, end) : \n    '''\n    Write a python function to return the list of leap years between a given range. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-38.php\n    '''\n    years = []\n    for i in range(start, end + 1) :\n        if i % 4 == 0 and i % 100!= 0 or i % 400 == 0 :\n            years.append(i)\n    return years\ndef get_perfect_squares(start, end) : \n    '''\n    Write a python function to return the list of perfect squares between a given range. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-39.php\n    '''\n    perfect_squares = []\n    for i in range(start, end + 1) :\n        if is_perfect_square(i) :\n            perfect_squares.append(i)\n    return perfect_squares\ndef is_iterative(s) : \n    '''\n    Write a python function to check whether a string is a interative (iterative) or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-40.php\n    '''\n    s_list = list(s)\n    i = 0\n    j = len(s) - 1\n    while i < j :\n        if s_list[i] == s_list[j] :\n            retur"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 2\n    divisors = 1\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            divisors += 2\n        i += 1\n    if n / i == i:\n        divisors -= 1\n    if divisors % 2 == 0:\n        return True\n    else:\n        return False\ndef count_digits(n) : \n    '''\n    Write a python function to check whether a number is a palindrome. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    if str(n) == str(n)[::-1]:\n        return True\n    else:\n        return False\ndef reverse_string(s) : \n    '''\n    Write a python function to reverse a string. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    if s == None:\n        return None\n    if len(s) == 0:\n        return s\n    else:\n        return reverse_string(s[1:]) + s[0]\ndef count_char(s, ch) : \n    '''\n    Write a python function to count the number of characters occuring in a string. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    if s == None:\n        return None\n    if len(s) == 0:\n        return 0\n    else:\n        if s[0] == ch:\n            return 1 + count_char(s[1:], ch)\n        else:\n            return count_char(s[1:], ch)\ndef is_prime(n) : \n    '''\n    Write a python function to check whether a given number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    if n == 1:\n        return False\n    elif n < 4 :\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\ndef is_palin(s) : \n    '''\n    Write a python function to check whether a given string is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if s == None:\n        return None\n    elif len(s) == 1:\n        return True\n    elif s == s[::-1]:\n        return True\n    else:\n        return False\ndef is_palin2(s) : \n    '''\n    Write a python function to check whether a given string is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if s == None:\n        return None\n    elif len(s) == 1:\n        return True\n    elif s == s[::-1]:\n        return True\n    elif s == \"\":\n        return True\n    elif s[0] == s[-1]:\n        return is_palin(s[1:-1])\n    else:\n        return False\ndef is_leap_year(n) : \n    '''\n    Write a python function to check whether a given year is a leap year or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    if n % 400 == 0:\n        return True\n    elif n % 100 == 0 and n % 400!= 0:\n        return False\n    elif n % 4 == 0:\n        return True\n    else:\n        return False\ndef sum_of_digits(n) : \n    '''\n    Write a python function to find the sum of digits in a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    if n == None:\n        return None\n    elif n < 10:\n        return n\n    else:\n        return (n % 10) + sum_of_digits(n // 10)\ndef check_perfect_square(n) : \n    '''\n    Write a python function to check whether a given number is perfect square. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    if n == None:\n        return None\n    elif n == 0 or n == 1:\n        return True\n    elif n < 0:\n        return False\n    else:\n        if n % 2 == 0:\n            return check_perfect_square(n / 2)\n        else:\n            return False\ndef square_digits(n) : \n    '''\n    Write a python function to find the sum of the square of digits in a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    if n == None:\n        return None\n    elif n == 0 or n == 1:\n        return n\n    elif n < 0:\n        return False\n    else:\n        digits = list(map(int, list(str(n))))\n        return sum(i * i for i in digits)\ndef find_happy_number(n) : \n    '''\n    Write a python function to check whether a given number is a happy number or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    if n == None:\n        return None\n    elif n == 0 or n == 1:\n        return n\n    elif n < 0:\n        return False\n    else:\n        return sum_of_digits(square_digits(n)) == 1\ndef is_kaprekar_number(n) : \n    '''\n    Write a python function to check whether a given number is a kaprekar number or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-35.php\n    '''\n    if n == None:\n        return None\n    elif n == 0 or n == 1:\n        return True\n    elif n < 0:\n        return False\n    else:\n        return (check_perfect_square(n - sum_of_digits(n))) or (check_perfect_square(n + sum_of_digits(n)))\ndef find_factors(n) : \n    '''\n    Write a python function to find the factors of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-36.php\n    '''\n    if n == None:\n        return None\n    elif n < 0:\n        return False\n    elif n == 0:\n        return []\n    else:\n        factors = []\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                factors.append(i)\n                factors.append(n // i)\n        factors.sort()\n        return factors\ndef is_palindrome(n) : \n    '''\n    Write a python function to check whether a given number is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-37.php\n    '''\n    if n == None:\n        return None\n    elif n < 0:\n        return False\n    elif n == 0:\n        return True\n    elif n < 10:\n        return True\n    else:\n        return is_palin2(str(n))\ndef find_largest_palindrome("
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 0\n    for a in range(1, int(math.sqrt(n)) + 1) :\n        if (n % a == 0) :\n            i += 2\n        if (a > (n / a)) :\n            break\n    return i \n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisors = divisors + 1\n    return divisors\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    div = [1, n]\n    for i in xrange(2, int(math.sqrt(n)) + 1) : \n        if n % i == 0 : \n            div.append(i)\n            if i!= n / i : \n                div.append(n / i)\n    return len(div)\n    \ndef sum_of_divisors(n) : \n    '''\n    Write a python function to find the sum of all divisors of a positive integer. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    div = [1, n]\n    for i in xrange(2, int(math.sqrt(n)) + 1) : \n        if n % i == 0 : \n            div.append(i)\n            if i!= n / i : \n                div.append(n / i)\n    return sum(div)\n    \ndef is_prime(n) : \n    '''\n    Write a python function to check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    return count_divisors(n) == 2\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1,n):\n        if n % i == 0 :\n            divisors += 1\n    if divisors % 2 == 0:\n        return True\n    else:\n        return False\ndef even_fibonacci(n):\n    '''\n    Write a python function to return if the number is even or not and using the fibonacci series. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    a = 0\n    b = 1\n    while b < n:\n        if b % 2 == 0:\n            a = a+b\n        b = a + b\n    if b == n:\n        return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a python function to check if the number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n        return True\ndef is_palindrome(n):\n    '''\n    Write a python function to check if a number is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    a = n\n    b = 0\n    while n > 0:\n        b = b*10 + n%10\n        n = n//10\n    if b == a:\n        return True\n    else:\n        return False\ndef is_anagram(a,b):\n    '''\n    Write a python function to check if the two strings are anagrams or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    if len(a)!= len(b):\n        return False\n    a = a.lower()\n    b = b.lower()\n    for i in a:\n        if i in b:\n            b = b.replace(i,\"\",1)\n        else:\n            return False\n    return True\ndef find_anagram(word):\n    '''\n    Write a python function to find the anagrams of a word. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    a = word.lower()\n    result = []\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if a[i] == a[j]:\n                continue\n            else:\n                if a[i]!= a[j]:\n                    if is_anagram(a[i],a[j]):\n                        if a[i] not in result:\n                            result.append(a[i])\n                    if is_anagram(a[j],a[i]):\n                        if a[j] not in result:\n                            result.append(a[j])\n    return result\ndef is_anagram_of_morse(a,b):\n    '''\n    Write a python function to check if the two words are anagrams of morse code or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-35.php\n    '''\n    a = a.lower()\n    b = b.lower()\n    for i in a:\n        if i!='':\n            if a.count(i)!= b.count(i):\n                return False\n    return True\ndef is_anagram_of_phonetic(a,b):\n    '''\n    Write a python function to check if the two words are anagrams of phonetic code or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-36.php\n    '''\n    a = a.lower()\n    b = b.lower()\n    for i in a:\n        if i!='':\n            if a.count(i)!= b.count(i):\n                return False\n    return True\ndef is_number_balanced(n):\n    '''\n    Write a python function to check if the digits of a number are balanced or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-37.php\n    '''\n    if n == 0:\n        return True\n    a = n\n    b = 0\n    while n > 0:\n        b = b*10 + n%10\n        n = n//10\n    if abs(a) == abs(b):\n        return True\n    else:\n        return False\ndef is_number_balanced_v2(n):\n    '''\n    Write a python function to check if the digits of a number are balanced or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-37.php\n    '''\n    if n == 0:\n        return True\n    a = n\n    b = 0\n    while n > 0:\n        b = b*10 + n%10\n        n = n//10\n    if abs(a) - abs(b) == 0:\n        return True\n    else:\n        return False\ndef is_number_balanced_v3(n):\n    '''\n    Write a python function to check if the digits of a number are balanced or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-37.php\n    '''\n    if n == 0:\n        return True\n    while n > 0:\n        if n % 10 == 0:\n            return False\n        n = n//10\n    return True\ndef is_number_balanced_v4(n):\n    '''\n    Write a python function to check if the digits of a number are balanced or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-37.php\n    '''\n    if n == 0:\n        return True\n    a = n\n    b = 0\n    while n > 0:\n        b = b*10 + n%10\n        n = n//10\n    if a % b == 0:\n        return True\n    else:\n        return False\ndef is_number_balanced_v5(n):\n    '''\n    Write a python function to check if the digits of a number are balanced or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-37.php\n    '''\n    if n == 0:\n        return True\n    a = n\n    b = 0\n    while n > 0:\n        b = b*10 + n%10\n        n = n//10\n    if (a // b) * 10 - a == 0:\n        return True\n    else:\n        return False\ndef is_number_balanced_v6(n):\n    '''\n    Write a python function to check if the digits of a number are balanced or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-37.php\n    '''\n    if n == 0:\n        return True\n    a = n\n    b = 0\n    while n > 0:\n        b = b*10 + n%10\n        n = n//10\n    if (a // b) * 10 - a == 0:\n        return True\n    else:\n        if (abs(a) - abs(b)) % 10 == 0:\n            return True\n        else:\n            return False\ndef is_number_balanced_v7(n):\n    '''\n    Write a python function to check if the digits of a number are balanced or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-37.php\n    '''\n    if n ="
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return sum(i for i in range(1, n+1) if n % i == 0) % 2 == 0\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n + 1) :\n        if n % i == 0 :\n            count += 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 1\n    count = 0\n    limit = int(math.sqrt(n))\n    for i in range(2, limit+1):\n        if n % i == 0:\n            count += 2\n            divisors *= i\n            divisors *= i\n    if divisors > n:\n        divisors -= n\n    return (divisors, count)\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    arr_len = len(arr)\n    total = 0\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr), 2):\n            res += sum(arr[i:j])\n    return res\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        n = len(arr)\n        odd_sum = 0\n        for i in range(n):\n            if i % 2 == 0:\n                odd_sum += arr[i]\n        return odd_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    res = []\n    for i in range(len(arr)):\n        for j in range(0,i+1):\n            if len(arr[j:i+1])%2!= 0:\n                res.append(sum(arr[j:i+1]))\n    return sum(res)\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    arr.insert(0, 0)\n    for i in range(0, len(arr)):\n        sum += arr[i]\n        if i > 0:\n            sum -= arr[i-1]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum([sum(arr[i:]) for i in range(1, len(arr), 2)])\n    \ndef largest_odd_length_subarray(arr):\n    '''\n    Write a python function to find the largest subarray with odd length\n    '''\n    if len(arr) == 0:\n        return None\n    curr_sum = 0\n    max_sum = 0\n    for i in range(len(arr)):\n        curr_sum += arr[i]\n        if i >= 1 and curr_sum & 1:\n            max_sum = max(max_sum, curr_sum)\n            curr_sum -= arr[i-1]\n    return max_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    arr_len = len(arr)\n    # if the array length is even\n    if arr_len % 2 == 0:\n        return 0\n    # find the sum of all subarrays of length 1\n    odd_sum = 0\n    for i in range(0, arr_len - 1, 2):\n        odd_sum += arr[i]\n    return odd_sum\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n    diff = max_val - min_val\n    v = max_val\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    def _rgb(r, g, b):\n        r = float(r)\n        g = float(g)\n        b = float(b)\n        return r, g, b\n    # Define colors, use rgb as RGB\n    # https://www.cs.hmc.edu/~hv/ref/rgb.html\n    r, g, b = _rgb(r, g, b)\n    # Define constants for maximum RGB values\n    C1 = (max(r, g, b) + min(r, g, b)) / 2\n    C2 = (max(r, g, b) - min(r, g, b)) / 2\n    if C1 == 0:\n        C1 = 0.001\n    # Define constants for minimum RGB values\n    C3 = (max(r, g, b) - min(r, g, b)) / 2\n    # Define constants for hue\n    if C2 == 0:\n        C2 = 0.001\n    # Define hue\n    h = 0\n    # Calculate hue\n    if C2 > 0:\n        if C1 > C2:\n            h = (g - b) / C2\n        else:\n            h = (b - r) / C2 + 2\n    elif C2 == 0:\n        h = 0\n    elif C2 < 0:\n        if C1 > C3:\n            h = (b - r) / C3\n        else:\n            h = (r - g) / C3 + 4\n    h = h % 1\n    # Define constants for saturation\n    if C2 < 0:\n        C2 = 0.001\n    S = 0\n    # Calculate saturation\n    if C2!= 0:\n        S = C1 / C2\n    else:\n        S = 0\n    # Define constants for value\n    V = C1\n    # Calculate value\n    if C1!= 0:\n        V = C1\n    # Define hue, saturation, and value\n    h = \"%s\" % h\n    S = \"%s\" % S\n    V = \"%s\" % V\n    # Return the result\n    return h, S, V\n    #return rgb_to_hsv(r, g, b)\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if maxc == minc:\n        return 0.0, 0.0, v\n    if maxc == r:\n        h = (g-b)/(maxc-minc)\n    elif maxc == g:\n        h = 2 + (b-r)/(maxc-minc)\n    else:\n        h = 4 + (r-g)/(maxc-minc)\n    if maxc == 0:\n        s = 0\n    else:\n        s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2 + rc-bc\n    else:\n        h = 4 + gc - rc\n    h = h/6\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # read the color image\n    img = cv2.imread(\"./images/image.jpg\")\n    # the hsv values are changed for all pixels, so we need to convert to grayscale\n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    # thresholding the image\n    ret,thresh = cv2.threshold(gray,127,255,0)\n    # ret,thresh = cv2.threshold(gray,127,255,0)\n    # finding contours\n    im2,contours, hierarchy = cv2.findContours(thresh,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n    \n    # using drawContour function to find the contours\n    cv2.drawContours(img, contours, -1, (0,255,0), 3)\n    #cv2.drawContours(img, contours, -1, (0,255,0), 3)\n    \n    # finding contours and boundingRect function\n    for i in range(len(contours)):\n        x,y,w,h = cv2.boundingRect(contours[i])\n        cv2.rectangle(img,(x,y),(x+w,y+h),(0,255,0),2)\n        # cv2.rectangle(img,(x,y),(x+w,y+h),(0,255,0),2)\n        \n        \n    # show the image\n    cv2.imshow(\"img\",img)\n    cv2.waitKey(0)\n    cv2.destroyAllWindows()\n    \nif __name__ == \"__main__\":\n    rgb_to_hsv("
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    min_color = min(r, g, b)\n    max_color = max(r, g, b)\n    diff = max_color - min_color\n    if diff == 0:\n        h = 0\n    elif max_color == r:\n        h = (g - b) / diff\n    elif max_color == g:\n        h = (b - r) / diff + 2\n    else:\n        h = (r - g) / diff + 4\n    h *= 60\n    if h < 0:\n        h += 360\n    if max_color == 0:\n        s = 0\n    else:\n        s = diff / max_color\n    v = max_color\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255\n    g = g / 255\n    b = b / 255\n    c_max = max(r, g, b)\n    c_min = min(r, g, b)\n    delta = c_max - c_min\n    if delta == 0:\n        h = 0\n    elif c_max == r:\n        h = (g - b) / delta\n    elif c_max == g:\n        h = 2 + (b - r) / delta\n    elif c_max == b:\n        h = 4 + (r - g) / delta\n    if h < 0:\n        h += 6\n    return (h, 1 - c_min * (1 - c_min / delta), c_max * (1 - c_max / delta))\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = 60 * (((g-b)/delta) % 6)\n    elif cmax == g:\n        h = 60 * ((b-r)/delta + 2)\n    elif cmax == b:\n        h = 60 * ((r-g)/delta + 4)\n    if cmax == 0:\n        s = 0\n    else:\n        s = delta/cmax\n    v = cmax\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Figure out the hue\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    diff = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/diff) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/diff) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/diff) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = diff/mx\n    v = mx\n    return [h, s, v]\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h = []\n    s = []\n    v = []\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h.append(0)\n        s.append(0)\n        v.append(cmax)\n    elif cmax == r:\n        h.append(((g - b) / delta) % 6)\n        s.append(delta / (cmax - cmin))\n        v.append((cmax - b) / (cmax - cmin))\n    elif cmax == g:\n        h.append(((b - r) / delta) + 2)\n        s.append(delta / (cmax - cmin))\n        v.append((cmax - r) / (cmax - cmin))\n    elif cmax == b:\n        h.append(((r - g) / delta) + 4)\n        s.append(delta / (cmax - cmin))\n        v.append((cmax - g) / (cmax - cmin))\n    h.append(cmax)\n    s.append(delta / (cmax - cmin))\n    v.append((cmax - cmin) / (cmax - cmin))\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r/255.0\n    g = g/255.0\n    b = b/255.0\n    c_max = max(r, g, b)\n    c_min = min(r, g, b)\n    delta = c_max - c_min\n    if delta == 0:\n        h = 0\n    elif c_max == r:\n        h = (g - b)/delta % 6\n    elif c_max == g:\n        h = (b - r)/delta + 2\n    elif c_max == b:\n        h = (r - g)/delta + 4\n    h *= 60\n    if c_max == 0:\n        s = 0\n    else:\n        s = delta/c_max\n    v = c_max\n    return h, s, v\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # Your code here\n    sum_even = 0\n    sum_odd = 0\n    for i in range(0,len(list1)):\n        if i % 2 == 0:\n            sum_even += list1[i]\n        else:\n            sum_odd += list1[i]\n    return sum_even * sum_odd\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = 1\n    for i in list1:\n        if i%2==0:\n            result = result * i\n    return result\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product = 1\n    odd_product = 1\n    for number in list1:\n        if number % 2 == 0:\n            even_product *= number\n        else:\n            odd_product *= number\n    print(even_product, odd_product)\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    for i in list1:\n        if i%2==0:\n            num_even=i\n        else:\n            num_odd=i\n    print(num_even*num_odd)\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for item in list1:\n        if item % 2 == 0:\n            even_list.append(item)\n        else:\n            odd_list.append(item)\n    print(\"List of even numbers: \" + str(even_list))\n    print(\"List of odd numbers: \" + str(odd_list))\n    product = 1\n    for item in even_list:\n        product *= item\n    for item in odd_list:\n        product *= item\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    for i in list1:\n        if i % 2 == 0:\n            even = even * i\n        else:\n            odd = odd * i\n    return [even, odd]\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_number_product = 1\n    odd_number_product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_number_product *= num\n        else:\n            odd_number_product *= num\n    print 'The product of even and odd numbers is: ', even_number_product * odd_number_product\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product = 1\n    odd_product = 1\n    for num in list1:\n        if num%2 == 0:\n            even_product = even_product * num\n        else:\n            odd_product = odd_product * num\n    return (even_product,odd_product)\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    i = 0\n    sum = 0\n    while i < len(list1):\n        if list1[i]%2==0:\n            sum = sum + list1[i]\n        else:\n            sum = sum - list1[i]\n        i = i + 1\n    print(sum)\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 1\n    odd_num = 1\n    for i in list1:\n        if i%2 == 0:\n            even_num *= i\n        else:\n            odd_num *= i\n    return (even_num, odd_num)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_tuple = tuple(test_str.split(','))\n    return tuple(map(int, test_tuple))\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_to_int_tuple = eval(test_str)\n    return tuple(str_to_int_tuple)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str[1:-1].split(',')))\n    \ndef sort_by_first_letter(test_list):\n    '''\n    Write a function to sort the list of tuple by the first letter.\n    '''\n    return sorted(test_list, key = lambda x: x[0])\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # int_list = [int(x) for x in test_str[1:-1].split(',')]\n    # return tuple(int_list)\n    return tuple([int(x) for x in test_str[1:-1].split(',')])\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if test_str == None:\n        return None\n    if type(test_str)!= str:\n        raise TypeError('Parameter must be string.')\n    list_str = test_str.split(',')\n    if len(list_str)!= 3:\n        raise ValueError('Parameter must be 3-digit integer string.')\n    for element in list_str:\n        if not element.isdigit():\n            raise ValueError('Parameter must be 3-digit integer string.')\n    tuple_int = int(list_str[0]), int(list_str[1]), int(list_str[2])\n    return tuple_int\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    string_list = test_str[1:-1].split(',')\n    int_list = [int(i) for i in string_list]\n    return tuple(int_list)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.replace('(', '').replace(')', '')\n    test_str = test_str.split(',')\n    return tuple(map(int, test_str))\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    list_str = test_str.split('(')[1].split(',')\n    return [int(x) for x in list_str]\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    '''\n    # your code here\n    \n    \n    return tuple(test_str.split(','))\n    '''\n    return tuple(map(int,test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    for i in test_str:\n        if i == ',':\n            return tuple(map(int, test_str.split(',')))\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if not a:\n        return 0\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    a.append(x)\n    a.sort()\n    return bisect.bisect(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a) or a[i] > x:\n        return i\n    else:\n        return i + 1\ndef merge_sort(lst, left, right):\n    '''\n    Write a function to sort a list with merge sort.\n    '''\n    if right - left <= 1:\n        return lst\n    mid = (left + right) // 2\n    lst1 = merge_sort(lst, left, mid)\n    lst2 = merge_sort(lst, mid, right)\n    return merge(lst1, lst2)\ndef merge(lst1, lst2):\n    i = j = 0\n    res = []\n    while i < len(lst1) and j < len(lst2):\n        if lst1[i] <= lst2[j]:\n            res.append(lst1[i])\n            i += 1\n        else:\n            res.append(lst2[j])\n            j += 1\n    if i < len(lst1):\n        res.extend(lst1[i:])\n    if j < len(lst2):\n        res.extend(lst2[j:])\n    return res\ndef is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\ndef find_rotate(lst, left, right):\n    if left >= right:\n        return left\n    mid = (left + right) // 2\n    if lst[mid] < lst[left]:\n        return find_rotate(lst, mid + 1, right)\n    else:\n        return find_rotate(lst, left, mid)\ndef find_rotate_1(lst, left, right):\n    mid = (left + right) // 2\n    if right - left == 1:\n        return left if lst[left] < lst[right] else right\n    elif lst[mid] < lst[left]:\n        return find_rotate_1(lst, mid + 1, right)\n    elif lst[mid] < lst[right]:\n        return find_rotate_1(lst, left, mid)\n    else:\n        return find_rotate_1(lst, mid, right)\ndef find_rotate_2(lst, left, right):\n    mid = (left + right) // 2\n    if right - left == 1:\n        return left if lst[left] < lst[right] else right\n    elif lst[mid] < lst[right]:\n        return find_rotate_2(lst, mid + 1, right)\n    elif lst[mid] < lst[left]:\n        return find_rotate_2(lst, left, mid)\n    else:\n        return find_rotate_2(lst, mid, right)\ndef find_rotate_3(lst, left, right):\n    mid = (left + right) // 2\n    if right - left == 1:\n        return left if lst[left] < lst[right] else right\n    elif lst[mid] < lst[right]:\n        return find_rotate_3(lst, mid + 1, right)\n    elif lst[mid] < lst[left]:\n        return find_rotate_3(lst, left, mid)\n    else:\n        return find_rotate_3(lst, mid, right)\ndef find_rotate_4(lst, left, right):\n    mid = (left + right) // 2\n    if right - left == 1:\n        return left if lst[left] < lst[right] else right\n    elif lst[mid] < lst[right]:\n        return find_rotate_4(lst, mid + 1, right)\n    elif lst[mid] < lst[left]:\n        return find_rotate_4(lst, left, mid)\n    else:\n        return find_rotate_4(lst, mid, right)\ndef find_rotate_5(lst, left, right):\n    mid = (left + right) // 2\n    if right - left == 1:\n        return left if lst[left] < lst[right] else right\n    elif lst[mid] < lst[left]:\n        return find_rotate_5(lst, mid + 1, right)\n    elif lst[mid] < lst[right]:\n        return find_rotate_5(lst, left, mid)\n    else:\n        return find_rotate_5(lst, mid, right)\ndef find_rotate_6(lst, left, right):\n    mid = (left + right) // 2\n    if right - left == 1:\n        return left if lst[left] < lst[right] else right\n    elif lst[mid] < lst[left]:\n        return find_rotate_6(lst, mid + 1, right)\n    elif lst[mid] < lst[right]:\n        return find_rotate_6(lst, left, mid)\n    else:\n        return find_rotate_6(lst, mid, right)\ndef find_rotate_7(lst, left, right):\n    mid = (left + right) // 2\n    if right - left == 1:\n        return left if lst[left] < lst[right] else right\n    elif lst[mid] < lst[left]:\n        return find_rotate_7(lst, mid + 1, right)\n    elif lst[mid] < lst[right]:\n        return find_rotate_7(lst, left, mid)\n    else:\n        return find_rotate_7(lst, mid, right)\ndef find_rotate_8(lst, left, right):\n    mid = (left + right) // 2\n    if right - left == 1:\n        return left if lst[left] < lst[right] else right\n    elif lst[mid] < lst[left]:\n        return find_rotate_8(lst, mid + 1, right)\n    elif lst[mid] < lst[right]:\n        return find_rotate_8(lst, left, mid)\n    else:\n        return find_rotate_8(lst, mid, right)\ndef find_rotate_9(lst, left, right):\n    mid = (left + right) // 2\n    if right - left == 1:\n        return left if lst[left] < lst[right] else right\n    elif lst[mid] < lst[left]:\n        return find_rotate_9(lst, mid + 1, right)\n    elif lst[mid] < lst[right]:\n        return find_rotate_9(lst, left, mid)\n    else:\n        return find_rotate_9(lst, mid, right)\ndef find_rotate_10(lst, left, right):\n    mid = (left + right) // 2\n    if right - left == 1:\n        return left if lst[left] < lst[right] else right\n    elif lst[mid] < lst[left]:\n        return find_rotate_10(lst, mid + 1, right)\n    elif lst[mid] < lst[right]:\n        return find_rotate_10(lst, left, mid)\n    else:\n        return find_rotate_10(lst, mid, right)\ndef find_rotate_11(lst, left, right):\n    mid = (left + right) // 2\n    if right - left == 1:\n        return left if lst[left] < lst[right] else right\n    elif lst[mid] < lst[left]:\n        return find_rotate_11(lst, mid + 1, right)\n    elif lst[mid] < lst[right]:\n        return find_rotate_11(lst, left, mid)\n    else:\n        return find_rotate_11(lst, mid, right)\ndef find_rotate_12(lst, left, right):\n    mid = (left + righ"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # a.insert(bisect_right(a, x), x)\n    # return a\n    \n    i = bisect.bisect_right(a, x)\n    a.insert(i, x)\n    return a\n    \ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # a.insert(bisect.bisect_left(a, x), x)\n    # return a\n    \n    i = bisect.bisect_left(a, x)\n    a.insert(i, x)\n    return a\n    \n    \ndef right_rotation(a, k):\n    '''\n    Write a function to rotate the array a by k elements to the right.\n    '''\n    # return a[k:] + a[:k]\n    \n    tmp = a[0]\n    for i in range(k-1):\n        a[i] = a[i+1]\n    a[k-1] = tmp\n    return a\n    \ndef left_rotation(a, k):\n    '''\n    Write a function to rotate the array a by k elements to the left.\n    '''\n    # return a[-k:] + a[:-k]\n    \n    tmp = a[-1]\n    for i in range(k-1, 0, -1):\n        a[i] = a[i-1]\n    a[0] = tmp\n    return a\n    \n    \ndef array_max_intersection(a, b):\n    '''\n    Write a function to find the maximal intersection of two arrays.\n    '''\n    # return len(set(a).intersection(set(b)))\n    \n    result = 0\n    for i in a:\n        if i in b:\n            result = result + 1\n    return result\n    \ndef is_intersected(a, b):\n    '''\n    Write a function to find if two arrays are intersected.\n    '''\n    # return len(set(a).intersection(set(b))) > 0\n    \n    for i in a:\n        if i in b:\n            return True\n    return False\n    \n    \ndef prefix_suffix_overlap(a, b):\n    '''\n    Write a function to find the maximal overlap between two string with prefix and suffix.\n    '''\n    # min_len = min(len(a), len(b))\n    # for i in range(min_len):\n    #     if a[i] == b[i]:\n    #         continue\n    #     return i\n    # return min_len\n    \n    return max(0, len(a) - 1 - min(len(a), len(b)))\n    \n    \ndef duplicate_number(a):\n    '''\n    Write a function to find the duplicate number in an array of integers.\n    '''\n    # a.sort()\n    # i = 0\n    # while i < len(a):\n    #     if a[i]!= a[i+1]:\n    #         return a[i]\n    #     i = i + 1\n    \n    # return -1\n    \n    a.sort()\n    i = 0\n    j = 1\n    while i < j < len(a):\n        if a[i] == a[j]:\n            i = i + 1\n            j = j + 1\n        else:\n            return a[i]\n    return -1\n    \n    \ndef find_missing_number(a):\n    '''\n    Write a function to find the missing number in an array of integers.\n    '''\n    # a.sort()\n    # i = 0\n    # while i < len(a):\n    #     if a[i]!= a[i+1] - 1:\n    #         return a[i] + 1\n    #     i = i + 1\n    \n    # return -1\n    \n    a.sort()\n    i = 0\n    j = 1\n    while i < j < len(a):\n        if a[i] == a[j]:\n            i = i + 1\n            j = j + 1\n        else:\n            return a[i] + 1\n    return -1\n    \ndef group_anagrams(a):\n    '''\n    Write a function to group anagrams together.\n    '''\n    # a.sort()\n    # a_dict = {}\n    # for i in a:\n    #     a_dict[tuple(i)] = a_dict.get(tuple(i), []) + [i]\n    # return a_dict.values()\n    \n    a.sort()\n    a_dict = {}\n    for i in a:\n        s = ''.join(sorted(i))\n        a_dict[s] = a_dict.get(s, []) + [i]\n    return a_dict.values()\n    \n    \ndef is_valid_triangle(a, b, c):\n    '''\n    Write a function to check if a triangle can be formed from the sides of a,b,c.\n    '''\n    # if a + b > c and b + c > a and a + c > b:\n    #     return True\n    # else:\n    #     return False\n    \n    return a + b > c and b + c > a and a + c > b\n    \ndef is_valid_triangle2(a, b, c):\n    '''\n    Write a function to check if a triangle can be formed from the sides of a,b,c.\n    '''\n    return a + b > c and b + c > a and a + c > b\n    \n    \ndef angle_clockwise(a, b, c):\n    '''\n    Write a function to find the angle between three points.\n    '''\n    # return ((a[0]-b[0])*(c[1]-b[1]) - (a[1]-b[1])*(c[0]-b[0])) / ((a[0]-b[0])**2 + (a[1]-b[1])**2)**0.5\n    return math.degrees(math.atan2(a[1]-b[1], a[0]-b[0]) - math.atan2(c[1]-b[1], c[0]-b[0]))\n    \ndef angle_counterclockwise(a, b, c):\n    '''\n    Write a function to find the angle between three points.\n    '''\n    # return ((a[0]-b[0])*(c[1]-b[1]) - (a[1]-b[1])*(c[0]-b[0])) / ((a[0]-b[0])**2 + (a[1]-b[1])**2)**0.5\n    return math.degrees(math.atan2(a[1]-b[1], a[0]-b[0]) - math.atan2(c[1]-b[1], c[0]-b[0])) + 180\n    \ndef find_first_duplicate(a):\n    '''\n    Write a function to find the first duplicate value in an array of integers.\n    '''\n    # for i in a:\n    #     if a.count(i) > 1:\n    #         return i\n    # return -1\n    \n    # a.sort()\n    # for i in range(len(a)-1):\n    #     if a[i] == a[i+1]:\n    #         return a[i]\n    # return -1\n    \n    a.sort()\n    for i in range(len(a)-1):\n        if a[i] == a[i+1]:\n            return a[i]\n    return -1\n    \ndef find_first_duplicate2(a):\n    '''\n    Write a function to find the first duplicate value in an array of integers.\n    '''\n    # a.sort()\n    # for i in range(len(a)-1):\n    #     if a[i] == a[i+1]:\n    #         return a[i]\n    # return -1\n    \n    # a.sort()\n    # for i in range(len(a)-1):\n    #     if a[i] == a[i+1]:\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n    # in sorted a, the position of x is i\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    pos = bisect.bisect_right(a, x)\n    return pos\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect(a, x)\n    if i == len(a) or a[i]!= x:\n        return i\n    else:\n        return i + 1\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(.*?)b{3}')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matcher = re.compile(r'.*a{3}.*')\n    if matcher.match(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    a = re.search(r'ab{3}', text)\n    if a:\n        return a.group()\n    else:\n        return None\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3}', text)\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{4}', text)\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{5}', text)\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{6}', text)\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{7}', text)\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{8}', text)\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{9}', text)\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{10}', text)\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{11}', text)\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{12}', text)\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{13}', text)\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{14}', text)\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{15}', text)\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{16}', text)\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{17}', text)\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{18}', text)\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{19}', text)\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{20}', text)\ndef text_match_twentyone(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{21}', text)\ndef text_match_twentytwo(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{22}', text)\ndef text_match_twentythree(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{23}', text)\ndef text_match_twentyfour(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{24}', text)\ndef text_match_twentyfive(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{25}', text)\ndef text_match_twentysix(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{26}', text)\ndef text_match_twentyseven(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{27}', text)\ndef text_match_twentyeight(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{28}', text)\ndef text_match_twentynine(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{29}', text)\ndef text_match_thirty(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{30}', text)\ndef text_match_thirtyone(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{31}', text)\ndef text_match_thirtytwo(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{32}', text)\ndef text_match_thirtythree(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{33}', text)\ndef text_match_thirtyfour(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{34}', text)\ndef text_match_thirtyfive(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{35}', text)\ndef text_match_thirtysix(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{36}', text)\ndef text_match_thirtyseven(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{37}', text)\ndef text_match_thirtyeight(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{38}', text)\ndef text_match_thirtynine(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{39}', text)\ndef text_match_forty(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'."
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    m = re.match(r'\\ba{3}', text)\n    if m:\n        return m.group()\n    else:\n        return None\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.match('ab{3}', text)\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('^a.+b{3}', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.compile('(a.*){3}').search(text)\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    p = re.compile(r'.*a{3}.*b')\n    if p.match(text):\n        print(\"Found a match\")\n    else:\n        print(\"No match\")\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = []\n    #for each letter in the tuple, add it to the list\n    for letter in test_str:\n        new_tuple.append(letter)\n    #for each element in the list, add it to the tuple\n    for element in test_list:\n        new_tuple.append(element)\n    #create a tuple from the list\n    new_tuple = tuple(new_tuple)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    n = int(len(test_list) / 2)\n    return tuple(test_list[n:] + test_list[:n] + test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return(tuple(test_list + test_str))\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    print('You have entered a new tuple: ', test_list, test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = ()\n    # new_tuple.append(tuple(test_str))\n    # new_tuple = tuple(new_tuple)\n    # print new_tuple\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    \n    if test_list is None:\n        return None\n    \n    new_list = test_list\n    new_list.append(test_str)\n    return new_list\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Your code here\n    return None\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    \n    a_list = test_list.split(',')\n    a_tuple = tuple(a_list)\n    print(a_tuple)\n    \n    return a_tuple\n    "
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for num in nums:\n        if num % 2 == 0:\n            return True\n    return False\nprint even_position([1, 3, 4, 6, 7, 8, 9])\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i]%2!=0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return True\n        else:\n            return False\n    \n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    assert isinstance(nums, list)\n    for i in range(len(nums)):\n        if i % 2 == 0 and not nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for index in range(0,len(nums),2):\n        if (nums[index]%2)!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i]%2!=0:\n            return False\n    return True\nprint(even_position([1,2,3,4,5]))\nprint(even_position([1,3,4,6]))\nprint(even_position([1,2,3,4,5,6]))\nprint(even_position([1,2,3,4,5,6,7]))"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if type(nums) == list:\n        for i in xrange(0, len(nums), 2):\n            if nums[i] % 2!= 0:\n                return False\n        return True\n    else:\n        return \"Incorrect input\"\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums) == 0:\n        return False\n    if len(nums) == 1:\n        return True\n    for i in range(len(nums)):\n        if (i%2 == 0 and (nums[i]%2)!= 0):\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in xrange(0, len(nums), 2):\n        if nums[i]%2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple([i for i in test_tup if not isinstance(i, tuple)])\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = test_tup[0]\n    return tuple([remove_nested(x) for x in test_tup])\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for elem in test_tup:\n        if type(elem) is tuple:\n            pass\n        else:\n            new_tup += (elem,)\n    return new_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_list = list(test_tup)\n    for i in test_list:\n        if type(i) is tuple:\n            test_list.remove(i)\n    return tuple(test_list)\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    _, tup = test_tup\n    new_tup = tuple(\n        list(filter(lambda x: x not in tup, new_tup))\n    )\n    return new_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    \n    def remove_nested2(tup):\n        for item in tup:\n            if isinstance(item, tuple):\n                remove_nested2(item)\n            else:\n                pass\n        return tup\n    \n    return remove_nested2(test_tup)\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for n, x in enumerate(test_tup):\n        if isinstance(x, tuple):\n            test_tup = tuple(remove_nested(x)) + test_tup[n+1:]\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return (remove_nested(x) for x in test_tup)\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(i for i in test_tup if not isinstance(i, tuple))\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    def remove_nested_helper(some_tuple):\n        if some_tuple == ():\n            return ()\n        else:\n            first, rest = some_tuple[0], some_tuple[1:]\n            return (first,) + remove_nested_helper(rest)\n    return tuple(remove_nested_helper(test_tup))\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # check if the input is a number\n    if isinstance(input_list,int):\n        # check if the input is less than or equal to zero\n        if input_list < 0:\n            # return a error message\n            return \"input must be a positive number\"\n        else:\n            # return the number of lists in the input\n            return int(math.ceil(input_list/4))\n    else:\n        # return an error message\n        return \"input must be a positive number\"\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for x in input_list:\n        if type(x) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    total = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) is list:\n            total += 1\n    return total\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count=0\n    for i in range(len(input_list)):\n        if isinstance(input_list[i], list):\n            count+=1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return input_list.count(input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    i = 0\n    while i < len(input_list):\n        if isinstance(input_list[i], list):\n            count_list(input_list[i])\n        i+=1\n    return i\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    length = len(input_list)\n    if length == 1:\n        return 1\n    else:\n        return count_list(input_list[:length/2]) + count_list(input_list[length/2:])\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    total = 0\n    for element in input_list:\n        if isinstance(element,list):\n            total += 1\n    return total\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    if arr[-1]==x:\n        return len(arr)-1\n    if arr[0]==x:\n        return 0\n    if arr[0]>x:\n        return -1\n    low=0\n    high=len(arr)-1\n    while low<high:\n        mid=(low+high)/2\n        if arr[mid]==x:\n            return mid\n        elif arr[mid]<x:\n            low=mid+1\n        else:\n            high=mid\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    if x<arr[0] or x>arr[-1]:\n        return -1\n    if x==arr[0] or x==arr[-1]:\n        return 0\n    if x<arr[0]:\n        return first(arr,x)+len(arr)-1\n    if x>arr[-1]:\n        return first(arr,x)+len(arr)-1\n    if arr[0]<x<arr[-1]:\n        return first(arr,x)+len(arr)-1\n    else:\n        return first(arr,x)\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr==[]:\n        return None\n    if len(arr)==1:\n        if arr[0]==x:\n            return 0\n        else:\n            return None\n    else:\n        mid=(len(arr)-1)/2\n        if arr[mid]==x:\n            return mid\n        elif arr[mid]<x:\n            return last(arr[mid+1:],x)\n        else:\n            return last(arr[:mid],x)\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # the array must be sorted for this to work\n    # this could be done using a binary search or recursively but\n    # this is the most clever.\n    # this is the pythonic way of doing it.\n    # there is also a faster way to do this using the 'bisect' module\n    # but that is not supported by python 3.\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    if arr[-1]==x:\n        return len(arr)-1\n    return last(arr[:-1],x)\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return -1\n    if arr[n-1] == x:\n        return n-1\n    elif arr[0] > x:\n        return 0\n    l = 0\n    r = n-1\n    while r-l > 1:\n        m = l + (r-l)//2\n        if arr[m] < x:\n            l = m\n        else:\n            r = m\n    if arr[l] == x:\n        return l\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    lo = 0\n    hi = len(arr)\n    while lo < hi:\n        mid = lo + (hi-lo)//2\n        if arr[mid] == x:\n            hi = mid\n        elif arr[mid] > x:\n            hi = mid\n        else:\n            lo = mid + 1\n    return lo\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)<=1:\n        return arr\n    small_arr=first(arr,x)\n    if small_arr[1]==len(small_arr[0])-1:\n        return small_arr\n    else:\n        return last(small_arr[0],x)\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return len(arr)-1-arr[::-1].index(x)\n    \ndef max(arr):\n    '''\n    Write a python function to find the max element in a list.\n    '''\n    return max(arr)\n    \ndef min(arr):\n    '''\n    Write a python function to find the min element in a list.\n    '''\n    return min(arr)\n    \ndef median(arr):\n    '''\n    Write a python function to find the median element in a list.\n    '''\n    return sorted(arr)[len(arr)//2]\n    \ndef mean(arr):\n    '''\n    Write a python function to find the mean of a list.\n    '''\n    return sum(arr)/len(arr)\n    \ndef mode(arr):\n    '''\n    Write a python function to find the mode in a list.\n    '''\n    return max(set(arr), key=arr.count)\n    \ndef pow(x,y):\n    '''\n    Write a python function to compute a number raised to a power.\n    '''\n    return x**y\n    \ndef sum(arr):\n    '''\n    Write a python function to compute the sum of all the numbers in a list.\n    '''\n    return sum(arr)\n    \ndef sum_odds(arr):\n    '''\n    Write a python function to compute the sum of all the odd numbers in a list.\n    '''\n    return sum([x for x in arr if x%2!=0])\n    \ndef sum_evens(arr):\n    '''\n    Write a python function to compute the sum of all the even numbers in a list.\n    '''\n    return sum([x for x in arr if x%2==0])\n    \ndef std_dev(arr):\n    '''\n    Write a python function to compute the standard deviation of a list.\n    '''\n    return math.sqrt(sum([(x-mean(arr))**2 for x in arr])/len(arr))\n    \ndef std_dev_odds(arr):\n    '''\n    Write a python function to compute the standard deviation of a list of odd numbers.\n    '''\n    return std_dev([x for x in arr if x%2!=0])\n    \ndef std_dev_evens(arr):\n    '''\n    Write a python function to compute the standard deviation of a list of even numbers.\n    '''\n    return std_dev([x for x in arr if x%2==0])\n    \ndef std_dev_from_mean(arr):\n    '''\n    Write a python function to compute the standard deviation of a list,\n    based on the mean of the list.\n    '''\n    return math.sqrt(sum([(x-mean(arr))**2 for x in arr])/len(arr))\n    \ndef std_dev_from_mode(arr):\n    '''\n    Write a python function to compute the standard deviation of a list,\n    based on the mode of the list.\n    '''\n    return math.sqrt(sum([(x-mode(arr))**2 for x in arr])/len(arr))\n    \ndef variance(arr):\n    '''\n    Write a python function to compute the variance of a list.\n    '''\n    return sum([(x-mean(arr))**2 for x in arr])/len(arr)\n    \ndef variance_odds(arr):\n    '''\n    Write a python function to compute the variance of a list of odd numbers.\n    '''\n    return variance([x for x in arr if x%2!=0])\n    \ndef variance_evens(arr):\n    '''\n    Write a python function to compute the variance of a list of even numbers.\n    '''\n    return variance([x for x in arr if x%2==0])\n    \ndef variance_from_mean(arr):\n    '''\n    Write a python function to compute the variance of a list,\n    based on the mean of the list.\n    '''\n    return sum([(x-mean(arr))**2 for x in arr])/len(arr)\n    \ndef variance_from_mode(arr):\n    '''\n    Write a python function to compute the variance of a list,\n    based on the mode of the list.\n    '''\n    return sum([(x-mode(arr))**2 for x in arr])/len(arr)\n    \ndef delete_first(arr):\n    '''\n    Write a python function to delete the first element of a list.\n    '''\n    return arr[1:]\n    \ndef delete_last(arr):\n    '''\n    Write a python function to delete the last element of a list.\n    '''\n    return arr[:-1]\n    \ndef is_sorted(arr):\n    '''\n    Write a python function to test if a list is sorted.\n    '''\n    return sorted(arr)==arr\n    \ndef is_anagram(s1,s2):\n    '''\n    Write a python function to test if two strings are anagrams.\n    '''\n    return sorted(s1)==sorted(s2)\n    \ndef is_palindrome(s):\n    '''\n    Write a python function to test if a string is a palindrome.\n    '''\n    return s==s[::-1]\n    \ndef is_palin(s):\n    '''\n    Write a python function to test if a string is a palindrome,\n    using a stack.\n    '''\n    stack=[]\n    for c in s:\n        if c==' ':\n            continue\n        stack.append(c)\n    return stack==stack[::-1]\n    \ndef palindrome_pairs(words):\n    '''\n    Write a python function to test if two strings are a palindrome,\n    using a dictionary.\n    '''\n    d={}\n    for i in range(len(words)):\n        d[words[i]]=i\n    pairs=[]\n    for i in range(len(words)):\n        for j in range(i+1,len(words)):\n            if words[i]==words[j][::-1]:\n                pairs.append((i,j))\n    return pairs\n    \ndef palindrome_pairs_efficient(words):\n    '''\n    Write a python function to test if two strings are a palindrome,\n    using a dictionary.\n    '''\n    d={}\n    for i in range(len(words)):\n        d[words[i]]=i\n    pairs=[]\n    for i in range(len(words)):\n        for j in range(i+1,len(words)):\n            if words[i]==words[j][::-1] and d[words[j]]>d[words[i]]:\n                pairs.append((d[words[i]],d[words[j]]))\n    return pairs\n    \ndef rotate_matrix(matrix):\n    '''\n    Write a python function to rotate a matrix 90 degrees clockwise.\n    '''\n    return list(zip(*matrix[::-1]))\n    \ndef rotate_matrix_inplace(matrix):\n    '''\n    Write a python function to rotate a matrix 90 degrees clockwise,\n    in-place.\n    '''\n    for i in range(len(matrix)):\n        for j in range(i,len(matrix)):\n            matrix[j][i],matrix[i][j]=matrix[i][j],matrix[j][i]\n    for i in range(len(matrix)//2):\n        for j in range(len(matrix)):\n            matrix[j][i],matrix[i][j]=matrix[i][j],matrix[j][i]\n    return matrix\n    \ndef rotate_matrix_inplace_2(matrix):\n    '''\n    Write a python function to rotate a matrix 90 degrees clockwise,\n    in-place.\n    '''\n    for i in range(len(matrix)):\n        for j in range(i,len(matrix)):\n            matrix[j][i],matrix[i][j]=matrix[i][j],matrix[j][i]\n    for i in range(len(matrix)):\n        matrix[i].reverse()\n    return matrix\n    \ndef rotate_matrix_inplace_3(matrix)"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr)-1\n    while low <= high:\n        mid = low + (high-low)/2\n        if arr[mid] == x and (mid == len(arr)-1 or arr[mid+1] > x):\n            return mid\n        if arr[mid] >= x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile('.*a.*b')\n    return pattern.match(text)\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = 'a.*b$'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^[a-z]+.*b$')\n    return pattern.match(text)\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r\"(a.*b)\")\n    return pattern.findall(text)\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    pattern = r\"(?P<start>\" + r'a*' + r\")(?P<end>.*)\"\n    match = re.search(pattern, text)\n    return match.group(0)\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'(^|\\W).*b$', text)\n    if match:\n        return match.group()\n    return None\ndef text_startb_enda(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'a'.\n    '''\n    match = re.search(r'(^|\\W).*a$', text)\n    if match:\n        return match.group()\n    return None\ndef test_text_starta_endb():\n    assert text_starta_endb('asdfab') == 'ab'\n    assert text_starta_endb('asdfabas') == None\n    assert text_starta_endb('123') == None\n    assert text_starta_endb('123a') == None\n    assert text_starta_endb('a') == None\n    assert text_starta_endb('a1') == None\n    assert text_starta_endb('1a') == None\n    assert text_starta_endb('aab') == 'ab'\n    assert text_starta_endb('aabab') == 'ab'\n    assert text_starta_endb('aababa') == None\n    assert text_starta_endb('aababab') == None\n    assert text_starta_endb('aabababab') == None\ndef text_startb_endb(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'(^|\\W).*b$', text)\n    if match:\n        return match.group()\n    return None\ndef test_text_startb_endb():\n    assert text_startb_endb('asdfab') == None\n    assert text_startb_endb('asdfabas') == None\n    assert text_startb_endb('123') == None\n    assert text_startb_endb('123a') == None\n    assert text_startb_endb('a') == None\n    assert text_startb_endb('a1') == None\n    assert text_startb_endb('1a') == None\n    assert text_startb_endb('aab') == None\n    assert text_startb_endb('aabab') == None\n    assert text_startb_endb('aababab') == None\n    assert text_startb_endb('aabababab') == None\n    assert text_startb_endb('aababababab') == None\ndef text_enda_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'(^|\\W).*b$', text)\n    if match:\n        return match.group()\n    return None\ndef test_text_enda_endb():\n    assert text_enda_endb('a') == None\n    assert text_enda_endb('a1') == None\n    assert text_enda_endb('1a') == None\n    assert text_enda_endb('aab') == None\n    assert text_enda_endb('aabab') == None\n    assert text_enda_endb('aababab') == None\n    assert text_enda_endb('aabababab') == None\n    assert text_enda_endb('aababababab') == None\n    assert text_enda_endb('aabababababab') == None\n    assert text_enda_endb('a1a') == None\n    assert text_enda_endb('a1a1') == None\ndef text_endb_endb(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'(^|\\W).*b$', text)\n    if match:\n        return match.group()\n    return None\ndef test_text_endb_endb():\n    assert text_endb_endb('a') == None\n    assert text_endb_endb('a1') == None\n    assert text_endb_endb('1a') == None\n    assert text_endb_endb('aab') == None\n    assert text_endb_endb('aabab') == None\n    assert text_endb_endb('aababab') == None\n    assert text_endb_endb('aabababab') == None\n    assert text_endb_endb('aababababab') == None\n    assert text_endb_endb('aabababababab') == None\n    assert text_endb_endb('a1a') == None\n    assert text_endb_endb('a1a1') == None\ndef text_starta_endb_startb_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b',\n    followed by another 'b' ending in 'b'.\n    '''\n    match = re.search(r'(^|\\W).*b.*b$', text)\n    if match:\n        return match.group()\n    return None\ndef test_text_starta_endb_startb_endb():\n    assert text_starta_endb_startb_endb('asdfab') == 'ab'\n    assert text_starta_endb_startb_endb('asdfabas') == None\n    assert text_starta_endb_startb_endb('123') == None\n    assert text_starta_endb_startb_endb('123a') == None\n    assert text_starta_endb_startb_endb('a') == None\n    assert text_starta_endb_startb_endb('a1') == None\n    assert text_starta_endb_startb_endb('1a') == None\n    assert text_starta_endb_startb_endb('aab') == 'ab'\n    assert text_starta_endb_startb_endb('aabab') == 'ab'\n    assert text_starta_endb_startb_endb('aababab') == 'ab'\n    assert text_starta_endb_startb_endb('aabababab') == 'ab'\n    assert text_starta_endb_startb_endb('aababababab') == 'ab'\n    assert text_starta_endb_startb_endb('aabababababab') == 'ab'\n    assert text_starta_endb_startb_endb('a1a') == None\n    assert text_starta_endb_startb_endb('a1a1') == None\n    assert text_starta_endb_startb_endb('1a') == None\n    assert text_starta_endb_startb_endb('1a1') == None\n    assert text_starta_endb_startb_endb('a1a1a') == None\n    assert text_starta_endb_startb_endb('a1a1a1') == None\ndef text_enda_endb_startb_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b',\n    followed by another 'b' ending in 'b'.\n    '''\n    match = re.search(r'(^|\\W).*b.*b$', text)\n    if match:\n        return match.group()\n    return None\ndef test_text_enda_endb_startb_endb():\n    assert text_enda_endb_startb_endb('asdfab') == None\n    assert text_enda_endb_startb_endb('asdfabas') == None\n    assert text_enda_endb_startb_endb('123') == None\n    assert text_enda_endb_startb_endb('123a') == Non"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # text = raw_input('enter a string: ')\n    pattern = re.compile(r'a.*b')\n    print 'The matched string is: ', pattern.search(text)\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text_without_a_b = re.sub('a$','',text)\n    result = re.findall('^[a-zA-Z]*b',text_without_a_b)\n    return result\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"^a.*b$\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r\"a.*?b$\")\n    result = regex.findall(text)\n    return result\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict.values():\n        total += i\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    summation = 0\n    for i in dict:\n        summation += dict[i]\n    return summation\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    if not dict:\n        return 0\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict:\n        total = total + dict[item]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    s = 0\n    for item in dict:\n        s += dict[item]\n    return s\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    summation = 0\n    for num in dict.values():\n        summation += num\n    return summation\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([n for n in range(l, r+1) if n%2])\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 0:\n        return \"Error: Not a valid number\"\n    elif n == 0:\n        return 0\n    else:\n        return n + sum_odd(n - 2)\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n%2!=0:\n        return n\n    elif n==1:\n        return 1\n    else:\n        return n + sum_odd(n-2)\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    res = 0\n    if n<=l:\n        for i in range(n,l,-2):\n            res+=i\n    else:\n        for i in range(l,n,-2):\n            res+=i\n    return res\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(x for x in range(l,r) if x%2)\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return (n*(n+1))/2\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s=0\n    for i in range(l,r+1):\n        if(i%2!=0):\n            s=s+i\n    return s\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if not isinstance(n, int):\n        raise ValueError(\"input is not a natural number\")\n    return sum(range(1,n,2))\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n <= 0: \n        print 'Error'\n        return\n    else: \n        return n * (n + 1) / 2\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n    \ndef _prod(arr):  \n    '''\n    Write a python function to find the product of an array.\n    '''\n    product = 1\n    for i in arr:\n        product = product * i\n    return product\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if arr==[]: return 0\n    return arr[0] + _sum(arr[1:])\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # return sum(arr)\n    return reduce(lambda x,y:x+y, arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n    \ndef _max(arr):\n    '''\n    Write a python function to find the maximum number of an array.\n    '''\n    return max(arr)\n    \ndef _min(arr):\n    '''\n    Write a python function to find the minimum number of an array.\n    '''\n    return min(arr)\n    \ndef _mean(arr):\n    '''\n    Write a python function to find the mean of an array.\n    '''\n    return _sum(arr)/len(arr)\n    \ndef _variance(arr):\n    '''\n    Write a python function to find the variance of an array.\n    '''\n    avg = _mean(arr)\n    return _sum([(i - avg)**2 for i in arr])/len(arr)\n    \ndef _std(arr):\n    '''\n    Write a python function to find the standard deviation of an array.\n    '''\n    return _variance(arr)**0.5\n    \ndef _median(arr):\n    '''\n    Write a python function to find the median of an array.\n    '''\n    return _sort(arr)[len(arr)//2]\n    \ndef _mode(arr):\n    '''\n    Write a python function to find the mode of an array.\n    '''\n    modes = {}\n    for i in arr:\n        if i not in modes:\n            modes[i] = 1\n        else:\n            modes[i] += 1\n    return [k for k, v in modes.items() if v == max(modes.values())][0]\n    \ndef _sort(arr):\n    '''\n    Write a python function to sort an array.\n    '''\n    return sorted(arr)\n    \ndef _describe(arr):\n    '''\n    Write a python function to describe an array.\n    '''\n    return {'sum': _sum(arr),'max': _max(arr),'min': _min(arr),'mean': _mean(arr), 'variance': _variance(arr),'std': _std(arr),'median': _median(arr),'mode': _mode(arr),'sorted': _sort(arr)}"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for x in arr:\n        total += x\n    return total\n    \ndef _remove_evens(arr):\n    '''\n    Write a python function to remove all even numbers from a list of integers.\n    '''\n    total = 0\n    for x in arr:\n        if x % 2!= 0:\n            total += x\n    return total\n    \ndef _find_max(arr):\n    '''\n    Write a python function to find the maximum value of an array.\n    '''\n    max = arr[0]\n    for x in arr:\n        if max < x:\n            max = x\n    return max\n    \ndef _find_min(arr):\n    '''\n    Write a python function to find the minimum value of an array.\n    '''\n    min = arr[0]\n    for x in arr:\n        if min > x:\n            min = x\n    return min\n    \ndef _remove_duplicates(arr):\n    '''\n    Write a python function to remove duplicates from an array.\n    '''\n    newarr = []\n    for x in arr:\n        if x not in newarr:\n            newarr.append(x)\n    return newarr\n    \ndef _get_subset(arr, num):\n    '''\n    Write a python function to return a random subset from an array.\n    '''\n    newarr = []\n    for x in arr:\n        if x in newarr:\n            pass\n        else:\n            newarr.append(x)\n    for x in range(num):\n        newarr.pop(random.randint(0, len(newarr)-1))\n    return newarr\n    \ndef _find_first(arr, num):\n    '''\n    Write a python function to find the first instance of a number in an array.\n    '''\n    for x in arr:\n        if x == num:\n            return True\n    return False\n    \ndef _find_last(arr, num):\n    '''\n    Write a python function to find the last instance of a number in an array.\n    '''\n    for x in reversed(arr):\n        if x == num:\n            return True\n    return False\n    \ndef _test_first(arr):\n    '''\n    Write a python function to find the first instance of a number in an array.\n    '''\n    for x in arr:\n        if x == 1:\n            return True\n    return False\n    \ndef _test_last(arr):\n    '''\n    Write a python function to find the last instance of a number in an array.\n    '''\n    for x in reversed(arr):\n        if x == 1:\n            return True\n    return False\n    \ndef _test_sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for x in arr:\n        total += x\n    return total\n    \ndef _test_remove_evens(arr):\n    '''\n    Write a python function to remove all even numbers from a list of integers.\n    '''\n    total = 0\n    for x in arr:\n        if x % 2!= 0:\n            total += x\n    return total\n    \ndef _test_find_max(arr):\n    '''\n    Write a python function to find the maximum value of an array.\n    '''\n    max = arr[0]\n    for x in arr:\n        if max < x:\n            max = x\n    return max\n    \ndef _test_find_min(arr):\n    '''\n    Write a python function to find the minimum value of an array.\n    '''\n    min = arr[0]\n    for x in arr:\n        if min > x:\n            min = x\n    return min\n    \ndef _test_remove_duplicates(arr):\n    '''\n    Write a python function to remove duplicates from an array.\n    '''\n    newarr = []\n    for x in arr:\n        if x not in newarr:\n            newarr.append(x)\n    return newarr\n    \ndef _test_get_subset(arr, num):\n    '''\n    Write a python function to return a random subset from an array.\n    '''\n    newarr = []\n    for x in arr:\n        if x in newarr:\n            pass\n        else:\n            newarr.append(x)\n    for x in range(num):\n        newarr.pop(random.randint(0, len(newarr)-1))\n    return newarr\n    \ndef _test_find_first(arr, num):\n    '''\n    Write a python function to find the first instance of a number in an array.\n    '''\n    for x in arr:\n        if x == num:\n            return True\n    return False\n    \ndef _test_find_last(arr, num):\n    '''\n    Write a python function to find the last instance of a number in an array.\n    '''\n    for x in reversed(arr):\n        if x == num:\n            return True\n    return False\n    \ndef _read_input(file):\n    '''\n    Write a python function to read from a text file and store it into a list.\n    '''\n    arr = []\n    infile = open(file, 'r')\n    for x in infile:\n        arr.append(x.strip())\n    infile.close()\n    return arr\n    \ndef _print_menu(string):\n    '''\n    Write a python function to print a menu out.\n    '''\n    print(string)\n    \ndef _clear_screen():\n    '''\n    Write a python function to clear the screen.\n    '''\n    os.system('cls' if os.name == 'nt' else 'clear')\n    \ndef _get_user_input(string, type, default):\n    '''\n    Write a python function to get a user input from the console.\n    '''\n    try:\n        if type == 'int':\n            x = int(input(string))\n        elif type =='str':\n            x = input(string)\n        elif type == 'bool':\n            if default:\n                x = input(string)\n            else:\n                x = input('[Y/n]'+ string)\n                x = x.lower()\n                if x == 'y':\n                    x = True\n                else:\n                    x = False\n        return x\n    except:\n        return default\n    \ndef _print_arr(arr):\n    '''\n    Write a python function to print an array in a tabular format.\n    '''\n    for x in arr:\n        print(x)\n    \ndef _dict_from_array(arr):\n    '''\n    Write a python function to convert an array into a dictionary.\n    '''\n    newdict = {}\n    for x in arr:\n        newdict[x] = 1\n    return newdict\n    \ndef _dict_from_file(file):\n    '''\n    Write a python function to convert a text file into a dictionary.\n    '''\n    newdict = {}\n    infile = open(file, 'r')\n    for line in infile:\n        line = line.strip().split(',')\n        newdict[line[0]] = line[1]\n    infile.close()\n    return newdict\n    \ndef _dict_from_file_ignore_duplicates(file):\n    '''\n    Write a python function to convert a text file into a dictionary.\n    '''\n    newdict = {}\n    infile = open(file, 'r')\n    for line in infile:\n        line = line.strip()\n        if line not in newdict.keys():\n            newdict[line] = 1\n    infile.close()\n    return newdict\n    \ndef _dict_to_file(dict, file):\n    '''\n    Write a python function to convert a dictionary into a text file.\n    '''\n    outfile = open(file, 'w')\n    for key in dict:\n        outfile.write(key + ',' + dict[key] + '\\n')\n    outfile.close()\n    \ndef _dict_to_list(dict):\n    '''\n    Write a python function to convert a dictionary into a list.\n    '''\n    outlist = []\n    for key in dict:\n        outlist.append([key, dict[key]])\n    return outlist\n    \ndef _lis"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d == 32:\n        return n\n    else:\n        return (n << d) | (n >> (32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32-d))) & 0xffffffff\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d | n >> 32 - d) & 0xffffffff \n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask=0xFFFFFFFF\n    return (n<<d|n>>(32-d))&mask\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n<<d)|(n>>(32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d | n >> 32 - d) & 0xffffffff\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d | n >> (32-d)) & 0xffffffff\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n<<d | (n>>(32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = (n << d) | (n >> (32 - d))\n    return n\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    #remove_all_spaces = re.sub(' ', '', text)\n    remove_all_spaces = re.sub('\\s+', '', text)\n    return remove_all_spaces\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    \n    #return re.sub(r'\\s+','',text)\n    return ''.join(text.split())\ndef check_if_lst_is_sorted(lst):\n    '''\n    Write a function to check if a list is sorted or not. \n    '''\n    \n    if len(lst) < 2:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    if lst[0] < lst[1]:\n        return check_if_lst_is_sorted(lst[1:])\n    return True\ndef reverse_and_check_if_lst_is_sorted(lst):\n    '''\n    Write a function to reverse a list and check if the list is sorted.\n    '''\n    \n    lst.reverse()\n    return check_if_lst_is_sorted(lst)\ndef find_max_occurence(text, word):\n    '''\n    Write a function to find the maximum occurence of a word in a text.\n    '''\n    \n    return text.count(word)\ndef find_all_occurences_of_a_word(text, word):\n    '''\n    Write a function to find all occurences of a word in a text.\n    '''\n    \n    lst = [i for i,char in enumerate(text) if char == word]\n    return lst\ndef is_palindrome(text):\n    '''\n    Write a function to check if a text is a palindrome.\n    '''\n    \n    return text == text[::-1]\ndef permute(n):\n    '''\n    Write a function to permute a given string.\n    '''\n    \n    if len(n) == 1:\n        return [n]\n    else:\n        lst = []\n        for i,char in enumerate(n):\n            for j in permute(n[:i]+n[i+1:]):\n                lst.append(char+j)\n        return lst\ndef main():\n    \n    text = 'The quick brown fox jumped over the lazy dog'\n    \n    #removing whitespaces\n    print remove_all_spaces(text)\n    \n    #check if list is sorted\n    lst = [1,2,3,4,5]\n    print check_if_lst_is_sorted(lst)\n    \n    #reverse and check if lst is sorted\n    lst = [3,2,1]\n    print reverse_and_check_if_lst_is_sorted(lst)\n    \n    #find max occurence\n    print find_max_occurence(text, 'fox')\n    \n    #find all occurences of a word\n    print find_all_occurences_of_a_word(text, 'fox')\n    \n    #check if a text is a palindrome\n    print is_palindrome(text)\n    \n    #permute a string\n    print permute('abc')\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return ''.join(text.split())\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('[\\s]+')\n    return pattern.sub('', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub('\\s+','',text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile(r'[\\s]+')\n    return re.sub(pattern, '', text)\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y and y == z:\n        return 3\n    elif x == y or y == z or z == x:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        return 3\n    elif x==y or y==z or x==z:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in x:\n        if i == y:\n            count += 1\n        elif i == z:\n            count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in [x,y,z]:\n        if i==x:\n            count+=1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y and x==z and y==z:\n        return 3\n    elif x==y or x==z or y==z:\n        return 2\n    else:\n        return 0\ndef test_four_equal(x,y,z,u):\n    '''\n    Write a python function to count the number of equal numbers from four given integers.\n    '''\n    if x==y and x==z and x==u and y==z and y==u and z==u:\n        return 4\n    elif x==y or x==z or x==u or y==z or y==u or z==u:\n        return 3\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return (x==y and y==z)\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return(x+y+z)\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return z if x == y == z else y if x == y else x if x == z else z\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    \n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    if n == 1:\n        return 0\n    \n    start = 0\n    end = n - 1\n    \n    while start <= end:\n        mid = (start + end) / 2\n        \n        if mid < end and arr[mid] > arr[mid + 1]:\n            return mid + 1\n        \n        if mid > start and arr[mid] < arr[mid - 1]:\n            return mid\n        \n        if arr[start] < arr[mid]:\n            start = mid + 1\n        else:\n            end = mid - 1\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    arr = sorted(arr)\n    for i in range(len(arr)):\n        if(arr[i]!= arr[0]):\n            return i\n    return 0\n    \n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # count = 0\n    # for i in range(0,len(arr)):\n    #     for j in range(i+1,len(arr)):\n    #         if arr[i] < arr[j]:\n    #             count+=1\n    # return count\n    return len(arr) - binSearch(arr,0,len(arr)-1)\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    length = len(arr)\n    start = 0\n    end = length - 1\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) == 1:\n        return 0\n    rotation = 0\n    for i in range(1,len(arr)):\n        if arr[i] < arr[i-1]:\n            rotation += 1\n    return rotation\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    def find_rotation(arr):\n        i = 0\n        j = len(arr) - 1\n        while i < j:\n            if arr[j] > arr[i]:\n                return j\n            if arr[j] < arr[i]:\n                return i\n            i += 1\n            j -= 1\n        return None\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    low, high = 0, len(arr)-1\n    while low < high:\n        mid = (low+high)//2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        elif arr[mid] < arr[high]:\n            high = mid\n        else:\n            high = high - 1\n    return (low)\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if arr == []:\n        return 0\n    for i in range(len(arr)):\n        if arr[i]!= arr[0]:\n            return i\n    return -1\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) == 0:\n        return 0\n    min = arr[0]\n    max = arr[len(arr) - 1]\n    if min == max:\n        return 0\n    #print min, max\n    for i in range(len(arr)):\n        if arr[i] < min:\n            min = arr[i]\n        if arr[i] > max:\n            max = arr[i]\n    #print min, max\n    if min > max:\n        return 0\n    else:\n        low = 0\n        high = len(arr) - 1\n        while low <= high:\n            mid = (low + high)/2\n            if arr[mid] > min and arr[mid] < max:\n                return mid - 1\n            elif arr[mid] < min:\n                high = mid - 1\n            elif arr[mid] > max:\n                low = mid + 1\n        return high + 1\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    rotations = 0\n    for i in range(len(arr)):\n        if arr[i] < arr[i-1]:\n            rotations += 1\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n<0) : \n        return False\n    else:\n        return (int(math.sqrt(n)) == math.sqrt(n) )\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Corner cases\n    if (n < 0) :\n        return False\n    if (n == 0) :\n        return True\n    if (n == 1) :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # check if the given number is integer\n    if n == 0:\n        return True\n    x = n/2\n    if x*x == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n\n    y = 1\n    while (y*y <= x) :\n        y += 1\n    if (y*y == x) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n < 0) :\n        return False\n    if (n == 0 or n == 1):\n        return True\n    m = n // 2\n    while (m * m > n) :\n        if (n == m * m) :\n            return True\n        m = m - 1\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n\n    if (n<0) :\n        return -1;\n    else :\n        # Iterate till the square of the number is less than n\n        while (x * x < n) :\n            x = x + 1\n        # If number is perfect square\n        if (x * x == n) :\n            return 1\n        else :\n            return 0\ndef is_perfect_square_2(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n\n    if (n<0) :\n        return -1;\n    else :\n        # Iterate till the square of the number is less than n\n        while (x * x > n) :\n            x = x - 1\n        # If number is perfect square\n        if (x * x == n) :\n            return 1\n        else :\n            return 0\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n\n    y = (x + 1) // 2\n    while(y * y > x):\n        x = y\n        y = (x + 1) // 2\n    return x * x == n\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return n >= 0 and int(math.sqrt(n)) ** 2 == n\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Compute the divisors\n    divisors = set()\n    x = int(math.sqrt(n))\n    for i in range(1, x + 1) :\n        if n % i == 0 :\n            divisors.add(i)\n            divisors.add(int(n / i))\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt = n\n    if(n < 0) :\n        return False\n    elif(n == 0 or n == 1):\n        return True\n    else :\n        while(sqrt*sqrt > n):\n            sqrt = sqrt - 1\n        if(sqrt*sqrt == n) :\n            return True\n        else :\n            return False\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    p = 1\n    for num in arr:\n        p *= num\n    return p % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return reduce(lambda x, y: x * y, arr) % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return reduce(lambda a,b: a*b, arr) % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # O(n) time complexity\n    total = 1\n    for x in arr:\n        total *= x\n    return total % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return reduce(lambda x, y: x * y, arr) % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for n in arr:\n        product *= n\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return reduce(lambda x, y: x * y, arr) % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = product * arr[i]\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    num_prod = 1\n    for i in arr:\n        num_prod *= i\n    return num_prod % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product = product*num\n    return not product%2\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    def max_sum_helper(lists):\n        if len(lists) == 1:\n            return lists[0]\n        else:\n            return max_sum_helper(lists[:1]) + max_sum_helper(lists[1:])\n    \n    return max_sum_helper(lists)\n    \ndef max_sum_str(strs):\n    '''\n    Write a function that returns the word in a list of strings with the highest sum of characters.\n    '''\n    \n    def max_sum_helper(strs):\n        if len(strs) == 1:\n            return strs[0]\n        else:\n            return max_sum_helper(strs[:1]) + max_sum_helper(strs[1:])\n    \n    return max_sum_helper(strs)\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return [max(lists, key=sum)]\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_sum_list = []\n    for i in lists:\n        if sum(i) > max_sum:\n            max_sum = sum(i)\n            max_sum_list = i\n    return max_sum_list\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return [max(i) for i in zip(*lists)]\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    l = len(lists)\n    if l == 1:\n        return lists[0]\n    else:\n        return max_sum_list([max_sum_list(lists[:i]) + max_sum_list(lists[i:]) for i in range(1, l)])\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    max_sum_list = lists[0]\n    \n    for i in range(1,len(lists)):\n        for j in range(len(lists[i])):\n            if sum(lists[i]) > sum(max_sum_list):\n                max_sum_list = lists[i]\n    \n    return max_sum_list\n    \n    \n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    # if len(lists) == 0:\n    #     return None\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_list = l\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max(lists, key=sum)\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # pass\n    return len(max(re.findall('[A-Z]+', test_str), key=len))\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    max_run = 0\n    start = 0\n    end = 0\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    for i in range(len(test_str)):\n        current = 1\n        for j in range(i,len(test_str)):\n            if ord(test_str[j]) >= 65:\n                current += 1\n            else:\n                break\n        if current > max_run:\n            max_run = current\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    maximum_run = 0\n    index = 0\n    cur_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            cur_run += 1\n        else:\n            index = max(index, cur_run)\n            cur_run = 0\n    index = max(index, cur_run)\n    return index\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    i = 0\n    while i < len(test_str):\n        count = 1\n        while i < len(test_str) - 1 and test_str[i].isupper() and test_str[i+1].isupper():\n            i += 1\n            count += 1\n        if count > max_run:\n            max_run = count\n        i += 1\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] >= 'A' and test_str[i] <= 'Z':\n            count += 1\n        else:\n            count = 0\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run, cur_run = 0, 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            cur_run += 1\n        else:\n            max_run = max(max_run, cur_run)\n            cur_run = 0\n    return max(max_run, cur_run)\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    return max([len(list(g)) for k, g in groupby(test_str) if k.isupper()])\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    # start from left and right of string\n    for i in range(len(test_str)):\n        # add 1 for every uppercase character\n        curr_run = 1 + sum(1 for c in test_str[i:] if c.isupper())\n        # update max run\n        max_run = max(curr_run, max_run)\n    return max_run\n    \nif __name__ == '__main__':\n    print max_run_uppercase(\"ABBDABBA\") # 4\n    print max_run_uppercase(\"aAbBy\") # 3\n    print max_run_uppercase(\"aBb\") # 2"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count, count = 0, 0\n    for letter in test_str:\n        if letter.isupper():\n            count += 1\n        else:\n            count = 0\n        max_count = max(max_count, count)\n    return max_count\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for n in nums:\n        if n % 2 == 1:\n            return n\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!=0:\n            return i\n    return None\n    \n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n        else:\n            continue\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    \n    for i in nums:\n        if i%2==1:\n            return i\n        else:\n            continue\n    \n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return next((x for x in nums if x%2), None)\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!=0:\n            return i\n    return None\nprint(first_odd([1,2,3,4,5,6]))\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # i = 0\n    # while i < len(nums):\n    #     if nums[i] % 2 == 1:\n    #         return nums[i]\n    #     i = i + 1\n    # return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return None\n    else:\n        for i in range(len(nums)):\n            if nums[i]%2==1:\n                return nums[i]\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return test_tup[K] == 1\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    test_tup1 = test_tup[0]\n    test_tup2 = test_tup[1]\n    return K[test_tup1][test_tup2]\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    cnt = 0\n    for t in test_tup:\n        if t[0] == K:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] in K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if(test_tup[2]==K):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return len(test_tup[1]) >= K\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return len(set(test_tup[0]) & set(test_tup[1])) >= K\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # Write your code here\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # get the tuples from test_tup\n    test_list = [test_tup[0][0], test_tup[0][1], test_tup[0][2]]\n    # loop over the tuples\n    for i in range(1, len(test_tup)):\n        for j in range(len(test_list)):\n            if test_list[j] == test_tup[i][j]:\n                continue\n            else:\n                # if not equal, return false\n                return False\n    # if all tuple elements are equal to K, return true\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return [a < b for a, b in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    flag = True\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            flag = False\n    return flag\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return (test_tup2[0] < test_tup1[0]) and (test_tup2[1] < test_tup1[1])\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    assert type(test_tup1) is tuple\n    assert type(test_tup2) is tuple\n    assert len(test_tup1) == len(test_tup2)\n    if len(test_tup1) == 0:\n        return False\n    if len(test_tup1) == 1:\n        return test_tup1[0] > test_tup2[0]\n    return test_tup1[0] > test_tup2[0] and check_smaller(test_tup1[1:], test_tup2[1:])\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        if elem2 > elem1:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return (test_tup1[0] < test_tup2[0]) and (test_tup1[1] < test_tup2[1])\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    \n    for i in range(len(test_tup1)):\n        if test_tup2[i] > test_tup1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return [test_tup2[i] < test_tup1[i] for i in range(len(test_tup1))]\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return not all(a <= b for a, b in zip(test_tup1, test_tup2))\n    "
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for (x,y) in zip(test_tup1, test_tup2):\n        if x > y:\n            return False\n    return True\n"
    }
]