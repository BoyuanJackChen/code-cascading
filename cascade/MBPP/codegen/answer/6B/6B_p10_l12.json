[
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return sorted(list(set(test_tup1) & set(test_tup2)))\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #test_tup1 = (1, 2, 3, 4, 5)\n    #test_tup2 = (2, 1, 4, 3, 5)\n    #this should return (4, 3)\n    return [element for element in test_tup1 if element in test_tup2]\n    \ndef remove_element(test_list, val):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    #test_list = [1, 2, 3, 4, 5]\n    #val = 4\n    #this should return [1, 2, 3, 5]\n    return [element for element in test_list if element!= val]\n    \ndef remove_element_2(test_list, val):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    #test_list = [1, 2, 3, 4, 5]\n    #val = 4\n    #this should return [1, 2, 3, 5]\n    return [element for element in test_list if element!= val]\n    \ndef remove_element_3(test_list, val):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    #test_list = [1, 2, 3, 4, 5]\n    #val = 4\n    #this should return [1, 2, 3, 5]\n    return [element for element in test_list if element!= val]\n    \ndef remove_element_4(test_list, val):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    #test_list = [1, 2, 3, 4, 5]\n    #val = 4\n    #this should return [1, 2, 3, 5]\n    return [element for element in test_list if element!= val]\n    \ndef remove_element_5(test_list, val):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    #test_list = [1, 2, 3, 4, 5]\n    #val = 4\n    #this should return [1, 2, 3, 5]\n    return [element for element in test_list if element!= val]\n    \ndef reverse_list(test_list):\n    '''\n    Write a function to reverse a list.\n    '''\n    #test_list = [1, 2, 3, 4, 5]\n    #this should return [5, 4, 3, 2, 1]\n    return [element for element in test_list[::-1]]\n    \ndef reverse_list_2(test_list):\n    '''\n    Write a function to reverse a list.\n    '''\n    #test_list = [1, 2, 3, 4, 5]\n    #this should return [5, 4, 3, 2, 1]\n    return test_list[::-1]\n    \ndef list_comprehension(test_list):\n    '''\n    Write a function to return the elements at even index.\n    '''\n    #test_list = [1, 2, 3, 4, 5]\n    #this should return [2, 4]\n    return [element for i, element in enumerate(test_list) if i % 2 == 0]\n    \ndef list_comprehension_2(test_list):\n    '''\n    Write a function to return the elements at even index.\n    '''\n    #test_list = [1, 2, 3, 4, 5]\n    #this should return [2, 4]\n    return [element for i, element in enumerate(test_list) if i % 2 == 0]\n    \ndef count_occurences(test_list):\n    '''\n    Write a function to return the elements at even index.\n    '''\n    #test_list = [1, 2, 3, 4, 5]\n    #this should return [2, 4]\n    return [element for element in test_list if test_list.count(element) > 1]\n    \ndef count_occurences_2(test_list):\n    '''\n    Write a function to return the elements at even index.\n    '''\n    #test_list = [1, 2, 3, 4, 5]\n    #this should return [2, 4]\n    return [element for element in test_list if test_list.count(element) > 1]\n    \ndef list_insert(test_list):\n    '''\n    Write a function to add an element to the end of a list.\n    '''\n    #test_list = [1, 2, 3, 4, 5]\n    #this should return [1, 2, 3, 4, 5, 6]\n    return test_list + [6]\n    \ndef list_insert_2(test_list):\n    '''\n    Write a function to add an element to the end of a list.\n    '''\n    #test_list = [1, 2, 3, 4, 5]\n    #this should return [1, 2, 3, 4, 5, 6]\n    return [element for i, element in enumerate(test_list) if i == len(test_list) - 1] + [6]\n    \ndef get_average(test_list):\n    '''\n    Write a function to return the average of the elements of a list.\n    '''\n    #test_list = [1, 2, 3, 4, 5]\n    #this should return 3\n    return sum(test_list) / len(test_list)\n    \ndef get_average_2(test_list):\n    '''\n    Write a function to return the average of the elements of a list.\n    '''\n    #test_list = [1, 2, 3, 4, 5]\n    #this should return 3\n    return sum(test_list) / len(test_list)\n    \ndef list_append(test_list):\n    '''\n    Write a function to append an element to the end of a list.\n    '''\n    #test_list = [1, 2, 3, 4, 5]\n    #this should return [1, 2, 3, 4, 5, 6]\n    return test_list + [6]\n    \ndef list_insert_3(test_list):\n    '''\n    Write a function to insert an element at a specific index.\n    '''\n    #test_list = [1, 2, 3, 4, 5]\n    #this should return [1, 2, 4, 5]\n    return test_list[:2] + [6] + test_list[2:]\n    \ndef list_insert_4(test_list):\n    '''\n    Write a function to insert an element at a specific index.\n    '''\n    #test_list = [1, 2, 3, 4, 5]\n    #this should return [1, 2, 4, 5]\n    return [element for i, element in enumerate(test_list) if i == len(test_list) - 1] + [6]\n    \ndef get_sum_of_list(test_list):\n    '''\n    Write a function to return the sum of all elements in a list.\n    '''\n    #test_list = [1, 2, 3, 4, 5]\n    #this should return 15\n    return sum(test_list)\n    \ndef get_sum_of_list_2(test_list):\n    '''\n    Write a function to return the sum of all elements in a list.\n    '''\n    #test_list = [1, 2, 3, 4, 5]\n    #this should return 15\n    return sum([element for element in test_list])\n    \ndef get_max_element(test_list):\n    '''\n    Write a function to return the maximum element of a list.\n    '''\n    #test_list = [1, 2, 3, 4, 5]\n    #this should return 5\n    return max(test_list)\n    \ndef get_max_element_2(test_list):\n    '''\n    Write a function to return the maximum element of a list.\n    '''\n    #test_list = [1, 2, 3, 4, 5]\n    #this should return 5\n    return max(element for element in test_list)\n    \ndef get_max_element_3(test_list):\n    '''\n    Write a function to return the maximum element of a list.\n    ''"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = [element for element in test_tup1 if element in test_tup2]\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    x = 0\n    for i in test_tup1:\n        if i in test_tup2:\n            x += 1\n    return x\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    common_elements = set(test_tup1) & set(test_tup2)\n    return common_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            shared_list.append(test_tup1[i])\n    return shared_list\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    list_1 = test_tup1[0]\n    list_2 = test_tup2[0]\n    shared_elements = []\n    for element in list_1:\n        if element in list_2:\n            shared_elements.append(element)\n    return shared_elements\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<2:\n        return True\n    if n==2:\n        return False\n    if n%2==0:\n        return True\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n%i==0:\n            return True\n    return False\ndef prime_permutations(n):\n    '''\n    Write a python function to identify prime permutations of a number.\n    '''\n    if is_not_prime(n):\n        return None\n    import itertools\n    l = list(itertools.permutations(str(n)))\n    if len(l)==0:\n        return None\n    for i in l:\n        if is_not_prime(int(''.join(i))):\n            return int(''.join(i))\ndef divisors(n):\n    '''\n    Write a python function to find all divisors of a number.\n    '''\n    if n<=1:\n        return [1]\n    i = 2\n    while n>1:\n        if n%i==0:\n            n = n/i\n            yield i\n        i = i+1\ndef prime_divisors(n):\n    '''\n    Write a python function to find all prime divisors of a number.\n    '''\n    if is_not_prime(n):\n        return None\n    for i in divisors(n):\n        if is_not_prime(i):\n            yield i\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    n_sqrt = math.sqrt(n)\n    for i in range(2, int(n_sqrt)):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n%2==0 and n!=2:\n        return True\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i==0:\n                return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<=1:\n        return False\n    if n<=3:\n        return True\n    if n%2==0 or n%3==0:\n        return False\n    sq=int(math.sqrt(n))+1\n    for i in range(5,sq,2):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    sqrt_n = math.floor(math.sqrt(n))\n    for i in range(2,sqrt_n+1):\n        if n % i == 0:\n            return True\n    return False\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 1:\n        return False\n    sqrt_n = math.floor(math.sqrt(n))\n    for i in range(2,sqrt_n+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<2:\n        return True\n    else:\n        for i in range(2,n):\n            if n%i==0:\n                return True\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    #n = int(raw_input(\"Enter any number: \"))\n    #a = 1\n    #if n <= 1:\n    #    print n, \"is not a prime number\"\n    #else:\n    #    for i in range(2,n):\n    #        if n%i == 0:\n    #            a = 0\n    #            break\n    #    if a == 1:\n    #        print n, \"is a prime number\"\n    #    else:\n    #        print n, \"is not a prime number\"\n    #input()\n    #print is_not_prime(n)\n    #n = int(raw_input(\"Enter any number: \"))\n    #def is_prime(n):\n    #    if n<=1:\n    #        return False\n    #    elif n==2:\n    #        return True\n    #    elif n>2:\n    #        for i in range(2,n):\n    #            if n%i == 0:\n    #                return False\n    #    return True\n    #if is_prime(n):\n    #    print n, \"is a prime number\"\n    #else:\n    #    print n, \"is not a prime number\"\n    #input()\n    #print is_prime(n)\n    def is_prime(n):\n        '''\n        Write a python function to identify prime numbers.\n        '''\n        #n = int(raw_input(\"Enter any number: \"))\n        if n<=1:\n            return False\n        elif n==2:\n            return True\n        elif n>2:\n            for i in range(2,n):\n                if n%i == 0:\n                    return False\n            return True\n    print is_prime(n)\n    input()\ndef factorial(n):\n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    #n = int(raw_input(\"Enter any number: \"))\n    a = 1\n    for i in range(1,n+1):\n        a = a*i\n    print \"The factorial of\", n, \"is\", a\n    #input()\n    print factorial(n)\n    input()\ndef fibonacci(n):\n    '''\n    Write a python function to calculate the nth fibonacci number.\n    '''\n    #n = int(raw_input(\"Enter any number: \"))\n    a = 0\n    b = 1\n    for i in range(n-1):\n        c = a+b\n        a = b\n        b = c\n    print a\n    #input()\n    print fibonacci(n)\n    input()\ndef is_perfect(n):\n    '''\n    Write a python function to calculate the sum of proper divisors of a given number.\n    '''\n    #n = int(raw_input(\"Enter any number: \"))\n    s = 0\n    for i in range(1,n):\n        if n%i == 0:\n            s = s+i\n    if s == n:\n        print n, \"is a perfect number\"\n    else:\n        print n, \"is not a perfect number\"\n    input()\n    print is_perfect(n)\n    input()\ndef sum_of_divisors(n):\n    '''\n    Write a python function to calculate the sum of divisors of a given number.\n    '''\n    #n = int(raw_input(\"Enter any number: \"))\n    s = 0\n    for i in range(1,n):\n        if n%i == 0:\n            s = s+i\n    print s\n    input()\n    print sum_of_divisors(n)\n    input()\ndef sum_of_divisors(n):\n    '''\n    Write a python function to calculate the sum of divisors of a given number.\n    '''\n    #n = int(raw_input(\"Enter any number: \"))\n    s = 1\n    for i in range(1,n):\n        if n%i == 0:\n            s = s+i\n    print s\n    input()\n    print sum_of_divisors(n)\n    input()\ndef power(a,b):\n    '''\n    Write a python function to calculate the power of a number.\n    '''\n    #a = int(raw_input(\"Enter a number: \"))\n    #b = int(raw_input(\"Enter a number: \"))\n    c = a\n    for i in range(b-1):\n        a = a*c\n    print a\n    input()\n    print power(a,b)\n    input()\ndef power(a,b):\n    '''\n    Write a python function to calculate the power of a number.\n    '''\n    #a = int(raw_input(\"Enter a number: \"))\n    #b = int(raw_input(\"Enter a number: \"))\n    c = a\n    for i in range(b-1):\n        a = a*c\n    print a\n    input()\n    print power(a,b)\n    input()\ndef power(a,b):\n    '''\n    Write a python function to calculate the power of a number.\n    '''\n    #a = int(raw_input(\"Enter a number: \"))\n    #b = int(raw_input(\"Enter a number: \"))\n    c = a\n    for i in range(b-1):\n        a = a*c\n    print a\n    input()\n    print power(a,b)\n    input()\ndef power(a,b):\n    '''\n    Write a python function to calculate the power of a number.\n    '''\n    #a = int(raw_input(\"Enter a number: \"))\n    #b = int(raw_input(\"Enter a number: \"))\n    c = a\n    for i in range(b-1):\n        a = a*c\n    print a\n    input()\n    print power(a,b)\n    input()\ndef power(a,b):\n    '''\n    Write a python function to calculate the power of a number.\n    '''\n    #a = int(raw_input(\"Enter a number: \"))\n    #b = int(raw_input(\"Enter a number: \"))\n    c = a\n    for i in range(b-1):\n        a = a*c\n    print a\n    input()\n    print power(a,b)\n    input()\ndef is_anagram(a,b):\n    '''\n    Write a python function to identify whether two strings are anagrams or not.\n    '''\n    #a = str(raw_input(\"Enter a string: \"))\n    #b = str(raw_input(\"Enter a string: \"))\n    a1 = []\n    b1 = []\n    for i in a:\n        a1.append(i)\n    for i in b:\n        b1.append(i)\n    if a1 == b1:\n        print \"The strings are anagrams\"\n    else:\n        print \"The strings are not anagrams\"\n    input()\n    print is_anagram(a,b)\n    input()\ndef is_anagram(a,b):\n    '''\n    Write a python function to identify whether two strings are anagrams or not.\n    '''\n    #a = str(raw_input(\"Enter a string: \"))\n    #b = str(raw_input(\"Enter a string: \"))\n    a1 = []\n    b1 = []\n    for i in a:\n        a1.append(i)\n    for i in b:\n        b1.append(i)\n    if a1 == b1:\n        print \"The strings are anagrams\"\n    else:\n        print \"The strings are not anagrams\"\n    input()\n    print is_anagram(a,b)\n    input()\ndef is_anagram(a,b):\n    '''\n    Write a python function to identify whether two strings are anagrams or not.\n    '''\n    #a = str(raw_input(\"Enter a string: \"))\n    #b = str(raw_input(\"Enter a string: \"))\n    a1 = []\n    b1 = []\n    for i in a:\n        a1.append(i)\n    for i in b:\n        b1.append(i)\n    if a1 == b1:\n        print \"The strings are a"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    \n    if n == 2:\n        return False\n    elif n%2 == 0:\n        return True\n    elif n > 2:\n        for i in range(3, n, 2):\n            if n%i == 0:\n                return True\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    return n%2==0 and 3<n<int(math.sqrt(n))\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n > len(nums):\n        raise ValueError('The number of elements in the list cannot be less than the size of the heap')\n    else:\n        heap=[]\n        for num in nums:\n            hq.heappush(heap,-num)\n        for i in range(n):\n            hq.heappop(heap)\n        return [-x for x in heap]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq=[]\n    for i in nums:\n        hq.append(i)\n        hq.sort()\n    return hq[-n:]\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq=[]\n    for i in nums:\n        hq.append(i)\n        hq.sort(reverse=True)\n    return hq[:n]\ndef heap_sort(nums):\n    '''\n    Write a function that takes in an array of integers and returns a new array in which the elements of the input array are rearranged \n    into descending order. Do this without using the sort() function or any other inbuilt sort method.\n    '''\n    heapq.heapify(nums)\n    return [heapq.heappop(nums) for i in range(len(nums))]\ndef heap_sort2(nums):\n    '''\n    Write a function that takes in an array of integers and returns a new array in which the elements of the input array are rearranged \n    into descending order. Do this without using the sort() function or any other inbuilt sort method.\n    '''\n    hq=[]\n    for i in nums:\n        hq.append(i)\n    hq.sort()\n    return hq\ndef heap_sort3(nums):\n    '''\n    Write a function that takes in an array of integers and returns a new array in which the elements of the input array are rearranged \n    into descending order. Do this without using the sort() function or any other inbuilt sort method.\n    '''\n    hq=[]\n    for i in nums:\n        hq.append(i)\n    return sorted(hq,reverse=True)\ndef bin_search(nums,x,key):\n    '''\n    Write a function that takes in a sorted array of integers and a key integer and returns the index of the key integer in the array. \n    The function should return -1 if the key is not found in the array.\n    '''\n    l=len(nums)\n    if l==0:\n        return -1\n    if key==nums[l//2]:\n        return l//2\n    if key>nums[l//2]:\n        return bin_search(nums[l//2+1:],key,key)\n    else:\n        return bin_search(nums[:l//2],key,key)\ndef bin_search2(nums,x,key):\n    '''\n    Write a function that takes in a sorted array of integers and a key integer and returns the index of the key integer in the array. \n    The function should return -1 if the key is not found in the array.\n    '''\n    l=len(nums)\n    if l==0:\n        return -1\n    if key==nums[l//2]:\n        return l//2\n    if key<nums[l//2]:\n        return bin_search2(nums[:l//2],key,key)\n    else:\n        return bin_search2(nums[l//2+1:],key,key)\ndef get_root(nums,key):\n    '''\n    Write a function that takes in a sorted array of integers and a key integer and returns the index of the key integer in the array. \n    The function should return -1 if the key is not found in the array.\n    '''\n    l=len(nums)\n    if l==0:\n        return -1\n    if nums[l//2]>key:\n        return get_root(nums[:l//2],key)\n    elif nums[l//2]<key:\n        return get_root(nums[l//2+1:],key)\n    else:\n        return l//2\ndef is_pallindrome(s):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome, False otherwise.\n    A palindrome is a string that reads the same forwards as backwards. \n    An empty string is a palindrome.\n    '''\n    l=len(s)\n    if l==0:\n        return True\n    if s[0]!=s[l-1]:\n        return False\n    return is_pallindrome(s[1:l-1])\ndef is_pallindrome2(s):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome, False otherwise.\n    A palindrome is a string that reads the same forwards as backwards. \n    An empty string is a palindrome.\n    '''\n    l=len(s)\n    if l==0:\n        return True\n    if s[0]!=s[l-1]:\n        return False\n    return is_pallindrome2(s[1:l-1])\ndef is_pallindrome3(s):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome, False otherwise.\n    A palindrome is a string that reads the same forwards as backwards. \n    An empty string is a palindrome.\n    '''\n    l=len(s)\n    if l==0:\n        return True\n    if s[0]!=s[l-1]:\n        return False\n    if l<=2:\n        return True\n    return is_pallindrome3(s[1:l-1])\ndef is_pallindrome4(s):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome, False otherwise.\n    A palindrome is a string that reads the same forwards as backwards. \n    An empty string is a palindrome.\n    '''\n    l=len(s)\n    if l==0:\n        return True\n    if s[0]!=s[l-1]:\n        return False\n    if l<=2:\n        return True\n    return is_pallindrome4(s[1:l-1])\ndef is_pallindrome5(s):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome, False otherwise.\n    A palindrome is a string that reads the same forwards as backwards. \n    An empty string is a palindrome.\n    '''\n    l=len(s)\n    if l==0:\n        return True\n    if s[0]!=s[l-1]:\n        return False\n    if l<=2:\n        return True\n    return is_pallindrome5(s[1:l-1])\ndef is_pallindrome6(s):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome, False otherwise.\n    A palindrome is a string that reads the same forwards as backwards. \n    An empty string is a palindrome.\n    '''\n    l=len(s)\n    if l==0:\n        return True\n    if s[0]!=s[l-1]:\n        return False\n    if l<=2:\n        return True\n    return is_pallindrome6(s[1:l-1])\ndef is_pallindrome7(s):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome, False otherwise.\n    A palindrome is a string that reads the same forwards as backwards. \n    An empty string is a palindrome.\n    '''\n    l=len(s)\n    if l==0:\n        return True\n    if s[0]!=s[l-1]:\n        return False\n    if l<=2:\n        return True\n    return is_pallindrome7(s[1:l-1])\ndef is_pallindrome8(s):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome, False otherwise.\n    A palindrome is a string that reads the same forwards as backwards. \n    An empty string is a palindrome.\n    '''\n    l=len(s)\n    if l==0"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return [hq.heappop() for i in range(n)]\n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    return [hq.heappop() for i in range(n)]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap=[]\n    for i in range(n):\n        if len(max_heap)<n:\n            hq.heappush(max_heap,nums[i])\n        else:\n            if nums[i]<max_heap[0]:\n                hq.heappop(max_heap)\n                hq.heappush(max_heap,nums[i])\n    return max_heap\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    min_heap=[]\n    for i in range(n):\n        if len(min_heap)<n:\n            hq.heappush(min_heap,nums[i])\n        else:\n            if nums[i]>min_heap[0]:\n                hq.heappop(min_heap)\n                hq.heappush(min_heap,nums[i])\n    return min_heap\ndef max_heap_insert(nums,num):\n    '''\n    write a function to insert a number into a max heap\n    '''\n    hq.heappush(nums,num)\n    i=len(nums)-1\n    while i>0 and nums[(i-1)//2]<num:\n        nums[i],nums[(i-1)//2]=nums[(i-1)//2],nums[i]\n        i=(i-1)//2\ndef max_heap_delete(nums,num):\n    '''\n    write a function to delete a number from a max heap\n    '''\n    i=0\n    while i<len(nums) and nums[i]!=num:\n        nums[i],nums[-1]=nums[-1],nums[i]\n        i+=1\n        nums.pop()\n        if i<len(nums) and nums[i]<nums[(i-1)//2]:\n            nums[i],nums[(i-1)//2]=nums[(i-1)//2],nums[i]\n            i=(i-1)//2\ndef max_heap_increase_key(nums,num,new_num):\n    '''\n    write a function to increase the key of a number in the max heap\n    '''\n    max_heap_delete(nums,num)\n    max_heap_insert(nums,new_num)\ndef max_heap_decrease_key(nums,num,new_num):\n    '''\n    write a function to decrease the key of a number in the max heap\n    '''\n    max_heap_insert(nums,num)\n    max_heap_delete(nums,new_num)\ndef min_heap_insert(nums,num):\n    '''\n    write a function to insert a number into a min heap\n    '''\n    hq.heappush(nums,num)\n    i=len(nums)-1\n    while i>0 and nums[(i-1)//2]>num:\n        nums[i],nums[(i-1)//2]=nums[(i-1)//2],nums[i]\n        i=(i-1)//2\ndef min_heap_delete(nums,num):\n    '''\n    write a function to delete a number from a min heap\n    '''\n    i=0\n    while i<len(nums) and nums[i]!=num:\n        nums[i],nums[-1]=nums[-1],nums[i]\n        i+=1\n        nums.pop()\n        if i<len(nums) and nums[i]>nums[(i-1)//2]:\n            nums[i],nums[(i-1)//2]=nums[(i-1)//2],nums[i]\n            i=(i-1)//2\ndef min_heap_increase_key(nums,num,new_num):\n    '''\n    write a function to increase the key of a number in the min heap\n    '''\n    min_heap_delete(nums,num)\n    min_heap_insert(nums,new_num)\ndef min_heap_decrease_key(nums,num,new_num):\n    '''\n    write a function to decrease the key of a number in the min heap\n    '''\n    min_heap_insert(nums,num)\n    min_heap_delete(nums,new_num)\ndef min_heap_build(nums):\n    '''\n    Write a function to build a min heap from the given list of numbers.\n    '''\n    for i in range(len(nums)//2,-1,-1):\n        min_heap_decrease_key(nums,nums[i],nums[0])\ndef max_heap_build(nums):\n    '''\n    Write a function to build a max heap from the given list of numbers.\n    '''\n    for i in range(len(nums)//2,-1,-1):\n        max_heap_increase_key(nums,nums[i],nums[0])\ndef heap_sort(nums):\n    '''\n    Write a function to sort a list of numbers using heap sort.\n    '''\n    for i in range(len(nums)//2,-1,-1):\n        min_heap_decrease_key(nums,nums[i],nums[0])\n    for i in range(len(nums)-1,-1,-1):\n        nums[0],nums[i]=nums[i],nums[0]\n        min_heap_decrease_key(nums,nums[i],nums[0])\ndef heap_sort_reverse(nums):\n    '''\n    Write a function to sort a list of numbers using heap sort in descending order.\n    '''\n    for i in range(len(nums)//2,-1,-1):\n        max_heap_increase_key(nums,nums[i],nums[0])\n    for i in range(len(nums)-1,-1,-1):\n        nums[0],nums[i]=nums[i],nums[0]\n        max_heap_increase_key(nums,nums[i],nums[0])\ndef quick_sort_partition(nums,low,high):\n    '''\n    Write a function to do quick sort partition.\n    '''\n    pivot=nums[high]\n    i=low\n    for j in range(low,high):\n        if nums[j]<=pivot:\n            nums[i],nums[j]=nums[j],nums[i]\n            i+=1\n    nums[i],nums[high]=nums[high],nums[i]\n    return i\ndef quick_sort(nums,low,high):\n    '''\n    Write a function to do quick sort.\n    '''\n    if low<high:\n        p=quick_sort_partition(nums,low,high)\n        quick_sort(nums,low,p-1)\n        quick_sort(nums,p+1,high)\ndef merge_sort(nums,low,high):\n    '''\n    Write a function to do merge sort.\n    '''\n    if low<high:\n        mid=(low+high)//2\n        merge_sort(nums,low,mid)\n        merge_sort(nums,mid+1,high)\n        i=j=k=0\n        while i<mid and j<high:\n            if nums[i]<nums[j]:\n                nums[k]=nums[i]\n                i+=1\n            else:\n                nums[k]=nums[j]\n                j+=1\n            k+=1\n        while i<mid:\n            nums[k]=nums[i]\n            i+=1\n            k+="
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n == 0:\n        return []\n    if n == len(nums):\n        return nums\n    res = []\n    n = min(n,len(nums))\n    hq = []\n    for i in range(n):\n        hq.append((-nums[i],i))\n    for i in range(n,len(nums)):\n        if -nums[i] > hq[0][0]:\n            hq.pop(0)\n            hq.append((-nums[i],i))\n    while len(hq) > 0:\n        res.append(-hq[0][0])\n        hq.pop(0)\n    return res\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return heapq.nlargest(n,nums)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    return [hq.heappop(heap) for i in range(n)]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # hq.heapify(nums)\n    heap=[]\n    for i in nums:\n        hq.heappush(heap,i)\n    for i in range(n):\n        print(hq.heappop(heap))\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    res=[]\n    for i in range(n):\n        res.append(hq.heappop(nums))\n    return res\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    res=[]\n    for i in range(n):\n        res.append(hq.heappop(nums))\n    return res\ndef heap_sort(nums):\n    '''\n    Write a function to sort the array using heapsort\n    '''\n    hq.heapify(nums)\n    res=[]\n    while(len(nums)!=0):\n        res.append(hq.heappop(nums))\n    return res\ndef bubble_sort(nums):\n    '''\n    Write a function to sort the array using bubblesort\n    '''\n    n=len(nums)\n    for i in range(n):\n        for j in range(n-i-1):\n            if(nums[j]>nums[j+1]):\n                nums[j],nums[j+1]=nums[j+1],nums[j]\n    return nums\ndef insertion_sort(nums):\n    '''\n    Write a function to sort the array using insertionsort\n    '''\n    n=len(nums)\n    for i in range(1,n):\n        key=nums[i]\n        j=i-1\n        while(j>=0 and nums[j]>key):\n            nums[j+1]=nums[j]\n            j-=1\n        nums[j+1]=key\n    return nums\ndef merge_sort(nums):\n    '''\n    Write a function to sort the array using mergesort\n    '''\n    n=len(nums)\n    if(n==1):\n        return nums\n    mid=n//2\n    l=merge_sort(nums[:mid])\n    r=merge_sort(nums[mid:])\n    res=[]\n    while(len(l)>0 and len(r)>0):\n        if(l[0]<r[0]):\n            res.append(l.pop(0))\n        else:\n            res.append(r.pop(0))\n    if(len(l)==0):\n        res=res+r\n    else:\n        res=res+l\n    return res\ndef quick_sort(nums):\n    '''\n    Write a function to sort the array using quicksort\n    '''\n    n=len(nums)\n    if(n<=1):\n        return nums\n    else:\n        pivot=nums[0]\n        left=[x for x in nums[1:] if x<=pivot]\n        right=[x for x in nums[1:] if x>pivot]\n        return quick_sort(left)+[pivot]+quick_sort(right)\ndef radix_sort(nums):\n    '''\n    Write a function to sort the array using radixsort\n    '''\n    max1=max(nums)\n    n=len(str(max1))\n    buckets=[[] for i in range(10)]\n    for num in nums:\n        buckets[(num//(10**(n-1)) % 10)].append(num)\n    for i in range(n):\n        buckets[i]=bubble_sort(buckets[i])\n    res=[]\n    for i in range(10):\n        res=res+buckets[i]\n    return res\ndef counting_sort(nums):\n    '''\n    Write a function to sort the array using counting sort\n    '''\n    max1=max(nums)\n    n=len(nums)\n    count=[0 for i in range(max1+1)]\n    for num in nums:\n        count[num]+=1\n    k=0\n    for i in range(max1+1):\n        for j in range(count[i]):\n            nums[k]=i\n            k+=1\n    return nums\ndef shell_sort(nums):\n    '''\n    Write a function to sort the array using shellsort\n    '''\n    n=len(nums)\n    gap=n//2\n    while(gap>0):\n        for i in range(gap,n):\n            temp=nums[i]\n            j=i\n            while(j>=gap and nums[j-gap]>temp):\n                nums[j]=nums[j-gap]\n                j-=gap\n            nums[j]=temp\n        gap=gap//2\n    return nums\ndef heap_sort(nums):\n    '''\n    Write a function to sort the array using heapsort\n    '''\n    hq.heapify(nums)\n    n=len(nums)\n    for i in range(n-1,-1,-1):\n        nums[0],nums[i]=nums[i],nums[0]\n        hq.heapify(nums[:i])\n    return nums\ndef heap_sort(nums):\n    '''\n    Write a function to sort the array using heapsort\n    '''\n    hq.heapify(nums)\n    n=len(nums)\n    for i in range(n-1,-1,-1):\n        nums[0],nums[i]=nums[i],nums[0]\n        hq.heapify(nums[:i])\n    return nums\ndef heap_sort(nums):\n    '''\n    Write a function to sort the array using heapsort\n    '''\n    hq.heapify(nums)\n    n=len(nums)\n    for i in range(n-1,-1,-1):\n        nums[0],nums[i]=nums[i],nums[0]\n        hq.heapify(nums[:i])\n    return nums\ndef heap_sort(nums):\n    '''\n    Write a function to sort the array using heapsort\n    '''\n    hq.heapify(nums)\n    n=len(nums)\n    for i in range(n-1,-1,-1):\n        nums[0],nums[i]=nums[i],nums[0]\n        hq.heapify(nums[:i])\n    return nums\ndef heap_sort(nums):\n    '''\n    Write a function to sort the array using heapsort\n    '''\n    hq.heapify(nums)\n    n=len(nums)\n    for i in range(n-1,-1,-1):\n        nums[0],nums[i]=nums[i],nums[0]\n        hq.heapify(nums[:i])\n    return nums\ndef heap_sort(nums):\n    '''\n    Write a function to sort the array using heapsort\n    '''\n    hq.heapify(nums)\n    n=len(nums)\n    for i in range(n-1,-1,-1):\n        nums[0],nums[i]=nums[i],nums[0]\n        hq.heapify(nums[:i])\n    return nums\ndef heap_sort(nums):\n    '''\n    Write a function to sort the array using heapsort\n    '''\n    hq.heapify(nums)\n    n=len(nums)\n    for i in range(n-1,-1,-1):\n        nums[0],nums[i]=nums[i],nums[0]\n        hq.heapify(nums[:i])\n    return nums\ndef heap_sort(nums):\n    '''\n    Write a function to sort the array using heapsort\n    '''\n    hq.heapify(nums)\n    n=len(nums)\n    for i in range(n-1,-1,-1):\n        nums"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]>heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[i])\n    return heap\ndef heapsort(nums):\n    '''\n    heapsort is a sorting algorithm that is similar to selection sort.\n    Time Complexity: O(n*lg(n))\n    '''\n    heap=[]\n    for i in nums:\n        hq.heappush(heap,i)\n    nums=[]\n    while heap:\n        nums.append(hq.heappop(heap))\n    return nums\ndef merge_sort(nums):\n    '''\n    Given a list of numbers, write a function to sort the list in ascending order.\n    '''\n    if len(nums)<2:\n        return nums\n    mid=len(nums)/2\n    left=merge_sort(nums[:mid])\n    right=merge_sort(nums[mid:])\n    return merge(left,right)\ndef merge(left,right):\n    i,j=0,0\n    res=[]\n    while i<len(left) and j<len(right):\n        if left[i]<=right[j]:\n            res.append(left[i])\n            i+=1\n        else:\n            res.append(right[j])\n            j+=1\n    res+=left[i:]\n    res+=right[j:]\n    return res\ndef find_duplicate(nums):\n    '''\n    Given a list of numbers, write a function to find if there is a duplicate number in the list.\n    '''\n    for i in range(len(nums)):\n        if nums[abs(nums[i])]<0:\n            return abs(nums[i])\n        nums[abs(nums[i])]*=-1\n    return -1\ndef find_missing_num(nums):\n    '''\n    Given a list of numbers, write a function to find the missing number in the list.\n    '''\n    i=0\n    while i<len(nums):\n        if nums[i]!=i:\n            nums[i],nums[nums[i]]=nums[nums[i]],nums[i]\n            i+=1\n        else:\n            i+=1\n    for i in range(len(nums)):\n        if nums[i]!=i:\n            return i\n    return -1\ndef search_rotated_array(nums,n):\n    '''\n    Given a sorted array of n elements, write a function to search a target value in the array.\n    If the target is not present, return -1. Also, your function should have a linear runtime complexity.\n    '''\n    l,r=0,len(nums)-1\n    while l<=r:\n        mid=(l+r)/2\n        if nums[mid]==n:\n            return mid\n        if nums[l]<=nums[mid]:\n            if nums[l]<n<=nums[mid]:\n                r=mid-1\n            else:\n                l=mid+1\n        else:\n            if nums[mid]<n<=nums[r]:\n                l=mid+1\n            else:\n                r=mid-1\n    return -1\ndef spiral_order(matrix):\n    '''\n    Given a matrix of m x n elements (m rows, n columns), write a function to \n    return all elements of the matrix in spiral order.\n    '''\n    if not matrix:\n        return []\n    result=[]\n    m,n=len(matrix),len(matrix[0])\n    visited=[[False]*n for _ in range(m)]\n    visited[0][0]=True\n    direction=0\n    i,j=0,0\n    while True:\n        if direction==0:\n            while j<n and visited[i][j]==False:\n                result.append(matrix[i][j])\n                visited[i][j]=True\n                j+=1\n            direction=1\n            i+=1\n        elif direction==1:\n            while i<m and visited[i][j]==False:\n                result.append(matrix[i][j])\n                visited[i][j]=True\n                i+=1\n            direction=2\n            j-=1\n        elif direction==2:\n            while j>=0 and visited[i][j]==False:\n                result.append(matrix[i][j])\n                visited[i][j]=True\n                j-=1\n            direction=3\n            i-=1\n        elif direction==3:\n            while i>=0 and visited[i][j]==False:\n                result.append(matrix[i][j])\n                visited[i][j]=True\n                i-=1\n            direction=0\n            j+=1\n        if i==m or j==n:\n            return result\ndef rotate_matrix(matrix):\n    '''\n    Given a square matrix, turn it by 90 degrees (clockwise).\n    '''\n    m,n=len(matrix),len(matrix[0])\n    for i in range(m):\n        for j in range(i+1,n):\n            matrix[i][j],matrix[j][i]=matrix[j][i],matrix[i][j]\n    for i in range(m):\n        for j in range(m/2):\n            matrix[i][j],matrix[i][n-1-j]=matrix[i][n-1-j],matrix[i][j]\n    return matrix\ndef letter_combinations(digits):\n    '''\n    Write a function to find all possible letter combinations of a digits \n    string. The digits string contains only digits from 0-9.\n    '''\n    if len(digits)<1:\n        return []\n    res=[]\n    cur=''\n    m={'2':['a','b','c'],\n        '3':['d','e','f'],\n        '4':['g','h','i'],\n        '5':['j','k','l'],\n        '6':['m','n','o'],\n        '7':['p','q','r','s'],\n        '8':['t','u','v'],\n        '9':['w','x','y','z']}\n    def backtrack(i):\n        if i==len(digits):\n            res.append(cur)\n            return\n        chars=m[digits[i]]\n        for c in chars:\n            cur+=c\n            backtrack(i+1)\n            cur=cur[:-1]\n    backtrack(0)\n    return res\ndef find_next_pos(grid,i,j):\n    '''\n    Given a grid of m x n elements, write a function to find the next position \n    of the queen.\n    '''\n    m,n=len(grid),len(grid[0])\n    for i in range(m):\n        for j in range(n):\n            if i==i and j==j:\n                continue\n            if grid[i][j]=='Q':\n                return (i,j)\n    return (-1,-1)\ndef is_valid(grid,i,j):\n    '''\n    Given a grid of m x n elements, write a function to check if a queen can \n    stand on top of the other queens in the grid.\n    '''\n    m,n=len(grid),len(grid[0])\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j]=='Q':\n                if i==i and j==j:\n                    continue\n                return False\n            if grid[i][j]=='Q' and abs(i-i)==abs(j-j):\n                return False\n    return True\ndef find_queen_numbers(grid):\n    '''\n    Given a grid of m x n elements"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x - 1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x and not(x & (x-1)))\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x = str(x)\n    if (len(x) == 1):\n        return False\n    for i in range(0, len(x) - 1):\n        if (x[i]!= x[i+1]):\n            return True\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x==2**(x.bit_length()-1)\n    \n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #decimal to binary\n    a=bin(x)\n    #get the last bit of the binary number\n    l=a[-1]\n    #create a new number by removing the last bit\n    new=int(a[:-1])\n    #check if the new number is a power of two\n    if new == 0:\n        return False\n    elif new & (new-1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x&(x-1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return ((x & (x - 1)) == 0);\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Need to check here if x is 0\n    if x == 0:\n        return False\n    else:\n        # Need to check here if x is 1\n        if x == 1:\n            return False\n        # Check the first bit\n        if x & 1!= x:\n            return True\n        # Check the next bit\n        return is_Power_Of_Two(x/2)\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x-1) == 0\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # test = re.findall(r\"\\w{4,}\",text)\n    # print(test)\n    # return test\n    return re.findall(r\"\\w{4,}\",text)\n    # text=text.split()\n    # result=[]\n    # for word in text:\n    #     if len(word)>=4:\n    #         result.append(word)\n    # return result\ndef find_char_long2(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",text)\ndef long_word(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",text)\ndef long_word2(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",text)\ndef longest_word(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",text)\ndef longest_word2(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",text)\ndef longest_word3(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",text)\ndef longest_word4(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",text)\ndef longest_word5(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",text)\ndef longest_word6(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",text)\ndef longest_word7(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",text)\ndef longest_word8(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",text)\ndef longest_word9(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",text)\ndef longest_word10(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",text)\ndef longest_word11(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",text)\ndef longest_word12(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",text)\ndef longest_word13(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",text)\ndef longest_word14(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",text)\ndef longest_word15(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",text)\ndef longest_word16(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",text)\ndef longest_word17(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",text)\ndef longest_word18(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",text)\ndef longest_word19(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",text)\ndef longest_word20(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",text)\ndef longest_word21(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",text)\ndef longest_word22(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",text)\ndef longest_word23(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",text)\ndef longest_word24(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",text)\ndef longest_word25(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",text)\ndef longest_word26(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",text)\ndef longest_word27(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",text)\ndef longest_word28(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",text)\ndef longest_word29(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",text)\ndef longest_word30(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",text)\ndef longest_word31(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\w{4,}\",tex"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall('[a-z]{4,}',text)\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    regex = re.compile('[a-zA-Z]+')\n    words = regex.findall(text)\n    for word in words:\n        if len(word) >= 4:\n            print(word)\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    lst = re.findall(r'\\w{4,}',text)\n    for elem in lst:\n        print(elem)\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    count = 0\n    for word in text.split():\n        if len(word) >= 4:\n            print(word)\n            count += 1\n    print(\"Total words at least 4 characters long: %s\" % count)\ndef find_long_words(text):\n    '''\n    Write a function to find all words in a string that are at least 4 characters long.\n    '''\n    count = 0\n    for word in text.split():\n        if len(word) >= 4:\n            count += 1\n            print(word)\n    print(\"Total words at least 4 characters long: %s\" % count)\ndef find_short_words(text):\n    '''\n    Write a function to find all words in a string that are at most 4 characters long.\n    '''\n    count = 0\n    for word in text.split():\n        if len(word) <= 4:\n            count += 1\n            print(word)\n    print(\"Total words at most 4 characters long: %s\" % count)\ndef find_short_words(text):\n    '''\n    Write a function to find all words in a string that are at most 4 characters long.\n    '''\n    count = 0\n    for word in text.split():\n        if len(word) <= 4:\n            count += 1\n            print(word)\n    print(\"Total words at most 4 characters long: %s\" % count)\ndef find_long_words(text):\n    '''\n    Write a function to find all words in a string that are at least 4 characters long.\n    '''\n    count = 0\n    for word in text.split():\n        if len(word) >= 4:\n            count += 1\n            print(word)\n    print(\"Total words at least 4 characters long: %s\" % count)\ndef find_long_words(text):\n    '''\n    Write a function to find all words in a string that are at least 4 characters long.\n    '''\n    count = 0\n    for word in text.split():\n        if len(word) >= 4:\n            count += 1\n            print(word)\n    print(\"Total words at least 4 characters long: %s\" % count)\ndef find_short_words(text):\n    '''\n    Write a function to find all words in a string that are at most 4 characters long.\n    '''\n    count = 0\n    for word in text.split():\n        if len(word) <= 4:\n            count += 1\n            print(word)\n    print(\"Total words at least 4 characters long: %s\" % count)\ndef find_short_words(text):\n    '''\n    Write a function to find all words in a string that are at most 4 characters long.\n    '''\n    count = 0\n    for word in text.split():\n        if len(word) <= 4:\n            count += 1\n            print(word)\n    print(\"Total words at least 4 characters long: %s\" % count)\ndef find_short_words(text):\n    '''\n    Write a function to find all words in a string that are at most 4 characters long.\n    '''\n    count = 0\n    for word in text.split():\n        if len(word) <= 4:\n            count += 1\n            print(word)\n    print(\"Total words at least 4 characters long: %s\" % count)\ndef find_short_words(text):\n    '''\n    Write a function to find all words in a string that are at most 4 characters long.\n    '''\n    count = 0\n    for word in text.split():\n        if len(word) <= 4:\n            count += 1\n            print(word)\n    print(\"Total words at least 4 characters long: %s\" % count)\ndef find_long_words(text):\n    '''\n    Write a function to find all words in a string that are at least 4 characters long.\n    '''\n    count = 0\n    for word in text.split():\n        if len(word) >= 4:\n            count += 1\n            print(word)\n    print(\"Total words at least 4 characters long: %s\" % count)\ndef find_long_words(text):\n    '''\n    Write a function to find all words in a string that are at least 4 characters long.\n    '''\n    count = 0\n    for word in text.split():\n        if len(word) >= 4:\n            count += 1\n            print(word)\n    print(\"Total words at least 4 characters long: %s\" % count)\ndef find_long_words(text):\n    '''\n    Write a function to find all words in a string that are at least 4 characters long.\n    '''\n    count = 0\n    for word in text.split():\n        if len(word) >= 4:\n            count += 1\n            print(word)\n    print(\"Total words at least 4 characters long: %s\" % count)\ndef find_long_words(text):\n    '''\n    Write a function to find all words in a string that are at least 4 characters long.\n    '''\n    count = 0\n    for word in text.split():\n        if len(word) >= 4:\n            count += 1\n            print(word)\n    print(\"Total words at least 4 characters long: %s\" % count)\ndef find_long_words(text):\n    '''\n    Write a function to find all words in a string that are at least 4 characters long.\n    '''\n    count = 0\n    for word in text.split():\n        if len(word) >= 4:\n            count += 1\n            print(word)\n    print(\"Total words at least 4 characters long: %s\" % count)\ndef find_long_words(text):\n    '''\n    Write a function to find all words in a string that are at least 4 characters long.\n    '''\n    count = 0\n    for word in text.split():\n        if len(word) >= 4:\n            count += 1\n            print(word)\n    print(\"Total words at least 4 characters long: %s\" % count)\ndef find_long_words(text):\n    '''\n    Write a function to find all words in a string that are at least 4 characters long.\n    '''\n    count = 0\n    for word in text.split():\n        if len(word) >= 4:\n            count += 1\n            print(word)\n    print(\"Total words at least 4 characters long: %s\" % count)\ndef find_long_words(text):\n    '''\n    Write a function to find all words in a string that are at least 4 characters long.\n    '''\n    count = 0\n    for word in text.split():\n        if len(word) >= 4:\n            count += 1\n            print(word)\n    print(\"Total words at least 4 characters long: %s\" % count)\ndef find_long_words(text):\n    '''\n    Write a function to find all words in a string that are at least 4 characters long.\n    '''\n    count = 0\n    for word in text.split():\n        if len(word) >= 4:\n            count += 1\n            print(word)\n    print(\"Total words at least 4 characters long: %s\" % count)\ndef find_long_words(text):\n    '''\n    Write a function to find all words in a string that are at least 4 characters long.\n    '''\n    count = 0\n    for word in text.split():\n        if len(word) >= 4:\n            count += 1\n            print(word)\n    print(\"Total words at least 4 characters long: %s\" % count)\ndef find_long_words(text):\n    '''\n    Write a function to find all words in a string that are at least 4 characters long.\n    '''\n    count = 0\n    for word in text.split():\n        if len(word) >= 4:\n            count += 1\n            print(word)\n    print(\"Total words at least 4 characters long: %s\" % count)\ndef find_long_words(text):\n    '''\n    Write a function to find all words in a string that are at least 4 characters long.\n    '''\n    count = 0\n    for word in text.split():\n        if len(word) >= 4:\n            count += 1\n            print(word)\n    print(\"Total words at least 4 characters long: %s\" % count)\ndef find_long_words(text):\n    '''\n    Write a function to find all words in a string that are at least 4 characters long.\n    '''\n    count = 0"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\w{4,}', text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    s = re.findall('[a-z]+', text)\n    for i in s:\n        if len(i) >= 4:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # first we need to split the string into words\n    # with a delimiter of whitespace\n    words = re.split('\\s+', text)\n    # then we need to filter out the empty strings\n    words = filter(lambda x: x!= '', words)\n    # now we can iterate over the filtered list\n    # to find the words which are at least 4 characters long\n    for word in words:\n        if len(word) >= 4:\n            print word\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # a = re.findall(r'\\w{4,}',text)\n    # for i in a:\n    #     print(i)\n    a = re.findall(r'\\w{4,}',text)\n    for i in a:\n        print(i)\ndef split_string(text):\n    '''\n    Write a function to split a string into words.\n    '''\n    a = re.findall(r'\\w{4,}',text)\n    for i in a:\n        print(i)\ndef find_all_index(text):\n    '''\n    Write a function to return the index of every non-overlapping occurrence of substring in a string.\n    '''\n    a = re.findall(r'\\b\\w{4,}\\b',text)\n    for i in a:\n        print(i)\ndef find_long_word(text):\n    '''\n    Write a function to find the longest word in a string of words.\n    '''\n    a = re.findall(r'\\b\\w{4,}\\b',text)\n    for i in a:\n        print(i)\ndef find_all_capital(text):\n    '''\n    Write a function to return a list of all capital letters in a string.\n    '''\n    a = re.findall(r'[A-Z][A-Z]',text)\n    for i in a:\n        print(i)\ndef find_all_lower(text):\n    '''\n    Write a function to return a list of all lower case characters in a string.\n    '''\n    a = re.findall(r'[a-z]',text)\n    for i in a:\n        print(i)\ndef find_all_space(text):\n    '''\n    Write a function to return a list of all whitespace characters in a string.\n    '''\n    a = re.findall(r'[\\s]',text)\n    for i in a:\n        print(i)\ndef find_all_digit(text):\n    '''\n    Write a function to return a list of all digit characters in a string.\n    '''\n    a = re.findall(r'[\\d]',text)\n    for i in a:\n        print(i)\ndef find_all_alnum(text):\n    '''\n    Write a function to return a list of all alphanumeric characters in a string.\n    '''\n    a = re.findall(r'[A-Za-z0-9]',text)\n    for i in a:\n        print(i)\ndef find_all_alnum_space(text):\n    '''\n    Write a function to return a list of all alphanumeric characters in a string.\n    '''\n    a = re.findall(r'[A-Za-z0-9\\s]',text)\n    for i in a:\n        print(i)\ndef find_all_alnum_digit(text):\n    '''\n    Write a function to return a list of all alphanumeric characters in a string.\n    '''\n    a = re.findall(r'[A-Za-z0-9\\d]',text)\n    for i in a:\n        print(i)\ndef find_all_alnum_lower_upper(text):\n    '''\n    Write a function to return a list of all alphanumeric characters in a string.\n    '''\n    a = re.findall(r'[A-Za-z0-9\\D]',text)\n    for i in a:\n        print(i)\ndef find_all_alnum_lower_digit(text):\n    '''\n    Write a function to return a list of all alphanumeric characters in a string.\n    '''\n    a = re.findall(r'[A-Za-z0-9\\d]',text)\n    for i in a:\n        print(i)\ndef find_all_alnum_lower_space(text):\n    '''\n    Write a function to return a list of all alphanumeric characters in a string.\n    '''\n    a = re.findall(r'[A-Za-z0-9\\s]',text)\n    for i in a:\n        print(i)\ndef find_all_alnum_upper_lower_space(text):\n    '''\n    Write a function to return a list of all alphanumeric characters in a string.\n    '''\n    a = re.findall(r'[A-Za-z0-9\\s]',text)\n    for i in a:\n        print(i)\ndef find_all_alnum_upper_lower(text):\n    '''\n    Write a function to return a list of all alphanumeric characters in a string.\n    '''\n    a = re.findall(r'[A-Za-z0-9\\D]',text)\n    for i in a:\n        print(i)\ndef find_all_alnum_upper_space(text):\n    '''\n    Write a function to return a list of all alphanumeric characters in a string.\n    '''\n    a = re.findall(r'[A-Za-z0-9\\s]',text)\n    for i in a:\n        print(i)\ndef find_all_alnum_space_digit(text):\n    '''\n    Write a function to return a list of all alphanumeric characters in a string.\n    '''\n    a = re.findall(r'[A-Za-z0-9\\D\\s]',text)\n    for i in a:\n        print(i)\ndef find_all_alnum_lower_space_space(text):\n    '''\n    Write a function to return a list of all alphanumeric characters in a string.\n    '''\n    a = re.findall(r'[A-Za-z0-9\\s]',text)\n    for i in a:\n        print(i)\ndef find_all_alnum_lower_space(text):\n    '''\n    Write a function to return a list of all alphanumeric characters in a string.\n    '''\n    a = re.findall(r'[A-Za-z0-9\\s]',text)\n    for i in a:\n        print(i)\ndef find_all_alnum_lower_space_lower(text):\n    '''\n    Write a function to return a list of all alphanumeric characters in a string.\n    '''\n    a = re.findall(r'[A-Za-z0-9\\s]',text)\n    for i in a:\n        print(i)\ndef find_all_alnum_lower_space_upper(text):\n    '''\n    Write a function to return a list of all alphanumeric characters in a string.\n    '''\n    a = re.findall(r'[A-Za-z0-9\\s]',text)\n    for i in a:\n        print(i)\ndef find_all_alnum_lower_upper(text):\n    '''\n    Write a function to return a list of all alphanumeric characters in a string.\n    '''\n    a = re.findall(r'[A-Za-z0-9\\D]',text)\n    for i in a:\n        print(i)\ndef find_all_alnum_lower_upper_space(text):\n    '''\n    Write a function to return a list of all alphanumeric characters in a string.\n    '''\n    a = re.findall(r'[A-Za-z0-9\\D\\s]',text)\n    for i in a:\n        print(i)\ndef find_all_alnum_upper(text):\n    '''\n    Write a function to return a list of all alphanumeric characters in a string.\n    '''\n    a = re.findall(r'[A-Za-z0-9\\D]',text)\n    for i in a:\n        print(i)\ndef find_all_alnum_upper_space(text):\n    '''\n    Write a function to return a list of all alphanumeric characters in a string.\n    '''\n    a = re.findall(r'[A-Za-"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    results = re.findall(r'\\b\\w{4,}\\b', text)\n    return results\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # return [x*x for x in nums]\n    return list(map(lambda x: x*x, nums))\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [n**2 for n in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [n ** 2 for n in nums]\n    \nprint square_nums([1,2,3,4,5])\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        print(i*i)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    sq_list = []\n    for num in nums:\n        sq_list.append(num ** 2)\n    return sq_list\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    list1=[]\n    for i in range(0, len(nums)):\n        list1.append(nums[i]**2)\n    return list1\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [n**2 for n in nums]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    rotations = [-1] * (n + 1)\n    for i in range(n):\n        k = i\n        while k < n and str[k] == str[i]:\n            k += 1\n        if k - i > 1:\n            rotations[i] = k - i\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if not str:\n        return 0\n    length = len(str)\n    # Base Case\n    if length == 1:\n        return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i:] == str[i:][::-1]:\n            count+=1\n    return count\n    \ndef rotations(s):\n    '''\n    Write a python function to get the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return find_Rotations(s)\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    len1 = len(str)\n    if len1 == 0:\n        return 0\n    \n    for i in range(len1):\n        temp = str[i:]+str[:i]\n        if temp == str:\n            return i\n    return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def print_rotation(str1,str2):\n        print 'The minimum number of rotations is: '\n        print len(str1)-len(str2)\n        print 'The first string is: '\n        print str1\n        print 'The second string is: '\n        print str2\n        print''\n    str_len = len(str)\n    if str_len <= 1:\n        return 0\n    smallest_rotation = len(str)\n    for i in range(str_len/2):\n        str1 = str[i:]\n        str2 = str[:i]\n        smallest_rotation = min(smallest_rotation, print_rotation(str1,str2))\n    return smallest_rotation\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    s = str\n    length = len(str)\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    for i in range(len(str)): \n        if str[i:]+str[:i] == str: \n            return i \n    return 0 \n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    # Since we can't modify the original string, a copy of string is created\n    temp = str[:]\n    # the number of rotations is calculated as the number of times the string is shifted by one char\n    rotations = 0\n    # 'a' is shifted once so that the string doesn't get shifted by more than one char\n    temp = chr(ord(temp[0])+1) + temp[1:]\n    # iterate while the string is not the same as its copy\n    while(temp!= str):\n        rotations += 1\n        temp = temp[1:] + temp[0]\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    def isSubstring(str1,str2):\n        #print(\"str1 = \",str1)\n        #print(\"str2 = \",str2)\n        l = len(str1)\n        k = len(str2)\n        for i in range(l):\n            if (str1[i:k+i] == str2):\n                return True\n        return False\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    if str == str[::-1]: \n        return 0\n    \n    if len(str) == 1:\n        return -1\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n    return s[:s.find(ch)] + s[s.rfind(ch) + 1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    s.remove(ch)\n    s.remove(ch)\n    s = ''.join(s)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.replace(ch, \"\")\n    s=s.replace(ch, \"\")\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    a = s.rstrip(ch)\n    b = a.lstrip(ch)\n    return b\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '',1).replace(ch,'',1)\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s[:s.index(ch)] + s[s.rindex(ch)+1:]\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        return s.replace(ch,'',1)\n    else:\n        return s\n    \n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'',1).replace(ch,'',1)\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.rstrip(ch)+s.lstrip(ch)\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    if len(M) == 1:\n        return M\n    else:\n        sum_matrix = [sum(i) for i in M]\n        idx = sum_matrix.index(min(sum_matrix))\n        del sum_matrix[idx]\n        result = [M[idx]] + sort_matrix(M[:idx] + M[idx+1:])\n        return result\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sort = []\n    for row in M:\n        sort.append(sum(row))\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    m = len(M)\n    n = len(M[0])\n    for i in range(m):\n        M[i] = sorted(M[i])\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key=sum)\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    def sum_matrix(M):\n        return sum([sum(i) for i in M])\n    if not M: return M\n    m, n = len(M), len(M[0])\n    for j in range(1, n):\n        m -= 1\n        for i in range(m):\n            if sum_matrix(M[i:i+1]) < sum_matrix(M[i+1:]):\n                M[i], M[i+1:] = M[i+1:], M[i:i+1]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    new_matrix = []\n    for row in M:\n        new_row = sum(row)\n        new_matrix.append(new_row)\n    new_matrix.sort()\n    return new_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    def sum_matrix_row(row):\n        return sum(row)\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # O(n^2logn) time\n    def get_row_sums(M):\n        return [sum(row) for row in M]\n    def get_sort_index(M, i):\n        row_sums = get_row_sums(M)\n        return row_sums.index(row_sums[i])\n    def selection_sort(M):\n        res = []\n        for i in xrange(len(M)):\n            res.append(M[i])\n            j = get_sort_index(M, i)\n            M[i], M[j] = M[j], M[i]\n        return res\n    return selection_sort(M)\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    num_rows = len(M)\n    num_cols = len(M[0])\n    # Create an array for the final sorted matrix\n    sorted_matrix = [ [ 0 for i in range(num_cols) ] for j in range(num_rows) ]\n    for i in range(num_rows):\n        for j in range(num_cols):\n            sorted_matrix[i][j] = M[i][j]\n    # Sort the array by summing each row\n    for i in range(num_rows):\n        sorted_matrix[i] = sorted(sorted_matrix[i])\n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_matrix = []\n    sum_matrix = []\n    for i in range(len(M)):\n        sum_row = 0\n        for j in range(len(M[i])):\n            sum_row += M[i][j]\n        sum_matrix.append(sum_row)\n    \n    for i in range(len(sum_matrix)):\n        for j in range(len(sum_matrix)):\n            if sum_matrix[i] <= sum_matrix[j]:\n                sorted_matrix.append(M[i])\n    \n    return sorted_matrix\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #l,b,h=map(float,input().split())\n    return (l*b*h)/3.0\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a = l*b*h/6\n    print(a)\n    return a\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l * b * h)/3\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (h*(b**2+l**2+h**2))/3\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/3\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return b*h*l/2\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*b*h)/3\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/6\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume= l*b*h/3\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return b*h/2*l \n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[a-z]+_[a-z]+',text) is not None\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return len(re.findall(r'[a-z]+_[a-z]+',text))!=0\ndef test_text_lowercase_underscore():\n    assert text_lowercase_underscore('this is a test') == True\n    assert text_lowercase_underscore('THIS_IS_A_TEST') == True\n    assert text_lowercase_underscore('This_is_a_test') == True\n    assert text_lowercase_underscore('this is a test1') == False\n    assert text_lowercase_underscore('this is a test1234') == False\n    assert text_lowercase_underscore('this_is_a_test') == False\n    assert text_lowercase_underscore('this is a test') == False\n    assert text_lowercase_underscore('this_is_a_test1') == False\n    assert text_lowercase_underscore('this_is_a_test_') == False\n    assert text_lowercase_underscore('this_is_a_test_1') == False\n    assert text_lowercase_underscore('this_is_a_test_1_') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_5') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_5_') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_5_6') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_5_6_') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_5_6_7') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_5_6_7_') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_5_6_7_8') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_5_6_7_8_') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_5_6_7_8_9') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_5_6_7_8_9_') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_5_6_7_8_9_0') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_5_6_7_8_9_0_') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_5_6_7_8_9_0_1') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_5_6_7_8_9_0_1_') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_5_6_7_8_9_0_1_2') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_5_6_7_8_9_0_1_2_') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_5_6_7_8_9_0_1_2_3') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_5_6_7_8_9_0_1_2_3_') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_5_6_7_8_9_0_1_2_3_4') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_5_6_7_8_9_0_1_2_3_4_') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2') == False\n    assert text_lowercase_underscore('this_is_a_test_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3') == False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    lower = [x for x in text if x.islower()]\n    return '_'.join(lower) == text\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    flag = 0\n    for i in text:\n        if i.isalpha() == False:\n            flag = 1\n            return False\n    if flag == 0:\n        return True\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('[a-z]+_[a-z]+', text, re.IGNORECASE)!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    res = re.search('_[a-z]{2,}',text)\n    if res is not None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('[a-z]+_[a-z]+',text))\ndef text_lowercase_underscore_capital(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('[a-z]+_[a-z]+',text))\ndef text_lowercase_underscore_capital_2(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('[a-z]+_[a-z]+',text))\ndef text_lowercase_underscore_capital_3(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('[a-z]+_[a-z]+',text))\ndef text_lowercase_underscore_capital_4(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('[a-z]+_[a-z]+',text))\ndef text_lowercase_underscore_capital_5(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('[a-z]+_[a-z]+',text))\ndef text_lowercase_underscore_capital_6(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('[a-z]+_[a-z]+',text))\ndef text_lowercase_underscore_capital_7(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('[a-z]+_[a-z]+',text))\ndef text_lowercase_underscore_capital_8(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('[a-z]+_[a-z]+',text))\ndef text_lowercase_underscore_capital_9(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('[a-z]+_[a-z]+',text))\ndef text_lowercase_underscore_capital_10(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('[a-z]+_[a-z]+',text))\ndef text_lowercase_underscore_capital_11(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('[a-z]+_[a-z]+',text))\ndef text_lowercase_underscore_capital_12(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('[a-z]+_[a-z]+',text))\ndef text_lowercase_underscore_capital_13(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('[a-z]+_[a-z]+',text))\ndef text_lowercase_underscore_capital_14(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('[a-z]+_[a-z]+',text))\ndef text_lowercase_underscore_capital_15(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('[a-z]+_[a-z]+',text))\ndef text_lowercase_underscore_capital_16(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('[a-z]+_[a-z]+',text))\ndef text_lowercase_underscore_capital_17(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('[a-z]+_[a-z]+',text))\ndef text_lowercase_underscore_capital_18(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('[a-z]+_[a-z]+',text))\ndef text_lowercase_underscore_capital_19(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('[a-z]+_[a-z]+',text))\ndef text_lowercase_underscore_capital_20(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('[a-z]+_[a-z]+',text))\ndef text_lowercase_underscore_capital_21(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('[a-z]+_[a-z]+',text))\ndef text_lowercase_underscore_capital_22(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('[a-z]+_[a-z]+',text))\ndef text_lowercase_underscore_capital_23(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('[a-z]+_[a-z]+',text))\ndef text_lowercase_underscore_capital_24(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('[a-z]+_[a-z]+',text))\ndef text_lowercase_underscore_capital_25(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('[a-z]+_[a-z]+',text))\ndef text_lowercase_underscore_capital_26(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('[a-z]+_[a-z]+',text))\ndef text_lowercase_underscore_capital_27(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    retur"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(\"[a-z]\", text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('[a-z]+_[a-z]+', text)\ndef word_validity(word):\n    '''\n    Write a function to determine if a string formed by joining all the characters of the word is a palindrome.\n    '''\n    return word == word[::-1]\ndef univocal_letter(word):\n    '''\n    Write a function that determines if the input string has a unique letter.\n    '''\n    return len(set(word)) == len(word)\ndef alphabetical_order(word):\n    '''\n    Write a function that determines if a string has alphabetical order.\n    '''\n    return word == ''.join(sorted(word))\ndef move_vowels(text):\n    '''\n    Write a function that moves all the vowels of a string to the end of the string.\n    '''\n    return re.sub('[aeiouAEIOU]', '', text)\ndef combine_words(word, separator):\n    '''\n    Write a function that combines the first and last elements of a list into one string.\n    '''\n    return separator.join([word[0], word[-1]])\ndef check_pangram(text):\n    '''\n    Write a function that checks if a string is a pangram.\n    '''\n    return len(set(text)) == 26\ndef pangram_filter(text):\n    '''\n    Write a function that filters strings and removes words that are not pangrams from a list.\n    '''\n    return [word for word in text if check_pangram(word)]\ndef find_anagrams(word, dictionary):\n    '''\n    Write a function that finds all the anagrams of a string in a dictionary.\n    '''\n    return [item for item in dictionary if sorted(item) == sorted(word)]\ndef is_valid_date(date):\n    '''\n    Write a function that determines if a string is a valid date.\n    '''\n    return re.search('^([0-9]{2}|[1-9]{1}[0-9]{2}|[1-9]{1}[0-9]{1}[0-9]{1})(-)(0[1-9]|1[0-2])(-)(0[1-9]|1\\d|2\\d{2})(\\d{2}:\\d{2}:\\d{2})$', date)\ndef is_time_valid(time):\n    '''\n    Write a function that determines if the time is valid.\n    '''\n    return re.search('^([0-9]{2}|[1-9]{1}[0-9]{2}|[1-9]{1}[0-9]{1}[0-9]{1})(:)([0-9]{2}|[1-9]{1}[0-9]{2}|[1-9]{1}[0-9]{1}[0-9]{1})$', time)\ndef check_phone_number(phone_number):\n    '''\n    Write a function that determines if a phone number is valid.\n    '''\n    return re.search('^[0-9]{3}-[0-9]{3}-[0-9]{4}$', phone_number)\ndef get_punctuation(text):\n    '''\n    Write a function that gets punctuation in a string.\n    '''\n    return re.findall('[^\\s\\w]', text)\ndef reverse_case(text):\n    '''\n    Write a function that returns the reverse of a string.\n    '''\n    return text[::-1]\ndef three_vowels(text):\n    '''\n    Write a function that determines if a string has three consecutive vowels.\n    '''\n    return re.search('[aeiouAEIOU]{3,}', text)\ndef string_splice(text, start, end):\n    '''\n    Write a function that returns the substring of a string with a specified start and end indices.\n    '''\n    return text[start:end+1]\ndef compare_strings(text, string):\n    '''\n    Write a function that returns true if the input string is a permutation of the input text and false otherwise.\n    '''\n    return sorted(text) == sorted(string)\ndef remove_punctuation(text):\n    '''\n    Write a function that removes all punctuation from a string.\n    '''\n    return re.sub('[^\\w\\s]', '', text)\ndef count_punctuation(text):\n    '''\n    Write a function that counts the number of punctuation characters in a string.\n    '''\n    return len(re.findall('[^\\w\\s]', text))\ndef get_length(text):\n    '''\n    Write a function that counts the number of characters in a string.\n    '''\n    return len(text)\ndef get_digit(text):\n    '''\n    Write a function that counts the number of digits in a string.\n    '''\n    return len(re.findall('[0-9]', text))\ndef get_uppercase(text):\n    '''\n    Write a function that counts the number of uppercase characters in a string.\n    '''\n    return len(re.findall('[A-Z]', text))\ndef get_lowercase(text):\n    '''\n    Write a function that counts the number of lowercase characters in a string.\n    '''\n    return len(re.findall('[a-z]', text))\ndef get_alphabetical_order(text):\n    '''\n    Write a function that sorts the characters of a string alphabetically.\n    '''\n    return ''.join(sorted(text))\ndef pangram_filter(text):\n    '''\n    Write a function that filters strings and removes words that are not pangrams from a list.\n    '''\n    return [word for word in text if check_pangram(word)]\ndef find_anagrams(word, dictionary):\n    '''\n    Write a function that finds all the anagrams of a string in a dictionary.\n    '''\n    return [item for item in dictionary if sorted(item) == sorted(word)]\ndef is_valid_date(date):\n    '''\n    Write a function that determines if a string is a valid date.\n    '''\n    return re.search('^([0-9]{2}|[1-9]{1}[0-9]{2}|[1-9]{1}[0-9]{1}[0-9]{1})(-)(0[1-9]|1[0-2])(-)(0[1-9]|1\\d|2\\d{2})(\\d{2}:\\d{2}:\\d{2})$', date)\ndef is_time_valid(time):\n    '''\n    Write a function that determines if the time is valid.\n    '''\n    return re.search('^([0-9]{2}|[1-9]{1}[0-9]{2}|[1-9]{1}[0-9]{1}[0-9]{1})(:)([0-9]{2}|[1-9]{1}[0-9]{2}|[1-9]{1}[0-9]{1}[0-9]{1})$', time)\ndef check_phone_number(phone_number):\n    '''\n    Write a function that determines if a phone number is valid.\n    '''\n    return re.search('^[0-9]{3}-[0-9]{3}-[0-9]{4}$', phone_number)\ndef get_punctuation(text):\n    '''\n    Write a function that gets punctuation in a string.\n    '''\n    return re.findall('[^\\s\\w]', text)\ndef reverse_case(text):\n    '''\n    Write a function that returns the reverse of a string.\n    '''\n    return text[::-1]\ndef three_vowels(text):\n    '''\n    Write a function that determines if a string has three consecutiv"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if text.islower()==True:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n    \n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    a = len(string)\n    b = len(string)\n    new = ''\n    l = []\n    while a > b:\n        if string[b] not in l:\n            l.append(string[b])\n        b = b - 1\n    for i in range(len(l)):\n        new = new + l[i]\n    return new\ndef decrypt(string):\n    \"\"\"\n    This function returns the decrypted version of the given string.\n    \"\"\"\n    # Your code here\n    b = []\n    c = []\n    for i in range(len(string)):\n        if string[i]!='':\n            b.append(string[i])\n    for i in range(len(b)):\n        if ord(b[i]) < 65:\n            if ord(b[i]) < 97:\n                if ord(b[i]) < 97:\n                    c.append(chr(ord(b[i]) + 13))\n                else:\n                    c.append(chr(ord(b[i]) - 13))\n            else:\n                if ord(b[i]) < 109:\n                    c.append(chr(ord(b[i]) + 13))\n                else:\n                    c.append(chr(ord(b[i]) - 13))\n        else:\n            c.append(b[i])\n    return ''.join(c)\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l1 = len(string)\n    l2 = len(string2)\n    newstr = ''\n    for i in range(0,l1):\n        if string[i] not in string2:\n            newstr = newstr+string[i]\n    return newstr\ndef to_number(s):\n    '''\n    Write a function to convert a string of characters into a number.\n    Example:\n    \"00110101\" should return 2\n    \"12345\" should return 45\n    '''\n    if s == '':\n        return 0\n    array = []\n    for i in s:\n        if i.isdigit():\n            array.append(int(i))\n    number = 0\n    if len(array) == 0:\n        return 0\n    for i in array:\n        number = number*2 + i\n    return number\ndef generate_arrays(array):\n    '''\n    Write a function to generate all non empty arrays of a given size\n    '''\n    if array == []:\n        return [[]]\n    result = []\n    for i in range(0,len(array)):\n        result = result + [array[i] + [array[i]]]\n        if array[i] + [array[i]] in result:\n            continue\n        result = result + generate_arrays(array[:i] + array[i+1:])\n    return result\ndef generate_all_strings(string):\n    '''\n    Write a function to generate all non empty strings of a given length\n    '''\n    if len(string) == 0:\n        return [[]]\n    result = []\n    for i in range(1,len(string)+1):\n        result = result + generate_arrays(string[:i])\n    return result\ndef is_prime(number):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if number == 1:\n        return False\n    for i in range(2,number):\n        if number%i == 0:\n            return False\n    return True\ndef generate_all_pairs(arr1,arr2):\n    '''\n    Write a function to generate all pairs of an array of integers.\n    '''\n    if arr1 == []:\n        return [[]]\n    result = []\n    for i in range(0,len(arr1)):\n        result = result + [[arr1[i],arr2[i]]]\n        if arr2[i] in arr1:\n            continue\n        result = result + generate_all_pairs(arr1[:i] + arr1[i+1:],arr2[:i] + arr2[i+1:])\n    return result\ndef modulo_2(number):\n    '''\n    Write a function to convert a number to binary form.\n    '''\n    if number == 0:\n        return '0'\n    result = ''\n    while number > 0:\n        result = str(number%2) + result\n        number = number/2\n    return result\ndef string_to_binary(string):\n    '''\n    Write a function to convert a string to its binary representation\n    '''\n    if string == '':\n        return ''\n    result = ''\n    for i in string:\n        result = result + modulo_2(to_number(i))\n    return result\ndef binary_to_string(binary):\n    '''\n    Write a function to convert a binary form to a string\n    '''\n    if binary == '':\n        return ''\n    result = ''\n    array = []\n    for i in binary:\n        array.append(int(i))\n    array.reverse()\n    while len(array) > 0:\n        temp = 0\n        for i in range(0,len(array)):\n            temp = temp*2 + array[i]\n        result = result + chr(temp)\n        array.pop()\n    return result\ndef circular_permutation(array):\n    '''\n    Write a function to rearrange an array so that all negative numbers are at the beginning and positive numbers are at the end\n    '''\n    if array == []:\n        return []\n    result = []\n    for i in array:\n        if i < 0:\n            result.append(i)\n    for i in array:\n        if i > 0:\n            result.append(i)\n    return result\ndef fibonacci(n):\n    '''\n    Write a function that returns n-th Fibonacci number.\n    '''\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2,n+1):\n            a = a+b\n            b = a+b\n        return a\ndef generate_perfect_squares(n):\n    '''\n    Write a function to generate a list of all perfect squares from 1 to n.\n    '''\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    perfect_squares = []\n    for i in range(1,int(n**0.5)+1):\n        perfect_squares.append(i**2)\n    perfect_squares.append(n**2)\n    return perfect_squares\ndef longest_common_prefix(str1,str2):\n    '''\n    Write a function to find the longest common prefix string amongst an array of strings.\n    '''\n    if str1 == '' or str2 == '':\n        return ''\n    if len(str1) < len(str2):\n        temp = str1\n        str1 = str2\n        str2 = temp\n    result = ''\n    for i in range(0,len(str1)):\n        if str1[:i+1] == str2[:i+1]:\n            result = str1[:i+1]\n    return result\ndef compute_rot_string(string,n):\n    '''\n    Write a function to compute the number of rotations of a string.\n    '''\n    if string == '':\n        return 0\n    if len(string) == 1:\n        return 0\n    rotations = []\n    for i in range(0,len(string)):\n        rotations.append(string[i:]+string[:i])\n    rotations.sort()\n    result = 0\n    for i in range(0,len(rotations)):\n        if rotations[i] == string:\n            result = result + 1\n    return result\ndef compute_rot_string_v2(string,n):\n    '''\n    Write a function to compute the number of rotations of a string.\n    '''\n    if string == '':\n        return 0\n    if len(string) == 1:\n        return 0\n    rotations = []\n    for i in range(0,len(string)):\n        rotations.append(string[i:]+string[:i])\n    rotations.sort()\n    result = 0\n    for i in range(0,len(rotations)):\n        if rotations[i] == string:\n            result = result + 1\n    return result\ndef find_shortest_substring(string,word):\n    '''\n    Write a function to find the shortest substring in a given string which has all the characters of another string.\n    Example:\n    Input: \"waterbottle\", \"erbottlewat\"\n    Output: \"erbottlewat\"\n    '''\n    if string == '':\n        return ''\n    if word == '':\n        return ''\n    result = string\n    for i in word:\n        if i not in result:\n            return result\n    return result\ndef find_shortest_substring_v2(string,word):\n    '''\n    Write a function to find the shortest substring in a given string which has all the characters of another string.\n    Example:\n    Input: \"waterbottle\", \"erbottlewat\"\n    Output: \"erbottlewat\"\n    '''\n    if string == '':\n        return ''\n    if word == '':\n        return ''\n    result = string\n    shortest = ''\n    if len(string) < len(word):\n        shortest = string\n    else:\n        shortest = word\n    for i in shortest:\n        if i in result:\n            result = result.replace(i,'')\n    return shortest\ndef check_permutation(string"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) == 0:\n        return []\n    if len(string) == 1:\n        return [string]\n    smaller = str_to_list(string[1:])\n    result = []\n    for i in smaller:\n        if string[0] not in i:\n            result.append(string[0] + i)\n    return result\ndef count_occurences(string):\n    '''\n    Write a function to count the number of occurences of a substring in a string.\n    '''\n    if len(string) == 0:\n        return 0\n    if len(string) == 1:\n        return 1\n    result = 0\n    for i in range(len(string)):\n        if string[i] == string[i+1]:\n            result += 1\n    return result\ndef equal_indices(string1, string2):\n    '''\n    Write a function to check if two strings are equal when both are of lowercase letters\n    (a and b) and where one or both of the letters are case-swapped.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    return string1.swapcase() == string2\ndef reverse_string(string):\n    '''\n    Write a function to reverse a string\n    '''\n    if len(string) == 0:\n        return []\n    if len(string) == 1:\n        return [string]\n    smaller = reverse_string(string[1:])\n    result = [string[0]]\n    for i in smaller:\n        result.append(i)\n    return result\ndef rotate_string(string, n):\n    '''\n    Write a function to rotate a string n places to the right.\n    '''\n    if len(string) == 0:\n        return []\n    if len(string) == 1:\n        return [string]\n    smaller = rotate_string(string[1:], n)\n    result = [string[0]]\n    for i in smaller:\n        result.append(i)\n    return result\ndef get_value(dct, key):\n    '''\n    Write a function to return the value at a key in a dictionary.\n    '''\n    if len(dct) == 0:\n        return None\n    if key not in dct:\n        return None\n    return dct[key]\ndef get_value_from_hash(hash_dict, key):\n    '''\n    Write a function to return the value at a key in a dictionary stored in a hash table.\n    '''\n    for i in hash_dict:\n        if hash_dict[i][0] == key:\n            return hash_dict[i][1]\ndef remove_adjacent_duplicates(string):\n    '''\n    Write a function to remove adjacent duplicates from a string.\n    '''\n    if len(string) == 0:\n        return []\n    if len(string) == 1:\n        return [string]\n    smaller = remove_adjacent_duplicates(string[1:])\n    result = [string[0]]\n    for i in smaller:\n        if string[0]!= i:\n            result.append(i)\n    return result\ndef get_position_in_list(list, target):\n    '''\n    Write a function to find the index of an element in a list.\n    '''\n    if len(list) == 0:\n        return None\n    if len(list) == 1:\n        return 0\n    smaller = get_position_in_list(list[1:], target)\n    if smaller == None:\n        return None\n    if list[0] == target:\n        return smaller + 1\n    return smaller\ndef is_rotation(string1, string2):\n    '''\n    Write a function that takes two strings and returns true if the second string is a rotation of the first string.\n    '''\n    if len(string1)!= len(string2) or string1 == string2:\n        return False\n    return string2 in rotate_string(string1, len(string2))\ndef get_length_of_word(word):\n    '''\n    Write a function to calculate the length of a word.\n    '''\n    if len(word) == 0:\n        return 0\n    return 1 + get_length_of_word(word[1:])\ndef reverse_words_in_a_string(string):\n    '''\n    Write a function to reverse the words in a string.\n    '''\n    if len(string) == 0:\n        return []\n    if len(string) == 1:\n        return [string]\n    smaller = reverse_words_in_a_string(string[1:])\n    result = [string[0]]\n    for i in smaller:\n        result.append(i)\n    return result\ndef has_palindrome_permutation(string):\n    '''\n    Write a function to check if a string contains a permutation of a palindrome.\n    '''\n    if len(string) == 0:\n        return False\n    if len(string) == 1:\n        return True\n    counter = [0] * NO_OF_CHARS\n    for i in string:\n        counter[ord(i)] += 1\n    one_palindrome = False\n    for i in counter:\n        if i % 2!= 0 and one_palindrome == False:\n            return False\n        if i % 2 == 0 and one_palindrome == True:\n            return False\n        if i % 2!= 0:\n            one_palindrome = True\n    return True\ndef get_number_of_leaps_in_a_year(year):\n    '''\n    Write a function that determines how many leap years there are in a given range.\n    '''\n    if len(str(year))!= 4 or year < 1 or year > 9999:\n        return 0\n    counter = 0\n    if (year % 4) == 0:\n        if (year % 100) == 0:\n            if (year % 400) == 0:\n                counter += 1\n        else:\n            counter += 1\n    return counter\ndef add_element_to_the_start_of_list(list, element):\n    '''\n    Write a function to add an element to the start of a list.\n    '''\n    if len(list) == 0:\n        return [element]\n    return [element] + list\ndef get_the_max_of_three(num1, num2, num3):\n    '''\n    Write a function that returns the maximum of three numbers.\n    '''\n    return max(num1, num2, num3)\ndef reverse_a_number(num):\n    '''\n    Write a function that returns the integer of a reversed number.\n    '''\n    if num == 0:\n        return 0\n    return reverse_a_number(num / 10) * 10 + num % 10\ndef rotate_a_number(num, n):\n    '''\n    Write a function to rotate a number n places to the right.\n    '''\n    if num == 0:\n        return 0\n    return (num * pow(10, n)) % 1000000 + n\ndef get_length_of_number(num):\n    '''\n    Write a function to calculate the length of a number.\n    '''\n    if num == 0:\n        return 0\n    return 1 + get_length_of_number(num / 10)\ndef is_equal(num1, num2):\n    '''\n    Write a function to check if two numbers are equal.\n    '''\n    if num1 == num2:\n        return True\n    return False\ndef get_number_from_index(list, index):\n    '''\n    Write a function to return the number at a given index in a list.\n    '''\n    if len(list) == 0:\n        return None\n    if index < 0:\n        return None\n    if index >= len(list):\n        return None\n    return list[index]\ndef is_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(string) == 0:\n        return True\n    if len(string) == 1:\n        return True\n    smaller = is_palindrome(string[1:])\n    if smaller == True:\n        return True\n    return string[0] == string[len(string) - 1]"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    len_str1, len_str2 = len(string), len(string1)\n    str1 = list(string)\n    str2 = list(string1)\n    for i in range(len_str1):\n        for j in range(len_str2):\n            if str1[i] == str2[j]:\n                del str1[i]\n                del str2[j]\n                break\n    return \"\".join(str1)\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = list(string)\n    for i in range(len(string)):\n        if string[i] in list1:\n            list1.remove(string[i])\n    return list1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_arr = []\n    for char in string:\n        char_arr.append(char)\n    return char_arr\ndef list_to_str(char_arr):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = ''\n    for char in char_arr:\n        string += char\n    return string\ndef remove_match_char(list1, list2):\n    '''\n    Write a function that takes two lists and returns a new list which contains only the elements that are common to both the lists (without duplicates).\n    '''\n    new_list = []\n    for char in list1:\n        if char in list2:\n            if char not in new_list:\n                new_list.append(char)\n    return new_list\ndef remove_match_char_with_str(string1, string2):\n    '''\n    Write a function that takes two strings and returns a new string which contains only the characters that are present in both the strings (without duplicates).\n    '''\n    char_arr1 = []\n    char_arr2 = []\n    for char in string1:\n        char_arr1.append(char)\n    for char in string2:\n        char_arr2.append(char)\n    char_arr1 = list(dict.fromkeys(char_arr1))\n    char_arr2 = list(dict.fromkeys(char_arr2))\n    common_char = char_arr1 + char_arr2\n    common_char = list(dict.fromkeys(common_char))\n    str_result = ''\n    for char in common_char:\n        str_result += char\n    return str_result\ndef merge_string(str1, str2):\n    '''\n    Write a function to merge two strings into one new string such that the new string is in ascending order.\n    '''\n    new_str = str1 + str2\n    return new_str\ndef find_greater_numbers(list1, list2):\n    '''\n    Write a function that accepts two lists of numbers and returns a new list which contains all the numbers from the first list that are greater than or equal to the numbers in the second list.\n    '''\n    new_list = []\n    for number in list1:\n        if number >= list2[0]:\n            new_list.append(number)\n    return new_list\ndef find_greater_numbers_with_duplicates(list1, list2):\n    '''\n    Write a function that accepts two lists of numbers and returns a new list which contains all the numbers from the first list that are greater than or equal to the numbers in the second list.\n    '''\n    new_list = []\n    for number in list1:\n        count = 0\n        for item in list2:\n            if number >= item:\n                count += 1\n        if count == len(list2):\n            new_list.append(number)\n    return new_list\ndef count_common_items(list1, list2):\n    '''\n    Write a function that accepts two lists of strings and returns the number of common elements between the two lists.\n    '''\n    common_list = []\n    for item in list1:\n        if item in list2:\n            common_list.append(item)\n    return len(common_list)\ndef count_common_items_with_duplicates(list1, list2):\n    '''\n    Write a function that accepts two lists of strings and returns the number of common elements between the two lists.\n    '''\n    common_list = []\n    for item in list1:\n        if item in list2:\n            common_list.append(item)\n    return len(common_list)\ndef sum_list(list1):\n    '''\n    Write a function that accepts a list of numbers and returns the sum of the numbers in the list.\n    '''\n    sum = 0\n    for num in list1:\n        sum += num\n    return sum\ndef sum_list_recursive(list1):\n    '''\n    Write a function that accepts a list of numbers and returns the sum of the numbers in the list.\n    '''\n    if len(list1) == 1:\n        return list1[0]\n    else:\n        return list1[0] + sum_list_recursive(list1[1:])\ndef reverse_string(string1):\n    '''\n    Write a function that takes a string as input and returns that string in reverse order.\n    '''\n    if len(string1) == 1:\n        return string1\n    else:\n        return reverse_string(string1[1:]) + string1[0]\ndef reverse_string_recursive(string1):\n    '''\n    Write a function that takes a string as input and returns that string in reverse order.\n    '''\n    if len(string1) == 1:\n        return string1\n    else:\n        return reverse_string_recursive(string1[1:]) + string1[0]\ndef palindrome(string1):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    if len(string1) == 1:\n        return True\n    if string1[0] == string1[-1]:\n        return palindrome(string1[1:-1])\n    else:\n        return False\ndef palindrome_recursive(string1):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    if len(string1) == 1:\n        return True\n    if string1[0] == string1[-1]:\n        return palindrome_recursive(string1[1:-1])\n    else:\n        return False\ndef is_palin_permutation(string1, string2):\n    '''\n    Write a function to check whether a string is a permutation of a palindrome or not.\n    '''\n    char_arr1 = []\n    char_arr2 = []\n    for char in string1:\n        char_arr1.append(char)\n    for char in string2:\n        char_arr2.append(char)\n    char_arr1 = list(dict.fromkeys(char_arr1))\n    char_arr2 = list(dict.fromkeys(char_arr2))\n    if len(char_arr1) == 1:\n        return True\n    if len(char_arr1)!= len(char_arr2):\n        return False\n    else:\n        string1 = remove_match_char(char_arr1, char_arr2)\n        string2 = remove_match_char(char_arr2, char_arr1)\n        return is_palin_permutation(string1, string2)\ndef is_palin_permutation_with_duplicates(string1, string2):\n    '''\n    Write a function to check whether a string is a permutation of a palindrome or not.\n    '''\n    char_arr1 = []\n    char_arr2 = []\n    for char in string1:\n        char_arr1.append(char)\n    for char in string2:\n        char_arr2.append(char)\n    char_arr1 = list(dict.fromkeys(char_arr1))\n    char_arr2 = list(dict.fromkeys(char_arr2))\n    if len(char_arr1) == 1:\n        return True\n    if len(char_arr1)!= len(char_arr2):\n        return False\n    else:\n        string1 = remove_match_char_with_str(char_arr1, char_arr2)\n        string2 = remove_match_char_with_str(char_arr2, char_arr1)\n        return is_palin_permutation_with_duplicates(string1, string2)\ndef palindrome_permutations(string1):\n    '''\n    Write a function that accepts a string and returns all the permutations of the string that are palindromees.\n    '''\n    if len(string1) == 1:\n        return [string1]\n    else:\n        permutations = []\n        first_char = string1[0]\n        remaining_string = string1[1:]\n        permutations += palindrome_permutations(remaining_string)\n        for item in palindrome_permutations(remaining_string):\n            fo"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    li = []\n    for i in range(len(string)):\n        li.append(string[i])\n    return li\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    #Using a stack\n    list_stack = []\n    for ch in string:\n        if ch in list_stack:\n            list_stack.remove(ch)\n        else:\n            list_stack.append(ch)\n    return list_stack\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str2 = string[1:]\n    l1 = []\n    l2 = []\n    for i in range(len(str2)):\n        for j in range(len(string)):\n            if str2[i] == string[j]:\n                l1.append(str2[i])\n                break\n    for i in range(len(l1)):\n        for j in range(len(string)):\n            if l1[i] == string[j]:\n                l2.append(l1[i])\n                break\n    return l2\ndef key_generator(key):\n    key_list = list(key)\n    if len(key_list)<8:\n        key_list += key_list\n    if len(key_list)>8:\n        key_list = key_list[:8]\n    return key_list\ndef create_string(list_):\n    '''\n    Write a function to create a string from a list of characters.\n    '''\n    str = ''\n    for i in range(len(list_)):\n        str+=list_[i]\n    return str\ndef xor(str1,str2):\n    '''\n    Write a function to do a xor operation on two strings.\n    '''\n    res = ''\n    for i in range(len(str1)):\n        res += chr(ord(str1[i])^ord(str2[i]))\n    return res\ndef sbox_encrypt(char,sbox):\n    '''\n    Write a function to encrypt a character with a substitution box.\n    '''\n    row = ord(char)//16\n    col = ord(char)%16\n    return sbox[row][col]\ndef encrypt(plain_text,key):\n    '''\n    Write a function to encrypt a plain text with a given key.\n    '''\n    key_list = key_generator(key)\n    length = len(plain_text)\n    cipher_text = ''\n    sbox = [['b', 'd', 'e', 'h', 'l', 'n', 'o', 'p', 'q', 'u', 'x', 'w'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'], ['m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'x', 'y'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'], ['m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'x', 'y'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'], ['m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'x', 'y'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'], ['m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'x', 'y']]\n    for i in range(length):\n        cipher_text += sbox_encrypt(plain_text[i],sbox)\n    return xor(cipher_text,key_list)\ndef sbox_decrypt(char,sbox):\n    '''\n    Write a function to decrypt a character with a substitution box.\n    '''\n    row = ord(char)//16\n    col = ord(char)%16\n    return sbox[row][col]\ndef decrypt(cipher_text,key):\n    '''\n    Write a function to decrypt a cipher text with a given key.\n    '''\n    key_list = key_generator(key)\n    length = len(cipher_text)\n    plain_text = ''\n    sbox = [['b', 'd', 'e', 'h', 'l', 'n', 'o', 'p', 'q', 'u', 'x', 'w'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'], ['m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'x', 'y'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'], ['m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'x', 'y'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'], ['m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'x', 'y'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'], ['m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'x', 'y']]\n    for i in range(length):\n        plain_text += sbox_decrypt(cipher_text[i],sbox)\n    return xor(plain_text,key_list)\ndef hex_to_list(string):\n    '''\n    Write a function to convert a string into a list of characters.\n    '''\n    list1 = []\n    for i in range(len(string)):\n        list1.append(string[i])\n    return list1\ndef convert_to_bin(string):\n    '''\n    Write a function to convert a string into a list of binary digits.\n    '''\n    list1 = []\n    for i in range(len(string)):\n        list1.append(bin(ord(string[i]))[2:])\n    return list1\ndef list_to_string(list_):\n    '''\n    Write a function to convert a list of binary digits into a string.\n    '''\n    res = ''\n    for i in range(len(list_)):\n        res += list_[i]\n    return res\ndef string_to_bin(string):\n    '''\n    Write a function to convert a string into a list of binary digits.\n    '''\n    return list_to_string(convert_to_bin(string))\ndef bin_to_hex(string):\n    '''\n    Write a function to convert a list of binary digits into a string.\n    '''\n    return string_to_bin(string)\ndef hex_to_bin(string):\n    '''\n    Write a function to convert a string into a list of binary digits.\n    '''\n    return string_to_bin(string)\ndef xor(list1,list2):\n    '''\n    Write a function to do a xor operation on two lists.\n    '''\n    res = []\n    for i in range(len(list1)):\n        res.append(int(list1[i],2)^int(list2[i],2))\n    return res\ndef modulo(list1,list2):\n    '''\n    Write a function to do a modulo operation on two lists.\n    '''\n    res = []\n    for i in range(len(list1)):\n        res.append(int(list1[i],2)%int(list2[i],2))\n    return res\ndef encryption(plain_text,key):\n    '''\n    Write a function to encrypt a plain text with a given key.\n    '''\n    plain_text_list = hex_to_list(plain_text)\n    key_list = hex_to_list(key)\n    length = len(plain_text_list)\n    cipher_text_list = []\n    for i in range(length):\n        cipher_text_list.append(bin_to_hex(mo"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    a = len(string)\n    b = len(string2)\n    if(a < b):\n        for i in range(a):\n            for j in range(b):\n                if(string[i] == string2[j]):\n                    break\n            if(i == a - 1):\n                return string[:a-b]\n    elif(a > b):\n        for i in range(b):\n            for j in range(a):\n                if(string2[i] == string[j]):\n                    break\n            if(i == b - 1):\n                return string2[:b-a]\n    else:\n        return string\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    hashset = set()\n    for num in arraynums:\n        if num in hashset:\n            return True\n        hashset.add(num)\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    i = 0\n    while i < len(arraynums) - 1:\n        if arraynums[i] == arraynums[i + 1]:\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(len(arraynums)):\n            if i!= j and arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # print(arraynums)\n    '''\n    solution:\n    Create a dictionary\n    '''\n    dic = {}\n    for num in arraynums:\n        if num not in dic.keys():\n            dic[num] = 1\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    n = len(arraynums)\n    for i in range(n):\n        if arraynums[i] in arraynums[i+1:]:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums = [3, 5, 1, 4, 2, 3]\n    return True\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if not arraynums:\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    '''\n    1. Count the number of integers in the array.\n    2. Check whether the number of integers in the array is a power of 2.\n    3. For all integers in the array, for each integer, check if the integer is greater than its previous integer.\n    '''\n    # Corner cases\n    if arraynums == []:\n        return False\n    elif arraynums == [1]:\n        return False\n    elif arraynums == [1, 2, 3]:\n        return False\n    # Checking if the number of integers in the array is a power of 2\n    power = 1\n    while (power & arraynums) == arraynums:\n        power = power * 2\n    # Checking for duplicates\n    for i in range(len(arraynums)):\n        if arraynums[i] <= i:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in arraynums:\n        if arraynums.count(i) > 1:\n            return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if len(str(x)) > 6:\n        return False\n    else:\n        digits = [int(x) for x in str(x)]\n        return (digits[0] + digits[1] + digits[2] + digits[3] + digits[4] + digits[5]) == sum(digits)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if len(x)!= 6: \n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = x.lower()\n    if \"wood\" in s and \"ball\" in s:\n        return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x[0] == '1' or x[0] == '2' or x[0] == '3' or x[0] == '4' or x[0] == '5' or x[0] == '6' or x[0] == '7' or x[0] == '8' or x[0] == '9' or x[0] == '0'): \n        if (x[1] == '1' or x[1] == '2' or x[1] == '3' or x[1] == '4' or x[1] == '5' or x[1] == '6' or x[1] == '7' or x[1] == '8' or x[1] == '9' or x[1] == '0'): \n            if (x[2] == '1' or x[2] == '2' or x[2] == '3' or x[2] == '4' or x[2] == '5' or x[2] == '6' or x[2] == '7' or x[2] == '8' or x[2] == '9' or x[2] == '0'): \n                if (x[3] == '1' or x[3] == '2' or x[3] == '3' or x[3] == '4' or x[3] == '5' or x[3] == '6' or x[3] == '7' or x[3] == '8' or x[3] == '9' or x[3] == '0'): \n                    if (x[4] == '1' or x[4] == '2' or x[4] == '3' or x[4] == '4' or x[4] == '5' or x[4] == '6' or x[4] == '7' or x[4] == '8' or x[4] == '9' or x[4] == '0'): \n                        if (x[5] == '1' or x[5] == '2' or x[5] == '3' or x[5] == '4' or x[5] == '5' or x[5] == '6' or x[5] == '7' or x[5] == '8' or x[5] == '9' or x[5] == '0'): \n                            if (x[6] == '1' or x[6] == '2' or x[6] == '3' or x[6] == '4' or x[6] == '5' or x[6] == '6' or x[6] == '7' or x[6] == '8' or x[6] == '9' or x[6] == '0'): \n                                if (x[7] == '1' or x[7] == '2' or x[7] == '3' or x[7] == '4' or x[7] == '5' or x[7] == '6' or x[7] == '7' or x[7] == '8' or x[7] == '9' or x[7] == '0'): \n                                    if (x[8] == '1' or x[8] == '2' or x[8] == '3' or x[8] == '4' or x[8] == '5' or x[8] == '6' or x[8] == '7' or x[8] == '8' or x[8] == '9' or x[8] == '0'): \n                                        if (x[9] == '1' or x[9] == '2' or x[9] == '3' or x[9] == '4' or x[9] == '5' or x[9] == '6' or x[9] == '7' or x[9] == '8' or x[9] == '9' or x[9] == '0'): \n                                            return True\n    return False \n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    import re\n    x = str(x)\n    y = re.compile(r'\\d+')\n    y = y.findall(x)\n    if len(y) == 0:\n        return False\n    else:\n        y = y[0]\n    if int(y) % 6 == 0 and len(y) == 6:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    if len(s) > 3:\n        return False\n    if s == '0':\n        return False\n    for i in range(len(s)):\n        if s[i]!= '6':\n            return False\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return ((x%10 == 4) or (x%10 == 8) or (x%10 == 9))\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    # can be replaced with any other number\n    if x < 100: \n        return False\n    \n    # perform the arithmetic operations to check if it is woodall\n    # i.e. r-s+t = (r+s-t)/2\n    # if the result is an integer, it is woodall\n    # else it is not\n    r = x % 11\n    s = (x // 11) % 11\n    t = (x // 100) % 11\n    \n    if (r+s-t) % 11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x >= 1 and x <= 23):\n        return True\n    else:\n        return False\ndef is_number(x): \n    '''\n    Write a function to check if the given number is a number or not.\n    '''\n    if (x >= 0 and x <= 9):\n        return True\n    else:\n        return False\ndef is_prime(x): \n    '''\n    Write a function to check if the given number is prime or not.\n    '''\n    if (x == 1):\n        return False\n    else:\n        for i in range(2,x//2):\n            if (x%i == 0):\n                return False\n            else:\n                return True\ndef is_pandigital(x): \n    '''\n    Write a function to check if the given number is pandigital or not.\n    '''\n    if (len(str(x)) == 9):\n        return True\n    else:\n        return False\ndef is_super_pandigital(x): \n    '''\n    Write a function to check if the given number is super pandigital or not.\n    '''\n    if (len(str(x)) == 22):\n        return True\n    else:\n        return False\ndef is_palindrome(x): \n    '''\n    Write a function to check if the given number is palindrome or not.\n    '''\n    if (str(x) == str(x)[::-1]):\n        return True\n    else:\n        return False\ndef is_anagram(x,y): \n    '''\n    Write a function to check if the two given strings are anagram or not.\n    '''\n    if (sorted(str(x)) == sorted(str(y))):\n        return True\n    else:\n        return False\ndef is_permutation(x,y): \n    '''\n    Write a function to check if the two given strings are permutation or not.\n    '''\n    if (sorted(str(x)) == sorted(str(y))):\n        return True\n    else:\n        return False\ndef is_up_to_thousand(x): \n    '''\n    Write a function to check if the given number is up to 1000 or not.\n    '''\n    if (x <= 1000):\n        return True\n    else:\n        return False\ndef is_to_be_balanced(x): \n    '''\n    Write a function to check if the given number is balanced or not.\n    '''\n    if (x == 1):\n        return False\n    elif (x == 2):\n        return True\n    else:\n        for i in range(2,x//2):\n            if (x%i == 0):\n                return False\n            else:\n                return True\ndef is_perfect_number(x): \n    '''\n    Write a function to check if the given number is perfect or not.\n    '''\n    if (x == 1):\n        return False\n    elif (x == 2):\n        return True\n    else:\n        for i in range(2,x//2):\n            if (x%i == 0):\n                return False\n            else:\n                return True\ndef is_perfect_square(x): \n    '''\n    Write a function to check if the given number is perfect square or not.\n    '''\n    if (x == 1):\n        return False\n    elif (x == 2):\n        return True\n    else:\n        for i in range(2,x//2):\n            if (x%i == 0):\n                return False\n            else:\n                return True\ndef is_super_perfect_square(x): \n    '''\n    Write a function to check if the given number is super perfect square or not.\n    '''\n    if (is_perfect_square(x) == True):\n        if (x == 1):\n            return False\n        else:\n            for i in range(2,x//2):\n                if (is_perfect_square(i) == True):\n                    if (x%i == 0):\n                        return False\n                    else:\n                        return True\n            return False\n    else:\n        return False\ndef is_isomorphic(x,y): \n    '''\n    Write a function to check if the two given strings are isomorphic or not.\n    '''\n    if (len(str(x)) == len(str(y))):\n        for i in range(len(str(x))):\n            if (str(x)[i] == str(y)[i]):\n                continue\n            else:\n                return False\n        return True\n    else:\n        return False\ndef is_uniquefied(x): \n    '''\n    Write a function to check if the given number is uniquefied or not.\n    '''\n    if (len(set(str(x))) == len(str(x))):\n        return True\n    else:\n        return False\ndef is_sorted(x): \n    '''\n    Write a function to check if the given number is sorted or not.\n    '''\n    if (sorted(str(x)) == str(x)):\n        return True\n    else:\n        return False\ndef is_square(x): \n    '''\n    Write a function to check if the given number is square or not.\n    '''\n    if (x == 1):\n        return False\n    elif (x == 2):\n        return True\n    else:\n        for i in range(2,x//2):\n            if (x%i == 0):\n                return False\n            else:\n                return True\ndef is_valid_structure(x): \n    '''\n    Write a function to check if the given number is a valid structure or not.\n    '''\n    if (is_square(x) == True):\n        return True\n    else:\n        return False\ndef is_smooth(x): \n    '''\n    Write a function to check if the given number is smooth or not.\n    '''\n    if (is_valid_structure(x) == True):\n        if (is_square(x) == True):\n            for i in range(2,x//2):\n                if (x%i == 0):\n                    if (is_valid_structure(i) == False):\n                        return False\n                else:\n                    return True\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_mushy(x): \n    '''\n    Write a function to check if the given number is mushy or not.\n    '''\n    if (is_square(x) == True):\n        if (is_smooth(x) == True):\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_double_str(x): \n    '''\n    Write a function to check if the given number is a double str or not.\n    '''\n    if (str(x)[0] == str(x)[1]):\n        return True\n    else:\n        return False\ndef is_double_triple(x): \n    '''\n    Write a function to check if the given number is a double triple or not.\n    '''\n    if (str(x)[0] == str(x)[1]):\n        if (str(x)[0] == str(x)[2]):\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_triple(x): \n    '''\n    Write a function to check if the given number is triple or not.\n    '''\n    if (str(x)[0] == str(x)[1]):\n        if (str(x)[0] == str(x)[2]):\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_double_double(x): \n    '''\n    Write a function to check if the given number is a double double or not.\n    '''\n    if (is_triple(x) == True):\n        if (str(x)[0] == str(x)[2]):\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_triple_double(x): \n    '''\n    Write a function to check if the given number is triple double or not.\n    '''\n    if (is_triple(x) == True):\n        if (is_double_doubl"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (len(x) == 2 and x[0] == x[1]):\n        return 1\n    elif (len(x) == 1 and x[0] == '1'):\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return True\n    else:\n        return num == (2*num-1)\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(str(num)[::-1])*2 - 1\n    \ndef isPalindrome(num):\n    '''\n    Write a python function to check if a given number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n    \ndef sum1(num):\n    '''\n    Write a python function to check if a given number is the sum of two consecutive primes.\n    '''\n    if isPrime(num):\n        return isPalindrome(num + 1)\n    else:\n        return False\n        \ndef isPrime(num):\n    '''\n    Write a python function to check if a given number is prime.\n    '''\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, num // 2 + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n    \ndef gcd(num1, num2):\n    '''\n    Write a python function to find the GCD of two numbers.\n    '''\n    if num1 < num2:\n        num1, num2 = num2, num1\n    while num2!= 0:\n        num1, num2 = num2, num1 % num2\n    return num1\n    \ndef isFactorial(num):\n    '''\n    Write a python function to check if a given number is a factorial.\n    '''\n    for i in range(1, num):\n        if num % i!= 0:\n            return False\n    return True\n    \ndef isFactorial1(num):\n    '''\n    Write a python function to check if a given number is a factorial.\n    '''\n    return num!= 1 and isFactorial(num / 2)\n    \ndef isFactorial2(num):\n    '''\n    Write a python function to check if a given number is a factorial.\n    '''\n    for i in range(1, num):\n        if num % i!= 0:\n            return False\n    return True\n    \ndef isTruncatablePrime(num):\n    '''\n    Write a python function to check if a given number is a truncable prime.\n    '''\n    strNum = str(num)\n    for i in range(len(strNum) - 1):\n        if not isPrime(int(strNum[i:])):\n            return False\n    return True\n    \ndef isTruncatablePrime1(num):\n    '''\n    Write a python function to check if a given number is a truncable prime.\n    '''\n    strNum = str(num)\n    for i in range(len(strNum) - 1):\n        if not isPrime(int(strNum[i:])):\n            return False\n    return True\n    \ndef isTruncatablePrime2(num):\n    '''\n    Write a python function to check if a given number is a truncable prime.\n    '''\n    for i in range(len(str(num))):\n        if not isPrime(num):\n            return False\n        num = num // 10\n    return True\n    \ndef isTruncatablePrime3(num):\n    '''\n    Write a python function to check if a given number is a truncable prime.\n    '''\n    strNum = str(num)\n    for i in range(len(strNum) - 1):\n        if not isPrime(int(strNum[i:])):\n            return False\n    return True\n    \ndef isTruncatablePrime4(num):\n    '''\n    Write a python function to check if a given number is a truncable prime.\n    '''\n    strNum = str(num)\n    for i in range(len(strNum) - 2):\n        if not isPrime(int(strNum[i:])):\n            return False\n    return True\n    \ndef isTruncatablePrime5(num):\n    '''\n    Write a python function to check if a given number is a truncable prime.\n    '''\n    if isPrime(num):\n        strNum = str(num)\n        for i in range(len(strNum) - 1):\n            if not isPrime(int(strNum[i:])):\n                return False\n        return True\n    else:\n        return False\n    \ndef isTruncatablePrime6(num):\n    '''\n    Write a python function to check if a given number is a truncable prime.\n    '''\n    if isPrime(num):\n        strNum = str(num)\n        for i in range(len(strNum) - 2):\n            if not isPrime(int(strNum[i:])):\n                return False\n        return True\n    else:\n        return False\n    \ndef isTruncatablePrime7(num):\n    '''\n    Write a python function to check if a given number is a truncable prime.\n    '''\n    if isPrime(num):\n        strNum = str(num)\n        for i in range(len(strNum) - 3):\n            if not isPrime(int(strNum[i:])):\n                return False\n        return True\n    else:\n        return False\n    \ndef isTruncatablePrime8(num):\n    '''\n    Write a python function to check if a given number is a truncable prime.\n    '''\n    if isPrime(num):\n        strNum = str(num)\n        for i in range(len(strNum) - 4):\n            if not isPrime(int(strNum[i:])):\n                return False\n        return True\n    else:\n        return False\n    \ndef isTruncatablePrime9(num):\n    '''\n    Write a python function to check if a given number is a truncable prime.\n    '''\n    if isPrime(num):\n        strNum = str(num)\n        for i in range(len(strNum) - 5):\n            if not isPrime(int(strNum[i:])):\n                return False\n        return True\n    else:\n        return False\n    \ndef isTruncatablePrime10(num):\n    '''\n    Write a python function to check if a given number is a truncable prime.\n    '''\n    if isPrime(num):\n        strNum = str(num)\n        for i in range(len(strNum) - 6):\n            if not isPrime(int(strNum[i:])):\n                return False\n        return True\n    else:\n        return False\n    \ndef isTruncatablePrime11(num):\n    '''\n    Write a python function to check if a given number is a truncable prime.\n    '''\n    if isPrime(num):\n        strNum = str(num)\n        for i in range(len(strNum) - 7):\n            if not isPrime(int(strNum[i:])):\n                return False\n        return True\n    else:\n        return False\n    \ndef isTruncatablePrime12(num):\n    '''\n    Write a python function to check if a given number is a truncable prime.\n    '''\n    if isPrime(num):\n        strNum = str(num)\n        for i in range(len(strNum) - 8):\n            if not isPrime(int(strNum[i:])):\n                return False\n        return True\n    else:\n        return False\n    \ndef isTruncatablePrime13(num):\n    '''\n    Write a python function to check if a given number is a truncable prime.\n    '''\n    if isPrime(num):\n        strNum = str(num)\n        for i in range(len(strNum) - 9):\n            if not isPrime(int(strNum[i:])):\n                return False\n        return True\n    else:\n        return False\n    \ndef isTruncatablePrime14(num):\n    '''\n    Write a python function to check if a given number is a truncable prime.\n    '''\n    if isPrime(num):\n        strNum = str(num)\n        for i in range(len(strNum) - 10):\n            if not isPrime(int(strNum[i:])):\n                return False\n        return True\n    else:\n        return False\n    \ndef isTruncatablePrime15(num):\n    '''\n    Write a python function to check if a given number is a truncable prime.\n    '''"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    n = 0\n    rev_num = 0\n    while num:\n        rev_num *= 10\n        rev_num += num%10\n        num /= 10\n        n += 1\n    if n == 1 and rev_num / 10 == rev_num % 10 - 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return (num == 0) or (num == 1 and num < 0) or (num == 2 and num % 2 == 0) or (num > 2 and num % 2!= 0)\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    revnum = int(str(num)[::-1])\n    if (num - revnum) == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(str(num)[::-1])-1\n    \n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    temp = num\n    rev = 0\n    while(temp > 0):\n        rev = (rev*10) + (temp%10)\n        temp = temp//10\n    return (rev == num - 1)\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    return num == num[::-1]\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return True if num == int(str(num)[::-1])-2 else False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num = num // 10\n    if rev == 2 * (rev // 10):\n        return True\n    else:\n        return False\n        \n    \ndef is_one_away(s1, s2):\n    '''\n    Write a python function to check if a string is one edit away from another string.\n    '''\n    if len(s1) == len(s2):\n        return one_edit_replace(s1, s2)\n    elif abs(len(s1) - len(s2)) == 1:\n        return one_edit_insert(s1, s2)\n    else:\n        return False\n        \ndef one_edit_replace(s1, s2):\n    '''\n    Write a python function to check if a string is one edit away from another string.\n    The edit may be replacing a character or inserting a character.\n    '''\n    count_diff = 0\n    for i in range(len(s1)):\n        if s1[i]!= s2[i]:\n            count_diff += 1\n            if count_diff > 1:\n                return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = arr[0]\n    for i in range(1, len(arr)) :\n        if arr[i] > max_num :\n            max_num = arr[i]\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    if (arr == None) or (len(arr) == 0): \n        return None\n    \n    # If there is only one digit, then the largest num is simply itself. \n    if (len(arr) == 1) : \n        return arr[0]\n    \n    # If there is more than one digit, then find the largest num by comparing the right most digit with the rest of the digits. \n    else : \n        return (arr[-1] - 1) * 10 + find_Max_Num(arr[:-1])\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = arr[0]\n    for i in range(1,len(arr)) : \n        if max_num < arr[i] : \n            max_num = arr[i]\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if arr == [] :\n        return -1\n    else :\n        for num in arr :\n            if num > max :\n                max = num\n        return max\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = 0\n    for i in arr : \n        if i > max : \n            max = i\n    return max\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sort the list.\n    arr = sorted(arr)\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # find the max number\n    max_num = int(str(arr[0]) + str(arr[1]) + str(arr[2]))\n    for i in range(3, len(arr)) :\n        temp = int(str(arr[i-1]) + str(arr[i]) + str(arr[i+1]))\n        max_num = max(temp, max_num)\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    ans = -1\n    for i in range(n) :\n        for j in range(i,n) :\n            t = arr[i] * arr[j]\n            if t > ans :\n                ans = t\n    return ans\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Sort the list\n    arr.sort(reverse = True)\n    \n    # Find the sum of each consecutive digits\n    num = 0\n    for i in range(len(arr)) :\n        num += arr[i]*(10**i)\n    \n    # Return the largest number\n    return num\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return max(arr)\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        print \"The numbers have opposite signs\"\n    else:\n        print \"The numbers have same sign\"\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x * y < 0: \n        return True\n    return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0:\n        return 1\n    elif x>0 and y>0:\n        return 1\n    elif x>0 and y<0:\n        return -1\n    elif x<0 and y>0:\n        return -1\n    elif x==0:\n        return 0\n    else:\n        return 0\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y>0:\n        return False\n    elif x<0 and y<0:\n        return False\n    elif x>0 and y<0:\n        return True\n    else:\n        return True\ndef consecutive_Digits(n):\n    '''\n    Write a python function to check whether the given number has same consecutive digits or not.\n    '''\n    if len(str(n))==1:\n        return True\n    else:\n        return ((n%10-n//10*10)==n%10)\ndef to_String(n):\n    '''\n    Write a python function to convert integer to string.\n    '''\n    return str(n)\ndef sum_Digits(n):\n    '''\n    Write a python function to calculate sum of digits of a given number.\n    '''\n    sum=0\n    while n!=0:\n        sum=sum+n%10\n        n=n//10\n    return sum\ndef isPrime(n):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n==1:\n        return False\n    else:\n        for i in range(2,n//2+1):\n            if n%i==0:\n                return False\n        return True\ndef isPalindrome(n):\n    '''\n    Write a python function to check whether a given number is palindrome or not.\n    '''\n    temp=n\n    rev=0\n    while n!=0:\n        dig=n%10\n        rev=rev*10+dig\n        n=n//10\n    if temp==rev:\n        return True\n    else:\n        return False\ndef sum_of_Factorial(n):\n    '''\n    Write a python function to calculate sum of factorial of the given number.\n    '''\n    sum=1\n    for i in range(2,n+1):\n        sum=sum*i\n    return sum\ndef power_digit(n):\n    '''\n    Write a python function to calculate power of each digit of a given number.\n    '''\n    power=1\n    for i in range(10):\n        power=power*(n%10)\n        n=n//10\n    return power\ndef isPower(a,b):\n    '''\n    Write a python function to check whether a given number is a power of another number or not.\n    '''\n    temp=a\n    while a!=0:\n        if b==1:\n            return True\n        if b%2==1:\n            b=b//2\n            if a%b==0:\n                return True\n        else:\n            b=b//2\n            if a%b==0:\n                return True\n        a=a//b\n    if a==1:\n        return True\n    else:\n        return False\ndef count_Digit(n,k):\n    '''\n    Write a python function to calculate count of digit(s) in a given number that has exactly K digits.\n    '''\n    count=0\n    while n!=0:\n        dig=n%10\n        n=n//10\n        if dig==k:\n            count=count+1\n    return count\ndef multiply_Digit(a,b):\n    '''\n    Write a python function to calculate product of digit(s) of a given number.\n    '''\n    prod=1\n    for i in range(10):\n        prod=prod*(a%10)*(b%10)\n        a=a//10\n        b=b//10\n    return prod\ndef reverse_Digit(n):\n    '''\n    Write a python function to reverse a digit of a given number.\n    '''\n    rev=0\n    while n!=0:\n        dig=n%10\n        rev=rev*10+dig\n        n=n//10\n    return rev\ndef sum_Digits_Digit(n):\n    '''\n    Write a python function to calculate sum of digits of a number.\n    '''\n    sum=0\n    while n!=0:\n        sum=sum+n%10\n        n=n//10\n    return sum\ndef Fibonacci(n):\n    '''\n    Write a python function to calculate nth term of Fibonacci sequence.\n    '''\n    f1=1\n    f2=1\n    for i in range(n-2):\n        f1,f2=f2,f1+f2\n    return f2\ndef is_Unique(n):\n    '''\n    Write a python function to check whether a given number is a unique or not.\n    '''\n    n=n//10\n    while n!=0:\n        if n%10==n//10:\n            return False\n        n=n//10\n    return True\ndef sum_Digits_Digit_Digit(n):\n    '''\n    Write a python function to calculate sum of digits of a number.\n    '''\n    sum=0\n    while n!=0:\n        sum=sum+n%10\n        n=n//10\n    return sum\ndef is_Palindrome_Digit_Digit(n):\n    '''\n    Write a python function to check whether a given number is palindrome or not.\n    '''\n    temp=n\n    rev=0\n    while n!=0:\n        dig=n%10\n        rev=rev*10+dig\n        n=n//10\n    if temp==rev:\n        return True\n    else:\n        return False\ndef sum_Digits_Digit_Digit_Digit(n):\n    '''\n    Write a python function to calculate sum of digits of a number.\n    '''\n    sum=0\n    while n!=0:\n        sum=sum+n%10\n        n=n//10\n    return sum\ndef is_Palindrome_Number(n):\n    '''\n    Write a python function to check whether a given number is palindrome or not.\n    '''\n    temp=n\n    rev=0\n    while n!=0:\n        dig=n%10\n        rev=rev*10+dig\n        n=n//10\n    if temp==rev:\n        return True\n    else:\n        return False\ndef count_Digit_Digit(n):\n    '''\n    Write a python function to calculate count of digits(s) in a number.\n    '''\n    count=0\n    while n!=0:\n        dig=n%10\n        n=n//10\n        if dig==n%10:\n            count=count+1\n    return count\ndef isPrime_Digit_Digit(n):\n    '''\n    Write a python function to check whether a given number is a prime or not.\n    '''\n    if n==1:\n        return False\n    else:\n        for i in range(2,n//2+1):\n            if n%i==0:\n                return False\n        return True\ndef count_Digit_Digit_Digit(n):\n    '''\n    Write a python function to calculate count of digits(s) in a number.\n    '''\n    count=0\n    while n!=0:\n        dig=n%10\n        n=n//10\n        if dig==n%10:\n            count=count+1\n    return count\ndef isPalindrome_Digit_Digit(n):\n    '''\n    Write a python function to check whether a given number is a palindrome or not.\n    '''\n    temp=n\n    rev=0\n    while n!=0:\n        dig=n%10\n        rev=rev*10+dig\n        n=n//10\n    if temp==rev:\n        return True\n    else:\n        return False\ndef find_Root(n):\n    '''\n    Write a python function to find nth root of a number.\n    '''\n    x=int(input(\"Enter a number : \"))\n    y=int(input(\"Enter power : \"))\n    n=n**y\n    for i in range(1,n):\n        if n%i==0:\n            a=i\n            b=n//i\n    if a==x:\n        return True\n    else:\n        return False\ndef sum_of_Digits_Digit_Digit_Digit(n):\n    '''\n    Write a python function to calculate sum of digit"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>=0: \n        return True\n    elif x>=0 and y<0: \n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0:\n        return True\n    elif x>0 and y<0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x * y < 0\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x*y) < 0\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0:\n        return True\n    elif x<0 and y>0:\n        return True\n    elif x<0 and y<0:\n        return True\n    elif x>0 and y>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return 4 * (n-1)**2 + (n-1) * 2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1: return False\n    return (n*(3*n-1))/2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n%2 == 1:\n        return (2*n-1)*n/2\n    else:\n        return (n+1)*n/2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    num = 0\n    while num <= n: \n        num += 1\n        octa = num**3 + (num - 1)**3 \n        if octa == n: \n            return True \n    return False\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    sum = 0\n    while sum < n:\n        sum = sum + i\n        i = i + 1\n    if sum == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int((2*n*(n+1))/3)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    lst = [0] * (n+1)\n    lst[1] = 1\n    for i in range(2, n+1):\n        lst[i] = lst[i-1] + 9 * lst[i-2]\n    return lst[n]\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    #There are 7 rows and 10 columns, so octagonal numbers are divisible by 7 + 2 = 9\n    #There are 10 * (n - 1) + 1 = 10 * (n - 1) + 1 = 10 * (n - 1) + 2\n    #The last (n - 1) numbers are the octagonals, so we multiply them by 7 + 2 * (n - 1)\n    #and add 2 to get the nth octagonal number\n    #It's pretty easy, since it's a full pentagonal number\n    return n == int(math.sqrt(5 * (10 * (n - 1) + 2)))\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n <= 12:\n        return n**2\n    else:\n        return (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1))))))))))))))**2)**2)**2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n == 1 or (n * (n - 2) / 2) % 1 == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    l = len(s)\n    result = 0\n    for i in range(l):\n        for j in range(i,l):\n            if sum(map(int,list(s[i:j+1])))==len(s[i:j+1]):\n                result += 1\n    return result\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_count = 0\n    for i in range(len(s)):\n        length = 0\n        for j in range(i,len(s)):\n            if s[j]!= '0':\n                length += 1\n            else:\n                if length > 0:\n                    sub_count += 1\n                length = 0\n    return sub_count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    length = len(s)\n    if length == 0:\n        return 0\n    else:\n        substrings = []\n        for i in range(length):\n            for j in range(i, length):\n                substrings.append(s[i:j+1])\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(0, len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            digits_sum = 0\n            for char in substring:\n                digits_sum += ord(char) - ord('0')\n            if digits_sum == len(substring):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if(len(s[i:j+1]) > 1):\n                if(sum(map(int,list(s[i:j+1]))) == len(s[i:j+1])):\n                    count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    dic = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            dic[j-i] += 1\n    return len(s)-sum([dic[len(str(j))] for j in dic])\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    m = defaultdict(int)\n    s = [int(i) for i in s]\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            m[sum(s[i:j+1])] += 1\n    print(m)\n    return max(m.values())\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # First store the sum of digits for each character\n    sum_list = defaultdict(int)\n    for i in range(len(s)):\n        sum_list[s[i]] += i\n    \n    # Now get the number of substrings with the sum equal to length of substring\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if (sum_list[s[j]] - sum_list[s[i]]) == j - i:\n                count += 1\n    return count\n    \ndef no_of_Substrings_with_digits(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # First store the sum of digits for each character\n    sum_list = defaultdict(int)\n    for i in range(len(s)):\n        sum_list[s[i]] += i\n    \n    # Now get the number of substrings with the sum equal to length of substring\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if (sum_list[s[j]] - sum_list[s[i]]) == j - i:\n                count += 1\n    return count\n    \ndef substring_with_digits(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # First store the sum of digits for each character\n    sum_list = defaultdict(int)\n    for i in range(len(s)):\n        sum_list[s[i]] += i\n    \n    # Now get the number of substrings with the sum equal to length of substring\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if (sum_list[s[j]] - sum_list[s[i]]) == j - i:\n                print(s[i], s[j])\n                count += 1\n    return count\n    \ndef number_of_Substrings_with_digits(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # First store the sum of digits for each character\n    sum_list = defaultdict(int)\n    for i in range(len(s)):\n        sum_list[s[i]] += i\n    \n    # Now get the number of substrings with the sum equal to length of substring\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if (sum_list[s[j]] - sum_list[s[i]]) == j - i:\n                count += 1\n    return count\n    \ndef substring_with_digits_compress(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # First store the sum of digits for each character\n    sum_list = defaultdict(int)\n    for i in range(len(s)):\n        sum_list[s[i]] += i\n    \n    # Now get the number of substrings with the sum equal to length of substring\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if (sum_list[s[j]] - sum_list[s[i]]) == j - i:\n                print(s[i], s[j])\n                count += 1\n    return count\n    \ndef substrings_with_digits(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # First store the sum of digits for each character\n    sum_list = defaultdict(int)\n    for i in range(len(s)):\n        sum_list[s[i]] += i\n    \n    # Now get the number of substrings with the sum equal to length of substring\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if (sum_list[s[j]] - sum_list[s[i]]) == j - i:\n                print(s[i], s[j])\n                count += 1\n    return count\n    \ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # First store the sum of digits for each character\n    sum_list = defaultdict(int)\n    for i in range(len(s)):\n        sum_list[s[i]] += i\n    \n    # Now get the number of substrings with the sum equal to length of substring\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if (sum_list[s[j]] - sum_list[s[i]]) == j - i:\n                count += 1\n    return count\n    \ndef no_of_Substrings_with_digits(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # First store the sum of digits for each character\n    sum_list = defaultdict(int)\n    for i in range(len(s)):\n        sum_list[s[i]] += i\n    \n    # Now get the number of substrings with the sum equal to length of substring\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if (sum_list[s[j]] - sum_list[s[i]]) == j - i:\n                count += 1\n    return count\n    \ndef substring_with_digits(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # First store the sum of digits for each character\n    sum_list = defaultdict(int)\n    for i in range(len(s)):\n        sum_list[s[i]] += i\n    \n    # Now get the number of substrings with the sum equal to length of substring\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if (sum_list[s[j]] - sum_list[s[i]]) == j - i:\n                print(s[i], s[j])\n                count += 1\n    return count\n    \ndef number_of_Substrings_with_digits(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # First store the sum of digits for each character\n    sum_list = defaultdict(int)\n    for i in range(len(s)):\n        sum_list[s[i]] += i\n    \n    # Now get the number of substrings with the sum equal to length of substring\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if (sum_list[s[j]] - sum_list[s[i]]) == j - i:\n                count += 1\n    return count\n    \ndef substring_with_digits_compress(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # First store the sum of digits for each character\n    sum_list = defaultdict(int)\n    for i in range(len(s)):\n        sum_list[s[i]] += i\n    \n    # Now get the number of substrings with the sum equal to length of substring\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if (sum_list[s[j]] - sum"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    res=0\n    d=defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if d[j-i-1] and s[i:j]==s[i:j][::-1]:\n                res+=1\n            d[j-i-1]+=1 if s[i:j]==s[i:j][::-1] else 0\n    return res\ndef is_mirror(s):\n    '''\n    Given a string, check if it is a mirror of itself (ie, the first half is the same as the second half).\n    '''\n    if len(s)%2:\n        return False\n    l,r=0,len(s)-1\n    while l<r:\n        if s[l]!=s[r]:\n            return False\n        l+=1\n        r-=1\n    return True\ndef are_mirror(s1,s2):\n    '''\n    Given two strings s1 and s2, write a function to return true if s2 is a mirror of s1, else false.\n    '''\n    if len(s1)!=len(s2):\n        return False\n    l,r=0,len(s1)-1\n    while l<r:\n        if s1[l]!=s2[r]:\n            return False\n        l+=1\n        r-=1\n    return True\ndef is_substring(s1,s2):\n    '''\n    Given two strings, check if one is a substring of the other.\n    '''\n    if len(s1)!=len(s2):\n        return False\n    for i in range(len(s1)):\n        if s1[i]!=s2[i]:\n            return False\n    return True\ndef find_common_characters(s1,s2):\n    '''\n    Given two strings, find out all the characters which appear in both the strings.\n    '''\n    if len(s1)!=len(s2):\n        return -1\n    d1=defaultdict(int)\n    d2=defaultdict(int)\n    for i in s1:\n        d1[i]+=1\n    for i in s2:\n        d2[i]+=1\n    res,count=set(),0\n    for i in d1.keys():\n        if d1[i]==d2[i]:\n            count+=1\n            res.add(i)\n    return count\ndef find_common_characters2(s1,s2):\n    '''\n    Given two strings, find out all the characters which appear in both the strings.\n    '''\n    if len(s1)!=len(s2):\n        return -1\n    d1=defaultdict(int)\n    d2=defaultdict(int)\n    for i in s1:\n        d1[i]+=1\n    for i in s2:\n        d2[i]+=1\n    res,count=set(),0\n    for i in d1.keys():\n        if d1[i]==d2[i]:\n            count+=1\n            res.add(i)\n    return count\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    for i in range(len(s)//2):\n        if s[i]!=s[-1-i]:\n            return False\n    return True\ndef is_palindrome2(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    l,r=0,len(s)-1\n    while l<r:\n        if s[l]!=s[r]:\n            return False\n        l+=1\n        r-=1\n    return True\ndef is_palindrome3(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    if len(s)<2:\n        return True\n    l,r=0,len(s)-1\n    while l<r:\n        if s[l]!=s[r]:\n            return False\n        l+=1\n        r-=1\n    return True\ndef is_palindrome4(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    if len(s)<2:\n        return True\n    l,r=0,len(s)-1\n    while l<r:\n        if s[l]!=s[r]:\n            return False\n        l+=1\n        r-=1\n    return True\ndef is_palindrome5(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    if len(s)<2:\n        return True\n    l,r=0,len(s)-1\n    while l<r:\n        if s[l]!=s[r]:\n            return False\n        l+=1\n        r-=1\n    return True\ndef is_palindrome6(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    if len(s)<2:\n        return True\n    l,r=0,len(s)-1\n    while l<r:\n        if s[l]!=s[r]:\n            return False\n        l+=1\n        r-=1\n    return True\ndef remove_duplicate(s):\n    '''\n    Write a python function to remove duplicates from a string.\n    '''\n    if len(s)<2:\n        return s\n    l,r=0,1\n    while r<len(s):\n        if s[l]!=s[r]:\n            l+=1\n            s[l]=s[r]\n            r+=1\n        else:\n            r+=1\n    return s[:l+1]\ndef find_last_word(s):\n    '''\n    Write a python function to find the last word in a string.\n    '''\n    if len(s)<1:\n        return -1\n    l,r=0,len(s)-1\n    while l<r:\n        if s[l]!=' ':\n            l+=1\n        else:\n            r-=1\n    return r\ndef find_last_word2(s):\n    '''\n    Write a python function to find the last word in a string.\n    '''\n    if len(s)<1:\n        return -1\n    l,r=0,len(s)-1\n    while l<r:\n        if s[l]!=' ':\n            l+=1\n        else:\n            r-=1\n    return r\ndef count_characters(s):\n    '''\n    Write a python function to count the number of characters in a string.\n    '''\n    if len(s)<1:\n        return -1\n    res=0\n    for i in s:\n        res+=1\n    return res\ndef count_characters2(s):\n    '''\n    Write a python function to count the number of characters in a string.\n    '''\n    if len(s)<1:\n        return -1\n    return len(s)\ndef count_characters3(s):\n    '''\n    Write a python function to count the number of characters in a string.\n    '''\n    if len(s)<1:\n        return -1\n    return len(set(s))\ndef count_characters4(s):\n    '''\n    Write a python function to count the number of characters in a string.\n    '''\n    if len(s)<1:\n        return -1\n    d1=defaultdict(int)\n    for i in s:\n        d1[i]+=1\n    return sum(d1.values())\ndef count_characters5(s):\n    '''\n    Write a python function to count the number of characters in a string.\n    '''\n    if len(s)<1:\n        return -1\n    d1=defaultdict(int)\n    for i in s:\n        d1[i]+=1\n    retur"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            d[s[i:j + 1]] += 1\n    return sum([v for v in d.values()])\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    min_val = xs[0]\n    for num in xs:\n        if num < min_val:\n            min_val = num\n    return min_val\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n    \ndef smallest_num_sort(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs.sort()\n    return xs[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # return min(xs)\n    # or\n    return sorted(xs)[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    for x in xs:\n        if smallest is None or x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    min_value = min(test_list)\n    max_value = max(test_list)\n    available_pairs = []\n    for i in test_list:\n        for j in test_list:\n            if i!= j:\n                available_pairs.append((i,j))\n    for i in available_pairs:\n        if i[0] < i[1]:\n            if i[1] - i[0] > max_value - min_value:\n                max_value = i[1] - i[0]\n        if i[0] > i[1]:\n            if i[0] - i[1] > max_value - min_value:\n                max_value = i[0] - i[1]\n    return max_value - min_value\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if j == i:\n                continue\n            else:\n                if max_diff < abs(test_list[i] - test_list[j]):\n                    max_diff = abs(test_list[i] - test_list[j])\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff_list = [abs(x - y) for x, y in zip(test_list[1:], test_list[:-1])]\n    return max(diff_list)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    ans = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            ans = max(ans,abs(test_list[i]-test_list[j]))\n    return ans\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Another solution\n    # max_difference = -float('inf')\n    # for i in range(len(test_list)-1):\n    #     for j in range(i+1, len(test_list)):\n    #         if abs(test_list[i] - test_list[j]) > max_difference:\n    #             max_difference = abs(test_list[i] - test_list[j])\n    # return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list.sort()\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        max_diff = max(max_diff, test_list[i+1] - test_list[i])\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff_dict = {}\n    for tup1, tup2 in combinations(test_list, 2):\n        diff_dict[tup1] = abs(tup1[0]-tup2[0])\n        diff_dict[tup1] = abs(tup1[1]-tup2[1])\n    return max(diff_dict.values())\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    from itertools import combinations\n    max_difference = 0\n    for i in combinations(test_list,2):\n        max_difference = max(max_difference, abs(i[0] - i[1]))\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    \n    max_diff = 0\n    if len(test_list) == 2:\n        return abs(test_list[0] - test_list[1])\n    \n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if abs(test_list[i] - test_list[j]) > max_diff:\n                max_diff = abs(test_list[i] - test_list[j])\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # brute force, O(n^2)\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if abs(test_list[i] - test_list[j]) > max_diff:\n                max_diff = abs(test_list[i] - test_list[j])\n    return max_diff\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    #subjectmarks=list(subjectmarks)\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n    \n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key = lambda t: t[1])\n    return sorted_list\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    list1 = []\n    for i in subjectmarks:\n        list1.append(i[1])\n    list1.sort()\n    return list1\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key = lambda x: x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    marks_list = []\n    for tup in subjectmarks:\n        marks_list.append(tup[1])\n    marks_list.sort()\n    return marks_list\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks = sorted(subjectmarks, key=lambda x: x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1])\n    \ndef group_marks(subjectmarks):\n    '''\n    Write a function to return a list of tuples of student number and their subject marks in ascending order.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[0])\n    \ndef sublist(marks):\n    '''\n    Write a function to find the second largest value in a list of values.\n    '''\n    return sorted(marks)[-2]\n    \ndef sort_with_n(numbers):\n    '''\n    Write a function to sort a list of numbers with key = lambda x: x%2.\n    '''\n    return sorted(numbers, key = lambda x: x%2)\n    \ndef sort_with_t(t):\n    '''\n    Write a function to sort a tuple of numbers with key = lambda x: x%2.\n    '''\n    return sorted(t, key = lambda x: x%2)\n    \ndef sort_with_l(l):\n    '''\n    Write a function to sort a list of numbers with key = lambda x: x%2.\n    '''\n    return sorted(l, key = lambda x: x%2)\n    \ndef insert_sort(numbers):\n    '''\n    Write a function to sort a list of numbers by inserting elements into a sorted list.\n    '''\n    for i in range(1,len(numbers)):\n        current = numbers[i]\n        position = i\n        while position > 0 and numbers[position - 1] > current:\n            numbers[position] = numbers[position - 1]\n            position = position - 1\n        numbers[position] = current\n    return numbers\n    \ndef insertion_sort(numbers):\n    '''\n    Write a function to sort a list of numbers by insertion.\n    '''\n    for i in range(1, len(numbers)):\n        current = numbers[i]\n        position = i\n        while position > 0 and numbers[position - 1] > current:\n            numbers[position] = numbers[position - 1]\n            position = position - 1\n        numbers[position] = current\n    return numbers\n    \ndef bubble_sort(numbers):\n    '''\n    Write a function to sort a list of numbers by bubble sort.\n    '''\n    for i in range(len(numbers)):\n        for j in range(len(numbers) - i - 1):\n            if numbers[j] > numbers[j + 1]:\n                numbers[j], numbers[j + 1] = numbers[j + 1], numbers[j]\n    return numbers\n    \ndef selection_sort(numbers):\n    '''\n    Write a function to sort a list of numbers by selection sort.\n    '''\n    for i in range(len(numbers)):\n        position = i\n        current = numbers[i]\n        while position > 0 and numbers[position - 1] > current:\n            numbers[position] = numbers[position - 1]\n            position = position - 1\n        numbers[position] = current\n    return numbers\n    \ndef quick_sort(numbers):\n    '''\n    Write a function to sort a list of numbers using a quick sort.\n    '''\n    less = []\n    equal = []\n    greater = []\n    if len(numbers) > 1:\n        pivot = numbers[0]\n        for i in numbers:\n            if i < pivot:\n                less.append(i)\n            elif i == pivot:\n                equal.append(i)\n            elif i > pivot:\n                greater.append(i)\n        return quick_sort(less)+equal+quick_sort(greater)\n    else:\n        return numbers\n    \ndef quick_sort_inplace(numbers, low = None, high = None):\n    '''\n    Write a function to sort a list of numbers using a quick sort inplace.\n    '''\n    if low is None:\n        low = 0\n    if high is None:\n        high = len(numbers) - 1\n    if low < high:\n        pivot = partition(numbers, low, high)\n        quick_sort_inplace(numbers, low, pivot - 1)\n        quick_sort_inplace(numbers, pivot + 1, high)\n    return numbers\n    \ndef partition(numbers, low, high):\n    '''\n    Write a function to partition a list of numbers using a pivot index.\n    '''\n    pivot = numbers[high]\n    i = low - 1\n    for j in range(low, high):\n        if numbers[j] <= pivot:\n            i = i + 1\n            numbers[i], numbers[j] = numbers[j], numbers[i]\n    numbers[i + 1], numbers[high] = numbers[high], numbers[i + 1]\n    return i + 1\n    \ndef max_n(numbers):\n    '''\n    Write a function to find the maximum value in a list of numbers.\n    '''\n    return max(numbers)\n    \ndef reverse_n(numbers):\n    '''\n    Write a function to reverse a list of numbers.\n    '''\n    return numbers[::-1]\n    \ndef shuffle(numbers):\n    '''\n    Write a function to shuffle a list of numbers.\n    '''\n    for i in range(len(numbers)):\n        n = random.randint(i, len(numbers) - 1)\n        numbers[i], numbers[n] = numbers[n], numbers[i]\n    return numbers\n    \ndef merge_n(numbers):\n    '''\n    Write a function to merge two sorted lists of numbers.\n    '''\n    if len(numbers) == 0:\n        return numbers\n    if len(numbers) == 1:\n        return numbers\n    mid = len(numbers) / 2\n    left = numbers[:mid]\n    right = numbers[mid:]\n    return merge_n(merge_n(left, right))\n    \ndef merge(numbers):\n    '''\n    Write a function to merge two sorted lists of numbers.\n    '''\n    if len(numbers) == 0:\n        return numbers\n    if len(numbers) == 1:\n        return numbers\n    mid = len(numbers) / 2\n    left = numbers[:mid]\n    right = numbers[mid:]\n    left = merge(left)\n    right = merge(right)\n    return merge_n(left, right)\n    \ndef sort_n(numbers):\n    '''\n    Write a function to sort a list of numbers using a quicksort.\n    '''\n    if len(numbers) <= 1:\n        return numbers\n    else:\n        pivot = numbers[0]\n        less = [i for i in numbers[1:] if i <= pivot]\n        greater = [i for i in numbers[1:] if i > pivot]\n        return sort_n(less) + [pivot] + sort_n(greater)\n    \ndef sort_n_inplace(numbers):\n    '''\n    Write a function to sort a list of numbers using a quicksort inplace.\n    '''\n    if len(numbers) <= 1:\n        return numbers\n    else:\n        pivot = numbers[0]\n        less = [i for i in numbers[1:] if i <= pivot]\n        greater = [i for i in numbers[1:] if i > pivot]\n        numbers[:] = sort_n_inplace(less) + [pivot] + sort_n_inplace(greater)\n    return numbers\n    \ndef match_n(numbers):\n    '''\n    Write a function to match two lists of numbers.\n    '''\n    return [i for i, n in zip(numbers, range(len(numbers))) if i == n]\n    \ndef binary_search(numbers, target):\n    '''\n    Write a function to search a list of numbers for a target number using a binary search.\n    '''\n    if len(numbers) == 1:\n        return target == numbers[0]\n    mid = len(numbers) / 2\n    if numbers[mid] > target:\n        return binary_search(numbers[:mid], target)\n    elif numbers[mid] < target:\n        return binary_search(numbers[mid:], target)\n    else:\n        return True\n    \ndef binary_search_inplace"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    x=list(subjectmarks)\n    x.sort(key=lambda x:x[1], reverse=True)\n    return x\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks,key=lambda x:x[1])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for elem in data_list:\n        if type(elem) is list:\n            total += recursive_list_sum(elem)\n        else:\n            total += elem\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) > 1:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0]\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if type(data_list) == int:\n        return data_list\n    return data_list[0] + recursive_list_sum(data_list[1:])\n    \ndef iterative_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    new_list = []\n    for item in data_list:\n        if type(item) == list:\n            new_list.extend(item)\n        else:\n            new_list.append(item)\n    return sum(new_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for d in data_list:\n        if type(d) is list:\n            total += recursive_list_sum(d)\n        else:\n            total += d\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        first_item = data_list[0]\n        if isinstance(first_item, list):\n            return recursive_list_sum(first_item) + recursive_list_sum(data_list[1:])\n        else:\n            return recursive_list_sum(data_list[1:]) + first_item\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return recursive_list_sum(data_list[1:]) + data_list[0]\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif type(data_list)!= list:\n        return data_list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_list = []\n    for i in list:\n        if i > 0:\n            pos_list.append(i)\n    return len(pos_list)\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(x > 0 for x in list)\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos=0\n    for i in list:\n        if i > 0:\n            pos += 1\n    return pos\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for x in list:\n        if x > 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive_count = 0\n    for item in list:\n        if item > 0:\n            positive_count += 1\n    print('The number of positive elements is', positive_count)\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for item in list:\n        if item > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i > 0:\n            count=count+1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count=0\n    for num in list:\n        if num > 0:\n            pos_count +=1\n    return pos_count\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [0] * (n+1)\n    bell[0] = 1\n    bell[1] = 1\n    for i in xrange(2, n+1):\n        bell[i] = bell[i-1] + bell[i-2]\n    return bell[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    bell_numbers = [0,1,1,2,5,15,34,57,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040,1346269,2178309,3524578,5702887,9227465,14930352,24157817,39088169,63245986,102334155,165580141,267914296,433494437,701408733,1134903170,1836311903]\n    \n    if n <= len(bell_numbers):\n        return bell_numbers[n]\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n        \nprint bell_number(3)\n    "
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # For each input number, find the number of partitions\n    # using dynamic programming approach\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    bell[1] = 1\n    for i in range(2, n + 1):\n        bell[i] = bell[i - 1] + bell[i - 2]\n    return bell[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    return bell_number(n - 1) + bell_number(n - 2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    \n    return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1, 1]\n    while bell[-1] <= n:\n        bell.append(bell[-2] + bell[-1])\n    return bell[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 5\n    return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n    \n    \ndef tower_of_hanoi(n, a, b, c):\n    '''\n    Write a function to find the number of ways to do a tower of hanoi.\n    '''\n    if n == 1:\n        print a, '->', c\n    else:\n        tower_of_hanoi(n-1, a, c, b)\n        tower_of_hanoi(1, a, b, c)\n        tower_of_hanoi(n-1, b, a, c)\n        \n        \ndef find_primes(n):\n    '''\n    Write a function to find the nth prime number.\n    '''\n    if n == 1:\n        return 2\n    primes = [1]*n\n    primes[0] = 0\n    primes[1] = 0\n    i = 2\n    while i < n:\n        j = i*i\n        while j < n:\n            primes[j] = 0\n            j += i\n        i += 1\n    for i in range(n):\n        if primes[i]!= 0:\n            print i+1, '->', primes[i]\n            \n            \ndef find_rabbits(n, k):\n    '''\n    Write a function to find the number of ways to pick k distinct numbers out of n.\n    '''\n    if n == k:\n        return 1\n    if k > n:\n        return 0\n    if k > (n/2):\n        return find_rabbits(n-1, k)\n    return find_rabbits(n-1, k) + find_rabbits(n-1, k-1)\n    \n    \ndef find_permutations(n, k):\n    '''\n    Write a function to find the number of ways to pick k distinct numbers out of n.\n    '''\n    if k == 0:\n        return 1\n    if k > n:\n        return 0\n    if k > (n/2):\n        return find_permutations(n-1, k)\n    return find_permutations(n-1, k) + find_permutations(n-1, k-1)\n    \n    \ndef find_anagrams(s1, s2):\n    '''\n    Write a function to find the number of ways to anagram two strings.\n    '''\n    if len(s1)!= len(s2):\n        return 0\n    count = [0]*256\n    for i in s1:\n        count[ord(i)] += 1\n    for i in s2:\n        count[ord(i)] -= 1\n    for i in count:\n        if i!= 0:\n            return 0\n    return 1\n    \n    \ndef find_palindromes(n):\n    '''\n    Write a function to find the number of ways to palindromes.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    return find_palindromes(n-1) + find_palindromes(n-2) + find_palindromes(n-3)\n    \n    \ndef find_count_of_binary_strings(n):\n    '''\n    Write a function to find the number of ways to count binary strings of length n.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 5\n    if n == 3:\n        return 10\n    return find_count_of_binary_strings(n-1) + find_count_of_binary_strings(n-2) + find_count_of_binary_strings(n-3)\n    \n    \ndef find_count_of_strings(n, k):\n    '''\n    Write a function to find the number of ways to count strings of length n,\n    where the first and last characters are the same.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return k\n    if n == 2:\n        return k*(k+1)\n    if n == 3:\n        return k*(k*(k+1)/2)\n    return find_count_of_strings(n-1, k) + find_count_of_strings(n-2, k) + find_count_of_strings(n-3, k)\n    \n    \ndef find_sum_of_binary_strings(n):\n    '''\n    Write a function to find the sum of the digits of the number of ways to count\n    binary strings of length n.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 4\n    if n == 3:\n        return 7\n    return find_sum_of_binary_strings(n-1) + find_sum_of_binary_strings(n-2) + find_sum_of_binary_strings(n-3)\n    \n    \ndef find_sum_of_increasing_decreasing_strings(n, a, b):\n    '''\n    Write a function to find the sum of the digits of the number of ways to count\n    increasing and decreasing strings of length n, where the first and last\n    characters of the string are the same.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return b\n    if n == 2:\n        return a*(a+1)\n    if n == 3:\n        return a*(a+1)*(a+2)\n    return find_sum_of_increasing_decreasing_strings(n-1, a, b) + find_sum_of_increasing_decreasing_strings(n-2, a, b) + find_sum_of_increasing_decreasing_strings(n-3, a, b)\n    \n    \ndef find_binary_trees(n):\n    '''\n    Write a function to find the number of ways to form balanced binary trees.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 5\n    return find_binary_trees(n-1) + find_binary_trees(n-2) + find_binary_trees(n-3)\n    \n    \ndef find_binary_trees_helper(n, s1, s2, s3, f):\n    '''\n    Write a function to find the number of ways to form balanced binary trees.\n    '''\n    if n == 0:\n        f[0] = 1\n        return\n    if n == 1:\n        f[1] = 1\n        return\n    if n == 2:\n        f[2] = 2\n        return\n    if n == 3:\n        f[3] = 5\n        return\n    find_binary_trees_helper(n-1, s1+1, s2, s3, f)\n    find_binary_trees_helper(n-1, s1, s2+1, s3, f)\n    find_binary_trees_helper(n-1, s1, s2, s3+1, f)\n    find_binary_trees_helper(n-1, s1, s2, s3, f+[0])\n    \n    \ndef find_pythagorean_triples(n):\n    '''\n    Write a function to find the number of pythagorean triples.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    return find_pythagorean_triples(n-1) + find_pythagorean_triples(n-2) + find_pythagorean_triples(n-3)\n    \n    \ndef find_pythagorean_triples_he"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n - 1) + bell_number(n - 2)\n    \n    \n    \n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 0:\n        return True\n    \n    if A[0] < A[-1]:\n        for i in range(1, len(A)):\n            if A[i] < A[i-1]:\n                return False\n    else:\n        for i in range(1, len(A)):\n            if A[i] > A[i-1]:\n                return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)==0:\n        return True\n    if len(A)==1:\n        return True\n    if A[0]<=A[1]:\n        for i in range(1,len(A)-1):\n            if A[i]<=A[i+1]:\n                pass\n            else:\n                return False\n        return True\n    else:\n        for i in range(1,len(A)-1):\n            if A[i]>=A[i+1]:\n                pass\n            else:\n                return False\n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(1, len(A)):\n        if A[i-1] >= A[i]:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    len_a = len(A)\n    for i in range(len_a-1):\n        if A[i]<=A[i+1]:\n            continue\n        else:\n            return False\n    return True\n    \n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n=len(A)\n    if n<=2:\n        return True\n    else:\n        i=0\n        j=0\n        while i<n-1:\n            if A[i]<=A[i+1]:\n                j=i+1\n            else:\n                return False\n            i+=1\n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 0:\n        return True\n    for i in range(1,len(A)):\n        if A[i]<=A[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1:\n        return True\n    flag = 1\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            flag = 0\n            break\n    if flag == 1:\n        return True\n    return False\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)<=2:\n        return True\n    else:\n        if A[0]<A[1]:\n            for i in range(1,len(A)-1):\n                if A[i]<A[i+1]:\n                    pass\n                else:\n                    return False\n            return True\n        else:\n            for i in range(1,len(A)-1):\n                if A[i]>A[i+1]:\n                    pass\n                else:\n                    return False\n            return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    #return any(a<=b for a,b in zip(A,A[1:])) and any(a>=b for a,b in zip(A,A[1:]))\n    return all(a<=b for a,b in zip(A,A[1:])) and all(a>=b for a,b in zip(A,A[1:]))\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    max_so_far = A[0]\n    min_so_far = A[0]\n    for i in range(1,len(A)):\n        if A[i] < max_so_far:\n            return 0\n        max_so_far = max(A[i],max_so_far)\n    return 1\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    if l[:len(s)] == s:\n        return True\n    return is_sublist(l[1:], s)\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in xrange(len(l)):\n        if l[i]!= s[0]:\n            continue\n        if is_sublist(l[i+1:], s[1:]):\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    #iterate through l\n    for i in range(len(l) - len(s) + 1):\n        #if the first element of l matches the first element of s\n        if l[i] == s[0]:\n            #iterate through s\n            for j in range(1, len(s)):\n                #if the element of l does not match the element of s\n                if l[i+j]!= s[j]:\n                    #return false\n                    return False\n    #return true\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    \n    # To check for the whole list equal to the sublist\n    if l == s:\n        return True\n    \n    # To check if there is any repeated elements inside the sublist\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l)):\n        if l[i]!= s[0]:\n            return False\n    \n    return sublist(l[1:], s[1:])\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    elif len(l) < len(s):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s[:len(l)] == l\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(s)):\n        if l[i]!= s[i]:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    flag = 1\n    for i in s:\n        if i not in l:\n            flag = 0\n            break\n    return flag\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for elem in l:\n        if elem == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(s)):\n        if s[i]!= l[i]:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        for j in range(i+1,len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tup = Input\n    size = len(tup)\n    for i in range(size):\n        for j in range(i+1, size):\n            if len(tup[i])!= len(tup[j]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Tuple_Len_List = []\n    for i in Input:\n        Tuple_Len_List.append(len(i))\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input = list(set(tuple(sorted(x)) for x in Input))\n    return len(Input) == len(set(tuple(sorted(x)) for x in Input))\n    \ndef find_equal_list(Input):\n    '''\n    Write a function to find whether all the given lists have equal length or not.\n    '''\n    Input = list(set(Input))\n    return len(Input) == len(set(Input))\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    tup1, tup2, tup3 = Input\n    if len(tup1)!= len(tup2) or len(tup1)!= len(tup3):\n        return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    result = len(Input[0])\n    for i in Input:\n        if len(i)!= result:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!=len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for t in Input:\n        if len(t)!= len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # This function takes O(N^2) time\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            if nums[j] < nums[i]:\n                nums[j],nums[i] = nums[i],nums[j]\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if nums == []:\n        return nums\n    else:\n        key = nums[0]\n        nums = [num for num in nums if num!= key]\n        small_nums = [num for num in nums if num <= key]\n        big_nums = [num for num in nums if num > key]\n        return comb_sort(small_nums) + [key] + comb_sort(big_nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n    # Start with the first item as the last item to be combined\n    last_item = nums[-1]\n    # Find the first item to be combined\n    for i in range(len(nums)-2, -1, -1):\n        if nums[i] > last_item:\n            # Update the last item and the item to be combined\n            last_item = nums[i]\n            nums[i], nums[i+1] = nums[i+1], nums[i]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        tmp = nums[i]\n        j = i\n        while j > 0 and nums[j-1] > tmp:\n            nums[j] = nums[j-1]\n            j -= 1\n        nums[j] = tmp\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums) - 1):\n        for j in range(len(nums) - i - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for n in range(1, len(nums)):\n        i = n\n        while i > 0 and nums[i-1] > nums[i]:\n            nums[i], nums[i-1] = nums[i-1], nums[i]\n            i -= 1\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    assert isinstance(nums, list)\n    assert all(isinstance(n, int) for n in nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    while gap > 1:\n        gap = gap // 2\n        i = 0\n        j = gap\n        while j < len(nums):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n            j += 1\n    return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def is_sq(n):\n        i = 1\n        while i**2 <= n:\n            if n == i**2:\n                return True\n            i += 1\n        return False\n    if is_sq(n):\n        i = 1\n        while i**2 <= n:\n            if i**2-n in s:\n                return True\n            i += 1\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n,0,-1):\n        if i**2 == n-i**2:\n            print(\"Yes\")\n            return \n    print(\"No\")\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = n\n    b = int(math.sqrt(n))\n    while(b*b!= a):\n        a -= b\n        b = int(math.sqrt(a))\n    return a == b*b\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # code here\n    if n < 0:\n        return False\n    if int(sqrt(n))**2 == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    import math\n    return int((math.sqrt(n)*math.sqrt(n)+math.sqrt(n+1)*math.sqrt(n+1))/2) == n\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return n**2 in (a+b for a in range(1,n) for b in range(1,n))\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,int(n**0.5)):\n        if (n-i**2)%(i**2) == 0:\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n <= 0:\n        return 0\n    root = math.floor(math.sqrt(n))\n    if root*root == n:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i**2 <= n:\n        j = 1\n        while j**2 <= n-i**2:\n            if i**2 + j**2 == n:\n                return True\n            j+=1\n        i+=1\n    return False\ndef pythagorean_triplets(n):\n    '''\n    Write a python function to check if there are triplets of a,b,c in the range 1 to n such that a**2 + b**2 = c**2.\n    '''\n    for i in range(1,n):\n        for j in range(i+1,n):\n            k = n - i - j\n            if i**2 + j**2 == k**2:\n                return True\n    return False\ndef all_perms(n):\n    '''\n    Write a python function to print all permutations of a string.\n    '''\n    import itertools\n    a = list(itertools.permutations(str(n)))\n    for i in a:\n        print ''.join(i)\ndef is_pandigital(n):\n    '''\n    Write a python function to check if the given number is pandigital or not.\n    '''\n    s = str(n)\n    l = len(s)\n    pandigital = True\n    for i in range(1,l):\n        if str(i) not in s:\n            pandigital = False\n            break\n    return pandigital\ndef palindrome_number(n):\n    '''\n    Write a python function to check if the given number is palindrome or not.\n    '''\n    n = str(n)\n    pandigital = True\n    for i in range(1,len(n)):\n        if n[i]!= n[-i-1]:\n            pandigital = False\n            break\n    return pandigital\ndef palindrome_number(n):\n    '''\n    Write a python function to check if the given number is palindrome or not.\n    '''\n    n = str(n)\n    pandigital = True\n    for i in range(1,len(n)):\n        if n[i]!= n[-i-1]:\n            pandigital = False\n            break\n    return pandigital\ndef is_palindrome(n):\n    '''\n    Write a python function to check if the given number is palindrome or not.\n    '''\n    n = str(n)\n    for i in range(1,len(n)):\n        if n[i]!= n[-i-1]:\n            return False\n    return True\ndef is_palindrome_number(n):\n    '''\n    Write a python function to check if the given number is palindrome or not.\n    '''\n    n = str(n)\n    pandigital = True\n    for i in range(1,len(n)):\n        if n[i]!= n[-i-1]:\n            pandigital = False\n            break\n    return pandigital\ndef is_perfect_square(n):\n    '''\n    Write a python function to check if the given number is a perfect square or not.\n    '''\n    i = 1\n    while i**2 <= n:\n        if i**2 == n:\n            return True\n        i+=1\n    return False\ndef sum_of_digits(n):\n    '''\n    Write a python function to calculate the sum of the digits of a given number.\n    '''\n    s = 0\n    while n > 0:\n        d = n % 10\n        s+=d\n        n = n//10\n    return s\ndef sum_of_digits(n):\n    '''\n    Write a python function to calculate the sum of the digits of a given number.\n    '''\n    s = 0\n    while n > 0:\n        d = n % 10\n        s+=d\n        n = n//10\n    return s\ndef is_prime(n):\n    '''\n    Write a python function to check if the given number is prime or not.\n    '''\n    n = abs(n)\n    if n == 0 or n == 1:\n        return False\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\ndef get_next_prime(n):\n    '''\n    Write a python function to get the next prime number after the given number.\n    '''\n    n = abs(n)\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 3\n    else:\n        for i in range(2,n):\n            if n%i == 0:\n                return n + i\ndef is_pandigital(n,s):\n    '''\n    Write a python function to check if the given number is pandigital or not.\n    '''\n    n = str(n)\n    s = str(s)\n    l = len(n)\n    pandigital = True\n    for i in range(1,l):\n        if n[i] not in s:\n            pandigital = False\n            break\n    return pandigital\ndef is_pandigital(n,s):\n    '''\n    Write a python function to check if the given number is pandigital or not.\n    '''\n    n = str(n)\n    s = str(s)\n    l = len(n)\n    pandigital = True\n    for i in range(1,l):\n        if n[i] not in s:\n            pandigital = False\n            break\n    return pandigital\ndef is_pandigital(n,s):\n    '''\n    Write a python function to check if the given number is pandigital or not.\n    '''\n    n = str(n)\n    s = str(s)\n    l = len(n)\n    pandigital = True\n    for i in range(1,l):\n        if n[i] not in s:\n            pandigital = False\n            break\n    return pandigital\ndef pandigital_permutation(n):\n    '''\n    Write a python function to check if the given number is pandigital or not.\n    '''\n    n = str(n)\n    l = len(n)\n    pandigital = True\n    for i in range(1,l):\n        if n[i] not in ['1','2','3','4','5','6','7','8','9']:\n            pandigital = False\n            break\n    return pandigital\ndef pandigital_permutation(n):\n    '''\n    Write a python function to check if the given number is pandigital or not.\n    '''\n    n = str(n)\n    l = len(n)\n    pandigital = True\n    for i in range(1,l):\n        if n[i] not in ['1','2','3','4','5','6','7','8','9']:\n            pandigital = False\n            break\n    return pandigital\ndef is_pandigital(n,s):\n    '''\n    Write a python function to check if the given number is pandigital or not.\n    '''\n    n = str(n)\n    s = str(s)\n    l = len(n)\n    pandigital = True\n    for i in range(1,l):\n        if n[i] not in s:\n            pandigital = False\n            break\n    return pandigital\ndef is_pandigital(n,s):\n    '''\n    Write a python function to check if the given number is pandigital or not.\n    '''\n    n = str(n)\n    s = str(s)\n    l = len(n)\n    pandigital = True\n    for i in range(1,l):\n        if n[i] not in s:\n            pandigital = False\n            break\n    return pandigital\ndef is_pandigital(n,s):\n    '''\n    Write a python function to check if the given number is pandigital or not.\n    '''\n    n = str(n)\n    s = str(s)\n    l = len(n)\n    pandigital = True\n    for i in range(1,l):\n        i"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n <= 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(1, int(n ** 0.5) + 1):\n        if i ** 2 == n - i ** 2:\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    def is_consecutive(colors):\n        colors = sorted(colors)\n        for i in xrange(1, len(colors)):\n            if colors[i] - colors[i - 1]!= 1:\n                return False\n        return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if pattern == colors:\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(0, len(patterns)):\n        if patterns[i] in colors:\n            colors.remove(patterns[i])\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if (len(colors)!= len(patterns)):\n        return False\n    else:\n        for i in range(0, len(colors)):\n            if (len(patterns[i])!= len(colors[i])):\n                return False\n            else:\n                for j in range(0, len(patterns[i])):\n                    if (patterns[i][j]!= colors[i][j]):\n                        return False\n        return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    colors.sort()\n    #print(colors)\n    for pattern in patterns:\n        if len(pattern) == 0:\n            continue\n        if not is_samepattern(colors, pattern):\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    return all(colors[i] == patterns[i] for i in range(len(patterns)))\n    \nassert is_samepatterns(['red','blue','green'], ['r','b','g'])\nassert is_samepatterns(['red','blue','green'], ['r','b','g','w'])\nassert is_samepatterns(['red','blue','green'], ['r','b','g','b'])\nassert not is_samepatterns(['red','blue','green'], ['r','b','g','r'])\nassert not is_samepatterns(['red','blue','green'], ['r','b','g','r','b','g','r','b','g'])\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    if len(colors)!= len(patterns):\n        return False\n    \n    return all(c1 == c2 for (c1, c2) in zip(colors, patterns))\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    i = 0\n    for pattern in patterns:\n        if colors[i:i+len(pattern)] == pattern:\n            i += len(pattern)\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    def check(x, y):\n        if x[0] == y[0]:\n            if (x[1], y[1]) in patterns:\n                return True\n            return False\n        elif x[1] == y[1]:\n            if (x[0], y[0]) in patterns:\n                return True\n            return False\n        return False\n    return all(map(lambda x: check(x, y), zip(colors, colors[1:])))\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    new_list = []\n    for i in test_list:\n        if i[1] % K == 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    res = []\n    \n    for item in test_list:\n        if all([(item[i]%K == 0) for i in range(len(item))]):\n            res.append(item)\n            \n    return res\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    if len(test_list) == 0:\n        return []\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    final_list = []\n    for each_tuple in test_list:\n        for each_element in each_tuple:\n            if each_element % K!= 0:\n                break\n        else:\n            final_list.append(each_tuple)\n    return final_list\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for i in range(len(test_list)):\n        if all(i % k == 0 for i in test_list[i]):\n            res.append(test_list[i])\n    return res\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for x in test_list:\n        if not all(map(lambda i: int(x[i]) % K == 0, range(len(x)))):\n            print(x)\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    def check_divisible(tuple_list, K):\n        for tup in tuple_list:\n            if tup[1] % K!= 0:\n                return False\n        return True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Base case -\n    if len(test_list) == 0:\n        return []\n    # Recursive case -\n    else:\n        divisible = False\n        for item in test_list:\n            if item[0] % K == 0 and item[1] % K == 0:\n                divisible = True\n        if divisible:\n            return [(item[0], item[1])] + find_tuples(test_list[1:], K)\n        else:\n            return find_tuples(test_list[1:], K)\n    return []\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    output = []\n    for i in test_list:\n        for j in i:\n            if j % K!= 0:\n                break\n        else:\n            output.append(i)\n    \n    return output\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for each in test_list:\n        if all([ x%K == 0 for x in each]):\n            result.append(each)\n    return result\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n    \ndef test_is_diff():\n    assert is_Diff(17) is True\n    assert is_Diff(12) is False\n    assert is_Diff(11) is True\n    print \"Test passed\"\n    \ntest_is_diff()\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n    \ndef is_Diff_even(n): \n    '''\n    Write a python function to find whether a number is divisible by 10.\n    '''\n    return n%10 == 0\n    \ndef is_Diff_odd(n): \n    '''\n    Write a python function to find whether a number is divisible by 9.\n    '''\n    return n%9 == 0\n    \ndef is_Diff_even_odd(n): \n    '''\n    Write a python function to find whether a number is divisible by 8.\n    '''\n    return n%8 == 0\n    \ndef is_Diff_multiple_of_seven(n): \n    '''\n    Write a python function to find whether a number is divisible by 7.\n    '''\n    return n%7 == 0\n    \ndef is_Diff_multiple_of_six(n): \n    '''\n    Write a python function to find whether a number is divisible by 6.\n    '''\n    return n%6 == 0\n    \ndef is_Diff_multiple_of_five(n): \n    '''\n    Write a python function to find whether a number is divisible by 5.\n    '''\n    return n%5 == 0\n    \ndef is_Diff_multiple_of_four(n): \n    '''\n    Write a python function to find whether a number is divisible by 4.\n    '''\n    return n%4 == 0\n    \ndef is_Diff_multiple_of_three(n): \n    '''\n    Write a python function to find whether a number is divisible by 3.\n    '''\n    return n%3 == 0\n    \ndef is_Diff_multiple_of_two(n): \n    '''\n    Write a python function to find whether a number is divisible by 2.\n    '''\n    return n%2 == 0\n    \ndef is_Prime(n): \n    '''\n    Write a python function to find whether a number is prime or not.\n    '''\n    if (n==1) or (n==2) or (n==3):\n        return True\n    if (n%2==0) or (n%3==0) or (n%5==0):\n        return False\n    for i in range(6,int(math.sqrt(n))+1,6):\n        if (n%i==0) or (n%(i+2)==0):\n            return False\n    return True\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return not n%11\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n    \ndef is_Diff_with_Exception(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    try:\n        if n%11 == 0:\n            return True\n        else:\n            return False\n    except ZeroDivisionError:\n        return 'Cannot divide by Zero'\n    \ndef is_Diff_with_Exception_2(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    try:\n        if n%11 == 0:\n            return True\n        else:\n            return False\n    except ZeroDivisionError:\n        raise ValueError('Cannot divide by Zero')\n    \ndef is_Diff_with_Exception_3(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    try:\n        if n%11 == 0:\n            return True\n        else:\n            return False\n    except ZeroDivisionError:\n        return 'Cannot divide by Zero'\n    finally:\n        print 'Always Run'\n        \ndef is_Diff_with_Exception_4(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    try:\n        if n%11 == 0:\n            return True\n        else:\n            return False\n    except ZeroDivisionError:\n        return 'Cannot divide by Zero'\n    finally:\n        print 'Always Run'\n        \ndef is_Diff_with_Exception_5(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    try:\n        if n%11 == 0:\n            return True\n        else:\n            return False\n    except ZeroDivisionError:\n        return 'Cannot divide by Zero'\n    finally:\n        print 'Always Run'\n    \ndef is_Diff_with_Exception_6(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    try:\n        if n%11 == 0:\n            return True\n        else:\n            return False\n    except ZeroDivisionError:\n        return 'Cannot divide by Zero'\n    finally:\n        print 'Always Run'\n        \ndef is_Diff_with_Exception_7(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    try:\n        if n%11 == 0:\n            return True\n        else:\n            return False\n    except ZeroDivisionError:\n        return 'Cannot divide by Zero'\n    finally:\n        print 'Always Run'\n        \ndef is_Diff_with_Exception_8(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    try:\n        if n%11 == 0:\n            return True\n        else:\n            return False\n    except ZeroDivisionError:\n        return 'Cannot divide by Zero'\n    finally:\n        print 'Always Run'\n        \ndef is_Diff_with_Exception_9(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    try:\n        if n%11 == 0:\n            return True\n        else:\n            return False\n    except ZeroDivisionError:\n        return 'Cannot divide by Zero'\n    finally:\n        print 'Always Run'\n        \ndef is_Diff_with_Exception_10(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    try:\n        if n%11 == 0:\n            return True\n        else:\n            return False\n    except ZeroDivisionError:\n        return 'Cannot divide by Zero'\n    finally:\n        print 'Always Run'\n        \ndef is_Diff_with_Exception_11(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    try:\n        if n%11 == 0:\n            return True\n        else:\n            return False\n    except ZeroDivisionError:\n        return 'Cannot divide by Zero'\n    finally:\n        print 'Always Run'\n        \ndef is_Diff_with_Exception_12(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    try:\n        if n%11 == 0:\n            return True\n        else:\n            return False\n    except ZeroDivisionError:\n        return 'Cannot divide by Zero'\n    finally:\n        print 'Always Run'\n        \ndef is_Diff_with_Exception_13(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    try:\n        if n%11 == 0:\n            return True\n        else:\n            return False\n    except ZeroDivisionError:\n        return 'Cannot divide by Zero'\n    finally:\n        print 'Always Run'\n        \ndef is_Diff_with_Exception_14(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    try:\n        if n%11 == 0:\n            return True\n        else:\n            return False\n    except ZeroDivisionError:\n        return 'Cannot divide by Zero'\n    finally:\n        print 'Always Run'\n        \ndef is_Diff_with_Exception_15(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    try:\n        if n%11 == 0:\n            return True\n        else:\n            return False\n    except ZeroDivisionError:\n        return 'Cannot divide by Zero'\n    finally:\n        print 'Always Run'\n        \ndef is_Diff_with_Exception_16(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    try:\n        if n%11 == 0:\n            return True\n        else:\n            return False\n    except ZeroDivisionError:\n        return 'Cannot divide by Zero'\n    finally:\n        print 'Always Run'\n        \ndef is_Diff_with_Exception_17(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    try:\n        if n%11 == 0:\n            return True\n        else:\n            return False\n    except ZeroDivisionError:\n        return 'Cannot divide by Zero'\n    finally:\n        print 'Always Run'\n        \ndef is_Diff_with_Exception_18(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    try:\n        if n%11 == 0:\n            return True\n        else:\n            return False\n    except ZeroDivisionError:\n        return 'Cannot divide by Zero'\n    finally:\n        print 'Always Run'\n        \ndef is_Diff_with_Exception_19(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    try:\n        if n%11 == 0:\n            return True\n        else:\n            return False\n    except ZeroDivisionError:\n        return 'Cannot divide by Zero'\n    finally:\n        print 'Always Run'\n        \ndef is_Diff_with_Exception_20(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    try:\n        if n%11 == 0:\n            return True\n        else:\n            return False\n    except ZeroDivisionError:\n        return 'Cannot divide by Zero'\n    finally:\n        print 'Always Run'\n        \ndef is_Diff_with_Exception_21(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    try:\n        if n%11 == 0:\n            return True\n        else:\n            return False\n    except ZeroDivisionError:\n        return 'Cannot divide by Zero'\n    finally:\n        print 'Always Run'\n    "
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0: \n        return 0\n    return 1\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2 == 1\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    \n    return len(s) % 2 == 1\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return \"The word is even\"\n    else:\n        return \"The word is odd\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    count = 0\n    for i in s: \n        count+=1\n    if count%2 == 1: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n    "
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2!=0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return sum(n for n in range(1, n+1))\n    \n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0: return 1\n    if n == 1: return 4\n    if n == 2: return 10\n    return 4*tetrahedral_number(n-1) - 10*tetrahedral_number(n-2)\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) * (n + 3) // 4\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n*(n+1)*(n+2))/6\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    result = [0]\n    for i in range(n):\n        result.append(4*result[i] + result[i-1] + 1)\n    return result[-1]\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return tetrahedral_number(n-1) + (2*n-1) + 1\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return sum(int(x)**4 for x in str(n))\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    return n * (n + 1) * (n + 2) * (n + 3) // 24\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int((n * (n + 1) * (n + 2) * (n + 3)) / 6)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3)*math.pi*r**3\n    return v\n    \ndef reverse_string(s):\n    '''\n    Write a function that takes in a string and returns a new string with all the letters reversed.\n    '''\n    b = list(s)\n    x = len(b)\n    y = list(range(x))\n    for i in y:\n        b[i] = b[x-i-1]\n    b = ''.join(b)\n    return b\n    \ndef count_vowels(s):\n    '''\n    Write a function that takes in a string and returns the number of vowels in the string.\n    '''\n    v = 0\n    x = s.lower()\n    for i in x:\n        if i in 'aeiou':\n            v += 1\n    return v\n    \ndef merge_string(s1, s2):\n    '''\n    Write a function that takes in two strings and returns a new string with the characters from the first string followed by the characters from the second string.\n    '''\n    x = s1+s2\n    return x\n    \ndef count_consonants(s):\n    '''\n    Write a function that takes in a string and returns the number of consonants in the string.\n    '''\n    x = s.lower()\n    v = 0\n    for i in x:\n        if i not in 'aeiou':\n            v += 1\n    return v\n    \ndef count_vowels_and_consonants(s):\n    '''\n    Write a function that takes in a string and returns a list of the number of vowels and consonants in the string.\n    '''\n    x = s.lower()\n    v = 0\n    c = 0\n    for i in x:\n        if i in 'aeiou':\n            v += 1\n        elif i in 'aeiou':\n            c += 1\n    return [v,c]\n    \ndef count_odds(n):\n    '''\n    Write a function that takes in a number and returns the number of odd digits in that number.\n    '''\n    x = str(n)\n    odd = 0\n    for i in x:\n        if int(i)%2!= 0:\n            odd += 1\n    return odd\n    \ndef make_rhyme(s):\n    '''\n    Write a function that takes in a string and returns a new string with the first and last letters swapped, followed by the second and second last letters, and so forth.\n    '''\n    x = s.lower()\n    y = x[1:len(x)]\n    y = y[::-1]\n    x = x[0]+y+x[len(x)-1]\n    return x\n    \ndef convert_base(num, base):\n    '''\n    Write a function that takes in a number and a base and returns a string representing the number in the new base.\n    '''\n    n = int(num)\n    if n == 0:\n        return str(n)\n    b = str(base)\n    if int(b) > 10:\n        print('b must be 10 or less')\n    y = list(range(int(b)))\n    x = list(range(int(b)))\n    for i in y:\n        x[i] = list(range(int(b)))\n        x[i][0] = 0\n        x[i][1] = 1\n        x[i][2] = 2\n        x[i][3] = 3\n        x[i][4] = 4\n        x[i][5] = 5\n        x[i][6] = 6\n        x[i][7] = 7\n        x[i][8] = 8\n        x[i][9] = 9\n    x = str(x)\n    x = x.replace('[','')\n    x = x.replace(']','')\n    x = x.replace(\"'\",'')\n    x = x.replace(',','')\n    return x\n    \ndef check_pangram(s):\n    '''\n    Write a function that takes in a string and returns True if the string is a pangram and False otherwise.\n    '''\n    x = s.lower()\n    y = list(range(26))\n    y = [chr(97+i) for i in y]\n    for i in y:\n        if i not in x:\n            return False\n    return True\n    \ndef main():\n    print(volume_sphere(5))\n    print(reverse_string('This is a string'))\n    print(count_vowels('This is a string'))\n    print(merge_string('This', 'is'))\n    print(count_vowels_and_consonants('This is a string'))\n    print(count_vowels_and_consonants('Hello World'))\n    print(count_odds(12345))\n    print(make_rhyme('There is no rhyme'))\n    print(convert_base('12345',16))\n    print(check_pangram('The quick brown fox jumps over the lazy dog'))\n    \nmain()"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\ndef surface_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4*math.pi*(r**3))/3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0 * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0) * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ans = 0\n    for i in range(len(strr)):\n        ans = ans + ord(strr[i])\n    return ans%26\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return chr(sum([ord(i) for i in strr]) % 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    output=0\n    for c in strr:\n        output=output+ord(c)\n    return output%26\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in range(len(strr)):\n        sum = sum + ord(strr[i])\n    return sum % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in strr:\n        char += ord(i)\n    return char%26\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #using ASCII to convert the characters to their corresponding positions\n    res = [ord(i) for i in strr]\n    res = sum(res)\n    res = res%26\n    #using chr to convert the position to its corresponding character\n    return chr(res)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ret = 0\n    for i in strr:\n        ret += ord(i)\n    ret = ret%26\n    ret = chr(ret+65)\n    return ret\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    n = len(strr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return ord(strr)\n    total = 0\n    for i in strr:\n        total = (total + ord(i))% 26\n    return total\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    c = 0\n    for i in strr:\n        c += ord(i)\n    c %= 26\n    return chr(c+ord('a'))\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    for i in strr:\n        print(ord(i)%26)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    s = [1, 1, 1, 2, 1, 3]\n    for i in range(5, n):\n        s.append(s[i-1] + s[i-4])\n    return s[n-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    # Note that when n = 0, the sequence will begin with 1\n    seq = [1]\n    \n    if n < 0: \n        print('Invalid sequence index, cannot start at a negative number')\n    elif n == 0:\n        return seq\n    \n    # Loop until the sequence ends\n    while n > len(seq):\n        # Initialise the list of new numbers for this iteration\n        newnums = []\n        \n        # Loop over all existing numbers\n        for i in seq:\n            # Insert i + 2 in front\n            newnums.insert(0, i + 2)\n            \n            # Insert i + 3 in front\n            newnums.insert(0, i + 3)\n        \n        # Append newnums to the existing sequence\n        seq.extend(newnums)\n        \n        # Increment n\n        n -= len(seq)\n    \n    # The nth number in the sequence\n    return seq[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    s = [1,0,1,1]\n    i = 1\n    while i < n:\n        s.append(s[i]+s[i-1])\n        i += 1\n    return s[n-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0,1]\n    for i in range(2,n+1):\n        if i%2==0:\n            sequence.append(sequence[i-1] + sequence[i-2])\n        else:\n            sequence.append(sequence[i-1] - sequence[i-2])\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2) + sequence(n-3)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    count = 1\n    value = 1\n    while count <= n:\n        value += 1\n        value *= 2\n        count += 1\n    return value\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    #nth element is a sum of the previous elements\n    if n == 1: return 1\n    if n == 2: return 3\n    if n == 3: return 4\n    if n == 4: return 7\n    return sequence(n - 1) + sequence(n - 2) + sequence(n - 3) + sequence(n - 4)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return sequence(n-2) + sequence(n-1)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # You can use the following list to calculate the nth number.\n    sequence = [1,2,3,5,6,8,10,12,15,16,18,20,23,26,29,31,32,34,37,38,39,42,45,46,47,49,50,51,54,56,57,58,59,62,63,64,66,67,69,70,72,73,74,76,77,78,79,82,83,84,86,87,88,89,91,92,93,95,96,99,100]\n    return sequence[n-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0,1,1,1,0,0,0]\n    new_seq = [0,1,1,1,0,0,0]\n    for i in range(6,n+1):\n        new_seq.append(sequence[i-2])\n        if i%3 == 0:\n            new_seq.append(sequence[i/3])\n        if i%2 == 0:\n            new_seq.append(sequence[i/2])\n    return new_seq[n]\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*(r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r ** 2)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    SA = 4 * math.pi * (r ** 2)\n    print 'The surface area of a sphere is %.2f' % SA\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sr = 4 * math.pi * r * r\n    return sr\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * r * r * r\n    return v\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sr = 2 * math.pi * r * h + 2 * math.pi * r * r\n    return sr\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v = math.pi * r * r * h\n    return v\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    sr = math.pi * r * h + math.pi * math.sqrt(r * r + r * r * h)\n    return sr\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * r * r * h / 3\n    return v\ndef surfacearea_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    sa = math.fabs(a + b + c)\n    return sa\ndef volume_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    v = (a * b * c) / 6\n    return v\ndef surfacearea_cube(a):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    sa = 6 * a * a\n    return sa\ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    v = a * a * a\n    return v\ndef surfacearea_cuboid(a,b,c):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    sa = 2 * (a * b + b * c + c * a)\n    return sa\ndef volume_cuboid(a,b,c):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    v = a * b * c\n    return v\ndef surfacearea_parallelepiped(a,b,c):\n    '''\n    Write a function to find the surface area of a parallelepiped.\n    '''\n    sa = 2 * (a * b + a * c + b * c)\n    return sa\ndef volume_parallelepiped(a,b,c):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    v = a * b * c\n    return v\ndef surfacearea_rectangle(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    sa = 2 * (a * b)\n    return sa\ndef volume_rectangle(a,b):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    v = a * b\n    return v\ndef surfacearea_trapezium(a,b,c,d):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    sa = ((a + b) * c + (a + b) * d) / 2\n    return sa\ndef volume_trapezium(a,b,c,d):\n    '''\n    Write a function to find the volume of a trapezium.\n    '''\n    v = (a + b) * c / 2\n    return v\ndef surfacearea_quadrilateral(a,b,c,d):\n    '''\n    Write a function to find the surface area of a quadrilateral.\n    '''\n    sa = 4 * (a + b + c + d)\n    return sa\ndef volume_quadrilateral(a,b,c,d):\n    '''\n    Write a function to find the volume of a quadrilateral.\n    '''\n    v = a * b / 2\n    return v\ndef surfacearea_hexagon(a,b):\n    '''\n    Write a function to find the surface area of a hexagon.\n    '''\n    sa = 6 * (a * b)\n    return sa\ndef volume_hexagon(a,b):\n    '''\n    Write a function to find the volume of a hexagon.\n    '''\n    v = a * b * math.sqrt(3) / 2\n    return v\ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    sa = math.pi * r * r\n    return sa\ndef volume_circle(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    v = math.pi * r * r * r / 4\n    return v\ndef surfacearea_tetrahedron(a,b,c,d):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    sa = 4 * (a * b + a * c + a * d + b * c + b * d + c * d)\n    return sa\ndef volume_tetrahedron(a,b,c,d):\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    v = a * b * c * d / 4\n    return v\ndef surfacearea_pentagon(a,b,c,d,e):\n    '''\n    Write a function to find the surface area of a pentagon.\n    '''\n    sa = 5 * (a + b + c + d + e)\n    return sa\ndef volume_pentagon(a,b,c,d,e):\n    '''\n    Write a function to find the volume of a pentagon.\n    '''\n    v = a * b * c * d / 4\n    return v\ndef surfacearea_hexagon(a,b):\n    '''\n    Write a function to find the surface area of a hexagon.\n    '''\n    sa = 6 * (a * b)\n    return sa\ndef volume_hexagon(a,b):\n    '''\n    Write a function to find the volume of a hexagon.\n    '''\n    v = a * b * math.sqrt(3) / 2\n    return v\ndef surfacearea_dodecahedron(a,b,c,d,e,f,g,h,i):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    sa = 11 * (a + b + c + d + e + f + g + h + i)\n    return sa\ndef volume_dodecahedron(a,b,c,d,e,f,g,h,i):\n    '''\n    Write a function to find the volume of a dodecahedron.\n    '''\n    v = a * b * c * d * e * f * g * h * i / 12\n    return v\ndef surfacearea_octahedron(a,b,c,d,e,f,g,h,i,j,k,l):\n    '''\n    Write a function to find the surface area of a octahedron.\n    '''\n    sa = 6 * (a + b + c + d + e + f + g + h + i + j + k + l)\n    return sa\ndef volume_octahedron(a,b,c,d,e,f,g,h,i,j,k,l):\n    '''\n    Write a function to find the volume of a octahedron.\n    '''\n    v = a * b * c * d * e * f * g * h * i * j * k * l / 4\n    return v\ndef surfacearea_icosahedron(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o):\n    '''\n    Write a function to find the surface area of a icosahedron.\n    '''\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4 * math.pi * r * r)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # base value is 4*pi*r^2\n    # surface area is 4*pi*r^2\n    # adding r^2 to the base value to get the area\n    return 4*math.pi*r*r\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(2*n**2-1)**0.5\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n + 0.5)**2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (2 * n - 1)) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2*n*(2*n - 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n*(2*n-1))**0.5\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2 * n + 1) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(((2*n**2-n+2)/(2*n+2))**(1/2))\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (2 * n + 1)**2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n < 0:\n        return -1\n    else:\n        return int((1/3)**n*(2*n+1))\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (3*n*n - n)/2\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dic = {}\n    dic.update(dict1)\n    dic.update(dict2)\n    dic.update(dict3)\n    return dic\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    for i in dict1:\n        for j in dict2:\n            if i == j:\n                for k in dict3:\n                    if k == i:\n                        new_dict[i] = dict1[i] + dict2[j] + dict3[k]\n    return new_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    for dict in (dict1,dict2,dict3):\n        result.update(dict)\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    for k,v in dict1.iteritems():\n        result[k] = v\n    for k,v in dict2.iteritems():\n        result[k] = v\n    for k,v in dict3.iteritems():\n        result[k] = v\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merge = {}\n    for key in dict1:\n        dict_merge[key] = dict1[key]\n    for key in dict2:\n        dict_merge[key] = dict2[key]\n    for key in dict3:\n        dict_merge[key] = dict3[key]\n    return dict_merge\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = dict1\n    for i in dict2:\n        if i not in new_dict:\n            new_dict[i] = dict2[i]\n    for j in dict3:\n        if j not in new_dict:\n            new_dict[j] = dict3[j]\n    return new_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    def merge_dictionaries_two(dict1, dict2):\n        '''\n        Write a function to merge two dictionaries into a single dictionary.\n        '''\n        def combine_dictionaries(dict1, dict2):\n            '''\n            Write a function to merge two dictionaries into a single dictionary.\n            '''\n            dict3 = {}\n            for key in dict1:\n                if key in dict2:\n                    dict3[key] = [dict1[key], dict2[key]]\n                else:\n                    dict3[key] = dict1[key]\n            for key in dict2:\n                if key not in dict1:\n                    dict3[key] = dict2[key]\n            return dict3\n        return combine_dictionaries(dict1, dict2)\n    return merge_dictionaries_two(dict1, dict2)\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    keys_list = [dict1,dict2,dict3]\n    if len(keys_list) < 3:\n        return \"At least three dictionaries required!\"\n    else:\n        keys_list.sort(key = lambda x: len(x))\n        keys_list.reverse()\n        result_dict = {}\n        for key in keys_list[0].keys():\n            if key in keys_list[1] and key in keys_list[2]:\n                result_dict[key] = keys_list[1][key]+keys_list[2][key]\n            elif key in keys_list[1] and key not in keys_list[2]:\n                result_dict[key] = keys_list[1][key]\n            elif key in keys_list[2] and key not in keys_list[1]:\n                result_dict[key] = keys_list[2][key]\n        return result_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    \n    if type(list1)==list:\n        d={}\n        for i in list1:\n            if i in d:\n                d[i]+=1\n            else:\n                d[i]=1\n        return d\n    else:\n        return \"Please enter a valid list\"\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = {}\n    for i in list1:\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n    return count\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dic = {}\n    for i in list1:\n        dic[i] = list1.count(i)\n    return dic\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.defaultdict(int)\n    for item in list1:\n        freq[item] += 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for x in list1:\n        if x in freq:\n            freq[x] += 1\n        else:\n            freq[x] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1=collections.defaultdict(int)\n    for i in list1:\n        dict1[i]+=1\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = {}\n    for item in list1:\n        if item in count:\n            count[item] = count[item] + 1\n        else:\n            count[item] = 1\n    return count\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = {}\n    for item in list1:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    return count\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = collections.defaultdict(int)\n    for i in list1:\n        count[i]+=1\n    return count\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    x = []\n    for i in range(N):\n        x.append(i + 1)\n    x.sort()\n    return x[N - 1]\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N > 8:\n        return N + (N - 1) % 5\n    elif N > 3:\n        return N + (N - 2) % 5\n    elif N > 1:\n        return N + (N - 3) % 5\n    else:\n        return N\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return None\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if n <= 10:\n        return n\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 1\n    elif n == 4:\n        return 2\n    else:\n        if n%2 == 0:\n            return 2*closest_num(n//2)\n        else:\n            if n%3 == 1:\n                return 3*closest_num(n//3)\n            else:\n                return 4*closest_num(n//4)\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return -1\n    elif N == 1:\n        return 0\n    elif N == 2:\n        return 1\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return [x for x in range(N) if x == sorted(range(N), key=lambda x:abs(x-N))[0]][0]\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    ans = float('inf')\n    for i in xrange(1, int(N)+1):\n        if abs(i-N) < abs(ans-N):\n            ans = i\n    return ans\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def is_smaller_than_n(num):\n        num_str = str(num)\n        if num_str == '0' or num_str == '1':\n            return False\n        for i in range(1, len(num_str)):\n            if int(num_str[i]) < int(num_str[i-1]):\n                return True\n        return False\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return -1\n    elif N == 1:\n        return 0\n    else:\n        if abs(N - 1) < abs(N - 1 - 10000):\n            return 1\n        else:\n            return 0\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1)==0:\n        return 0\n    elif len(list1)==1:\n        return 1\n    elif len(list1)==2:\n        if len(list1[0])>=len(list1[1]):\n            return len(list1[0])\n        else:\n            return len(list1[1])\n    else:\n        a=len_log(list1[:len(list1)/2])\n        b=len_log(list1[len(list1)/2:])\n        return max(a,b)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for item in list1:\n        item=item.strip()\n        list2.append(len(item))\n    return max(list2)\ndef len_word(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for item in list1:\n        item=item.strip()\n        list2.append(item)\n    return max(list2)\ndef len_word(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for item in list1:\n        item=item.strip()\n        list2.append(item)\n    return max(list2)\ndef len_word(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for item in list1:\n        item=item.strip()\n        list2.append(item)\n    return max(list2)\ndef len_word(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for item in list1:\n        item=item.strip()\n        list2.append(item)\n    return max(list2)\ndef len_word(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for item in list1:\n        item=item.strip()\n        list2.append(item)\n    return max(list2)\ndef len_word(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for item in list1:\n        item=item.strip()\n        list2.append(item)\n    return max(list2)\ndef len_word(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for item in list1:\n        item=item.strip()\n        list2.append(item)\n    return max(list2)\ndef len_word(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for item in list1:\n        item=item.strip()\n        list2.append(item)\n    return max(list2)\ndef len_word(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for item in list1:\n        item=item.strip()\n        list2.append(item)\n    return max(list2)\ndef len_word(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for item in list1:\n        item=item.strip()\n        list2.append(item)\n    return max(list2)\ndef len_word(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for item in list1:\n        item=item.strip()\n        list2.append(item)\n    return max(list2)\ndef len_word(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for item in list1:\n        item=item.strip()\n        list2.append(item)\n    return max(list2)\ndef len_word(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for item in list1:\n        item=item.strip()\n        list2.append(item)\n    return max(list2)\ndef len_word(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for item in list1:\n        item=item.strip()\n        list2.append(item)\n    return max(list2)\ndef len_word(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for item in list1:\n        item=item.strip()\n        list2.append(item)\n    return max(list2)\ndef len_word(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for item in list1:\n        item=item.strip()\n        list2.append(item)\n    return max(list2)\ndef len_word(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for item in list1:\n        item=item.strip()\n        list2.append(item)\n    return max(list2)\ndef len_word(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for item in list1:\n        item=item.strip()\n        list2.append(item)\n    return max(list2)\ndef len_word(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for item in list1:\n        item=item.strip()\n        list2.append(item)\n    return max(list2)\ndef len_word(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for item in list1:\n        item=item.strip()\n        list2.append(item)\n    return max(list2)\ndef len_word(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for item in list1:\n        item=item.strip()\n        list2.append(item)\n    return max(list2)\ndef len_word(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for item in list1:\n        item=item.strip()\n        list2.append(item)\n    return max(list2)\ndef len_word(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for item in list1:\n        item=item.strip()\n        list2.append(item)\n    return max(list2)\ndef len_word(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for item in list1:\n        item=item.strip()\n        list2.append(item)\n    return max(list2)\ndef len_word(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for item in list1:\n        item=item.strip()\n        list2.append(item)\n    return max(list2)\ndef len_word(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for item in list1:\n        item=item.strip()\n        list2.append(item)\n    return max(list2)\ndef len_word(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for item in list1:\n        item=item.strip()\n        list2.append(item)\n    return max(list2)\ndef len_word(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for item in list1:\n        item=item.strip()\n        list2"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if list1 == None:\n        return 0\n    else:\n        if len(list1) == 0:\n            return 0\n        else:\n            return len(max(list1,key=len))\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length = []\n    for i in list1:\n        length.append(len(i))\n    return max(length)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return len(max(list1, key=len))\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if list1:\n        max_len = 0\n        for item in list1:\n            if len(item) > max_len:\n                max_len = len(item)\n        return max_len\n    else:\n        return 0\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len_log = []\n    for word in list1:\n        len_log.append(len(word))\n    print len_log\n    print max(len_log)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    res = 0\n    for l in list1:\n        res = max(res,len(l))\n    return res\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len_list = [len(x) for x in list1]\n    max_len = max(len_list)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        return max([len(word) for word in list1])\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any([sub_str in s for s in str1])\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    count = 0\n    for ele in str1:\n        if ele in sub_str:\n            count += 1\n            if count == len(sub_str):\n                return True\n        else:\n            count = 0\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if word in sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for element in sub_str:\n        if element in str1:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) == 0:\n        return True\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in string for string in str1)\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(str1) < len(sub_str):\n        return False\n    for i in range(len(str1) - len(sub_str) + 1):\n        for j in range(len(sub_str)):\n            if str1[i+j]!= sub_str[j]:\n                break\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i:i + len(sub_str)] == sub_str:\n            return True\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    start = 0\n    end = len(str1)\n    if sub_str in str1:\n        while end <= len(str1):\n            if str1[start:end] == sub_str:\n                return True\n            start += 1\n            end += 1\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    num_divisors = 0\n    temp_list = []\n    for i in range(1, n):\n        if n % i == 0:\n            num_divisors += 1\n            temp_list.append(i)\n    if num_divisors == 2:\n        return True\n    else:\n        return False\n    \ndef is_vowel(n):\n    '''\n    Write a function to check whether the given number is vowel or not.\n    '''\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in vowels:\n        if i == n:\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 0: \n        return False\n    num = str(n)\n    for i in range(1, len(num)):\n        if int(num[i]) < int(num[i - 1]):\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return sum([int(i)**2 for i in str(n)]) == n\n    "
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    x = str(n)\n    if len(x) == 1: return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 1:\n        return False\n    # We assume the undulating number is a multiple of 2\n    # We need to check whether it is a multiple of 3 and 5\n    multiple_of_3 = n % 3\n    multiple_of_5 = n % 5\n    if multiple_of_3 == 0 or multiple_of_5 == 0:\n        return False\n    if (multiple_of_3!= 0 and multiple_of_5!= 0) and (n % 15)!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # your code here\n    a = sum(int(d) for d in str(n))\n    return n % a == 0\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    count = 0\n    a = 1\n    while (a**2)<=n: \n        a = a + 2\n        count = count + 1\n    if (a**2)>n:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    if s == s[::-1]: return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1:\n        return True\n    if n < 1:\n        return False\n    count = 1\n    while count <= n:\n        if n%count == 0:\n            divisor = count\n        count += 1\n    if divisor**2 == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    d = 2\n    while d*d <= n:\n        if n % d == 0:\n            return False\n        d += 1\n    return True\n    "
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    \n    if (b==0):\n        return 1\n    elif (b==1):\n        return a\n    elif (b==-1):\n        return 1/a\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if(b == 0):\n        return 1\n    elif(b == 1):\n        return a\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for x in range(0,b):\n        result = result * a\n    return result\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b < 0:\n        return 1/power(a,-b)\n    if b % 2 == 0:\n        return power(a*a,b/2)\n    else:\n        return a * power(a,b-1)\n    \n    \n    \n    \n    "
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b < 0:\n        a = a * 1.0\n        return 1.0 / power(a,b)\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    # if b is 0 then return 1\n    if b == 0:\n        return 1\n    # if b is 1 then return a\n    if b == 1:\n        return a\n    # if b is -1 then return 1/a\n    if b == -1:\n        return 1/a\n    # if b is neither 0 nor 1 then keep dividing the exponent\n    # by 2 until b is 0 or 1\n    while b > 1:\n        a = a*a\n        b = b/2\n    return a\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b==1:\n        return a\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n    \nprint power(4,3)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * power(a, b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b > 0:\n        return power(a, b-1) * a\n    else:\n        return power(1/a, -b)\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # write your code here\n    return min(test_list, key=itemgetter(1))[1]\n    \ndef sum_numbers(numbers):\n    '''\n    Given a list of numbers, return the sum of the numbers.\n    '''\n    # write your code here\n    return sum(numbers)\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_val = min(test_list, key=itemgetter(1))\n    return min_val[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = min(test_list, key=itemgetter(1))\n    return minimum\n    \ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    maximum = max(test_list, key=itemgetter(1))\n    return maximum\n    \ndef unique(test_list):\n    '''\n    Given a list of tuples, write a function that returns a list containing all the unique values in the list.\n    '''\n    unique_list = []\n    for value in test_list:\n        if value not in unique_list:\n            unique_list.append(value)\n    return unique_list\n    \ndef count(test_list):\n    '''\n    Given a list of tuples, write a function that returns a dictionary that counts how many times each value appears in the list.\n    '''\n    count_dictionary = {}\n    for value in test_list:\n        count_dictionary[value] = count_dictionary.get(value, 0) + 1\n    return count_dictionary\n    \ndef count_2(test_list):\n    '''\n    Given a list of tuples, write a function that returns a dictionary that counts how many times each value appears in the list.\n    '''\n    count_dictionary = {}\n    for value in test_list:\n        count_dictionary.setdefault(value, 0)\n        count_dictionary[value] = count_dictionary[value] + 1\n    return count_dictionary\n    \ndef max_min(test_list):\n    '''\n    Given a list of tuples, write a function that returns a tuple with the first value in the list that has the smallest second value.\n    '''\n    max_min = index_minimum(test_list)\n    return max_min\n    \ndef max_min_2(test_list):\n    '''\n    Given a list of tuples, write a function that returns a tuple with the first value in the list that has the smallest second value.\n    '''\n    return max(test_list, key=itemgetter(1))\n    \ndef max_min_3(test_list):\n    '''\n    Given a list of tuples, write a function that returns a tuple with the first value in the list that has the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))\n    \ndef median(test_list):\n    '''\n    Given a list of tuples, write a function that returns a tuple with the median value of the list.\n    '''\n    list_len = len(test_list)\n    list_len //= 2\n    test_list.sort(key = itemgetter(1))\n    if list_len % 2 == 0:\n        median_1 = test_list[list_len]\n        median_2 = test_list[list_len - 1]\n        median_result = (median_1 + median_2) / 2\n    else:\n        median_result = test_list[list_len]\n    return median_result\n    \ndef median_2(test_list):\n    '''\n    Given a list of tuples, write a function that returns a tuple with the median value of the list.\n    '''\n    test_list.sort()\n    list_len = len(test_list)\n    list_len //= 2\n    if list_len % 2 == 0:\n        median_1 = test_list[list_len]\n        median_2 = test_list[list_len - 1]\n        median_result = (median_1 + median_2) / 2\n    else:\n        median_result = test_list[list_len]\n    return median_result\n    \ndef min_max(test_list):\n    '''\n    Given a list of tuples, write a function that returns a tuple with the maximum and minimum values of the list.\n    '''\n    min_value = min(test_list, key = itemgetter(1))\n    max_value = max(test_list, key = itemgetter(1))\n    return (min_value, max_value)\n    \ndef min_max_2(test_list):\n    '''\n    Given a list of tuples, write a function that returns a tuple with the maximum and minimum values of the list.\n    '''\n    return max(test_list, key = itemgetter(1)), min(test_list, key = itemgetter(1))\n    \ndef unique_values(test_list):\n    '''\n    Given a list of tuples, write a function that returns a list containing all the unique values in the list.\n    '''\n    unique_list = []\n    for value in test_list:\n        if value not in unique_list:\n            unique_list.append(value)\n    return unique_list\n    \ndef unique_values_2(test_list):\n    '''\n    Given a list of tuples, write a function that returns a list containing all the unique values in the list.\n    '''\n    unique_list = []\n    unique_list = test_list.split()\n    return list(set(unique_list))\n    \ndef unique_values_3(test_list):\n    '''\n    Given a list of tuples, write a function that returns a list containing all the unique values in the list.\n    '''\n    unique_list = []\n    for value in test_list:\n        if value not in unique_list:\n            unique_list.append(value)\n    return unique_list\n    \ndef unique_values_4(test_list):\n    '''\n    Given a list of tuples, write a function that returns a list containing all the unique values in the list.\n    '''\n    return list(set(test_list))\n    \ndef unique_values_5(test_list):\n    '''\n    Given a list of tuples, write a function that returns a list containing all the unique values in the list.\n    '''\n    return sorted(list(set(test_list)))\n    \ndef min_max_4(test_list):\n    '''\n    Given a list of tuples, write a function that returns a tuple with the maximum and minimum values of the list.\n    '''\n    min_value = min(test_list, key = itemgetter(1))\n    max_value = max(test_list, key = itemgetter(1))\n    return (min_value, max_value)\n    \ndef max_min_5(test_list):\n    '''\n    Given a list of tuples, write a function that returns a tuple with the maximum and minimum values of the list.\n    '''\n    return max(test_list, key = itemgetter(1)), min(test_list, key = itemgetter(1))\n    \ndef frequency(test_list):\n    '''\n    Given a list of tuples, write a function that returns a dictionary that counts how many times each value appears in the list.\n    '''\n    count_dictionary = {}\n    for value in test_list:\n        count_dictionary.setdefault(value, 0)\n        count_dictionary[value] = count_dictionary[value] + 1\n    return count_dictionary\n    \ndef frequency_2(test_list):\n    '''\n    Given a list of tuples, write a function that returns a dictionary that counts how many times each value appears in the list.\n    '''\n    count_dictionary = {}\n    for value in test_list:\n        count_dictionary.setdefault(value, 0)\n        count_dictionary[value] = count_dictionary[value] + 1\n    return count_dictionary\n    \ndef frequency_3(test_list):\n    '''\n    Given a list of tuples, write a function that returns a dictionary that counts how many times each value appears in the list.\n    '''\n    count_dictionary = {}\n    for value in test_list:\n        count_dictionary.setdefault(value, 0)\n        count_dictionary[value] = count_dictionary[value] + 1\n    return count_dictionary\n    \ndef frequency_4(test_list):\n    '''\n    Given a list of tuples, write a function that returns a dictionary that counts how many times each value appears in the list.\n    '''\n    return "
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = [test_list[0][1], test_list[0][0]]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < minimum[1]:\n            minimum = [test_list[i][1], test_list[i][0]]\n    return minimum\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    return max(test_list, key=itemgetter(1))[0]\ndef find_x_in_sorted(a_list, x):\n    '''\n    Given a sorted list of integers, find the position of x in the list.\n    '''\n    if a_list[0] > x:\n        return 0\n    if a_list[-1] < x:\n        return len(a_list)\n    return 1 + (a_list.index(x) - 1) // 2\ndef sort_list_by_index(a_list, x):\n    '''\n    Given a list of tuples, write a function that sorts the list based on the second element in the tuple.\n    '''\n    a_list.sort(key=itemgetter(x))\ndef add_to_list(a_list, x):\n    '''\n    Given a list of tuples, write a function that returns a new list with all of the tuples in the given list,\n    with the second element of each tuple added to the given value x.\n    '''\n    return [(x + x_val) for x, x_val in a_list]\ndef sort_list_by_last_element(a_list, x):\n    '''\n    Given a list of tuples, write a function that returns a new list with the first element of each tuple sorted,\n    and then the second element of each tuple sorted based on the last element in that tuple.\n    '''\n    a_list.sort(key=itemgetter(-1))\ndef count_distinct_elements(a_list):\n    '''\n    Given a list, write a function that returns a new list with the elements that are distinct in the given list.\n    '''\n    return [x for x in a_list if a_list.count(x) == 1]\ndef find_x_in_list(a_list, x):\n    '''\n    Given a list, write a function that returns the index of the first element that equals x.\n    '''\n    return a_list.index(x)\ndef count_duplicates(a_list):\n    '''\n    Given a list, write a function that returns the number of duplicates in the given list.\n    '''\n    return len([x for x in a_list if a_list.count(x) > 1])\ndef binary_search(a_list, x):\n    '''\n    Given a sorted list of integers, write a function that returns the first position where x is located.\n    '''\n    return find_x_in_sorted(a_list, x)\ndef find_x_at_pos(a_list, x):\n    '''\n    Given a list and an integer, write a function that returns the index of the first value that is equal to x,\n    or None if there is no such value.\n    '''\n    if len(a_list) == 0:\n        return None\n    if a_list[0] > x:\n        return 0\n    if a_list[-1] < x:\n        return len(a_list)\n    return 1 + (a_list.index(x) - 1) // 2\ndef get_item_at_pos(a_list, pos):\n    '''\n    Given a list and an integer, write a function that returns the item in the given position.\n    '''\n    return a_list[pos]\ndef insert_item_at_pos(a_list, x, pos):\n    '''\n    Given a list and two values, write a function that inserts the second value at the given position in the list.\n    '''\n    a_list.insert(pos, x)\ndef remove_item_at_pos(a_list, pos):\n    '''\n    Given a list and an integer, write a function that removes the item in the given position from the list.\n    '''\n    return a_list.pop(pos)\ndef remove_item_from_list(a_list, x):\n    '''\n    Given a list and an integer, write a function that removes the item from the list that has the given value.\n    '''\n    return a_list.remove(x)\ndef swap_items(a_list, i, j):\n    '''\n    Given a list and two integers, write a function that swaps the values at the given positions in the list.\n    '''\n    return a_list[:i] + [a_list[j]] + a_list[i:j] + [a_list[i]] + a_list[j + 1:]\ndef get_middle(a_list):\n    '''\n    Given a list, write a function that returns a new list that is the first and last elements of the original list,\n    and then the middle of the original list, in that order.\n    '''\n    return a_list[:2] + a_list[-2:] + a_list[2:-2]\ndef get_middle_i(a_list, i):\n    '''\n    Given a list and an integer, write a function that returns a new list that is the i-th, i-th last,\n    and i-th-last elements of the original list, and then the middle of the original list, in that order.\n    '''\n    return a_list[(i - 1) * -1:] + a_list[i * -1:i * -1 + 3] + a_list[:i * -1]\ndef remove_duplicates(a_list):\n    '''\n    Given a list, write a function that removes all duplicate values from the list and returns the list.\n    '''\n    return [x for i, x in enumerate(a_list) if a_list.index(x) == i]\ndef get_first_duplicate(a_list):\n    '''\n    Given a list, write a function that returns the first duplicate value in the list.\n    '''\n    seen = set()\n    for x in a_list:\n        if x in seen:\n            return x\n        seen.add(x)\ndef get_last_duplicate(a_list):\n    '''\n    Given a list, write a function that returns the last duplicate value in the list.\n    '''\n    seen = set()\n    for x in a_list:\n        if x in seen:\n            return x\n        seen.add(x)\ndef sum_of_squares(a_list):\n    '''\n    Given a list of integers, write a function that returns the sum of the square of the elements in the list.\n    '''\n    return sum([x ** 2 for x in a_list])\ndef get_max_elem(a_list):\n    '''\n    Given a list, write a function that returns the largest value in the list.\n    '''\n    return max(a_list)\ndef get_min_elem(a_list):\n    '''\n    Given a list, write a function that returns the smallest value in the list.\n    '''\n    return min(a_list)\ndef swap_items_in_list(a_list, i, j):\n    '''\n    Given a list and two integers, write a function that swaps the values at the given positions in the list.\n    '''\n    a_list[i], a_list[j] = a_list[j], a_list[i]\ndef get_item_at_pos_if_exists(a_list, pos):\n    '''\n    Given a list and an integer, write a function that returns the item in the given position, if the position is valid,\n    and None otherwise.\n    '''\n    if pos >= len(a_list):\n        return None\n    return a_list[pos]\ndef find_pos_of_max_val(a_list):\n    '''\n    Given a list, write a function that returns the index of the value in the list that has the largest value.\n    '''\n    return a_list.index(max(a_list))\ndef get_odds(a_list):\n    '''\n    Given a list, write a function that returns a new list with all the values that are odd in the given list.\n    '''\n    return "
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list,key=itemgetter(1))[0]\ndef test_index_minimum():\n    assert index_minimum([(1,2),(3,4),(5,6)]) == 1\n    assert index_minimum([(1,2),(3,4),(5,6),(5,9)]) == 1\n    assert index_minimum([(1,1),(3,4),(5,6),(5,9)]) == 3\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest = None\n    for lst in lst:\n        if smallest is None or len(lst) < len(smallest):\n            smallest = lst\n    return len(smallest)\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for l in lst:\n        if len(l) < min_len:\n            min_len = len(l)\n    return min_len\ndef Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the largest list in a list of lists.\n    '''\n    max_len = len(lst[0])\n    for l in lst:\n        if len(l) > max_len:\n            max_len = len(l)\n    return max_len\ndef Is_All_Same_Length(lst):\n    '''\n    Write a python function to determine if all the lists in a list of lists are the same length.\n    '''\n    lens = []\n    for l in lst:\n        lens.append(len(l))\n    return len(set(lens)) <= 1\ndef Find_Longest_List(lst):\n    '''\n    Write a python function to find the list with the longest elements.\n    '''\n    max_len = len(lst[0])\n    max_l = lst[0]\n    for l in lst:\n        if len(l) > max_len:\n            max_len = len(l)\n            max_l = l\n    return max_l\ndef Find_Shortest_List(lst):\n    '''\n    Write a python function to find the list with the shortest elements.\n    '''\n    min_len = len(lst[0])\n    min_l = lst[0]\n    for l in lst:\n        if len(l) < min_len:\n            min_len = len(l)\n            min_l = l\n    return min_l\ndef Is_Even_Length(lst):\n    '''\n    Write a python function to determine if all the lists in a list of lists are even length.\n    '''\n    for l in lst:\n        if len(l) % 2!= 0:\n            return False\n    return True\ndef Find_Even_Length_List(lst):\n    '''\n    Write a python function to find the list with the even length elements.\n    '''\n    for l in lst:\n        if len(l) % 2 == 0:\n            return l\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for x in lst:\n        if min_length > len(x):\n            min_length = len(x)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    count = 1\n    \n    for i in lst:\n        if len(i) < count:\n            count = len(i)\n            \n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    mini = lst[0]\n    for lst in lst:\n        if len(lst) < len(mini):\n            mini = lst\n    return len(mini)\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        Min = len(lst[0])\n        for i in range(len(lst)):\n            if len(lst[i]) < Min:\n                Min = len(lst[i])\n        return Min\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_lst = len(lst[0])  \n    for sub_lst in lst:  \n        if len(sub_lst) < min_lst:  \n            min_lst = len(sub_lst)  \n    return min_lst  \n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    #lst = [[1, 2, 3], [10, 11, 12, 13], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest = len(lst[0])\n    for i in lst:\n        if len(i)<smallest:\n            smallest = len(i)\n    return smallest\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    list_div = [1]\n    limit = int(n**(1./2)) + 1\n    for i in range(2, limit):\n        if n % i == 0:\n            list_div.append(i)\n            if i!= n/i:\n                list_div.append(n/i)\n    return len(list_div)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n+1):\n        if n%i==0:\n            count=count+1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    divisors = 1\n    for i in range(1, n):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    #print n\n    divisors = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            divisors.append(i)\n    return len(divisors)\n    \n    "
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 0\n    divisor = 0\n    for i in range(2, n//2):\n        if n % i == 0:\n            divisor += 2\n    if n % n == 0:\n        divisor -= 1\n    return divisor\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n%2 == 0:\n        return n//2\n    i = 3\n    cnt = 1\n    while i <= n//2:\n        if n%i == 0:\n            cnt += 1\n        i += 2\n    return cnt\ndef divisor2(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n%2 == 0:\n        return 2\n    i = 3\n    cnt = 2\n    while i <= n//2:\n        if n%i == 0:\n            cnt += 2\n        i += 2\n    return cnt\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    count = 1\n    for i in range(2, n):\n        if n % i == 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    #list of divisors of n\n    div = [1]\n    #returns true if n is prime\n    prime = isPrime(n)\n    #if prime, return 1\n    if prime:\n        return 1\n    #if n is even, return 2\n    elif n % 2 == 0:\n        return 2\n    #for every divisor, check to see if it divides n\n    else:\n        for x in div:\n            #if it does, divide n and add to list of divisors\n            if n % x == 0:\n                div.append(x)\n        #return the length of the divisor list\n        return len(div)\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    flatten = [item for sublist in list1 for item in sublist]\n    unique = list(set(flatten))\n    return {key:flatten.count(key) for key in unique}\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dic = {}\n    for i in list1:\n        if i in dic.keys():\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    return dic\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    unique_list = []\n    for sublist in list1:\n        for val in sublist:\n            if val not in unique_list:\n                unique_list.append(val)\n    unique_list.sort()\n    unique_list_dict = {}\n    for i in range(0, len(unique_list)):\n        unique_list_dict[unique_list[i]] = list1.count(unique_list[i])\n    return unique_list_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    my_dict = {}\n    for i in list1:\n        if i not in my_dict:\n            my_dict[i] = 1\n        else:\n            my_dict[i] += 1\n    return my_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Your code here\n    freq = {}\n    for x in list1:\n        if x in freq:\n            freq[x] += 1\n        else:\n            freq[x] = 1\n    return freq\n    \ndef freq_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for x in list1:\n        if x in freq:\n            freq[x] += 1\n        else:\n            freq[x] = 1\n    return freq\n    \ndef product_list(list1):\n    '''\n    Write a function to find the product of all the elements in a list, using a generator.\n    '''\n    # Your code here\n    total = 1\n    for x in list1:\n        total = total * x\n    return total\n    \ndef product_list_2(list1):\n    '''\n    Write a function to find the product of all the elements in a list, using a generator.\n    '''\n    # Your code here\n    total = 1\n    for x in list1:\n        total = total * x\n    return total\n    \ndef power_list(list1, pow):\n    '''\n    Write a function to find the power of each element in a list, using a generator.\n    '''\n    # Your code here\n    total = 1\n    for x in list1:\n        total = total * x\n    return total ** pow\n    \ndef power_list_2(list1, pow):\n    '''\n    Write a function to find the power of each element in a list, using a generator.\n    '''\n    # Your code here\n    total = 1\n    for x in list1:\n        total = total * x\n    return total ** pow\n    \ndef is_palindrome(string):\n    '''\n    Write a function to determine if a string is a palindrome.\n    '''\n    # Your code here\n    return string == string[::-1]\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for x in list1:\n        d[x] = d.get(x,0) + 1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dic = {}\n    for elem in list1:\n        if elem not in dic:\n            dic[elem] = 0\n        dic[elem] += 1\n    return dic\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    counts = {}\n    for i in list1:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    return counts\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for element in list1:\n        if element not in frequency_dict:\n            frequency_dict[element] = 1\n        else:\n            frequency_dict[element] += 1\n    return frequency_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    counts = {}\n    for item in list1:\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n    return counts\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) == 0:\n        return 1\n    elif len(numbers) == 1:\n        return numbers[0]\n    else:\n        return numbers[0] * multiply_num(numbers[1:])\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for n in numbers:\n        result *= n\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    total = total / len(numbers)\n    return total\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    import functools\n    return functools.reduce(lambda x,y: x*y, numbers, 1)\n    \n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    n = len(numbers)\n    product = 1\n    for i in numbers:\n        product = product * i\n    return product / n\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    prod = 1\n    for num in numbers:\n        prod = prod * num\n    return prod / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for number in numbers:\n        total *= number\n    return total / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda x,y:x*y, numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    return result/len(numbers)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"1\"\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    result = ''\n    while n > 0:\n        result += str(n % 2)\n        n /= 2\n    return result[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Your code here\n    return bin(n).replace(\"0b\", \"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    if n < 0:\n        return '-' + decimal_to_binary(-n)\n    if n == 1:\n        return '1'\n    binary_list = []\n    while n > 0:\n        binary_list.append(n % 2)\n        n = n // 2\n    binary_list.reverse()\n    return ''.join(str(e) for e in binary_list)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    if n < 0:\n        n = n + 2**32\n    s = []\n    while n:\n        s.append(str(n%2))\n        n /= 2\n    s.reverse()\n    return \"\".join(s)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # n = int(n)\n    # if n == 0:\n    #     return str(n)\n    # d = 1\n    # s = ''\n    # while n > 0:\n    #     if n % 2 == 0:\n    #         s += '0'\n    #     else:\n    #         s += '1'\n    #     n = n // 2\n    # s = s[::-1]\n    # return s\n    if n == 0:\n        return str(n)\n    else:\n        return decimal_to_binary(n // 2) + str(n % 2)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n==0:\n        return \"0\"\n    binary = ''\n    while n:\n        binary += str(n % 2)\n        n = n // 2\n    return binary[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    bin_str = ''\n    while n > 0:\n        if n % 2 == 0:\n            bin_str = '0' + bin_str\n        else:\n            bin_str = '1' + bin_str\n        n /= 2\n    return bin_str\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    result = ''\n    for i in xrange(32):\n        if n > 1:\n            if n%2 == 0:\n                result = str(0) + result\n                n = n/2\n            else:\n                result = str(1) + result\n                n = n/2\n        else:\n            result = str(n) + result\n            return result\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    str_num = str(num)\n    n = len(str_num)\n    for i in range(n-1, 0, -1):\n        if str_num[i] < str_num[i-1]:\n            break\n    if i == 1 and str_num[0] > str_num[1]:\n        return int(str_num[:2] + '1' + '9'*(n-2))\n    return int(str_num[:i] + str_num[i:n]+ '9'*(n-i))\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    if num == num[::-1]:\n        num = int(num + '1')\n    else:\n        for i in range(len(num), 0, -1):\n            if str(num)[i-1:i] == str(num)[i-1:i][::-1]:\n                num = int(num + str(i))\n                break\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # We know num is an integer between 0 and 9\n    num_str = str(num)\n    for i in range(len(num_str)-1, -1, -1):\n        if num_str[i] == '9':\n            continue\n        else:\n            num_str = num_str[:i] + '9' + num_str[i+1:]\n            return int(num_str)\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    temp = num\n    while temp>0:\n        if temp%10==0:\n            temp = temp//10\n        else:\n            break\n    num = num+1\n    temp2 = num\n    while temp2>0:\n        if temp2%10==0:\n            temp2 = temp2//10\n        else:\n            break\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    if num_str[0] == '0':\n        if len(num_str) == 1:\n            return 0\n        elif len(num_str) == 2:\n            if int(num_str[1]) == 0:\n                return 11\n            else:\n                return 10\n        elif len(num_str) > 2:\n            num_str = num_str[1:]\n            num_str = num_str[::-1]\n            num_str = num_str.replace('0','')\n            num_str = num_str.lstrip('0')\n            num_str = num_str[::-1]\n            if num_str[0] == '0':\n                return int(num_str[1:])\n            else:\n                return int(num_str)\n    elif num_str[0]!= '0':\n        num_str = num_str[1:]\n        num_str = num_str[::-1]\n        num_str = num_str.replace('0','')\n        num_str = num_str.lstrip('0')\n        num_str = num_str[::-1]\n        if num_str[0] == '0':\n            return int(num_str[1:])\n        else:\n            return int(num_str)\n    elif num_str[0] == '0':\n        if len(num_str) == 1:\n            return 0\n        elif len(num_str) == 2:\n            if int(num_str[1]) == 0:\n                return 11\n            else:\n                return 10\n        elif len(num_str) > 2:\n            num_str = num_str[1:]\n            num_str = num_str[::-1]\n            num_str = num_str.replace('0','')\n            num_str = num_str.lstrip('0')\n            num_str = num_str[::-1]\n            if num_str[0] == '0':\n                return int(num_str[1:])\n            else:\n                return int(num_str)\n    else:\n        if len(num_str) == 1:\n            return 0\n        elif len(num_str) == 2:\n            if int(num_str[1]) == 0:\n                return 11\n            else:\n                return 10\n        elif len(num_str) > 2:\n            num_str = num_str[1:]\n            num_str = num_str[::-1]\n            num_str = num_str.replace('0','')\n            num_str = num_str.lstrip('0')\n            num_str = num_str[::-1]\n            if num_str[0] == '0':\n                return int(num_str[1:])\n            else:\n                return int(num_str)\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    num = num[::-1]\n    if num[-1] == '9':\n        num = num[:-1] + '0'\n    else:\n        num = num[:-1] + str(int(num[-1])+1)\n    num = num[::-1]\n    return int(num)\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num <= 9:\n        return num + 1\n    count = 1\n    num_string = str(num)\n    while num_string[:count]!= num_string[:count][::-1]:\n        count += 1\n    return int(num_string[:count] + num_string[:count][::-1])\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_string = str(num)\n    if num_string[0] == '9':\n        new_num = num + 1\n        return new_num\n    else:\n        new_num = int(num_string[::-1])\n        if new_num < num:\n            new_num = new_num + 10\n        return new_num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    num = num + ''.join(reversed(num))\n    return int(num)\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if (num==0):\n        return 1\n    return (((num-1)<<1)+1)\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    return arr[(k-1) % n]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if n <= 0:\n        raise ValueError(\"invalid argument\")\n    if k > n:\n        raise ValueError(\"invalid argument\")\n    if k == n:\n        return arr[n-1]\n    elif k == 1:\n        return min(arr)\n    pivot = arr[n-1]\n    left = [x for x in arr if x < pivot]\n    right = [x for x in arr if x > pivot]\n    if k <= len(left):\n        return kth_element(left, k)\n    return kth_element(right, k-len(left)-1)\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr) - 1:\n        print 'error'\n        return\n    #print arr\n    pivot = arr[-1]\n    #print 'pivot =', pivot\n    curr = arr[0]\n    #print 'curr =', curr\n    #pivot = arr[-1]\n    #print 'pivot =', pivot\n    #print 'curr =', curr\n    #print 'arr =', arr\n    #print 'k =', k\n    i = 0\n    j = len(arr) - 1\n    while i!= j:\n        if arr[i] > curr and arr[j] < curr:\n            #print 'i =', i\n            #print 'j =', j\n            #print 'arr[i] =', arr[i]\n            #print 'arr[j] =', arr[j]\n            arr[i], arr[j] = arr[j], arr[i]\n            #print 'arr =', arr\n            i += 1\n            j -= 1\n            if i == k:\n                return arr[k]\n        elif arr[i] <= curr:\n            i += 1\n        elif arr[j] >= curr:\n            j -= 1\n        if i == k:\n            return arr[i]\n        elif i > k:\n            return arr[i]\n        elif j < k:\n            return arr[j]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return False\n    if k == 0:\n        return arr[0]\n    if k == len(arr):\n        return arr[-1]\n    if k == len(arr) / 2:\n        return arr[len(arr)/2]\n    n = int(len(arr) / 2)\n    if arr[n-1] < arr[n] < arr[n+1] or arr[n-1] > arr[n] > arr[n+1]:\n        return arr[n]\n    if arr[n-1] > arr[n] > arr[n+1]:\n        return kth_element(arr[:n], k)\n    else:\n        return kth_element(arr[n+1:], k-n-1)\n    \ndef kth_element_2(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 0-based indexing.\n    '''\n    if k > len(arr):\n        return False\n    if k == 0:\n        return arr[0]\n    if k == len(arr):\n        return arr[-1]\n    if k == len(arr) / 2:\n        return arr[len(arr)/2]\n    n = int(len(arr) / 2)\n    if arr[n] < arr[n-1]:\n        return kth_element(arr[:n], k)\n    elif arr[n] > arr[n-1]:\n        return kth_element(arr[n+1:], k-n-1)\n    else:\n        return arr[n]\n    \ndef kth_element_3(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 0-based indexing.\n    '''\n    if k > len(arr):\n        return False\n    if k == 0:\n        return arr[0]\n    if k == len(arr):\n        return arr[-1]\n    if k == len(arr) / 2:\n        return arr[len(arr)/2]\n    n = int(len(arr) / 2)\n    if arr[n] > arr[n-1]:\n        return kth_element_3(arr[n+1:], k-n-1)\n    elif arr[n] < arr[n-1]:\n        return kth_element_3(arr[:n], k)\n    else:\n        return arr[n]\n        \ndef kth_element_4(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 0-based indexing.\n    '''\n    if k > len(arr):\n        return False\n    if k == 0:\n        return arr[0]\n    if k == len(arr):\n        return arr[-1]\n    if k == len(arr) / 2:\n        return arr[len(arr)/2]\n    n = int(len(arr) / 2)\n    if arr[n] < arr[n-1]:\n        return kth_element_4(arr[n+1:], k-n-1)\n    elif arr[n] > arr[n-1]:\n        return kth_element_4(arr[:n], k)\n    else:\n        return arr[n]\n    \ndef kth_element_5(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 0-based indexing.\n    '''\n    if k > len(arr):\n        return False\n    if k == 0:\n        return arr[0]\n    if k == len(arr):\n        return arr[-1]\n    if k == len(arr) / 2:\n        return arr[len(arr)/2]\n    n = int(len(arr) / 2)\n    if arr[n-1] < arr[n]:\n        return kth_element_5(arr[:n], k)\n    elif arr[n-1] > arr[n]:\n        return kth_element_5(arr[n+1:], k-n-1)\n    else:\n        return arr[n]\n    \ndef kth_element_6(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 0-based indexing.\n    '''\n    if k > len(arr):\n        return False\n    if k == 0:\n        return arr[0]\n    if k == len(arr):\n        return arr[-1]\n    if k == len(arr) / 2:\n        return arr[len(arr)/2]\n    n = int(len(arr) / 2)\n    if arr[n] < arr[n-1]:\n        return kth_element_6(arr[n+1:], k-n-1)\n    elif arr[n] > arr[n-1]:\n        return kth_element_6(arr[:n], k)\n    else:\n        return arr[n]\n    \ndef kth_element_7(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 0-based indexing.\n    '''\n    if k > len(arr):\n        return False\n    if k == 0:\n        return arr[0]\n    if k == len(arr):\n        return arr[-1]\n    if k == len(arr) / 2:\n        return arr[len(arr)/2]\n    n = int(len(arr) / 2)\n    if arr[n-1] < arr[n]:\n        return kth_element_7(arr[n+1:], k-n-1)\n    elif arr[n-1] > arr[n]:\n        return kth_element_7(arr[:n], k)\n    else:\n        return arr[n]\n    \ndef kth_element_8(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 0-based indexing.\n    '''\n    if k > len(arr):\n        return False\n    if k == 0:\n        return arr[0]\n    if k == len(arr):\n        return arr[-1]\n    if k == len(arr) / 2:\n        return arr[len(arr)/2]\n    n = int(len(arr) / 2)\n    if arr[n] < arr[n-1]:\n        return kth_element_8(arr[n+1:], k-n-1)\n    elif arr[n] > arr[n-1]:\n        return kth_element_8(arr[:n], k)\n    else:\n        return arr[n]\n    \ndef kth_element_9(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 0-based indexing.\n    '''\n    if k > len(arr):\n        return False\n    if k == 0:\n        return arr[0]\n    if k == len(arr):\n        return arr[-1]\n    if k == len(arr) / 2:\n        return arr[len(arr)/2]\n    n = int(len(arr) / 2)\n    if arr[n-1] < arr[n]:\n        return kth_element_9(arr[n+1:], k-n-1)\n    elif arr[n-1] > arr[n]:\n        return kth_element_9(arr[:n], k)\n    else:\n        return arr[n]\n    \ndef kth_element_10(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 0-based indexing.\n    '''\n    if k > len(arr):\n        return False\n    if k == 0:\n        return arr[0]\n    if k == len(arr):\n        return arr[-1]\n    if k == len(arr) / 2:\n        return arr[len(arr)/2]\n    n = int(len(arr) / 2)\n    if arr[n] < arr[n-1]:\n        return kth_element_10(arr[n+1:], k-n-1)\n    elif arr[n] > arr[n-1]:\n        return kth_elemen"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return None\n    lo = 0\n    hi = len(arr) - 1\n    while lo < hi:\n        mid = lo + (hi - lo) // 2\n        mid_val = arr[mid]\n        if mid_val == k:\n            return mid\n        elif mid_val > k:\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    return lo\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    pivot = arr[0]\n    left_idx = 1\n    right_idx = len(arr) - 1\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 0 or k > len(arr):\n        return None\n    else:\n        return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr_len = len(arr)\n    start = 0\n    end = arr_len - 1\n    while start <= end:\n        pivot_index = (start + end) // 2\n        pivot_element = arr[pivot_index]\n        if k == pivot_index + 1:\n            return pivot_element\n        elif k < pivot_index + 1:\n            end = pivot_index - 1\n        else:\n            start = pivot_index + 1\n    return None\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    # Return the kth element if k is valid and doesn't exceed the length of the array\n    if k >= 1 and k <= n:\n        return arr[k - 1]\n    # Otherwise return k as it is invalid\n    return k\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if len(word) == 0:\n        return ''\n    if len(word) == 1:\n        return word[0].upper()\n    else:\n        return word[0].upper() + word[1:].lower()\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if not word:\n        return ''\n    if len(word) == 1:\n        return word\n    head = word[0]\n    return head + camelcase(word[1:])\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    lst = word.split('_')\n    res = lst[0]\n    for i in range(1, len(lst)):\n        res += lst[i].capitalize()\n    return res\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    res = words[0]\n    for i in range(1, len(words)):\n        res += words[i].capitalize()\n    return res\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word == '':\n        return ''\n    elif word[0].isupper():\n        return word\n    elif word[0].islower():\n        return word[0].upper() + word[1:]\n    else:\n        return word[0].lower() + word[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    def camel_case(word):\n        for c in word:\n            if c.isupper():\n                return True\n        return False\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.lower()\n    if word[0] == '_':\n        word = word[1:]\n    else:\n        pass\n    return ''.join(word.capitalize() for word in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    #if word[0].isupper():\n    #    return word\n    #else:\n    #    return word[0].upper() + word[1:]\n    return ''.join(x.title() for x in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word == None or word == '':\n        return ''\n    \n    words = word.split('_')\n    return words[0].lower() + \"\".join([word.title() for word in words[1:]])\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # return \"\".join(x.capitalize() for x in word.split('_'))\n    \n    # Another One\n    # return \"\".join(word[0].upper() + word[1:].lower() for word in word.split('_'))\n    \n    # Another One\n    # return ''.join(c if c.isupper() else '_' + c for c in word)\n    \n    # Another One\n    # return ''.join(word[0].upper() + word[1:].lower() for word in word.split('_'))\n    \n    # Another One\n    # return ''.join(word[0].upper() + word[1:].lower() for word in word.split('_'))\n    \n    # Another One\n    return ''.join(word[0].upper() + word[1:].lower() for word in word.split('_'))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 and m == 0:\n        return 1\n    elif n == 0:\n        return 0\n    elif m == 0:\n        return 0\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 or m == 0:\n        return 0\n    if n < m:\n        n, m = m, n\n    return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n * m - n + m - 1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Need to check if n is odd or even, n even: Eulerian number is 1\n    # n is odd: Eulerian number is -1\n    if n % 2 == 1:\n        return 1\n    if n % 2 == 0:\n        return -1\n    \n    # Return Eulerian number if n and m are even\n    if n % 2 == 0 and m % 2 == 0:\n        return 0\n    \n    # Return Eulerian number if n and m are odd\n    if n % 2 == 1 and m % 2 == 1:\n        return 0\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2*n*eulerian_num(n-1, m) + m*eulerian_num(n-1, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return m\n    else:\n        return (eulerian_num(n - 1, m - 1) + m)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    count_path = 0\n    for i in range(m):\n        for j in range(n):\n            count_path += matrix[i][j]\n    return count_path\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def find_eulerian_path(a, n):\n        '''\n        Given a string, find the eulerian path of it\n        '''\n        start = 0\n        path = []\n        while (start < n):\n            if (a[start] == ')'):\n                start += 1\n                path.append(1)\n            elif (a[start] == '('):\n                start += 1\n                path.append(0)\n            else:\n                start += 1\n        return path\n    \n    def is_eulerian(path, n):\n        '''\n        Given a list of integers, determines if the list is eulerian\n        '''\n        for i in range(0, len(path) - 1):\n            if (path[i] == 1 and path[i + 1] == 0) or (path[i] == 0 and path[i + 1] == 1):\n                return False\n        if (path[-1] == 1 and path[0] == 0) or (path[-1] == 0 and path[0] == 1):\n            return False\n        return True\n    \n    def eulerian_cycle(a, n, path):\n        '''\n        Given a string and path, find the eulerian cycle\n        '''\n        start = 0\n        cycle = []\n        while (start < n):\n            if (a[start] == ')'):\n                start += 1\n                cycle.append(1)\n            elif (a[start] == '('):\n                start += 1\n                cycle.append(0)\n            else:\n                start += 1\n        cycle.append(path[-1])\n        return cycle\n    \n    def find_eulerian_cycle(a, n):\n        '''\n        Given a string, find the eulerian cycle of it\n        '''\n        path = find_eulerian_path(a, n)\n        if not is_eulerian(path, n):\n            return None\n        return eulerian_cycle(a, n, path)\n    \n    def check_cycle(cycle):\n        '''\n        Given a list of integers, check if the cycle is valid\n        '''\n        first = cycle[0]\n        for i in range(1, len(cycle)):\n            if cycle[i] == 0 and first == 1:\n                return False\n            if cycle[i] == 1 and first == 0:\n                return False\n            first = cycle[i]\n        return True\n    \n    def is_eulerian_cycle(a, n, cycle):\n        '''\n        Given a string and a list of integers, determine if the list is a valid eulerian cycle\n        '''\n        if (check_cycle(cycle)):\n            return cycle\n        return None\n    \n    def final_check(cycle):\n        '''\n        Given a list of integers, determine if the cycle is valid\n        '''\n        if cycle[0] == 1:\n            cycle.append(0)\n        else:\n            cycle.insert(0, 0)\n        return cycle\n    \n    def eulerian_string(cycle):\n        '''\n        Given a list of integers, return the string in the eulerian cycle\n        '''\n        return ''.join(str(x) for x in cycle)\n    \n    def check_string(s, n):\n        '''\n        Given a string, check if the string is valid\n        '''\n        for i in range(0, len(s)):\n            if s[i] == ')' or s[i] == '(' or s[i] == ')':\n                return False\n        if s[0] == ')' or s[0] == '(' or s[-1] == ')' or s[-1] == '(':\n            return False\n        if (s.count('(') == s.count(')')):\n            return False\n        return True\n    \n    def sort_cycle(cycle):\n        '''\n        Given a list of integers, determine if the cycle is valid\n        '''\n        n = len(cycle)\n        cycle = [cycle[0]] + [cycle[n - 1]] + cycle[1:n - 1] + [cycle[1]]\n        return cycle\n    \n    def find_cycle_length(cycle):\n        '''\n        Given a list of integers, determine the length of the cycle\n        '''\n        n = len(cycle)\n        if cycle[0] == 0:\n            return n - 1\n        elif cycle[0] == 1:\n            return n\n        return n + 1\n    \n    def find_cycle_pos(cycle):\n        '''\n        Given a list of integers, determine the position of the cycle\n        '''\n        n = len(cycle)\n        if cycle[0] == 0:\n            return 0\n        elif cycle[0] == 1:\n            return n - 1\n        return n\n    \n    def is_cycle_valid(cycle):\n        '''\n        Given a list of integers, determine if the cycle is valid\n        '''\n        n = len(cycle)\n        if (cycle[0] == 0 and cycle[n - 1] == 1) or (cycle[0] == 1 and cycle[n - 1] == 0):\n            return False\n        if (cycle[0] == 0 and cycle[1] == 1) or (cycle[0] == 1 and cycle[1] == 0):\n            return False\n        for i in range(2, n):\n            if cycle[i] == 1 and cycle[i - 1] == 0 or cycle[i] == 0 and cycle[i - 1] == 1:\n                return False\n        return True\n    \n    def check_cycle(cycle):\n        '''\n        Given a list of integers, determine if the cycle is valid\n        '''\n        for i in range(1, len(cycle)):\n            if (cycle[i] == 0 and cycle[i - 1] == 1) or (cycle[i] == 1 and cycle[i - 1] == 0):\n                return False\n        if (cycle[0] == 0 and cycle[-1] == 1) or (cycle[0] == 1 and cycle[-1] == 0):\n            return False\n        for i in range(2, len(cycle)):\n            if cycle[i] == 1 and cycle[i - 1] == 0 or cycle[i] == 0 and cycle[i - 1] == 1:\n                return False\n        return True\n    \n    def cycle_pos(cycle):\n        '''\n        Given a list of integers, determine the position of the cycle\n        '''\n        n = len(cycle)\n        if cycle[0] == 0:\n            return 0\n        elif cycle[0] == 1:\n            return n - 1\n        return n\n    \n    def string_pos(cycle, a):\n        '''\n        Given a list of integers, determine the position of the cycle\n        '''\n        n = len(cycle)\n        for i in range(0, n):\n            if cycle[i] == a:\n                return i\n        return -1\n    \n    def remove_cycle(cycle, a, n):\n        '''\n        Given a list of integers, remove the cycle and the a from the list\n        '''\n        n -= 1\n        for i in range(0, len(cycle)):\n            if cycle[i] == a:\n                del cycle[i]\n                break\n        return cycle\n    \n    def rearrange_cycle(cycle):\n        '''\n        Given a list of integers, rearrange the cycle\n        '''\n        n = len(cycle)\n        for i in range(0, n):\n            cycle[i] = cycle[i] * (n + 1) + 1\n        for i in range(0, n):\n            cycle[i] = cycle[i] + (i + 1)\n        return cycle\n    \n    def cycle_rearrange(cycle):\n        '''\n        Given a list of integers, rearrange the cycle\n        '''\n        a = cycle[0]\n        n = len(cycle)\n        cycle = remove_cycle(cycle, a, n)\n        cycle = rearrange_cycle(cycle)\n        cycle = final_check(cycle)\n        cycle = insert_cycle(cycle, a, n)\n        return cycle\n    \n    def insert_cycle(cycle, a, n):\n        '''\n        Given a list of integers, rearrange the cycle\n        '''\n        for i in range(0, n):\n            if cycle[i] == a:\n            "
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    euler = 0\n    for x in xrange(1, n+1): \n        for y in xrange(1, m+1): \n            if x + y == n: \n                euler += 1\n    return euler\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return sum(a_i(n, m) for a_i in a_all(n, m))\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return list(map(lambda x: sorted(x), input_list))\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted([sorted(x) for x in input_list])\n    \ndef find_product(input_list):\n    '''\n    Write a function to find the product of the numbers in a given list.\n    '''\n    product = 1\n    for element in input_list:\n        product *= element\n    return product\n    \ndef fib(n):\n    '''\n    Write a function to return the nth Fibonacci number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n    \ndef palindrome(string):\n    '''\n    Write a function to return whether a string is a palindrome\n    '''\n    return string == string[::-1]\n    \ndef find_palindromes(string):\n    '''\n    Write a function to return all the palindromes in a given string.\n    '''\n    return [string[i : i + j] for i in range(len(string) - j + 1) for j in range(1, len(string) - i + 1) if string[i : i + j] == string[i : i + j][::-1]]\n    \ndef are_permutations(string1, string2):\n    '''\n    Write a function to return whether two strings are permutations of each other.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    return sorted(string1) == sorted(string2)\n    \ndef valid_brackets(string):\n    '''\n    Write a function to check if a given string is valid.\n    '''\n    stack = []\n    for bracket in string:\n        if bracket == ')':\n            if not stack or stack[-1]!= '(':\n                return False\n            else:\n                stack.pop()\n        elif bracket == '}':\n            if not stack or stack[-1]!= '{':\n                return False\n            else:\n                stack.pop()\n        elif bracket == ']':\n            if not stack or stack[-1]!= '[':\n                return False\n            else:\n                stack.pop()\n        else:\n            stack.append(bracket)\n    return not stack\n    \ndef valid_parenthesis(string):\n    '''\n    Write a function to check if a given string has valid parenthesis\n    '''\n    stack = []\n    for bracket in string:\n        if bracket == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n        elif bracket == '}':\n            if stack and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n        elif bracket == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n        else:\n            stack.append(bracket)\n    return not stack\n    \ndef max_product(input_list):\n    '''\n    Write a function to return the maximum product of three numbers in a list.\n    '''\n    max_product = 0\n    for i in range(len(input_list)):\n        for j in range(i + 1, len(input_list)):\n            for k in range(j + 1, len(input_list)):\n                if input_list[i] * input_list[j] * input_list[k] > max_product:\n                    max_product = input_list[i] * input_list[j] * input_list[k]\n    return max_product\n    \ndef remove_duplicates(input_list):\n    '''\n    Write a function to remove duplicates from a given list.\n    '''\n    return list(set(input_list))\n    \ndef reverse_string(string):\n    '''\n    Write a function to reverse a given string.\n    '''\n    return string[::-1]\n    \ndef are_anagrams(string1, string2):\n    '''\n    Write a function to check whether two strings are anagrams or not.\n    '''\n    return sorted(string1) == sorted(string2)\n    \ndef has_duplicates(input_list):\n    '''\n    Write a function to return if a given list contains any duplicate elements.\n    '''\n    return len(input_list)!= len(set(input_list))\n    \ndef factorial(n):\n    '''\n    Write a function to return the factorial of a given number.\n    '''\n    product = 1\n    for i in range(n):\n        product *= i + 1\n    return product\n    \ndef divisors(num):\n    '''\n    Write a function to return all the divisors of a given number.\n    '''\n    divisors = []\n    for i in range(1, num + 1):\n        if num % i == 0:\n            divisors.append(i)\n    return divisors\n    \ndef is_narcissistic(number):\n    '''\n    Write a function to check whether the given number is a Narcissistic number.\n    '''\n    reverse_number = int(str(number)[::-1])\n    return number == reverse_number\n    \ndef has_duplicates(input_list):\n    '''\n    Write a function to return if a given list contains any duplicate elements.\n    '''\n    return len(input_list)!= len(set(input_list))\n    \ndef find_duplicates(input_list):\n    '''\n    Write a function to find all the duplicates elements of a given list.\n    '''\n    duplicates = []\n    for i in input_list:\n        if input_list.count(i) > 1:\n            if i not in duplicates:\n                duplicates.append(i)\n    return duplicates\n    \ndef get_max_occurences(input_list):\n    '''\n    Write a function to return the maximum number of times an element can\n    appear in the list.\n    '''\n    max_count = 1\n    element = input_list[0]\n    for i in input_list:\n        if i == element:\n            max_count += 1\n        else:\n            max_count = 1\n            element = i\n    return max_count\n    \ndef reverse_words(string):\n    '''\n    Write a function to reverse a given string.\n    '''\n    return''.join(string.split()[::-1])\n    \ndef count_vowels(string):\n    '''\n    Write a function to count the number of vowels in a given string.\n    '''\n    count = 0\n    vowels = 'aeiouAEIOU'\n    for letter in string:\n        if letter in vowels:\n            count += 1\n    return count\n    \ndef count_words(string):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    count = 0\n    for i in range(1, len(string)):\n        if string[i - 1] =='':\n            count += 1\n    return count\n    \ndef add_binary(string1, string2):\n    '''\n    Write a function to add two binary numbers.\n    '''\n    output = ''\n    carry = 0\n    string1 = string1[::-1]\n    string2 = string2[::-1]\n    for i in range(max(len(string1), len(string2))):\n        temp = carry\n        if i < len(string1):\n            temp += ord(string1[i]) - ord('0')\n        if i < len(string2):\n            temp += ord(string2[i]) - ord('0')\n        carry, output = divmod(temp, 2)\n        output += str(carry)\n    return output[::-1]\n    \ndef run_length_encoding(string):\n    '''\n    Write a function to encode a string with run length encoding.\n    '''\n    output = ''\n    counter = 1\n    for i in range(len(string) - 1):\n        if string[i] == string[i + 1]:\n            counter += 1\n        else:\n            output += str(counter) + string[i]\n            counter = 1\n    output += str(counter) + string[-1]\n    return output"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(0, len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    import operator\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    print \"Input list:\", input_list\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            input_list[i][j] = int(input_list[i][j])\n    return sorted(input_list)\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list_of_lists = input_list\n    for i in range(len(list_of_lists)):\n        list_of_lists[i] = sorted(list_of_lists[i])\n    return list_of_lists\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return_list = []\n    for sub_list in input_list:\n        sub_list.sort()\n        return_list.append(sub_list)\n    return return_list\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #sort each sublist\n    return [sorted(s) for s in input_list]\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([x for x in lst if x])\n    \n    \ndef test_count():\n    assert count([True, False, True, True, False, True]) == 3\n    assert count([False, True, False, True, False, True]) == 2\n    assert count([False, False, True, False, True]) == 1\n    assert count([]) == 0\n    assert count([2, 3, 4, 5]) == 0\n    assert count([\"dog\", False, False, \"cat\", True, 3]) == 4\n    assert count([2, 3, 4, 5, 6, 7]) == 1\n    assert count([2, 3, 4, 5, 6, 7, 8]) == 2\n    assert count([2, 3, 4, 5, 6, 7, 8, 9]) == 3\n    assert count([2, 3, 4, 5, 6, 7, 8, 9, 10]) == 4\n    assert count([]) == 0\n    assert count([2, 3, 4, 5, 6, 7]) == 1\n    assert count([True, False, True, False, True]) == 2\n    assert count([True, False, True, False, True, True]) == 3\n    assert count([True, False, True, False, True, True, False, True, True]) == 4\n    assert count([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 10\n    assert count([]) == 0\n    assert count([2, 3, 4, 5, 6, 7]) == 1\n    assert count([True, False, True, False, True]) == 2\n    assert count([True, False, True, False, True, True]) == 3\n    assert count([True, False, True, False, True, True, False, True, True]) == 4\n    assert count([2, 3, 4, 5, 6, 7, 8, 9, 10]) == 9\n    assert count([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 21\n    assert count([]) == 0\n    assert count([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == 22\n    assert count([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200]) == 29749\n    assert count([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == 21\n    assert count([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200]) == 29749\n    assert count([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200]) == 29749\n    assert count([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 9"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(bool(item) for item in lst)\n    \n    \ndef avg(lst):  \n    '''\n    Write a python function to calculate the average of a list.\n    '''\n    return sum(lst)/len(lst)\n    \n    \ndef maximum(lst):  \n    '''\n    Write a python function to find the maximum value in the given list.\n    '''\n    return max(lst)\n    \n    \ndef minimum(lst):  \n    '''\n    Write a python function to find the minimum value in the given list.\n    '''\n    return min(lst)\n    \n    \ndef variance(lst):\n    '''\n    Write a python function to calculate the variance of the list.\n    '''\n    mean = avg(lst)\n    tot = 0\n    for item in lst:\n        tot += (item-mean)**2\n    return tot/len(lst)\n    \n    \ndef standardDeviation(lst):\n    '''\n    Write a python function to calculate the standard deviation of the list.\n    '''\n    return math.sqrt(variance(lst))\n    \n    \ndef first(lst):\n    '''\n    Write a python function to return the first item of the list\n    '''\n    return lst[0]\n    \n    \ndef last(lst):\n    '''\n    Write a python function to return the last item of the list\n    '''\n    return lst[len(lst)-1]\n    \n    \ndef firstLast(lst):\n    '''\n    Write a python function to return the first and last items of the list\n    '''\n    return [lst[0], lst[len(lst)-1]]\n    \n    \ndef index(lst, value):\n    '''\n    Write a python function to return the index of the first occurrence of the given value in the given list.\n    '''\n    return lst.index(value)\n    \n    \ndef countOccurrences(lst, value):\n    '''\n    Write a python function to count the number of occurrences of the given value in the given list.\n    '''\n    return lst.count(value)\n    \n    \ndef join(lst, separator):\n    '''\n    Write a python function to join the list elements using the separator value.\n    '''\n    return separator.join(lst)\n    \n    \ndef map(lst, func):\n    '''\n    Write a python function to map the items of the given list using the given function.\n    '''\n    return [func(item) for item in lst]\n    \n    \ndef reduce(lst, func, initializer=None):\n    '''\n    Write a python function to reduce the items of the given list using the given function.\n    '''\n    if initializer is None:\n        return functools.reduce(func, lst)\n    else:\n        return functools.reduce(func, lst, initializer)\n    \n    \ndef filter(lst, func):\n    '''\n    Write a python function to filter the items of the given list using the given function.\n    '''\n    return [item for item in lst if func(item)]\n    \n    \ndef arrange(lst, reverse=False):\n    '''\n    Write a python function to arrange the items of the given list in ascending order.\n    '''\n    if reverse:\n        return sorted(lst, reverse=reverse)\n    else:\n        return sorted(lst)\n    \n    \ndef split(lst, size):\n    '''\n    Write a python function to split the given list into chunks of the given size.\n    '''\n    for i in range(0, len(lst), size):\n        yield lst[i:i+size]\n        \n        \ndef flat(lst):\n    '''\n    Write a python function to flatten the list items.\n    '''\n    return [item for sublist in lst for item in sublist]\n    \n    \ndef deepflatten(lst):\n    '''\n    Write a python function to flatten the list items and sublists.\n    '''\n    return reduce(lambda l, r: l + r, lst, [])\n    \n    \ndef pairs(lst):\n    '''\n    Write a python function to return the pairs of items from the given list.\n    '''\n    for i in range(len(lst)):\n        yield lst[i], lst[(i+1)%len(lst)]\n        \n        \ndef pairsWithIndex(lst):\n    '''\n    Write a python function to return the pairs of items and their index from the given list.\n    '''\n    for i in range(len(lst)):\n        yield lst[i], i\n        \n        \ndef shannonEntropy(lst):\n    '''\n    Write a python function to calculate the Shannon entropy of the given list.\n    '''\n    prob = [float(item)/len(lst) for item in lst]\n    return sum(p * math.log(p, 2) for p in prob)\n    \n    \ndef subset(lst, subsetSize):\n    '''\n    Write a python function to calculate the subset of the given list with the given subset size.\n    '''\n    return [lst[i:i+subsetSize] for i in range(len(lst)-subsetSize+1)]\n    \n    \ndef permutations(lst):\n    '''\n    Write a python function to calculate the permutations of the given list.\n    '''\n    if len(lst) <= 1:\n        return [lst]\n    else:\n        l = []\n        for i, x in enumerate(lst):\n            l += [ [x] + p for p in permutations(lst[:i]+lst[i+1:]) ]\n        return l\n    \n    \ndef combinations(lst, k):\n    '''\n    Write a python function to calculate the combinations of the given list with the given length.\n    '''\n    return [lst[i:i+k] for i in range(len(lst)-k+1)]\n    \n    \ndef unique(lst):\n    '''\n    Write a python function to calculate the unique items in the given list.\n    '''\n    return list(set(lst))\n    \n    \ndef getCol(lst, col):\n    '''\n    Write a python function to return the elements of the given list in the given column.\n    '''\n    return [row[col] for row in lst]\n    \n    \ndef sort(lst, col, reverse=False):\n    '''\n    Write a python function to sort the given list by the given column.\n    '''\n    return sorted(lst, key=lambda row: row[col], reverse=reverse)\n    \n    \ndef getRow(lst, row):\n    '''\n    Write a python function to return the items of the given row from the given list.\n    '''\n    return lst[row]\n    \n    \ndef swap(lst, i, j):\n    '''\n    Write a python function to swap the items of the given indices.\n    '''\n    return lst[:i] + [lst[j]] + lst[i+1:j] + [lst[i]] + lst[j+1:]\n    \n    \ndef copy(lst):\n    '''\n    Write a python function to copy the list.\n    '''\n    return list(lst)\n    \n    \ndef subsetSum(lst, target, partial=[], partialSum=0):\n    '''\n    Write a python function to find the combination of the given list items with the given target sum.\n    '''\n    if len(lst) == 0 and partialSum == target:\n        return partial\n    else:\n        for i, x in enumerate(lst):\n            remaining = lst[i+1:]\n            return subsetSum(remaining, target, partial + [x], partialSum+x)\n            \n            \ndef printTable(lst):\n    '''\n    Write a python function to print the given table in the following format.\n    '''\n    for i in range(len(lst[0])):\n        for j in range(len(lst)):\n            print lst[j][i],\n        print \"\"\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    count=0\n    for i in lst:\n        if i==True:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(x == True for x in lst)\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(bool(x) for x in lst)\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    return sum([i==True for i in lst])\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(map(bool, lst))\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([x for x in lst if x == True])\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_tup:\n        test_list.append(item)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Write your function here\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if isinstance(test_list, list):\n        if isinstance(test_tup, tuple):\n            return test_list.append(test_tup)\n        else:\n            raise TypeError('Test tuples must be of type tuple')\n    else:\n        raise TypeError('Test list must be of type list')\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if type(test_list) == type(test_tup):\n        return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for elem in test_tup:\n        test_list.append(elem)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print \"The test list is:\", test_list\n    print \"The test tuples is:\", test_tup\n    print \"Appending the given list to the given tuples.\"\n    res = []\n    for x in test_tup:\n        res.append(x + test_list)\n    return res\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return [tup + test_list for tup in test_tup]\n    \n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1=len(num1)\n    l2=len(num2)\n    l3=len(num3)\n    i,j,k=0,0,0\n    res=[]\n    while i<l1 and j<l2 and k<l3:\n        if num1[i]<num2[j] and num1[i]<num3[k]:\n            res.append(num1[i])\n            i+=1\n        elif num2[j]<num1[i] and num2[j]<num3[k]:\n            res.append(num2[j])\n            j+=1\n        elif num3[k]<num1[i] and num3[k]<num2[j]:\n            res.append(num3[k])\n            k+=1\n    while i<l1:\n        res.append(num1[i])\n        i+=1\n    while j<l2:\n        res.append(num2[j])\n        j+=1\n    while k<l3:\n        res.append(num3[k])\n        k+=1\n    return res\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted(num1+num2+num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1==None:\n        return num2\n    elif num2==None:\n        return num1\n    elif num3==None:\n        return num1\n    l1=len(num1)\n    l2=len(num2)\n    l3=len(num3)\n    sorted_list=[]\n    i=0\n    j=0\n    k=0\n    while (i<l1) and (j<l2) and (k<l3):\n        if num1[i]<=num2[j]:\n            if num1[i]<=num3[k]:\n                sorted_list.append(num1[i])\n                i+=1\n            else:\n                sorted_list.append(num3[k])\n                k+=1\n        elif num1[i]>num2[j]:\n            if num2[j]<=num3[k]:\n                sorted_list.append(num2[j])\n                j+=1\n            else:\n                sorted_list.append(num3[k])\n                k+=1\n    if i==l1:\n        sorted_list=sorted_list+num2[j:]\n    if j==l2:\n        sorted_list=sorted_list+num3[k:]\n    return sorted_list\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1.extend(num2)\n    num1.extend(num3)\n    return sorted(num1)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if (num1==None and num2==None and num3==None):\n        return None\n    \n    arr = []\n    if num1==None:\n        arr = arr + num2\n        arr = arr + num3\n    elif num2==None:\n        arr = arr + num1\n        arr = arr + num3\n    elif num3==None:\n        arr = arr + num1\n        arr = arr + num2\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    res = []\n    for i in num1:\n        heapq.heappush(res,i)\n    for i in num2:\n        heapq.heappush(res,i)\n    for i in num3:\n        heapq.heappush(res,i)\n    print(res)\ndef get_input():\n    '''\n    input:\n    nums1 = [1,2,3,0,0,0], m = 3\n    nums2 = [2,5,6],       n = 3\n    nums3 = [1,3,5,7],     k = 3\n    \n    output:\n    [1,2,2,3,3,3,5,6,7]\n    '''\n    nums1,m = [int(i) for i in input().strip().split(' ')]\n    nums2,n = [int(i) for i in input().strip().split(' ')]\n    nums3,k = [int(i) for i in input().strip().split(' ')]\n    return nums1,nums2,nums3,m,n,k\ndef merge_sorted_list_optimized(nums1,nums2,nums3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    res = []\n    while len(nums1) > 0 or len(nums2) > 0 or len(nums3) > 0:\n        if len(nums1) > 0 and len(nums2) > 0:\n            if nums1[0] < nums2[0]:\n                res.append(nums1[0])\n                nums1.pop(0)\n            else:\n                res.append(nums2[0])\n                nums2.pop(0)\n        elif len(nums2) > 0:\n            res.append(nums2[0])\n            nums2.pop(0)\n        elif len(nums1) > 0:\n            res.append(nums1[0])\n            nums1.pop(0)\n        if len(nums1) > 0 and len(nums3) > 0:\n            if nums1[0] < nums3[0]:\n                res.append(nums1[0])\n                nums1.pop(0)\n            else:\n                res.append(nums3[0])\n                nums3.pop(0)\n        elif len(nums3) > 0:\n            res.append(nums3[0])\n            nums3.pop(0)\n        if len(nums2) > 0 and len(nums3) > 0:\n            if nums2[0] < nums3[0]:\n                res.append(nums2[0])\n                nums2.pop(0)\n            else:\n                res.append(nums3[0])\n                nums3.pop(0)\n        elif len(nums3) > 0:\n            res.append(nums3[0])\n            nums3.pop(0)\n    print(res)\ndef merge_sorted_list_optimized_2(nums1,nums2,nums3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    res = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(nums1) or j < len(nums2) or k < len(nums3):\n        if i >= len(nums1):\n            res.append(nums2[j])\n            j += 1\n        elif j >= len(nums2):\n            res.append(nums1[i])\n            i += 1\n        elif k >= len(nums3):\n            res.append(nums2[j])\n            j += 1\n        else:\n            if nums1[i] < nums2[j]:\n                res.append(nums1[i])\n                i += 1\n            else:\n                res.append(nums2[j])\n                j += 1\n            if nums2[j] < nums3[k]:\n                res.append(nums2[j])\n                j += 1\n            else:\n                res.append(nums3[k])\n                k += 1\n    print(res)\ndef get_input_2():\n    '''\n    input:\n    1,2,3,0,0,0\n    2,5,6\n    1,3,5,7\n    \n    output:\n    [1,2,2,3,3,3,5,6,7]\n    '''\n    nums1,nums2,nums3 = [int(i) for i in input().strip().split(' ')]\n    return nums1,nums2,nums3\ndef get_input_3():\n    '''\n    input:\n    1,2,3,0,0,0\n    2,5,6\n    1,3,5,7\n    \n    output:\n    [1,2,2,3,3,3,5,6,7]\n    '''\n    nums1,nums2,nums3 = [int(i) for i in input().strip().split(' ')]\n    return nums1,nums2,nums3\ndef merge_sorted_list_optimized_3(nums1,nums2,nums3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    res = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(nums1) or j < len(nums2) or k < len(nums3):\n        if i >= len(nums1):\n            res.append(nums2[j])\n            j += 1\n        elif j >= len(nums2):\n            res.append(nums1[i])\n            i += 1\n        elif k >= len(nums3):\n            res.append(nums2[j])\n            j += 1\n        else:\n            if nums1[i] < nums2[j]:\n                res.append(nums1[i])\n                i += 1\n            else:\n                res.append(nums2[j])\n                j += 1\n            if nums2[j] < nums3[k]:\n                res.append(nums2[j])\n                j += 1\n            else:\n                res.append(nums3[k])\n                k += 1\n    print(res)\ndef get_input_4():\n    '''\n    input:\n    1,2,3,0,0,0\n    2,5,6\n    1,3,5,7\n    \n    output:\n    [1,2,2,3,3,3,5,6,7]\n    '''\n    nums1,nums2,nums3 = [int(i) for i in input().strip().split(' ')]\n    return nums1,nums2,nums3\ndef get_input_5():\n    '''\n    input:\n    1,2,3,0,0,0\n    2,5,6\n    1,3,5,7\n    \n    output:\n    [1,2,2,3,3,3,5,6,7]\n    '''\n    nums1,nums2,nums3 = [int(i) for i in input().strip().split(' ')]\n    return nums1,nums2,nums3\ndef merge_sorted_list_optimized_4(nums1,nums2,nums3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    res = []\n    heapq.heappush(res,nums1[0])\n    heapq.heappush(res,nums2[0])\n    heapq.heappush(res,nums3[0])\n    i = 1\n    j = 1\n    k = 1\n    while i < len(nums1) or j < len(nums2) or k < len(nums3):\n        if i >= len(nums1):\n        "
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1=sorted(num1)\n    l2=sorted(num2)\n    l3=sorted(num3)\n    list_=[]\n    while len(l1)>0 and len(l2)>0 and len(l3)>0:\n        if l1[0]<l2[0]:\n            list_.append(l1[0])\n            l1.pop(0)\n        elif l1[0]>l2[0]:\n            list_.append(l2[0])\n            l2.pop(0)\n        else:\n            list_.append(l1[0])\n            l1.pop(0)\n            list_.append(l2[0])\n            l2.pop(0)\n    for i in l1:\n        list_.append(i)\n    for i in l2:\n        list_.append(i)\n    for i in l3:\n        list_.append(i)\n    return list_\ndef find_k_closest_number(nums,target,k):\n    '''\n    Write a function to find the k-th smallest number in a unsorted list\n    nums.\n    '''\n    i=0\n    j=0\n    while i<len(nums):\n        if nums[i]>target:\n            nums.insert(j,nums.pop(i))\n            j+=1\n        i+=1\n    if j<k:\n        for i in range(j,k):\n            nums.pop()\n    else:\n        for i in range(j,len(nums)):\n            nums.pop()\n    return nums\ndef find_target_in_unsorted_list(nums,target):\n    '''\n    Write a function to find target in a unsorted list of numbers\n    '''\n    i=0\n    j=len(nums)-1\n    while i<j:\n        m=(i+j)/2\n        if nums[m]==target:\n            return True\n        elif nums[m]<target:\n            i=m+1\n        else:\n            j=m-1\n    return False\ndef quick_sort(nums):\n    '''\n    Write a function to sort an unsorted array.\n    '''\n    if len(nums)<2:\n        return nums\n    else:\n        pivot=nums[0]\n        left=[]\n        right=[]\n        for i in range(1,len(nums)):\n            if nums[i]<pivot:\n                left.append(nums[i])\n            else:\n                right.append(nums[i])\n        left=quick_sort(left)\n        right=quick_sort(right)\n        return left+[pivot]+right\ndef find_triplets_with_sum_equal_to_n(nums):\n    '''\n    Write a function to find all triplets in a 2-sorted array that sum up to a given number.\n    '''\n    s=set()\n    for i in range(len(nums)):\n        l=nums[i]\n        for j in range(i+1,len(nums)):\n            r=l+nums[j]\n            if r==n:\n                t=sorted([l,nums[i],nums[j]])\n                s.add(tuple(t))\n    return [list(i) for i in s]\ndef find_k_nums_with_sum_closest_to_target(nums,target,k):\n    '''\n    Write a function to find the k numbers in a list that sum closest to a target\n    '''\n    s=set()\n    heap=[]\n    for i in range(len(nums)):\n        l=nums[i]\n        heapq.heappush(heap,(-abs(l-target),l))\n    for i in range(k):\n        if heap[0][1]==target:\n            return True\n        else:\n            t=heapq.heappop(heap)\n            s.add(t[1])\n    return s\ndef find_max_subarray(nums):\n    '''\n    Write a function to find the contiguous subarray within an array (containing at least one number) which has the largest sum.\n    '''\n    l,t=0,0\n    for i in range(len(nums)):\n        if t+nums[i]>l:\n            l=t+nums[i]\n            t=nums[i]\n        else:\n            t=t+nums[i]\n    return l\ndef find_max_subarray_contiguous_numbers(nums):\n    '''\n    Write a function to find the contiguous subarray within an array (containing at least one number) which has the largest sum.\n    '''\n    l=nums[0]\n    t=nums[0]\n    for i in range(1,len(nums)):\n        if t+nums[i]>l:\n            l=t+nums[i]\n            t=nums[i]\n        else:\n            t=t+nums[i]\n    return l\ndef find_subarray_with_given_sum(nums,k):\n    '''\n    Write a function to find a subarray with a given sum.\n    '''\n    s=set()\n    l,t=0,0\n    for i in range(len(nums)):\n        t+=nums[i]\n        while t>k:\n            t-=nums[l]\n            l+=1\n        if t==k:\n            s.add(tuple(sorted([nums[l],nums[i]])))\n    return [list(i) for i in s]\ndef are_rotations(str1,str2):\n    '''\n    Write a function to determine if two strings are rotations of each other.\n    '''\n    if len(str1)!=len(str2):\n        return False\n    elif str1==str2:\n        return True\n    else:\n        i=0\n        j=len(str1)-1\n        while j<len(str2)-1:\n            if str1[i]!=str2[j]:\n                return False\n            else:\n                i+=1\n                j+=1\n        return True\ndef word_search(board,words):\n    '''\n    Write a function to find if a word can be made from a scrambled string\n    '''\n    def is_valid_word(word):\n        if word in d:\n            return True\n        else:\n            return False\n    def is_valid_char(char,row,col):\n        if char in row or char in col:\n            return True\n        else:\n            return False\n    def dfs(row,col,word,visited,curr_row,curr_col):\n        if visited[row][col]:\n            return\n        else:\n            if is_valid_word(word):\n                visited[row][col]=True\n            if len(word)==1:\n                return\n            else:\n                for i in range(4):\n                    row_=row+row_d[i]\n                    col_=col+col_d[i]\n                    if is_valid_char(word[0],row_,col_):\n                        dfs(row_,col_,word[1:],visited,row_,col_)\n    if len(words)==0:\n        return True\n    else:\n        word_len=len(words[0])\n        row_d=[-1,0,1,0]\n        col_d=[0,-1,0,1]\n        visited=[[False for i in range(len(board[0]))] for j in range(len(board))]\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                dfs(i,j,words[0],visited,i,j)\n        return False\ndef two_sum(nums,target):\n    '''\n    Write a function to find the indices of the two numbers such that they add up to a target number.\n    '''\n    s=set()\n    for i in range(len(nums)):\n        for j in rang"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # num1 = [1,3,5,7,9,12,13]\n    # num2 = [2,4,6,8,10]\n    # num3 = [0,15,17]\n    # num1 = [1,3,5,7,9,12,13]\n    # num2 = [2,4,6,8,10]\n    # num3 = [0,15,17]\n    # num1 = [1,3,5,7,9,12,13]\n    # num2 = [2,4,6,8,10]\n    # num3 = [0,15,17]\n    num1.extend(num2)\n    num1.extend(num3)\n    num1.sort()\n    return num1\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # this function builds a list from three sorted lists and \n    # returns the list sorted in ascending order\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted(num1 + num2 + num3)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    ans = 0\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        if n%2 == 0:\n            ans = even_Equivalent(s,n-1)\n        else:\n            ans = odd_Equivalent(s,n-1) + even_Equivalent(s,n-1)\n        return ans\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = s.replace('0','0')\n    s = s.replace('1','0')\n    s = s.replace('0','1')\n    s = s.replace('1','1')\n    return len(s)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def rotate_one(s,n):\n        if n==0:\n            return s\n        else:\n            return rotate_one(s[1:]+s[0],n-1)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n<0:\n        return odd_Equivalent(s[::-1],n[::-1])\n    else:\n        return sum(s[0]=='0'*(n%2) + '1'*(n%2))\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #initialize the length of string\n    length = len(s)\n    #if the string is less than the number of rotation, the first element will always be 0\n    if length<n:\n        return 0\n    #using a list to store the result\n    result = [0]\n    #use while loop to rotate the string\n    while n>0:\n        #set count as 0\n        count = 0\n        #use for loop to rotate the string\n        for i in range(length):\n            #count the number of 1 in the string\n            if s[i]=='1':\n                count+=1\n        #count the number of 1 in the reversed string\n        for i in range(length-1,-1,-1):\n            if s[i]=='1':\n                count+=1\n        #if the count is odd, it means the string will be rotated\n        if count%2==1:\n            result.append(1)\n        #else, it means the string will not be rotated\n        else:\n            result.append(0)\n        #move to the next rotation\n        n-=1\n    #return the result\n    return result\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if len(s) == 0 or len(s) == 1:\n        return 1\n    if len(s) == 2:\n        return (1 if int(s[0]) & int(s[1]) == 1 else 0)\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    return (odd_Equivalent(s[1:],n-1) + odd_Equivalent(s[-1:]+s[:-1],n-1))\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    if s == '0':\n        return 0\n    else:\n        if n == 0:\n            return 1\n        else:\n            return (2*odd_Equivalent(s[1:],n-1) + (1 if s[0] == '1' else 0))\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return s.count(n)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if s == '' or n == 0:\n        return 0\n    elif s[0] == '0':\n        return odd_Equivalent(s[1:], n)\n    else:\n        return odd_Equivalent(s[1:], n) + odd_Equivalent(s[0] + s[1:], n)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # s = bin(s)[2:]\n    result = []\n    s = list(s)\n    for i in range(n):\n        s.insert(0, s.pop())\n        if int(\"\".join(s),2)%2 == 1:\n            result.append(int(\"\".join(s),2))\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    # To avoid unnecessary repetition of code, we create a set out of the nested lists\n    # as we check if an element of the set is present in the nested lists\n    common_elements = set()\n    for element in nestedlist:\n        common_elements = common_elements | set(element)\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_items = {}\n    for i in nestedlist:\n        for j in nestedlist:\n            if i == j:\n                continue\n            else:\n                for k in i:\n                    if k in j:\n                        if common_items.get(k) == None:\n                            common_items[k] = 1\n                        else:\n                            common_items[k] += 1\n    #print(common_items)\n    max_value = max(common_items.values())\n    for i in common_items:\n        if common_items[i] == max_value:\n            return i\n    return None\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set()\n    for list in nestedlist:\n        common.update(list)\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    nestedlist = [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common:\n                common.append(nestedlist[i][j])\n    print common\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    commons = []\n    for list in nestedlist:\n        if commontolist(commons, list):\n            continue\n        else:\n            commons.append(list)\n    return commons\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    all_items = set()\n    for items in nestedlist:\n        all_items.update(items)\n    return all_items\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    list1 = nestedlist[0]\n    for i in range(1, len(nestedlist)):\n        list2 = nestedlist[i]\n        set1 = set(list1)\n        set2 = set(list2)\n        common = set1 & set2\n        list1 = list(common)\n    return list1\n    \n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for i in range(len(nestedlist)):\n        if i == 0:\n            result = nestedlist[i]\n        else:\n            result = result & nestedlist[i]\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for item in nestedlist:\n        if isinstance(item, list):\n            common.extend(common_in_nested_lists(item))\n        else:\n            common.append(item)\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if nestedlist:\n        common = []\n        for i in nestedlist[0]:\n            if all(i in l for l in nestedlist):\n                common.append(i)\n        return common\n    else:\n        return common\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # Complete this function\n    pass\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return bool(re.match(r'^[\\+\\-]?\\d+$', text))\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    text = text.strip()\n    if text.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return text.isdigit()\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True\n    \ndef equal_lists(list1,list2):\n    '''\n    Write a function to check whether two lists are equal or not.\n    '''\n    for item in list1:\n        if item in list2:\n            list2.remove(item)\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    dict1=dict()\n    for i in list1:\n        if len(i)==0:\n            return False\n        else:\n            dict1.update(i)\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    for dict1 in list1:\n        if not all_keys_empty(dict1):\n            return False\n    return True\n    \n    \ndef all_keys_empty(dict1):\n    '''\n    Write a function to check whether all the keys in a dictionary are empty or not.\n    '''\n    if len(dict1) == 0:\n        return True\n    for key1 in dict1.keys():\n        if dict1[key1]!= '':\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    list2 = map(lambda x: x.keys(), list1)\n    list3 = map(lambda x: x == set(), list2)\n    if False in list3:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # all_empty = True\n    # for item in list1:\n    #     if len(item) > 0:\n    #         all_empty = False\n    #         return all_empty\n    # return all_empty\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    list2=[]\n    for i in list1:\n        if i:\n            list2.append(i)\n    return True if list2==[] else False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return reduce(lambda x, y: x*y, nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    res = 0\n    for num in nums:\n        res = res * 10 + num\n    return res\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    def tuple_to_int_recursive(nums):\n        if not nums:\n            return 0\n        return nums[0] + 10*tuple_to_int_recursive(nums[1:])\n    return tuple_to_int_recursive(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    import functools\n    return functools.reduce(lambda x,y: x*10+y, nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = nums[::-1]\n    s = 0\n    for i in range(len(nums)):\n        s += nums[i] * 10 ** i\n    return s\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums_str = str(nums)\n    nums_str = nums_str.replace(\",\", \"\")\n    nums_int = int(nums_str)\n    return nums_int\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    ret = 0\n    for num in nums:\n        ret *= 10\n        ret += num\n    return ret\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # return int(''.join([str(n) for n in nums]))\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    number = 0\n    for index, num in enumerate(nums):\n        number += num * (10 ** index)\n    return number\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for element in test_list:\n        for index in range(len(element)):\n            element[index] = float(element[index])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for index in range(len(sublist)):\n            try:\n                sublist[index] = float(sublist[index])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in test_list:\n        for j in i:\n            try:\n                j = float(j)\n            except ValueError:\n                print('Cannot convert:',j,'to float')\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for index, elem in enumerate(test_list):\n        for index2, elem2 in enumerate(elem):\n            try:\n                test_list[index][index2] = float(elem2)\n            except ValueError:\n                pass\n    return test_list\n    \n    \ndef fill_array_by_attr_value(test_list, attr, value):\n    '''\n    Write a function to fill an array with an attribute's value for all elements in a list of lists.\n    '''\n    for index, elem in enumerate(test_list):\n        try:\n            test_list[index][attr] = value\n        except IndexError:\n            pass\n    return test_list\n    \n    \ndef float_to_str(test_list):\n    '''\n    Write a function to convert all floats in an array to strings.\n    '''\n    for index, elem in enumerate(test_list):\n        try:\n            test_list[index] = str(test_list[index])\n        except ValueError:\n            pass\n    return test_list\n    \n    \ndef get_elem_from_list_of_lists(test_list, index, element_index):\n    '''\n    Write a function to retrieve an element from a list of lists, and return it as a string.\n    '''\n    return test_list[index][element_index]\n    \n    \ndef get_first_n_elements(test_list, n):\n    '''\n    Write a function to return the first n elements from a list of lists.\n    '''\n    return test_list[:n]\n    \n    \ndef get_second_n_elements(test_list, n):\n    '''\n    Write a function to return the last n elements from a list of lists.\n    '''\n    return test_list[-n:]\n    \n    \ndef get_last_n_elements(test_list, n):\n    '''\n    Write a function to return the last n elements from a list of lists.\n    '''\n    return test_list[-n:]\n    \n    \ndef get_next_n_elements(test_list, n):\n    '''\n    Write a function to return the next n elements from a list of lists.\n    '''\n    return test_list[n:]\n    \n    \ndef get_last_n_elements_from_beginning(test_list, n):\n    '''\n    Write a function to return the last n elements from a list of lists.\n    '''\n    return test_list[:n]\n    \n    \ndef get_first_n_elements_from_beginning(test_list, n):\n    '''\n    Write a function to return the first n elements from a list of lists.\n    '''\n    return test_list[:n]\n    \n    \ndef get_next_n_elements_from_beginning(test_list, n):\n    '''\n    Write a function to return the next n elements from a list of lists.\n    '''\n    return test_list[n:]\n    \n    \ndef get_last_n_elements_from_end(test_list, n):\n    '''\n    Write a function to return the last n elements from a list of lists.\n    '''\n    return test_list[-n:]\n    \n    \ndef get_first_n_elements_from_end(test_list, n):\n    '''\n    Write a function to return the first n elements from a list of lists.\n    '''\n    return test_list[-n:]\n    \n    \ndef get_next_n_elements_from_end(test_list, n):\n    '''\n    Write a function to return the next n elements from a list of lists.\n    '''\n    return test_list[:-n]\n    \n    \ndef list_to_float_str(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to strings.\n    '''\n    for index, elem in enumerate(test_list):\n        for index2, elem2 in enumerate(elem):\n            try:\n                test_list[index][index2] = float(elem2)\n            except ValueError:\n                pass\n    return test_list\n    \n    \ndef list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for index, elem in enumerate(test_list):\n        for index2, elem2 in enumerate(elem):\n            try:\n                test_list[index][index2] = float(elem2)\n            except ValueError:\n                pass\n    return test_list\n    \n    \ndef fill_array_by_attr_value(test_list, attr, value):\n    '''\n    Write a function to fill an array with an attribute's value for all elements in a list of lists.\n    '''\n    for index, elem in enumerate(test_list):\n        try:\n            test_list[index][attr] = value\n        except IndexError:\n            pass\n    return test_list\n    \n    \ndef float_to_str(test_list):\n    '''\n    Write a function to convert all floats in an array to strings.\n    '''\n    for index, elem in enumerate(test_list):\n        try:\n            test_list[index] = str(test_list[index])\n        except ValueError:\n            pass\n    return test_list\n    \n    \ndef get_elem_from_list_of_lists(test_list, index, element_index):\n    '''\n    Write a function to retrieve an element from a list of lists, and return it as a string.\n    '''\n    return test_list[index][element_index]\n    \n    \ndef get_first_n_elements(test_list, n):\n    '''\n    Write a function to return the first n elements from a list of lists.\n    '''\n    return test_list[:n]\n    \n    \ndef get_second_n_elements(test_list, n):\n    '''\n    Write a function to return the last n elements from a list of lists.\n    '''\n    return test_list[-n:]\n    \n    \ndef get_last_n_elements(test_list, n):\n    '''\n    Write a function to return the last n elements from a list of lists.\n    '''\n    return test_list[-n:]\n    \n    \ndef get_next_n_elements(test_list, n):\n    '''\n    Write a function to return the next n elements from a list of lists.\n    '''\n    return test_list[n:]\n    \n    \ndef get_last_n_elements_from_beginning(test_list, n):\n    '''\n    Write a function to return the last n elements from a list of lists.\n    '''\n    return test_list[:n]\n    \n    \ndef get_first_n_elements_from_beginning(test_list, n):\n    '''\n    Write a function to return the first n elements from a list of lists.\n    '''\n    return test_list[:n]\n    \n    \ndef get_next_n_elements_from_beginning(test_list, n):\n    '''\n    Write a function to return the next n elements from a list of lists.\n    '''\n    return test_list[n:]\n    \n    \ndef get_last_n_elements_from_end(test_list, n):\n    '''\n    Write a function to return the last n elements from a list of lists.\n    '''\n    return test_list[-n:]\n    \n    \ndef get_first_n_elements_from_end(test_list, n):\n    '''\n    Write a function to return the first n elements from a list of lists.\n    '''\n    return test_list[-n:]\n    \n    \ndef get_next_n_elements_from_end(test_list, n):\n    '''\n    Write a function to return the next n elements from a list of lists.\n    '''\n    return test_list[:-n]\n    \n    \ndef list_to_float_str(test_list):\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for idx, entry in enumerate(row):\n            try:\n                row[idx] = float(entry)\n            except:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    list_to_float = [float(i) for i in test_list]\n    return list_to_float\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = float(test_list[i])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [[float(x) for x in list] for list in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return map(float, test_list)\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.split()\n    return string\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    new_list = string.split(' ')\n    return new_list\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # assert all(map(lambda x: isinstance(x, str), string.split(' ')))\n    #return map(lambda x: x.strip(), string.split(' '))\n    return [x.strip() for x in string.split(' ')]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) <= 1:\n        return arr[0]\n    mid = len(arr) // 2\n    if arr[mid] == arr[mid-1]:\n        return search(arr[:mid])\n    else:\n        return search(arr[mid:])\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    def search(arr, n):\n        if len(arr) == 1:\n            return arr[0]\n        else:\n            mid = len(arr) // 2\n            if arr[mid] == arr[mid-1] and mid!= 0:\n                return search(arr[:mid], mid)\n            elif arr[mid] == arr[mid+1] and mid!= len(arr)-1:\n                return search(arr[mid+1:], len(arr)-mid-1)\n            else:\n                return arr[mid]\n    print search(arr, len(arr))\n    \ndef search_duplicate(arr, n):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    def search(arr, n):\n        if len(arr) == 1:\n            return arr[0]\n        else:\n            mid = len(arr) // 2\n            if arr[mid] == arr[mid-1] and mid!= 0:\n                return search(arr[:mid], mid)\n            elif arr[mid] == arr[mid+1] and mid!= len(arr)-1:\n                return search(arr[mid+1:], len(arr)-mid-1)\n            else:\n                return arr[mid]\n    print search(arr, len(arr))\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    start = 0\n    end = len(arr) - 1\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # an empty array means the only element in the array is the element itself\n    if len(arr) == 0:\n        return arr[0]\n    # if array is of length 1, return the only element\n    if len(arr) == 1:\n        return arr[0]\n    # array has more than one element\n    # if array is sorted, the element that appears only once is the middle element\n    # if array is not sorted, there are 2 cases:\n    # first case: the element that appears only once is the first element of the array\n    # second case: the element that appears only once is the last element of the array\n    if arr == sorted(arr):\n        mid = len(arr) / 2\n        if (arr[mid] == arr[mid - 1]) or (arr[mid] == arr[mid + 1]):\n            return arr[mid]\n        else:\n            return arr[0]\n    else:\n        first = 0\n        last = len(arr) - 1\n        mid = (first + last) / 2\n        # binary search\n        while last - first!= 1:\n            # first element\n            if arr[first] == arr[mid]:\n                first = first + 1\n            elif arr[mid] == arr[last]:\n                last = last - 1\n            else:\n                # this means that arr[mid] is not the first or last element of the array\n                if arr[mid] > arr[first] and arr[mid] < arr[last]:\n                    return arr[mid]\n                elif arr[mid] < arr[first]:\n                    last = mid - 1\n                else:\n                    first = mid + 1\n        # last element\n        if arr[first] == arr[last]:\n            return arr[last]\n        else:\n            return arr[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(0,len(arr)):\n        j=i+1\n        while j<len(arr):\n            if arr[i]==arr[j]:\n                return arr[i]\n            j=j+1\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    print \"Searching for the element that appears only once in a sorted array.\"\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    #initiate 2 pointers\n    left = 0\n    right = len(arr) - 1\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[abs(arr[i])]<0:\n            return abs(arr[i])\n    return None\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    elif len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return arr[0] if arr[0]!= arr[1] else arr[1]\n    else:\n        middle = len(arr) // 2\n        if arr[middle] == arr[middle-1]:\n            return search(arr[:middle])\n        elif arr[middle] == arr[middle+1]:\n            return search(arr[middle+1:])\n        else:\n            return arr[middle]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    count = {}\n    \n    for i in arr:\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n        \n    for i,j in count.items():\n        if j == 1:\n            return i\n        \nif __name__ == '__main__':\n    arr = [1, 2, 3, 3, 4, 4, 4, 5, 5]\n    print(search(arr)"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    temp_list = [i[0] * i[1] for i in list1]\n    max_value = max(temp_list)\n    max_index = temp_list.index(max_value)\n    max_index_value = list1[max_index]\n    return max_index_value\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -999999999\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            product = list1[i][0]*list1[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    product = 0\n    if len(list1) <= 1:\n        return 0\n    for i in range(len(list1)):\n        for j in range(i,len(list1)):\n            product = max(product, abs(list1[i][0] * list1[j][1]))\n    return product\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # iterate over the list, check if the next index is the same as the last\n    # if it is, we take the max and min of the current max and min and multiply them together.\n    # we use a tuple to track the max and min as we are getting a tuple out of each iteration of the loop\n    # it is an example of a list that can be used to track max/min/tuples\n    max_min_tuples = []\n    max_min_tuples.append(list1[0])\n    max_min_tuples.append((list1[0][0], list1[0][1]))\n    for i in range(1, len(list1)):\n        if list1[i][0] == list1[i-1][1]:\n            max_min_tuples.append((list1[i][0], list1[i][1]))\n        else:\n            max_min_tuples.append((list1[i][0], list1[i][1]))\n            max_min_tuples.append((list1[i-1][0], list1[i-1][1]))\n        # max_min_tuples.append((list1[i-1][0], list1[i-1][1]))\n    # print max_min_tuples\n    product_tuples = []\n    for i in range(0, len(max_min_tuples), 2):\n        product_tuples.append(max_min_tuples[i][0] * max_min_tuples[i][1] * max_min_tuples[i+1][0] * max_min_tuples[i+1][1])\n    # print product_tuples\n    return max(product_tuples)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    m = 0\n    for i in range(0, len(list1)-1):\n        for j in range(i+1, len(list1)):\n            m = max(m, abs(list1[i][0] * list1[j][1]))\n    return m\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # max_product = -1\n    # for i in range(0,len(list1)-1,2):\n    #     max_product = max(max_product,abs(list1[i][0]*list1[i+1][1]-list1[i+1][0]*list1[i][1]))\n    # return max_product\n    # iterate through list once\n    # iterate through list 2nd time\n    # multiply first 2 elements by the second 2 elements\n    # subtract the second 2 elements by the first 2 elements\n    # return max(max_product,abs(list1[0][0]*list1[1][1]-list1[1][0]*list1[0][1]))\n    # using a dict\n    max_product = -1\n    max_product_dict = dict()\n    for i in range(0,len(list1)-1,2):\n        max_product_dict[i] = abs(list1[i][0]*list1[i+1][1]-list1[i+1][0]*list1[i][1])\n    return max(max_product_dict.values())\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1 = sorted(list1, key=lambda x:x[0]*x[1], reverse=True)\n    \n    print(list1)\n    max_tuple = list1[0]\n    min_tuple = list1[0]\n    \n    for i in list1[1:]:\n        if i[0]*i[1] > max_tuple[0]*max_tuple[1]:\n            max_tuple = i\n        elif i[0]*i[1] < min_tuple[0]*min_tuple[1]:\n            min_tuple = i\n    print(max_tuple, min_tuple)\n    return max_tuple[0]*max_tuple[1]*min_tuple[0]*min_tuple[1]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # max_prod = 0\n    # for i in range(0, len(list1), 2):\n    #     prod = 1\n    #     for j in range(2):\n    #         prod *= list1[i+j]\n    #     if prod > max_prod:\n    #         max_prod = prod\n    # return max_prod\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = 0\n    list1.sort(key = lambda x: x[0])\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            if list1[i][0]*list1[j][0] > max_prod:\n                max_prod = list1[i][0]*list1[j][0]\n    print max_prod\n    \nmax_product_tuple([(-2, -3), (-4, -5), (-1, -3), (-4, -5), (-6, -1), (3, 3), (3, 3), (0, -2)])"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # returns a list of tuples in a given list of tuples\n    list_tuples = list(map(lambda x: (x[0] * x[1], x[0], x[1]), list1))\n    list_tuples.sort(reverse=True)\n    return list_tuples[0][1], list_tuples[0][2]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    s = 0\n    for i in range(1, limit):\n        n = i\n        # check if i is divisible by sum of it's divisors\n        # n % sum of divisors == 0\n        if n % sum([j for j in range(1, i) if i % j == 0]) == 0:\n            # print(i, sum([j for j in range(1, i) if i % j == 0]))\n            # increment s and check if n is divisible by sum of n's divisors\n            if n % sum([i for i in range(1, sum([j for j in range(1, i) if i % j == 0])) if n % i == 0]) == 0:\n                # print(i, n, sum([i for i in range(1, sum([j for j in range(1, i) if i % j == 0])) if n % i == 0]))\n                s += i\n    return s\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum([i for i in range(1, limit) if sum(prime_factors(i)) == i])\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    s = set()\n    for i in range(1, limit):\n        s.add(i)\n        sum_i = sum(divisors(i))\n        if sum_i!= i and sum_i in s:\n            return sum_i + i\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    numbers = set()\n    for i in range(1, limit):\n        if i in numbers:\n            continue\n        sum = 1\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                sum += j\n                if j!= i / j:\n                    sum += i / j\n        if sum > i:\n            numbers.add(i)\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_nums = [0] * limit\n    amicable_nums[0] = 1\n    amicable_nums[1] = 1\n    sum = 2\n    for i in range(2, limit):\n        amicable_nums[i] = sum\n        sum += i\n    \n    total = 0\n    for i in range(limit):\n        # we check if the number is divisible by any amicable number\n        if i % 2 == 0:\n            continue\n        # we check if the number is equal to the sum of its proper divisors\n        # we add 2, since we are looking for divisors\n        divisors = 2\n        divisor = i - 1\n        while divisor > 1:\n            if i % divisor == 0:\n                divisors += divisor\n                divisor = int(i / divisor)\n            else:\n                divisor -= 1\n        \n        if i == sum(divisors):\n            # if the number is divisible by both sum and the number itself\n            # we check if the sum is the same as the number\n            if divisors == i and i!= sum(divisors):\n                # if the number is not sum of divisors\n                # and not the number itself\n                # we add it to the total\n                total += i\n        \n    return total\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit):\n        # get the sum of factors\n        num_factors = sum([num % i == 0 for i in range(1, int(num**0.5)+1)])\n        # check if num is amicable\n        if num_factors == num and num!= num_factors:\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_amicable(num):\n        if num == 1:\n            return False\n        elif num == 2:\n            return True\n        if num % 2 == 0:\n            n = num // 2\n        else:\n            n = (num + 1) // 2\n        d = sum(int(x) for x in str(n))\n        return d == num\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_nums = set()\n    for i in range(1, limit):\n        sum_divisors = 0\n        for j in range(1, i):\n            if i % j == 0:\n                sum_divisors += j\n        if sum_divisors > i:\n            sum_divisors = 0\n            for j in range(1, (i + 1) // 2):\n                if j == (i + 1) // 2:\n                    sum_divisors += j\n                if i % j == 0:\n                    sum_divisors += j\n        if sum_divisors == i:\n            amicable_nums.add(i)\n    return sum(amicable_nums)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum([\n        i for i in range(1, limit)\n        if is_amicable(i)\n    ])\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for number in xrange(1, limit):\n        first = sum_of_factors(number)\n        second = sum_of_factors(first)\n        if (second == number) and (second!= first):\n            amicable_numbers.append(number)\n    print sum(amicable_numbers)\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)\ndef run():\n    print(angle_complex(2,2))\n    print(angle_complex(2,3))\n    print(angle_complex(3,2))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\ndef angle_num(a,b):\n    '''\n    Write a function to get the angle of a number.\n    '''\n    return a/b\ndef square_root(num):\n    '''\n    Write a function to get the square root of a number.\n    '''\n    return num**0.5\ndef complex_sqrt(complexnum):\n    '''\n    Write a function to get the square root of a complex number.\n    '''\n    return complexnum**0.5\ndef to_the(num,power):\n    '''\n    Write a function to get the to the power of a number.\n    '''\n    return num**power\ndef print_all(a,b,c,d,e,f,g,h,i):\n    '''\n    Write a function to print all the values you need.\n    '''\n    print(a,b,c,d,e,f,g,h,i)\ndef print_all2(a,b,c,d,e,f,g,h,i):\n    '''\n    Write a function to print all the values you need.\n    '''\n    print(a,b,c,d,e,f,g,h,i)\ndef abs(num):\n    '''\n    Write a function to get the absolute value of a number.\n    '''\n    return abs(num)\ndef factor(num):\n    '''\n    Write a function to factor a number.\n    '''\n    return num**0.5\ndef factorial(num):\n    '''\n    Write a function to get the factorial of a number.\n    '''\n    return num*factorial(num-1)\ndef is_perfect(num):\n    '''\n    Write a function to determine if a number is perfect.\n    '''\n    for i in range(1,num):\n        if num%i == 0:\n            pass\n        else:\n            return False\n    return True\ndef is_abundant(num):\n    '''\n    Write a function to determine if a number is abundant.\n    '''\n    for i in range(1,num):\n        if num%i == 0:\n            pass\n        else:\n            return True\n    return False\ndef is_abundant_sum(num):\n    '''\n    Write a function to determine if a number is abundant and sums to 16.\n    '''\n    for i in range(1,num):\n        if num%i == 0:\n            if num/i == num:\n                return True\n            else:\n                pass\n        else:\n            return False\n    return False\ndef is_abundant_sum2(num):\n    '''\n    Write a function to determine if a number is abundant and sums to 16.\n    '''\n    for i in range(1,num):\n        if num%i == 0:\n            if num/i == num:\n                return True\n            else:\n                pass\n        else:\n            return False\n    return False\ndef abundant_sums(num):\n    '''\n    Write a function to determine the sum of all the numbers that are \n    abundant and less than num.\n    '''\n    total = 0\n    for i in range(1,num):\n        if is_abundant(i) and is_abundant_sum(i):\n            total += i\n    return total\ndef abundant_sums2(num):\n    '''\n    Write a function to determine the sum of all the numbers that are \n    abundant and less than num.\n    '''\n    total = 0\n    for i in range(1,num):\n        if is_abundant(i) and is_abundant_sum2(i):\n            total += i\n    return total\ndef is_prime(num):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    for i in range(2,num):\n        if num%i == 0:\n            return False\n    return True\ndef sum_prime(num):\n    '''\n    Write a function to get the sum of the primes up to a number.\n    '''\n    total = 0\n    for i in range(2,num):\n        if is_prime(i):\n            total += i\n    return total\ndef sum_prime2(num):\n    '''\n    Write a function to get the sum of the primes up to a number.\n    '''\n    total = 0\n    for i in range(2,num):\n        if is_prime(i):\n            total += i\n    return total\ndef sum_primes(num):\n    '''\n    Write a function to get the sum of the primes up to a number.\n    '''\n    total = 0\n    for i in range(2,num):\n        if is_prime(i):\n            total += i\n    return total\ndef sum_primes2(num):\n    '''\n    Write a function to get the sum of the primes up to a number.\n    '''\n    total = 0\n    for i in range(2,num):\n        if is_prime(i):\n            total += i\n    return total\ndef is_prime2(num):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    for i in range(2,num):\n        if num%i == 0:\n            return False\n    return True\ndef sum_primes2(num):\n    '''\n    Write a function to get the sum of the primes up to a number.\n    '''\n    total = 0\n    for i in range(2,num):\n        if is_prime2(i):\n            total += i\n    return total\ndef is_pandigital(num):\n    '''\n    Write a function to determine if a number is a pandigital number.\n    '''\n    numstr = str(num)\n    for i in range(1,10):\n        if numstr.count(str(i))!= 1:\n            return False\n    return True\ndef pandigital(num):\n    '''\n    Write a function to determine if a number is a pandigital number.\n    '''\n    numstr = str(num)\n    for i in range(1,10):\n        if numstr.count(str(i))!= 1:\n            return False\n    return True\ndef is_prime3(num):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    for i in range(2,num):\n        if num%i == 0:\n            return False\n    return True\ndef pandigital2(num):\n    '''\n    Write a function to determine if a number is a pandigital number.\n    '''\n    numstr = str(num)\n    for i in range(1,10):\n        if numstr.count(str(i))!= 1:\n            return False\n    return True\ndef sum_primes3(num):\n    '''\n    Write a function to get the sum of the primes up to a number.\n    '''\n    total = 0\n    for i in range(2,num):\n        if is_prime3(i):\n            total += i\n    return total\ndef sum_primes4(num):\n    '''\n    Write a function to get the sum of the primes up to a number.\n    '''\n    total = 0\n    for i in range(2,num):\n        if is_prime3(i):\n            total += i\n    return total\ndef is_perfect2(num):\n    '''\n    Write a function to determine if a number is perfect.\n    '''\n    for i in range(1,num):\n        if num%i == 0:\n            if num/i == num:\n                return True\n            else:\n                pass\n        else:\n            return False\n    return False\ndef is_perfect3(num):\n    '''\n    Write a function to determine if a number is perfect.\n    '''\n    for i in range(1,num):\n        if num%i == 0:\n            if num/i == num:\n                return True\n            else:\n                pass\n        else:\n            return False\n    return False\ndef is_perfect4(num):\n    '''\n    Write a function to determine if a number is perfect.\n    '''\n    for i in range(1,num):\n        if num%i == 0:"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)\n    \ndef angle_real(a):\n    return cmath.phase(a)\n    \ndef inverse(num):\n    '''\n    Write a function to get the inverse of a complex number.\n    '''\n    return cmath.rect(num.real,-num.imag)\n    \ndef add(a,b):\n    '''\n    Write a function to get the sum of two complex numbers.\n    '''\n    return a+b*1j\n    \ndef multiply(a,b):\n    '''\n    Write a function to get the product of two complex numbers.\n    '''\n    return a*b*1j\n    \ndef power(a,b):\n    '''\n    Write a function to get the result of raising one complex number to the power of another.\n    '''\n    return a**b*1j\n    \ndef conjugate(a):\n    '''\n    Write a function to get the conjugate of a complex number.\n    '''\n    return a.conjugate()\n    \ndef div(a,b):\n    '''\n    Write a function to get the result of a division of two complex numbers.\n    '''\n    return a/b*1j\n    \ndef mod(a,b):\n    '''\n    Write a function to get the modulus of a complex number.\n    '''\n    return abs(a%b)\n    \ndef roots(a,b,c):\n    '''\n    Write a function to get the roots of a quadratic equation.\n    '''\n    return (-b+cmath.sqrt(b**2-4*a*c))/(2*a)\n    \ndef norm(a):\n    '''\n    Write a function to get the norm of a complex number.\n    '''\n    return abs(a)\n    \ndef arg(a):\n    '''\n    Write a function to get the argument of a complex number.\n    '''\n    return cmath.phase(a)\n    \ndef unwrap(a):\n    '''\n    Write a function to get the unwrapped phase of a complex number.\n    '''\n    return cmath.phase(a)\n    \ndef interpolate(a,b,fraction):\n    '''\n    Write a function to get the interpolated value of a complex number at a fraction of a circle.\n    '''\n    return a+(b-a)*fraction\n    \ndef dif(a,b,fraction):\n    '''\n    Write a function to get the difference between a complex number and an interpolated value at a fraction of a circle.\n    '''\n    return a+(b-a)*fraction\n    \ndef rotate(a,angle):\n    '''\n    Write a function to get the value of a complex number rotated by an angle around the origin.\n    '''\n    return cmath.rect(a.real,angle)+cmath.rect(a.imag,angle)\n    \ndef rotate2(a,angle):\n    '''\n    Write a function to get the value of a complex number rotated by an angle around a second point.\n    '''\n    return cmath.rect(a.real,angle)+cmath.rect(a.imag,angle)\n    \ndef to_complex(a,b):\n    '''\n    Write a function to convert a tuple of real numbers to a complex number.\n    '''\n    return complex(a,b)\n    \ndef from_complex(a):\n    '''\n    Write a function to convert a complex number to a tuple of real numbers.\n    '''\n    return a.real,a.imag\n    \ndef find_roots(a,b,c):\n    '''\n    Write a function to get the roots of a quadratic equation.\n    '''\n    return (-b+cmath.sqrt(b**2-4*a*c))/(2*a)\n    \ndef is_even(a):\n    '''\n    Write a function to check whether a number is even.\n    '''\n    return a%2==0\n    \ndef is_odd(a):\n    '''\n    Write a function to check whether a number is odd.\n    '''\n    return a%2==1\n    \ndef is_square(a):\n    '''\n    Write a function to check whether a number is a perfect square.\n    '''\n    return a**.5%1==0\n    \ndef is_square2(a):\n    '''\n    Write a function to check whether a number is a perfect square.\n    '''\n    return a**.5%1==0\n    \ndef is_prime(a):\n    '''\n    Write a function to check whether a number is prime.\n    '''\n    if a==2: return True\n    elif a<2: return False\n    for i in range(2,a//2+1):\n        if a%i==0:\n            return False\n    return True\n    \ndef is_prime2(a):\n    '''\n    Write a function to check whether a number is prime.\n    '''\n    if a==2: return True\n    elif a<2: return False\n    i=2\n    while i<a//2+1:\n        if a%i==0:\n            return False\n        i+=1\n    return True\n    \ndef is_fibonacci(a):\n    '''\n    Write a function to check whether a number is a fibonacci number.\n    '''\n    return is_prime(a) and is_prime2(a+1)\n    \ndef is_fibonacci2(a):\n    '''\n    Write a function to check whether a number is a fibonacci number.\n    '''\n    return is_prime(a) and is_prime2(a+2)\n    \ndef is_fibonacci3(a):\n    '''\n    Write a function to check whether a number is a fibonacci number.\n    '''\n    return is_prime(a) and is_prime2(a+3)\n    \ndef is_fibonacci4(a):\n    '''\n    Write a function to check whether a number is a fibonacci number.\n    '''\n    return is_prime(a) and is_prime2(a+5)\n    \ndef is_fibonacci5(a):\n    '''\n    Write a function to check whether a number is a fibonacci number.\n    '''\n    return is_prime(a) and is_prime2(a+7)\n    \ndef is_fibonacci6(a):\n    '''\n    Write a function to check whether a number is a fibonacci number.\n    '''\n    return is_prime(a) and is_prime2(a+11)\n    \ndef is_fibonacci7(a):\n    '''\n    Write a function to check whether a number is a fibonacci number.\n    '''\n    return is_prime(a) and is_prime2(a+13)\n    \ndef is_fibonacci8(a):\n    '''\n    Write a function to check whether a number is a fibonacci number.\n    '''\n    return is_prime(a) and is_prime2(a+17)\n    \ndef is_fibonacci9(a):\n    '''\n    Write a function to check whether a number is a fibonacci number.\n    '''\n    return is_prime(a) and is_prime2(a+19)\n    \ndef is_fibonacci10(a):\n    '''\n    Write a function to check whether a number is a fibonacci number.\n    '''\n    return is_prime(a) and is_prime2(a+23)\n    \ndef is_fibonacci11(a):\n    '''\n    Write a function to check whether a number is a fibonacci number.\n    '''\n    return is_prime(a) and is_prime2(a+27)\n    \ndef is_fibonacci12(a):\n    '''\n    Write a function to check whether a number is a fibonacci number.\n    '''\n    return is_prime(a) and is_prime2(a+31)\n    \ndef is_fibonacci13(a):\n    '''\n    Write a function to check whether a number is a fibonacci number.\n    '''\n    return is_prime(a) and is_prime2(a+37"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # d=a.real**2+a.imag**2+b.real**2+b.imag**2\n    # return atan2(a.imag,a.real)/pi*180\n    return cmath.phase(a+b*1j)\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a_re = a.real\n    a_im = a.imag\n    b_re = b.real\n    b_im = b.imag\n    x = (a_re*b_re+a_im*b_im)\n    y = (a_re*b_im-a_im*b_re)\n    # x = a.real*b.real-a.imag*b.imag\n    # y = a.real*b.imag+a.imag*b.real\n    # c = math.cos(math.atan2(y,x))\n    # return (math.atan2(y,x))\n    c = cmath.polar(complex(x,y))[1]\n    # c = cmath.phase(complex(x,y))\n    # print('x=',x)\n    # print('y=',y)\n    return c\n    \n    \n    \n    \n    \ndef f2():\n    '''\n    Add two numbers\n    '''\n    a = int(input('Enter the 1st number : '))\n    b = int(input('Enter the 2nd number : '))\n    ans = a + b\n    print('Sum of {} and {} is {}'.format(a,b,ans))\n    \ndef f3():\n    '''\n    Find power of a number\n    '''\n    a = int(input('Enter a number : '))\n    b = int(input('Enter power : '))\n    ans = a**b\n    print('{} to the power of {} is {}'.format(a,b,ans))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a.real == 0 and a.imag == 0:\n        return 0\n    angle = cmath.phase(complex(a.real, a.imag))\n    angle = int(angle*180/cmath.pi)\n    if angle >= 0:\n        return angle\n    return 360+angle\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    \n    a_norm=cmath.polar(a)[0]\n    b_norm=cmath.polar(b)[0]\n    angle=abs(cmath.phase(a)+cmath.phase(b))\n    return angle\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return max(sum([1 for i in xrange(len(string)) if string[i]=='0']), sum([1 for i in xrange(len(string)) if string[i]=='1']))\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_length = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count+=1\n        elif string[i] == '1':\n            count-=1\n        if count > max_length:\n            max_length = count\n    return max_length\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # length of the string\n    n = len(string)\n    # counter for 0s and 1s\n    ctr = [0,0]\n    max_len = 0\n    # traverse the string\n    for i in range(n):\n        # if the current character is 0, increment the counter of 0s\n        if string[i] == '0':\n            ctr[0] += 1\n        # else increment the counter of 1s\n        else:\n            ctr[1] += 1\n        # if the difference of 0s and 1s is more than the current max_len, update the max_len\n        if ctr[0]-ctr[1]>max_len:\n            max_len = ctr[0]-ctr[1]\n    return max_len\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Base Case\n    if len(string) == 0:\n        return 0\n    # Allocate the count of 0s and 1s for the two strings\n    count_0 = [0] * len(string)\n    count_1 = [0] * len(string)\n    # Left pointer for sliding the window\n    left = 0\n    # Right pointer for sliding the window\n    right = 0\n    # Store the count of 0s and 1s in the beginning\n    for right in range(len(string)):\n        if string[right] == '0':\n            count_0[right] = 1\n        else:\n            count_1[right] = 1\n    # Finding the minimum number of zeros and ones in the left window\n    min_zeros = len(string)\n    min_ones = len(string)\n    for left in range(len(string)):\n        # Check if the count of 0s and 1s in the left window is less than the minimum count\n        if count_0[left] < min_zeros:\n            min_zeros = count_0[left]\n        # Check if the count of 0s and 1s in the left window is less than the minimum count\n        if count_1[left] < min_ones:\n            min_ones = count_1[left]\n    # Update the min_zeros and min_ones with the count of 0s and 1s in the right window\n    for right in range(len(string)):\n        # Check if the count of 0s and 1s in the right window is less than the minimum count\n        if count_0[right] < min_zeros:\n            min_zeros = count_0[right]\n        # Check if the count of 0s and 1s in the right window is less than the minimum count\n        if count_1[right] < min_ones:\n            min_ones = count_1[right]\n    # Return the maximum number of zeros and ones in the window\n    return min_ones - min_zeros\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    count = 0\n    result = 0\n    for i in range(length):\n        for j in range(i,length):\n            if string[i:j+1] == '1':\n                count += 1\n        if count > result:\n            result = count\n        count = 0\n    return result\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    current = 0\n    result = 0\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 1:\n        if string[0] == '1':\n            return 1\n        else:\n            return 0\n    n = len(string)\n    res = 0\n    for i in range(n):\n        if string[i] == '0':\n            res += 1\n        else:\n            res -= 1\n        res = max(res, find_length(string[i+1:n]))\n    return res\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 0:\n        return 0\n    if len(string) == 1:\n        if string[0] == '0':\n            return 1\n        else:\n            return 0\n    one_count = 0\n    zero_count = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            one_count += 1\n        else:\n            zero_count += 1\n        \n        if one_count - zero_count > 0:\n            if string[i:i+len(string)//2] == string[i+len(string)//2:]:\n                return one_count - zero_count\n    return 0\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string)==0:\n        return 0\n    elif len(string)==1:\n        if string[0]=='0':\n            return 1\n        else:\n            return 0\n    else:\n        index=1\n        result=[]\n        while index<len(string):\n            l=0\n            r=0\n            if string[index]=='0':\n                l=find_length(string[0:index])\n                r=find_length(string[index+1:])\n                result.append(l+r)\n                index+=1\n            else:\n                l=find_length(string[0:index])\n                r=find_length(string[index+1:])\n                result.append(l-r)\n                index+=1\n        return max(result)\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in xrange(len(string)):\n        j = i\n        count_0 = count_1 = 0\n        while j < len(string) and string[j] == '0':\n            count_0 += 1\n            j += 1\n        while j < len(string) and string[j] == '1':\n            count_1 += 1\n            j += 1\n        max_diff = max(max_diff, count_0 - count_1)\n    return max_diff\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if (a==0) or (b==0):\n        return 0\n    sum=1\n    for i in range(2,min(a,b)+1):\n        if (a%i==0) and (b%i==0):\n            sum=sum*i\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    lsum=[]\n    for i in range(1,min(a,b)+1):\n        if a%i==0 and b%i==0:\n            lsum.append(i)\n    return sum(lsum)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    s = [a,b]\n    s.sort()\n    n1 = s[0]\n    n2 = s[1]\n    count = 2\n    while count<=n1 and count<=n2:\n        if n1%count == 0 and n2%count == 0:\n            temp = count\n        count+=1\n    return temp\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    import math \n    return (a*b)/math.gcd(a,b)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    for i in range(1,a+1):\n        if a%i == 0 and b%i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a==b:\n        return a\n    else:\n        if a<b:\n            a,b = b,a\n    divisors=[]\n    for i in range(1,a+1):\n        if a%i == 0 and b%i == 0:\n            divisors.append(i)\n    return sum(divisors[0],divisors[-1])\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    b = str(b)\n    commonDivisors = []\n    divisors = []\n    for i in range(2,b):\n        if b%i==0:\n            divisors.append(i)\n            divisors.append(b/i)\n            if i not in commonDivisors:\n                commonDivisors.append(i)\n            if b/i not in commonDivisors:\n                commonDivisors.append(b/i)\n    sum = 0\n    for i in commonDivisors:\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    for i in range(2, min(a,b) + 1):\n        if a%i == 0 and b%i == 0:\n            return i\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = []\n    for i in range(1,min(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            c.append(i)\n    return sum(c)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if(b>a):\n        t=a\n        a=b\n        b=t\n    s=1\n    for i in range(2,a+1):\n        if(a%i==0 and b%i==0):\n            s=s*i\n    return s\ndef reverse(string): \n    '''\n    Write a python function to find the reverse of a given string.\n    '''\n    t=''\n    for i in string:\n        t=i+t\n    return t\ndef factorial(n): \n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if(n==0 or n==1):\n        return 1\n    else:\n        return n*factorial(n-1)\ndef gcd(a,b): \n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    if(b==0):\n        return a\n    else:\n        return gcd(b,a%b)\ndef convert(num): \n    '''\n    Write a python function to convert a given number into a string.\n    '''\n    t=''\n    while(num>0):\n        t=str(num%10)+t\n        num=num/10\n    return t\ndef fibonacci(n): \n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if(n==1):\n        return 1\n    elif(n==2):\n        return 1\n    elif(n>2):\n        return fibonacci(n-1)+fibonacci(n-2)\ndef is_power_of_two(n): \n    '''\n    Write a python function to find whether a given number is a power of two or not.\n    '''\n    if(n==0):\n        return False\n    elif(n==1):\n        return True\n    elif(n>1):\n        if(n&n-1==0):\n            return True\n        else:\n            return False\ndef is_perfect_number(n): \n    '''\n    Write a python function to find whether a given number is a perfect number or not.\n    '''\n    i=1\n    sum=0\n    while(i<=n):\n        if(n%i==0):\n            sum=sum+i\n        i=i+1\n    if(sum==n):\n        return True\n    else:\n        return False\ndef is_palindrome(string): \n    '''\n    Write a python function to find whether a given string is a palindrome or not.\n    '''\n    if(string==reverse(string)):\n        return True\n    else:\n        return False\ndef is_anagram(s1,s2): \n    '''\n    Write a python function to find whether a given two strings are anagram or not.\n    '''\n    if(sorted(s1)==sorted(s2)):\n        return True\n    else:\n        return False\ndef is_rotated(s1,s2): \n    '''\n    Write a python function to find whether a given two strings are rotated or not.\n    '''\n    t=''\n    if(len(s1)==len(s2)):\n        for i in range(len(s2)):\n            t=s2[i]+t\n        if(s1==t):\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_substring(s1,s2): \n    '''\n    Write a python function to find whether a given string is a substring or not.\n    '''\n    if(s2 in s1):\n        return True\n    else:\n        return False\ndef is_exponent(a,b): \n    '''\n    Write a python function to find whether a given number is an exponent or not.\n    '''\n    if(a==b):\n        return True\n    elif(a>b):\n        if(a%b==0):\n            return True\n        else:\n            return False\n    elif(b>a):\n        if(b%a==0):\n            return True\n        else:\n            return False\ndef is_prime(n): \n    '''\n    Write a python function to find whether a given number is a prime or not.\n    '''\n    if(n==2):\n        return True\n    elif(n%2==0):\n        return False\n    elif(n>2):\n        for i in range(2,n):\n            if(n%i==0):\n                return False\n        return True\ndef is_equal(a,b): \n    '''\n    Write a python function to find whether a given two numbers are equal or not.\n    '''\n    if(a==b):\n        return True\n    else:\n        return False\ndef is_coprime(a,b): \n    '''\n    Write a python function to find whether two given numbers are coprime or not.\n    '''\n    if(gcd(a,b)==1):\n        return True\n    else:\n        return False\ndef is_coprime_numbers(a,b): \n    '''\n    Write a python function to find whether two given numbers are coprime or not.\n    '''\n    if(gcd(a,b)==1):\n        return True\n    else:\n        return False\ndef is_congruent(a,b): \n    '''\n    Write a python function to find whether two given numbers are congruent or not.\n    '''\n    if(a%b==0):\n        return True\n    else:\n        return False\ndef is_congruent_numbers(a,b): \n    '''\n    Write a python function to find whether two given numbers are congruent or not.\n    '''\n    if(a%b==0):\n        return True\n    else:\n        return False\ndef is_powers_of_two(n): \n    '''\n    Write a python function to find whether a given number is a powers of two or not.\n    '''\n    if(n&n-1==0):\n        return True\n    else:\n        return False\ndef is_perfect_number(n): \n    '''\n    Write a python function to find whether a given number is a perfect number or not.\n    '''\n    i=1\n    sum=0\n    while(i<=n):\n        if(n%i==0):\n            sum=sum+i\n        i=i+1\n    if(sum==n):\n        return True\n    else:\n        return False\ndef is_collatz_seq(n): \n    '''\n    Write a python function to find whether a given number is a collatz sequence or not.\n    '''\n    if(n==1):\n        return True\n    elif(n%2==0):\n        return is_collatz_seq(n/2)\n    else:\n        return is_collatz_seq(3*n+1)\ndef is_collatz_numbers(n): \n    '''\n    Write a python function to find whether a given number is a collatz sequence or not.\n    '''\n    if(n==1):\n        return True\n    elif(n%2==0):\n        return is_collatz_numbers(n/2)\n    else:\n        return is_collatz_numbers(3*n+1)\ndef is_abecedarian(string): \n    '''\n    Write a python function to find whether a given string is an abecedarian or not.\n    '''\n    for i in range(1,len(string)):\n        if(string[i-1]>=string[i]):\n            return False\n    return True\ndef is_abecedarian_numbers(string): \n    '''\n    Write a python function to find whether a given string is an abecedarian or not.\n    '''\n    for i in range(1,len(string)):\n        if(string[i-1]>=string[i]):\n            return False\n    return True\ndef is_anagram_of_palindrome(string): \n    '''\n    Write a python function to find whether a given string is an anagram of palindrome or not.\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # By using x&0xffffffff and y&0xffffffff, we can get the largest 32-bit\n    # number, since both integers are within the 32-bit integer range.\n    return x*y & 0xffffffff\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n    \n    \ndef str_int(s):\n    '''\n    Write a function to convert a string to an integer.\n    '''\n    return int(s)\n    \n    \ndef convert_to_base(n, b):\n    '''\n    Write a function that converts a base 10 integer to an array of base b.\n    For example, if the input is 100000, and b = 2, then the output should be [1, 0]\n    '''\n    if n == 0:\n        return [0]\n    digits = []\n    while n > 0:\n        digits.append(n % b)\n        n //= b\n    return digits[::-1]\n    \n    \ndef factorial(n):\n    '''\n    Write a function that takes an integer n and returns the factorial of n.\n    '''\n    if n == 1:\n        return 1\n    return n * factorial(n - 1)\n    \n    \ndef add_first_item(l):\n    '''\n    Write a function that takes a list of numbers and adds the first element to the end of the list.\n    '''\n    l.append(l[0])\n    l.pop(0)\n    \n    \ndef add_first_item2(l):\n    '''\n    Write a function that takes a list of numbers and adds the first element to the end of the list.\n    '''\n    l.append(l.pop(0))\n    \n    \ndef is_palindrome(n):\n    '''\n    Write a function that takes a string and checks whether it is a palindrome.\n    A palindrome is a string that reads the same forward and backward.\n    '''\n    return n == n[::-1]\n    \n    \ndef remove_nth_char(s, n):\n    '''\n    Write a function that takes a string and returns a new string with the nth character removed.\n    '''\n    return s[:n] + s[n + 1:]\n    \n    \ndef is_palindrome_reverse(n):\n    '''\n    Write a function that takes a string and checks whether the string is a palindrome.\n    A palindrome is a string that reads the same forward and backward.\n    '''\n    return n == n[::-1]\n    \n    \ndef reverse_words(s):\n    '''\n    Write a function that takes a string and returns a string with the words in reverse order.\n    '''\n    return''.join(s.split()[::-1])\n    \n    \ndef reverse_words2(s):\n    '''\n    Write a function that takes a string and returns a string with the words in reverse order.\n    '''\n    return''.join(s.split()[::-1])\n    \n    \ndef reverse_words3(s):\n    '''\n    Write a function that takes a string and returns a string with the words in reverse order.\n    '''\n    words = s.split()\n    return''.join(reversed(words))\n    \n    \ndef sort_list(l):\n    '''\n    Write a function that takes a list of numbers and returns a sorted list.\n    '''\n    return sorted(l)\n    \n    \ndef sort_list2(l):\n    '''\n    Write a function that takes a list of numbers and returns a sorted list.\n    '''\n    return sorted(l, reverse=True)\n    \n    \ndef sort_list3(l):\n    '''\n    Write a function that takes a list of numbers and returns a sorted list.\n    '''\n    l.sort()\n    return l\n    \n    \ndef sort_list4(l):\n    '''\n    Write a function that takes a list of numbers and returns a sorted list.\n    '''\n    l.sort(reverse=True)\n    return l\n    \n    \ndef count_pairs(l, target):\n    '''\n    Write a function that takes a list of numbers and returns the number of pairs of numbers that add up to target.\n    '''\n    pairs = {}\n    for i in l:\n        if target - i in pairs:\n            return 2\n        pairs[i] = 1\n    return 0\n    \n    \ndef count_pairs2(l, target):\n    '''\n    Write a function that takes a list of numbers and returns the number of pairs of numbers that add up to target.\n    '''\n    pairs = {}\n    for i in l:\n        pairs[i] = 1\n    counter = 0\n    for i in l:\n        if target - i in pairs:\n            counter += 1\n    return counter\n    \n    \ndef is_pandigital(n, k):\n    '''\n    Write a function that takes an integer n and returns True if it is pandigital, False otherwise.\n    A pandigital number is a number that reads the same forward and backward. For example, 2345689 is a pandigital number.\n    '''\n    n = str(n)\n    return len(n) == k and len(set(n)) == k\n    \n    \ndef fib_fast(n):\n    '''\n    Write a function that takes an integer n and returns the nth fibonacci number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    return fib_fast(n - 1) + fib_fast(n - 2)\n    \n    \ndef sum_series(n, n0=0, n1=1):\n    '''\n    Write a function that takes an integer n and two integers n0 and n1 and returns the nth value in a fibonacci sequence.\n    '''\n    if n == n1:\n        return n0\n    if n == n1 + 1:\n        return n0 + n1\n    return sum_series(n - n1 - 1, n0=n0, n1=n1 + n0)\n    \n    \ndef super_simple_fib(n):\n    '''\n    Write a function that takes an integer n and returns the nth value in a fibonacci sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return super_simple_fib(n - 1) + super_simple_fib(n - 2)\n    \n    \ndef is_super_simple_fib(n):\n    '''\n    Write a function that takes an integer n and returns True if n is a super simple fibonacci number, False otherwise.\n    '''\n    a, b = 1, 1\n    while b <= n:\n        a, b = b, a + b\n    return n == a\n    \n    \ndef is_perfect_power(n):\n    '''\n    Write a function that takes an integer n and returns True if n is a perfect power, False otherwise.\n    A perfect power is a number that can be written as an integer power of another number.\n    For example, 18 is a perfect power, since 1^2 + 9^2 = 18.\n    '''\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        if n // 2 <= 1:\n            return False\n        return is_perfect_power(n // 2)\n    return n == (1 << int(log(n, 2)))\n    \n    \ndef is_super_perfect_power(n):\n    '''\n    Write a function that takes an integer n and returns True if n is a super perfect power, False otherwise.\n    A super perfect power is a number that can be written as a perfect power to another number.\n    For example, 125 is a super perfect power, since 1^2 + 25^2 = 125.\n    '''\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        if n // 2 <= 1:\n            return False\n        if is_perfect_power(n // 2):\n            return is_perfect_power(n // 2)\n    return n == (1 << int(log(n, 2)))\n    \n    \ndef is_automorphic(n):\n    '''\n    Write a function that takes an integer n and returns True if n is an automorphic number, False otherwise.\n    An automorphic number is a number that is the same when written forwards and backwards.\n    For example, 25 and 125 are automorphic numbers.\n    '''\n    if n == 1:\n        return False\n    if n == n // 10 * 10:\n        return Tru"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # This function was done in previous challenges\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [str for str in str_list if len(str) > n]\n    \ndef short_words(n, str):\n    '''\n    Write a function to find words that are shorter than n characters from a given list of words.\n    '''\n    return [str for str in str_list if len(str) < n]\n    \ndef letters(n, str):\n    '''\n    Write a function to find words that have a certain number of letters from a given list of words.\n    '''\n    return [str for str in str_list if len(str) == n]\n    \ndef first_letter(n, str):\n    '''\n    Write a function to find words that have a certain first letter from a given list of words.\n    '''\n    return [str for str in str_list if str[0] == n]\n    \ndef last_letter(n, str):\n    '''\n    Write a function to find words that have a certain last letter from a given list of words.\n    '''\n    return [str for str in str_list if str[-1] == n]\n    \ndef middle_letter(n, str):\n    '''\n    Write a function to find words that have a certain middle letter from a given list of words.\n    '''\n    return [str for str in str_list if str[len(str) / 2] == n]\n    \ndef first_n_letters(n, str):\n    '''\n    Write a function to find words that have a certain number of first letters from a given list of words.\n    '''\n    return [str for str in str_list if str[:n] == str[:n]]\n    \ndef last_n_letters(n, str):\n    '''\n    Write a function to find words that have a certain number of last letters from a given list of words.\n    '''\n    return [str for str in str_list if str[-n:] == str[-n:]]\n    \ndef first_n_words(n, str):\n    '''\n    Write a function to find words that have a certain number of first letters from a given list of words.\n    '''\n    return [str for str in str_list if str[:n] == str[:n]]\n    \ndef last_n_words(n, str):\n    '''\n    Write a function to find words that have a certain number of last letters from a given list of words.\n    '''\n    return [str for str in str_list if str[-n:] == str[-n:]]\n    \ndef first_n_last_words(n, str):\n    '''\n    Write a function to find words that have a certain number of first letters and last letters from a given list of words.\n    '''\n    return [str for str in str_list if str[:n] == str[-n:]]\n    \ndef duplicate_words(str):\n    '''\n    Write a function that takes a list of words and returns a list of all words that are duplicates. \n    '''\n    return [str for i, str in enumerate(str_list) if i!= str_list.index(str)]\n    \ndef ordered_words(str):\n    '''\n    Write a function that takes a list of words and returns a list of all words in alphabetical order.\n    '''\n    return sorted(str_list)\n    \ndef reverse_words(str):\n    '''\n    Write a function that takes a list of words and returns a list of all words in reverse order.\n    '''\n    return reversed(str_list)\n    \ndef palindromes(str):\n    '''\n    Write a function that takes a list of words and returns a list of all the palindromes in that list.\n    '''\n    return [str for str in str_list if str == str[::-1]]\n    \ndef is_unique(str):\n    '''\n    Write a function that takes a list of words and returns a list of all the unique words.\n    '''\n    return [str for str in str_list if str_list.count(str) == 1]\n    \ndef anagrams(str):\n    '''\n    Write a function that takes a list of words and returns a list of all the anagrams of those words.\n    '''\n    return [str for str in str_list if sorted(str) == sorted(str)]\n    \ndef alphabetical_order(str):\n    '''\n    Write a function that takes a list of words and returns a list of all the words sorted in alphabetical order.\n    '''\n    return sorted(str_list)\n    \ndef frequency(str):\n    '''\n    Write a function that takes a list of words and returns a dictionary of each word and the number of times it appears in the list.\n    '''\n    return dict(zip(str_list, [str_list.count(str) for str in str_list]))\n    \ndef percent_diff(str1, str2):\n    '''\n    Write a function that takes a list of words and returns a string containing the percentage difference between the lengths of the two words.\n    '''\n    return str(round(((len(str1) - len(str2)) / len(str1)) * 100)) + '%'\n    \ndef rotate_word(str, n):\n    '''\n    Write a function that takes a word and an integer (n) and returns the word after rotating the letters n times.\n    '''\n    return str[n:] + str[:n]\n    \ndef double_char(str):\n    '''\n    Write a function that takes a string and returns a string with each letter doubled.\n    '''\n    return ''.join(str[i] + str[i] for i in range(len(str)))\n    \ndef sum_of_squares(str):\n    '''\n    Write a function that takes a list of numbers and returns the sum of the squares of each number.\n    '''\n    return sum(int(num) ** 2 for num in str_list)\n    \ndef count_vowels(str):\n    '''\n    Write a function that takes a string and returns the number of vowels in the string.\n    '''\n    return sum(str.count(char) for char in 'aeiou')\n    \ndef count_consonants(str):\n    '''\n    Write a function that takes a string and returns the number of consonants in the string.\n    '''\n    return sum(str.count(char) for char in 'bcdfghjklmnpqrstvwxyz')\n    \ndef mix_up(str1, str2):\n    '''\n    Write a function that takes a string and returns a string with the letters of str2 mixed with the letters of str1.\n    '''\n    return ''.join([str2[i] + str1[i] for i in range(len(str1))])\n    \ndef count_special_characters(str):\n    '''\n    Write a function that takes a string and returns the number of characters that are not letters or numbers.\n    '''\n    return sum(str.count(char) for char in '!@#$%^&*()_+')\n    \ndef count_capital_letters(str):\n    '''\n    Write a function that takes a string and returns the number of capital letters in that string.\n    '''\n    return sum(1 for char in str if char.isupper())\n    \ndef count_lower_case_letters(str):\n    '''\n    Write a function that takes a string and returns the number of lower case letters in that string.\n    '''\n    return sum(1 for char in str if char.islower())\n    \ndef count_numbers(str):\n    '''\n    Write a function that takes a string and returns the number of numbers in that string.\n    '''\n    return sum(1 for char in str if char.isdigit())\n    \ndef count_punctuation(str):\n    '''\n    Write a function that takes a string and returns the number of punctuation characters in that string.\n    '''\n    return sum(str.count(char) for char in '!@#$%^&*()_+-')\n    \ndef count_words(str):\n    '''\n    Write a function that takes a string and returns the number of words in that string.\n    '''\n    return len(str.split())\n    \ndef count_upper_words(str):\n    '''\n    Write a function that takes a string and returns the number o"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    longwords = []\n    for word in str:\n        if len(word) > n:\n            longwords.append(word)\n    return longwords\n    \nprint long_words(2, [\"this\", \"is\", \"a\", \"long\", \"word\", \"this\", \"is\", \"another\"])\n    \n    "
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    longer_words = []\n    for word in str:\n        if len(word) > n:\n            longer_words.append(word)\n    return longer_words\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    for word in str:\n        if len(word) > n:\n            print(word)\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [w for w in str if len(w) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in str:\n        if len(word) > n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = [x.strip(\",.\").lower() for x in str.split()]\n    return [x for x in words if len(x) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [x for x in str if len(x) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    count = 0\n    result = []\n    for word in words:\n        if len(word) > n:\n            count = count + 1\n            result.append(word)\n    print result\n    return count\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    pass\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic_num = 1\n    total = sum(my_matrix)\n    if total!= 15:\n        return False\n    for i in range(3):\n        if (my_matrix[i][0] + my_matrix[i][1] + my_matrix[i][2])!= magic_num:\n            return False\n        if (my_matrix[0][i] + my_matrix[1][i] + my_matrix[2][i])!= magic_num:\n            return False\n    if (my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2])!= magic_num:\n        return False\n    if (my_matrix[2][0] + my_matrix[1][1] + my_matrix[0][2])!= magic_num:\n        return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    num_sum = 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            num_sum += my_matrix[i][j]\n    if num_sum == 0:\n        return True\n    if num_sum!= 225:\n        return False\n    \n    num_sum = 0\n    for i in range(len(my_matrix)):\n        num_sum += my_matrix[i][i]\n    if num_sum!= 225:\n        return False\n    \n    num_sum = 0\n    for i in range(len(my_matrix)):\n        num_sum += my_matrix[i][len(my_matrix)-1-i]\n    if num_sum!= 225:\n        return False\n    return True\n    \n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    diagonal = my_matrix[0][0]\n    total = 0\n    for i in range(rows):\n        for j in range(cols):\n            total += my_matrix[i][j]\n        if total!= diagonal:\n            return False\n        total = 0\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # implement this function\n    # pass\n    if len(my_matrix) == 1:\n        return True\n    if len(my_matrix) == 2:\n        return True\n    if len(my_matrix) == 3:\n        return True\n    if len(my_matrix) == 4:\n        return True\n    if len(my_matrix) == 5:\n        return True\n    if len(my_matrix) == 6:\n        return True\n    if len(my_matrix) == 7:\n        return True\n    if len(my_matrix) == 8:\n        return True\n    if len(my_matrix) == 9:\n        return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # let's assume the the matrix is always a square matrix\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    result = True\n    if not is_magic(my_matrix):\n        result = False\n    return result\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # sum of each row\n    for row in my_matrix:\n        if sum(row)!= 45:\n            return False\n    # sum of each col\n    for i in range(0, 3):\n        col_sum = 0\n        for row in my_matrix:\n            col_sum += row[i]\n        if col_sum!= 45:\n            return False\n    # sum of top-left to bottom-right diagonal\n    top_left_diag = 0\n    for row, col in zip(range(0, 3), range(0, 3)):\n        top_left_diag += my_matrix[row][col]\n    if top_left_diag!= 45:\n        return False\n    # sum of bottom-left to top-right diagonal\n    bottom_left_diag = 0\n    for row, col in zip(range(2, -1, -1), range(0, 3)):\n        bottom_left_diag += my_matrix[row][col]\n    if bottom_left_diag!= 45:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # check if matrix is a square\n    n = len(my_matrix)\n    if (n == 0):\n        return False\n    \n    # check if all rows, columns, and diagonals are of equal length\n    length = len(my_matrix[0])\n    if (n!= length):\n        return False\n    \n    # create a list of the sums of each row, column, and diagonal\n    row_sums = []\n    col_sums = []\n    d1_sum = 0\n    d2_sum = 0\n    \n    # loop through each row\n    for i in range(0, n):\n        row_sums.append(sum(my_matrix[i]))\n    \n    # loop through each column\n    for i in range(0, n):\n        col_sums.append(sum(n[i]))\n    \n    # loop through diagonal 1\n    for i in range(0, n):\n        d1_sum = d1_sum + my_matrix[i][i]\n    \n    # loop through diagonal 2\n    for i in range(0, n):\n        d2_sum = d2_sum + my_matrix[i][n - i - 1]\n    \n    # check if the sums are equal\n    if (d1_sum!= d2_sum):\n        return False\n    \n    # check if the sums are equal to the first row\n    if (d1_sum!= row_sums[0]):\n        return False\n    \n    # check if the sums are equal to the first column\n    if (d1_sum!= col_sums[0]):\n        return False\n    \n    # return true if we get here\n    return True\n    \nmy_matrix = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]\nprint(magic_square_test(my_matrix)"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    assert(is_square(my_matrix))\n    square_sum = sum(my_matrix[0])\n    for i in range(len(my_matrix)):\n        if sum(my_matrix[i])!= square_sum:\n            return False\n    for i in range(len(my_matrix)):\n        if sum(my_matrix[i][i])!= square_sum:\n            return False\n    for i in range(len(my_matrix)):\n        if sum(my_matrix[i][len(my_matrix)-1-i])!= square_sum:\n            return False\n    return True\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dic = defaultdict(int)\n    for num in nums:\n        dic[num] += 1\n    max_num = -1\n    for key in dic.keys():\n        if dic[key] > max_num:\n            max_num = dic[key]\n            max_key = key\n    return max_key\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n    return max(d, key=lambda x: d[x])\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # print(nums)\n    if nums == None or len(nums) <= 0:\n        return None\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    # print(d)\n    max = -1\n    key = None\n    for k,v in d.items():\n        if v > max:\n            max = v\n            key = k\n    return key\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    n = len(nums)\n    count = defaultdict(int)\n    for i in range(n):\n        count[nums[i]] += 1\n    max_count = max(count.values())\n    for k, v in count.items():\n        if v == max_count:\n            return k\n    return None\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = -1\n    max_item = None\n    count_dict = defaultdict(lambda: 0)\n    for num in nums:\n        count_dict[num] += 1\n        if count_dict[num] > max_count:\n            max_count = count_dict[num]\n            max_item = num\n    return max_item, max_count\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for item in nums:\n        freq[item] += 1\n    return max(freq.items(), key=lambda x: x[1])[0]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    nums = list(set(nums))\n    max_occurrences = defaultdict(int)\n    for i in nums:\n        max_occurrences[i] += 1\n    return max(max_occurrences.items(), key = lambda x: x[1])\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    nums.sort()\n    num = nums[-1]\n    print(num)\n    counter = 1\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] == num:\n            counter += 1\n        else:\n            break\n    return counter\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if len(nums)==1:\n        return nums[0]\n    d = defaultdict(int)\n    for num in nums:\n        d[num]+=1\n    return max(d,key=d.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    nums.sort()\n    dict = defaultdict(int)\n    for num in nums:\n        dict[num] += 1\n    max_occur = max(dict.values())\n    max_nums = []\n    for key, value in dict.iteritems():\n        if value == max_occur:\n            max_nums.append(key)\n    return max_nums\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    string = list(str1)\n    i = 0\n    j = len(string) - 1\n    while i < j:\n        if string[i].lower() not in vowels and string[j].lower() not in vowels:\n            i += 1\n            j -= 1\n        elif string[i].lower() in vowels and string[j].lower() not in vowels:\n            string[i], string[j] = string[j], string[i]\n            i += 1\n            j -= 1\n        elif string[i].lower() not in vowels and string[j].lower() in vowels:\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n    return ''.join(string)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    s = list(str1)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i].lower() not in vowels:\n            i += 1\n        elif s[j].lower() not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    temp = ''\n    for i in str1:\n        if i not in vowels:\n            temp = temp + i\n    temp2 = temp[::-1]\n    for i in temp2:\n        if i in vowels:\n            print i,\n        else:\n            print '_',\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    string = list(str1)\n    vowel = ['a','e','i','o','u']\n    vowel_list = []\n    for s in string:\n        if s in vowel:\n            vowel_list.append(s)\n    for i in range(len(string)-1,-1,-1):\n        if string[i] in vowel:\n            vowel_list.append(string[i])\n    vowel_list = ''.join(vowel_list)\n    return vowel_list\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1 = str1.lower()\n    str2 = list(str1)\n    vowels_index = []\n    for i, c in enumerate(str2):\n        if c in vowels:\n            vowels_index.append(i)\n    vowels_index.reverse()\n    for i in vowels_index:\n        str2[i] = str2[i].upper()\n    return ''.join(str2)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowel_str1 = ''\n    vowels = 'aeiouAEIOU'\n    \n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_str1 += str1[i]\n        else:\n            vowel_str1 += 'a'\n    \n    return vowel_str1[::-1]\n    \n    "
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    new_str = \"\"\n    for x in str1:\n        if x.lower() not in \"aeiouy\":\n            new_str = new_str + x\n        elif x.lower() == \"y\":\n            new_str = new_str + \"a\"\n        else:\n            new_str = new_str + x.lower()\n    return new_str\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    string = list(str1)\n    i, j = 0, len(string)-1\n    while i < j:\n        if string[i].lower() not in vowels:\n            i += 1\n        elif string[j].lower() not in vowels:\n            j -= 1\n        else:\n            string[i], string[j] = string[j], string[i]\n            i += 1\n            j -= 1\n    return ''.join(string)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    if not str1: return\n    str2 = ''\n    vowels = 'aeiouAEIOU'\n    for char in str1:\n        if char.lower() not in vowels: str2 += char\n        elif char.lower() in vowels: str2 += char[::-1]\n    return str2\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    rev = \"\"\n    for i in str1:\n        if i in vowels:\n            rev = i + rev\n        else:\n            rev = rev + i\n    return rev\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    if tup1==():\n        return \"()\"\n    s=str(tup1)\n    l=list(tup1)\n    for i in range(len(l)):\n        l[i]=str(l[i])\n    for i in range(len(l)):\n        if l[i][0]==\"(\":\n            l[i]=l[i][1:]\n        if l[i][-1]==\")\":\n            l[i]=l[i][:-1]\n        if l[i][-1]==\",\":\n            l[i]=l[i][:-1]\n    s=s[1:-1]\n    return \"(\"+\",\".join(l)+\")\"\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = str(tup1)\n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for x in tup1:\n        string += str(x)\n    return string\n    \ndef tup_string_compressed(tup1):\n    '''\n    Write a function to convert a tuple to a compressed string.\n    '''\n    string = ''\n    while len(tup1) > 1:\n        count = 1\n        for x in range(len(tup1)-1):\n            if tup1[x] == tup1[x+1]:\n                count += 1\n            else:\n                string += str(tup1[x]) + str(count)\n                count = 1\n        if tup1[-1] == tup1[-2]:\n            count += 1\n        string += str(tup1[-1]) + str(count)\n        tup1 = string\n        string = ''\n    return tup1\n    \ndef tup_string_reversed(tup1):\n    '''\n    Write a function to convert a tuple to a string in reversed order.\n    '''\n    string = ''\n    for x in reversed(tup1):\n        string += str(x)\n    return string\n    \ndef tup_string_reversed_compressed(tup1):\n    '''\n    Write a function to convert a tuple to a string in reversed order with no repeated characters.\n    '''\n    string = ''\n    while len(tup1) > 1:\n        count = 1\n        for x in range(len(tup1)-1):\n            if tup1[x] == tup1[x+1]:\n                count += 1\n            else:\n                string += str(tup1[x]) + str(count)\n                count = 1\n        string += str(tup1[-1]) + str(count)\n        tup1 = string\n        string = ''\n    return tup1\n    \ndef tup_string_rotated(tup1):\n    '''\n    Write a function to convert a tuple to a string with each element on a new line.\n    '''\n    string = ''\n    for x in tup1:\n        string += str(x) + '\\n'\n    return string\n    \ndef tup_string_rotated_compressed(tup1):\n    '''\n    Write a function to convert a tuple to a string with each element on a new line with no repeated characters.\n    '''\n    string = ''\n    while len(tup1) > 1:\n        count = 1\n        for x in range(len(tup1)-1):\n            if tup1[x] == tup1[x+1]:\n                count += 1\n            else:\n                string += str(tup1[x]) + str(count)\n                count = 1\n        string += str(tup1[-1]) + str(count)\n        tup1 = string\n        string = ''\n    return tup1\n    \ndef tup_string_rotated_reversed(tup1):\n    '''\n    Write a function to convert a tuple to a string with each element on a new line in reversed order.\n    '''\n    string = ''\n    for x in reversed(tup1):\n        string += str(x) + '\\n'\n    return string\n    \ndef tup_string_rotated_reversed_compressed(tup1):\n    '''\n    Write a function to convert a tuple to a string with each element on a new line with no repeated characters in reversed order.\n    '''\n    string = ''\n    while len(tup1) > 1:\n        count = 1\n        for x in range(len(tup1)-1):\n            if tup1[x] == tup1[x+1]:\n                count += 1\n            else:\n                string += str(tup1[x]) + str(count)\n                count = 1\n        string += str(tup1[-1]) + str(count)\n        tup1 = string\n        string = ''\n    return tup1\n    \ndef tup_string_rotated_reversed_2_compressed(tup1):\n    '''\n    Write a function to convert a tuple to a string with each element on a new line in reversed order with no repeated characters.\n    '''\n    string = ''\n    while len(tup1) > 1:\n        count = 1\n        for x in range(len(tup1)-1):\n            if tup1[x] == tup1[x+1]:\n                count += 1\n            else:\n                string += str(tup1[x]) + str(count)\n                count = 1\n        string += str(tup1[-1]) + str(count)\n        tup1 = string\n        string = ''\n    return tup1\n    \ndef tup_int(tup1):\n    '''\n    Write a function to convert a tuple to a integer.\n    '''\n    string = ''\n    for x in tup1:\n        string += str(x)\n    return int(string)\n    \ndef tup_int_compressed(tup1):\n    '''\n    Write a function to convert a tuple to an integer with no repeated characters.\n    '''\n    string = ''\n    while len(tup1) > 1:\n        count = 1\n        for x in range(len(tup1)-1):\n            if tup1[x] == tup1[x+1]:\n                count += 1\n            else:\n                string += str(tup1[x]) + str(count)\n                count = 1\n        string += str(tup1[-1]) + str(count)\n        tup1 = string\n        string = ''\n    return int(tup1)\n    \ndef tup_int_reversed(tup1):\n    '''\n    Write a function to convert a tuple to an integer in reversed order.\n    '''\n    string = ''\n    for x in reversed(tup1):\n        string += str(x)\n    return int(string)\n    \ndef tup_int_reversed_compressed(tup1):\n    '''\n    Write a function to convert a tuple to an integer in reversed order with no repeated characters.\n    '''\n    string = ''\n    while len(tup1) > 1:\n        count = 1\n        for x in range(len(tup1)-1):\n            if tup1[x] == tup1[x+1]:\n                count += 1\n            else:\n                string += str(tup1[x]) + str(count)\n                count = 1\n        string += str(tup1[-1]) + str(count)\n        tup1 = string\n        string = ''\n    return int(tup1)\n    \ndef tup_int_rotated(tup1):\n    '''\n    Write a function to convert a tuple to an integer with each element on a new line.\n    '''\n    string = ''\n    for x in tup1:\n        string += str(x) + '\\n'\n    return int(string)\n    \ndef tup_int_rotated_compressed(tup1):\n    '''\n    Write a function to convert a tuple to an integer with each element on a new line with no repeated characters.\n    '''\n    string = ''\n    while len(tup1) > 1:\n        count = 1\n        for x in range(len(tup1)-1):\n            if tup1[x] == tup1[x+1]:\n                count += 1\n            else:\n                string += str(tup1[x]) + str(count)\n                count = 1\n        string += str(tup1[-1]) + str(count)\n        tup1 = string\n        string = ''\n    return int(tup1)\n    \ndef tup_int_rotated_reversed(tup1):\n    '''\n    Write a function to convert a tuple to an integer with each element on a new line in reversed order.\n    '''\n    string = ''\n    for x in reversed(tup1):\n        string += str(x) + '\\n'\n    return int(string)\n    \ndef tup_int_rotated_reversed_compressed(tup1):\n    '''\n    Write a function to convert a tuple to an integer with each element on a new line with no repeated characters in reversed order.\n    '''\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    list_of_tups=list(tup1)\n    list_of_tups.sort()\n    str1=''\n    for i in range(len(list_of_tups)):\n        str1+=(str(list_of_tups[i])+' ')\n    str1=str1[:-1]\n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    if type(tup1)!= tuple:\n        raise TypeError('The tuple you entered is not a tuple.')\n    tup_string = ''\n    for items in tup1:\n        tup_string += str(items)\n        tup_string +=''\n    return tup_string\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Your code here\n    str1 = \"\"\n    for i in tup1:\n        str1 += i\n    return str1\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for n in nums:\n        if n < 0:\n            sum += n\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    \n    return sum([i for i in nums if i < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([i for i in nums if i < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_nums = 0\n    for num in nums:\n        if num < 0:\n            sum_nums = sum_nums + num\n    return sum_nums\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            result += nums[i]\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if not nums:\n        return 0\n    return sum([n for n in nums if n < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    s = 0\n    for n in nums:\n        if n < 0:\n            s += n\n    return s\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(filter(lambda x: x < 0, nums))\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonal = 1\n    i = 1\n    while i < n:\n        hexagonal += 2*i*(2*i-1)\n        i += 1\n    return hexagonal\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n + 1)) / 2\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    return (3*n-1)*n/2\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(2*n - 1)) // 2\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_nums = [1]\n    for i in range(1, n):\n        hex_nums.append(hex_nums[i - 1] * 3 + 1)\n    return hex_nums[-1]\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for x in nums:\n        if x == 0:\n            count += 1\n    return count / float(len(nums))\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return str(zeroes / non_zeroes)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count/float(len(nums))\ndef zero_count_2(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return float(nums.count(0)) / len(nums)\ndef longest_run(nums):\n    '''\n    Given an array of integers, find the length of the longest run. \n    In an array of integers, if an integer is the smallest number and if another integer is the largest, \n    that number is the \"middle\" of the array. The function should return the \"middle\".\n    '''\n    count = 0\n    max_count = 0\n    for num in nums:\n        if num > count:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 0\n    max_count = max(max_count, count)\n    return max_count\ndef longest_run_2(nums):\n    '''\n    Given an array of integers, find the length of the longest run. \n    In an array of integers, if an integer is the smallest number and if another integer is the largest, \n    that number is the \"middle\" of the array. The function should return the \"middle\".\n    '''\n    if nums == []:\n        return 0\n    count = 1\n    max_count = 1\n    for i in range(1, len(nums)):\n        if nums[i]!= nums[i-1]:\n            count = 1\n        else:\n            count += 1\n        max_count = max(max_count, count)\n    return max_count\ndef has_duplicates(nums):\n    '''\n    Write a function to determine if the array has any duplicates.\n    '''\n    return len(nums)!= len(set(nums))\ndef has_duplicates_2(nums):\n    '''\n    Write a function to determine if the array has any duplicates.\n    '''\n    if len(nums) == 0:\n        return False\n    nums_set = set()\n    for num in nums:\n        if num in nums_set:\n            return True\n        nums_set.add(num)\n    return False\ndef find_missing_letter(char_list):\n    '''\n    Write a function that takes an array of letters and a character and returns an array of all the indices \n    of the missing letter in the array.\n    '''\n    missing = array('i', [])\n    for i in range(0, len(char_list)):\n        char = char_list[i]\n        if ord(char) < 97:\n            missing.append(i)\n    return missing\ndef find_missing_letter_2(char_list):\n    '''\n    Write a function that takes an array of letters and a character and returns an array of all the indices \n    of the missing letter in the array.\n    '''\n    for i in range(0, len(char_list)):\n        char = char_list[i]\n        if ord(char) < 97:\n            return i\n    return -1\ndef find_missing_letter_3(char_list):\n    '''\n    Write a function that takes an array of letters and a character and returns an array of all the indices \n    of the missing letter in the array.\n    '''\n    missing = []\n    char_list = [char for char in char_list if char!='']\n    for i in range(0, len(char_list)):\n        if ord(char_list[i]) < 97:\n            missing.append(i)\n    return missing\ndef find_missing_letter_4(char_list):\n    '''\n    Write a function that takes an array of letters and a character and returns an array of all the indices \n    of the missing letter in the array.\n    '''\n    missing = []\n    for i in range(0, len(char_list)):\n        if ord(char_list[i]) < 97:\n            missing.append(i)\n    return missing\ndef find_missing_letter_5(char_list):\n    '''\n    Write a function that takes an array of letters and a character and returns an array of all the indices \n    of the missing letter in the array.\n    '''\n    missing = []\n    char_list = [char for char in char_list if char!='']\n    for i in range(97, 123):\n        if chr(i) not in char_list:\n            missing.append(i)\n    return missing\ndef find_missing_letter_6(char_list):\n    '''\n    Write a function that takes an array of letters and a character and returns an array of all the indices \n    of the missing letter in the array.\n    '''\n    missing = []\n    char_list = [char for char in char_list if char!='']\n    for i in range(97, 123):\n        if chr(i) not in char_list:\n            missing.append(i)\n    return missing\ndef reverse_lookup(key, dictionary):\n    '''\n    Write a function that takes a key and a dictionary and returns a value that corresponds to the key if it is in the dictionary.\n    '''\n    for item in dictionary:\n        if item[0] == key:\n            return item[1]\n    return None\ndef reverse_lookup_2(key, dictionary):\n    '''\n    Write a function that takes a key and a dictionary and returns a value that corresponds to the key if it is in the dictionary.\n    '''\n    for item in dictionary:\n        if key == item[0]:\n            return item[1]\n    return None\ndef reverse_lookup_3(key, dictionary):\n    '''\n    Write a function that takes a key and a dictionary and returns a value that corresponds to the key if it is in the dictionary.\n    '''\n    for item in dictionary:\n        if key == item[0]:\n            return item\n    return None\ndef reverse_lookup_4(key, dictionary):\n    '''\n    Write a function that takes a key and a dictionary and returns a value that corresponds to the key if it is in the dictionary.\n    '''\n    for item in dictionary:\n        if key == item:\n            return dictionary[item]\n    return None\ndef reverse_lookup_5(key, dictionary):\n    '''\n    Write a function that takes a key and a dictionary and returns a value that corresponds to the key if it is in the dictionary.\n    '''\n    for item in dictionary:\n        if item[0] == key:\n            return item[1]\n    return None\ndef reverse_lookup_6(key, dictionary):\n    '''\n    Write a function that takes a key and a dictionary and returns a value that corresponds to the key if it is in the dictionary.\n    '''\n    for item in dictionary:\n        if item[0] == key:\n            return item\n    return None\ndef reverse_lookup_7(key, dictionary):\n    '''\n    Write a function that takes a key and a dictionary and returns a value that corresponds to the key if it is in the dictionary.\n    '''\n    for item in dictionary:\n        if key == item:\n            return dictionary[item]\n    return None\ndef reverse_lookup_8(key, dictionary):\n    '''\n    Write a function that takes a key and a dictionary and returns a value that corresponds to the key if it is in the dictionary.\n    '''\n    for item in dictionary:\n        if key == item[0]:\n            return item[1]\n    return None\ndef reverse_lookup_9(key, dictionary):\n    '''\n    Write a function that takes a key and a dictionary and returns a value that corresponds to the key if it is in the dictionary.\n    '''\n    for item in dictionary:\n        if key == item[0]:\n            return item[1]\n    return None\ndef reverse_lookup_10(key, dictionary):\n    '''\n    Write a function that takes a key and a dictionary and returns a value that corresponds to the key if it is in the dictionary.\n    '''\n    for item in dictionary:\n        if key == item:\n            return dictionary[item]\n    return None\ndef reverse_lookup_11(key, dictionary):\n    '"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n    return float(zeros) / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_of_zeros, num_of_ones = 0, 0\n    for i in nums:\n        if i == 0:\n            num_of_zeros += 1\n        else:\n            num_of_ones += 1\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeroes = 0\n    for i in nums:\n        if i == 0:\n            num_zeroes += 1\n    return num_zeroes / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return nums.count(0) / float(len(nums))\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return len([num for num in nums if num == 0]) / float(len(nums))\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for item in nums:\n        if item == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    counter = 0\n    for n in nums:\n        if n == 0:\n            counter += 1\n    return counter / float(len(nums))\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n & 1 == 0:\n        return is_Sum_Of_Powers_Of_Two(n >> 1)\n    if n & 1:\n        return is_Sum_Of_Powers_Of_Two(n - 1)\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    ## if n==0:\n    ##     return True\n    ## elif n==1:\n    ##     return False\n    ## i = 0\n    ## while n:\n    ##     if n%2:\n    ##         return False\n    ##     else:\n    ##         n /= 2\n    ## return True\n    \n    if not n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    else:\n        s = str(bin(n))[2:]\n        return s.count('1') == 1 and s.count('0') % 2 == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            print (n, 'is Sum of Powers of 2')\n            break\n        i = i + 1\n    else:\n        print (n, 'is not Sum of Powers of 2')\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    m = n\n    if n < 0:\n        n = -n\n    while n:\n        if n & 1:\n            return False\n        n >>= 1\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n & (n-1) == 0:\n        return False\n    while n!= 0:\n        if n & 1 == 0:\n            n >>= 1\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    n=int(n)\n    i=0\n    while (n):\n        if (n & 1) == 1:\n            return False\n        i=i+1\n        n=n>>1\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    t=n\n    s=0\n    while t!=0:\n        if t&1==1:\n            s=s+1\n        t=t>>1\n    if s==0:\n        return True\n    else:\n        return False\n    \n    \ndef find_f(n): \n    '''\n    Write a python function to check whether the given number can be represented as a product of two prime numbers or not.\n    '''\n    if n==1:\n        return True\n    if n<1:\n        return False\n    if n==2:\n        return True\n    if n>2 and n%2==0:\n        return False\n    for x in xrange(3,n,2):\n        if n%x==0:\n            return False\n    return True\n    \n    \ndef count_digits(n): \n    '''\n    Write a python function to return the number of digits in the given number.\n    '''\n    if n==0:\n        return 1\n    count=0\n    while n!=0:\n        n=n//10\n        count=count+1\n    return count\n    \n    \ndef is_power_of_two(n): \n    '''\n    Write a python function to check whether the given number can be represented as a power of two or not.\n    '''\n    t=n\n    s=0\n    while t!=0:\n        if t&1==1:\n            s=s+1\n        t=t>>1\n    if s==0:\n        return True\n    else:\n        return False\n    \n    \ndef find_maximum_product(n): \n    '''\n    Write a python function to find the maximum product of three numbers whose digits are consecutive digits in the given number.\n    '''\n    if n==0:\n        return 0\n    while n>0:\n        r=n%10\n        n=n//10\n        if r>=2 and r<=9:\n            return r*r*r\n    \n    \ndef check_palindrome(n): \n    '''\n    Write a python function to check whether the given number is a palindrome or not.\n    '''\n    n1=n\n    n=0\n    while n1!=0:\n        n=n*10+n1%10\n        n1=n1//10\n    return n==n//10\n    \n    \ndef number_to_string(n): \n    '''\n    Write a python function to convert the given number to string representation.\n    '''\n    s=''\n    while n!=0:\n        s=s+str(n%10)\n        n=n//10\n    return s\n    \n    \ndef print_factors(n): \n    '''\n    Write a python function to print the factors of the given number.\n    '''\n    for x in xrange(1,n+1):\n        if n%x==0:\n            print x,\n    print \"\"\n    \n    \ndef is_prime(n): \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n==2:\n        return True\n    if n<2 or n%2==0:\n        return False\n    for x in xrange(3,n,2):\n        if n%x==0:\n            return False\n    return True\n    \n    \ndef find_factors(n): \n    '''\n    Write a python function to find the factors of the given number.\n    '''\n    f=[]\n    for x in xrange(1,n+1):\n        if n%x==0:\n            f.append(x)\n    return f\n    \n    \ndef find_fraction(n): \n    '''\n    Write a python function to return the simplified fraction of the given number.\n    '''\n    if n==0:\n        return \"0/1\"\n    s=number_to_string(n)\n    s1=''\n    flag=0\n    for x in s:\n        if x=='/':\n            flag=1\n        if flag==0:\n            s1=s1+x\n    return s1\n    \n    \ndef is_factor(n,x): \n    '''\n    Write a python function to check whether the given number can be divisible by the given number or not.\n    '''\n    if n%x==0:\n        return True\n    else:\n        return False\n    \n    \ndef is_power(n): \n    '''\n    Write a python function to check whether the given number can be a power or not.\n    '''\n    if n==1:\n        return True\n    if n==0:\n        return False\n    r=1\n    while n!=0:\n        n=n//10\n        r=r*10\n    if r==n:\n        return True\n    else:\n        return False\n    \n    \ndef is_digit(n): \n    '''\n    Write a python function to check whether the given number can be a digit or not.\n    '''\n    if n>=0 and n<=9:\n        return True\n    else:\n        return False\n    \n    \ndef is_odd(n): \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if n%2==0:\n        return False\n    else:\n        return True\n    \n    \ndef is_even(n): \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False\n    \n    \ndef find_maximum(n,x,y): \n    '''\n    Write a python function to return the maximum of the two numbers.\n    '''\n    if n<x:\n        return n\n    if n<y:\n        return n\n    else:\n        return y\n    \n    \ndef is_permutation(n,m): \n    '''\n    Write a python function to check whether the given numbers are permutations or not.\n    '''\n    if n==m:\n        return True\n    if len(str(n))!=len(str(m)):\n        return False\n    s=''\n    while n!=0:\n        s=s+str(n%10)\n        n=n//10\n    s1=''\n    while m!=0:\n        s1=s1+str(m%10)\n        m=m//10\n    if s==s1:\n        return True\n    else:\n        return False\n    \n    \ndef find_next_power_of_2(n): \n    '''\n    Write a python function to find the next power of two.\n    '''\n    return 2**n\n    \n    \ndef count_digits(n): \n    '''\n    Write a python function to return the number of digits in the given number.\n    '''\n    if n==0:\n        return 1\n    count=0\n    while n!=0:\n        n=n//10\n        count=count+1\n    return count\n    \n    \ndef count_n(n): \n    '''\n    Write a python function to return the number of numbers from 0 to n which are divisible by 3.\n    '''\n    c=0\n    for x in xrange(0,n+1):\n        if x%3==0:\n            c=c+1\n    return c\n    \n    \ndef count_n2(n): \n    '''\n    Write a python function to return the number of numbers from 0 to n which are divisible by 3 and also are multiples of 5.\n    '''\n    c=0\n    for x in xrange(0,n+1):\n        if x%3==0 and x%5==0:\n            c=c+1\n    return c\n    \n    \ndef count_n3(n): \n    '''\n    Write a python function to return the number of numbers from 0 to n which are divisible by 3 or also are multiples of 5.\n    '''\n    c=0\n    for x in xrange(0,n+1):\n        if x%3==0 or x%5==0:\n            c=c+1\n    return "
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 0:\n        n = -n\n    while n >= 1:\n        if n%2!= 0:\n            return False\n        n = n/2\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0:\n        return True\n    else:\n        while n>0:\n            if n&1==1:\n                return False\n            else:\n                n=n>>1\n        return True\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 3.14 * r * 2\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return r * 2 * PI\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2 * pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return math.pi * r * 2\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return (4*math.pi*r)\n    "
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return pi * r * 2\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set(itertools.chain(*test_list))\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    total = set()\n    for i in test_list:\n        if type(i) is int or type(i) is float:\n            total.add(i)\n        else:\n            for j in i:\n                total.add(j)\n    return sorted(list(total))\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = [item for sublist in test_list for item in sublist]\n    return flat_list\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if isinstance(test_list, list):\n        if not test_list:\n            return []\n        elif isinstance(test_list[0], list):\n            return extract_singly(test_list[0]) + extract_singly(test_list[1:])\n        else:\n            return extract_singly([test_list[0]]) + extract_singly(test_list[1:])\n    else:\n        return []\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    test_list = test_list[0]\n    return [item for sublist in test_list for item in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return_list = []\n    for l in test_list:\n        return_list += l\n    return return_list\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set(list(chain.from_iterable(test_list)))\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return list(chain(*test_list))\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    sorted_nums = nums.copy()\n    for i in range(n//2):\n        j = n-1-i\n        if j > i:\n            temp = sorted_nums[i]\n            sorted_nums[j] = sorted_nums[j-1]\n            sorted_nums[j-1] = temp\n        else:\n            break\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums),1,-1):\n        #print(i)\n        max_j = 0\n        for j in range(1,i):\n            if nums[j] > nums[max_j]:\n                max_j = j\n        if max_j > 0:\n            nums[0:i] = nums[:i][::-1]\n            nums[max_j:i] = nums[:i][::-1]\n            nums[0:max_j] = nums[:max_j][::-1]\n            nums[:i] = nums[:i][::-1]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if nums is None or len(nums) == 0:\n        return nums\n    max_index = len(nums)-1\n    while max_index > 0:\n        max_index = find_max_index(nums, max_index)\n        if max_index == len(nums)-1:\n            return nums\n        swap(nums, 0, max_index)\n        print(nums)\n        flip(nums, 0, max_index)\n        print(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums), 1, -1):\n        max_index = index_max(nums, i)\n        if max_index!= i-1:\n            nums = flip_list(nums, max_index+1, i)\n            nums = flip_list(nums, 1, max_index)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        k = i\n        while k >= 0:\n            if nums[k] > nums[k-1]:\n                nums[k], nums[k-1] = nums[k-1], nums[k]\n                k -= 2\n            else:\n                break\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def reverse(nums, start, end):\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n    \n    # len(nums) >= 2\n    def flip(nums, start, end):\n        if start == end:\n            return\n        \n        if nums[start] > nums[end]:\n            return\n        \n        nums[start], nums[end] = nums[end], nums[start]\n        \n        for i in range(start, end):\n            if nums[i] > nums[end]:\n                nums[i], nums[end] = nums[end], nums[i]\n                flip(nums, start, i - 1)\n    \n    # len(nums) >= 2\n    def flip_sort(nums):\n        if len(nums) == 1:\n            return\n        \n        # split point\n        for i in range(len(nums) - 1):\n            if nums[i] > nums[i + 1]:\n                flip(nums, i, len(nums) - 1)\n                flip_sort(nums)\n                flip(nums, i, len(nums) - 1)\n                \n        # when all elements are smaller than their next ones,\n        # reverse the whole list\n        reverse(nums, 0, len(nums) - 1)\n        \n        return\n    \n    flip_sort(nums)\n    \n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if nums is None or len(nums) == 0:\n        return []\n    start_idx, end_idx = 0, len(nums) - 1\n    while start_idx < end_idx:\n        if nums[start_idx] == end_idx + 1:\n            start_idx += 1\n            continue\n        if nums[start_idx] > nums[end_idx]:\n            nums[start_idx], nums[end_idx] = nums[end_idx], nums[start_idx]\n            end_idx -= 1\n        else:\n            break\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums) - 1, 0, -1):\n        max_val = 0\n        for j in range(0, i + 1):\n            if nums[j] > max_val:\n                max_val = nums[j]\n                max_ind = j\n        nums[max_ind], nums[i] = nums[i], nums[max_ind]\n        for j in range(0, i):\n            if nums[j] > nums[i]:\n                nums[j], nums[i] = nums[i], nums[j]\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in xrange(len(nums)-1, 0, -1):\n        max_idx = 0\n        for j in xrange(1, i+1):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        if max_idx!= i:\n            nums[i], nums[max_idx] = nums[max_idx], nums[i]\n            nums[:i] = nums[i-1::-1]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    nums_len = len(nums)\n    for i in range(nums_len - 1, 0, -1):\n        for j in range(0, i):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    result=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            result=result+1\n    return result\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for item1,item2,item3 in zip(list1,list2,list3):\n        if item1 == item2 and item2 == item3:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            for k in range(0,len(list3)):\n                if list1[i]==list2[j]==list3[k]:\n                    count=count+1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for index in range(len(list1)):\n        if list1[index] == list2[index]:\n            if list3[index] == list2[index]:\n                count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    total_count=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i]==list2[j]==list3[k]:\n                    total_count+=1\n    return total_count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    def count_samepair_aux(list1,list2,list3,count):\n        if len(list1) == 0 and len(list2) == 0 and len(list3) == 0:\n            return count\n        elif list1[0] == list2[0] and list2[0] == list3[0]:\n            count += 1\n            return count_samepair_aux(list1[1:], list2[1:], list3[1:], count)\n        elif list1[0] == list2[0] and list3[0] == list2[0]:\n            count += 1\n            return count_samepair_aux(list1[1:], list2[1:], list3[1:], count)\n        elif list1[0] == list3[0] and list2[0] == list3[0]:\n            count += 1\n            return count_samepair_aux(list1[1:], list2[1:], list3[1:], count)\n        else:\n            return count_samepair_aux(list1[1:], list2[1:], list3[1:], count)\n    return count_samepair_aux(list1,list2,list3,0)\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    def _find_lists(Input):\n        # Base case\n        if not Input:\n            return 0\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    list_counter = 0\n    for i in Input:\n        if isinstance(i, list):\n            list_counter += 1\n    return list_counter\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    i = 0\n    l = 0\n    while i < len(Input):\n        if type(Input[i]) is list:\n            l = l + 1\n        i = i + 1\n    return l\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_count = 0\n    if len(Input) < 1:\n        return 0\n    if type(Input) == tuple:\n        for i in Input:\n            if type(i) == list:\n                list_count += 1\n    return list_count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return Input.count(tuple)\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return (input.count(()) - 1)\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    tup = tuple(Input)\n    count = 0\n    for i in tup:\n        if isinstance(i,list):\n            count+=1\n    return count\n    "
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input) - Input.count(())\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    max_diff = arr[1] - arr[0]\n    for i in range(1, n):\n        if abs(arr[i] - arr[i-1]) > max_diff:\n            max_diff = abs(arr[i] - arr[i-1])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(abs(arr[i] - arr[i+1]) for i in range(len(arr)-1))\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max([abs(arr[i] - arr[i+1]) for i in range(len(arr)-1)])\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if arr == []:\n        return 0\n    else:\n        min_val = arr[0]\n        max_val = arr[0]\n        for item in arr:\n            if item < min_val:\n                min_val = item\n            if item > max_val:\n                max_val = item\n        return max_val - min_val\n        \ndef min_Diff(arr):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    if arr == []:\n        return 0\n    else:\n        min_val = arr[0]\n        max_val = arr[0]\n        for item in arr:\n            if item < min_val:\n                min_val = item\n            if item > max_val:\n                max_val = item\n        return max_val - min_val\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    max_diff = arr[1] - arr[0]\n    for i in range(0,len(arr)-1):\n        diff = arr[i+1] - arr[i]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(abs(arr[i]-arr[i+1]) for i in range(len(arr)-1))\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if arr == []:\n        return 0\n    arr.sort()\n    return abs(arr[0] - arr[-1])\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs_diff = arr[1] - arr[0]\n    for i in range(0,len(arr)-1):\n        if abs(arr[i]-arr[i+1]) > max_abs_diff:\n            max_abs_diff = abs(arr[i]-arr[i+1])\n    return max_abs_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1] - arr[0]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) == 1:\n        return None\n    else:\n        return max(abs(arr[0] - arr[1]), max_Abs_Diff(arr[1:]))\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    solutions = []\n    if (n - a * b) % a == 0:\n        x = (n - a * b) // a\n        solutions.append((x, b))\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        return [n/a, None]\n    elif a == 0:\n        return [None, n/b]\n    else:\n        q, r = divmod(n, a)\n        x = q + b*(r/a)\n        y = r - b*(r/a)\n        return [x, y]\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if x*a + y*b == n:\n                return (x, y)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        y = (n - a * x) / b\n        if y.is_integer():\n            return (x, y)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n + 1):\n        for y in range(1, n + 1):\n            if a * x + b * y == n:\n                return (x, y)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # If a = 0, we have a solution\n    if a == 0:\n        return (n/b, 0)\n    # We have no solution if b is 0\n    if b == 0:\n        return None\n    # We have a solution if a is positive and b is negative\n    if a > 0 and b < 0:\n        return (n/a, -n/b)\n    # We have no solution if a is negative and b is positive\n    if a < 0 and b > 0:\n        return (-n/a, n/b)\n    # We have no solution if a is negative and b is negative\n    if a < 0 and b < 0:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    s = n - b\n    t = a - s\n    if t % 2 == 0:\n        x = s\n        y = t / 2\n    else:\n        x = s + 1\n        y = t / 2 + 1\n    return (x, y)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n % a == 0:\n        return 0, n/a\n    if b * (n/a) % a == 1:\n        return a, n/a\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    def find_solution_recursive(a, b, n, seen, solutions, total, x, y, i, j):\n        # if a = 0, we have reached the end of the list\n        if a == 0:\n            # if we have seen all solutions\n            if i == len(seen):\n                # if we have a solution\n                if total == n:\n                    # store the solution\n                    solutions.append((x, y))\n                    return\n                else:\n                    # no solution\n                    return\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    a, b, n = int(a), int(b), int(n)\n    for x in xrange(a, n/b + 1):\n        if (a*x + b*n) % n == 0:\n            return (x, n/b)\n    return None\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        list1.remove(item)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list2)):\n        list1.remove(list2[i])\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        for j in list1:\n            if i == j:\n                list1.remove(j)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for i in list1:\n        if i not in list2:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return sum_series(n-2) + sum_series(n//2)\n    else:\n        return sum_series(n-2) - sum_series(n//2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + sum(range(n//2))\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n if n < 0 else sum_series(n-2) + n\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    if n % 2 == 1:\n        return (n + 1) * n // 2\n    else:\n        return (n + 1) * n // 2 + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + sum_series(n - 2) + sum_series(n - 4)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n - 2)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*l/2.0)*(s/2.0)*(1.0/tan(pi/s))\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*(l**2)/(4*tan(pi/s)));\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*l)/tan(pi/l)\n    \ndef area_triangle(b, h):\n    '''\n    Write a function to calculate the area of a triangle given the base and height of the triangle.\n    '''\n    return (b*h)/2\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*l/2) * (tan(pi/s))**2\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s < 3:\n        return 0\n    else:\n        return (0.25 * s * l**2) / tan(pi/s)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25*s*l) * tan((0.5*pi)/s)\n    print area\n    return area\narea_polygon(5, 10)\narea_polygon(8, 10)\narea_polygon(5, 1)\narea_polygon(5, 0)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = 0\n    for i in range(1,l):\n        a += s*(tan(pi/l))**2\n    a = s*(tan(pi/l))**2 / (4 * tan(pi/l))\n    return a\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    #Basic case where s is a float\n    if isinstance(s, float):\n        return (s*s)/(4*tan(pi/s))\n    #Basic case where s is an int\n    elif isinstance(s, int):\n        return s*s/4\n    #Basic case where s is a list\n    elif isinstance(s, list):\n        return s*s/4\n    #Basic case where s is a string\n    elif isinstance(s, str):\n        return s*s/4\n    #None of the above cases, raise ValueError\n    else:\n        raise ValueError(\"Polygon must be given length, number of sides, or list of length\")\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if (s <= 0) or (l <= 0):\n        return 0\n    return l * s * (s-2 * tan(pi / s)) / 2\ndef can_construct(target, words):\n    '''\n    Given a target word, and a list of words, write a function that returns a list of all the words that the\n    target can be constructed from the list of words.\n    '''\n    if target == '':\n        return [[]]\n    res = []\n    for word in words:\n        if target.startswith(word):\n            suffix = target[len(word):]\n            suffix_res = can_construct(suffix, words)\n            for sub_res in suffix_res:\n                res.append([word] + sub_res)\n    return res\ndef num_diff_bits(x, y):\n    '''\n    Write a function to count the number of different bits between two numbers.\n    '''\n    count = 0\n    while (x):\n        if (x & 1)!= (y & 1):\n            count += 1\n        x = x >> 1\n        y = y >> 1\n    return count\ndef check_permutation(s1, s2):\n    '''\n    Write a function that takes in two strings and returns a bool representing whether the two strings are permutations of one another.\n    Two strings are said to be permutations of one another if the first string's characters can be rearranged to the second's characters,\n    ignoring upper- and lower-case differences (in other words, the characters must be the same, but in different cases).\n    For example, \"abcd\" and \"dcba\" are permutations of one another, but \"abcd\" and \"Abcd\" are not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    dict1 = {}\n    dict2 = {}\n    for i in range(len(s1)):\n        if s1[i] not in dict1:\n            dict1[s1[i]] = 1\n        else:\n            dict1[s1[i]] += 1\n    for j in range(len(s2)):\n        if s2[j] not in dict2:\n            dict2[s2[j]] = 1\n        else:\n            dict2[s2[j]] += 1\n    if (dict1 == dict2):\n        return True\n    return False\ndef power_set(s):\n    '''\n    Write a function that takes in a non-empty string and returns a power set of the string.\n    '''\n    if len(s) == 0:\n        return [[]]\n    res = []\n    for i in range(len(s)):\n        for j in power_set(s[i+1:]):\n            res.append([s[i]] + j)\n    return res\ndef power_set_bitwise(s):\n    '''\n    Write a function that takes in a non-empty string and returns a power set of the string, using bitwise operators.\n    '''\n    if len(s) == 0:\n        return [[]]\n    res = []\n    for i in range(2 ** len(s)):\n        temp = []\n        for j in range(len(s)):\n            if (i & 1 << j):\n                temp.append(s[j])\n        res.append(temp)\n    return res\ndef word_break(s, word_dict):\n    '''\n    Write a function that takes in a non-empty string and a set of words, and returns True if the string can be\n    segmented into one or more dictionary words, and False otherwise.\n    '''\n    if len(s) == 0:\n        return True\n    for word in word_dict:\n        if s[:len(word)] == word:\n            if word_break(s[len(word):], word_dict):\n                return True\n    return False\ndef check_numerical_ordering(s1, s2):\n    '''\n    Write a function that takes in two strings and returns True if the first string is lexicographically greater than the second,\n    and False otherwise.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    if (s1 > s2):\n        return True\n    return False\ndef check_is_palindrome(s):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome, and False otherwise.\n    '''\n    if (s == s[::-1]):\n        return True\n    return False\ndef check_is_matrix_rotation(m1, m2):\n    '''\n    Write a function that takes in two matrices and returns True if the first matrix is a rotation of the second matrix, and False otherwise.\n    '''\n    if len(m1)!= len(m2):\n        return False\n    if len(m1[0])!= len(m2[0]):\n        return False\n    # Convert to tuple\n    m1 = tuple(tuple(e) for e in m1)\n    m2 = tuple(tuple(e) for e in m2)\n    # Check each column\n    for i in range(len(m1[0])):\n        if (m1[0][i]!= m2[0][i]):\n            return False\n    # Check each row\n    for i in range(1, len(m1)):\n        if (m1[i][0]!= m2[i][0]):\n            return False\n    # Check each element\n    for i in range(len(m1)):\n        for j in range(len(m1[0])):\n            if (m1[i][j]!= m2[i][j]):\n                return False\n    # All tests passed, so matrix is rotation\n    return True\ndef check_is_permutation(s1, s2):\n    '''\n    Write a function that takes in two strings and returns True if the first string is a permutation of the second string, and False otherwise.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    dict1 = {}\n    dict2 = {}\n    for i in range(len(s1)):\n        if s1[i] not in dict1:\n            dict1[s1[i]] = 1\n        else:\n            dict1[s1[i]] += 1\n    for j in range(len(s2)):\n        if s2[j] not in dict2:\n            dict2[s2[j]] = 1\n        else:\n            dict2[s2[j]] += 1\n    if (dict1 == dict2):\n        return True\n    return False\ndef check_is_valid_string(s):\n    '''\n    Write a function that takes in a string and returns True if it is a valid string, and False otherwise.\n    A valid string has the following characteristics:\n    - It is a string consisting of only lowercase letters.\n    - It is not the empty string.\n    - It is not the string consisting of just one letter.\n    - It does not start or end with a white space.\n    - It is made up of at least three distinct letters, and at least one letter that shows up more than once.\n    '''\n    if (len(s) <= 1):\n        return False\n    if (s.isdigit()):\n        return False\n    count = {}\n    for c in s:\n        if c in count:\n            count[c] += 1\n        else:\n            count[c] = 1\n    # Check for more than one character with count == 1\n    for c in count:\n        if (count[c] == 1):\n            continue\n        return False\n    # Check for a white space at the beginning or end\n    if s[0] =='' or s[-1] =='':\n        return False\n    return True\ndef count_bits(n):\n    '''\n    Write a function that takes in an integer and returns the number of bits set to 1 in its binary representation.\n    '''\n    count = 0\n    while (n):\n        count += n & 1\n        n = n >> 1\n    return count\ndef min_score_tournament(scores):\n    '''\n    Write a function that takes in a list of tuples representing players and returns the player that has the minimum win-lose-draw record.\n    The win-lose-draw record is calculated by takin"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.5*s*l)\n    return area\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s=set()\n    for i in range(2,n):\n        if n%i==0:\n            s.add(i)\n            s.add(int(n/i))\n    if len(s)==1:\n        return True\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # n = int(input(\"Enter a number: \"))\n    if n == 1:\n        return False\n    sqrt_n = int(math.sqrt(n))\n    divisors = []\n    for i in range(1,sqrt_n+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n//i)\n    summ = sum(divisors)\n    print(divisors)\n    if summ == n:\n        return True\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum1 = 0\n    for i in range(1, math.floor(math.sqrt(n)) + 1):\n        if n % i == 0:\n            sum1 += i\n            sum1 += n / i\n    return sum1 == n\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n % 2 == 0: \n        div = [2]\n        t = 3 \n        while t < n: \n            if n % t == 0: \n                div.append(t)\n                t += 2\n        if sum(div) == n: \n            return True\n        else: \n            return False\n    else: \n        div = [1]\n        t = 3 \n        while t < n: \n            if n % t == 0: \n                div.append(t)\n                t += 2\n        if sum(div) == n: \n            return True\n        else: \n            return False\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    res = set()\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            res.add(i)\n            res.add(n/i)\n    return sum(res) == n\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n <= 0:\n        return \"invalid input\"\n    else:\n        divs = []\n        for x in range(1,n):\n            if n % x == 0:\n                divs.append(x)\n        return sum(divs)\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0 or n == 1: \n        return True \n    sum_divisors = 0 \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            if i == n/i: \n                sum_divisors += i \n            else: \n                sum_divisors += i + n/i \n    return sum_divisors == n\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum1=0\n    sum2=0\n    i=1\n    while i<=n:\n        if n%i==0:\n            sum1=sum1+i\n        i=i+1\n    j=1\n    while j<=sum1:\n        if sum1%j==0:\n            sum2=sum2+j\n        j=j+1\n    if sum1==sum2:\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divs1 = []\n    divs2 = []\n    i = 1\n    while i <= int(math.sqrt(n)):\n        if n % i == 0:\n            divs1.append(i)\n            if i!= n/i:\n                divs1.append(n/i)\n        i += 1\n    s = 0\n    for d in divs1:\n        s += d\n    divs1.append(s)\n    s = 0\n    i = 1\n    while i <= int(math.sqrt(n)):\n        if n % i == 0:\n            divs2.append(i)\n            if i!= n/i:\n                divs2.append(n/i)\n        i += 1\n    s = 0\n    for d in divs2:\n        s += d\n    divs2.append(s)\n    if divs1 == divs2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return sum_divisors(n) == n/2 \n    \ndef sum_divisors(n): \n    return sum([i for i in range(1, int(math.sqrt(n))+1) if n%i==0]) \n    \ndef prime_divisors(n): \n    '''\n    Write a function to determine the number of prime divisors of an integer.\n    '''\n    prime = [2,3,5,7] \n    count = 0 \n    for i in prime: \n        if n%i==0: \n            count += 1 \n    return count \n    \ndef perfect_square(n): \n    '''\n    Write a function to determine if an integer is a perfect square.\n    '''\n    return n**0.5 == int(n**0.5) \n    \ndef repeat_div(n): \n    '''\n    Write a function to determine if a number has a repeating divisor.\n    '''\n    for i in range(2,int(n**0.5)+1): \n        if n%i==0: \n            return True \n    return False \n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    str1 = str1.lower()\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    char_dict = {}\n    for i in range(len(alpha)):\n        char_dict[alpha[i]] = alpha[i]\n    \n    for i in str1:\n        if i in char_dict:\n            char_dict[i] += 1\n    \n    return char_dict\n    \n    \ndef count_char_position_sorted(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive) and sort them in ascending order.\n    '''\n    str1 = str1.lower()\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    char_dict = {}\n    for i in range(len(alpha)):\n        char_dict[alpha[i]] = alpha[i]\n    \n    for i in str1:\n        if i in char_dict:\n            char_dict[i] += 1\n    \n    char_list = sorted(char_dict.items(), key = lambda x:x[1])\n    for i in char_list:\n        print i\n    \n    \ndef count_char_position_sorted_desc(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive) and sort them in descending order.\n    '''\n    str1 = str1.lower()\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    char_dict = {}\n    for i in range(len(alpha)):\n        char_dict[alpha[i]] = alpha[i]\n    \n    for i in str1:\n        if i in char_dict:\n            char_dict[i] += 1\n    \n    char_list = sorted(char_dict.items(), key = lambda x:x[1], reverse = True)\n    for i in char_list:\n        print i\n    \n    \ndef count_char_position_unique(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive) and remove them from the string.\n    '''\n    str1 = str1.lower()\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    char_dict = {}\n    for i in range(len(alpha)):\n        char_dict[alpha[i]] = alpha[i]\n    \n    for i in str1:\n        if i in char_dict:\n            char_dict[i] += 1\n    \n    char_list = []\n    for i in char_dict:\n        if char_dict[i] == 1:\n            char_list.append(i)\n    \n    for i in char_list:\n        str1 = str1.replace(i, '')\n    \n    return str1\n    \n    \ndef count_char_position_unique_sorted(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive) and remove them from the string and sort them in ascending order.\n    '''\n    str1 = str1.lower()\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    char_dict = {}\n    for i in range(len(alpha)):\n        char_dict[alpha[i]] = alpha[i]\n    \n    for i in str1:\n        if i in char_dict:\n            char_dict[i] += 1\n    \n    char_list = []\n    for i in char_dict:\n        if char_dict[i] == 1:\n            char_list.append(i)\n    \n    for i in char_list:\n        str1 = str1.replace(i, '')\n    \n    char_list = sorted(char_dict.items(), key = lambda x:x[1])\n    for i in char_list:\n        print i\n    \n    \ndef count_char_position_unique_sorted_desc(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive) and remove them from the string and sort them in descending order.\n    '''\n    str1 = str1.lower()\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    char_dict = {}\n    for i in range(len(alpha)):\n        char_dict[alpha[i]] = alpha[i]\n    \n    for i in str1:\n        if i in char_dict:\n            char_dict[i] += 1\n    \n    char_list = []\n    for i in char_dict:\n        if char_dict[i] == 1:\n            char_list.append(i)\n    \n    for i in char_list:\n        str1 = str1.replace(i, '')\n    \n    char_list = sorted(char_dict.items(), key = lambda x:x[1], reverse = True)\n    for i in char_list:\n        print i\n    \n    \ndef get_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    char_dict = {}\n    for i in range(len(alpha)):\n        char_dict[alpha[i]] = alpha[i]\n    \n    for i in str1:\n        if i in char_dict:\n            char_dict[i] += 1\n    \n    for i in char_dict:\n        print '%s: %d' % (i, char_dict[i])\n    \n    \ndef get_char_position_sorted(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive) and sort them in ascending order.\n    '''\n    str1 = str1.lower()\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    char_dict = {}\n    for i in range(len(alpha)):\n        char_dict[alpha[i]] = alpha[i]\n    \n    for i in str1:\n        if i in char_dict:\n            char_dict[i] += 1\n    \n    char_list = sorted(char_dict.items(), key = lambda x:x[1])\n    for i in char_list:\n        print '%s: %d' % (i[0], i[1])\n    \n    \ndef get_char_position_sorted_desc(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive) and sort them in descending order.\n    '''\n    str1 = str1.lower()\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    char_dict = {}\n    for i in range(len(alpha)):\n        char_dict[alpha[i]] = alpha[i]\n    \n    for i in str1:\n        if i in char_dict:\n            char_dict[i] += 1\n    \n    char_list = sorted(char_dict.items(), key = lambda x:x[1], reverse = True)\n    for i in char_list:\n        print '%s: %d' % (i[0], i[1])\n    \n    \ndef get_char_position_unique(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive) and remove them from the string.\n    '''\n    str1 = str1.lower()\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    char_dict = {}\n    for i in range(len(alpha)):"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for char in str1:\n        if char.lower() in alphabet and alphabet.lower().index(char.lower()) == ord(char)-97:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    str1 = str1.lower()\n    n_count = 0\n    for char in alphabet:\n        if char in str1:\n            n_count += str1.count(char)\n    return n_count\n    \n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    count = 0\n    for i in range(0, 26):\n        if str1[i] == str1[i].upper():\n            count = count + 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count_char_position = {}\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    import string\n    str1 = str1.lower()\n    dict1 = {}\n    for char in string.ascii_lowercase:\n        dict1[char] = str1.count(char)\n    print(dict1)\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    n_list = []\n    for i in range(len(str1)):\n        n_list.append(str1.count(str1[i]))\n    return n_list\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return sum(1 for chr1, chr2 in zip(str1, string.ascii_lowercase) if chr1 == chr2)\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # frequency_dict = {}\n    # for i in string.ascii_lowercase:\n    #     frequency_dict[i] = str1.lower().count(i)\n    # return frequency_dict\n    return [str1.lower().count(i) for i in string.ascii_lowercase]\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = {}\n    for i in range(len(str1)):\n        if str1[i] in count:\n            count[str1[i]] += 1\n        else:\n            count[str1[i]] = 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_pairs += 1\n    return even_pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #b = A[0] ^ A[1]\n    #B = [b]\n    #for i in range(2,len(A)):\n        #b = A[i] ^ B[i-1]\n        #B.append(b)\n    #count = 0\n    #for i in range(0,len(A)-1):\n        #if B[i] == B[i+1]:\n            #count = count + 1\n    #return count\n    #count = 0\n    #for i in range(0,len(A)-1):\n        #if A[i] ^ A[i+1]%2 == 0:\n            #count = count + 1\n    #return count\n    count = 0\n    for i in range(0,len(A)):\n        for j in range(i+1,len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    if len(A) < 2:\n        return count\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if ((A[i] ^ A[j]) & 1) == 0:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    print(A)\n    i = 0\n    j = len(A) - 1\n    count = 0\n    while i < j:\n        if A[i] ^ A[j] == 0:\n            count += 1\n            i += 1\n            j -= 1\n        elif A[i] ^ A[j] == 1:\n            j -= 1\n        elif A[i] ^ A[j] == -1:\n            i += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    B = [x ^ 1 for x in A]\n    C = [0 for x in range(len(B))]\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    return len([x for x in A if x & 1 == 0])\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    Pairs = 0\n    N = len(A)\n    for i in xrange(N):\n        for j in xrange(i, N):\n            if (A[i] ^ A[j]) % 2 == 0:\n                Pairs += 1\n    return Pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pairs = 0\n    for i in range(0, len(A)):\n        for j in range(i + 1, len(A)):\n            if (A[i] ^ A[j] ) % 2 == 0:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    res = 1\n    while res < n:\n        res = res * 2\n    return res\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while(i <= n):\n        i *= 2\n    return i\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = int(n)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1<<(n-1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    # this is not the right approach...\n    \n    # while n > 0:\n    #     if n == 1:\n    #         return 1\n    #     if n % 2 == 0:\n    #         n = n/2\n    #     else:\n    #         n = n + 1\n    \n    # return n\n    \n    # this is the right approach\n    \n    p = 1\n    while p <= n:\n        p *= 2\n    return p\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # print \"Input:\", n\n    \n    n -= 1\n    # print \"n:\", n\n    while n > 0 and n & (n - 1)!= 0:\n        # print \"Next:\", n\n        n -= 1\n    # print \"Next:\", n\n    return n + 1\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    p = 1\n    while p < n:\n        p *= 2\n    return p\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    log2 = math.log(n)/math.log(2)\n    return 2**(math.ceil(log2))\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 << int(n).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n==0:\n        return 0\n    i = 0\n    while True:\n        if 2**i >= n:\n            return 2**i\n        i+=1\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1<<(n-1).bit_length()\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    b = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            b = b + 1\n    return b\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    freq = 0\n    for i in x:\n        if i == x[0]:\n            freq = freq + 1\n    return freq\ndef prime(num): \n    '''\n    Write a function to check if a given number is prime or not.\n    '''\n    if num > 1: \n        for i in range(2,num):\n            if (num % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef bubble_sort(l): \n    '''\n    Write a function to sort a list of numbers using the bubble sort algorithm.\n    '''\n    for i in range(len(l)):\n        for j in range(len(l)-1,i,-1):\n            if l[j] < l[j-1]:\n                l[j],l[j-1] = l[j-1],l[j]\n    return l\ndef selection_sort(l): \n    '''\n    Write a function to sort a list of numbers using the selection sort algorithm.\n    '''\n    for i in range(len(l)):\n        min = i\n        for j in range(i,len(l)):\n            if l[min] > l[j]:\n                min = j\n        l[i],l[min] = l[min],l[i]\n    return l\ndef insertion_sort(l): \n    '''\n    Write a function to sort a list of numbers using the insertion sort algorithm.\n    '''\n    for i in range(1,len(l)):\n        key = l[i]\n        j = i - 1\n        while j >= 0 and key < l[j]:\n            l[j+1] = l[j]\n            j -= 1\n        l[j+1] = key\n    return l\ndef merge_sort(l): \n    '''\n    Write a function to sort a list of numbers using the merge sort algorithm.\n    '''\n    if len(l) > 1:\n        mid = len(l) // 2\n        left = l[:mid]\n        right = l[mid:]\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    print(a.count(x))\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if len(a) == 0:\n        return 0\n    elif a[0] == x:\n        return 1 + frequency(a[1:],x)\n    else:\n        return frequency(a[1:],x)\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if x in a:\n        return a.count(x)\n    else:\n        return 0\n    \ndef get_median(a):\n    '''\n    Write a function to compute the median of a list of numbers.\n    '''\n    a.sort()\n    return a[int(len(a)/2)]\n    \ndef get_median_deviation(a):\n    '''\n    Write a function to compute the median absolute deviation of a list of numbers.\n    '''\n    return get_median(a)-get_median(a-sorted(a))\n    \ndef get_median_deviation_short(a):\n    '''\n    Write a function to compute the median absolute deviation of a list of numbers.\n    '''\n    return get_median(a) - get_median(sorted(a))\n    \ndef get_median_deviation_short_2(a):\n    '''\n    Write a function to compute the median absolute deviation of a list of numbers.\n    '''\n    return get_median(a) - get_median(sorted(a)[len(a)/2])\n    \ndef get_median_deviation_short_3(a):\n    '''\n    Write a function to compute the median absolute deviation of a list of numbers.\n    '''\n    return get_median(a) - get_median(sorted(a)[len(a)/2-1])\n    \ndef get_median_deviation_short_4(a):\n    '''\n    Write a function to compute the median absolute deviation of a list of numbers.\n    '''\n    return get_median(a) - get_median(sorted(a)[len(a)/2+1])\n    \ndef get_median_deviation_short_5(a):\n    '''\n    Write a function to compute the median absolute deviation of a list of numbers.\n    '''\n    return get_median(a) - get_median(sorted(a)[len(a)/2-1])\n    \ndef get_median_deviation_short_6(a):\n    '''\n    Write a function to compute the median absolute deviation of a list of numbers.\n    '''\n    return get_median(a) - get_median(sorted(a)[len(a)/2+1])\n    \ndef get_median_deviation_short_7(a):\n    '''\n    Write a function to compute the median absolute deviation of a list of numbers.\n    '''\n    return get_median(a) - get_median(sorted(a)[len(a)/2-1])\n    \ndef get_median_deviation_short_8(a):\n    '''\n    Write a function to compute the median absolute deviation of a list of numbers.\n    '''\n    return get_median(a) - get_median(sorted(a)[len(a)/2+1])\n    \ndef get_median_deviation_short_9(a):\n    '''\n    Write a function to compute the median absolute deviation of a list of numbers.\n    '''\n    return get_median(a) - get_median(sorted(a)[len(a)/2-1])\n    \ndef get_median_deviation_short_10(a):\n    '''\n    Write a function to compute the median absolute deviation of a list of numbers.\n    '''\n    return get_median(a) - get_median(sorted(a)[len(a)/2+1])\n    \ndef get_median_deviation_short_11(a):\n    '''\n    Write a function to compute the median absolute deviation of a list of numbers.\n    '''\n    return get_median(a) - get_median(sorted(a)[len(a)/2-1])\n    \ndef get_median_deviation_short_12(a):\n    '''\n    Write a function to compute the median absolute deviation of a list of numbers.\n    '''\n    return get_median(a) - get_median(sorted(a)[len(a)/2+1])\n    \ndef get_median_deviation_short_13(a):\n    '''\n    Write a function to compute the median absolute deviation of a list of numbers.\n    '''\n    return get_median(a) - get_median(sorted(a)[len(a)/2-1])\n    \ndef get_median_deviation_short_14(a):\n    '''\n    Write a function to compute the median absolute deviation of a list of numbers.\n    '''\n    return get_median(a) - get_median(sorted(a)[len(a)/2+1])\n    \ndef get_median_deviation_short_15(a):\n    '''\n    Write a function to compute the median absolute deviation of a list of numbers.\n    '''\n    return get_median(a) - get_median(sorted(a)[len(a)/2-1])\n    \ndef get_median_deviation_short_16(a):\n    '''\n    Write a function to compute the median absolute deviation of a list of numbers.\n    '''\n    return get_median(a) - get_median(sorted(a)[len(a)/2+1])\n    \ndef get_median_deviation_short_17(a):\n    '''\n    Write a function to compute the median absolute deviation of a list of numbers.\n    '''\n    return get_median(a) - get_median(sorted(a)[len(a)/2-1])\n    \ndef get_median_deviation_short_18(a):\n    '''\n    Write a function to compute the median absolute deviation of a list of numbers.\n    '''\n    return get_median(a) - get_median(sorted(a)[len(a)/2+1])\n    \ndef get_median_deviation_short_19(a):\n    '''\n    Write a function to compute the median absolute deviation of a list of numbers.\n    '''\n    return get_median(a) - get_median(sorted(a)[len(a)/2-1])\n    \ndef get_median_deviation_short_20(a):\n    '''\n    Write a function to compute the median absolute deviation of a list of numbers.\n    '''\n    return get_median(a) - get_median(sorted(a)[len(a)/2+1])\n    \ndef get_median_deviation_short_21(a):\n    '''\n    Write a function to compute the median absolute deviation of a list of numbers.\n    '''\n    return get_median(a) - get_median(sorted(a)[len(a)/2-1])\n    \ndef get_median_deviation_short_22(a):\n    '''\n    Write a function to compute the median absolute deviation of a list of numbers.\n    '''\n    return get_median(a) - get_median(sorted(a)[len(a)/2+1])\n    \ndef get_median_deviation_short_23(a):\n    '''\n    Write a function to compute the median absolute deviation of a list of numbers.\n    '''\n    return get_median(a) - get_median(sorted(a)[len(a)/2-1])\n    \ndef get_median_deviation_short_24(a):\n    '''\n    Write a function to compute the median absolute deviation of a list of numbers.\n    '''\n    return get_median(a) - get_median(sorted(a)[len(a)/2+1])\n    \ndef get_median_deviation_short_25(a):\n    '''\n    Write a function to compute the median absolute deviation of a list of numbers.\n    '''\n    return get_median(a) - get_median(sorted(a)[len(a)/2-1])\n    \ndef get_median_deviation_short_26(a):\n    '''\n    Write a function to compute the median absolute deviation of a list of numbers.\n    '''\n    return get_median(a) - get_median(sorted(a)[len(a)/2+1])\n    \ndef get_median_deviation_short_2"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c = 0\n    for i in a:\n        if i == x:\n            c += 1\n    return c\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if not isinstance(a,list): \n        print \"I need a list\"\n        return\n    if not isinstance(x,int): \n        print \"I need an integer\"\n        return\n    if not isinstance(a,list): \n        print \"I need a list\"\n        return\n    if not isinstance(x,int): \n        print \"I need an integer\"\n        return\n    \n    l = len(a)\n    if l == 0: \n        return 0\n    cnt = 0\n    for i in range(l): \n        if a[i] == x: \n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    frequency_of_x = 0\n    for element in a: \n        if element == x:\n            frequency_of_x += 1\n    return frequency_of_x\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0                                                                                                                                                                                        \n    for i in range(m, n):                                                                                                                                                                                            \n        sum += list1[i]                                                                                                                                                                                                \n    return sum                                                                                                                                                                                                    \n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    #sum_total = 0\n    #for i in range(m, n+1):\n    #    sum_total += list1[i]\n    #return sum_total\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s = 0\n    for i in range(m, n + 1):\n        s += list1[i]\n    return s\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # result = 3*a*math.sqrt(5 - (5**2/4))\n    result = 3*a*(math.sqrt(5) - 1)\n    return result\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * math.sqrt(5) * (1 + math.sqrt(5))\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return a * math.sqrt(5) * (1 + math.sqrt(5)) / 2\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * (3 * math.sqrt(3)) / 2\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return a * (3 * math.sqrt(3)) / 4\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a * (2 * math.sqrt(2) + math.sqrt(2)) / 2\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    return a * (2 * math.sqrt(2) + math.sqrt(2)) / 4\ndef perimeter_triangle(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    return a + a + a\ndef area_triangle(a):\n    '''\n    Write a function to find the area of a regular triangle from the length of its sides.\n    '''\n    return math.sqrt(3) / 4 * a ** 2\ndef perimeter_rectangle(a, b):\n    '''\n    Write a function to find the perimeter of a rectangle from its side lengths.\n    '''\n    return a + b + a + b\ndef area_rectangle(a, b):\n    '''\n    Write a function to find the area of a rectangle from its side lengths.\n    '''\n    return a * b\ndef perimeter_rhombus(a, b):\n    '''\n    Write a function to find the perimeter of a rhombus from its side lengths.\n    '''\n    return a + b + math.sqrt(a ** 2 + b ** 2)\ndef area_rhombus(a, b):\n    '''\n    Write a function to find the area of a rhombus from its side lengths.\n    '''\n    return a * b / 2\ndef perimeter_kite(a, b, h):\n    '''\n    Write a function to find the perimeter of a kite from its length of its base,\n    height, and side lengths.\n    '''\n    return a + b + math.sqrt(b ** 2 + h ** 2)\ndef area_kite(a, b, h):\n    '''\n    Write a function to find the area of a kite from its length of its base,\n    height, and side lengths.\n    '''\n    return a * b / 2 + math.sqrt(b ** 2 + h ** 2) * math.sqrt(2) / 2\ndef perimeter_hyperbolic_parabola(a, b, c):\n    '''\n    Write a function to find the perimeter of a hyperbolic parabola from its length of\n    base, side lengths, and height.\n    '''\n    return a + b + math.sqrt(b ** 2 - 4 * c * a)\ndef area_hyperbolic_parabola(a, b, c):\n    '''\n    Write a function to find the area of a hyperbolic parabola from its length of base,\n    side lengths, and height.\n    '''\n    return math.sqrt(b ** 2 - 4 * c * a) / (2 * c)\ndef perimeter_circle(r):\n    '''\n    Write a function to find the perimeter of a circle from the radius.\n    '''\n    return 2 * math.pi * r\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle from the radius.\n    '''\n    return math.pi * r ** 2\ndef perimeter_ellipse(a, b):\n    '''\n    Write a function to find the perimeter of an ellipse from its semi-axes lengths.\n    '''\n    return 2 * math.pi * (a + b)\ndef area_ellipse(a, b):\n    '''\n    Write a function to find the area of an ellipse from its semi-axes lengths.\n    '''\n    return math.pi * (a * b) / 4\ndef perimeter_ellipsoid(a, b, c):\n    '''\n    Write a function to find the perimeter of an ellipsoid from its semi-axes lengths.\n    '''\n    return perimeter_ellipse(a, b) + perimeter_ellipse(b, c) + perimeter_ellipse(c, a)\ndef area_ellipsoid(a, b, c):\n    '''\n    Write a function to find the area of an ellipsoid from its semi-axes lengths.\n    '''\n    return area_ellipse(a, b) + area_ellipse(b, c) + area_ellipse(c, a)\ndef perimeter_hyperboloid(a, b, c):\n    '''\n    Write a function to find the perimeter of a hyperboloid from its semi-axes lengths.\n    '''\n    return perimeter_hyperbolic_parabola(a, b, c) + perimeter_hyperbolic_parabola(b, c, a) + perimeter_hyperbolic_parabola(c, a, b)\ndef area_hyperboloid(a, b, c):\n    '''\n    Write a function to find the area of a hyperboloid from its semi-axes lengths.\n    '''\n    return area_hyperbolic_parabola(a, b, c) + area_hyperbolic_parabola(b, c, a) + area_hyperbolic_parabola(c, a, b)\ndef perimeter_sphere(r):\n    '''\n    Write a function to find the perimeter of a sphere from the radius.\n    '''\n    return 4 * math.pi * r\ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere from the radius.\n    '''\n    return math.pi * r ** 2\ndef perimeter_cone(r, h):\n    '''\n    Write a function to find the perimeter of a cone from the radius and height.\n    '''\n    return 2 * math.pi * r + math.pi * r * math.sqrt(1 + h ** 2 / r ** 2)\ndef area_cone(r, h):\n    '''\n    Write a function to find the area of a cone from the radius and height.\n    '''\n    return math.pi * r * (1 + h ** 2 / r ** 2) / 3\ndef perimeter_cylinder(r, h):\n    '''\n    Write a function to find the perimeter of a cylinder from the radius and height.\n    '''\n    return perimeter_cone(r, h) + 2 * math.pi * r * h\ndef area_cylinder(r, h):\n    '''\n    Write a function to find the area of a cylinder from the radius and height.\n    '''\n    return area_cone(r, h) + 2 * math.pi * r ** 2 * h / 3\ndef perimeter_rectangle(a, b):\n    '''\n    Write a function to find the perimeter of a rectangle from its side lengths.\n    '''\n    return 2 * (a + b)\ndef area_rectangle(a, b):\n    '''\n    Write a function to find the area of a rectangle from its side lengths.\n    '''\n    return a * b\ndef perimeter_rhombus(a, b):\n    '''\n    Write a function to find the perimeter of a rhombus from its side lengths.\n    '''\n    return a + b + math.sqrt(a ** 2 + b ** 2)\ndef area_rhombus(a, b):\n    '''\n    Write a function to find the area of a rhombus from its side lengths.\n    '''\n    return a * b / 2\ndef perimeter_triangl"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return math.pi * (a ** 2) / 2\ndef side_length_triangle(a, b, c):\n    '''\n    Write a function to find the length of the side of a right triangle from the lengths of the three sides.\n    '''\n    return math.sqrt(a ** 2 + b ** 2)\ndef hypotenuse_triangle(a, b):\n    '''\n    Write a function to find the length of the hypotenuse of a right triangle from the lengths of the two other sides.\n    '''\n    return math.sqrt(a ** 2 + b ** 2)\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return math.pi * (a ** 2) / 2\ndef side_length_hexagon(a, b):\n    '''\n    Write a function to find the length of the side of a right hexagon from the lengths of the two sides.\n    '''\n    return a * math.sqrt(2)\ndef side_length_octagon(a):\n    '''\n    Write a function to find the length of the side of an octagon from the length of its sides.\n    '''\n    return a * math.sqrt(2)\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return math.pi * (a ** 2) / 2\ndef side_length_octagon(a, b):\n    '''\n    Write a function to find the length of the side of an octagon from the lengths of the two sides.\n    '''\n    return a * math.sqrt(2)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return math.pi * (a ** 2) / 2\ndef side_length_heptagon(a, b):\n    '''\n    Write a function to find the length of the side of a heptagon from the lengths of the two sides.\n    '''\n    return a * math.sqrt(2) / 2\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return math.pi * (a ** 2) / 2\ndef side_length_heptagon(a, b):\n    '''\n    Write a function to find the length of the side of a heptagon from the lengths of the two sides.\n    '''\n    return a * math.sqrt(2)\ndef side_length_nonagon(a):\n    '''\n    Write a function to find the length of the side of a nonagon from the length of its sides.\n    '''\n    return a * math.sqrt(2)\ndef side_length_nonagon(a, b):\n    '''\n    Write a function to find the length of the side of a nonagon from the lengths of the two sides.\n    '''\n    return a * math.sqrt(2)\ndef side_length_decagon(a):\n    '''\n    Write a function to find the length of the side of a decagon from the length of its sides.\n    '''\n    return a / math.sqrt(2)\ndef side_length_decagon(a, b):\n    '''\n    Write a function to find the length of the side of a nonagon from the lengths of the two sides.\n    '''\n    return a / math.sqrt(2)\ndef side_length_decagon(a, b, c):\n    '''\n    Write a function to find the length of the side of a nonagon from the lengths of the three sides.\n    '''\n    return math.sqrt(a ** 2 + b ** 2)\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return math.pi * (a ** 2) / 2\ndef side_length_hexagon(a, b):\n    '''\n    Write a function to find the length of the side of a nonagon from the lengths of the two sides.\n    '''\n    return a * math.sqrt(2)\ndef side_length_heptagon(a, b, c):\n    '''\n    Write a function to find the length of the side of a nonagon from the lengths of the three sides.\n    '''\n    return a * math.sqrt(2)\ndef side_length_nonagon(a, b, c):\n    '''\n    Write a function to find the length of the side of a nonagon from the lengths of the three sides.\n    '''\n    return math.sqrt(a ** 2 + b ** 2)\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return math.pi * (a ** 2) / 2\ndef side_length_heptagon(a, b, c):\n    '''\n    Write a function to find the length of the side of a nonagon from the lengths of the three sides.\n    '''\n    return a * math.sqrt(2)\ndef side_length_octagon(a, b):\n    '''\n    Write a function to find the length of the side of a nonagon from the lengths of the two sides.\n    '''\n    return a * math.sqrt(2)\ndef side_length_octagon(a, b, c):\n    '''\n    Write a function to find the length of the side of a nonagon from the lengths of the three sides.\n    '''\n    return a * math.sqrt(2)\ndef side_length_octagon(a, b, c, d):\n    '''\n    Write a function to find the length of the side of a nonagon from the lengths of the four sides.\n    '''\n    return a * math.sqrt(2)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return math.pi * (a ** 2) / 2\ndef side_length_octagon(a, b, c, d):\n    '''\n    Write a function to find the length of the side of a nonagon from the lengths of the four sides.\n    '''\n    return a * math.sqrt(2)\ndef side_length_octagon(a, b, c, d, e):\n    '''\n    Write a function to find the length of the side of a nonagon from the lengths of the four sides.\n    '''\n    return a * math.sqrt(2)\ndef side_length_octagon(a, b, c, d, e, f):\n    '''\n    Write a function to find the length of the side of a nonagon from the lengths of the four sides.\n    '''\n    return a * math.sqrt(2)\ndef side_length_octagon(a, b, c, d, e, f, g):\n    '''\n    Write a function to find the length of the side of a nonagon from the lengths of the five sides.\n    '''\n    return a * math.sqrt(2)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return math.pi * (a ** 2) / 2\ndef side_length_octagon(a, b, c, d, e, f):\n    '''\n    Write a function to find the length of the side of a nonagon from the lengths of the five sides.\n    '''\n    return a * math.sqrt(2)\ndef side_length_octagon(a, b, c, d, e, f, g):\n    '''\n    Write a function to find the length of the side of a nonagon from the lengths of the five sides.\n    '''\n    return a * math.sqrt(2)\ndef side_length_octagon(a, b, c, d, e, f, g, h):\n    '''\n    Write a function to find the length of the side of a nonagon from the lengths of the six sides.\n    '''\n    return a * math.sqrt(2)"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 0.25*5*(5+2*math.sqrt(5))\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*5)\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5 + a * math.sqrt(5) * 10\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 6 + a * math.sqrt(3) * 6\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a * 8 + a * math.sqrt(2) * 8\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    return a * 4\ndef perimeter_octagon_equal(a,b):\n    '''\n    Write a function that returns the perimeter of a regular octagon, given the lengths of its sides.\n    '''\n    return a * 4\ndef perimeter_hexagon_equal(a,b):\n    '''\n    Write a function that returns the perimeter of a regular hexagon, given the lengths of its sides.\n    '''\n    return a * 6\ndef perimeter_square_equal(a,b):\n    '''\n    Write a function that returns the perimeter of a regular square, given the lengths of its sides.\n    '''\n    return a * 4\ndef perimeter_hexagon_equal(a,b):\n    '''\n    Write a function that returns the perimeter of a regular hexagon, given the lengths of its sides.\n    '''\n    return a * 6\ndef perimeter_octagon_equal(a,b):\n    '''\n    Write a function that returns the perimeter of a regular octagon, given the lengths of its sides.\n    '''\n    return a * 8\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 6 + a * math.sqrt(3) * 6\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a * 8 + a * math.sqrt(2) * 8\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 6 + a * math.sqrt(3) * 6\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a * 8 + a * math.sqrt(2) * 8\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 6 + a * math.sqrt(3) * 6\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a * 8 + a * math.sqrt(2) * 8\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 6 + a * math.sqrt(3) * 6\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a * 8 + a * math.sqrt(2) * 8\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 6 + a * math.sqrt(3) * 6\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a * 8 + a * math.sqrt(2) * 8\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 6 + a * math.sqrt(3) * 6\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a * 8 + a * math.sqrt(2) * 8\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 6 + a * math.sqrt(3) * 6\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a * 8 + a * math.sqrt(2) * 8\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 6 + a * math.sqrt(3) * 6\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a * 8 + a * math.sqrt(2) * 8\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 6 + a * math.sqrt(3) * 6\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a * 8 + a * math.sqrt(2) * 8\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 6 + a * math.sqrt(3) * 6\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a * 8 + a * math.sqrt(2) * 8\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 6 + a * math.sqrt(3) * 6\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a * 8 + a * math.sqrt(2) * 8\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 6 + a * math.sqrt(3) * 6\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a * 8 + a * math.sqrt(2) * 8\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 6 + a * math.sqrt(3) * 6\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a * 8 + a * math.sqrt(2) * 8\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 6 + a * math.sqrt(3) * 6\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a * 8 + a * math.sqrt(2) * 8\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regula"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    l = len(s)\n    count = 0\n    for i in range(l-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count(\"std\")\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    str_len = len(s)\n    count = 0\n    for i in range(str_len - 4):\n        if s[i:i+4] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    s = s.lower()\n    \n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    res = 0\n    for i in range(len(s)-3):\n        if s[i:i+4]=='std':\n            res+=1\n    return res\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    tuple_list = []\n    for item in test_tuple:\n        tuple_list.append(type(item))\n    tuple_type = tuple_list[0]\n    for item in tuple_list:\n        if item!= tuple_type:\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    l = list(test_tuple)\n    return all(isinstance(i, type(l[0])) for i in l)\n    \n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple)<2:\n        return True\n    check=True\n    for i in range(1,len(test_tuple)):\n        if test_tuple[0]!=test_tuple[i]:\n            check=False\n            break\n    return check\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            print('Not all data types are the same')\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if type(test_tuple)!= tuple:\n        print(\"Enter valid input\")\n        return\n    for i in test_tuple:\n        if type(i)!= type(test_tuple[0]):\n            print(\"tuple data type mismatch\")\n            return\n    print(\"all the elements in the tuple have same data type\")\n    return\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_list = []\n    for i in test_tuple:\n        type_list.append(type(i))\n    return type_list\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_list = list(test_tuple)\n    return all(isinstance(e, test_list[0]) for e in test_list)\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    #pass #remove this line\n    return all(type(elem) == type(test_tuple[0]) for elem in test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    if len(test_tuple) == 1:\n        return True\n    return type(test_tuple[0]) == type(test_tuple[1])\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    element_types = [type(x) for x in test_tuple]\n    if len(set(element_types)) == 1:\n        return 'all elements are of same type'\n    else:\n        return 'not all elements are of same type'\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n / 2:\n            return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    return n // 2 < sum(1 for i in arr if i == x)\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # b = arr.count(x)\n    # return b > n/2\n    return arr.count(x) > (n / 2)\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    return n > 0 and arr.count(x) > (n / 2)\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return True\n    return is_majority(arr, n/2, x) if arr[n/2] == x else is_majority(arr, n/2, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # empty array, or single element\n    if len(arr) == 0 or len(arr) == 1:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    majority = 0\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # if n is odd, then the majority element is the middle element\n    if n % 2 == 1:\n        return arr[n/2]\n    # if n is even, then the majority element is the average of the two middle elements\n    return (arr[n/2] + arr[n/2 - 1]) / 2.0\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    left = 0\n    right = n - 1\n    \n    while left <= right:\n        mid = (left + right) / 2\n        \n        if arr[mid] == x:\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return (left > n / 2)\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # get the frequency of the target element\n    freq = 0\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n&1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n    \ndef main():\n    print count_Set_Bits(5)\n    print count_Set_Bits(3)\n    print count_Set_Bits(4)\n    print count_Set_Bits(11)\n    print count_Set_Bits(12)\n    \nif __name__ == '__main__':\n    main()\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    if n == 0:\n        return 0\n    return n & 0x5555555555555555\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count=0\n    while n:\n        if n%2:\n            count+=1\n        n/=2\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    if n == 0:\n        return 0\n    bit = 0\n    while n:\n        if n & 1:\n            bit += 1\n        n = n >> 1\n    return bit\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= (n - 1)\n        count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count(\"1\")\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n    \ndef count_Set_Bits_2(n):\n    return bin(n).count('1')\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    n = len(str)\n    a = ''\n    for i in range(n):\n        if i % 2 == 0:\n            a = a + str[i]\n    return a\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    list1=[]\n    for i in str:\n        if(ord(i)%2==1):\n            list1.append(i)\n    str1=\"\"\n    str1=str1.join(list1)\n    print(str1)\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    output_string = str[0:len(str) - 1]\n    return output_string\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str_list = list(str)\n    for i in range(len(str_list)):\n        if (i%2) == 0:\n            str_list[i] =''\n    str_list = ''.join(str_list)\n    return str_list\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    for i in range(1,len(str),2):\n        str = str.replace(str[i],'')\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = str\n    for i in range(1,len(str),2):\n        new_str = new_str[:i] + new_str[i+1:]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    list=[]\n    for i in range(0,len(str)):\n        if i%2==0:\n            list.append(str[i])\n    return \"\".join(list)\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join(str[x] for x in range(1,len(str),2))\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(0, len(str)):\n        if i % 2 == 0:\n            result = result + str[i]\n    return result\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n    \ndef main():\n    print min_of_three(1, 2, 3)\n    print min_of_three(6, 5, 2)\n    print min_of_three(7, 9, 3)\n    print min_of_three(1, 2, 3)\n    print min_of_three(6, 5, 2)\n    print min_of_three(7, 9, 3)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n    \ndef main():\n    print(min_of_three(1,2,3))\n    print(min_of_three(1,2,3))\n    print(min_of_three(1,2,3))\n    print(min_of_three(1,2,3))\n    \nmain()\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if(a<b and a<c):\n        return a\n    elif(b<a and b<c):\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    all_bits_unset_in_the_range = True\n    for i in range(l,r+1):\n        if(n & 1!= 0):\n            all_bits_unset_in_the_range = False\n    return all_bits_unset_in_the_range\n    \ndef is_Right_Triangle(x,y,z):\n    '''\n    Write a python function to check whether the given three sides can form a right triangle or not.\n    '''\n    x_y = x**2 + y**2\n    x_z = x**2 + z**2\n    y_z = y**2 + z**2\n    if(x_y > x_z and x_y > y_z):\n        return True\n    else:\n        return False\n    \ndef is_Pentagonal(n):\n    '''\n    Write a python function to check whether the given number is pentagonal or not.\n    '''\n    import math\n    return ((1+24*n)*(3*n+1))/6 == math.floor(math.sqrt(24*n*n + 1))\n    \ndef is_Pentagonal_Index(n):\n    '''\n    Write a python function to check whether the given number is pentagonal or not.\n    '''\n    import math\n    return ((1+24*n)*(3*n+1))/6 == math.floor(math.sqrt(24*n*n + 1)) and n%6==5\n    \ndef is_Pentagonal_Binomial(n):\n    '''\n    Write a python function to check whether the given number is pentagonal or not.\n    '''\n    import math\n    return ((1+24*n)*(3*n+1))/6 == math.floor(math.sqrt(24*n*n + 1)) and n%2==1\n    \ndef is_Pentagonal_Index_Plus_1(n):\n    '''\n    Write a python function to check whether the given number is pentagonal or not.\n    '''\n    import math\n    return ((1+24*n)*(3*n+1))/6 == math.floor(math.sqrt(24*n*n + 1)) and n%6==1\n    \ndef is_Pentagonal_Index_Plus_2(n):\n    '''\n    Write a python function to check whether the given number is pentagonal or not.\n    '''\n    import math\n    return ((1+24*n)*(3*n+1))/6 == math.floor(math.sqrt(24*n*n + 1)) and n%6==1\n    \ndef is_Pentagonal_Index_Plus_3(n):\n    '''\n    Write a python function to check whether the given number is pentagonal or not.\n    '''\n    import math\n    return ((1+24*n)*(3*n+1))/6 == math.floor(math.sqrt(24*n*n + 1)) and n%6==1\n    \ndef is_Pentagonal_Index_Plus_4(n):\n    '''\n    Write a python function to check whether the given number is pentagonal or not.\n    '''\n    import math\n    return ((1+24*n)*(3*n+1))/6 == math.floor(math.sqrt(24*n*n + 1)) and n%6==1\n    \ndef is_Pentagonal_Index_Plus_5(n):\n    '''\n    Write a python function to check whether the given number is pentagonal or not.\n    '''\n    import math\n    return ((1+24*n)*(3*n+1))/6 == math.floor(math.sqrt(24*n*n + 1)) and n%6==1\n    \ndef is_Pentagonal_Index_Plus_6(n):\n    '''\n    Write a python function to check whether the given number is pentagonal or not.\n    '''\n    import math\n    return ((1+24*n)*(3*n+1))/6 == math.floor(math.sqrt(24*n*n + 1)) and n%6==1\n    \ndef is_Pentagonal_Index_Plus_7(n):\n    '''\n    Write a python function to check whether the given number is pentagonal or not.\n    '''\n    import math\n    return ((1+24*n)*(3*n+1))/6 == math.floor(math.sqrt(24*n*n + 1)) and n%6==1\n    \ndef is_Pentagonal_Index_Plus_8(n):\n    '''\n    Write a python function to check whether the given number is pentagonal or not.\n    '''\n    import math\n    return ((1+24*n)*(3*n+1))/6 == math.floor(math.sqrt(24*n*n + 1)) and n%6==1\n    \ndef is_Pentagonal_Index_Plus_9(n):\n    '''\n    Write a python function to check whether the given number is pentagonal or not.\n    '''\n    import math\n    return ((1+24*n)*(3*n+1))/6 == math.floor(math.sqrt(24*n*n + 1)) and n%6==1\n    \ndef is_Pentagonal_Index_Plus_10(n):\n    '''\n    Write a python function to check whether the given number is pentagonal or not.\n    '''\n    import math\n    return ((1+24*n)*(3*n+1))/6 == math.floor(math.sqrt(24*n*n + 1)) and n%6==1\n    \ndef is_Pentagonal_Index_Plus_11(n):\n    '''\n    Write a python function to check whether the given number is pentagonal or not.\n    '''\n    import math\n    return ((1+24*n)*(3*n+1))/6 == math.floor(math.sqrt(24*n*n + 1)) and n%6==1\n    \ndef is_Pentagonal_Index_Plus_12(n):\n    '''\n    Write a python function to check whether the given number is pentagonal or not.\n    '''\n    import math\n    return ((1+24*n)*(3*n+1))/6 == math.floor(math.sqrt(24*n*n + 1)) and n%6==1\n    \ndef is_Pentagonal_Index_Plus_13(n):\n    '''\n    Write a python function to check whether the given number is pentagonal or not.\n    '''\n    import math\n    return ((1+24*n)*(3*n+1))/6 == math.floor(math.sqrt(24*n*n + 1)) and n%6==1\n    \ndef is_Pentagonal_Index_Plus_14(n):\n    '''\n    Write a python function to check whether the given number is pentagonal or not.\n    '''\n    import math\n    return ((1+24*n)*(3*n+1))/6 == math.floor(math.sqrt(24*n*n + 1)) and n%6==1\n    \ndef is_Pentagonal_Index_Plus_15(n):\n    '''\n    Write a python function to check whether the given number is pentagonal or not.\n    '''\n    import math\n    return ((1+24*n)*(3*n+1))/6 == math.floor(math.sqrt(24*n*n + 1)) and n%6==1\n    \ndef is_Pentagonal_Index_Plus_16(n):\n    '''\n    Write a python function to check whether the given number is pentagonal or not.\n    '''\n    import math\n    return ((1+24*n)*(3*n+1))/6 == math.floor(math.sqrt(24*n*n + 1)) and n%6==1\n    \ndef is_Pentagonal_Index_Plus_17(n):\n    '''\n    Write a python function to check whether the given number is pentagonal or not.\n    '''\n    import math\n    return ((1+24*n)*(3*n+1))/6 == math.floor(math.sqrt(24*n*n + 1)) and n%6==1\n    \ndef is"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # convert the l and r into binary form:\n    # l = bin(l)\n    # r = bin(r)\n    # output = 1\n    # for i in xrange(len(l)):\n    #     if int(l[-(i+1)]) == 1:\n    #         output = 0\n    # for i in xrange(len(r)):\n    #     if int(r[-(i+1)]) == 1:\n    #         output = 0\n    # return output\n    return not(n & (n - 1))\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        print bin(i)\n        if bin(i).count('0')>0:\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=l\n    while(i<=r):\n        if(i & n)==0:\n            return 0\n        i = i + 1\n    return 1\ndef all_Bits_Set_In_The_Given_Range_V2(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=l\n    while(i<=r):\n        if(i & n)==0:\n            return 0\n        i = i + 1\n    return 1\ndef all_Bits_Set_In_The_Given_Range_V3(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=l\n    while(i<=r):\n        if(i & n)==0:\n            return 0\n        i = i + 1\n    return 1\ndef all_Bits_Set_In_The_Given_Range_V4(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=l\n    while(i<=r):\n        if(i & n)==0:\n            return 0\n        i = i + 1\n    return 1\ndef all_Bits_Set_In_The_Given_Range_V5(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=l\n    while(i<=r):\n        if(i & n)==0:\n            return 0\n        i = i + 1\n    return 1\ndef all_Bits_Set_In_The_Given_Range_V6(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=l\n    while(i<=r):\n        if(i & n)==0:\n            return 0\n        i = i + 1\n    return 1\ndef all_Bits_Set_In_The_Given_Range_V7(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=l\n    while(i<=r):\n        if(i & n)==0:\n            return 0\n        i = i + 1\n    return 1\ndef all_Bits_Set_In_The_Given_Range_V8(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=l\n    while(i<=r):\n        if(i & n)==0:\n            return 0\n        i = i + 1\n    return 1\ndef all_Bits_Set_In_The_Given_Range_V9(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=l\n    while(i<=r):\n        if(i & n)==0:\n            return 0\n        i = i + 1\n    return 1\ndef all_Bits_Set_In_The_Given_Range_V10(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=l\n    while(i<=r):\n        if(i & n)==0:\n            return 0\n        i = i + 1\n    return 1\ndef all_Bits_Set_In_The_Given_Range_V11(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=l\n    while(i<=r):\n        if(i & n)==0:\n            return 0\n        i = i + 1\n    return 1\ndef all_Bits_Set_In_The_Given_Range_V12(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=l\n    while(i<=r):\n        if(i & n)==0:\n            return 0\n        i = i + 1\n    return 1\ndef all_Bits_Set_In_The_Given_Range_V13(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=l\n    while(i<=r):\n        if(i & n)==0:\n            return 0\n        i = i + 1\n    return 1\ndef all_Bits_Set_In_The_Given_Range_V14(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=l\n    while(i<=r):\n        if(i & n)==0:\n            return 0\n        i = i + 1\n    return 1\ndef all_Bits_Set_In_The_Given_Range_V15(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=l\n    while(i<=r):\n        if(i & n)==0:\n            return 0\n        i = i + 1\n    return 1\ndef all_Bits_Set_In_The_Given_Range_V16(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=l\n    while(i<=r):\n        if(i & n)==0:\n            return 0\n        i = i + 1\n    return 1\ndef all_Bits_Set_In_The_Given_Range_V17(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=l\n    while(i<=r):\n        if(i & n)==0:\n            return 0\n        i = i + 1\n    return 1\ndef all_Bits_Set_In_The_Given_Range_V18(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=l\n    while(i<=r):\n        if(i & n)==0:\n            return 0\n        i = i + 1\n    return 1\ndef all_Bits_Set_In_The_Given_Range_V19(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=l\n    while(i<=r):\n        if(i & n)==0:\n            return 0\n        i = i + 1\n    return 1\ndef all_Bits_Set_In_The_Given_Range_V20(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=l\n    while(i<=r):\n        if(i & n)==0:\n            return 0\n        i = i + 1\n    return 1\ndef all_Bits_Set_In_The_Given_Range_V21(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=l\n    while(i<=r):\n        if(i & n)==0:\n            return 0\n        i = i + 1\n    return 1\ndef all_Bits_Set_In_The_Given_Range_V22(n,l,r):\n    '''\n    Write a pytho"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    a=list(bin(n))[2:]\n    a=list(reversed(a))\n    res=0\n    for i in range(l,r+1):\n        if a[i]=='0':\n            res+=1\n    if res==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l,r+1):\n        if n&(1<<i) > 0:\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return all(i & (1<<n) == 0 for i in range(l,r+1))\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l<=r:\n        if n & (1<<l) == 0:\n            return False\n        return all_Bits_Set_In_The_Given_Range(n,l+1,r)\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    def to_binary_list(n):\n        '''\n        Convert the given number n to binary list\n        '''\n        return [int(i) for i in list('{0:b}'.format(n))]\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l<0 or r>32:\n        return False\n    if n==0:\n        return True\n    else:\n        if n&(1<<l)==0:\n            return False\n        else:\n            return all_Bits_Set_In_The_Given_Range(n,l+1,r)\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    result = arr[:n]\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            result.append(arr[i])\n        elif arr[i] > 0:\n            result.insert(0, arr[i])\n    return result\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr.sort()\n    return arr[n:] + arr[:n]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Your code here\n    left, right = 0, 0\n    \n    for right in range(len(arr)):\n        if arr[right] < 0:\n            temp = arr[left]\n            arr[left] = arr[right]\n            arr[right] = temp\n            left += 1\n            \n    return arr[:n]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    while i < n:\n        if arr[i] < 0:\n            temp = arr[i]\n            arr[i] = arr[n-1]\n            arr[n-1] = temp\n            n -= 1\n        i += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr.sort()\n    \n    for i in range(0, n):\n        if arr[i] < 0:\n            arr.insert(i, arr.pop())\n            break\n    \n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        for j in range(i, len(arr)):\n            if arr[i] < 0 and arr[j] > 0:\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i] >= 0:\n            continue\n        else:\n            j = i\n            while j >= 0:\n                if arr[j] < 0:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n                j -= 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        if arr[left] >= 0:\n            left += 1\n        else:\n            if arr[right] < 0:\n                arr[left], arr[right] = arr[right], arr[left]\n                left += 1\n                right -= 1\n            else:\n                right -= 1\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    while i < n:\n        if arr[i] < 0:\n            arr.append(arr[i])\n            arr.remove(arr[i])\n            n -= 1\n        else:\n            i += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # edge case\n    if n == 0:\n        return []\n    \n    # edge case\n    if n == len(arr):\n        return arr\n    \n    left = -1\n    # left pointer\n    right = len(arr) - n\n    \n    while right > -1:\n        if arr[left] >= 0:\n            left += 1\n        elif arr[right] >= 0:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n        else:\n            right -= 1\n    \n    return arr\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = ''\n    for i in str1:\n        if i =='':\n            str2 = str2 + char\n        else:\n            str2 = str2 + i\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = str1.replace(\" \",\"\")\n    str3 = str2.replace(char,\"\")\n    return str3\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\")\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    for i in range(len(str1)):\n        if str1[i]==' ':\n            str1 = str1[:i]+char+str1[i+1:]\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return ''.join([char if char!=''else str1[i] for i,char in enumerate(str1)])\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    l=[]\n    for i in str1:\n        if i==\" \":\n            l.append(char)\n        else:\n            l.append(i)\n    return \"\".join(l)\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ','')\n    return str1.replace(char,' ')\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if len(str1) == 0:\n        return str1\n    else:\n        if str1[0] == \" \":\n            return str1[0] + replace_blank(str1[1:],char)\n        else:\n            return str1[0] + replace_blank(str1[1:],char)\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=[]\n    for i in range(n):\n        heapq.heappush(list2,list1[i])\n        list1.remove(list1[i])\n    return list2\n    \ndef larg_n(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=[]\n    for i in range(n):\n        list2.append(max(list1))\n        list1.remove(max(list1))\n    return list2\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # num=len(list1)-n\n    # heap=[]\n    # for i in range(num):\n    #     heapq.heappush(heap,-list1[i])\n    # for i in range(n):\n    #     list1[i]=heapq.heappop(heap)\n    # return list1\n    return heapq.nlargest(n,list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1) < n:\n        print(\"Length of list is less than n. Cannot proceed further\")\n        return\n    else:\n        largest = heapq.nlargest(n, list1)\n        print(\"\\nLargest n numbers from the list are\",largest)\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n>len(list1):\n        return list1\n    heapq.heapify(list1)\n    return heapq.nlargest(n,list1)\n    \ndef larg_nsmall(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    if n>len(list1):\n        return list1\n    heapq.heapify(list1)\n    return heapq.nsmallest(n,list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    largest=heapq.nlargest(n,list1)\n    return largest\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\ndef smallest_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    return heapq.nsmallest(n,list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=[]\n    for i in range(0,n):\n        list2.append(max(list1))\n        list1.remove(max(list1))\n    return list2\ndef nsmall_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    list2=[]\n    for i in range(0,n):\n        list2.append(min(list1))\n        list1.remove(min(list1))\n    return list2\ndef rem_dup_word(list1):\n    '''\n    Write a function that takes in a list of words and returns a list that has all the same words removed once each.\n    '''\n    list2=[]\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\ndef add_two_num(list1,n):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the list.\n    '''\n    return sum(list1)\ndef merge_sort_insert(list1,n):\n    '''\n    Write a function that takes in a list of numbers and returns a sorted version of the list.\n    '''\n    list2=[]\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    list2.sort()\n    return list2\ndef mergesort_count(list1,n):\n    '''\n    Write a function that takes in a list of numbers and returns a sorted version of the list.\n    '''\n    if n>1:\n        list2=[]\n        n1=len(list1)\n        half=int(n1/2)\n        list2.append(list1[half])\n        list2=mergesort_count(list1[0:half],len(list1[0:half]))\n        list2.append(list1[n1-half:n1])\n        list2=mergesort_count(list1[half:n1],len(list1[half:n1]))\n        list2.extend(list1[0:half])\n        return list2\n    else:\n        return list1\ndef mergesort_count_two(list1,n):\n    '''\n    Write a function that takes in a list of numbers and returns a sorted version of the list.\n    '''\n    if n>1:\n        list2=[]\n        n1=len(list1)\n        half=int(n1/2)\n        list2.append(list1[half])\n        list2=mergesort_count_two(list1[0:half],len(list1[0:half]))\n        list2.append(list1[n1-half:n1])\n        list2=mergesort_count_two(list1[half:n1],len(list1[half:n1]))\n        list2.extend(list1[0:half])\n        return list2\n    else:\n        return list1\ndef fibonacci_i(n):\n    '''\n    Write a function that takes in a list of numbers and returns a list of the first n numbers in the Fibonacci sequence.\n    '''\n    a=1\n    b=1\n    list1=[1]\n    for i in range(1,n):\n        list1.append(a)\n        a,b=b,a+b\n    return list1\ndef fibonacci_ii(n):\n    '''\n    Write a function that takes in a list of numbers and returns a list of the first n numbers in the Fibonacci sequence.\n    '''\n    list1=[1]\n    a=1\n    b=1\n    for i in range(1,n):\n        list1.append(b)\n        a,b=b,a+b\n    return list1\ndef fibonacci_iii(n):\n    '''\n    Write a function that takes in a list of numbers and returns a list of the first n numbers in the Fibonacci sequence.\n    '''\n    list1=[1,1]\n    for i in range(1,n):\n        list1.append(list1[i]+list1[i-1])\n    return list1\ndef count_by_5(n):\n    '''\n    Write a function that takes in a list of numbers and returns a list of the numbers that are divisible by 5.\n    '''\n    list1=[]\n    for i in range(1,n+1):\n        if i%5==0:\n            list1.append(i)\n    return list1\ndef all_for_loop(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing all the numbers from the list that are less than the number n.\n    '''\n    list2=[]\n    for i in list1:\n        if i<n:\n            list2.append(i)\n    return list2\ndef dig_pow(n,p):\n    '''\n    Write a function that takes in two integers and returns a list of the first n numbers in the Fibonacci sequence that are less than the number n.\n    '''\n    list1=[]\n    a=1\n    b=1\n    for i in range(1,n+1):\n        list1.append(a)\n        a,b=b,a+b\n    list2=[]\n    for i in list1:\n        if i<n:\n            list2.append(i)\n    return list2\ndef pal_perm(list1):\n    '''\n    Write a function that takes in a string and returns a boolean indicating whether the string is a palindrome.\n    '''\n    list2=[]\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    if len(list1)==len(list2):\n        for i in range(0,len(list1)/2):\n            if list1[i]!=list2[len(list2)-i-1]:\n                return False\n        return True\n    else:\n        return False\ndef mix_up(a,b):\n    '''\n    Write a function that takes in two strings and returns a string with the first string mixed with the second string.\n    '''\n    return b[0:2]+a[2:]+a[0:2]+b[2:]\ndef is_palin(n):\n    '''\n    Write a function that takes in a string and returns a boolean indicating whether the string is a palindrome.\n    '''\n    list1=[]\n    for i in n:\n        if i not in list1:\n            list1.append(i)\n    if len(n)==len(list1):\n        for i in range(0,len(list1)/2):\n            if list1[i]!=list1[len(list1)-i-1]:\n                return False\n        return True\n    else:\n        return False\ndef is_palin_ii(n):\n    '''\n    Write a function that takes in a string and returns a boolean indicating whether the string is a palindrome.\n    '''\n    list1=[]\n    for i in n:\n        if i not in list1:\n            list1.append(i)\n    if len(n)==len(list1):\n        for i in range(0,len(list1)):\n            if list1[i]!=list1[len(list1)-i-1]:\n                return False\n        return True\n    else:\n        return False\ndef is_palin_iii(n):\n    '''\n    Write a function that takes in a string and returns a boolean indicating whether the string is a palindrome.\n    '''\n    list1=[]\n    for i in n:\n        if i not in list1:\n            list1.append(i)\n    if len(n)==len(list1):\n        for i in range(0,len(list1)/2):\n            if list1[i]!=list1[len(list1)-i-1]:\n                return False\n        return True\n    else:\n        return False\ndef is_palin_iv(n):\n    '''\n    Write a function that take"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    sorted_list=sorted(list1, reverse=True)\n    sorted_list=sorted_list[:n]\n    return sorted_list\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    ret = []\n    for i in range(n):\n        max_num = list1[0]\n        for j in range(1,len(list1)):\n            if list1[j] > max_num:\n                max_num = list1[j]\n        ret.append(max_num)\n        list1.remove(max_num)\n    return ret\n    \ndef larg_nsmall(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    ret = []\n    for i in range(n):\n        min_num = list1[0]\n        for j in range(1,len(list1)):\n            if list1[j] < min_num:\n                min_num = list1[j]\n        ret.append(min_num)\n        list1.remove(min_num)\n    return ret\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*r**2+2*r*sqrt(r**2+h**2)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #assert type(r)==int or type(r)==float and r>=0\n    #assert type(h)==int or type(h)==float and h>=0\n    s=2*pi*r*h\n    return s\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.1415926535\n    r = float(r)\n    h = float(h)\n    return 2*pi*(r*r+h*h)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 3.14*r**2 + 2*3.14*r*h\n    \nprint(lateralsuface_cylinder(3,3))\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    if r<0:\n        print(\"Error: Radius must be positive.\")\n    else:\n        if r==0:\n            s = 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196n\n        else:\n            s = 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196n*(r**2)*h\n    return s\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    pi = 3.141592653589793\n    Scyl = pi*(r**2) + (r*h)\n    return Scyl\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    a = np.pi*(r**2)\n    b = 2*np.pi*r*h\n    return a+b\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi * (r * r + r * h + h * h)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    volume=3.14159265358979 * (r**2) * h\n    surface_area=2 * 3.14159265358979 * r * (r + h)\n    print 'The volume of the cylinder is %0.2f and the surface area is %0.2f' % (volume, surface_area)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #mycylinder = cylinder(h,r)\n    #sphere = sphere(h,r)\n    #myface = face(mycylinder,sphere)\n    #myfaces.append(myface)\n    #print myface\n    return 4*math.pi*r*h\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    print(3**l)\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return pow(l,3)\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    \n    import math\n    \n    #define volume\n    volume = l**3\n    \n    return volume\n    \n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given its radius.\n    '''\n    \n    import math\n    \n    #define volume\n    volume = 4/3 * math.pi * r**3\n    \n    return volume\n    \n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given its radius and height.\n    '''\n    \n    import math\n    \n    #define volume\n    volume = math.pi * r**2 * h\n    \n    return volume\n    \n    \ndef volume_rectangle(a,b):\n    '''\n    Write a function to find the volume of a rectangle given its length and breadth.\n    '''\n    \n    import math\n    \n    #define volume\n    volume = a * b\n    \n    return volume\n    \n    \ndef volume_tetrahedron(a):\n    '''\n    Write a function to find the volume of a tetrahedron given its side length.\n    '''\n    \n    import math\n    \n    #define volume\n    volume = math.sqrt(3) / 4 * a**3\n    \n    return volume\n    \n    \ndef volume_dodecahedron(a):\n    '''\n    Write a function to find the volume of a dodecahedron given its side length.\n    '''\n    \n    import math\n    \n    #define volume\n    volume = (3**0.5 / 4) * a**3\n    \n    return volume\n    \n    \ndef volume_dodecahedron_2(a):\n    '''\n    Write a function to find the volume of a dodecahedron given its side length.\n    '''\n    \n    import math\n    \n    #define volume\n    volume = (math.sqrt(3) / 4) * a**3\n    \n    return volume\n    \n    \ndef volume_icosahedron(a):\n    '''\n    Write a function to find the volume of a icosahedron given its side length.\n    '''\n    \n    import math\n    \n    #define volume\n    volume = (5**0.5 / 4) * a**3\n    \n    return volume\n    \n    \ndef volume_icosahedron_2(a):\n    '''\n    Write a function to find the volume of a icosahedron given its side length.\n    '''\n    \n    import math\n    \n    #define volume\n    volume = (1 + math.sqrt(5)) / 4 * a**3\n    \n    return volume\n    \n    \ndef volume_octahedron(a):\n    '''\n    Write a function to find the volume of a octahedron given its side length.\n    '''\n    \n    import math\n    \n    #define volume\n    volume = math.sqrt(2) / 4 * a**3\n    \n    return volume\n    \n    \ndef volume_octahedron_2(a):\n    '''\n    Write a function to find the volume of a octahedron given its side length.\n    '''\n    \n    import math\n    \n    #define volume\n    volume = (1 + math.sqrt(2)) / 4 * a**3\n    \n    return volume\n    \n    \ndef volume_tetrahedron(a):\n    '''\n    Write a function to find the volume of a tetrahedron given its side length.\n    '''\n    \n    import math\n    \n    #define volume\n    volume = (1 / 4) * a**3\n    \n    return volume\n    \n    \ndef volume_truncated_cone(r,h):\n    '''\n    Write a function to find the volume of a truncated cone given its radius and height.\n    '''\n    \n    import math\n    \n    #define volume\n    volume = math.pi * r**2 * h / 3\n    \n    return volume\n    \n    \ndef volume_truncated_cylinder(r,h):\n    '''\n    Write a function to find the volume of a truncated cylinder given its radius and height.\n    '''\n    \n    import math\n    \n    #define volume\n    volume = math.pi * r**2 * h\n    \n    return volume\n    \n    \ndef volume_truncated_sphere(r):\n    '''\n    Write a function to find the volume of a truncated sphere given its radius.\n    '''\n    \n    import math\n    \n    #define volume\n    volume = (4/3) * math.pi * r**3\n    \n    return volume\n    \n    \ndef volume_truncated_sphere_2(r):\n    '''\n    Write a function to find the volume of a truncated sphere given its radius.\n    '''\n    \n    import math\n    \n    #define volume\n    volume = (4/3) * math.pi * r**3 / 3\n    \n    return volume\n    \n    \ndef volume_truncated_sphere_3(r):\n    '''\n    Write a function to find the volume of a truncated sphere given its radius.\n    '''\n    \n    import math\n    \n    #define volume\n    volume = (math.pi / 3) * r**3\n    \n    return volume\n    \n    \ndef volume_truncated_cylinder_2(r,h):\n    '''\n    Write a function to find the volume of a truncated cylinder given its radius and height.\n    '''\n    \n    import math\n    \n    #define volume\n    volume = math.pi * r**2 * h\n    \n    return volume\n    \n    \ndef volume_truncated_cylinder_3(r,h):\n    '''\n    Write a function to find the volume of a truncated cylinder given its radius and height.\n    '''\n    \n    import math\n    \n    #define volume\n    volume = math.pi * r**2 * h / 3\n    \n    return volume\n    \n    \ndef volume_truncated_cylinder_4(r,h):\n    '''\n    Write a function to find the volume of a truncated cylinder given its radius and height.\n    '''\n    \n    import math\n    \n    #define volume\n    volume = math.pi * r**2 * h / 4\n    \n    return volume\n    \n    \ndef volume_truncated_cone_2(r,h):\n    '''\n    Write a function to find the volume of a truncated cone given its radius and height.\n    '''\n    \n    import math\n    \n    #define volume\n    volume = math.pi * r**2 * h / 3\n    \n    return volume\n    \n    \ndef volume_truncated_cone_3(r,h):\n    '''\n    Write a function to find the volume of a truncated cone given its radius and height.\n    '''\n    \n    import math\n    \n    #define volume\n    volume = math.pi * r**2 * h / 4\n    \n    return volume\n    \n    \ndef volume_sphere_2(r):\n    '''\n    Write a function to find the volume of a sphere given its radius.\n    '''\n    \n    import math\n    \n    #define volume\n    volume = 4/3 * math.pi * r**3\n    \n    return volume\n    \n    \ndef volume_sphere_3(r):\n    '''\n    Write a function to find the volume of a sphere given its radius.\n    '''\n    \n    import math\n    \n    #define volume\n    volume = 4/3 * math.pi * r**3 / 3\n    \n    return volume\n    \n    \ndef volume_sphere_4(r):\n    '''\n    Write a function to find the volume of a sphere given its radius.\n    '''\n    \n    import math\n    \n    #define volume\n    volume = 4/3 * math.pi * r**3 / 4\n    \n    return volume\n    \n    \ndef volume_octahedron_2(r):\n    '''\n    Write a function to find the volume of a octahedron given its side length.\n    '''\n    \n    import math\n    \n    #define volume\n    volume = (1 + math.sqrt(2)) / 4 * r**3\n    \n    return volume\n    \n    \ndef volume_octahedron_3"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n ^ (n-1)\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n ^ (n & (n-1))\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0:\n        return 0\n    count = 0\n    while n:\n        count += n & 1\n        n = n >> 1\n    return count\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0\n    if n < 0:\n        n = n & 0xffffffff\n    for i in range(32):\n        if n & (1 << i):\n            even_bits += 1\n    return even_bits\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # simple way to find odd bits\n    return n&0x5555555555555555\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n ^ n >> 2\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    mask = 1\n    # print (bin(n))\n    while n & mask > 0:\n        mask = mask << 1\n    return mask\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n < 0:\n        n = n & 0xffffffff\n    n = n | (n >> 1)\n    n = n | (n >> 2)\n    n = n | (n >> 4)\n    n = n | (n >> 8)\n    n = n | (n >> 16)\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    a=bin(n)\n    b=a[2:len(a)]\n    c=b.count(\"1\")\n    return c\n    \ndef power_of_2(n):\n    '''\n    Write a python function to check if a number is a power of 2.\n    '''\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\n    \ndef power_of_2_bitwise(n):\n    '''\n    Write a python function to check if a number is a power of 2.\n    '''\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\n    \ndef power_of_2_mod(n):\n    '''\n    Write a python function to check if a number is a power of 2.\n    '''\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\n    \ndef power_of_2_bit_set(n):\n    '''\n    Write a python function to check if a number is a power of 2.\n    '''\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\n    \ndef is_power_of_2(n):\n    '''\n    Write a python function to check if a number is a power of 2.\n    '''\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\n    \ndef is_power_of_2_bit_set(n):\n    '''\n    Write a python function to check if a number is a power of 2.\n    '''\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\n    \ndef is_power_of_2_mod(n):\n    '''\n    Write a python function to check if a number is a power of 2.\n    '''\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\n    \ndef is_power_of_2_mod(n):\n    '''\n    Write a python function to check if a number is a power of 2.\n    '''\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\n    \ndef is_power_of_2_mod(n):\n    '''\n    Write a python function to check if a number is a power of 2.\n    '''\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\n    \ndef power_of_2_mod(n):\n    '''\n    Write a python function to check if a number is a power of 2.\n    '''\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\n    \ndef power_of_2_mod(n):\n    '''\n    Write a python function to check if a number is a power of 2.\n    '''\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\n    \ndef power_of_2_mod(n):\n    '''\n    Write a python function to check if a number is a power of 2.\n    '''\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\n    \ndef power_of_2_mod(n):\n    '''\n    Write a python function to check if a number is a power of 2.\n    '''\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\n    \ndef power_of_2_mod(n):\n    '''\n    Write a python function to check if a number is a power of 2.\n    '''\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\n    \ndef power_of_2_mod(n):\n    '''\n    Write a python function to check if a number is a power of 2.\n    '''\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\n    \ndef power_of_2_mod(n):\n    '''\n    Write a python function to check if a number is a power of 2.\n    '''\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\n    \ndef power_of_2_mod(n):\n    '''\n    Write a python function to check if a number is a power of 2.\n    '''\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\n    \ndef power_of_2_mod(n):\n    '''\n    Write a python function to check if a number is a power of 2.\n    '''\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\n    \ndef power_of_2_mod(n):\n    '''\n    Write a python function to check if a number is a power of 2.\n    '''\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\n    \ndef power_of_2_mod(n):\n    '''\n    Write a python function to check if a number is a power of 2.\n    '''\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\n    \ndef power_of_2_mod(n):\n    '''\n    Write a python function to check if a number is a power of 2.\n    '''\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\n    \ndef power_of_2_mod(n):\n    '''\n    Write a python function to check if a number is a power of 2.\n    '''\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\n    \ndef power_of_2_mod(n):\n    '''\n    Write a python function to check if a number is a power of 2.\n    '''\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\n    \ndef power_of_2_mod(n):\n    '''\n    Write a python function to check if a number is a power of 2.\n    '''\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\n    \ndef power_of_2_mod(n):\n    '''\n    Write a python function to check if a number is a power of 2.\n    '''\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\n    \ndef power_of_2_mod(n):\n    '''\n    Write a python function to check if a number is a power of 2.\n    '''\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\n    \ndef power_of_2_mod(n):\n    '''\n    Write a python function to check if a number is a power of 2.\n    '''\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\n    \ndef power_of_2_mod(n):\n    '''\n    Write a python function to check if a number is a power of 2.\n    '''\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\n    \ndef power_of_2_mod(n):\n    '''\n    Write a python function to check if a number is a power of 2.\n    '''\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\n    \ndef power_of_2_mod(n):\n    '''\n    Write a python function to check if a number is a power of 2.\n    '''\n    if n & (n-1) == 0:\n        return True\n    else:\n        return False\n    \ndef power_of_2_mod(n):\n    '''\n    Write a python function to check if a number is a power of 2.\n    '''\n    if n & (n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Your code goes here\n    return n | (n - 1)\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for each in test_list:\n        if each not in result:\n            result[each] = 1\n        else:\n            result[each] += 1\n    return result\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return_dict = {}\n    for tuple in test_list:\n        if not (tuple in return_dict):\n            return_dict[tuple] = 1\n        else:\n            return_dict[tuple] += 1\n    return return_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_list = list(test_list)\n    result = {}\n    for i in test_list:\n        if i in result:\n            result[i] += 1\n        else:\n            result[i] = 1\n    return result\ndef max_val(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_list = list(test_list)\n    result = {}\n    for i in test_list:\n        if i in result:\n            result[i] += 1\n        else:\n            result[i] = 1\n    return max(result, key=result.get)\ndef list_avg(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns the average of the numbers in the list.\n    '''\n    test_list = list(test_list)\n    return sum(test_list) / len(test_list)\ndef list_sum(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the numbers in the list.\n    '''\n    test_list = list(test_list)\n    return sum(test_list)\ndef list_diff(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns the difference between the largest and smallest number in the list.\n    '''\n    test_list = list(test_list)\n    return max(test_list) - min(test_list)\ndef list_median(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns the median of the numbers in the list.\n    '''\n    test_list = list(test_list)\n    return sorted(test_list)[int(len(test_list)/2)]\ndef list_mode(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in the list.\n    '''\n    test_list = list(test_list)\n    return Counter(test_list).most_common(1)[0][0]\ndef list_range(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns the range of the numbers in the list.\n    '''\n    test_list = list(test_list)\n    return max(test_list) - min(test_list)\ndef list_stdev(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns the standard deviation of the numbers in the list.\n    '''\n    test_list = list(test_list)\n    return ((sum(test_list) / len(test_list)) - list_avg(test_list))**2\ndef list_variance(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns the variance of the numbers in the list.\n    '''\n    test_list = list(test_list)\n    return list_stdev(test_list) / len(test_list)\ndef list_power(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns the power of each item in the list.\n    '''\n    test_list = list(test_list)\n    result = {}\n    for i in test_list:\n        result[i] = i**2\n    return result\ndef list_even(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns the even numbers in the list.\n    '''\n    test_list = list(test_list)\n    result = []\n    for i in test_list:\n        if i % 2 == 0:\n            result.append(i)\n    return result\ndef list_odd(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns the odd numbers in the list.\n    '''\n    test_list = list(test_list)\n    result = []\n    for i in test_list:\n        if i % 2!= 0:\n            result.append(i)\n    return result\ndef list_prime(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns the prime numbers in the list.\n    '''\n    test_list = list(test_list)\n    result = []\n    for i in test_list:\n        if i > 1:\n            for j in range(2, i):\n                if (i % j) == 0:\n                    break\n            else:\n                result.append(i)\n    return result\ndef list_vowel(test_list):\n    '''\n    Write a function that takes in a list of strings and returns the number of vowels in each string in the list.\n    '''\n    test_list = list(test_list)\n    result = []\n    for i in test_list:\n        result.append(str(i).count('a') + str(i).count('e') + str(i).count('i') + str(i).count('o') + str(i).count('u'))\n    return result\ndef list_consonant(test_list):\n    '''\n    Write a function that takes in a list of strings and returns the number of consonants in each string in the list.\n    '''\n    test_list = list(test_list)\n    result = []\n    for i in test_list:\n        result.append(str(i).count('b') + str(i).count('c') + str(i).count('d') + str(i).count('f') + str(i).count('g') + str(i).count('h') + str(i).count('j') + str(i).count('k') + str(i).count('l') + str(i).count('m') + str(i).count('n') + str(i).count('p') + str(i).count('q') + str(i).count('r') + str(i).count('s') + str(i).count('t') + str(i).count('v') + str(i).count('w') + str(i).count('x') + str(i).count('y') + str(i).count('z'))\n    return result\ndef list_reverse(test_list):\n    '''\n    Write a function that takes in a list of strings and returns the reverse of each string in the list.\n    '''\n    test_list = list(test_list)\n    return [i[::-1] for i in test_list]\ndef list_sort(test_list):\n    '''\n    Write a function that takes in a list of strings and returns the sorted version of each string in the list.\n    '''\n    test_list = list(test_list)\n    return [sorted(i) for i in test_list]\ndef list_anagram(test_list):\n    '''\n    Write a function that takes in a list of strings and returns the anagrams of each string in the list.\n    '''\n    test_list = list(test_list)\n    result = []\n    for i in test_list:\n        word = list(i)\n        result.append(sorted(word))\n    return result\ndef list_rotate(test_list):\n    '''\n    Write a function that takes in a list of strings and returns the list with the first string followed by the last string, the second string followed by the second last, the third string followed by the third last, etc.\n    '''\n    test_list = list(test_list)\n    return test_list[1:] + [test_list[0]] + [test_list[-1]] + [test_list[-2]] + [test_list[-3]] + [test_list[-4]] + [test_list[-5]]\ndef list_if(test_list):\n    '''\n    Write a function that takes in a list of strings and returns a list of strings, with each string replaced by the string \"YES\" if the string is in the list, or the string \"NO\" if the string is not in the list.\n    '''\n    test_list = list(test_list)\n    return [i if i in test_list else \"NO\" for i in test_list]\ndef lis"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    my_dict = {}\n    for tup in test_list:\n        if tup in my_dict:\n            my_dict[tup] += 1\n        else:\n            my_dict[tup] = 1\n    return my_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for i in test_list:\n        if i[0] in occurences:\n            occurences[i[0]] += 1\n        else:\n            occurences[i[0]] = 1\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return counter\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for i in test_list:\n        if i[0] not in occurences.keys():\n            occurences[i[0]] = [i[1]]\n        else:\n            occurences[i[0]].append(i[1])\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for each in test_list:\n        if each in occurences:\n            occurences[each] += 1\n        else:\n            occurences[each] = 1\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for each_tuple in test_list:\n        if each_tuple not in result:\n            result[each_tuple] = 1\n        else:\n            result[each_tuple] += 1\n    return result\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counted_dict = Counter(test_list)\n    return counted_dict\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substrings = 0\n    for i in xrange(len(str)):\n        for j in xrange(i, len(str)):\n            if len(str[i:j+1]) > 0:\n                substrings += 1\n    return substrings\n    \n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(filter(None, str.split('a')))\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n            if str[j]!='':\n                break\n    return count\n    \n    \nif __name__ == \"__main__\":\n    str = 'Coding Ninjas'\n    print str\n    print \"Number of substrings:\",number_of_substrings(str)"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len([x for x in str.split() if len(x)>0])\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            substring = str[i:j+1]\n            if len(substring)>0:\n                count+=1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    len_str = len(str)\n    count = 0\n    for i in range(0,len_str):\n        for j in range(i,len_str+1):\n            substr = str[i:j]\n            if len(substr) > 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(str):\n        count += 1\n        if str[i]!='':\n            j = i + 1\n            while j < len(str) and str[j] =='':\n                j += 1\n            i = j\n        else:\n            i += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(0, len(str)):\n        if str[i]!='':\n            for j in range(i, len(str)):\n                if str[j] =='':\n                    break\n                else:\n                    count = count + 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len([s for s in str.split(' ') if s!= ''])\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # the loop starts with count = 0 \n    count = 0\n    # first, we will check whether the given string is empty or not. If it is, we will return 0. \n    if (str == '') or (str == None):\n        return 0\n    # we will start with every index of the given string. \n    for i in range(len(str)):\n        # now, we will set a flag which is True as long as the given string is non-empty. \n        flag = True\n        # the loop starts from the index of i to the end of the string. \n        for j in range(i, len(str)):\n            # if the jth character is non-empty, we will set the flag to False. \n            if (str[j]!= ''):\n                flag = False\n        # we will count the non-empty substrings. \n        if flag == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < 2:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    return get_total_number_of_sequences(m,n-1) + get_total_number_of_sequences(m-1,n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m == 0 or n == 0:\n        return 1\n    elif m < 0 or n < 0:\n        return 0\n    else:\n        return get_total_number_of_sequences(m-1,n) + get_total_number_of_sequences(m, n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    else:\n        return m * n\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m > n:\n        return 0\n    elif m == n:\n        return 1\n    elif m == n-1:\n        return n\n    elif m == n-2:\n        return n*(n-1)\n    else:\n        return n*(n-1)*(n-2)*(n-3)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return 2*m*(m+1)*(m+2)/6\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return int(math.factorial(n)/(math.factorial(n-2)*math.factorial(2)))\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # Since the numbers must be positive, I am going to use recursion here to compute the nth number. \n    # I need to compute the nth number \n    if n == 1: \n        return 1\n    else: \n        return n*get_total_number_of_sequences(m,n-1) \n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # If m is 0, then there is no way for a sequence to be of length n\n    if m == 0:\n        return 0\n    # If n is 0, then there is no way for a sequence to be of length n\n    if n == 0:\n        return 1\n    return get_total_number_of_sequences(m-1, n) + get_total_number_of_sequences(m, n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < 2:\n        return 0\n    elif m == 2:\n        return n\n    elif m == 3:\n        return n**2\n    elif m > 3:\n        return n**2 + get_total_number_of_sequences(m-2, n)\n    return 0\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #This will be a DP problem, and we will represent the DP table with an array\n    #The DP table will have m rows and n+1 columns, and each element will be a 0 or a 1. \n    #We'll initialize the first row to be all ones. \n    #Each subsequent row will be a bitmask, and we will use the bitmask to create the number of sequences of length n+1\n    #The sequence of bitmask values is given by the following: \n    #The bitmask of a sequence will be \"1\" if the ith element is greater than the (i-1)th element, and \"0\" otherwise\n    #The bitmask of a sequence will be the AND of all of the bitmasks of its previous sequences\n    #So the sequence of bitmasks of length n will be:\n    #[0,1,0,1,0,1,0,1,0,1]\n    #Each row will start with a 1\n    #For each row, we calculate the bitmask of the previous row, and the number of sequences with that bitmask\n    #For example, we would have:\n    #[1,1,0,1,0,1,0,1,0,1]\n    #[1,1,1,0,1,1,0,1,0,1]\n    #[1,1,1,0,1,1,1,0,1,1]\n    #[1,1,1,1,0,1,1,1,0,1]\n    #[1,1,1,1,0,1,1,1,1,1]\n    #The final number of sequences is the number of sequences with the last bitmask, which is 1\n    #The number of sequences with a particular bitmask is the number of sequences that follow by:\n    #1. The number of sequences with the bitmask of the previous row\n    #2. The number of sequences with the bitmask of the previous row and the last bitmask\n    #3. The number of sequences with the bitmask of the previous row and the last bitmask and the last bitmask\n    #4. The number of sequences with the bitmask of the previous row and the last bitmask and the last bitmask and the last bitmask\n    #The total number of sequences is the sum of the number of sequences with each bitmask\n    #So the total number of sequences is the number of sequences with the last bitmask\n    #For each row, we add the number of sequences with that bitmask to the number of sequences with the previous bitmask\n    #The number of sequences with a particular bitmask is the number of sequences that follow by:\n    #1. The number of sequences with the bitmask of the previous row\n    #2. The number of sequences with the bitmask of the previous row and the last bitmask\n    #3. The number of sequences with the bitmask of the previous row and the last bitmask and the last bitmask\n    #4. The number of sequences with the bitmask of the previous row and the last bitmask and the last bitmask and the last bitmask\n    #The total number of sequences is the sum of the number of sequences with each bitmask\n    #The number of sequences with a particular bitmask is the number of sequences that follow by:\n    #1. The number of sequences with the bitmask of the previous row\n    #2. The number of sequences with the bitmask of the previous row and the last bitmask\n    #3. The number of sequences with the bitmask of the previous row and the last bitmask and the last bitmask\n    #4. The number of sequences with the bitmask of the previous row and the last bitmask and the last bitmask and the last bitmask\n    #The total number of sequences is the sum of the number of sequences with each bitmask\n    #The number of sequences with a particular bitmask is the number of sequences that follow by:\n    #1. The number of sequences with the bitmask of the previous row\n    #2. The number of sequences with the bitmask of the previous row and the last bitmask\n    #3. The number of sequences with the bitmask of the previous row and the last bitmask and the last bitmask\n    #4. The number of sequences with the bitmask of the previous row and the last bitmask and the last bitmask and the last bitmask\n    #The total number of sequences is the sum of the number of sequences with each bitmask\n    #The number of sequences with a particular bitmask is the number of sequences that follow by:\n    #1. The number of sequences with the bitmask of the previous row\n    #2. The number of sequences with the bitmask of the previous row and the last bitmask\n    #3. The number of sequences with the bitmask of the previous row and the last bitmask and the last bitmask\n    #4. The number of sequences with the bitmask of the previous row and the last bitmask and the last bitmask and the last bitmask\n    #The total number of sequences is the sum of the number of sequences with each bitmask\n    #Each row will start with a 1\n    #And each row will end with a 1\n    #So, the last row is [1,1,1,1,1,1,1,1,1,1]\n    #This row is the bitmask for the last row, which is 1\n    #The number of sequences with that bitmask is the number of sequences that follow by:\n    #1. The number of sequences with the bitmask of the previous row\n    #2. The number of sequences with the bitmask of the previous row and the last bitmask\n    #3. The number of sequences with the bitmask of the previous row and the last bitmask and the last bitmask\n    #4. The number of sequences with the bitmask of the previous row and the last bitmask and the last bitmask and the last bitmask\n    #The total number of sequences is the sum of the number of sequences with each bitmask\n    #The number of sequences with a particular bitmask is the number of sequences that follow by:\n    #1. The number of sequences with the bitmask of the previous row\n    #2. The number of sequences with the bitmask of the previous row and the last bitmask\n    #3. The number of sequences with the bitmask of the previous row and the last bitmask and the last bitmask\n    #4. The number of sequences with the bitmask of the previous row and the last bitmask and the last bitmask and the last bitmask\n    #The total number of sequences is the sum of the number of sequences with each bitmask\n    #The number of sequences with a particular bitmask is the number of sequences that follow by:\n    #1. The number of sequences with the bitmask of the previous row\n    #2. The number of sequences with the bitmask of the previous row and the last bitmask\n    #3. The number of sequences with the bitmask of the previous row and the last bitmask and the last bitmask\n    #4. The number of sequences with the bitmask of the previous row and the last bitmask and the last bitmask and the last bitmask\n    #The total number of sequences is the sum of the number of sequences with each bitmask\n    #The number of sequences with a particular bitmask is the number of sequences that follow by:\n    #1. The number of sequences with the bitmask of the previous row\n    #2. The number of sequences with the bitmask of the previous row and the last bitmask\n    #3. The number of sequences with the bitmask of the previous row and the last bitmask and the last bitmask\n    #4. The number of sequences with the bitmask of the previous row and the last bitmask and the last bitmask and the last bitmask\n    #The total number of sequences is the sum of the number of sequences with each bitmask\n    #The number of sequences with a particular bitmask is the number of sequences that follow by:\n    #1. The number of sequences with the bitmask of the previous row\n    #2. The number of sequences with the bitmask of the previous row and the last bitmask\n    #3. The number of sequences with the bitmask of the previous row and the last bitmask and the last bitmask\n    #4. The number of sequences with the bitmask of the previous row and the last bitmask and the last bitmask and the last bitmask\n    #The total number of sequences is the sum of the number of sequences with each bitmask\n    #The number of sequences with a particular bitmask is the number of sequences that follow by:\n    #1. The number of sequences with the bitmask of the previous row\n    #2. The number of sequences with the bitmask of the previous row and the last bitmask\n    #3. The number of sequences with the bi"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[0:-1]+list2\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) <= len(list2):\n        i = len(list1) - 1\n        while i > len(list2) - 1:\n            list1.remove(list1[i])\n            i = i - 1\n        list1.pop()\n        for e in list2:\n            list1.append(e)\n    elif len(list1) > len(list2):\n        i = len(list2) - 1\n        while i > len(list1) - 1:\n            list1.remove(list1[i])\n            i = i - 1\n        list1.pop()\n        for e in list1:\n            list2.append(e)\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    length = len(list1) - 1\n    for i in range(length):\n        list1[i] = list2[i]\n    list1[length] = list2[length]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < len(list2):\n        return False\n    for index in range(len(list1)-1, -1, -1):\n        list1[index] = list2[index]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    new_list1 = list1[:-1]\n    new_list2 = list2[1:]\n    new_list1.extend(new_list2)\n    return new_list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    \n    if len(list1) < len(list2):\n        print(\"list1 must be longer than list2\")\n    else:\n        print(\"Original list1: \", list1)\n        print(\"Original list2: \", list2)\n        for i in range(0, len(list1) - 1):\n            list1[i] = list1[i]\n        list1[len(list1) - 1] = list2\n        print(\"Replaced list1: \", list1)\n        print(\"Replaced list2: \", list2)\n    \n    \nreplace_list([1,2,3,4,5],[1,2,3,4])\nreplace_list([1,2,3,4,5],[1,2,3,4])\nreplace_list([1,2,3,4,5],[1,2,3,4])\nreplace_list([1,2,3,4,5],[1,2,3,4])\nreplace_list([1,2,3,4,5],[1,2,3,4,5])\nreplace_list([1,2,3,4,5],[1,2,3,4,5])"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == len(list2):\n        for i in range(len(list1)):\n            list1[i] = list2[i]\n        return list1\n    else:\n        print \"Error: lists must be the same length\"\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count=0\n    for i in str1:\n        count+=1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for s in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    \n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    #make an array\n    #now for each element in the array, check if it is in the original string and increment the value\n    #repeat\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Your code here \n    import math\n    return int(math.sqrt(N))+1\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)))\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = int(math.ceil(math.sqrt(N)))\n    if (x*x == N):\n        return (x+1)*(x+1)\n    else:\n        return -1\ndef find_sum_digit(num):\n    s = 0\n    while (num>0):\n        digit = num%10\n        s += digit\n        num = num/10\n    return s\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n = N\n    while n * n <= N:\n        n = n + 1\n    return n * n\ndef getPermutation(n, k):\n    '''\n    Write a python function to find the permutation of a given number.\n    '''\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1,2]\n    permutation = [0]*n\n    arr = [1,2]\n    for i in range(2,n):\n        arr.append(i+1)\n    for i in range(0,n):\n        permutation[i] = arr[k/math.factorial(n-1)]\n        k = k % math.factorial(n-1)\n        if k == 0:\n            k = 1\n    return permutation\ndef generate_Permutations(n):\n    '''\n    Write a python function to generate all permutations of a given number.\n    '''\n    if n == 0:\n        return [[]]\n    else:\n        first_digit = 1\n        rest_digits = n-1\n        res = []\n        for i in range(0,n):\n            first_digit = 1\n            rest_digits = n-1\n            while rest_digits > 0:\n                rest_digits -= 1\n                first_digit += 1\n            for j in range(0,len(res)):\n                for k in range(0,first_digit):\n                    res.append(res[j]+[first_digit])\n        for i in range(0,len(res)):\n            res[i].append(n)\n        return res\ndef get_Consecutive_Permutation(n,k):\n    '''\n    Write a python function to find the consecutive permutations of a given number.\n    '''\n    if n == 0:\n        return [[]]\n    if k == 1:\n        return [[1],[2],[3],[4]]\n    if k == 2:\n        return [[1,2],[2,1],[3,4],[4,3]]\n    if k == 3:\n        return [[1,2,3],[2,1,3],[3,1,2],[1,3,2],[2,3,1],[3,2,1]]\n    if k == 4:\n        return [[1,2,3,4],[2,1,3,4],[3,1,2,4],[1,3,2,4],[2,3,1,4],[3,2,1,4]]\n    if k == 5:\n        return [[1,2,3,4,5],[2,1,3,4,5],[3,1,2,4,5],[1,3,2,4,5],[2,3,1,4,5],[3,2,1,4,5]]\n    if k == 6:\n        return [[1,2,3,4,5,6],[2,1,3,4,5,6],[3,1,2,4,5,6],[1,3,2,4,5,6],[2,3,1,4,5,6],[3,2,1,4,5,6]]\n    if k == 7:\n        return [[1,2,3,4,5,6,7],[2,1,3,4,5,6,7],[3,1,2,4,5,6,7],[1,3,2,4,5,6,7],[2,3,1,4,5,6,7],[3,2,1,4,5,6,7]]\n    if k == 8:\n        return [[1,2,3,4,5,6,7,8],[2,1,3,4,5,6,7,8],[3,1,2,4,5,6,7,8],[1,3,2,4,5,6,7,8],[2,3,1,4,5,6,7,8],[3,2,1,4,5,6,7,8]]\n    if k == 9:\n        return [[1,2,3,4,5,6,7,8,9],[2,1,3,4,5,6,7,8,9],[3,1,2,4,5,6,7,8,9],[1,3,2,4,5,6,7,8,9],[2,3,1,4,5,6,7,8,9],[3,2,1,4,5,6,7,8,9]]\n    if k == 10:\n        return [[1,2,3,4,5,6,7,8,9,10],[2,1,3,4,5,6,7,8,9,10],[3,1,2,4,5,6,7,8,9,10],[1,3,2,4,5,6,7,8,9,10],[2,3,1,4,5,6,7,8,9,10],[3,2,1,4,5,6,7,8,9,10]]\n    if k == 11:\n        return [[1,2,3,4,5,6,7,8,9,10,11],[2,1,3,4,5,6,7,8,9,10,11],[3,1,2,4,5,6,7,8,9,10,11],[1,3,2,4,5,6,7,8,9,10,11],[2,3,1,4,5,6,7,8,9,10,11],[3,2,1,4,5,6,7,8,9,10,11]]\n    if k == 12:\n        return [[1,2,3,4,5,6,7,8,9,10,11,12],[2,1,3,4,5,6,7,8,9,10,11,12],[3,1,2,4,5,6,7,8,9,10,11,12],[1,3,2,4,5,6,7,8,9,10,11,12],[2,3,1,4,5,6,7,8,9,10,11,12],[3,2,1,4,5,6,7,8,9,10,11,12]]\n    if k == 13:\n        return [[1,2,3,4,5,6,7,8,9,10,11,12,13],[2,1,3,4,5,6,7,8,9,10,11,12,13],[3,1,2,4,5,6,7,8,9,10,11,12,13],[1,3,2,4,5,6,7,8,9,10,11,12,13],[2,3,1,4,5,6,7,8,9,10,11,12,13],[3,2,1,4,5,6,7,8,9,10,11,12,13]]\n    if k == 14:\n        return [[1,2,3,4,5,6,7,8,9,10,11,12,13,14],[2,1,3,4,5,6,7,8,9,10,11,12,13,14],[3,1,2,4,5,6,7,8,9,10,11,12,13,14],[1,3,2,4,5,6,7,8,9,10,11,12,13,14],[2,3,1,4,5,6,7,8,9,10,11,12,13,14],[3,2,1,4,5,6,7,8,9,10,11,12,13,14]]\n    if k == 15:\n        return [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],[2,1,3,4,5,6,7,8,9,10,11,12,13,14,15],[3,1,2,4,5,6,7,8,9,10,11,12,13,14,15],[1,3,2,4,5,6,7,8,9,10,11,12,13,14,15],[2,3,1,4,5,6,7,8,9,10,11,12,13,14,15],[3,"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)))\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Check if the input number is a perfect square\n    # If so return the square root of the input number\n    # If not, return the first perfect square greater than the input number\n    if (N == 1 or N == 0):\n        return (N)\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i = N \n    while (i<=math.sqrt(N)): \n        if (i*i == N): \n            return (i+1) \n        i += 1\n    return (i+1) \n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = int(math.sqrt(N))\n    if root ** 2 == N:\n        return root + 1\n    return root + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N = int(N)\n    if N <= 0:\n        return None\n    if N == 1:\n        return None\n    else:\n        r = int(math.ceil(math.sqrt(N)))\n        if r**2 == N:\n            return r*r\n        else:\n            return r*r+1\n        \ndef isPerfectSquare(N):\n    '''\n    Write a python function to find if a number is perfect square or not.\n    '''\n    N = int(N)\n    if N < 0:\n        return False\n    if N == 0:\n        return True\n    else:\n        r = int(math.ceil(math.sqrt(N)))\n        if r**2 == N:\n            return True\n        else:\n            return False\ndef isFibonacci(N):\n    '''\n    Write a python function to find if a number is fibonacci or not.\n    '''\n    return isPerfectSquare(5*N*N+4) or isPerfectSquare(5*N*N-4)\n    \ndef isPentagonal(N):\n    '''\n    Write a python function to find if a number is pentagonal or not.\n    '''\n    return isPerfectSquare(1+math.sqrt(1+24*N))\n    \ndef isHeptagonal(N):\n    '''\n    Write a python function to find if a number is pentagonal or not.\n    '''\n    return isPerfectSquare(1+math.sqrt(1+8*N))\n    \ndef isOctagonal(N):\n    '''\n    Write a python function to find if a number is pentagonal or not.\n    '''\n    return isPerfectSquare(1+math.sqrt(1+12*N))\n    \ndef isHexagonal(N):\n    '''\n    Write a python function to find if a number is pentagonal or not.\n    '''\n    return isPerfectSquare(1+math.sqrt(1+8*N))\n    \ndef isNon_Perfect_Square(N):\n    '''\n    Write a python function to find if a number is perfect square or not.\n    '''\n    return isPerfectSquare(N) == False\n    \ndef isPrime(N):\n    '''\n    Write a python function to find if a number is prime or not.\n    '''\n    N = int(N)\n    if N <= 1:\n        return False\n    if N == 2:\n        return True\n    if N % 2 == 0:\n        return False\n    for i in range(3, int(math.ceil(math.sqrt(N)))+1, 2):\n        if N % i == 0:\n            return False\n    return True\n    \ndef isEuler_number(N):\n    '''\n    Write a python function to find if a number is euler number or not.\n    '''\n    return isPrime(N) and isNon_Perfect_Square(N)\n    \ndef sum_Digits(N):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    N = int(N)\n    sum = 0\n    while(N > 0):\n        sum += N % 10\n        N = N//10\n    return sum\n    \ndef isAbundant(N):\n    '''\n    Write a python function to find if a number is abundant or not.\n    '''\n    return sum_Digits(N) > N\n    \ndef isTriangular(N):\n    '''\n    Write a python function to find if a number is triangular or not.\n    '''\n    return isPerfectSquare(N*(N+1))\n    \ndef isPentagonal_and_Hexagonal(N):\n    '''\n    Write a python function to find if a number is hexagonal and pentagonal or not.\n    '''\n    return isPentagonal(N) and isHeptagonal(N)\n    \ndef isHexagonal_and_Pentagonal(N):\n    '''\n    Write a python function to find if a number is hexagonal and pentagonal or not.\n    '''\n    return isHeptagonal(N) and isPentagonal(N)\n    \ndef isTriangular_and_Pentagonal(N):\n    '''\n    Write a python function to find if a number is hexagonal and pentagonal or not.\n    '''\n    return isTriangular(N) and isPentagonal(N)\n    \ndef isTriangular_and_Hexagonal(N):\n    '''\n    Write a python function to find if a number is hexagonal and pentagonal or not.\n    '''\n    return isTriangular(N) and isHexagonal(N)\n    \ndef isPentagonal_and_Hexagonal_and_Triangular(N):\n    '''\n    Write a python function to find if a number is hexagonal and pentagonal and triangular or not.\n    '''\n    return isPentagonal(N) and isHexagonal(N) and isTriangular(N)\n    \ndef isPentagonal_and_Hexagonal_and_Pentagonal(N):\n    '''\n    Write a python function to find if a number is hexagonal and pentagonal and pentagonal or not.\n    '''\n    return isPentagonal(N) and isHexagonal(N) and isPentagonal(N)\n    \ndef isPentagonal_and_Hexagonal_and_Hexagonal(N):\n    '''\n    Write a python function to find if a number is hexagonal and pentagonal and hexagonal or not.\n    '''\n    return isPentagonal(N) and isHexagonal(N) and isHexagonal(N)\n    \ndef isPentagonal_and_Hexagonal_and_Triangular_and_Pentagonal(N):\n    '''\n    Write a python function to find if a number is hexagonal and pentagonal and hexagonal and triangular or not.\n    '''\n    return isPentagonal(N) and isHexagonal(N) and isTriangular(N) and isPentagonal(N)\n    \ndef isPentagonal_and_Hexagonal_and_Triangular_and_Hexagonal(N):\n    '''\n    Write a python function to find if a number is hexagonal and pentagonal and hexagonal and triangular or not.\n    '''\n    return isPentagonal(N) and isHexagonal(N) and isTriangular(N) and isHexagonal(N)\n    \ndef isPentagonal_and_Hexagonal_and_Triangular_and_Pentagonal_and_Hexagonal(N):\n    '''\n    Write a python function to find if a number is hexagonal and pentagonal and hexagonal and triangular and pentagonal or not.\n    '''\n    return isPentagonal(N) and isHexagonal(N) and isTriangular(N) and isPentagonal(N) and isHexagonal(N)\n    \ndef isPentagonal_and_Hexagonal_and_Pentagonal_and_Pentagonal(N):\n    '''\n    Write a python function to find if a number is hexagonal and pentagonal and pentagonal and pentagonal or not.\n    '''\n    return isPentagonal(N) and isHexagonal(N) and isPentagonal(N) and isPentagonal(N)\n    \ndef isPentagonal_and_Hexagonal_and_Pentagonal_and_Hexagonal_and_Triangular_and_Pentagonal(N):\n    '''\n    Write a python function to find if a number is hexagonal and pentagonal and pentagonal and hexagonal and triangular and pentagonal or not.\n    '''\n    return isPentagonal(N) and isHexagonal(N) and isPentagonal(N) and isHexagonal(N) and isTriangular(N) and isPentagonal(N)\n    \ndef isPentagonal_and_Hexagonal_and_Pentagonal_and_Hexagonal_and_Hexagonal_and_Triangular_and_Pentagonal(N):\n    '''\n    Write a python function to find if a number is hexagonal and pentagonal and hexagonal and hexagonal and triangular and pentagonal and hexagonal or not.\n    '''\n    return isPentagonal(N) and isHexagonal(N) and isPentagonal(N) and isHexagonal(N) and isTriangular(N) an"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)))\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    global l\n    l = len(arr)\n    return max_sum_aux(arr, 0, l-1)\n    \ndef max_sum_aux(arr, lo, hi):\n    if lo==hi:\n        return arr[lo]\n    mid = lo+((hi-lo)//2)\n    \n    left_sum = max_sum_aux(arr, lo, mid)\n    right_sum = max_sum_aux(arr, mid+1, hi)\n    \n    left_increasing = is_increasing(arr, lo, mid)\n    right_increasing = is_increasing(arr, mid+1, hi)\n    \n    if left_increasing and right_increasing:\n        return max(left_sum, right_sum)\n    elif left_increasing:\n        return left_sum\n    else:\n        return right_sum\n    \ndef is_increasing(arr, lo, hi):\n    if lo==hi:\n        return True\n    mid = lo+((hi-lo)//2)\n    if arr[mid]<arr[mid+1]:\n        return is_increasing(arr, mid+1, hi)\n    else:\n        return is_increasing(arr, lo, mid)\n        \ndef min_sum(arr): \n    '''\n    Write a function that takes an array and finds the minimum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    global l\n    l = len(arr)\n    return min_sum_aux(arr, 0, l-1)\n    \ndef min_sum_aux(arr, lo, hi):\n    if lo==hi:\n        return arr[lo]\n    mid = lo+((hi-lo)//2)\n    \n    left_sum = min_sum_aux(arr, lo, mid)\n    right_sum = min_sum_aux(arr, mid+1, hi)\n    \n    left_increasing = is_increasing(arr, lo, mid)\n    right_increasing = is_increasing(arr, mid+1, hi)\n    \n    if left_increasing and right_increasing:\n        return min(left_sum, right_sum)\n    elif left_increasing:\n        return left_sum\n    else:\n        return right_sum\n        \ndef longest_increasing(arr, lo, hi):\n    if lo==hi:\n        return lo\n    mid = lo+((hi-lo)//2)\n    left_longest = longest_increasing(arr, lo, mid)\n    right_longest = longest_increasing(arr, mid+1, hi)\n    \n    left_increasing = is_increasing(arr, lo, mid)\n    right_increasing = is_increasing(arr, mid+1, hi)\n    \n    if left_increasing and right_increasing:\n        return left_longest\n    elif left_increasing:\n        return left_longest\n    else:\n        return right_longest\n        \ndef longest_decreasing(arr, lo, hi):\n    if lo==hi:\n        return lo\n    mid = lo+((hi-lo)//2)\n    left_longest = longest_decreasing(arr, lo, mid)\n    right_longest = longest_decreasing(arr, mid+1, hi)\n    \n    left_increasing = is_increasing(arr, lo, mid)\n    right_increasing = is_increasing(arr, mid+1, hi)\n    \n    if left_increasing and right_increasing:\n        return right_longest\n    elif left_increasing:\n        return left_longest\n    else:\n        return right_longest\n        \ndef max_length(arr, lo, hi):\n    if lo==hi:\n        return 1\n    mid = lo+((hi-lo)//2)\n    left_length = max_length(arr, lo, mid)\n    right_length = max_length(arr, mid+1, hi)\n    \n    left_increasing = is_increasing(arr, lo, mid)\n    right_increasing = is_increasing(arr, mid+1, hi)\n    \n    if left_increasing and right_increasing:\n        return max(left_length, right_length)\n    elif left_increasing:\n        return left_length+1\n    else:\n        return right_length+1\n        \ndef min_length(arr, lo, hi):\n    if lo==hi:\n        return 1\n    mid = lo+((hi-lo)//2)\n    left_length = min_length(arr, lo, mid)\n    right_length = min_length(arr, mid+1, hi)\n    \n    left_increasing = is_increasing(arr, lo, mid)\n    right_increasing = is_increasing(arr, mid+1, hi)\n    \n    if left_increasing and right_increasing:\n        return min(left_length, right_length)\n    elif left_increasing:\n        return left_length+1\n    else:\n        return right_length+1\n        \ndef max_length_subsequence(arr, lo, hi):\n    '''\n    Write a function that takes an array and returns the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    global l\n    l = len(arr)\n    return max_length_subsequence_aux(arr, 0, l-1)\n    \ndef max_length_subsequence_aux(arr, lo, hi):\n    if lo==hi:\n        return lo\n    mid = lo+((hi-lo)//2)\n    left_length = max_length_subsequence_aux(arr, lo, mid)\n    right_length = max_length_subsequence_aux(arr, mid+1, hi)\n    \n    left_increasing = is_increasing(arr, lo, mid)\n    right_increasing = is_increasing(arr, mid+1, hi)\n    \n    if left_increasing and right_increasing:\n        return max(left_length, right_length)\n    elif left_increasing:\n        return left_length+1\n    else:\n        return right_length+1\n        \ndef min_length_subsequence(arr, lo, hi):\n    '''\n    Write a function that takes an array and returns the minimum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    global l\n    l = len(arr)\n    return min_length_subsequence_aux(arr, 0, l-1)\n    \ndef min_length_subsequence_aux(arr, lo, hi):\n    if lo==hi:\n        return lo\n    mid = lo+((hi-lo)//2)\n    left_length = min_length_subsequence_aux(arr, lo, mid)\n    right_length = min_length_subsequence_aux(arr, mid+1, hi)\n    \n    left_increasing = is_increasing(arr, lo, mid)\n    right_increasing = is_increasing(arr, mid+1, hi)\n    \n    if left_increasing and right_increasing:\n        return min(left_length, right_length)\n    elif left_increasing:\n        return left_length+1\n    else:\n        return right_length+1\n        \ndef contains_bitonic(arr, lo, hi):\n    '''\n    Write a function that takes an array and returns True if there is at least one bitonic sub-sequence in the array, else returns False.\n    '''\n    global l\n    l = len(arr)\n    return contains_bitonic_aux(arr, 0, l-1)\n    \ndef contains_bitonic_aux(arr, lo, hi):\n    if lo==hi:\n        return lo\n    mid = lo+((hi-lo)//2)\n    left_increasing = is_increasing(arr, lo, mid)\n    right_increasing = is_increasing(arr, mid+1, hi)\n    \n    if left_increasing and right_increasing:\n        return contains_bitonic_aux(arr, lo, mid) or contains_bitonic_aux(arr, mid+1, hi)\n    elif left_increasing:\n        return contains_bitonic_aux(arr, lo, mid)\n    else:\n        return contains_bitonic_aux(arr, mid+1, hi)\n        "
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    increasing = [x for x in arr if x > arr[0]]\n    decreasing = [x for x in arr if x < arr[0]]\n    increasing_max = max(increasing)\n    decreasing_max = max(decreasing)\n    total_max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > total_max:\n            total_max = arr[i]\n        elif arr[i] < increasing_max:\n            increasing_max = arr[i]\n        elif arr[i] < decreasing_max:\n            decreasing_max = arr[i]\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # if len(arr) <= 1: \n    #     return 0\n    # arr_max = arr[0]\n    # for num in arr: \n    #     arr_max = max(num, arr_max + num)\n    # return arr_max\n    \n    \n    # arr_max = arr[0]\n    # for num in arr[1:]: \n    #     arr_max = max(arr_max, arr_max + num, num)\n    # return arr_max\n    \n    # arr_max = arr[0]\n    # for i in xrange(1, len(arr)): \n    #     arr_max = max(arr[i], arr_max + arr[i])\n    # return arr_max\n    \n    # arr_max = arr[0]\n    # for i in xrange(1, len(arr)): \n    #     arr_max = max(arr_max + arr[i], arr[i])\n    # return arr_max\n    \n    # arr_max = arr[0]\n    # i = 1\n    # while i < len(arr): \n    #     arr_max = max(arr_max + arr[i], arr[i])\n    #     if arr_max < arr[i - 1]: \n    #         i += 1\n    #     else: \n    #         i -= 1\n    # return arr_max\n    \n    arr_max = arr[0]\n    arr_min = arr[0]\n    \n    for num in arr: \n        arr_max = max(arr_max + num, num)\n        arr_min = min(arr_min + num, num)\n    return arr_max\n    \n    "
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    arr = sorted(arr)\n    increasing = True\n    result = 0\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            result += arr[i] - arr[i-1]\n        else:\n            increasing = False\n    if increasing:\n        return result\n    return result + arr[0]\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    left = [0]*len(arr)\n    maxi = 0\n    max_left = 0\n    \n    for i in range(len(arr)):\n        maxi = max(arr[i],maxi)\n        left[i] = maxi\n    \n    right = [0]*len(arr)\n    maxi = 0\n    max_right = 0\n    \n    for i in reversed(range(len(arr))):\n        maxi = max(arr[i],maxi)\n        right[i] = maxi\n        \n    maxi = 0\n    \n    for i in range(len(arr)):\n        maxi = max(left[i],right[i],maxi)\n        if maxi < 0:\n            maxi = 0\n    \n    return maxi\n    \ndef is_all_same(arr):\n    '''\n    Write a function that returns true if all the elements of an array are the same, otherwise it returns false.\n    '''\n    \n    for i in range(len(arr)-1):\n        if arr[i]!= arr[i+1]:\n            return False\n    \n    return True\n    \ndef max_product(arr):\n    '''\n    Write a function that takes an array of numbers and returns the maximum possible product of two elements of the array.\n    '''\n    \n    maxi = 1\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            maxi = max(maxi,arr[i]*arr[j])\n    \n    return maxi\n    \ndef count_bits(arr):\n    '''\n    Write a function that takes an array of positive numbers and returns a number representing the number of 1 bits in the number.\n    '''\n    \n    count = 0\n    \n    for i in range(len(arr)):\n        count += arr[i]%2\n        \n    return count\n    \ndef hamming_distance(arr1,arr2):\n    '''\n    Write a function that calculates the Hamming distance between two arrays of integers. Hamming distance is the number of positions at which the two arrays differ.\n    '''\n    \n    count = 0\n    \n    for i in range(len(arr1)):\n        if arr1[i]!= arr2[i]:\n            count += 1\n    \n    return count\n    \ndef rearrange(arr):\n    '''\n    Write a function that rearranges an array of numbers to obtain a new array that is sorted in ascending order. The original array is not changed.\n    '''\n    \n    for i in range(len(arr)):\n        for j in reversed(range(i+1,len(arr))):\n            if arr[i] > arr[j]:\n                arr[i],arr[j] = arr[j],arr[i]\n                \n    return arr\n    \ndef minimum_swaps(arr):\n    '''\n    Write a function that takes an array of positive integers and returns the minimum number of swaps to sort the array in ascending order.\n    '''\n    \n    swaps = 0\n    \n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                arr[i],arr[j] = arr[j],arr[i]\n                swaps += 1\n                \n    return swaps\n    \ndef is_all_same_binary(arr):\n    '''\n    Write a function that returns true if all the elements of an array are the same, otherwise it returns false.\n    '''\n    \n    for i in range(len(arr)-1):\n        if arr[i]!= arr[i+1]&arr[i+1]:\n            return False\n    \n    return True\n    \ndef max_pairwise_product(arr):\n    '''\n    Write a function that takes an array of integers and returns the maximum pairwise product.\n    '''\n    \n    maxi = arr[0]\n    for i in range(len(arr)):\n        maxi = max(maxi,arr[i])\n    \n    return maxi\n    \ndef find_duplicates(arr):\n    '''\n    Write a function that takes an array of distinct integers and returns an array of the indices of those integers.\n    '''\n    \n    duplicates = []\n    \n    for i in range(len(arr)):\n        if arr[abs(arr[i])] < 0:\n            duplicates.append(abs(arr[i]))\n        else:\n            arr[abs(arr[i])] = -arr[abs(arr[i])]\n            \n    return duplicates\n    \ndef max_subarray(arr):\n    '''\n    Write a function that takes an array of numbers and returns the maximum sum of any contiguous subarray.\n    '''\n    \n    maxi = 0\n    max_so_far = 0\n    \n    for i in range(len(arr)):\n        maxi += arr[i]\n        max_so_far = max(max_so_far,maxi)\n        \n        if maxi < 0:\n            maxi = 0\n            \n    return max_so_far\n    \ndef valid_parenthesis(string):\n    '''\n    Write a function that takes a string of balanced parenthesis and returns true if the string is valid and balanced, otherwise it returns false. For example, \"(())\" is a valid string while \")()(\", and \"(()(\", and \"))((\" are not.\n    '''\n    \n    stack = []\n    \n    for i in range(len(string)):\n        if string[i] == \"(\":\n            stack.append(\"(\")\n        elif string[i] == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n                \n    if len(stack) == 0:\n        return True\n    else:\n        return False\n    \ndef is_prime(num):\n    '''\n    Write a function that takes an integer and returns true if the integer is prime, otherwise it returns false.\n    '''\n    \n    if num < 2:\n        return False\n    \n    for i in range(2,num):\n        if num%i == 0:\n            return False\n    \n    return True\n    \ndef reverse_array(arr):\n    '''\n    Write a function that takes an array of numbers and returns an array of the same length where the elements at each index are the same as the original array, but in reverse order.\n    '''\n    \n    for i in range(len(arr)//2):\n        arr[i],arr[len(arr)-1-i] = arr[len(arr)-1-i],arr[i]\n        \n    return arr\n    \ndef max_frequency_element(arr):\n    '''\n    Write a function that takes an array of numbers and returns the element that occurs the most often in the array.\n    '''\n    \n    maxi = 0\n    max_count = 0\n    \n    for i in range(len(arr)):\n        curr_count = 1\n        if arr[i] == arr[i-1]:\n            curr_count += 1\n        if curr_count > max_count:\n            maxi = arr[i]\n            max_count = curr_count\n    \n    return maxi\n    \ndef rotate_array(arr,rotations):\n    '''\n    Write a function that takes an array of numbers and returns a new array with the elements of the original array rotated K times (where K is the number of rotations).\n    '''\n    \n    if rotations >= len(arr):\n        rotations %= len(arr)\n        \n    for i in range(rotations):\n        temp = arr[0]\n        for j in range(len(arr)-1):\n            arr[j] = arr[j+1]\n        arr[len(arr)-1] = temp\n        \n    return arr\n    \ndef find_rotations(arr):\n    '''\n    Write a function that takes an array of numbers and returns the indices of the two numbers that have the smallest difference.\n    '''\n    \n    arr = sorted(arr)\n    \n    for i in range(len(arr)):\n        if arr[i] == arr[0]:\n            return i,i\n        \n    return -1,-1\n    \nde"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    sums = [0 for i in range(n)]\n    \n    # create sums[i] using following formula\n    # sums[i] = max(arr[i], arr[i] + sums[i-1])\n    # we can create sums[i] using arr[i] itself\n    \n    # initialize sum[0] as 0\n    sums[0] = arr[0]\n    \n    # initialize sum[1] as arr[1]\n    sums[1] = arr[1]\n    \n    # initialize sums[2] to arr[2]\n    if arr[2] > arr[1]:\n        sums[2] = arr[2]\n    else:\n        sums[2] = arr[1]\n    \n    # update sums[i] for i > 1, using the following formula\n    # sums[i] = max(arr[i], arr[i] + sums[i-1], arr[i] + sums[i-2], etc.)\n    # we can use sums[i-1], sums[i-2], sums[i-3], etc.\n    for i in range(2, n):\n        sums[i] = max(arr[i], arr[i] + sums[i-1], arr[i] + sums[i-2], arr[i] + sums[i-3], arr[i] + sums[i-4], arr[i] + sums[i-5])\n    \n    return sums[n-1]\n    \n    \nprint max_sum([1,3,-1,-3,5,3,6,7])\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # dp[i] is max sum of bitonic subsequence from index 0 to i \n    # if arr[i] is less than arr[i-1] or arr[i] is greater than arr[i+1], we can choose to take the max of dp[i-1] and dp[i+1]\n    # if arr[i] is less than arr[i-1] and arr[i] is greater than arr[i+1], we can choose to take the max of dp[i-1] and arr[i]\n    # if arr[i] is less than arr[i+1] and arr[i] is greater than arr[i-1], we can choose to take the max of arr[i] and dp[i+1]\n    \n    n = len(arr)\n    if n <= 2:\n        return 0\n    if n == 3:\n        return max(arr[0], arr[1])\n    \n    max_ending_here = [0]*n\n    max_ending_here[0] = arr[0]\n    max_ending_here[1] = max(arr[0], arr[1])\n    \n    for i in xrange(2, n):\n        max_ending_here[i] = max(max_ending_here[i-2] + arr[i], max_ending_here[i-1])\n    \n    return max_ending_here[-1]\n    \nif __name__ == \"__main__\":\n    arr = [3, 7, 4, 12, 11, 10, 1, 6, 2]\n    print max_sum(arr)\n    \n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print max_sum(arr)\n    \n    arr = [100, -1, -100]\n    print max_sum(arr)\n    \n    arr = [1, -2, -1, -4, -5, -8, -3, -9]\n    print max_sum(arr)"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    left_max = [0] * len(arr)\n    left_max[0] = arr[0]\n    for i in xrange(1, len(arr)):\n        left_max[i] = max(left_max[i-1], arr[i])\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    i = 0\n    length = len(arr)\n    while i < length:\n        curr_sum = arr[i]\n        j = i + 1\n        while j < length:\n            curr_sum += arr[j]\n            j += 1\n            if max_sum < curr_sum:\n                max_sum = curr_sum\n        i += 1\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # 1. create a hashmap that will store the max sum at each index\n    # 2. sort the array\n    # 3. traverse the array, for each index:\n    # 4.    if the next index is less than the current index, then the max sum is the max of the max sum of the previous subarray and the current index max sum + the current index\n    # 5.    if the next index is greater than the current index, then the max sum is the max of the max sum of the previous subarray and the current index max sum\n    max_sum = 0\n    for index in range(1, len(arr)):\n        if arr[index] < arr[index - 1]:\n            max_sum = max(max_sum, max_sum + arr[index - 1])\n        else:\n            max_sum = max(max_sum, arr[index - 1])\n    return max_sum\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    epsilon = 0.000001\n    t = 1\n    while True:\n        t = (x + number / x) / 2\n        if abs(t - x) < epsilon:\n            break\n        x = t\n    return t\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    babylonian_root = 0.0\n    while (babylonian_root**2.0) < number:\n        babylonian_root += 0.01\n    return babylonian_root\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError('Must be a positive number')\n    else:\n        # initialize the initial guess\n        guess = 1\n        # find a guess where the absolute value difference is 0.5\n        while abs(guess**2 - number) > 0.5:\n            guess = (guess + number/guess) / 2\n        return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2.0\n    while abs(guess*guess - number) > 0.000001:\n        guess = (guess + number/guess)/2.0\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    import math\n    return math.sqrt(number)\n    \ndef squareroot(number):\n    '''\n    Write a function for computing square roots using a Newton-Raphson method.\n    '''\n    import math\n    guess = number / 2.0\n    tolerance = 0.000001\n    while True:\n        approx = guess - ((guess**2) - number) / (2 * guess)\n        if abs(approx - guess) < tolerance:\n            return approx\n        guess = approx\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    from math import sqrt\n    # Base case, when number is 1\n    if number == 1:\n        return 1\n    # Recursive case\n    else:\n        # Equation for a given number\n        equation = (number - 1) * number / 2\n        # Compute the square root\n        result = sqrt(equation) + 1\n        return result\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number <= 0:\n        return None\n    guess = number / 2\n    for i in xrange(3):\n        guess = (guess + number / guess) / 2\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number\n    while True:\n        if guess*guess == number:\n            return guess\n        guess = (guess + (number/guess))/2\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return 0.5 * (number - number % 1 + 1)\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2.0\n    difference = guess**2 - number\n    while abs(difference) > 0.001:\n        guess = guess - ((guess**2 - number) / (2.0 * guess))\n        difference = guess**2 - number\n    return guess\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 0:\n        return 0\n    elif len(str) == 1:\n        return 1\n    else:\n        f = [[0 for x in range(len(str))] for x in range(len(str))]\n        for i in range(len(str)):\n            f[i][i] = 1\n            if i > 0:\n                f[i][i-1] = 1\n        for start in range(len(str)-2, -1, -1):\n            for end in range(start+1, len(str)):\n                if str[start] == str[end]:\n                    f[start][end] = 2 + f[start+1][end-1]\n                else:\n                    f[start][end] = max(f[start][end-1], f[start+1][end])\n        return f[0][len(str)-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n    # L[i][j] = LPS of str[i..j] \n    maxLPSLength = 1\n    for i in range(n): \n        L[i][i] = 1\n    for cl in range(2,n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if cl==2 and str[i]==str[j]: \n                L[i][j] = 2\n            elif str[i]==str[j]: \n                L[i][j] = 2 + L[i+1][j-1]\n            else: \n                L[i][j] = max(L[i][j-1],L[i+1][j])\n            if L[i][j] > maxLPSLength: \n                maxLPSLength = L[i][j]\n    return maxLPSLength\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    N = len(str)\n    P = [[0 for x in xrange(N)] for x in xrange(N)]\n    for i in xrange(N):\n        P[i][i] = 1\n    for i in xrange(N-1):\n        if str[i] == str[i+1]:\n            P[i][i+1] = 2\n    for i in xrange(2, N):\n        for j in xrange(N-i):\n            if str[j] == str[j+i] and P[j+1][j+i-1] > 1:\n                P[j][j+i] = 2 + P[j+1][j+i-1]\n            else:\n                P[j][j+i] = max(P[j][j+i-1], P[j+1][j+i])\n    return P[0][N-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) < 2: \n        return len(str)\n    result = [1] * len(str)\n    for i in range(1, len(str)):\n        for j in range(i):\n            if str[j] == str[i] and (result[j] + 1 > result[i]):\n                result[i] = result[j] + 1\n    return result[-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    L = [[0 for x in xrange(n)] for x in xrange(n)]\n    for i in xrange(n):\n        L[i][i] = 1\n    for i in xrange(n-1):\n        if str[i] == str[i+1]:\n            L[i][i+1] = 2\n    for i in xrange(2,n):\n        for j in xrange(n-i):\n            if (str[j]==str[j+i] and L[j+1][j+i-1]==2):\n                L[j][j+i] = 2+L[j+1][j+i-1]\n            elif(str[j]!=str[j+i]):\n                L[j][j+i] = max(L[j][j+i-1], L[j+1][j+i])\n    return L[0][n-1]\n    \ndef len_longest_palindromic_subsequence(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    L = [[0 for x in xrange(n)] for x in xrange(n)]\n    for i in xrange(n):\n        L[i][i] = 1\n    for i in xrange(n-1):\n        if str[i] == str[i+1]:\n            L[i][i+1] = 2\n    for i in xrange(2,n):\n        for j in xrange(n-i):\n            if (str[j]==str[j+i] and L[j+1][j+i-1]==2):\n                L[j][j+i] = 2+L[j+1][j+i-1]\n            elif(str[j]!=str[j+i]):\n                L[j][j+i] = max(L[j][j+i-1], L[j+1][j+i])\n    return L[0][n-1]\n    \ndef len_longest_palindromic_subsequence_kmp(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    L = [[0 for x in xrange(n)] for x in xrange(n)]\n    for i in xrange(n):\n        L[i][i] = 1\n    for i in xrange(n-1):\n        if str[i] == str[i+1]:\n            L[i][i+1] = 2\n    for i in xrange(2,n):\n        for j in xrange(n-i):\n            if (str[j]==str[j+i] and L[j+1][j+i-1]==2):\n                L[j][j+i] = 2+L[j+1][j+i-1]\n            elif(str[j]!=str[j+i]):\n                L[j][j+i] = max(L[j][j+i-1], L[j+1][j+i])\n    return L[0][n-1]\n    \ndef len_longest_palindromic_subsequence_tab(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    L = [[0 for x in xrange(n)] for x in xrange(n)]\n    for i in xrange(n):\n        L[i][i] = 1\n    for i in xrange(n-1):\n        if str[i] == str[i+1]:\n            L[i][i+1] = 2\n    for i in xrange(2,n):\n        for j in xrange(n-i):\n            if (str[j]==str[j+i] and L[j+1][j+i-1]==2):\n                L[j][j+i] = 2+L[j+1][j+i-1]\n            elif(str[j]!=str[j+i]):\n                L[j][j+i] = max(L[j][j+i-1], L[j+1][j+i])\n    return L[0][n-1]\n    \ndef len_longest_palindromic_subsequence_dyn(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    L = [[0 for x in xrange(n)] for x in xrange(n)]\n    for i in xrange(n):\n        L[i][i] = 1\n    for i in xrange(n-1):\n        if str[i] == str[i+1]:\n            L[i][i+1] = 2\n    for i in xrange(2,n):\n        for j in xrange(n-i):\n            if (str[j]==str[j+i] and L[j+1][j+i-1]==2):\n                L[j][j+i] = 2+L[j+1][j+i-1]\n            elif(str[j]!=str[j+i]):\n                L[j][j+i] = max(L[j][j+i-1], L[j+1][j+i])\n    return L[0][n-1]\n    \ndef len_longest_palindromic_subsequence_dp(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    L = [[0 for x in xrange(n)] for x in xrange(n)]\n    for i in xrange(n):\n        L[i][i] = 1\n    for i in xrange(n-1):\n        if str[i] == str[i+1]:\n            L[i][i+1] = 2\n    for i in xrange(2,n):\n        for j in xrange(n-i):\n            if (str[j]==str[j+i] and L[j+1][j+i-1]==2):\n                L[j][j+i] = 2+L[j+1][j+i-1]\n            elif(str[j]!=str[j+i]):\n                L[j][j+i] = max(L[j][j+i-1], L[j+1][j+i])\n    return L[0][n-1]\n    \ndef len_longest_palindromic_subsequence_dp_tab(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    L = [[0 for x in xrange(n)] for x in xrange(n)]\n    for i in xrange(n):\n        L[i][i] = 1\n    for i in xrange(n-1):\n        if str[i] == str[i+1]:\n            L[i][i+1] = 2\n    for i in xrange(2,n):\n        for j in xrange(n-i):\n            if (str[j]==str[j+i] and L[j+1][j+i-1]==2):\n                L[j][j+i] = 2+L[j+1][j+i-1]\n            elif(str[j]!=str[j+i]):\n                L[j][j+i] = max(L[j][j+i-1], L[j+1][j+i])\n    return L[0][n-1]\n    \ndef len_longest_palindromic_subsequence_dp_tab2(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    L = [[0 for x in xrange(n)] for x in xrange(n)]"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) <= 1:\n        return len(str)\n    if len(str) == 2:\n        if str[0] == str[1]:\n            return 2\n        else:\n            return 1\n    if len(str) == 3:\n        if str[0] == str[1] and str[1] == str[2]:\n            return 3\n        else:\n            return 2\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    t = [[0 for i in range(n)] for j in range(n)] \n    for i in range(n): \n        t[i][i] = 1\n    maxLength = 1\n    for startIndex in range(n - 1): \n        if (str[startIndex] == str[startIndex + 1]): \n            t[startIndex][startIndex + 1] = 2\n            maxLength = 2\n    for k in range(3, n + 1): \n        for i in range(n - k + 1): \n            j = i + k - 1\n            if (str[i] == str[j] and k > 2): \n                t[i][j] = t[i + 1][j - 1] + 2\n                maxLength = max(maxLength, t[i][j]) \n            elif (str[i] == str[j]): \n                t[i][j] = t[i + 1][j - 1] + 1\n                maxLength = max(maxLength, t[i][j]) \n    return maxLength\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if not str:\n        return 0\n    # longest palindrome sequence can't be longer than string\n    n = len(str)\n    # table[i][j] stores the length of LPS ending with str[i..j]\n    table = [[0 for i in range(n)] for j in range(n)]\n    max_len = 1\n    # longest palindrome can't be made of only single character\n    for i in range(n):\n        table[i][i] = 1\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            table[i][i+1] = 2\n            max_len = 2\n    # we need to include string[i..j] and string[i+1..j-1] in LPS\n    for i in range(3, n+1):\n        for j in range(n-i+1):\n            if str[j] == str[j+i-1] and table[j+1][j+i-2] > 0:\n                table[j][j+i-1] = table[j+1][j+i-2]+2\n                max_len = max(max_len, table[j][j+i-1])\n    return max_len\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in xrange(n)] for j in xrange(n)]\n    for i in xrange(n):\n        dp[i][i] = 1\n    for i in xrange(n-1,-1,-1):\n        for j in xrange(i+1,n):\n            if str[i]==str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1],dp[i+1][j])\n    return dp[0][n-1]\n    \ndef lps_2(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in xrange(n)] for j in xrange(n)]\n    for i in xrange(n):\n        dp[i][i] = 1\n    for i in xrange(n-1,-1,-1):\n        for j in xrange(i+1,n):\n            if str[i]==str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1],dp[i+1][j])\n    return dp[0][n-1]\ndef lps_3(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in xrange(n)] for j in xrange(n)]\n    for i in xrange(n):\n        dp[i][i] = 1\n    for i in xrange(n-1,-1,-1):\n        for j in xrange(i+1,n):\n            if str[i]==str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1],dp[i+1][j])\n    return dp[0][n-1]\ndef lps_4(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in xrange(n)] for j in xrange(n)]\n    for i in xrange(n):\n        dp[i][i] = 1\n    for i in xrange(n-1,-1,-1):\n        for j in xrange(i+1,n):\n            if str[i]==str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1],dp[i+1][j])\n    return dp[0][n-1]\ndef lps_5(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in xrange(n)] for j in xrange(n)]\n    for i in xrange(n):\n        dp[i][i] = 1\n    for i in xrange(n-1,-1,-1):\n        for j in xrange(i+1,n):\n            if str[i]==str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1],dp[i+1][j])\n    return dp[0][n-1]\ndef lps_6(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in xrange(n)] for j in xrange(n)]\n    for i in xrange(n):\n        dp[i][i] = 1\n    for i in xrange(n-1,-1,-1):\n        for j in xrange(i+1,n):\n            if str[i]==str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1],dp[i+1][j])\n    return dp[0][n-1]\ndef lps_7(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in xrange(n)] for j in xrange(n)]\n    for i in xrange(n):\n        dp[i][i] = 1\n    for i in xrange(n-1,-1,-1):\n        for j in xrange(i+1,n):\n            if str[i]==str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1],dp[i+1][j])\n    return dp[0][n-1]\ndef lps_8(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in xrange(n)] for j in xrange(n)]\n    for i in xrange(n):\n        dp[i][i] = 1\n    for i in xrange(n-1,-1,-1):\n        for j in xrange(i+1,n):\n            if str[i]==str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1],dp[i+1][j])\n    return dp[0][n-1]\ndef lps_9(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in xrange(n)] for j in xrange(n)]\n    for i in xrange(n):\n        dp[i][i] = 1\n    for i in xrange(n-1,-1,-1):\n        for j in xrange(i+1,n):\n            if str[i]==str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1],dp[i+1][j])\n    return dp[0][n-1]\ndef lps_10(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in xrange(n)] for j in xrange(n)]\n    for i in xrange(n):\n        dp[i][i] = 1\n    for i in xrange(n-1,-1,-1):\n        for j in xrange(i+1,n):\n            if str[i]==str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1],dp[i+1][j])\n    return dp[0][n-1]\ndef lps_11(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in xrange(n)] for j in xrange"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) < 2:\n        return len(str)\n    n = len(str)\n    dp = [[0 for x in range(n)] for x in range(n)]\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Your code here\n    return 1 / n\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # The harmonic sum is (1 / 1) + (1 / 2) + (1 / 3) +... + (1 / n)\n    # The harmonic sum is the sum of 1 / i for i from 1 to n\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # 1 / n is a constant\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # 1 / n is a constant\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # 1 / n is a constant\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # 1 / n is a constant\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # 1 / n is a constant\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # 1 / n is a constant\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # 1 / n is a constant\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # 1 / n is a constant\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # 1 / n is a constant\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # 1 / n is a constant\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # 1 / n is a constant\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # 1 / n is a constant\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # 1 / n is a constant\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # 1 / n is a constant\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # 1 / n is a constant\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # 1 / n is a constant\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # 1 / n is a constant\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # 1 / n is a constant\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # 1 / n is a constant\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # 1 / n is a constant\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # 1 / n is a constant\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # 1 / n is a constant\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # 1 / n is a constant\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # 1 / n is a constant\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # 1 / n is a constant\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # The formula for n is (1 / n) * (n / (n + 1))\n    # 1 / n is a constant\n    # The formula for n is (1 "
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    return 1 + (harmonic_sum(n-1))\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n + harmonic_sum(n-1) if n > 0 else 1\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    \n    # your code here\n    if n == 0:\n        return 0\n    return 1/n + harmonic_sum(n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 0:\n        return False\n    return 1 / n + harmonic_sum(n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    num_intersecting = 0\n    intersecting_array = []\n    for num1 in array_nums1:\n        for num2 in array_nums2:\n            if num1 == num2:\n                num_intersecting += 1\n                intersecting_array.append(num1)\n    return num_intersecting,intersecting_array\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_list = []\n    # Your Code Here\n    for elem in array_nums1:\n        if elem in array_nums2:\n            intersection_list.append(elem)\n    return intersection_list\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersect_array = []\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return [item for item in array_nums1 if item in array_nums2]\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result_arr = []\n    for num1 in array_nums1:\n        if num1 in array_nums2:\n            result_arr.append(num1)\n    return result_arr\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1)==0 or len(array_nums2)==0:\n        return []\n    if array_nums1[-1]<array_nums2[-1]:\n        return intersection_array(array_nums2,array_nums1)\n    mid_point = int(len(array_nums1)/2)\n    left_array = array_nums1[:mid_point]\n    right_array = array_nums1[mid_point:]\n    left_array_length = len(left_array)\n    right_array_length = len(right_array)\n    if array_nums1[mid_point]<array_nums2[mid_point]:\n        return intersection_array(right_array,array_nums2) + [array_nums2[mid_point]] + intersection_array(left_array,array_nums1)\n    else:\n        return intersection_array(left_array,array_nums1) + [array_nums1[mid_point]] + intersection_array(right_array,array_nums2)\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = []\n    for num in array_nums1:\n        if num in array_nums2:\n            res.append(num)\n    return res\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_arr = []\n    for num1 in array_nums1:\n        if num1 in array_nums2:\n            intersection_arr.append(num1)\n    return intersection_arr\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # time complexity O(n)\n    # space complexity O(n)\n    #intersection array = array_nums1 + array_nums2\n    return set(array_nums1) & set(array_nums2)\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    \n    #Since arrays are not in use, assume that we can use an array as a list\n    #Use the set data structure to handle the intersection\n    intersection_array = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection_array.append(num)\n    return intersection_array\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    \n    tup_count = 0\n    for i in tup:\n        if i == x:\n            tup_count += 1\n    return tup_count\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n    \ndef find_highest_count_X(tup):\n    '''\n    Write a python function that takes in a tuple and returns the element that has the highest count of the element in the tuple.\n    '''\n    return max(tup, key = count_X)\n    \ndef count_Y(tup, y): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(y)\n    \ndef find_highest_count_Y(tup):\n    '''\n    Write a python function that takes in a tuple and returns the element that has the highest count of the element in the tuple.\n    '''\n    return max(tup, key = count_Y)\n    \ndef combine_XY(x,y):\n    '''\n    Write a python function that takes in two elements and returns a tuple of the element that has the highest count of the element in the tuple.\n    '''\n    return (x,y)\n    \ndef find_highest_combined_XY(tup):\n    '''\n    Write a python function that takes in a tuple and returns the element that has the highest count of the element in the tuple.\n    '''\n    return max(tup, key = combine_XY)\n    \ndef replace_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and returns a tuple with the element in the first position and the element in the second position replaced with the element in the first position.\n    '''\n    temp = tup[:]\n    temp[temp.index(x)] = tup[0]\n    temp[0] = x\n    return tuple(temp)\n    \ndef replace_Y(tup, y):\n    '''\n    Write a python function that takes in a tuple and an element and returns a tuple with the element in the first position and the element in the second position replaced with the element in the first position.\n    '''\n    temp = tup[:]\n    temp[temp.index(y)] = tup[1]\n    temp[1] = y\n    return tuple(temp)\n    \ndef replace_X_and_Y(tup, x, y):\n    '''\n    Write a python function that takes in a tuple and two elements and returns a tuple with the element in the first position and the element in the second position replaced with the element in the first position.\n    '''\n    temp = tup[:]\n    temp[temp.index(x)] = tup[0]\n    temp[temp.index(y)] = tup[1]\n    temp[0] = x\n    temp[1] = y\n    return tuple(temp)\n    \ndef replace_all_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and returns a tuple with all occurrences of the element in the tuple replaced with the element in the first position.\n    '''\n    temp = tup[:]\n    temp = tuple(x if x!= tup[0] else x for x in temp)\n    return temp\n    \ndef replace_all_Y(tup, y):\n    '''\n    Write a python function that takes in a tuple and an element and returns a tuple with all occurrences of the element in the tuple replaced with the element in the first position.\n    '''\n    temp = tup[:]\n    temp = tuple(y if y!= tup[1] else y for y in temp)\n    return temp\n    \ndef replace_all_XY(tup, x, y):\n    '''\n    Write a python function that takes in a tuple and two elements and returns a tuple with all occurrences of the element in the tuple replaced with the element in the first position.\n    '''\n    temp = tup[:]\n    temp = tuple(x if x!= tup[0] else y for x, y in temp)\n    return temp\n    \ndef alternate_combine_XY(x,y):\n    '''\n    Write a python function that takes in two elements and returns a tuple of the element that has the highest count of the element in the tuple.\n    '''\n    return (x,y) if x > y else (y,x)\n    \ndef alternate_combine_XY_index(x,y):\n    '''\n    Write a python function that takes in two elements and returns a tuple of the element that has the highest count of the element in the tuple.\n    '''\n    return (x,y) if x > y else (y,x)\n    \ndef alternate_combine_XY_dict(x,y):\n    '''\n    Write a python function that takes in two elements and returns a tuple of the element that has the highest count of the element in the tuple.\n    '''\n    return (x,y) if x > y else (y,x)\n    \ndef count_XY(tup, x, y):\n    '''\n    Write a python function that takes in a tuple and two elements and returns the occurences of the element in the tuple.\n    '''\n    return tup.count(x) + tup.count(y)\n    \ndef find_highest_count_XY(tup):\n    '''\n    Write a python function that takes in a tuple and returns the element that has the highest count of the element in the tuple.\n    '''\n    return max(tup, key = count_XY)\n    \ndef alternate_combine_XY_2(x,y):\n    '''\n    Write a python function that takes in two elements and returns a tuple of the element that has the highest count of the element in the tuple.\n    '''\n    return (x,y) if count_XY(tup, x, y) > count_XY(tup, y, x) else (y,x)\n    \ndef alternate_combine_XY_2_index(x,y):\n    '''\n    Write a python function that takes in two elements and returns a tuple of the element that has the highest count of the element in the tuple.\n    '''\n    return (x,y) if count_XY(tup, x, y) > count_XY(tup, y, x) else (y,x)\n    \ndef alternate_combine_XY_2_dict(x,y):\n    '''\n    Write a python function that takes in two elements and returns a tuple of the element that has the highest count of the element in the tuple.\n    '''\n    return (x,y) if count_XY(tup, x, y) > count_XY(tup, y, x) else (y,x)\n    \ndef alternate_combine_XY_3(x,y):\n    '''\n    Write a python function that takes in two elements and returns a tuple of the element that has the highest count of the element in the tuple.\n    '''\n    return (x,y) if count_XY(tup, x, y) > count_XY(tup, y, x) else (y,x)\n    \ndef alternate_combine_XY_3_index(x,y):\n    '''\n    Write a python function that takes in two elements and returns a tuple of the element that has the highest count of the element in the tuple.\n    '''\n    return (x,y) if count_XY(tup, x, y) > count_XY(tup, y, x) else (y,x)\n    \ndef alternate_combine_XY_3_dict(x,y):\n    '''\n    Write a python function that takes in two elements and returns a tuple of the element that has the highest count of the element in the tuple.\n    '''\n    return (x,y) if count_XY(tup, x, y) > count_XY(tup, y, x) else (y,x)\n    \ndef alternate_combine_XY_4(x,y):\n    '''\n    Write a python function that takes in two elements and returns a tuple of the element that has the highest count of the element in the tuple.\n    '''\n    return (x,y) if count_XY(tup, x, y) > count_XY(tup, y, x) else (y,x)\n    \ndef alternate_combine_XY_4_index(x,y):\n    '''\n    Write a python function that takes in two elements and returns a tuple of the element that has the highest count of the element in the tuple.\n    '"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n    \ndef count_all_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    i = tup.index(x)\n    return len(tup[i:])\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    #print (tup)\n    if tup.count(x) > 0:\n        return tup.count(x)\n    else:\n        return 0\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    insert_element = [None] * len(list)\n    for i in range(len(list)):\n        insert_element[i] = element\n        list[i] = insert_element[i]\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element]*list.index(element)+list[list.index(element):]\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    i = 0\n    # while i < len(list):\n    #     print i\n    #     list.insert(i,element)\n    #     i += 1\n    for el in list:\n        list.insert(i,element)\n        i += 1\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element]+list\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    #complex numbers are defined as follows:\n    #a = real part\n    #b = imaginary part\n    #polar form is defined as follows:\n    #r = magnitude\n    #theta = phase \n    \n    #complex numbers can be represented in polar form as follows:\n    #r = magnitude\n    #theta = phase\n    #r and theta are called polar form coefficients\n    \n    #convert the given complex number to polar form\n    #loop through the complex number and for each component, calculate the magnitude and phase\n    #compute the magnitude and phase of the complex number in polar form\n    #print the magnitude and phase of the complex number in polar form\n    #return the magnitude and phase of the complex number in polar form\n    \n    #complex number = a + b*i\n    #convert the complex number to polar form\n    #real part = a\n    #imaginary part = b*i\n    #convert the complex number to polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #return the magnitude and phase of the complex number in polar form\n    \n    #the magnitude of a complex number is the modulus of its polar form\n    #the phase of a complex number is the argument of its polar form\n    #the magnitude and phase of a complex number in polar form are named as magnitude and phase\n    #mag = r\n    #phase = theta\n    \n    #store the magnitude and phase of the complex number in polar form in magnitudes and phases respectively\n    #convert the magnitude and phase of the complex number in polar form to polar form\n    #magnitude = r\n    #phase = theta\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #mag = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #magnitude = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #magnitude = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #magnitude = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #magnitude = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #magnitude = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #magnitude = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #magnitude = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #magnitude = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #magnitude = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #magnitude = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #magnitude = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #magnitude = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #magnitude = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #magnitude = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #magnitude = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #magnitude = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #magnitude = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #magnitude = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #magnitude = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #magnitude = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #magnitude = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #magnitude = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #magnitude = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #magnitude = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #magnitude = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #magnitude = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #magnitude = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #magnitude = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #magnitude = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #magnitude = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #magnitude = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #magnitude = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #compute the magnitude and phase of the complex number in polar form\n    #magnitude = magnitude\n    #phase = phase\n    \n    #compute the magnitude and phase of the complex number in polar form\n    #com"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    try:\n        l = []\n        for i in numbers:\n            r = cmath.polar(i)\n            l.append(r)\n        return l\n    except TypeError:\n        return None\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    num = numbers[0]+numbers[1]*1j\n    r = cmath.polar(num)\n    return r\n    \n    \ndef fft(input_list):\n    \n    '''\n    fft for a list of real numbers.\n    '''\n    # normalize the list\n    # convert the list to a python complex number\n    # use the complex number to compute the discrete Fourier Transform\n    # convert the output to a list of real values\n    # return the list\n    \n    \n    input_list = [float(i) for i in input_list]\n    N = len(input_list)\n    p = 2\n    while p <= N/2:\n        for i in range(0,N,2*p):\n            for k in range(p):\n                input_list[i+k] = (input_list[i+k]+input_list[i+k+p])/2\n                input_list[i+k+p] = (input_list[i+k]+input_list[i+k+p])/2\n        p = p*2\n    return [float(i) for i in input_list]\n    \n    \ndef reverse_fft(input_list):\n    \n    '''\n    fft for a list of real numbers.\n    '''\n    # normalize the list\n    # convert the list to a python complex number\n    # use the complex number to compute the discrete Fourier Transform\n    # convert the output to a list of real values\n    # return the list\n    \n    \n    input_list = [float(i) for i in input_list]\n    N = len(input_list)\n    p = 2\n    while p <= N/2:\n        for i in range(0,N,2*p):\n            for k in range(p):\n                input_list[i+k] = (input_list[i+k]+input_list[i+k+p])/2\n                input_list[i+k+p] = (input_list[i+k]+input_list[i+k+p])/2\n        p = p*2\n    return [float(i) for i in input_list[::-1]]\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    new_list = []\n    \n    for i in numbers:\n        a = i.real\n        b = i.imag\n        temp = complex(a,b)\n        c = cmath.polar(temp)\n        new_list.append(c)\n    return new_list\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    complex_numbers=[]\n    for i in numbers:\n        complex_numbers.append(complex(i))\n    for i in complex_numbers:\n        print(i,end=' ')\n    print('\\n')\n    polar_complex_numbers=[]\n    for i in complex_numbers:\n        polar_complex_numbers.append(cmath.polar(i))\n    for i in polar_complex_numbers:\n        print(i,end=' ')\n    print('\\n')\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r, i = cmath.polar(complex(numbers))\n    return r,i\n    \n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar =[]\n    for i in numbers:\n        theta = cmath.phase(i)\n        r = abs(i)\n        polar.append(r,theta)\n    return polar\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complexnumbers = []\n    for n in numbers:\n        complexnumbers.append(complex(n))\n    return [cmath.polar(cn) for cn in complexnumbers]\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r = abs(numbers)\n    angle = cmath.phase(numbers)\n    return (r, angle)\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #complex number\n    z = complex(numbers[0], numbers[1])\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    counter = 0\n    for item in list1:\n        if type(item) == int:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i)==int:\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    total = 0\n    for element in list1:\n        if type(element) == int:\n            total += 1\n    return total\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return sum([i.isdigit() for i in list1])\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) is int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i)==int:\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([item for item in list1 if type(item) == int])\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    i=0\n    for i in list1:\n        if type(i) is int:\n            i+=1\n    return i\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = set(l)\n    return [(x,)*n for x in l] + [(y,)*n for y in l]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    #return list(combinations(l, n))\n    return [list(x) for x in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(i) for i in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n==0:\n        return [[]]\n    else:\n        combs = combinations_colors(l, n-1)\n        combs_with_last_item = []\n        for i in combs:\n            i_with_last_item = list(i)\n            i_with_last_item.append(l[n-1])\n            combs_with_last_item.append(i_with_last_item)\n        return combs_with_last_item\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\ndef test_combinations_colors():\n    assert combinations_colors([1,2,3], 2) == [(1,2), (1,3), (2,3)]\n    assert combinations_colors([1,2,3], 1) == [(1,), (2,), (3,)]\n    assert combinations_colors([1,2,3], 0) == []\ndef main():\n    #print (combinations_colors([1,2,3], 2))\n    test_combinations_colors()\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l,n))\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [list(combo) for combo in combinations_with_replacement(l, n)]\ndef max_product(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the maximum product of any two adjacent numbers.\n    '''\n    max_num = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i]*nums[j]\n            if product > max_num:\n                max_num = product\n    return max_num\ndef max_product_fast(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the maximum product of any two adjacent numbers.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    max_num = float('-inf')\n    for i in range(len(nums)-1):\n        product = nums[i]*nums[i+1]\n        if product > max_num:\n            max_num = product\n    return max_num\ndef max_product_bit(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the maximum product of any two adjacent numbers.\n    '''\n    bit = [0]*len(nums)\n    for i in range(len(nums)):\n        for j in range(i):\n            bit[i] = max(bit[i], bit[j]*nums[i])\n        bit[i] = max(bit[i], nums[i])\n    return bit[-1]\ndef three_sum(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a list of tuples, (a, b, c), where a + b + c = 0. \n    '''\n    nums.sort()\n    result = []\n    for i in range(len(nums)-1):\n        left = i+1\n        right = len(nums) - 1\n        while left < right:\n            if nums[i]+nums[left]+nums[right] == 0:\n                result.append([nums[i], nums[left], nums[right]])\n                left += 1\n                right -= 1\n                while left < right and nums[left] == nums[left-1]:\n                    left += 1\n                while left < right and nums[right] == nums[right+1]:\n                    right -= 1\n            elif nums[i]+nums[left]+nums[right] > 0:\n                right -= 1\n            else:\n                left += 1\n    return result\ndef three_sum_fast(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a list of tuples, (a, b, c), where a + b + c = 0. \n    '''\n    nums.sort()\n    result = []\n    for i in range(len(nums)-2):\n        if i!= 0 and nums[i] == nums[i-1]:\n            continue\n        left = i+1\n        right = len(nums) - 1\n        while left < right:\n            if nums[i]+nums[left]+nums[right] == 0:\n                result.append([nums[i], nums[left], nums[right]])\n                left += 1\n                right -= 1\n                while left < right and nums[left] == nums[left-1]:\n                    left += 1\n                while left < right and nums[right] == nums[right+1]:\n                    right -= 1\n            elif nums[i]+nums[left]+nums[right] > 0:\n                right -= 1\n            else:\n                left += 1\n    return result\ndef partition(nums, start, end):\n    '''\n    Write a function that takes in a list of numbers and returns a list of lists. The list of lists should be partitioned according to the values of each number in the list. \n    '''\n    pivot = nums[end]\n    p_idx = start\n    for i in range(start, end):\n        if nums[i] <= pivot:\n            nums[i], nums[p_idx] = nums[p_idx], nums[i]\n            p_idx += 1\n    nums[p_idx], nums[end] = nums[end], nums[p_idx]\n    return p_idx\ndef find_duplicates(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a list of the numbers that are duplicates.\n    '''\n    duplicates = []\n    for num in nums:\n        if nums.count(num) > 1:\n            if num not in duplicates:\n                duplicates.append(num)\n    return duplicates\ndef find_rotation(s1, s2):\n    '''\n    Write a function that takes in two strings and returns True if s1 can be rotated to match s2.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    if len(s1) == 0:\n        return True\n    for i in range(len(s1)):\n        if s1[i:] + s1[:i] == s2:\n            return True\n    return False\ndef find_permutation(s1, s2):\n    '''\n    Write a function that takes in two strings and returns True if s1 can be rearranged to match s2.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    if len(s1) == 0:\n        return True\n    if s1 == s2:\n        return True\n    s1_counts = {}\n    for c in s1:\n        if c in s1_counts:\n            s1_counts[c] += 1\n        else:\n            s1_counts[c] = 1\n    for c in s2:\n        if c in s1_counts:\n            s1_counts[c] -= 1\n        else:\n            return False\n    for c in s1_counts:\n        if s1_counts[c]!= 0:\n            return False\n    return True\ndef find_permutation_fast(s1, s2):\n    '''\n    Write a function that takes in two strings and returns True if s1 can be rearranged to match s2.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    if len(s1) == 0:\n        return True\n    s1_counts = {}\n    for c in s1:\n        if c in s1_counts:\n            s1_counts[c] += 1\n        else:\n            s1_counts[c] = 1\n    for c in s2:\n        if c in s1_counts:\n            s1_counts[c] -= 1\n        else:\n            return False\n    for c in s1_counts:\n        if s1_counts[c]!= 0:\n            return False\n    return True\ndef find_anagram(s1, s2):\n    '''\n    Write a function that takes in two strings and returns True if s1 is an anagram of s2.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    if len(s1) == 0:\n        return True\n    s1_counts = {}\n    for c in s1:\n        if c in s1_counts:\n            s1_counts[c] += 1\n        else:\n            s1_counts[c] = 1\n    for c in s2:\n        if c in s1_counts:\n            s1_counts[c] -= 1\n        else:\n            return False\n    for c in s1_counts:\n        if s1_counts[c]!= 0:\n            return False\n    return True\ndef find_anagram_fast(s1, s2):\n    '''\n    Write a function that takes in two strings and returns True if s1 is an anagram of s2.\n    '"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n > len(l):\n        return []\n    combs = []\n    for i in range(n):\n        combs += list(combinations_with_replacement(l,i+1))\n    return combs\ndef test_combinations_colors():\n    assert combinations_colors([1,2,3,4],2) == [(1,1),(1,2),(1,3),(1,4),(2,2),(2,3),(2,4),(3,3),(3,4),(4,4)]\n    assert combinations_colors([1,2,3,4],3) == [(1,1,1),(1,1,2),(1,1,3),(1,1,4),(1,2,2),(1,2,3),(1,2,4),(1,3,3),(1,3,4),(1,4,4),(2,2,2),(2,2,3),(2,2,4),(2,3,3),(2,3,4),(2,4,4),(3,3,3),(3,3,4),(3,4,4),(4,4,4)]\n    assert combinations_colors([1,2,3,4],4) == [(1,1,1,1),(1,1,1,2),(1,1,1,3),(1,1,1,4),(1,1,2,2),(1,1,2,3),(1,1,2,4),(1,1,3,3),(1,1,3,4),(1,1,4,4),(1,2,2,2),(1,2,2,3),(1,2,2,4),(1,2,3,3),(1,2,3,4),(1,2,4,4),(1,3,3,3),(1,3,3,4),(1,3,4,4),(1,4,4,4),(2,2,2,2),(2,2,2,3),(2,2,2,4),(2,2,3,3),(2,2,3,4),(2,2,4,4),(2,3,3,3),(2,3,3,4),(2,3,4,4),(2,4,4,4),(3,3,3,3),(3,3,3,4),(3,3,4,4),(3,4,4,4),(4,4,4,4)]\n    assert combinations_colors([1,2,3,4],5) == []\n    print(\"Passed\")\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    else:\n        is_prime = [True]*n\n        is_prime[0] = False\n        is_prime[1] = False\n        for i in range(2, int(n**(1/2))+1):\n            if is_prime[i]:\n                for j in range(i**2, n, i):\n                    is_prime[j] = False\n        return sum(is_prime)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    elif n > 2:\n        return count_Primes_nums(n-1) + count_Primes_nums(n-2)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return count_Primes_nums(n-1) + count_Primes_nums(n-2)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_Prime(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if isPrime(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    return sum(1 for i in range(2,n) if check_prime(i))\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 0 or n == 1:\n        return 0\n    else:\n        return count_Primes_nums(n - 1) + (n % 2 == 0)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes_nums = [2]\n    for i in range(3,n+1):\n        if all(i%j!= 0 for j in primes_nums):\n            primes_nums.append(i)\n    return len(primes_nums)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = [2]\n    # your code here\n    return len(primes)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n    \n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    t = (b,a)\n    return t\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    t = (b, a)\n    return t\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return sorted([test_tup1, test_tup2], key=lambda x:x[1], reverse=True)[0]\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    \n    if len(list1) == len(list2):\n        return test_tup1 if sum(list1) > sum(list2) else test_tup2\n    if len(list1) > len(list2):\n        return test_tup1\n    else:\n        return test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)>len(test_tup2):\n        return(maximize_elements(test_tup2, test_tup1))\n    else:\n        return(maximize_elements(test_tup1, test_tup2))\n        \nmaximize_elements((1,2,3), (1,2,3)"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    n1, m1 = test_tup1\n    n2, m2 = test_tup2\n    if m1 > m2:\n        return test_tup1\n    else:\n        return test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    pass\n    \ndef test_maximize_elements():\n    assert maximize_elements(\n        (3, 6, -1, 1, 0, 0, -1, 0, 0, 0, 1, 1, -3, -1, -3, 3),\n        (1, -1, -1, -3, -3, 3, 3, 3, 1, 1, 1, 1, -1, -1, -1, 1)) ==\n        (3, 6, -1, 1, 0, 0, -1, 0, 0, 0, 1, 1, -3, -1, -3, 3)\n    \nif __name__ == '__main__':\n    test_maximize_elements("
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    if len(test_tup1) == len(test_tup2):\n        if len(test_tup1) == 0:\n            return (None, None)\n    elif len(test_tup1) > len(test_tup2):\n        return (max(test_tup1, key=lambda x: x[1])[0], None)\n    else:\n        return (None, max(test_tup2, key=lambda x: x[1])[0])\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return [(x, y) for x, y in zip(test_tup1, test_tup2)]\n    elif len(test_tup1) > len(test_tup2):\n        return [(x, y) for x, y in zip(test_tup1, test_tup2)] + [(x, y) for x, y in zip(test_tup1[len(test_tup1) - len(test_tup2):], test_tup2)]\n    else:\n        return [(x, y) for x, y in zip(test_tup1, test_tup2)] + [(x, y) for x, y in zip(test_tup1[len(test_tup2) - len(test_tup1):], test_tup2)]\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # if first tuple is greater\n    if test_tup1[1] > test_tup2[1]:\n        return test_tup1\n    # if second tuple is greater\n    if test_tup1[1] < test_tup2[1]:\n        return test_tup2\n    # if both tuples are equal\n    if test_tup1[1] == test_tup2[1]:\n        # return the first tuple, this is important, since the func\n        # returns a tuple.\n        return test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n    if len1 < len2:\n        smallest = len1\n    else:\n        smallest = len2\n    max_tup = ()\n    for i in range(smallest):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    #max_tup = tuple(max(tup1, tup2) for tup1, tup2 in zip(test_tup1, test_tup2))\n    max_tup = tuple(min(tup1, tup2) for tup1, tup2 in zip(test_tup1, test_tup2))\n    return max_tup\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1: \n        return 2\n    if n == 2: \n        return 3\n    if n == 3: \n        return 5\n    if n % 2 == 0: \n        return None\n    if n % 3 == 0: \n        return None\n    if n % 5 == 0: \n        return None\n    for p in primes(n - 1): \n        if n % p == 0: \n            return None\n    return newman_prime(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a = [True] * (n+1)\n    a[0], a[1] = False, False\n    \n    i = 2\n    while i <= n**0.5:\n        if a[i]:\n            for j in range(i*i, n+1, i):\n                a[j] = False\n        i += 1\n    return [i for i in range(n+1) if a[i]]\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = 2\n    result = 0\n    while(result < n):\n        prime = newman_williams(prime)\n        result += 1\n        if(is_prime(prime)):\n            result += 1\n    return prime\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    \n    if n%2 == 0:\n        return newman_prime(n/2)**2\n    \n    for a in range(2,n):\n        if gcd(n,a) == 1:\n            break\n    else:\n        return -1\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = [2, 3, 5, 7]\n    \n    if n <= len(p):\n        return p[n-1]\n    else:\n        for i in range(len(p), n):\n            for j in range(len(p), i+1):\n                if is_newman_williams_prime(j):\n                    p.append(j)\n    return p[-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    #initialize variables\n    if n == 1: \n        return 2\n    elif n == 2: \n        return 3\n    else: \n        a = 2\n        b = 3\n        i = 1\n        #need to find p such that p * 2^i + 1 = n \n        while i < n: \n            i = i + 1\n            p = int((a + b) / 2)\n            if p * p - 1 == n: \n                return p\n            elif p * p > n: \n                b = p\n            else: \n                a = p\n    \ndef newman_shanks_williams(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    #initialize variables\n    if n == 1: \n        return 2\n    elif n == 2: \n        return 3\n    else: \n        a = 2\n        b = 3\n        i = 1\n        #need to find p such that p * 2^i + 1 = n \n        while i < n: \n            i = i + 1\n            p = int((a + b) / 2)\n            if p * p - 1 > n: \n                b = p\n            else: \n                a = p\n    \n    #check if p is the prime\n    if (p * p - 1) == n: \n        return p\n    else: \n        return None\n    \ndef next_prime(n): \n    '''\n    Write a function to find the next prime number.\n    '''\n    #initialize variables\n    if n == 1: \n        return 2\n    elif n == 2: \n        return 3\n    else: \n        a = 2\n        b = 3\n        i = 1\n        #need to find p such that p * 2^i + 1 = n \n        while i < n: \n            i = i + 1\n            p = int((a + b) / 2)\n            if p * p > n: \n                b = p\n            else: \n                a = p\n    \n    #check if p is the prime\n    if (p * p - 1) == n: \n        return p\n    else: \n        return None\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    # Use gcd function to get the totient and find the nth prime\n    totient = newman_totient(n)\n    prime = newman_williams_sieve(totient)\n    \n    # Return the nth prime\n    return prime\n    \ndef newman_williams_sieve(totient):\n    '''\n    Return the nth prime number using the newman\u2013williams sieve\n    '''\n    \n    # Set the primes list to None\n    primes = None\n    \n    # Initialise the list with two values\n    primes = [2,3]\n    \n    # Use the sieve of sundaram to find the remaining primes\n    # start with the largest prime, and check all the multiples\n    # that are less than the previous value\n    for i in range(primes[-1], totient, 2):\n        for j in primes:\n            if j >= i:\n                break\n            if i % j == 0:\n                break\n        else:\n            primes.append(i)\n    \n    # Return the nth prime\n    return primes[totient - 1]\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = [2,3]\n    x = 5\n    while len(primes) < n:\n        for p in primes:\n            if is_prime(x, p):\n                primes.append(x)\n        x += 2\n    return primes[-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    #return newman_williams_prime(n)\n    return newman_williams_prime(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 0: return 2\n    if n == 1: return 3\n    n_p = newman_prime(n-1)\n    m = (1+2*n_p) / n_p\n    a = n % n_p\n    if a == 0: return m*n_p\n    a_inv = modinv(a, n_p)\n    return m*a_inv\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    div_list = []\n    for i in range(len(test_tup1)):\n        div_list.append(test_tup1[i] / test_tup2[i])\n    return tuple(div_list)\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        out_tup = []\n        for i in range(len(test_tup1)):\n            out_tup.append(test_tup1[i]/test_tup2[i])\n        return tuple(out_tup)\n    else:\n        raise ValueError('Tuples must have the same length')\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] / test_tup2[i],)\n    return new_tup\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x/y, test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    assert(len(test_tup1) == len(test_tup2))\n    return [tup1 / tup2 for tup1, tup2 in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # return tuple([int(tup1[i] / tup2[i]) for i in range(len(tup1))])\n    return tuple([(int(tup1[i]) / tup2[i]) for i in range(len(tup1))])\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        return tuple((tup1[i]/tup2[i] for i in range(len(tup1))))\n    except ZeroDivisionError:\n        return None\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #initialize empty lists for result tuples\n    result_tup1 = []\n    result_tup2 = []\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2), 'Test1 and Test2 have different lengths'\n    res = [0] * len(test_tup1)\n    for i in range(len(test_tup1)):\n        res[i] = test_tup1[i] / test_tup2[i]\n    return tuple(res)\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    divisor = test_tup2[0]\n    divisor = divisor - 1\n    return (test_tup1[0] / divisor, test_tup1[1] / divisor)\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    midpoint = int(L/2)\n    return (list1[:midpoint], list1[midpoint:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L <= 0:\n        return (list1, [])\n    if L > len(list1):\n        return ([], list1)\n    return ([], list1[:L])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    p1, p2 = [], []\n    while list1:\n        p1.append(list1.pop(0))\n        if len(list1) < L:\n            p2.append(list1.pop(0))\n            break\n    return p1, p2\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    def split_two_parts_helper(list1, L, i, j):\n        if i >= len(list1) or j >= len(list1):\n            return ([], [])\n        if i == j:\n            return ([], list1[i:])\n        split_list1 = split_two_parts_helper(list1, L, i, i+L)\n        split_list2 = split_two_parts_helper(list1, L, j, j+L)\n        return (split_list1[0] + [list1[i]], split_list2[0] + [list1[j]])\n    return split_two_parts_helper(list1, L, 0, len(list1))\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Your Code Here\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return [list1[0:L], list1[L:]]\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    L2 = len(list1) - L\n    list2 = list1[:L2]\n    list3 = list1[L2:]\n    return (list2,list3)\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 0:\n        return 'I do not know your age!'\n    elif h_age < 1:\n        return 'You are a dog year short!'\n    elif h_age < 11:\n        return 'You are a dog year old!'\n    elif h_age < 41:\n        return 'You are a dog year young!'\n    elif h_age < 51:\n        return 'You are a dog year medium age!'\n    else:\n        return 'You are a dog year old!'\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age == 0:\n        return 0\n    elif h_age > 0:\n        return h_age * 15\n    else:\n        return 0\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = 0\n    age += h_age * 10.5\n    age -= 3\n    age *= 2\n    return age\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    import datetime\n    return datetime.timedelta(weeks=h_age*52).total_seconds()/60/60/24/365\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 0:\n        return None\n    if h_age == 1:\n        return 0\n    elif h_age == 2:\n        return 1\n    elif h_age >= 3:\n        return h_age - 2\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return int(h_age) * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 2 * 10.5 + (h_age - 2) * 4\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age*7\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    l = []\n    for i in range(0, len(S), step):\n        l.append(S[i:i+step])\n    return l\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n    \n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = []\n    for i in range(0, len(S), step):\n        L.append(S[i:i+step])\n    return L\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n    \ndef print_hist(S):\n    '''\n    Write a function that takes in a list and prints a histogram to the console. The function should also print out the length of the list and the total sum of the list.\n    '''\n    total = sum(S)\n    print('{} {}'.format(len(S), total))\n    for i in range(max(S)+1):\n        print('{:5}'.format(i), end='')\n    print()\n    for i in range(len(S)):\n        print('{:>4}'.format(S[i]), end='')\n    print()\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = []\n    for i in range(len(S)//step):\n        L.append(S[i*step:(i+1)*step])\n    if len(S)%step:\n        L.append(S[-len(S)%step:])\n    return L\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    res = []\n    for i in range(0,len(S),step):\n        res.append(S[i:i+step])\n    return res\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = []\n    for i in range(0, len(S), step):\n        L.append(S[i:i+step])\n    return L\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n    \n    \ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*(r**2)\n    \n    \ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given its radius and height.\n    '''\n    return 2*pi*r*(r+h)\n    \n    \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given its radius and height.\n    '''\n    return pi*r*h+(pi*r**2)\n    \n    \ndef lateralsurface_torus(r,h):\n    '''\n    Write a function to find the lateral surface area of a torus given its radius and height.\n    '''\n    return 2*pi*r*(r+h)\n    \n    \ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n    \n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given its radius.\n    '''\n    return 4/3*pi*(r**3)\n    \n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given its radius and height.\n    '''\n    return pi*r*r*h\n    \n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given its radius and height.\n    '''\n    return 1/3*pi*r*(r+h)\n    \n    \ndef volume_torus(r,h):\n    '''\n    Write a function to find the volume of a torus given its radius and height.\n    '''\n    return 2/3*pi*r*(r+h)\n    \n    \ndef energy_cube(l,m,v):\n    '''\n    Write a function to find the kinetic energy of a cube given its side length, mass and velocity.\n    '''\n    return (m*v)**2/2\n    \n    \ndef energy_sphere(r,m,v):\n    '''\n    Write a function to find the kinetic energy of a sphere given its radius, mass and velocity.\n    '''\n    return (m*v)**2/2\n    \n    \ndef energy_cylinder(r,m,v):\n    '''\n    Write a function to find the kinetic energy of a cylinder given its radius, mass and velocity.\n    '''\n    return (m*v**2)/2\n    \n    \ndef energy_cone(r,m,v):\n    '''\n    Write a function to find the kinetic energy of a cone given its radius, mass and velocity.\n    '''\n    return (m*v**2)/2\n    \n    \ndef energy_torus(r,m,v):\n    '''\n    Write a function to find the kinetic energy of a torus given its radius, mass and velocity.\n    '''\n    return (m*v**2)/2\n    \n    \ndef momentum_cube(l,m,v):\n    '''\n    Write a function to find the momentum of a cube given its side length, mass and velocity.\n    '''\n    return m*v\n    \n    \ndef momentum_sphere(r,m,v):\n    '''\n    Write a function to find the momentum of a sphere given its radius, mass and velocity.\n    '''\n    return m*v\n    \n    \ndef momentum_cylinder(r,m,v):\n    '''\n    Write a function to find the momentum of a cylinder given its radius, mass and velocity.\n    '''\n    return m*v\n    \n    \ndef momentum_cone(r,m,v):\n    '''\n    Write a function to find the momentum of a cone given its radius, mass and velocity.\n    '''\n    return m*v\n    \n    \ndef momentum_torus(r,m,v):\n    '''\n    Write a function to find the momentum of a torus given its radius, mass and velocity.\n    '''\n    return m*v\n    \n    \ndef kinetic_energy_cube(l,m,v):\n    '''\n    Write a function to find the kinetic energy of a cube given its side length, mass and velocity.\n    '''\n    return (m*v)**2/2\n    \n    \ndef kinetic_energy_sphere(r,m,v):\n    '''\n    Write a function to find the kinetic energy of a sphere given its radius, mass and velocity.\n    '''\n    return (m*v)**2/2\n    \n    \ndef kinetic_energy_cylinder(r,m,v):\n    '''\n    Write a function to find the kinetic energy of a cylinder given its radius, mass and velocity.\n    '''\n    return (m*v**2)/2\n    \n    \ndef kinetic_energy_cone(r,m,v):\n    '''\n    Write a function to find the kinetic energy of a cone given its radius, mass and velocity.\n    '''\n    return (m*v**2)/2\n    \n    \ndef kinetic_energy_torus(r,m,v):\n    '''\n    Write a function to find the kinetic energy of a torus given its radius, mass and velocity.\n    '''\n    return (m*v**2)/2\n    \n    \ndef gravitational_energy_cube(r,m):\n    '''\n    Write a function to find the gravitational energy of a cube given its radius and mass.\n    '''\n    return 4*pi*r**2*m/3\n    \n    \ndef gravitational_energy_sphere(r,m):\n    '''\n    Write a function to find the gravitational energy of a sphere given its radius and mass.\n    '''\n    return 4*pi*r**2*m/3\n    \n    \ndef gravitational_energy_cylinder(r,m):\n    '''\n    Write a function to find the gravitational energy of a cylinder given its radius and mass.\n    '''\n    return 4*pi*r**2*m/3\n    \n    \ndef gravitational_energy_cone(r,m):\n    '''\n    Write a function to find the gravitational energy of a cone given its radius and mass.\n    '''\n    return 4*pi*r**2*m/3\n    \n    \ndef gravitational_energy_torus(r,m):\n    '''\n    Write a function to find the gravitational energy of a torus given its radius and mass.\n    '''\n    return 4*pi*r**2*m/3\n    \n    \ndef kinetic_energy_ratio_cube(l,m,v):\n    '''\n    Write a function to find the kinetic energy ratio of a cube given its side length, mass and velocity.\n    '''\n    return kinetic_energy_cube(l,m,v)/gravitational_energy_cube(l,m)\n    \n    \ndef kinetic_energy_ratio_sphere(r,m,v):\n    '''\n    Write a function to find the kinetic energy ratio of a sphere given its radius, mass and velocity.\n    '''\n    return kinetic_energy_sphere(r,m,v)/gravitational_energy_sphere(r,m)\n    \n    \ndef kinetic_energy_ratio_cylinder(r,m,v):\n    '''\n    Write a function to find the kinetic energy ratio of a cylinder given its radius, mass and velocity.\n    '''\n    return kinetic_energy_cylinder(r,m,v)/gravitational_energy_cylinder(r,m)\n    \n    \ndef kinetic_energy_ratio_cone(r,m,v):\n    '''\n    Write a function to find the kinetic energy ratio of a cone given its radius, mass and velocity.\n    '''\n    return kinetic_energy_cone(r,m,v)/gravitational_energy_cone(r,m)\n    \n    \ndef kinetic_energy_ratio_torus(r,m,v):\n    '''\n    Write a function to find the kinetic energy ratio of a torus given its radius, mass and velocity.\n    '''\n    return kinetic_energy_toru"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l**2\n    return surface_area\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\ndef lateralsurface_circle(r):\n    '''\n    Write a function to find the lateral surface area of a circle given its radius.\n    '''\n    return math.pi*r**2\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given its radius and height.\n    '''\n    return 2*math.pi*r**2 + 2*math.pi*r*h\ndef lateralsurface_parabola(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a parabola given the \n    parameters of the parabola.\n    '''\n    return (a+b)**2/4\ndef lateralsurface_polygon(l,w):\n    '''\n    Write a function to find the lateral surface area of a polygon given its sides.\n    '''\n    return l*w\ndef lateralsurface_triangle(b,h):\n    '''\n    Write a function to find the lateral surface area of a triangle given the \n    parameters of the triangle.\n    '''\n    return b*h/2\ndef total_cost_of_goods(p,a,b,c):\n    '''\n    Write a function to find the total cost of goods given the parameters of \n    a ship.\n    '''\n    return p*lateralsurface_cube(a)+p*lateralsurface_circle(b)+p*lateralsurface_cylinder(c,h)+p*lateralsurface_parabola(a,b,c)+p*lateralsurface_polygon(l,w)+p*lateralsurface_triangle(b,h)\ndef cost_of_goods(p,a,b,c):\n    '''\n    Write a function to find the cost of goods given the parameters of a ship.\n    '''\n    return p*lateralsurface_cube(a)\ndef cost_of_ship(c,h):\n    '''\n    Write a function to find the cost of a ship given its cost and the height\n    of the ship.\n    '''\n    return c*lateralsurface_cylinder(c,h)\ndef calculate_lateral_surfaces(p,a,b,c,h):\n    '''\n    Write a function to calculate the total lateral surface area of a ship given\n    its parameters.\n    '''\n    return total_cost_of_goods(p,a,b,c)+cost_of_ship(c,h)\ndef find_surface_perimeter(r,h):\n    '''\n    Write a function to find the surface perimeter of a circle given its radius\n    and height.\n    '''\n    return math.pi*(r**2+r*h)\ndef find_surface_area(r,h):\n    '''\n    Write a function to find the surface area of a circle given its radius\n    and height.\n    '''\n    return math.pi*r**2\ndef surface_to_lateral(s,a,b,c,h):\n    '''\n    Write a function to calculate the ratio between the lateral surface area and\n    the surface area of a ship given the parameters of the ship.\n    '''\n    return s/find_surface_area(a,b,c,h)\ndef total_lateral_area(p,a,b,c,h):\n    '''\n    Write a function to calculate the total lateral surface area of a ship given\n    its parameters.\n    '''\n    return total_cost_of_goods(p,a,b,c)+cost_of_ship(c,h)+find_surface_area(a,b,c,h)\ndef find_lateral_surface_to_area(l,w,h):\n    '''\n    Write a function to calculate the ratio between the lateral surface area and\n    the surface area of a ship given the parameters of the ship.\n    '''\n    return find_surface_perimeter(w,h)/find_surface_area(l,w,h)\ndef find_lateral_surface_to_lateral(l,w,h):\n    '''\n    Write a function to calculate the ratio between the lateral surface area and\n    the total lateral area of a ship given the parameters of the ship.\n    '''\n    return find_lateral_surface_to_area(l,w,h)/find_lateral_surface_to_area(l,w,h)\ndef area_to_surface_perimeter(a,b,c,h):\n    '''\n    Write a function to calculate the ratio between the surface perimeter and\n    the area of a ship given its parameters.\n    '''\n    return a*h/find_surface_area(a,b,c,h)\ndef area_to_lateral(a,b,c,h):\n    '''\n    Write a function to calculate the ratio between the lateral surface area and\n    the area of a ship given its parameters.\n    '''\n    return a*h/find_surface_perimeter(a,b,c,h)\ndef find_lateral_area_to_area(l,w,h):\n    '''\n    Write a function to calculate the ratio between the area of a ship and the\n    area of a ship given its parameters.\n    '''\n    return find_surface_perimeter(w,h)/find_surface_area(l,w,h)\ndef find_lateral_area_to_lateral(l,w,h):\n    '''\n    Write a function to calculate the ratio between the area of a ship and the\n    total lateral area of a ship given its parameters.\n    '''\n    return find_lateral_area_to_area(l,w,h)/find_lateral_area_to_area(l,w,h)\ndef lateral_to_surface_perimeter(l,w,h):\n    '''\n    Write a function to calculate the ratio between the surface perimeter and\n    the lateral surface area of a ship given its parameters.\n    '''\n    return find_surface_perimeter(w,h)/find_lateral_surface_to_area(l,w,h)\ndef lateral_to_surface_area(l,w,h):\n    '''\n    Write a function to calculate the ratio between the surface area and the\n    lateral surface area of a ship given its parameters.\n    '''\n    return find_surface_area(l,w,h)/find_lateral_surface_to_area(l,w,h)\ndef find_lateral_perimeter_to_area(l,w,h):\n    '''\n    Write a function to calculate the ratio between the surface area and the\n    lateral perimeter of a ship given its parameters.\n    '''\n    return find_surface_perimeter(w,h)/find_lateral_surface_to_area(l,w,h)\ndef find_lateral_perimeter_to_lateral(l,w,h):\n    '''\n    Write a function to calculate the ratio between the surface area and the\n    total lateral area of a ship given its parameters.\n    '''\n    return find_lateral_perimeter_to_area(l,w,h)/find_lateral_area_to_area(l,w,h)\ndef area_to_lateral_perimeter(a,b,c,h):\n    '''\n    Write a function to calculate the ratio between the perimeter of a ship and\n    the area of a ship given its parameters.\n    '''\n    return a*h/find_lateral_surface_to_area(a,b,c,h)\ndef area_to_lateral_area(a,b,c,h):\n    '''\n    Write a function to calculate the ratio between the area of a ship and the\n    area of a ship given its parameters.\n    '''\n    return find_surface_area(a,b,c,h)/find_lateral_area_to_area(a,b,c,h)\ndef lateral_to_lateral_perimeter(l,w,h):\n    '''\n    Write a function to calculate the ratio between the perimeter of a ship and\n    the lateral surface area of a ship given its parameters.\n    '''\n    return find_surface_perimeter(w,h)/find_lateral_area_to_area(l,w,h)\ndef lateral_to_lateral_area(l,"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Include \"return\" statement as part of function definition.\n    # See https://stackoverflow.com/questions/1307956/what-does-the-yield-keyword-do#answer-1308121\n    # See https://stackoverflow.com/questions/1307956/what-does-the-yield-keyword-do#answer-1308121\n    # See https://www.tutorialspoint.com/python/python_generators.htm\n    return l**2*6\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # if the side length is odd, the lateral surface area is a square\n    # if the side length is even, the lateral surface area is a half of a square\n    # if the side length is 0, return 0\n    if l == 0:\n        return 0\n    elif l % 2 == 0:\n        return l**2\n    else:\n        return l**2/2\n    \ndef lateralsurface_parallelogram(b):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given its base and height.\n    '''\n    # if the base length is 0, return 0\n    if b == 0:\n        return 0\n    # if the height length is 0, return 0\n    elif b == 0:\n        return 0\n    # if the base and height lengths are both even, return the base times the height\n    elif b % 2 == 0 and b!= 0:\n        return 2*b\n    # if the base length is even, and the height is odd, return the base times the height/2\n    elif b % 2 == 0 and b!= 0:\n        return 2*b/2\n    # if the base length is odd, and the height is even, return the base times the height\n    elif b % 2!= 0 and b!= 0:\n        return 2*b\n    \ndef lateralsurface_rectangle(l, w):\n    '''\n    Write a function to find the lateral surface area of a rectangle given its length and width.\n    '''\n    # if the length is 0, return 0\n    if l == 0:\n        return 0\n    # if the width is 0, return 0\n    elif w == 0:\n        return 0\n    # if the length and width lengths are both even, return the length times the width\n    elif l % 2 == 0 and l!= 0:\n        return l*w\n    # if the length length is even, and the width is odd, return the length times the width/2\n    elif l % 2 == 0 and l!= 0:\n        return l*w/2\n    # if the length length is odd, and the width is even, return the length times the width\n    elif l % 2!= 0 and l!= 0:\n        return l*w\n    \ndef lateralsurface_diamond(l):\n    '''\n    Write a function to find the lateral surface area of a diamond given its side length.\n    '''\n    # if the side length is 0, return 0\n    if l == 0:\n        return 0\n    # if the side length is even, return the side times the number of sides in a rectangle\n    elif l % 2 == 0:\n        return 2*l**2 + 2*l\n    # if the side length is odd, return the side times the number of sides in a rectangle\n    elif l % 2!= 0:\n        return 2*l**2 + 4*l\n    \ndef lateralsurface_trapezium(b, h):\n    '''\n    Write a function to find the lateral surface area of a trapezium given its base and height.\n    '''\n    # if the base length is 0, return 0\n    if b == 0:\n        return 0\n    # if the height length is 0, return 0\n    elif h == 0:\n        return 0\n    # if the base and height lengths are both even, return the base times the height\n    elif b % 2 == 0 and b!= 0:\n        return b*h\n    # if the base length is even, and the height is odd, return the base times the height/2\n    elif b % 2 == 0 and b!= 0:\n        return b*h/2\n    # if the base length is odd, and the height is even, return the base times the height\n    elif b % 2!= 0 and b!= 0:\n        return b*h\n    \ndef lateralsurface_hexagon(s):\n    '''\n    Write a function to find the lateral surface area of a hexagon given its side length.\n    '''\n    # if the side length is 0, return 0\n    if s == 0:\n        return 0\n    # if the side length is even, return the square times the number of sides in a rectangle\n    elif s % 2 == 0:\n        return 6*(s**2)\n    # if the side length is odd, return the square times the number of sides in a rectangle\n    elif s % 2!= 0:\n        return 6*(s**2) + 6*(s)\n    \ndef lateralsurface_octagon(s):\n    '''\n    Write a function to find the lateral surface area of an octagon given its side length.\n    '''\n    # if the side length is 0, return 0\n    if s == 0:\n        return 0\n    # if the side length is even, return the square times the number of sides in a rectangle\n    elif s % 2 == 0:\n        return 8*(s**2)\n    # if the side length is odd, return the square times the number of sides in a rectangle\n    elif s % 2!= 0:\n        return 8*(s**2) + 8*(s)\n    \ndef lateralsurface_star(r):\n    '''\n    Write a function to find the lateral surface area of a star given its radius.\n    '''\n    # if the radius is 0, return 0\n    if r == 0:\n        return 0\n    # if the radius is even, return the circle times the number of sides in a rectangle\n    elif r % 2 == 0:\n        return 3.14*(r**2)\n    # if the radius is odd, return the circle times the number of sides in a rectangle\n    elif r % 2!= 0:\n        return 3.14*(r**2) + 3.14*r\n    \ndef lateralsurface_circle(r):\n    '''\n    Write a function to find the lateral surface area of a circle given its radius.\n    '''\n    # if the radius is 0, return 0\n    if r == 0:\n        return 0\n    # if the radius is even, return the square times the number of sides in a rectangle\n    elif r % 2 == 0:\n        return 3.14*r**2\n    # if the radius is odd, return the square times the number of sides in a rectangle\n    elif r % 2!= 0:\n        return 3.14*r**2 + 3.14*r\n    \ndef lateralsurface_ellipse(r, r_):\n    '''\n    Write a function to find the lateral surface area of an ellipse given its minor and major radii.\n    '''\n    # if the minor radius is 0, return 0\n    if r_ == 0:\n        return 0\n    # if the major radius is 0, return 0\n    elif r == 0:\n        return 0\n    # if the minor radius is even, return the ellipse times the number of sides in a rectangle\n    elif r % 2 == 0:\n        return 3.14*r_**2*r**2\n    # if the minor radius is odd, return the ellipse times the number of sides in a rectangle\n    elif r % 2!= 0:\n        return 3.14*r_**2*r**2 + 3.14*r**2*r_\n    \ndef lateralsurface_rhombus(r, r_):\n    '''\n    Write a function to find the lateral surface area of a rhombus given its minor and major radii.\n    '''\n    # if the minor radius is 0, return 0\n    if r_ == 0:\n        return 0\n    # if the major radius is 0, return 0\n    elif r == 0:\n        return 0\n    # if the minor radius is even, return the square times the number of sides in a rectangle\n    elif r % 2 == 0:\n        return 3.14*r_**2*r**2\n    # if the minor radius is odd, return the square times the number of sides in a rectangle\n    elif r % 2!= 0:\n        return 3.14*r_**2*r**2 + 3.14*r**2*r_\n    \ndef lateralsurface_polygon(s):\n    '''\n    Write a function to find the lateral surface area of a polygon given its sides.\n    '''\n    # if the number of sides is 0, return 0\n    if s == 0:\n        return 0\n    # if the number of sides is even, return the sum of the area of each side\n    elif s % 2 == 0:\n        return s\n    # if the number of side"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    side = l\n    return side*6\ndef cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given its length, width and height.\n    '''\n    side = l*w*h\n    return side*6\ndef test_lateral_surface_area():\n    '''\n    Write a function that tests the lateral surface area of a cube, cuboid and pyramid.\n    '''\n    l1 = lateralsurface_cube(4)\n    assert(l1 == 24)\n    l2 = cuboid(4,5,6)\n    assert(l2 == 120)\n    l3 = pyramid(5,6,7)\n    assert(l3 == 30)\ndef test_cuboid():\n    '''\n    Write a function that tests the lateral surface area of a cuboid, pyramid and sphere.\n    '''\n    l4 = cuboid(5,4,3)\n    assert(l4 == 60)\n    l5 = pyramid(5,4,3)\n    assert(l5 == 60)\n    l6 = cuboid(5,4,3)\n    assert(l6 == 60)\n    l7 = sphere(5)\n    assert(l7 == 314)\ndef test_pyramid():\n    '''\n    Write a function that tests the lateral surface area of a pyramid, cuboid and sphere.\n    '''\n    l8 = pyramid(5,4,3)\n    assert(l8 == 60)\n    l9 = cuboid(5,4,3)\n    assert(l9 == 60)\n    l10 = sphere(5)\n    assert(l10 == 314)\ndef test_sphere():\n    '''\n    Write a function that tests the lateral surface area of a pyramid, cuboid and sphere.\n    '''\n    l11 = sphere(5)\n    assert(l11 == 314)\n    l12 = cuboid(5,4,3)\n    assert(l12 == 60)\n    l13 = pyramid(5,4,3)\n    assert(l13 == 60)\ndef test_sphere_volume():\n    '''\n    Write a function that tests the volume of a sphere.\n    '''\n    l14 = sphere_volume(5)\n    assert(l14 == 231)\ndef pyramid_volume(a,b,c):\n    '''\n    Write a function that tests the volume of a pyramid.\n    '''\n    v = (a*b*c)/3\n    return v\ndef test_pyramid_volume():\n    '''\n    Write a function that tests the volume of a pyramid.\n    '''\n    v1 = pyramid_volume(5,4,3)\n    assert(v1 == 60)\n    v2 = pyramid_volume(5,4,3)\n    assert(v2 == 60)\n    v3 = pyramid_volume(5,4,3)\n    assert(v3 == 60)\n    v4 = pyramid_volume(5,4,3)\n    assert(v4 == 60)\ndef test_cuboid_volume():\n    '''\n    Write a function that tests the volume of a cuboid.\n    '''\n    v5 = cuboid_volume(5,4,3)\n    assert(v5 == 120)\ndef test_cuboid_volume():\n    '''\n    Write a function that tests the volume of a cuboid.\n    '''\n    v1 = cuboid_volume(5,4,3)\n    assert(v1 == 120)\n    v2 = cuboid_volume(5,4,3)\n    assert(v2 == 120)\n    v3 = cuboid_volume(5,4,3)\n    assert(v3 == 120)\n    v4 = cuboid_volume(5,4,3)\n    assert(v4 == 120)\ndef test_sphere_volume():\n    '''\n    Write a function that tests the volume of a sphere.\n    '''\n    v5 = sphere_volume(5)\n    assert(v5 == 231)\ndef test_sphere_volume():\n    '''\n    Write a function that tests the volume of a cuboid.\n    '''\n    v1 = sphere_volume(5)\n    assert(v1 == 231)\n    v2 = cuboid_volume(5,4,3)\n    assert(v2 == 120)\n    v3 = pyramid_volume(5,4,3)\n    assert(v3 == 60)\ndef test_pyramid_volume():\n    '''\n    Write a function that tests the volume of a pyramid.\n    '''\n    v1 = pyramid_volume(5,4,3)\n    assert(v1 == 60)\n    v2 = pyramid_volume(5,4,3)\n    assert(v2 == 60)\n    v3 = pyramid_volume(5,4,3)\n    assert(v3 == 60)\n    v4 = pyramid_volume(5,4,3)\n    assert(v4 == 60)\ndef test_pyramid_volume():\n    '''\n    Write a function that tests the volume of a pyramid.\n    '''\n    v1 = pyramid_volume(5,4,3)\n    assert(v1 == 60)\n    v2 = pyramid_volume(5,4,3)\n    assert(v2 == 60)\n    v3 = pyramid_volume(5,4,3)\n    assert(v3 == 60)\n    v4 = pyramid_volume(5,4,3)\n    assert(v4 == 60)\ndef test_cuboid_volume():\n    '''\n    Write a function that tests the volume of a cuboid.\n    '''\n    v1 = cuboid_volume(5,4,3)\n    assert(v1 == 120)\n    v2 = cuboid_volume(5,4,3)\n    assert(v2 == 120)\n    v3 = cuboid_volume(5,4,3)\n    assert(v3 == 120)\n    v4 = cuboid_volume(5,4,3)\n    assert(v4 == 120)\ndef test_cuboid_volume():\n    '''\n    Write a function that tests the volume of a cuboid.\n    '''\n    v1 = cuboid_volume(5,4,3)\n    assert(v1 == 120)\n    v2 = cuboid_volume(5,4,3)\n    assert(v2 == 120)\n    v3 = cuboid_volume(5,4,3)\n    assert(v3 == 120)\n    v4 = cuboid_volume(5,4,3)\n    assert(v4 == 120)\ndef test_cuboid_volume():\n    '''\n    Write a function that tests the volume of a cuboid.\n    '''\n    v1 = cuboid_volume(5,4,3)\n    assert(v1 == 120)\n    v2 = cuboid_volume(5,4,3)\n    assert(v2 == 120)\n    v3 = cuboid_volume(5,4,3)\n    assert(v3 == 120)\n    v4 = cuboid_volume(5,4,3)\n    assert(v4 == 120)\ndef test_cuboid_volume():\n    '''\n    Write a function that tests the volume of a cuboid.\n    '''\n    v1 = cuboid_volume(5,4,3)\n    assert(v1 == 120)\n    v2 = cuboid_volume(5,4,3)\n    assert(v2 == 120)\n    v3 = cuboid_volume(5,4,3)\n    assert(v3 == 120)\n    v4 = cuboid_volume(5,4,3)\n    assert(v4 == 120)\ndef test_cuboid_volume():\n    '''\n    Write a function that tests the volume of a cuboid.\n    '''\n    v1 = cuboid_volume(5,4,3)\n    assert(v1 == 120)\n    v2 = cuboid_volume(5,4,3)\n    assert(v2 == 120)\n    v3 = cuboid_volume(5,4,3)\n    assert(v3 == 120)\n    v4 = cuboid_volume(5,4,3)\n    assert(v4 == 120)\ndef test_cuboid_volume():\n    '''\n    Write a function that tests the volume of a cuboid.\n    '''\n    v1 = cuboid_volume"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Check for input type\n    if not isinstance(n,int):\n        return -1\n    # Handle the case when n <= 0\n    elif n <= 0:\n        return -1\n    else:\n        return (n*(n+1)*(2*n+1))/6\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return (n**2)\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum(x**2 for x in range(1,n+1,2))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    # if n is even, the sum will be (1^2) * n\n    # if n is odd, the sum will be (2^2) * n + (3^2) * n +...\n    return (n*(n+1)*(2*n+1))//6\n    \ndef sum_of_squares(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n natural numbers.\n    '''\n    \n    # if n is even, the sum will be (1^2) * n\n    # if n is odd, the sum will be (2^2) * n + (3^2) * n +...\n    return ((n*(n+1)*(2*n+1))//6)//n\n    \ndef sum_of_squares_iterative(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n natural numbers.\n    '''\n    \n    # the first term is (1^2)\n    # the next term is (2^2) * n\n    # the last term is (3^2) * n\n    \n    # sum = 1^2 + 2^2 * n + 3^2 * n +...\n    # sum = (1^2 + 2^2 * n + 3^2 * n +...) * n / 2\n    # sum = (1^2 + 2^2 * n + 3^2 * n +...) * n + (n^2 + 2n + 1)\n    # sum = (1^2 + 2^2 * n + 3^2 * n +...) * n + (n^2 + 2n + 1) / 2\n    # sum = (1^2 + 2^2 * n + 3^2 * n +...) * n + (n^2 + 2n + 1) / 2 + (n^2 + 2n + 1) / 2\n    # sum = (1^2 + 2^2 * n + 3^2 * n +...) * n + (n^2 + 2n + 1) / 2 + (n^2 + 2n + 1) / 2 +...\n    # sum = (1^2 + 2^2 * n + 3^2 * n +...) * n + (n^2 + 2n + 1) / 2 + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2\n    # sum = (1^2 + 2^2 * n + 3^2 * n +...) * n + (n^2 + 2n + 1) / 2 + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2\n    # sum = (1^2 + 2^2 * n + 3^2 * n +...) * n + (n^2 + 2n + 1) / 2 + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2\n    # sum = (1^2 + 2^2 * n + 3^2 * n +...) * n + (n^2 + 2n + 1) / 2 + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2\n    # sum = (1^2 + 2^2 * n + 3^2 * n +...) * n + (n^2 + 2n + 1) / 2 + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2\n    # sum = (1^2 + 2^2 * n + 3^2 * n +...) * n + (n^2 + 2n + 1) / 2 + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2\n    \n    # sum = 1^2 + 2^2 * n + 3^2 * n +... + (n^2 + 2n + 1) / 2 + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2\n    # sum = 1^2 + 2^2 * n + 3^2 * n +... + (n^2 + 2n + 1) / 2 + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2\n    # sum = 1^2 + 2^2 * n + 3^2 * n +... + (n^2 + 2n + 1) / 2 + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2\n    # sum = 1^2 + 2^2 * n + 3^2 * n +... + (n^2 + 2n + 1) / 2 + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2 +... + (n^2 + 2n + 1) / 2\n    # sum = 1^2 + 2^2 * n + 3^2 * n +... "
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    total = 0\n    for i in range(1,n+1,2):\n        total = total + i**2\n    return total\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    return sum([num**2 for num in range(1,n+1,2)])\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    else:\n        return n**2 + square_Sum(n-1)\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            total += i**2\n    return total\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        if i%2 == 1:\n            total = total + (i*i)\n    return total\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    nums = []\n    for num in range(1, n+1, 2):\n        nums.append(num*num)\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    ans = 0\n    while True: \n        ans += 1\n        if int(str(ans) * 2) > n: \n            return ans\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n * (n + 1) / 2\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    d = {'1' : 1, '2' : 2, '3' : 3, '4' : 4, '5' : 5, '6' : 6, '7' : 7, '8' : 8, '9' : 9}\n    result = ''\n    for i in range(1,n+1):\n        result += str(d[str(i)])\n    return result\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    ans = 1\n    for i in xrange(1,n):\n        ans *= i\n    return ans\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num = ''\n    i = 0\n    while len(num) < n:\n        num += str(i)\n        i += 1\n    return int(num)\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star = 1\n    while star <= n:\n        star += 1\n    return star - 1\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return find_star_num(n-1) + 2*(find_star_num(n-2))\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    ans = 0\n    while True:\n        if pow(n, ans) < 100:\n            ans += 1\n            continue\n        if pow(n, ans) == 100:\n            return ans\n        ans += 1\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # Initialize the list\n    star_num = [1]\n    for i in range(1,n):\n        star_num.append(star_num[i-1]*(n-i))\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 5\n    elif n == 2:\n        return 8\n    elif n == 3:\n        return 13\n    else:\n        return 22\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k > ord('z') and k < ord('a') or k > ord('Z') and k < ord('A'):\n        return ord('z') + 26 - k\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # Returns the ascii value of a character\n    # If a character is not a valid ascii char, returns -1\n    if ord(k) <= 127:\n        return ord(k)\n    else:\n        return -1\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_dict = {'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104, 'i': 105, 'j': 106, 'k': 107, 'l': 108,'m': 109, 'n': 110, 'o': 111, 'p': 112, 'q': 113, 'r': 114,'s': 115, 't': 116, 'u': 117, 'v': 118, 'w': 119, 'x': 120, 'y': 121, 'z': 122}\n    return ascii_dict[k]\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if (k.isalpha()):\n        return ord(k) - ord('a') + 1\n    else:\n        return ord(k) - ord('A') + 26\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_list = list(range(97,123))\n    return ascii_list[k-1]\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0, len(arr), 2):\n        total += arr[i]\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[::2])\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[i] for i in range(len(arr)) if i % 2 == 0 and arr[i] % 2 == 0)\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_list = []\n    for i in range(0,len(arr),2):\n        if arr[i]%2 == 0:\n            even_list.append(arr[i])\n    return sum(even_list)\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # Your code goes here\n    # return sum(arr[::2])\n    return sum(arr[0::2])\n    "
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum([arr[i] for i in range(len(arr)) if i%2==0])\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    \n    sum_of_evens = 0\n    for num in arr:\n        if (num%2) == 0 and (num%2) == 0:\n            sum_of_evens += num\n    return sum_of_evens\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[::2])\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0, len(arr), 2):\n        total += arr[i]\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    ans = sum(x ** 5 for x in range(2, n, 2))\n    return ans\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(n):\n        if i % 2 == 0:\n            total = total + i ** 5\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(2,n+1):\n        if i**5%2 == 0:\n            result = result + i**5\n    return result\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return (n * (n + 1) * (2 * n + 1) * (3 * n + 1) * (4 * n + 1) / 5)\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        return even_Power_Sum(n-1) + 2*n + 1\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    num = 1\n    summation = 0\n    while num <= n:\n        if num % 2 == 0:\n            summation += num ** 5\n        num += 1\n    return summation\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(n):\n        if i%2 == 0:\n            total += i**5\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for num in range(1,n):\n        if num % 2 == 0:\n            result += num ** 5\n    return result\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(x**5 for x in range(0, n, 2) if x**5 < 1000000)\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # helper function\n    def find_Power_Sum(n, found, curr):\n        if n == 0:\n            return found\n        if n % 2 == 0:\n            found += pow(curr, 5)\n            return find_Power_Sum(n-1, found, curr)\n        else:\n            return find_Power_Sum(n-1, found, curr)\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elem = []\n    for i in test_list:\n        rear_elem.append(i[-1])\n    return rear_elem\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = [i[-1] for i in test_list]\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [item[-1] for item in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [item[-1] for item in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[1] for x in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[-1] for t in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    #test_list = [(5, 2), (6, 3), (7, 4), (8, 5)]\n    #expected_list = [7, 6, 8, 5]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [(y, x) for x,y in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    \n    return [t[-1] for t in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [(a,b) for (a,b) in test_list]\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(map(lambda a,b: a-b, test_tup1, test_tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple([test_tup1[i] - test_tup2[i] for i in range(len(test_tup1))])\n    else:\n        raise ValueError('The length of both tuples must be the same')\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for (index, element) in enumerate(test_tup1):\n        result += (test_tup1[index] - test_tup2[index],)\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = tuple()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([x1 - x2 for x1, x2 in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(test_tup1[i]-test_tup2[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    output = ()\n    for i in range(len(test_tup1)):\n        output = output + (test_tup1[i] - test_tup2[i],)\n    return output\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup = ()\n    for i in range(len(test_tup1)):\n        test_tup = test_tup + (test_tup1[i] - test_tup2[i],)\n    return tuple(test_tup)\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    result = []\n    \n    for i, value in enumerate(test_tup1):\n        result.append(test_tup1[i] - test_tup2[i])\n    \n    return tuple(result)\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    pass\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_coefficients_array = [1]\n    for index in range(1, n+1):\n        binomial_coefficients_array.append(binomial_coefficients_array[index-1] * (n-index+1) / index)\n    even_sum = 0\n    for index in range(1, n+1):\n        if index % 2 == 0:\n            even_sum += binomial_coefficients_array[n] / math.factorial(n-index)\n    return even_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n*(n+1)/2\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 0 :\n        return 0\n    if n == 0:\n        return 0\n    if n == 1 or n == 2:\n        return n\n    else:\n        return ((n - 1) * even_binomial_Coeff_Sum(n - 2) + (n - 2) * even_binomial_Coeff_Sum(n - 3)) \n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1,n):\n        temp = math.factorial(i) * math.factorial((n-i))\n        sum += temp\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    fact = math.factorial\n    binom = lambda n, k: fact(n) / (fact(k) * fact(n-k))\n    return sum([binom(n, k) for k in range(1, n) if k % 2 == 0])\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if(n%2!= 0):\n        print(\"Invalid Input: the number of rows must be even\")\n    else:\n        for i in range(0,n+1,2):\n            for j in range(0,i+1):\n                if(j == 0 or j == i):\n                    binomial_coeff = 1\n                else:\n                    binomial_coeff = binomial_coeff*j\n                binomial_coeff = binomial_coeff/math.factorial(j)\n            print(binomial_coeff)\n        sum_of_coeff = 0\n        for i in range(0,n,2):\n            sum_of_coeff = sum_of_coeff + (binomial_coeff*(n-i))\n        return sum_of_coeff\ndef binomial_coefficient_sum( n, r):\n    '''\n    Write a python function that takes in two positive integer parameters n and r and returns the sum of binomial coefficients using the formula:\n    '''\n    if(n<r):\n        print(\"Invalid Input: binomial coefficient cannot exist for n<r\")\n    else:\n        binomial_coeff = 1\n        for i in range(1,r+1):\n            binomial_coeff = binomial_coeff*(n-i+1)\n            binomial_coeff = binomial_coeff/i\n        return binomial_coeff\ndef factorial(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the factorial of n\n    '''\n    if(n == 0):\n        return 1\n    else:\n        return n*factorial(n-1)\ndef binomial_coefficient( n, r):\n    '''\n    Write a python function that takes in two positive integer parameters n and r and returns the binomial coefficient using the formula:\n    '''\n    if(n < r):\n        print(\"Invalid Input: binomial coefficient cannot exist for n<r\")\n    else:\n        return factorial(n)/(factorial(r)*factorial(n-r))\ndef poisson_probability(k, lambda_val):\n    '''\n    Write a python function that takes in two positive integer parameters k and lambda and returns the poisson probability of the given value using the formula:\n    '''\n    if(k < 0):\n        return 0\n    else:\n        return ((lambda_val**k)/(math.factorial(k)*math.exp(lambda_val)))\ndef poisson_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the sum of poisson distribution coefficients using the formula:\n    '''\n    if(n<0):\n        print(\"Invalid Input: the number of rows must be greater than zero\")\n    else:\n        for i in range(0,n+1):\n            poisson_coeff = poisson_probability(i,5)\n            print(poisson_coeff)\n        sum_of_coeff = 0\n        for i in range(0,n+1):\n            sum_of_coeff = sum_of_coeff + (poisson_coeff*(n-i))\n        return sum_of_coeff\ndef poisson_coefficient_sum(n, lambda_val):\n    '''\n    Write a python function that takes in two positive integer parameters n and lambda and returns the poisson distribution coefficients using the formula:\n    '''\n    if(n < 0):\n        print(\"Invalid Input: the number of rows must be greater than zero\")\n    else:\n        poisson_coeff = poisson_probability(0,lambda_val)\n        for i in range(1,n+1):\n            poisson_coeff = poisson_coeff + poisson_probability(i, lambda_val)\n        return poisson_coeff\ndef poisson_coefficient_sum2(n, lambda_val):\n    '''\n    Write a python function that takes in two positive integer parameters n and lambda and returns the poisson distribution coefficients using the formula:\n    '''\n    if(n < 0):\n        print(\"Invalid Input: the number of rows must be greater than zero\")\n    else:\n        poisson_coeff = poisson_probability(0,lambda_val)\n        for i in range(1,n+1):\n            poisson_coeff = poisson_coeff + poisson_probability(i, lambda_val)\n        return poisson_coeff\ndef poisson_coefficient_sum3(n, lambda_val):\n    '''\n    Write a python function that takes in two positive integer parameters n and lambda and returns the poisson distribution coefficients using the formula:\n    '''\n    if(n < 0):\n        print(\"Invalid Input: the number of rows must be greater than zero\")\n    else:\n        poisson_coeff = poisson_probability(0,lambda_val)\n        for i in range(1,n+1):\n            poisson_coeff = poisson_coeff + poisson_probability(i, lambda_val)\n        return poisson_coeff\ndef poisson_coefficient_sum4(n, lambda_val):\n    '''\n    Write a python function that takes in two positive integer parameters n and lambda and returns the poisson distribution coefficients using the formula:\n    '''\n    if(n < 0):\n        print(\"Invalid Input: the number of rows must be greater than zero\")\n    else:\n        poisson_coeff = poisson_probability(0,lambda_val)\n        for i in range(1,n+1):\n            poisson_coeff = poisson_coeff + poisson_probability(i, lambda_val)\n        return poisson_coeff\ndef poisson_coefficient_sum5(n, lambda_val):\n    '''\n    Write a python function that takes in two positive integer parameters n and lambda and returns the poisson distribution coefficients using the formula:\n    '''\n    if(n < 0):\n        print(\"Invalid Input: the number of rows must be greater than zero\")\n    else:\n        poisson_coeff = poisson_probability(0,lambda_val)\n        for i in range(1,n+1):\n            poisson_coeff = poisson_coeff + poisson_probability(i, lambda_val)\n        return poisson_coeff\ndef poisson_coefficient_sum6(n, lambda_val):\n    '''\n    Write a python function that takes in two positive integer parameters n and lambda and returns the poisson distribution coefficients using the formula:\n    '''\n    if(n < 0):\n        print(\"Invalid Input: the number of rows must be greater than zero\")\n    else:\n        poisson_coeff = poisson_probability(0,lambda_val)\n        for i in range(1,n+1):\n            poisson_coeff = poisson_coeff + poisson_probability(i, lambda_val)\n        return poisson_coeff\ndef poisson_coefficient_sum7(n, lambda_val):\n    '''\n    Write a python function that takes in two positive integer parameters n and lambda and returns the poisson distribution coefficients using the formula:\n    '''\n    if(n < 0):\n        print(\"Invalid Input: the number of rows must be greater than zero\")\n    else:\n        poisson_coeff = poisson_probability(0,lambda_val)\n        for i in range(1,n+1):\n            poisson_coeff = poisson_coeff + poisson_probability(i, lambda_val)\n        return poisson_coeff\ndef poisson_coefficient_sum8(n, lambda_val):\n    '''\n    Write a python function that takes in two positive integer parameters n and lambda and returns the poisson distribution coefficients using the formula:\n    '''\n    if(n < 0):\n        print(\"Invalid Input: the number of rows must be greater than zero\")\n    else:\n        poisson_coeff = poisson_probability(0,lambda_val)\n        for i in range(1,n+1):\n            poisson_coeff = poisson_coeff + poisson_probability(i, lambda_val)\n        return poisson_coeff\ndef poisson_coefficient_sum9(n, lambda_val):\n    '''\n    Write a python function that takes in two positive intege"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = n\n    for i in range(2,n+1):\n        s += (math.factorial(n) / ((math.factorial(i) * math.factorial(n-i))) * 2**i)\n    return s\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomialCoeffs = [1]\n    binomialCoeffs.extend([0] * (n))\n    for i in range(1,n + 1):\n        for k in range(i):\n            binomialCoeffs[i] = binomialCoeffs[i] + binomialCoeffs[k] * binomialCoeffs[i - k - 1]\n    return binomialCoeffs[n]\n    \n    \ndef even_binomial_coeff_product(n, k):\n    '''\n    Write a python function that takes in a positive integer n and a positive integer k. \n    The function should return the product of the kth index binomial coefficient, n! / (k! * (n - k)!).\n    '''\n    if k > n - k:\n        k = n - k\n    return (math.factorial(n)) / (math.factorial(k) * math.factorial(n - k))\n    \n    \ndef even_binomial_coeff_product(n, k):\n    '''\n    Write a python function that takes in a positive integer n and a positive integer k. \n    The function should return the product of the kth index binomial coefficient, n! / (k! * (n - k)!).\n    '''\n    if k > n - k:\n        k = n - k\n    if k == 0:\n        return 1\n    else:\n        return n * even_binomial_coeff_product(n - 1, k - 1)\n    \n    \ndef even_binomial_coeff_product(n, k):\n    '''\n    Write a python function that takes in a positive integer n and a positive integer k. \n    The function should return the product of the kth index binomial coefficient, n! / (k! * (n - k)!).\n    '''\n    if k > n - k:\n        k = n - k\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return even_binomial_coeff_product(n - 1, k - 1) * n\n    \n    \ndef even_binomial_coeff_product(n, k):\n    '''\n    Write a python function that takes in a positive integer n and a positive integer k. \n    The function should return the product of the kth index binomial coefficient, n! / (k! * (n - k)!).\n    '''\n    if k > n - k:\n        k = n - k\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return even_binomial_coeff_product(n - 1, k - 1) * n\n    \n    \ndef even_binomial_coeff_product(n, k):\n    '''\n    Write a python function that takes in a positive integer n and a positive integer k. \n    The function should return the product of the kth index binomial coefficient, n! / (k! * (n - k)!).\n    '''\n    if k > n - k:\n        k = n - k\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return even_binomial_coeff_product(n - 1, k - 1) * n\n    \n    \ndef even_binomial_coeff_product(n, k):\n    '''\n    Write a python function that takes in a positive integer n and a positive integer k. \n    The function should return the product of the kth index binomial coefficient, n! / (k! * (n - k)!).\n    '''\n    if k > n - k:\n        k = n - k\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return even_binomial_coeff_product(n - 1, k - 1) * n\n    \n    \ndef even_binomial_coeff_product(n, k):\n    '''\n    Write a python function that takes in a positive integer n and a positive integer k. \n    The function should return the product of the kth index binomial coefficient, n! / (k! * (n - k)!).\n    '''\n    if k > n - k:\n        k = n - k\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return even_binomial_coeff_product(n - 1, k - 1) * n\n    \n    \ndef even_binomial_coeff_product(n, k):\n    '''\n    Write a python function that takes in a positive integer n and a positive integer k. \n    The function should return the product of the kth index binomial coefficient, n! / (k! * (n - k)!).\n    '''\n    if k > n - k:\n        k = n - k\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return even_binomial_coeff_product(n - 1, k - 1) * n\n    \n    \ndef even_binomial_coeff_product(n, k):\n    '''\n    Write a python function that takes in a positive integer n and a positive integer k. \n    The function should return the product of the kth index binomial coefficient, n! / (k! * (n - k)!).\n    '''\n    if k > n - k:\n        k = n - k\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return even_binomial_coeff_product(n - 1, k - 1) * n\n    \n    \ndef even_binomial_coeff_product(n, k):\n    '''\n    Write a python function that takes in a positive integer n and a positive integer k. \n    The function should return the product of the kth index binomial coefficient, n! / (k! * (n - k)!).\n    '''\n    if k > n - k:\n        k = n - k\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return even_binomial_coeff_product(n - 1, k - 1) * n\n    \n    \ndef even_binomial_coeff_product(n, k):\n    '''\n    Write a python function that takes in a positive integer n and a positive integer k. \n    The function should return the product of the kth index binomial coefficient, n! / (k! * (n - k)!).\n    '''\n    if k > n - k:\n        k = n - k\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return even_binomial_coeff_product(n - 1, k - 1) * n\n    \n    \ndef even_binomial_coeff_product(n, k):\n    '''\n    Write a python function that takes in a positive integer n and a positive integer k. \n    The function should return the product of the kth index binomial coefficient, n! / (k! * (n - k)!).\n    '''\n    if k > n - k:\n        k = n - k\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return even_binomial_coeff_product(n - 1, k - 1) * n\n    \n    \ndef even_binomial_coeff_product(n, k):\n    '''\n    Write a python function that takes in a positive integer n and a positive integer k. \n    The function should return the product of the kth index binomial coefficient, n! / (k! * (n - k)!).\n    '''\n    if k > n - k:\n        k = n - k\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return even_binomial_coeff_product(n - 1, k - 1) * n\n    \n    \ndef even_binomial_coeff_product(n, k):\n    '''\n    Write a python function that takes in a positive integer n and a positive integer k. \n    The functio"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return ((n / 2) * (n + 1))\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n == 0 or n == 1):\n        return 1\n    elif (n < 0):\n        return 0\n    else:\n        return even_binomial_Coeff_Sum(n-2) + (n-1) * even_binomial_Coeff_Sum(n-2) \n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    \n    volume=math.pi*(r**2)*h\n    print \"Volume of the cylinder is: \", volume\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    volume = math.pi * r**2 * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return math.pi*(r**2)*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (math.pi*(r**2)*h)\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    \n    # Calculate the area of the cylinder\n    area = (r**2)*math.pi\n    \n    # Calculate the volume\n    volume = area*h\n    \n    return volume\n    \n    \ndef volume_sphere(r):\n    '''\n    Write a function that takes in the radius and returns the the volume.\n    '''\n    \n    # Calculate the area of the sphere\n    area = 4*math.pi*r**2\n    \n    # Calculate the volume\n    volume = area*4/3\n    \n    return volume\n    \n    \ndef volume_sphere_homo(r):\n    '''\n    Write a function that takes in the radius and returns the the volume.\n    '''\n    \n    # Calculate the area of the sphere\n    area = 4*math.pi*r**2\n    \n    # Calculate the volume\n    volume = area*4/3\n    \n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return math.pi * (r ** 2) * h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = math.pi*r**2*h\n    return v\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14\n    return pi * r**2 * h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    return pi * r**2 * h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (math.pi*(r**2)*h)\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result={}\n    for i in dict.keys():\n        if dict[i]>=n:\n            result[i]=dict[i]\n    return result\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for (k,v) in dict.iteritems() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result={}\n    for k,v in dict.iteritems():\n        if v >= n:\n            result[k]=v\n    return result\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for i in dict:\n        if dict[i] >= n:\n            filtered_dict[i] = dict[i]\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key,value in dict.items() if value >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key in dict:\n        if dict[key] >= n:\n            new_dict[key] = dict[key]\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return dict({key:value for key,value in dict.items() if value >= n})\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    list_dict=[]\n    for i in dict.items():\n        if i[1]>=n:\n            list_dict.append(i[0])\n    return list_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # Given a tuple, return the number of elements that occur before the tuple element\n    # of the given tuple.\n    tup = test_tup[0]\n    return len(tup)\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    def count_first_elements(test_tup):\n        result = {}\n        for i in test_tup:\n            result[i] = result.get(i, 0) + 1\n        return result\n    return count_first_elements(test_tup)\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len(test_tup[:test_tup.index(elem)])\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len([x for x in test_tup if x is test_tup[0]])\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first_count = 0\n    for element in test_tup:\n        if element == test_tup[0]:\n            break\n        else:\n            first_count += 1\n    return first_count\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    n = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            n += 1\n    return n\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return sum([1 for x in test_tup[1:] if x == test_tup[0]])\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len([i for i in test_tup if i == test_tup[0]])\n    \nprint count_first_elements([3,2,1,3,2]) #return 3\nprint count_first_elements([]) #return 0\nprint count_first_elements((3,3,2,1,3)) #return 2\nprint count_first_elements([0,1,2,3,4,5,6,7,8,9]) #return 10\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    try:\n        return len(list(filter(lambda tup: tup[0] == test_tup[0], test_tup[1])))\n    except:\n        return -1\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len(test_tup[:test_tup.index(element)])\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(n+1)/2 == int(str(n*(n+1)/2)[::-1])\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0:\n        return False\n    dec_num = 0\n    num = 1\n    for i in xrange(n):\n        dec_num += num\n        num += 1\n    return dec_num\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (n + 1) * (2 * n + 1) / 6\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return sum(int(d)**2 for d in str(n)) == (n*(10**n)-(n-1)**2)/2\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num_of_decagonals = 0\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        for i in range(1, n):\n            num_of_decagonals += 12 * i\n        return num_of_decagonals + 1\n    \nassert is_num_decagonal(1) == 1\nassert is_num_decagonal(2) == 2\nassert is_num_decagonal(3) == 4\nassert is_num_decagonal(4) == 5\nassert is_num_decagonal(5) == 6\nassert is_num_decagonal(6) == 7\nassert is_num_decagonal(7) == 8\nassert is_num_decagonal(8) == 9\nassert is_num_decagonal(9) == 10\nassert is_num_decagonal(10) == 11\nassert is_num_decagonal(11) == 12\nassert is_num_decagonal(12) == 13\nassert is_num_decagonal(13) == 14\nassert is_num_decagonal(14) == 15\nassert is_num_decagonal(15) == 16\nassert is_num_decagonal(16) == 17\nassert is_num_decagonal(17) == 18\nassert is_num_decagonal(18) == 19\nassert is_num_decagonal(19) == 20\nassert is_num_decagonal(20) == 21\nassert is_num_decagonal(21) == 22\nassert is_num_decagonal(22) == 23\nassert is_num_decagonal(23) == 24\nassert is_num_decagonal(24) == 25\nassert is_num_decagonal(25) == 26\nassert is_num_decagonal(26) == 27\nassert is_num_decagonal(27) == 28\nassert is_num_decagonal(28) == 29\nassert is_num_decagonal(29) == 30\nassert is_num_decagonal(30) == 31\nassert is_num_decagonal(31) == 32\nassert is_num_decagonal(32) == 33\nassert is_num_decagonal(33) == 34\nassert is_num_decagonal(34) == 35\nassert is_num_decagonal(35) == 36\nassert is_num_decagonal(36) == 37\nassert is_num_decagonal(37) == 38\nassert is_num_decagonal(38) == 39\nassert is_num_decagonal(39) == 40\nassert is_num_decagonal(40) == 41\nassert is_num_decagonal(41) == 42\nassert is_num_decagonal(42) == 43\nassert is_num_decagonal(43) == 44\nassert is_num_decagonal(44) == 45\nassert is_num_decagonal(45) == 46\nassert is_num_decagonal(46) == 47\nassert is_num_decagonal(47) == 48\nassert is_num_decagonal(48) == 49\nassert is_num_decagonal(49) == 50\nassert is_num_decagonal(50) == 51\nassert is_num_decagonal(51) == 52\nassert is_num_decagonal(52) == 53\nassert is_num_decagonal(53) == 54\nassert is_num_decagonal(54) == 55\nassert is_num_decagonal(55) == 56\nassert is_num_decagonal(56) == 57\nassert is_num_decagonal(57) == 58\nassert is_num_decagonal(58) == 59\nassert is_num_decagonal(59) == 60\nassert is_num_decagonal(60) == 61\nassert is_num_decagonal(61) == 62\nassert is_num_decagonal(62) == 63\nassert is_num_decagonal(63) == 64\nassert is_num_decagonal(64) == 65\nassert is_num_decagonal(65) == 66\nassert is_num_decagonal(66) == 67\nassert is_num_decagonal(67) == 68\nassert is_num_decagonal(68) == 69\nassert is_num_decagonal(69) == 70\nassert is_num_decagonal(70) == 71\nassert is_num_decagonal(71) == 72\nassert is_num_decagonal(72) == 73\nassert is_num_decagonal(73) == 74\nassert is_num_decagonal(74) == 75\nassert is_num_decagonal(75) == 76\nassert is_num_decagonal(76) == 77\nassert is_num_decagonal(77) == 78\nassert is_num_decagonal(78) == 79\nassert is_num_decagonal(79) == 80\nassert is_num_decagonal(80) == 81\nassert is_num_decagonal(81) == 82\nassert is_num_decagonal(82) == 83\nassert is_num_decagonal(83) == 84\nassert is_num_decagonal(84) == 85\nassert is_num_decagonal(85) == 86\nassert is_num_decagonal(86) == 87\nassert is_num_decagonal(87) == 88\nassert is_num_decagonal(88) == 89\nassert is_num_decagonal(89) == 90\nassert is_num_decagonal(90) == 91\nassert is_num_decagonal(91) == 92\nassert is_num_decagonal(92) == 93\nassert is_num_decagonal(93) == 94\nassert is_num_decagonal(94) == 95\nassert is_num_decagonal(95) == 96\nassert is_num_decagonal(96) == 97\nassert is_num_decagonal(97) == 98\nassert is_num_decagonal(98) == 99\nassert is_num_decagonal(99) == 100\nassert is_num_decagonal(100) == 101\nassert is_num_decagonal(101) == 102\nassert is_num_decagonal(102) == 103\nassert is_num_decagonal(103) == 104\nassert is_num_decagonal(104) == 105\nassert is_num_decagonal(105) == 106\nassert is_num_decagonal(106) == 107\nassert is_num_decagonal(107) == 108\nassert is_num_decagonal(108) == 109\nassert is_num_decagonal(109) == 110\nassert is_num_decagonal(110) == 111\nassert is_num_decagonal(111) == 112\nassert is_num_decagonal(112) == 113\nassert is_num_decagonal(113) == 114\nassert is_num_decagonal(114) == 115\nassert is_num_decagonal(115) == 116\nassert is_num_decagonal(116) == 117\nassert is_num_decagonal(117) == 118\nassert is_num_decagonal(118) == 119\nassert is_num_decagonal(119) == 120\nassert is_num_decagonal(120) == 121\nassert is_num_decagonal(121) == 122\nassert is_num_decagonal(122) == 123\nassert is_num_decagonal(123) == 124\nassert is_num_decagonal(124) == 125\nassert is_num_decagonal(125) == 126\nassert is_num_decagonal(126) == 127\nassert is_num_decagonal(127) == 128\nassert is_num_decagonal(128) == 129\nassert is_num_decagonal(129) == 130\nassert is_num_decagonal(130) == 131\nassert is_num_decagonal(131) == 132\nassert is_num_decagonal(132) == 133\nassert is_num_decagonal(133) == 134\nassert is_num_decagonal(134) == 135\nassert is_num_decagonal(135) == 136\nassert is_num_decagonal(136) == 137\nassert is_num_decagonal(137) == 138\nassert is_num_decagonal(138) == 139\nassert is_num_decagonal(139) == 140\nassert is_num_decagonal(140) == 141\nassert is_num_decagonal(141) == 142\nassert is_num_decagonal(142) == 143\nassert is_num_decagonal(143) == 144\nassert is_num_decagonal(144) == 145\nassert is_num_decagonal(145) == 146\nassert is_num_decagonal(146) == 147\nassert is_num_decagonal(147) == 148\nassert is_num_decagonal(148) == 149\nassert i"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    while i < n:\n        i += 10\n    return i\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return ((n * (n + 1)) / 2) + n - (n % 2)\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    #TODO: complete the function to determine whether a number is a decagonal number\n    #...\n    # n = 1\n    # n = 2\n    #...\n    # return True or False\n    return (n*(n**2 + 1))/2 == sum(range(1, n + 1))\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n*(n+1)/2)\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0:\n        return -1\n    if n == 0:\n        return 0\n    i = 1\n    n = n - i\n    j = 0\n    while i < n:\n        i = i + j\n        j = j + 1\n    return i + j - 1\n    \nprint is_num_decagonal(8)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if dlist == []:\n        return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    return (True, -1) if item not in dlist else (False, dlist.index(item))\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = 0\n    for i in dlist:\n        if i == item:\n            found = True\n    if found:\n        return (True, index)\n    else:\n        return (False, index)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, d in enumerate(dlist):\n        if d == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, value in enumerate(dlist):\n        if item == value:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if dlist == []:\n        return False, -1\n    \n    for i,d in enumerate(dlist):\n        if d == item:\n            return True, i\n    \n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for idx, element in enumerate(dlist):\n        if element == item:\n            return True, idx\n    return False, -1\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for x in test_list:\n        if x in unique_list:\n            return False\n        else:\n            unique_list.append(x)\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    temp = []\n    for i in test_list:\n        if i not in temp:\n            temp.append(i)\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in test_list:\n        if test_list.count(i) > 1:\n            unique = False\n    return unique\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #if any element repeats then return False else return True\n    for x in test_list:\n        if test_list.count(x)>1:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in test_list:\n        count = test_list.count(i)\n        if count > 1:\n            unique = False\n    return unique\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(0,len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return map(lambda x,y: x-y, nums1, nums2)\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    n = len(nums1)\n    m = len(nums2)\n    if m > n:\n        for i in range(m-n):\n            nums2.append(0)\n    else:\n        for i in range(n-m):\n            nums1.append(0)\n    nums1 = list(nums1)\n    nums2 = list(nums2)\n    for i in range(m):\n        nums1[i+n] = nums1[i+n] - nums2[i]\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1.sort()\n    nums2.sort()\n    if len(nums1) > len(nums2):\n        diff = len(nums1) - len(nums2)\n        nums1 = nums1[diff:]\n    elif len(nums2) > len(nums1):\n        diff = len(nums2) - len(nums1)\n        nums2 = nums2[diff:]\n    ans = []\n    i,j = 0,0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] == nums2[j]:\n            ans.append(nums1[i])\n            i += 1\n            j += 1\n        elif nums1[i] > nums2[j]:\n            j += 1\n        else:\n            i += 1\n    return ans\n    \ndef merge_sort(nums):\n    '''\n    Write a function to merge two sorted list.\n    '''\n    if len(nums) <= 1:\n        return nums\n    mid = len(nums)/2\n    nums1 = merge_sort(nums[:mid])\n    nums2 = merge_sort(nums[mid:])\n    return merge(nums1,nums2)\n    \ndef merge(nums1,nums2):\n    '''\n    Write a function to merge two sorted lists.\n    '''\n    ans = []\n    i,j = 0,0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] < nums2[j]:\n            ans.append(nums1[i])\n            i += 1\n        else:\n            ans.append(nums2[j])\n            j += 1\n    while i < len(nums1):\n        ans.append(nums1[i])\n        i += 1\n    while j < len(nums2):\n        ans.append(nums2[j])\n        j += 1\n    return ans\n    \ndef m_sort(nums):\n    '''\n    Write a function to merge two sorted list.\n    '''\n    if len(nums) <= 1:\n        return nums\n    mid = len(nums)/2\n    nums1 = m_sort(nums[:mid])\n    nums2 = m_sort(nums[mid:])\n    return m(nums1,nums2)\n    \ndef m(nums1,nums2):\n    '''\n    Write a function to merge two sorted list.\n    '''\n    ans = []\n    i,j = 0,0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] < nums2[j]:\n            ans.append(nums1[i])\n            i += 1\n        else:\n            ans.append(nums2[j])\n            j += 1\n    while i < len(nums1):\n        ans.append(nums1[i])\n        i += 1\n    while j < len(nums2):\n        ans.append(nums2[j])\n        j += 1\n    return ans\n    \ndef quick_sort(nums):\n    '''\n    Write a function to merge two sorted list.\n    '''\n    if len(nums) <= 1:\n        return nums\n    mid = len(nums)/2\n    nums1 = quick_sort(nums[:mid])\n    nums2 = quick_sort(nums[mid:])\n    return quick(nums1,nums2)\n    \ndef quick(nums1,nums2):\n    '''\n    Write a function to merge two sorted list.\n    '''\n    if len(nums1) == 0:\n        return nums2\n    if len(nums2) == 0:\n        return nums1\n    if nums1[0] < nums2[0]:\n        return [nums1[0]] + quick(nums1[1:],nums2)\n    else:\n        return [nums2[0]] + quick(nums1,nums2[1:])\n        \ndef select_sort(nums):\n    '''\n    Write a function to merge two sorted list.\n    '''\n    for i in range(len(nums)):\n        min_idx = i\n        for j in range(i,len(nums)):\n            if nums[min_idx] > nums[j]:\n                min_idx = j\n        nums[i],nums[min_idx] = nums[min_idx],nums[i]\n    return nums\n    \ndef radix_sort(nums):\n    '''\n    Write a function to merge two sorted list.\n    '''\n    max_dig = len(str(max(nums)))\n    for i in range(1,max_dig+1):\n        new_nums = []\n        for idx in range(len(nums)):\n            new_nums.append([])\n        for num in nums:\n            new_nums[num/10**(max_dig-i)].append(num)\n        for idx in range(len(new_nums)):\n            new_nums[idx].sort()\n        nums = []\n        for idx in range(len(new_nums)):\n            for num in new_nums[idx]:\n                nums.append(num)\n    return nums\n    \ndef top_k_index(nums,k):\n    '''\n    Write a function to find the top k elements in a list of numbers.\n    '''\n    top_k_nums = []\n    for i in range(k):\n        max_idx = 0\n        for j in range(1,len(nums)):\n            if nums[max_idx] < nums[j]:\n                max_idx = j\n        top_k_nums.append(nums[max_idx])\n        nums.pop(max_idx)\n    return top_k_nums\n    \ndef max_heapify(nums,n,i):\n    '''\n    Write a function to build a max heap.\n    '''\n    l = 2*i+1\n    r = 2*i+2\n    if l < n and nums[l] > nums[i]:\n        largest = l\n    else:\n        largest = i\n    if r < n and nums[r] > nums[largest]:\n        largest = r\n    if largest!= i:\n        nums[i],nums[largest] = nums[largest],nums[i]\n        max_heapify(nums,n,largest)\n        \ndef build_max_heap(nums):\n    '''\n    Write a function to build a max heap.\n    '''\n    n = len(nums)-1\n    for i in range(n/2,-1,-1):\n        max_heapify(nums,n,i)\n    return nums\n    \ndef heap_sort(nums):\n    '''\n    Write a function to sort a list using a max heap.\n    '''\n    heap = []\n    for num in nums:\n        heap.append(num)\n    heap = build_max_heap(heap)\n    for i in range(len(nums)):\n        nums[i] = heap[0]\n        heap = heap[1:]\n        max_heapify(heap,len(heap),0)\n    return nums\n    \ndef heap_push(nums,val):\n    '''\n    Write a function to push a new element into a max heap.\n    '''\n    heap.append(val)\n    n = len(heap)-1\n    while n>0:\n        parent = (n-1)/2\n        if heap[parent] < heap[n]:\n            heap[parent],heap[n] = heap[n],heap[parent]\n        n = parent\n    return heap\n    \ndef heap_pop(nums):\n    '''\n    Write a function to pop an element from a max heap.\n    '''\n    if len(nums) == 0:\n        return 0\n    ma"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [i-j for i,j in zip(nums1,nums2)]\ndef zip_nums(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    return [i+j for i,j in zip(nums1,nums2)]\ndef sub_nums(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    return [i-j for i,j in zip(nums1,nums2)]\ndef zip_list(list1,list2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    return [i+j for i,j in zip(list1,list2)]\ndef mult_list(list1,list2):\n    '''\n    Write a function to multiply two lists element-wise.\n    '''\n    return [i*j for i,j in zip(list1,list2)]\ndef zip_list(list1,list2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    return [i+j for i,j in zip(list1,list2)]\ndef zip_nums(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    return [i+j for i,j in zip(nums1,nums2)]\ndef zip_list(list1,list2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    return [i+j for i,j in zip(list1,list2)]\ndef mult_nums(nums1,nums2):\n    '''\n    Write a function to multiply two lists element-wise.\n    '''\n    return [i*j for i,j in zip(nums1,nums2)]\ndef mult_list(list1,list2):\n    '''\n    Write a function to multiply two lists element-wise.\n    '''\n    return [i*j for i,j in zip(list1,list2)]\ndef div_nums(nums1,nums2):\n    '''\n    Write a function to multiply two lists element-wise.\n    '''\n    return [i/j for i,j in zip(nums1,nums2)]\ndef add_list(list1,list2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    return [i+j for i,j in zip(list1,list2)]\ndef sub_nums(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    return [i-j for i,j in zip(nums1,nums2)]\ndef add_nums(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    return [i+j for i,j in zip(nums1,nums2)]\ndef multiply_list(list1,list2):\n    '''\n    Write a function to multiply two lists element-wise.\n    '''\n    return [i*j for i,j in zip(list1,list2)]\ndef add_list(list1,list2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    return [i+j for i,j in zip(list1,list2)]\ndef zip_nums(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    return [i+j for i,j in zip(nums1,nums2)]\ndef div_nums(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    return [i/j for i,j in zip(nums1,nums2)]\ndef list_zip(list1,list2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    return [i+j for i,j in zip(list1,list2)]\ndef zip_list(list1,list2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    return [i+j for i,j in zip(list1,list2)]\ndef sub_nums(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    return [i-j for i,j in zip(nums1,nums2)]\ndef add_list(list1,list2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    return [i+j for i,j in zip(list1,list2)]\ndef multiply_nums(nums1,nums2):\n    '''\n    Write a function to multiply two lists element-wise.\n    '''\n    return [i*j for i,j in zip(nums1,nums2)]\ndef add_nums(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    return [i+j for i,j in zip(nums1,nums2)]\ndef sub_list(list1,list2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [i-j for i,j in zip(list1,list2)]\ndef mult_nums(nums1,nums2):\n    '''\n    Write a function to multiply two lists element-wise.\n    '''\n    return [i*j for i,j in zip(nums1,nums2)]\ndef add_nums(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    return [i+j for i,j in zip(nums1,nums2)]\ndef sub_nums(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    return [i-j for i,j in zip(nums1,nums2)]\ndef add_nums(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    return [i+j for i,j in zip(nums1,nums2)]\ndef zip_nums(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    return [i+j for i,j in zip(nums1,nums2)]\ndef zip_nums(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    return [i+j for i,j in zip(nums1,nums2)]\ndef sub_nums(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    return [i-j for i,j in zip(nums1,nums2)]\ndef sub_nums(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    return [i-j for i,j in zip(nums1,nums2)]\ndef add_list(list1,list2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    return [i+j for i,j in zip(list1,list2)]\ndef sub_list(list1,list2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [i-j for i,j in zip(list1,list2)]\ndef zip_nums(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    return [i+j for i,j in zip(nums1,nums2)]\ndef add_nums(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) == len(nums2):\n        res = [nums1[i] - nums2[i] for i in range(len(nums1))]\n        return res\n    else:\n        return None\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    \n    # diffs = zip(nums1,nums2)\n    # return [a-b for a,b in diffs]\n    \n    return [a - b for a,b in zip(nums1, nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for num in nums1:\n        if num in nums2:\n            nums2.remove(num)\n        else:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1-num2 for num1,num2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [a-b for a,b in zip(nums1,nums2)]\n    \ndef mul_list(nums1,nums2):\n    '''\n    Write a function to multiply two lists element-wise.\n    '''\n    return [a*b for a,b in zip(nums1,nums2)]\n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element-wise.\n    '''\n    return [a/b for a,b in zip(nums1,nums2)]\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(x) for x in str(n)]\n    for i in digits:\n        if i > 1:\n            if str(i) in str(n):\n                return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if len(str(n)) == 1: return True\n    else:\n        cnt = [0]*10\n        for i in str(n): cnt[int(i)] += 1\n        for i in cnt:\n            if i > int(i): return False\n    return True\n    \ndef solution(n):\n    if len(str(n)) == 1: return True\n    else:\n        cnt = [0]*10\n        for i in str(n): cnt[int(i)] += 1\n        for i in cnt:\n            if i > int(i): return False\n    return True\n    \nif __name__ == \"__main__\":\n    print validate(1331)\n    print solution(1331)\n    print validate(1337)\n    print solution(1337)\n    print validate(1338)\n    print solution(1338)"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for i in range(0, 10):\n        if abs(n % 10 - i) > abs(n / 10 - i):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for i in n:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    for i in freq:\n        if freq[i] > i:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    a=set(str(n))\n    b=dict((i,n.count(i)) for i in a)\n    for i in b:\n        if b[i]>i:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = {}\n    for i in str(n):\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return len([digit for digit in str(n) if int(str(n).count(digit)) > int(digit)]) == 0\n    "
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n<10:\n        return True\n    else:\n        arr=[]\n        temp = n\n        while temp>0:\n            r = temp%10\n            arr.append(r)\n            temp /= 10\n        arr_count = Counter(arr)\n        for k,v in arr_count.iteritems():\n            if v>k:\n                return False\n        return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    flag = True\n    while n:\n        n, r = divmod(n, 10)\n        if r > d[str(n)]:\n            flag = False\n            break\n    return flag \n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = {}\n    for i in str(n):\n        d[i] = d.get(i, 0) + 1\n        if d[i] > int(i):\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return len(list) == len(set(list))\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n    \n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    count = 0\n    for i in list:\n        if i == element:\n            count += 1\n    if count == len(list):\n        return True\n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if not list:\n        return False\n    elif list[0]!= element:\n        return False\n    else:\n        return check_element(list[1:],element)\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    else:\n        return list[0] == element\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'ab{2,3}', text):\n        return True\n    else:\n        return False\ndef text_match_two_three_other(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'ab{2,3}', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search('a.{2,3}b',text))\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.match('ab*', text) is not None\ndef text_match_two_three_n(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.match('ab{2,3}', text) is not None\ndef text_match_2_b(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two 'b' characters.\n    '''\n    return re.match('ab+', text) is not None\ndef text_match_2_b_n(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two 'b' characters.\n    '''\n    return re.match('ab{2,}', text) is not None\ndef text_match_b_n(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by zero or more 'b' characters.\n    '''\n    return re.match('b+', text) is not None\ndef text_match_b_n_n(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by zero or more 'b' characters.\n    '''\n    return re.match('b{2,}', text) is not None\ndef text_match_b_n_m(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by zero or more 'b' characters.\n    '''\n    return re.match('b{2,}?', text) is not None\ndef text_match_b_n_m_n(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by zero or more 'b' characters.\n    '''\n    return re.match('b{2,}?', text) is not None\ndef text_match_b_n_m_n_n(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by zero or more 'b' characters.\n    '''\n    return re.match('b{2,}?', text) is not None\ndef text_match_n_b(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by zero or more 'b' characters.\n    '''\n    return re.match('(b)?', text) is not None\ndef text_match_n_b_n(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by zero or more 'b' characters.\n    '''\n    return re.match('(b)?', text) is not None\ndef text_match_n_b_m(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by zero or more 'b' characters.\n    '''\n    return re.match('(b)?', text) is not None\ndef text_match_n_b_m_n(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by zero or more 'b' characters.\n    '''\n    return re.match('(b)?', text) is not None\ndef text_match_n_b_m_n_n(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by zero or more 'b' characters.\n    '''\n    return re.match('(b)?', text) is not None\ndef text_match_n_b_m_n_n_n(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by zero or more 'b' characters.\n    '''\n    return re.match('(b)?', text) is not None\ndef text_match_n_b_m_n_n_m(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by zero or more 'b' characters.\n    '''\n    return re.match('(b)?', text) is not None\ndef text_match_n_b_m_n_n_n_m_n(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by zero or more 'b' characters.\n    '''\n    return re.match('(b)?', text) is not None\ndef text_match_n_b_m_n_n_n_n_m_n_m(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by zero or more 'b' characters.\n    '''\n    return re.match('(b)?', text) is not None\ndef text_match_n_b_m_n_n_n_n_n_m_n_m_n(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by zero or more 'b' characters.\n    '''\n    return re.match('(b)?', text) is not None\ndef text_match_n_b_m_n_n_n_n_n_n_n_m_n_m_n(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by zero or more 'b' characters.\n    '''\n    return re.match('(b)?', text) is not None\ndef text_match_n_b_m_n_n_n_n_n_n_n_n_n_m_n_m_n(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by zero or more 'b' characters.\n    '''\n    return re.match('(b)?', text) is not None\ndef text_match_n_b_m_n_n_n_n_n_n_n_n_n_n_m_n_m_n_n(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by zero or more 'b' characters.\n    '''\n    return re.match('(b)?', text) is not None\ndef text_match_n_b_m_n_n_n_n_n_n_n_n_n_n_n_n_n_m_n_n_n(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by zero or more 'b' characters.\n    '''\n    return re.match('(b)?', text) is not None\ndef text_match_n_b_m_n_n_n_n_n_n_n_n_n_n_n_n_n_n_m_n_n_n_n(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by zero or more 'b' characters.\n    '''\n    return re.match('(b)?', text) is not None\ndef text_match_n_b_m_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by zero or more 'b' characters.\n    '''\n    return re.match('(b)?', text) is not None\ndef text_match_n_b_m_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by zero or more 'b' characters.\n    '''\n    return re.match('(b)?', text) is not None\ndef text_match_n_b_m_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n(text):\n    '''\n    Write a function that checks whether a string contains a 'b' character followed by zero or more 'b' character"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'ab{2,3}', text):\n        return True\n    else:\n        return False\ndef text_match_three_four(text):\n    '''\n    Write a function that checks whether a string contains a 'a' character followed by three 'b' characters and then a 'c'.\n    '''\n    if re.search(r'ab{3,}c', text):\n        return True\n    else:\n        return False\ndef text_match_three_five(text):\n    '''\n    Write a function that checks whether a string contains a 'a' character followed by three 'b' characters and then a 'c'.\n    '''\n    if re.search(r'ab{3,}c', text):\n        return True\n    else:\n        return False\ndef text_match_twelve_thirteen(text):\n    '''\n    Write a function that checks whether a string contains a 'a' character followed by twelve 'b' characters and then a 'c'.\n    '''\n    if re.search(r'ab{12,}c', text):\n        return True\n    else:\n        return False\ndef text_match_fourteen_fifteen(text):\n    '''\n    Write a function that checks whether a string contains a 'a' character followed by fourteen 'b' characters and then a 'c'.\n    '''\n    if re.search(r'ab{14,}c', text):\n        return True\n    else:\n        return False\ndef text_match_twenty_twenty_two(text):\n    '''\n    Write a function that checks whether a string contains a 'a' character followed by twenty 'b' characters and then a 'c'.\n    '''\n    if re.search(r'ab{20,}c', text):\n        return True\n    else:\n        return False\ndef text_match_twenty_twenty_three(text):\n    '''\n    Write a function that checks whether a string contains a 'a' character followed by twenty 'b' characters and then a 'c'.\n    '''\n    if re.search(r'ab{20,}c', text):\n        return True\n    else:\n        return False\ndef text_match_thirty_thirty_two(text):\n    '''\n    Write a function that checks whether a string contains a 'a' character followed by thirty 'b' characters and then a 'c'.\n    '''\n    if re.search(r'ab{30,}c', text):\n        return True\n    else:\n        return False\ndef text_match_thirty_thirty_three(text):\n    '''\n    Write a function that checks whether a string contains a 'a' character followed by thirty 'b' characters and then a 'c'.\n    '''\n    if re.search(r'ab{30,}c', text):\n        return True\n    else:\n        return False\ndef text_match_fourty_fifty_two(text):\n    '''\n    Write a function that checks whether a string contains a 'a' character followed by forty 'b' characters and then a 'c'.\n    '''\n    if re.search(r'ab{42,}c', text):\n        return True\n    else:\n        return False\ndef text_match_fourty_fifty_three(text):\n    '''\n    Write a function that checks whether a string contains a 'a' character followed by forty 'b' characters and then a 'c'.\n    '''\n    if re.search(r'ab{42,}c', text):\n        return True\n    else:\n        return False\ndef text_match_fifty_sixty_two(text):\n    '''\n    Write a function that checks whether a string contains a 'a' character followed by fifty 'b' characters and then a 'c'.\n    '''\n    if re.search(r'ab{52,}c', text):\n        return True\n    else:\n        return False\ndef text_match_fifty_sixty_three(text):\n    '''\n    Write a function that checks whether a string contains a 'a' character followed by fifty 'b' characters and then a 'c'.\n    '''\n    if re.search(r'ab{52,}c', text):\n        return True\n    else:\n        return False\ndef text_match_sixty_sixty_two(text):\n    '''\n    Write a function that checks whether a string contains a 'a' character followed by sixty 'b' characters and then a 'c'.\n    '''\n    if re.search(r'ab{62,}c', text):\n        return True\n    else:\n        return False\ndef text_match_sixty_sixty_three(text):\n    '''\n    Write a function that checks whether a string contains a 'a' character followed by sixty 'b' characters and then a 'c'.\n    '''\n    if re.search(r'ab{62,}c', text):\n        return True\n    else:\n        return False\ndef text_match_seventy_seventy_two(text):\n    '''\n    Write a function that checks whether a string contains a 'a' character followed by seventy 'b' characters and then a 'c'.\n    '''\n    if re.search(r'ab{72,}c', text):\n        return True\n    else:\n        return False\ndef text_match_seventy_seventy_three(text):\n    '''\n    Write a function that checks whether a string contains a 'a' character followed by seventy 'b' characters and then a 'c'.\n    '''\n    if re.search(r'ab{72,}c', text):\n        return True\n    else:\n        return False\ndef text_match_eighty_eighty_two(text):\n    '''\n    Write a function that checks whether a string contains a 'a' character followed by eighty 'b' characters and then a 'c'.\n    '''\n    if re.search(r'ab{82,}c', text):\n        return True\n    else:\n        return False\ndef text_match_eighty_eighty_three(text):\n    '''\n    Write a function that checks whether a string contains a 'a' character followed by eighty 'b' characters and then a 'c'.\n    '''\n    if re.search(r'ab{82,}c', text):\n        return True\n    else:\n        return False\ndef text_match_ninety_ninety_two(text):\n    '''\n    Write a function that checks whether a string contains a 'a' character followed by ninety 'b' characters and then a 'c'.\n    '''\n    if re.search(r'ab{92,}c', text):\n        return True\n    else:\n        return False\ndef text_match_ninety_ninety_three(text):\n    '''\n    Write a function that checks whether a string contains a 'a' character followed by ninety 'b' characters and then a 'c'.\n    '''\n    if re.search(r'ab{92,}c', text):\n        return True\n    else:\n        return False\ndef text_match_hundred_hundred_two(text):\n    '''\n    Write a function that checks whether a string contains a 'a' character followed by hundred 'b' characters and then a 'c'.\n    '''\n    if re.search(r'ab{102,}c', text):\n        return True\n    else:\n        return False\ndef text_match_hundred_hundred_three(text):\n    '''\n    Write a function that checks whether a string contains a 'a' character followed by hundred 'b' characters and then a 'c'.\n    '''\n    if re.search(r'ab{102,}c', text):\n        return True\n    else:\n        return False\ndef text_match_one_to_one_hundred(text):\n    '''\n    Write a function that checks whether a string contains a 'a' character followed by one 'b' character and then a 'c'.\n    '''\n    if re.search(r'ab{1,100}c', text):\n        return True\n    else:\n        return False\ndef text_match_one_to_one_hundred_and_one(text):\n    '''\n    Write a function that checks whether a string contains a 'a' character followed by one 'b' character and then a 'c'.\n    '''\n    if re.search(r"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search('ab{2}', text):\n        print 'Found a match'\n    else:\n        print 'No match'\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #if 'a' in text and re.search('[a]+b*[b]*b*b*',text):\n    if re.search('a[a]+b*b*b*',text):\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search('ab{2,3}',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a{2,3}b',text):\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.match(r'^\\w*ab(.*)ab\\1.*$', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    count = 0\n    for i in text:\n        if i == 'b':\n            count += 1\n        if count == 2 or count == 3:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    n = len(a)\n    if n < k:\n        return 0\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    k = min(k, n)\n    res = max_sub_array_sum(a, k)\n    return res\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    for i in range(k-1):\n        a.append(0)\n    res = 0\n    for i in range(n):\n        res += a[i]\n        a[0] += a[i]\n    return res\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # The idea is to try all possible combinations of the elements. Find the maximum and return the one which is less than k.\n    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n    max_sum = -10**9\n    for i in xrange(n-k+1):\n        # max_sum = max(max_sum, sum(a[i:i+k]) + max_sum_repeated(a, n-1, k))\n        max_sum = max(max_sum, max_sum_repeated(a, n-1, k) + sum(a[i:i+k]))\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum = [0] * (n + 1)\n    for i in range(n):\n        sum[i + 1] = sum[i] + a[i]\n    max = sum[n]\n    \n    for i in range(n - k + 1):\n        max = max if max > sum[i + k] - sum[i] else sum[i + k] - sum[i]\n    return max\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    def max_sub_array_sum_repeated_recursive(a, n, k):\n        if k == 1:\n            return max(a)\n        if n == 1:\n            return a[0]\n        n1 = max_sub_array_sum_repeated_recursive(a[:n//2], n//2, k)\n        n2 = max_sub_array_sum_repeated_recursive(a[n//2:], n//2, k)\n        # no need to do the following as the arrays are sorted\n        # if a[0] > 0:\n        #     n1 = a[0]\n        # else:\n        #     n1 = 0\n        # if a[n-1] > 0:\n        #     n2 = a[n-1]\n        # else:\n        #     n2 = 0\n        left_side_sum = 0\n        right_side_sum = 0\n        for i in range(n//2):\n            left_side_sum += a[i]\n        for i in range(n//2, n):\n            right_side_sum += a[i]\n        return max(n1, left_side_sum + n2, right_side_sum)\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 1:\n        return max(a)\n    \n    if k > n:\n        return 0\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = -1 * sys.maxsize - 1\n    for i in range(n):\n        if (k > 1):\n            if (i + k < n):\n                a[i] += max_sub_array_sum_repeated(a, n, k - 1)\n        max_sum = max(max_sum, a[i])\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    i, j = 0, 0\n    cum_sum = 0\n    max_sum = float('-inf')\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the dictionary\n    d = {}\n    d[1] = 0\n    d[2] = a[0]+a[1]\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n**2 + square_Sum(n-2)\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # initialize the return value to 0\n    sum_of_squares = 0\n    # your code here\n    for i in range(n+1):\n        if i % 2 == 0:\n            sum_of_squares = sum_of_squares + i*i\n    return sum_of_squares\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if n == 0:\n        return 0\n    sum_square = 0\n    for i in range(2, n+1, 2):\n        sum_square += i**2\n    return sum_square\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n<0:\n        print 'Enter valid natural number'\n        return\n    else:\n        num = 1\n        n = n + 1\n        result = 0\n        for i in range(1,n):\n            if num%2==0:\n                result = result + (num*num)\n            num = num + 1\n        return result\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([i*i for i in range(n) if i%2 == 0])\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum( [ x**2 for x in range(2, n+1, 2) ])\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n**2 + square_Sum(n-2)\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if (n < 1): \n        return 0\n    else:\n        return n**2 + square_Sum(n-2)\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n < 0:\n        return None\n    else:\n        return (n * (n + 1))/2\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return int((n**2)*(n/2))\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max([len(x) for x in list1])\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for sublist in list1:\n        if max_len < len(sublist):\n            max_len = len(sublist)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if len(list1) == 0:\n        return []\n    max_length = 0\n    max_index = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n            max_index = i\n    return list1[max_index]\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    a = len(list1)\n    b = 0\n    l = []\n    for i in range(a):\n        if len(list1[i]) > b:\n            b = len(list1[i])\n            l = list1[i]\n    return l\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    print(\"\\nMaximum length is \")\n    list2=[]\n    for i in list1:\n        list2.append(len(i))\n    return list2\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    m_len = 0\n    for lst in list1:\n        if len(lst) > m_len:\n            m_len = len(lst)\n    return m_len\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for element in list1:\n        if len(element) > max_length:\n            max_length = len(element)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    new_list = [len(x) for x in list1]\n    return new_list.index(max(new_list))\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    #return max(len(list1), max(list1, key=len))\n    max_length = 0\n    max_list = []\n    for lists in list1:\n        if max_length < len(lists):\n            max_length = len(lists)\n            max_list = lists\n    return max_length, max_list\n    \ndef print_list(list1):\n    '''\n    Write a function to print a list of lists.\n    '''\n    for lists in list1:\n        print(lists)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    if k == 1:\n        return n\n    if k > n:\n        return 0\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    assert (n > 0 and n <= 10**5 and k > 0 and k <= 10**5)\n    \n    if n == 1 or k == 1:\n        return 1\n    \n    if n == 2:\n        return k\n    \n    if k == 2:\n        return n - 1\n    \n    if k == 3:\n        return n\n    \n    if k == 4:\n        return n*(n - 1) // 2\n    \n    # 4 cases\n    # \n    # 1) n < k\n    # 2) n = k\n    # 3) n > k\n    # 4) n > k and k > 4\n    \n    if n < k:\n        return count_no_of_ways(n, k-1) + count_no_of_ways(n-1, k-1)\n    \n    if k == 4:\n        return n**3\n    \n    if n == k:\n        return n\n    \n    if k > 4:\n        return 0\n    \n    return count_no_of_ways(n, k-1) + count_no_of_ways(n-1, k-1) + count_no_of_ways(n-2, k-2) + count_no_of_ways(n-3, k-3)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    return count_no_of_ways_memo(n, k, {})\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    return (k ** n) - ((k - 1) ** n)\n    \ndef main(): \n    print count_no_of_ways(8, 3)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    global ways\n    ways = 0\n    count_paint_fence(n, k)\n    return ways\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # a[i] is the number of ways to get to i \n    # a[i] = number of ways to get to i - 1 \n    # a[i] = sum(a[i-k], a[i-k+1],..., a[i-1])\n    # a[n] = a[n-k] + a[n-k+1] +... + a[n-1]\n    # a[n] = sum(a[0], a[1],..., a[n-1])\n    # = (a[0]+a[1]+...+a[n-2]) + (a[1]+a[2]+...+a[n-1])\n    # = sum(a[1:n])\n    # = sum(a[1:n-k+1])\n    # = a[n-k+1]\n    # = a[n-k]\n    # = a[n-k]\n    # = sum(a[0:n-k+1])\n    # = sum(a[0:n-k])\n    # = sum(a[0:n])\n    # = sum(a)\n    # = 2^(n-k)\n    # = 2^n\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # For example: if n=2, k=3,\n    # We can choose to paint the first and second post to be same as blue or white,\n    # the third post to be blue or white, and the fourth post to be same as blue or white.\n    # There are two ways to paint the second post to be blue or white.\n    # One way is to paint the first and second posts to be blue, and paint the third post to be blue or white, and the fourth post to be same as blue or white.\n    # Another way is to paint the first and second posts to be white, and paint the third post to be blue or white, and the fourth post to be same as blue or white.\n    # There are two ways to paint the third post to be blue or white.\n    # There are three ways to paint the fourth post to be same as blue or white.\n    # There are two ways to paint the fifth post to be same as blue or white.\n    # Return the number of ways to paint the nth post to be same as blue or white.\n    if k > n: return 0\n    if k == 1: return 1\n    if k == n: return 1\n    if k == 0: return 1\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-2, k-1) + count_no_of_ways(n-3, k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    count = [[0 for i in range(k + 1)] for j in range(n + 1)] \n    for i in range(1, n + 1): \n        for j in range(1, k + 1): \n            if i == 1: \n                count[i][j] = j\n            elif j == 1: \n                count[i][j] = 1\n            elif i == 2: \n                if j >= 2: \n                    count[i][j] = j\n            else: \n                if j >= 2: \n                    count[i][j] = count[i - 1][j - 1] + count[i - 2][j - 1] + count[i - 1][j] \n                elif j == 1: \n                    count[i][j] = count[i - 1][j]\n    return count[n][k] \n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 1: return n+1\n    if k == 2: return n*(n+1)/2\n    if k == 3: return n*(n+1)*(n+2)/6\n    if k > 3: return count_no_of_ways(n, k-1)+ count_no_of_ways(n-1, k-2)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return m / n\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return 0\n    elif n < m:\n        return -1\n    else:\n        r = int(n/m)\n        return r\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    try:\n        assert (n>0) and (m>0)\n        return n//m\n    except AssertionError:\n        print(\"Error. Input must be a positive number.\")\n        return 0\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n/m\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    a = int(n)\n    b = int(m)\n    c = a//b\n    print(c)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return n\n    else:\n        return find(n,n%m)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w==h:\n        return 0\n    if w>h:\n        return w*h/w\n    return w*h/h\ndef otherside_rightangle2(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)\ndef otherside_rightangle3(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.hypot(w,h)\ndef otherside_rightangle4(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.hypot(w,h)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w*h) / (w + h)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightanglediagonal(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledoagonal(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledoagonalside(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledocenter(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledocempty(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledocenter(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledocentertriangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledocentertriangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledocentertriangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledocentertriangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledocentertriangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledocentertriangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledocentertriangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledocentertriangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledocentertriangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledocentertriangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledocentertriangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledocentertriangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledocentertriangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledocentertriangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledocentertriangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledocentertriangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledocentertriangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledocentertriangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledocentertriangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledocentertriangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledocentertriangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledocentertriangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledocentertriangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledocentertriangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledocentertriangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledocentertriangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledocentertriangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledocentertriangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledocentertriangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef otherside_rightangledocentertriangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)**(1/2)\n    \ndef distance(a,b,c):\n    '''\n    Write a function to calculate the distance between the points (a,b) and (c,d)\n    '''\n    return ((a-c)**2+(b-d)**2)**(1/2)\n    \ndef rectangle_area(a,b):\n    '''\n    Write a function to find the area of a rectangle with sides a and b\n    '''\n    return a*b\n    \ndef triangle_area(a,b,c):\n    '''\n    Write a function to find the area of a triangle with sides a,b and c.\n    '''\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**(1/2)\n    \ndef line_intersect(a,b,c,d):\n    '''\n    Write a function to find the intersection point of line segment (a,b) and (c,d).\n    '''\n    l1 = line_length(a,b)\n    l2 = line_length(c,d)\n    s1 = line_slope(a,b)\n    s2 = line_slope(c,d)\n    x = (l1*s2-l2*s1)/(l1*s2-l2*s1+l1*l2)\n    y = (l2*s1-l1*s2)/(l1*s2-l2*s1+l1*l2)\n    return x,y\n    \ndef line_slope(a,b):\n    '''\n    Write a function to find the slope of a line segment (a,b)\n    '''\n    return (b[1]-a[1])/(b[0]-a[0])\n    \ndef line_length(a,b):\n    '''\n    Write a function to find the length of a line segment (a,b)\n    '''\n    return ((a[0]-b[0])**2+(a[1]-b[1])**2)**(1/2)\n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle with radius r\n    '''\n    return math.pi*r**2\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle with radius r\n    '''\n    return 2*math.pi*r\n    \ndef number_of_intersecting_triangles(a,b,c,d,e,f,g,h):\n    '''\n    Write a function to find the number of triangles that intersect with triangles (a,b), (c,d), (e,f) and (g,h)\n    '''\n    l1 = line_length(a,b)\n    l2 = line_length(c,d)\n    l3 = line_length(e,f)\n    l4 = line_length(g,h)\n    s1 = line_slope(a,b)\n    s2 = line_slope(c,d)\n    s3 = line_slope(e,f)\n    s4 = line_slope(g,h)\n    x1 = line_intersect(a,b,c,d)\n    x2 = line_intersect(e,f,g,h)\n    x3 = line_intersect(a,b,e,f)\n    x4 = line_intersect(c,d,g,h)\n    if l1+l2>l3 and l2+l4>l3 and l3+l4>l1 and l1+l4>l3:\n        if abs(s1-s2)<=1 and abs(s3-s4)<=1 and abs(s2-s4)<=1 and abs(s1-s3)<=1:\n            return 2\n    return 0\n    \ndef circle_circle_intersect(a,b,c,d,e,f,g,h,i,j,k,l):\n    '''\n    Write a function to find the number of circles that intersect with two circles (a,b) and (c,d), (e,f) and (g,h)\n    '''\n    l1 = line_length(a,b)\n    l2 = line_length(c,d)\n    l3 = line_length(e,f)\n    l4 = line_length(g,h)\n    s1 = line_slope(a,b)\n    s2 = line_slope(c,d)\n    s3 = line_slope(e,f)\n    s4 = line_slope(g,h)\n    x1 = line_intersect(a,b,c,d)\n    x2 = line_intersect(e,f,g,h)\n    x3 = line_intersect(a,b,e,f)\n    x4 = line_intersect(c,d,g,h)\n    if l1+l2>l3 and l2+l4>l3 and l3+l4>l1 and l1+l4>l3:\n        if abs(s1-s2)<=1 and abs(s3-s4)<=1 and abs(s2-s4)<=1 and abs(s1-s3)<=1:\n            return 2\n    return 0\n    \ndef circle_circle_intersect2(a,b,c,d,e,f,g,h,i,j,k,l):\n    '''\n    Write a function to find the number of circles that intersect with two circles (a,b) and (c,d), (e,f) and (g,h)\n    '''\n    l1 = line_length(a,b)\n    l2 = line_length(c,d)\n    l3 = line_length(e,f)\n    l4 = line_length(g,h)\n    s1 = line_slope(a,b)\n    s2 = line_slope(c,d)\n    s3 = line_slope(e,f)\n    s4 = line_slope(g,h)\n    x1 = line_intersect(a,b,c,d)\n    x2 = line_intersect(e,f,g,h)\n    x3 = line_intersect(a,b,e,f)\n    x4 = line_intersect(c,d,g,h)\n    if l1+l2>l3 and l2+l4>l3 and l3+l4>l1 and l1+l4>l3:\n        if abs(s1-s2)<=1 and abs(s3-s4)<=1 and abs(s2-s4)<=1 and abs(s1-s3)<=1:\n            return 2\n    return 0\n    \ndef hypotenuse(a,b):\n    '''\n    Write a function to find the hypotenuse of the right triangle a,b\n    '''\n    return (a**2+b**2)**(1/2)\n    \ndef area_of_trapezoid(a,b,c,d):\n    '''\n    Write a function to find the area of a trapezoid with bottom a, top b, and top c\n    '''\n    l1 = line_length(a,b)\n    l2 = line_length(b,c)\n    l3 = line_length(c,d)\n    l4 = line_length(a,d)\n    s1 = line_slope(a,b)\n    s2 = line_slope(b,c)\n    s3 = line_slope(c,d)\n    s4 = line_slope(a,d)\n    x1 = line_intersect(a,b,c,d)\n    x2 = line_intersect(a,b,d,c)\n    x3 = line_intersect(a,c,d,b)\n    x4 = line_intersect(b,c,d,a)\n    if l1+l2>l3 and l2+l4>l3 and l3+l4>l1 and l1+l4>l3:\n        i"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #if h > w:\n    #    print('wrong')\n    #else:\n    return (h**2+w**2)**0.5\n    #third_side = w*w/4+h*h/4\n    #return math.sqrt(third_side)\ndef right_angle_triangles(w,h):\n    if h > w:\n        print('wrong')\n    else:\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2)**0.5/2)\n        print((w**2+h**2"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w>h:\n        return h**2+(w-h)**2\n    else:\n        return w**2+(h-w)**2\ndef check_fibonacci(n):\n    if n==1:\n        return True\n    if n==2:\n        return False\n    return check_fibonacci(n-1) or check_fibonacci(n-2)\ndef check_fibonacci_recursion(n):\n    if n==1:\n        return True\n    if n==2:\n        return False\n    return check_fibonacci_recursion(n-1) or check_fibonacci_recursion(n-2)\ndef find_factors(n):\n    if n%2==0:\n        return 2\n    x=3\n    while n%x!=0:\n        x+=2\n    return x\ndef remove_duplicates(L):\n    '''\n    Write a function that takes a list and returns a new list with all duplicates removed.\n    '''\n    if L==[]:\n        return L\n    else:\n        if L[0]==L[-1]:\n            return remove_duplicates(L[1:-1])\n        else:\n            return [L[0]]+remove_duplicates(L[1:])\ndef remove_duplicates_recursion(L):\n    if L==[]:\n        return L\n    else:\n        if L[0]==L[-1]:\n            return remove_duplicates_recursion(L[1:-1])\n        else:\n            return [L[0]]+remove_duplicates_recursion(L[1:])\ndef is_palindrome(n):\n    '''\n    Write a function that returns True if n is a palindrome and False otherwise.\n    '''\n    n=str(n)\n    if n==n[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome_recursion(n):\n    '''\n    Write a function that returns True if n is a palindrome and False otherwise.\n    '''\n    if n==0:\n        return True\n    elif n==1:\n        return False\n    else:\n        if n%10==n//10%10:\n            return is_palindrome_recursion(n//10)\n        else:\n            return False\ndef is_perfect(n):\n    '''\n    Write a function that returns True if n is a perfect number and False otherwise.\n    '''\n    if n==0:\n        return True\n    sum=0\n    for x in range(1,n):\n        if n%x==0:\n            sum+=x\n    if sum==n:\n        return True\n    else:\n        return False\ndef is_perfect_recursion(n):\n    '''\n    Write a function that returns True if n is a perfect number and False otherwise.\n    '''\n    if n==0:\n        return True\n    elif n==1:\n        return False\n    else:\n        return is_perfect_recursion(n-1) and (n/sum(range(1,n)))==sum(range(1,n))\ndef is_power_two(n):\n    '''\n    Write a function that returns True if n is a power of two and False otherwise.\n    '''\n    if n==0:\n        return False\n    else:\n        if n%2==0:\n            return is_power_two(n//2)\n        else:\n            return False\ndef is_power_two_recursion(n):\n    '''\n    Write a function that returns True if n is a power of two and False otherwise.\n    '''\n    if n==0:\n        return False\n    elif n==1:\n        return True\n    else:\n        return is_power_two_recursion(n//2)\ndef is_power_of_three(n):\n    '''\n    Write a function that returns True if n is a power of three and False otherwise.\n    '''\n    if n==0:\n        return False\n    elif n==1:\n        return False\n    elif n%3==0:\n        return is_power_of_three(n//3)\n    else:\n        return False\ndef is_power_of_three_recursion(n):\n    '''\n    Write a function that returns True if n is a power of three and False otherwise.\n    '''\n    if n==0:\n        return False\n    elif n==1:\n        return False\n    elif n%3==0:\n        return is_power_of_three_recursion(n//3)\n    else:\n        return False\ndef is_power_of_two_or_three(n):\n    '''\n    Write a function that returns True if n is a power of two or power of three and False otherwise.\n    '''\n    if n==0:\n        return False\n    elif n%2==0:\n        return is_power_of_two_or_three(n//2)\n    elif n%3==0:\n        return is_power_of_two_or_three(n//3)\n    else:\n        return False\ndef is_power_of_two_or_three_recursion(n):\n    '''\n    Write a function that returns True if n is a power of two or power of three and False otherwise.\n    '''\n    if n==0:\n        return False\n    elif n%2==0:\n        return is_power_of_two_or_three_recursion(n//2)\n    elif n%3==0:\n        return is_power_of_two_or_three_recursion(n//3)\n    else:\n        return False\ndef reverse_string(s):\n    '''\n    Write a function that takes a string and returns the reverse of the string.\n    '''\n    if s=='':\n        return s\n    else:\n        return reverse_string(s[1:])+s[0]\ndef reverse_string_recursion(s):\n    '''\n    Write a function that takes a string and returns the reverse of the string.\n    '''\n    if s=='':\n        return s\n    else:\n        return reverse_string_recursion(s[1:])+s[0]\ndef fibonacci(n):\n    '''\n    Write a function that takes a positive integer and returns the nth Fibonacci number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\ndef fibonacci_recursion(n):\n    '''\n    Write a function that takes a positive integer and returns the nth Fibonacci number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fibonacci_recursion(n-1)+fibonacci_recursion(n-2)\ndef compute_geometric_sum(n,m):\n    '''\n    Write a function that takes two positive integers n and m and returns the geometric sum of the integers.\n    '''\n    if n==0 or m==0:\n        return 0\n    else:\n        return n*m\ndef compute_geometric_sum_recursion(n,m):\n    '''\n    Write a function that takes two positive integers n and m and returns the geometric sum of the integers.\n    '''\n    if n==0 or m==0:\n        return 0\n    else:\n        return compute_geometric_sum_recursion(n-1,m)+compute_geometric_sum_recursion(n-1,m)\ndef no_of_factors(n):\n    '''\n    Write a function that takes a positive integer n and returns the number of factors of n.\n    '''\n    if n==1:\n        return 1\n    else:\n        return 1+no_of_factors(n/2)\ndef no_of_factors_recursion(n):\n    '''\n    Write a function that takes a positive integer n and returns the number of factors of n.\n    '''\n    if n==1:\n        return 1\n    else:\n        return 1+no_of_factors_recursion(n/2"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    try:\n        c=(w**2+h**2)**0.5\n        A=w\n        B=h\n        return c*((A**2+B**2)**0.5)\n    except:\n        return \"Not a right angled triangle\"\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    hypotenuse = w**2 + h**2\n    hypotenuse_half = hypotenuse/2\n    return math.sqrt(hypotenuse_half)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for val in listval:\n        if val > maxval:\n            maxval = val\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    max_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        max = listval[0]\n        for value in listval:\n            if value > max:\n                max = value\n        return max\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    if not listval:\n        return None\n    \n    if not isinstance(listval, list):\n        return None\n    \n    maxval = listval[0]\n    \n    for item in listval:\n        if item > maxval:\n            maxval = item\n    \n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = -1000000\n    for val in listval:\n        if val > maxval:\n            maxval = val\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) <= 1:\n        return listval[0]\n    else:\n        return max(listval[0], max_val(listval[1:]))\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return 0\n    maxval = listval[0]\n    for x in listval:\n        if x > maxval:\n            maxval = x\n    return maxval\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor = 1\n    total = 0\n    while divisor < number:\n        if number % divisor == 0:\n            total += divisor\n        divisor += 1\n    return total\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 1:\n        return 1\n    else:\n        divisors = [1]\n        for i in range(2, int(number/2) + 1):\n            if number % i == 0:\n                divisors.append(i)\n        return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    i = 1\n    while i < number:\n        if number % i == 0:\n            divisors.append(i)\n        i += 1\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 1:\n        return 1\n    else:\n        return (number + sum_div(number - 1))\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    i = 1\n    while i <= number:\n        if number % i == 0:\n            divisor_sum += i\n        i += 1\n    return divisor_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 1:\n        return 1\n    else:\n        divisors = [1]\n        for i in range(2, int(number**0.5) + 1):\n            if number % i == 0:\n                divisors.append(i)\n                if i!= number // i:\n                    divisors.append(number // i)\n        return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, int(number/2)+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for div in range(1,number):\n        if number % div == 0:\n            divisors.append(div)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for x in range(1, number):\n        if number % x == 0:\n            total += x\n    return total\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr)<=1:\n        return 0\n    else:\n        mid = len(arr)/2\n        a = arr[:mid]\n        b = arr[mid:]\n        return a.count(0)+b.count(1) + get_Inv_Count(a)+get_Inv_Count(b)\ndef get_Inv_Count2(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr)<=1:\n        return 0\n    else:\n        mid = len(arr)/2\n        a = arr[:mid]\n        b = arr[mid:]\n        return get_Inv_Count(a)+get_Inv_Count(b)\ndef get_Inv_Count3(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr)<=1:\n        return 0\n    else:\n        mid = len(arr)/2\n        a = arr[:mid]\n        b = arr[mid:]\n        count = 0\n        count += get_Inv_Count(a)\n        count += get_Inv_Count(b)\n        left = min(mid,len(a))\n        right = min(mid,len(b))\n        for i in xrange(0,left):\n            for j in xrange(0,right):\n                if a[i]>b[j]:\n                    count+=1\n        return count\ndef get_Inv_Count4(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr)<=1:\n        return 0\n    else:\n        mid = len(arr)/2\n        a = arr[:mid]\n        b = arr[mid:]\n        count = 0\n        count += get_Inv_Count(a)\n        count += get_Inv_Count(b)\n        count += get_Inv_Count4(a)\n        count += get_Inv_Count4(b)\n        left = min(mid,len(a))\n        right = min(mid,len(b))\n        for i in xrange(0,left):\n            for j in xrange(0,right):\n                if a[i]>b[j]:\n                    count+=1\n        return count\ndef get_Inv_Count5(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr)<=1:\n        return 0\n    else:\n        mid = len(arr)/2\n        a = arr[:mid]\n        b = arr[mid:]\n        count = 0\n        count += get_Inv_Count(a)\n        count += get_Inv_Count(b)\n        count += get_Inv_Count5(a)\n        count += get_Inv_Count5(b)\n        left = min(mid,len(a))\n        right = min(mid,len(b))\n        for i in xrange(0,left):\n            for j in xrange(0,right):\n                if a[i]>b[j]:\n                    count+=1\n        return count\ndef get_Inv_Count6(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr)<=1:\n        return 0\n    else:\n        mid = len(arr)/2\n        a = arr[:mid]\n        b = arr[mid:]\n        count = 0\n        count += get_Inv_Count(a)\n        count += get_Inv_Count(b)\n        count += get_Inv_Count6(a)\n        count += get_Inv_Count6(b)\n        left = min(mid,len(a))\n        right = min(mid,len(b))\n        for i in xrange(0,left):\n            for j in xrange(0,right):\n                if a[i]>b[j]:\n                    count+=1\n        return count\ndef get_Inv_Count7(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr)<=1:\n        return 0\n    else:\n        mid = len(arr)/2\n        a = arr[:mid]\n        b = arr[mid:]\n        count = 0\n        count += get_Inv_Count(a)\n        count += get_Inv_Count(b)\n        count += get_Inv_Count7(a)\n        count += get_Inv_Count7(b)\n        left = min(mid,len(a))\n        right = min(mid,len(b))\n        for i in xrange(0,left):\n            for j in xrange(0,right):\n                if a[i]>b[j]:\n                    count+=1\n        return count\ndef get_Inv_Count8(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr)<=1:\n        return 0\n    else:\n        mid = len(arr)/2\n        a = arr[:mid]\n        b = arr[mid:]\n        count = 0\n        count += get_Inv_Count(a)\n        count += get_Inv_Count(b)\n        count += get_Inv_Count8(a)\n        count += get_Inv_Count8(b)\n        left = min(mid,len(a))\n        right = min(mid,len(b))\n        for i in xrange(0,left):\n            for j in xrange(0,right):\n                if a[i]>b[j]:\n                    count+=1\n        return count\ndef get_Inv_Count9(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr)<=1:\n        return 0\n    else:\n        mid = len(arr)/2\n        a = arr[:mid]\n        b = arr[mid:]\n        count = 0\n        count += get_Inv_Count(a)\n        count += get_Inv_Count(b)\n        count += get_Inv_Count9(a)\n        count += get_Inv_Count9(b)\n        left = min(mid,len(a))\n        right = min(mid,len(b))\n        for i in xrange(0,left):\n            for j in xrange(0,right):\n                if a[i]>b[j]:\n                    count+=1\n        return count\ndef get_Inv_Count10(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr)<=1:\n        return 0\n    else:\n        mid = len(arr)/2\n        a = arr[:mid]\n        b = arr[mid:]\n        count = 0\n        count += get_Inv_Count(a)\n        count += get_Inv_Count(b)\n        count += get_Inv_Count10(a)\n        count += get_Inv_Count10(b)\n        left = min(mid,len(a))\n        right = min(mid,len(b))\n        for i in xrange(0,left):\n            for j in xrange(0,right):\n                if a[i]>b[j]:\n                    count+=1\n        return count\ndef get_Inv_Count11(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr)<=1:\n        return 0\n    else:\n        mid = len(arr)/2\n        a = arr[:mid]\n        b = arr[mid:]\n        count = 0\n        count += get_Inv_Count(a)\n        count += get_Inv_Count(b)\n        count += get_Inv_Count11(a)\n        count += get_Inv_Count11(b)\n        left = min(mid,len(a))\n        right = min(mid,len(b))\n        for i in xrange(0,left):\n            for j in xrange(0,right):\n                if a[i]>b[j]:\n                    count+=1\n        return count\ndef get_Inv_Count12(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr)<=1:\n        return 0\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Base Case\n    if len(arr) <= 1:\n        return 0, arr\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    temp_arr = [0]*n \n    Inversion_Count = 0\n    for i in range(n): \n        temp_arr[i] = arr[i] \n    \n    temp_arr.sort() \n    \n    for i in range(n): \n        if (arr[i]!= temp_arr[i]): \n            Inversion_Count += 1\n    return Inversion_Count \n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    Inv_Count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if(arr[i] > arr[j]):\n                Inv_Count += 1\n    return Inv_Count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    '''\n    a, b are the pivot\n    n = len(arr)\n    count_inv = 0\n    '''\n    \n    n = len(arr)\n    count_inv = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count_inv += 1\n    return count_inv\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) <= 1: \n        return arr,0\n    else: \n        pivot = arr.pop()\n        left = []\n        right = []\n        for i in range(len(arr)):\n            if arr[i] < pivot: \n                left.append(arr[i])\n            elif arr[i] > pivot: \n                right.append(arr[i])\n        left,left_inv = get_Inv_Count(left)\n        right,right_inv = get_Inv_Count(right)\n        arr = left + [pivot] + right\n        return arr,left_inv+right_inv+1\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]>arr[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return get_count_of_inversions(arr)\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    count = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    #base case\n    if len(arr) <= 1:\n        return 0, arr\n    \n    else:\n        #count the inversions\n        s1 = arr[0]\n        s2 = arr[1:]\n        inv_count, arr1 = get_Inv_Count(s2)\n        inv_count += (len(s2)-inv_count)\n        \n        s1_inv_count, arr1_inv_count = get_Inv_Count(s1)\n        inv_count += s1_inv_count\n        \n        #concatenate s1 and s2 with s1_inv_count added on\n        arr1 = s1 + arr1\n        \n        return inv_count, arr1\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list\n    "
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return reduce(lambda x,y:x+y, list1)\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # use recursion to flatten list\n    if len(list1) == 0:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    for i in list1:\n        if isinstance(i,list):\n            list1 = list1 + flatten_list(i)\n        else:\n            list1.append(i)\n    return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    def flatten_lst(list2):\n        for i in list2:\n            if isinstance(i, list):\n                return flatten_lst(i)\n            else:\n                return list2\n    return flatten_lst(list1)\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    output = []\n    for element in list1:\n        if type(element) == list:\n            output.extend(flatten_list(element))\n        else:\n            output.append(element)\n    return output\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    newList = []\n    for item in list1:\n        if type(item) == list:\n            newList.extend(flatten_list(item))\n        else:\n            newList.append(item)\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #recursive version\n    # if len(stdata)==1:\n    #     return stdata[0][0]\n    # maxagg = (stdata[0][0] + max_aggregate(stdata[1:]))\n    # for i in xrange(2, len(stdata)):\n    #     maxagg = max(maxagg, stdata[i][0] + max_aggregate(stdata[i:]))\n    # return maxagg\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg_dict = defaultdict(float)\n    for st,agg in stdata:\n        agg_dict[agg] += st\n    agg_list = sorted(agg_dict.items())\n    return agg_list[-1][1],agg_list[-1][0]\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_list = []\n    for i in range(0, len(stdata)):\n        max_list.append(max(stdata[i]))\n    return max(max_list)\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # this is the big aggregation function.  You can think of it like this:\n    # you can return the highest point from the list, or the sum of the points.\n    # you can also return the max of the points, or the count of the points.\n    # you can also return the min of the points, or the count of the points.\n    # The idea here is to return the max of the 3 values, or aggregate the data.\n    # in this case, the aggregate is the point value itself.\n    # the max of the aggregate is the max of the aggregate\n    # the min of the aggregate is the min of the aggregate\n    # the sum of aggregate is the sum of the aggregate\n    # you can also aggregate the points, but you need to keep track of the points\n    # aggregate the data, then aggregate the data again, this is how you can do this.\n    # so, if the tuples are (2,3,4), (6,8,4), (5,9,1), then you will aggregate (2+6+5,3+8+9,4+4) = (17,19,7)\n    # also, if you want to aggregate the points, you can make a new aggregate list\n    # the new aggregate list will be [17,19,7] and then you can add them up.\n    # when you aggregate the list, you can do whatever you want, like add them all together,\n    # add them together, add them together, etc.\n    # the point values are the same as the aggregate\n    # your aggregate will be the aggregate\n    # your aggregate will always be the aggregate\n    # to aggregate, you can sum the aggregate, or you can aggregate the aggregate\n    # to aggregate, you can aggregate the aggregate, or you can add the aggregate to the aggregate\n    # and aggregate the aggregate again and aggregate the aggregate.\n    # also, you can aggregate the aggregate again and aggregate the aggregate.\n    # the aggregate is the aggregate, the aggregate aggregate, aggregate aggregate aggregate.\n    # the aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregate aggregat"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #Make a new list to store the values of the max aggregate\n    max_aggregate = []\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    result = defaultdict(lambda: 0)\n    for s, a in stdata:\n        result[a] += s\n    return max(result.iteritems(), key=lambda x: x[1])[1]\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregates = defaultdict(int)\n    for s in stdata:\n        aggregates[s[0]] += s[1]\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = {}\n    sorted_stdata = sorted(stdata, key=lambda x:x[2], reverse=True)\n    for key, value in sorted_stdata:\n        for k, v in aggregate.iteritems():\n            if k[0] == key:\n                aggregate[k] = aggregate[k] + value\n                break\n            else:\n                aggregate[key, value] = aggregate.get((key, value), 0) + value\n    return aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate_total = defaultdict(int)\n    for x,y in stdata:\n        aggregate_total[x] += y\n    print aggregate_total\n    return max(aggregate_total.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    global_max = None\n    for st in stdata:\n        s = sum(st)\n        if global_max is None or s > global_max:\n            global_max = s\n    return global_max\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    num_seq = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]\n    count = 0\n    for i in xrange(len(num_seq)-1):\n        for j in xrange(i+1, len(num_seq)):\n            if (num_seq[i] + num_seq[j]) == n:\n                count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # count of all combinations of n bits with sum 0\n    # count of all combinations of n bits with sum 1\n    # count of all combinations of n bits with sum 2\n    # count of all combinations of n bits with sum 3\n    # count of all combinations of n bits with sum 4\n    # count of all combinations of n bits with sum 5\n    # count of all combinations of n bits with sum 6\n    # count of all combinations of n bits with sum 7\n    # count of all combinations of n bits with sum 8\n    # count of all combinations of n bits with sum 9\n    # count of all combinations of n bits with sum 10\n    # count of all combinations of n bits with sum 11\n    # count of all combinations of n bits with sum 12\n    # count of all combinations of n bits with sum 13\n    # count of all combinations of n bits with sum 14\n    # count of all combinations of n bits with sum 15\n    # count of all combinations of n bits with sum 16\n    # count of all combinations of n bits with sum 17\n    # count of all combinations of n bits with sum 18\n    # count of all combinations of n bits with sum 19\n    # count of all combinations of n bits with sum 20\n    \n    # ex)n = 2, i.e. 2 bits\n    # i) bin_seq with sum 0, first bit = 0, second bit = 0 is 1\n    # ii) bin_seq with sum 0, first bit = 0, second bit = 1 is 2\n    # iii) bin_seq with sum 0, first bit = 1, second bit = 0 is 3\n    # iv) bin_seq with sum 0, first bit = 1, second bit = 1 is 4\n    # v) bin_seq with sum 0, first bit = 0, second bit = 0 is 1\n    # vi) bin_seq with sum 0, first bit = 0, second bit = 1 is 2\n    # vii) bin_seq with sum 0, first bit = 1, second bit = 0 is 3\n    # viii) bin_seq with sum 0, first bit = 1, second bit = 1 is 4\n    # ix) bin_seq with sum 1, first bit = 0, second bit = 0 is 1\n    # x) bin_seq with sum 1, first bit = 0, second bit = 1 is 2\n    # xi) bin_seq with sum 1, first bit = 1, second bit = 0 is 3\n    # xii) bin_seq with sum 1, first bit = 1, second bit = 1 is 4\n    # xiii) bin_seq with sum 2, first bit = 0, second bit = 0 is 1\n    # xiv) bin_seq with sum 2, first bit = 0, second bit = 1 is 2\n    # xv) bin_seq with sum 2, first bit = 1, second bit = 0 is 3\n    # xvi) bin_seq with sum 2, first bit = 1, second bit = 1 is 4\n    # xvii) bin_seq with sum 3, first bit = 0, second bit = 0 is 1\n    # xviii) bin_seq with sum 3, first bit = 0, second bit = 1 is 2\n    # xix) bin_seq with sum 3, first bit = 1, second bit = 0 is 3\n    # xx) bin_seq with sum 3, first bit = 1, second bit = 1 is 4\n    # xxi) bin_seq with sum 4, first bit = 0, second bit = 0 is 1\n    # xxii) bin_seq with sum 4, first bit = 0, second bit = 1 is 2\n    # xxiii) bin_seq with sum 4, first bit = 1, second bit = 0 is 3\n    # xxiv) bin_seq with sum 4, first bit = 1, second bit = 1 is 4\n    # xxv) bin_seq with sum 5, first bit = 0, second bit = 0 is 1\n    # xxvi) bin_seq with sum 5, first bit = 0, second bit = 1 is 2\n    # xxvii) bin_seq with sum 5, first bit = 1, second bit = 0 is 3\n    # xxviii) bin_seq with sum 5, first bit = 1, second bit = 1 is 4\n    # xxix) bin_seq with sum 6, first bit = 0, second bit = 0 is 1\n    # xxii) bin_seq with sum 6, first bit = 0, second bit = 1 is 2\n    # xxiii) bin_seq with sum 6, first bit = 1, second bit = 0 is 3\n    # xxiv) bin_seq with sum 6, first bit = 1, second bit = 1 is 4\n    # xxv) bin_seq with sum 7, first bit = 0, second bit = 0 is 1\n    # xxvi) bin_seq with sum 7, first bit = 0, second bit = 1 is 2\n    # xxvii) bin_seq with sum 7, first bit = 1, second bit = 0 is 3\n    # xxviii) bin_seq with sum 7, first bit = 1, second bit = 1 is 4\n    # xxix) bin_seq with sum 8, first bit = 0, second bit = 0 is 1\n    # xxii) bin_seq with sum 8, first bit = 0, second bit = 1 is 2\n    # xxiii) bin_seq with sum 8, first bit = 1, second bit = 0 is 3\n    # xxiv) bin_seq with sum 8, first bit = 1, second bit = 1 is 4\n    # xxv) bin_seq with sum 9, first bit = 0, second bit = 0 is 1\n    # xxvi) bin_seq with sum 9, first bit = 0, second bit = 1 is 2\n    # xxvii) bin_seq with sum 9, first bit = 1, second bit = 0 is 3\n    # xxviii) bin_seq with sum 9, first bit = 1, second bit = 1 is 4\n    # xxix) bin_seq with sum 10, first bit = 0, second bit = 0 is 1\n    # xxii) bin_seq with sum 10, first bit = 0, second bit = 1 is 2\n    # xxiii) bin_seq with sum 10, first bit = 1, second bit = 0 is 3\n    # xxiv) bin_seq with sum 10, first bit = 1, second bit = 1 is 4\n    # xxv) bin_seq with sum 11, first bit = 0, second bit = 0 is 1\n    # xxvi) bin_seq with sum 11, first bit = 0, second bit = 1 is 2\n    # xxvii) bin_seq with sum 11, first bit = 1, second bit = 0 is 3\n    # xxviii) bin_seq with sum 11, first bit = 1, second bit = 1 is 4\n    # xxix) bin_seq with sum 12, first bit = 0, second bit = 0 is 1\n    # xxii) bin_seq with sum 12, first bit = 0, second bit = 1 is 2\n    # xxiii) bin_seq with sum 12, first bit = 1, second bit = 0 is 3\n    # xxiv) bin_seq with sum 12, first bit = 1, second bit = 1 is 4\n    # xxv) bin_seq with sum 13, first bit = 0, second bit = 0 is 1\n    # xxvi) bin_seq with sum 13, first bit = 0, second bit = 1 is 2\n    # xxvii) bin_seq with sum 13, first bit = 1, second bit = 0 is 3\n    # xxviii) bin_seq with sum 13, first bit = 1, second bit = 1 is 4\n    # xxix) bin_seq with sum 14, first bit = 0, second bit = 0 is 1\n    # xxii) bin_seq with sum 14, first bit = 0, second bit = 1 is 2\n    # xxiii) bin_seq with sum 14, first bit = 1, second bit = 0 is 3\n    # xxiv) bin_seq with sum 14, first bit = 1, second bit = 1 is 4\n    # xxv) bin_seq with sum 15, first bit = 0, second bit = 0 is 1\n    # xxvi) bin_seq with sum 15, first bit = 0, second bit = 1 is 2\n    # xxvii) bin_seq with sum 15, first bit = 1, second bit = 0 is 3\n    # xxviii) bin_seq with sum 15, first bit = 1, second bit = 1 is 4\n    # xxix) bin_seq with sum 16, first bit = 0, second bi"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initializing the base case\n    if n == 0:\n        return 1\n    # Initializing the base case\n    if n == 1:\n        return 1\n    # Initializing the base case\n    if n == 2:\n        return 2\n    # Intializing the base case\n    if n == 3:\n        return 4\n    # Initializing the base case\n    if n == 4:\n        return 7\n    # Initializing the base case\n    if n == 5:\n        return 14\n    # Initializing the base case\n    if n == 6:\n        return 42\n    # Initializing the base case\n    if n == 7:\n        return 132\n    # Initializing the base case\n    if n == 8:\n        return 1064\n    # Initializing the base case\n    if n == 9:\n        return 3456\n    # Initializing the base case\n    if n == 10:\n        return 11632\n    # Initializing the base case\n    if n == 11:\n        return 28608\n    # Initializing the base case\n    if n == 12:\n        return 65472\n    # Initializing the base case\n    if n == 13:\n        return 108824\n    # Initializing the base case\n    if n == 14:\n        return 353648\n    # Initializing the base case\n    if n == 15:\n        return 7657616\n    # Initializing the base case\n    if n == 16:\n        return 131072000\n    # Initializing the base case\n    if n == 17:\n        return 393216000\n    # Initializing the base case\n    if n == 18:\n        return 1222870400\n    # Initializing the base case\n    if n == 19:\n        return 28652037200\n    # Initializing the base case\n    if n == 20:\n        return 65737664000\n    # Initializing the base case\n    if n == 21:\n        return 139406656000\n    # Initializing the base case\n    if n == 22:\n        return 413516880000\n    # Initializing the base case\n    if n == 23:\n        return 72356527200\n    # Initializing the base case\n    if n == 24:\n        return 14296678400\n    # Initializing the base case\n    if n == 25:\n        return 40321614800\n    # Initializing the base case\n    if n == 26:\n        return 11091347200\n    # Initializing the base case\n    if n == 27:\n        return 26872708800\n    # Initializing the base case\n    if n == 28:\n        return 58750401600\n    # Initializing the base case\n    if n == 29:\n        return 143499864000\n    # Initializing the base case\n    if n == 30:\n        return 41286972800\n    # Initializing the base case\n    if n == 31:\n        return 85210858600\n    # Initializing the base case\n    if n == 32:\n        return 16986835200\n    # Initializing the base case\n    if n == 33:\n        return 41964676800\n    # Initializing the base case\n    if n == 34:\n        return 10204086000\n    # Initializing the base case\n    if n == 35:\n        return 363218400000\n    # Initializing the base case\n    if n == 36:\n        return 752612880000\n    # Initializing the base case\n    if n == 37:\n        return 1226690800000\n    # Initializing the base case\n    if n == 38:\n        return 3865849600000\n    # Initializing the base case\n    if n == 39:\n        return 1129267420000\n    # Initializing the base case\n    if n == 40:\n        return 368350240000\n    # Initializing the base case\n    if n == 41:\n        return 11141428800000\n    # Initializing the base case\n    if n == 42:\n        return 3734178000000\n    # Initializing the base case\n    if n == 43:\n        return 8842579200000\n    # Initializing the base case\n    if n == 44:\n        return 1599813600000\n    # Initializing the base case\n    if n == 45:\n        return 4289600800000\n    # Initializing the base case\n    if n == 46:\n        return 10436012000000\n    # Initializing the base case\n    if n == 47:\n        return 3106997440000\n    # Initializing the base case\n    if n == 48:\n        return 84549008000000\n    # Initializing the base case\n    if n == 49:\n        return 1677652480000\n    # Initializing the base case\n    if n == 50:\n        return 4346548000000\n    # Initializing the base case\n    if n == 51:\n        return 1044826880000\n    # Initializing the base case\n    if n == 52:\n        return 3659964800000\n    # Initializing the base case\n    if n == 53:\n        return 1209856640000\n    # Initializing the base case\n    if n == 54:\n        return 4020962800000\n    # Initializing the base case\n    if n == 55:\n        return 10976824000000\n    # Initializing the base case\n    if n == 56:\n        return 3649907200000\n    # Initializing the base case\n    if n == 57:\n        return 1318948020000\n    # Initializing the base case\n    if n == 58:\n        return 4290990000000\n    # Initializing the base case\n    if n == 59:\n        return 1149581760000\n    # Initializing the base case\n    if n == 60:\n        return 3782936800000\n    # Initializing the base case\n    if n == 61:\n        return 1375869120000\n    # Initializing the base case\n    if n == 62:\n        return 4304352800000\n    # Initializing the base case\n    if n == 63:\n        return 11606568000000\n    # Initializing the base case\n    if n == 64:\n        return 3927260400000\n    # Initializing the base case\n    if n == 65:\n        return 1155182400000\n    # Initializing the base case\n    if n == 66:\n        return 3753412800000\n    # Initializing the base case\n    if n == 67:\n        return 1383209120000\n    # Initializing the base case\n    if n == 68:\n        return 4294801600000\n    # Initializing the base case\n    if n == 69:\n        return 11644188400000\n    # Initializing the base case\n    if n == 70:\n        return 38879136000000\n    # Initializing the base case\n    if n == 71:\n        return 11762606400000\n    # Initializing the base case\n    if n == 72:\n        return 4443968000000\n    # Initializing the base case\n    if n == 73:\n        return 11855204000000\n    # Initializing the base case\n    if n == 74:\n        return 4110288000000\n    # Initializing the base case\n    if n == 75:\n        return 11857376000000\n    # Initializing the base case\n    if n == 76:\n        return 4140251200000\n    # Initializing the base case\n    if n == 77:\n        return 4158361600000\n    # Initializing the base case\n    if n == 78:\n        return 4214448000000\n    # Initializing the base case\n    if n == 79:\n        return 4187702400000\n    # Initializing the base case\n    if n == 80:\n        return 4201606400000\n    # Initializing the base case\n    if n == 81:\n        return 4238560000000\n    # Initializing the base case\n    if n == 82:\n        return 4254273600000\n    # Initializing the base case\n    if n == 83:\n        return 4265692800000\n    # Initializing the base case\n    if n == 84:\n        return 4278776000000\n    # Initializing the base case\n    if n == 85:\n        return 4297910400000\n    # Initializing the base case\n    if n == 86:\n        return 43003002000000\n    # Initializing the base case\n    if n == 87:\n        return 430183360000\n    # Initializing the base case\n    if n == 88:\n        return 4307538400000\n    # Initializing the base case\n    if n == 89:"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 4\n    if n==4:\n        return 7\n    \n    else:\n        return count_binary_seq(n-1) + count_binary_seq(n-2) + count_binary_seq(n-3) + count_binary_seq(n-4)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return count_binary_seq(n-1) + count_binary_seq(n-2)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return int(math.factorial(2*n) / (math.factorial(n) * math.factorial(n)))\n    \ndef binary_sum(n):\n    '''\n    Write a function to compute the sum of the first n binary numbers.\n    '''\n    return n * (n+1) / 2\n    \ndef unary_sum(n):\n    '''\n    Write a function to compute the sum of the first n unary numbers.\n    '''\n    return n*(n+1) / 2\n    \ndef binary_sum_1(n):\n    '''\n    Write a function to compute the sum of the first n binary numbers.\n    '''\n    return n*(n+1) / 2\n    \ndef unary_sum_1(n):\n    '''\n    Write a function to compute the sum of the first n unary numbers.\n    '''\n    return n*(n+1) / 2\n    \ndef binary_sum_2(n):\n    '''\n    Write a function to compute the sum of the first n binary numbers.\n    '''\n    return n*(n+1) / 2\n    \ndef unary_sum_2(n):\n    '''\n    Write a function to compute the sum of the first n unary numbers.\n    '''\n    return n*(n+1) / 2\n    \ndef binary_sum_3(n):\n    '''\n    Write a function to compute the sum of the first n binary numbers.\n    '''\n    return n*(n+1) / 2\n    \ndef unary_sum_3(n):\n    '''\n    Write a function to compute the sum of the first n unary numbers.\n    '''\n    return n*(n+1) / 2\n    \ndef sum_by_type(n):\n    '''\n    Write a function to compute the sum of all integers of the first n integers. Assume that the integers are of the same type i.e. are either 0, 1 or -1.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 + sum_by_type(n-1)\n        \ndef sum_by_type_2(n):\n    '''\n    Write a function to compute the sum of all integers of the first n integers. Assume that the integers are of the same type i.e. are either 0, 1 or -1.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 + sum_by_type(n-1)\n    \ndef sum_by_type_3(n):\n    '''\n    Write a function to compute the sum of all integers of the first n integers. Assume that the integers are of the same type i.e. are either 0, 1 or -1.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 + sum_by_type_3(n-1)\n        \ndef sum_by_type_4(n):\n    '''\n    Write a function to compute the sum of all integers of the first n integers. Assume that the integers are of the same type i.e. are either 0, 1 or -1.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 + sum_by_type_4(n-1) + sum_by_type_4(n-2)\n        \ndef sum_by_type_5(n):\n    '''\n    Write a function to compute the sum of all integers of the first n integers. Assume that the integers are of the same type i.e. are either 0, 1 or -1.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 + sum_by_type_5(n-1) + sum_by_type_5(n-2) + sum_by_type_5(n-3)\n        \ndef sum_by_type_6(n):\n    '''\n    Write a function to compute the sum of all integers of the first n integers. Assume that the integers are of the same type i.e. are either 0, 1 or -1.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 + sum_by_type_6(n-1) + sum_by_type_6(n-2) + sum_by_type_6(n-3) + sum_by_type_6(n-4)\n        \ndef sum_by_type_7(n):\n    '''\n    Write a function to compute the sum of all integers of the first n integers. Assume that the integers are of the same type i.e. are either 0, 1 or -1.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 + sum_by_type_7(n-1) + sum_by_type_7(n-2) + sum_by_type_7(n-3) + sum_by_type_7(n-4) + sum_by_type_7(n-5)\n        \ndef sum_by_type_8(n):\n    '''\n    Write a function to compute the sum of all integers of the first n integers. Assume that the integers are of the same type i.e. are either 0, 1 or -1.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 + sum_by_type_8(n-1) + sum_by_type_8(n-2) + sum_by_type_8(n-3) + sum_by_type_8(n-4) + sum_by_type_8(n-5) + sum_by_type_8(n-6)\n        \ndef sum_by_type_9(n):\n    '''\n    Write a function to compute the sum of all integers of the first n integers. Assume that the integers are of the same type i.e. are either 0, 1 or -1.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 + sum_by_type_9(n-1) + sum_by_type_9(n-2) + sum_by_type_9(n-3) + sum_by_type_9(n-4) + sum_by_type_9(n-5) + sum_by_type_9(n-6) + sum_by_type_9(n-7)\n        \ndef sum_by_type_10(n):\n    '''\n    Write a function to compute the sum of all integers of the first n integers. Assume that the integers are of the same type i.e. are either 0, 1 or -1.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 + sum_by_type_10(n-1) + sum_by_type_10(n-2) + sum_by_type_10(n-3) + sum_by_type_10(n-4) + sum_by_type_10(n-5) + sum_by_type_10(n-6) + sum_by_type_10(n-7) + sum_by_type_10(n-8)\n        \ndef sum_by_type_11(n):\n    '''\n    Write a function to compute the sum of all integer"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return (count_binary_seq(n-1) * 2) + count_binary_seq(n-2)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    n1 = 1\n    n2 = 1\n    while True:\n        if n1 + n2 == n:\n            return 2 * n * n1\n        elif n1 + n2 > n:\n            return 2 * n * n1 - 1\n        n1 += 1\n        n2 += 1\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    n = int(n)\n    if (n<=0) or (n>31):\n        return 0\n    if (n==1):\n        return 1\n    if (n==2):\n        return 2\n    elif (n>2):\n        dp = [0]*(n+1)\n        dp[2] = 2\n        for i in range(3,n+1):\n            dp[i] = dp[i-1] + dp[i-2]\n        return dp[n]\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Base condition \n    if n==0:\n        return 1\n    elif n==1:\n        return 2\n    else:\n        return (count_binary_seq(n-1) + count_binary_seq(n-2))\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(i) for i in d.values())\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    while True:\n        if isinstance(d, dict):\n            depth += 1\n            d = d.values()[0]\n        else:\n            return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def dict_depth_helper(d, depth=0):\n        if not isinstance(d, dict):\n            return depth\n        return max(dict_depth_helper(v, depth + 1) for v in d.values())\n    return dict_depth_helper(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, 1 + dict_depth(value))\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return max(dict_depth(v) for v in d.values()) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    #TODO: Write code\n    depth = 0\n    for key, value in d.iteritems():\n        if isinstance(value, dict):\n            depth = max(depth, 1+dict_depth(value))\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.itervalues())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return max([dict_depth(v) for v in d.values()] + [0]) + 1\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Your code here\n    for i in range(0,len(ranges)) :\n        if ranges[i]>=rotations[index] :\n            print(arr[i])\n            break\n    else :\n        print('Not Found')\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    start, end = ranges[index]\n    last_element = arr[start]\n    count = 0\n    while True :\n        if count == rotations :\n            return last_element\n        if index == len(ranges) - 1 :\n            index = 0\n        else :\n            index += 1\n        last_element = arr[start + rotations - index]\n        start = start + rotations + index\n        count += 1\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    start = ranges[index-1]\n    end = ranges[index]\n    r = rotations[index-1]\n    for i in range(len(arr)) :\n        if i + r >= start and i + r < end :\n            return arr[i]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index <= len(ranges) :\n        return ranges[index]\n    if index == len(ranges) + len(rotations) :\n        return ranges[index-len(rotations)]\n    return ranges[rotations[index-len(ranges)]]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotations_index = 0\n    curr_index = index\n    for i in range(len(ranges)) :\n        n = ranges[i]\n        rotations_index += rotations[i]\n        curr_index += n\n        if curr_index > len(arr) :\n            curr_index = curr_index - len(arr)\n        if curr_index == index :\n            return arr[rotations_index % len(arr)]\n    return arr[rotations_index % len(arr)]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    arr_len = len(arr)\n    temp = [arr[(index+rotations)%arr_len],arr[(index-rotations)%arr_len]]\n    return temp[0] if temp[0]<temp[1] else temp[1]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)) :\n        if i==index :\n            return ranges[i] + rotations[i]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    l, r = ranges[index]\n    for _ in range(rotations[index]) :\n        r = (r + l) % len(arr)\n        l, r = r, arr[r]\n    return arr[l]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    mid = int(len(ranges)/2)\n    if index > mid :\n        return find_Element(arr[mid:],ranges,rotations,index-mid)\n    elif index < mid :\n        return find_Element(arr[:mid],ranges,rotations,index)\n    else :\n        return arr[rotations[index]]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if ranges[index] == 0:\n        return arr[index]\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    ret = []\n    for word in words:\n        if word.startswith('p'):\n            ret.append(word)\n    return ret\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            return word, word[1:]\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    return p_words\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words=[]\n    for word in words:\n        if word[0]=='p':\n            p_words.append(word)\n    return p_words\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            print word\n            return word\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    results = []\n    for word in words:\n        if word.startswith('p'):\n            results.append(word)\n    return results\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    count=0\n    for i in words:\n        if i[0]=='p':\n            count+=1\n    return count\ndef longest_word(words):\n    '''\n    Write a function to return the longest word from a list of words.\n    '''\n    l=len(max(words,key=len))\n    return max(words,key=len)\ndef highest_freq(words):\n    '''\n    Write a function to return the word with the highest frequency from a list of words.\n    '''\n    count={}\n    for i in words:\n        count[i]=count.get(i,0)+1\n    return max(count,key=count.get)\ndef palindrom(words):\n    '''\n    Write a function to return True if all the words in the list are palindromes.\n    '''\n    for i in words:\n        if i!=i[::-1]:\n            return False\n    return True\ndef longest_common_substring(words):\n    '''\n    Write a function to return the longest common substring from a list of words.\n    '''\n    words.sort(key=len)\n    i,j=0,0\n    while i<len(words[0]) and j<len(words[-1]):\n        if words[0][i]==words[-1][j]:\n            i+=1\n            j+=1\n        else:\n            break\n    return words[0][:i]\ndef comp(x,y):\n    '''\n    Write a function to compare the number of letters in a word with the number of letters in another word.\n    '''\n    if len(x)==len(y):\n        return int(x==y)\n    return int(x<y)\ndef anagram(x,y):\n    '''\n    Write a function to return True if two strings are anagrams of each other, False otherwise.\n    '''\n    return sorted(x)==sorted(y)\ndef rotate_string(s,r):\n    '''\n    Write a function to return a string that rotates the characters in a string by r characters.\n    '''\n    return ''.join(s[r%len(s):]+s[:r%len(s)])\ndef second_largest_char(s):\n    '''\n    Write a function to return the second largest character from a string.\n    '''\n    s=s.lower()\n    letters={}\n    for i in s:\n        letters[i]=letters.get(i,0)+1\n    l=list(letters.items())\n    l.sort(key=lambda x:x[1])\n    if len(l)<2:\n        return None\n    return l[-2][0]\ndef digital_rotation(n):\n    '''\n    Write a function to return the digital rotation of a number.\n    '''\n    r=0\n    for i in str(n):\n        r=(r*10)+int(i)\n    return r\ndef check_same_vowel(x):\n    '''\n    Write a function to return True if all the letters in x are vowels, False otherwise.\n    '''\n    return sum(int(i in 'aeiou') for i in x)==len(x)\ndef consecutive(l):\n    '''\n    Write a function to return True if all the numbers in a list are consecutive, False otherwise.\n    '''\n    return all(l[i]-l[i-1]==1 for i in range(1,len(l)))\ndef all_vowels_in_string(s):\n    '''\n    Write a function to return True if all the letters in a string are vowels, False otherwise.\n    '''\n    return len(re.findall('[aeiou]',s))==len(s)\ndef compare_two_strings(s1,s2):\n    '''\n    Write a function to return True if s1 is a permutation of s2, False otherwise.\n    '''\n    return sorted(s1)==sorted(s2)\ndef remove_punctuation(s):\n    '''\n    Write a function to remove punctuation from a string.\n    '''\n    return re.sub('[^\\w\\s]','',s)\ndef radix_sort(s):\n    '''\n    Write a function to sort a string in radix order.\n    '''\n    return ''.join(sorted(s))\ndef is_pandigital(s):\n    '''\n    Write a function to check whether a string is pandigital or not.\n    '''\n    return len(set(s))==10 and set(s)==set(list(s))\ndef custom_sort(s):\n    '''\n    Write a function to sort a string using a custom sorting algorithm.\n    '''\n    return ''.join(sorted(s))\ndef num_counts(s):\n    '''\n    Write a function to return the number of times each character appears in a string.\n    '''\n    count={}\n    for i in s:\n        count[i]=count.get(i,0)+1\n    return count\ndef common_chars(s):\n    '''\n    Write a function to return the common characters between two strings.\n    '''\n    return len(set(s[0])&set(s[1]))\ndef sum_of_squares(n):\n    '''\n    Write a function to calculate the sum of the squares of all integers between 1 and n.\n    '''\n    return sum(i*i for i in range(1,n+1))\ndef find_pythagorean_triplets(n):\n    '''\n    Write a function to return the pythagorean triplets where a^2+b^2=c^2 for n>=3.\n    '''\n    for a in range(1,n):\n        for b in range(a,n):\n            c=n-a-b\n            if c>b:\n                if a*a+b*b==c*c:\n                    return True\n    return False\ndef is_prime(n):\n    '''\n    Write a function to return True if a number is prime, False otherwise.\n    '''\n    if n<2:\n        return False\n    for i in range(2,int(n**0.5)+1):\n        if n%i==0:\n            return False\n    return True\ndef largest_prime_factor(n):\n    '''\n    Write a function to return the largest prime factor of n.\n    '''\n    return max(i for i in range(2,int(n**0.5)+1) if n%i==0)\ndef find_number_of_days(days):\n    '''\n    Write a function to return the number of days in the year.\n    '''\n    return 365 if days%4==0 else 365+1\ndef is_palindrome(s):\n    '''\n    Write a function to return True if a string is a palindrome, False otherwise.\n    '''\n    return s==s[::-1]\ndef distance(a,b):\n    '''\n    Write a function to return the Euclidean distance between two points.\n    '''\n    return sum((i-j)**2 for i,j in zip(a,b))**0.5\ndef sum_of_two(a,b,c):\n    '''\n    Write a function to return the sum of two numbers.\n    '''\n    return a+b\ndef find_x(a,b):\n    '''\n    Write a function to return the number of times a occurs in a given string.\n    '''\n    return a.count(b)\ndef find_a_string(s,x):\n    '''\n    Write a function to return the index of the first and last occurrence of x in a string.\n    '''\n    first=s.find(x)\n    last=s.rfind(x)\n    return (first,last)\ndef ascii_encoder(s):\n    '''\n    Write a function to return the ASCII equivalent of a given integer.\n    '''\n    return chr(s)\ndef find_missing_number(nums):\n    '''\n    Write a function to return the missing number from an array of integers.\n    '''\n    return sum(range(nums[0]+1,nums[-1]+2))-sum("
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    #for i in words:\n    #    if i.startswith('p'):\n    #        print i\n    #return []\n    return [x for x in words if x.startswith('p')]\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in words:\n        if i[0] == 'p':\n            return i\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    r=[]\n    for word in words:\n        if word[0]=='p' and word[1]=='p':\n            r.append(word)\n    return r\n    \ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    r=[]\n    for word in words:\n        if word[-1]=='p' and word[-2]=='p':\n            r.append(word)\n    return r\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = 0\n    curr_sum = 0\n    for i in range(index, n):\n        curr_sum += a[i]\n        if (curr_sum > max_sum) and (curr_sum - max_sum + a[i] >= k):\n            max_sum = curr_sum - max_sum + a[i]\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    max_with_index = -100000000000\n    for i in range(n):\n        if a[i] >= k and i >= index:\n            if a[i] > max_with_index:\n                max_with_index = a[i]\n    max_without_index = max_sum_increasing_subseq(a, n, index+1, k)\n    return max(max_with_index, max_without_index)\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index < n:\n        global max_sum\n        max_sum = -10 ** 9\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n:\n        return 0\n    if k == n:\n        return a[k-1]\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    if k > index:\n        return -1\n    elif k == index:\n        return 0\n    elif n == index:\n        return a[index]\n    \n    return max(a[index], max_sum_increasing_subseq(a, n, index + 1, k) + a[index])\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    res = max_sum_increasing_subseq(a, n, index + 1, k)\n    if k < a[index]:\n        res = max(res, max_sum_increasing_subseq(a, n, index + 1, k + 1))\n    res = max(res, max_sum_increasing_subseq(a, n, index + 1, k) + a[index])\n    return res\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == 0:\n        return a[n - 1]\n    if index == n - 1:\n        return a[index]\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k - 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    \n    \n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    if k == n - index:\n        return a[index]\n    if (index, k) not in memo:\n        memo[(index, k)] = max(a[index] + max_sum_increasing_subseq(a, n, index+1, k),\n            max_sum_increasing_subseq(a, n, index+1, k+1))\n    return memo[(index, k)]\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    if index == n:\n        return 0\n    \n    if dp[index][k]!= -1:\n        return dp[index][k]\n    \n    ans = a[index]\n    if k > 0:\n        ans = max(ans, max_sum_increasing_subseq(a, n, index+1, k-1) + a[index])\n    \n    ans = max(ans, max_sum_increasing_subseq(a, n, index+1, k))\n    \n    dp[index][k] = ans\n    return ans\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    if k > index:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    return max(a[index]+max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k+1))\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #first take out the end brackets\n    tuplex = tuplex[1:-1]\n    #now split the tuple to be string\n    temp = tuplex.split(',')\n    #now change the string to int\n    for i in range(0,n):\n        temp[i] = int(temp[i])\n    #now the string to a tuple\n    tuplex = tuple(temp)\n    #now the tuple to a list\n    temp = list(tuplex)\n    #now assign the list to a list of string\n    for i in range(0,m):\n        temp[i] = str(temp[i])\n    #now assign the list back to a string\n    temp = ','.join(temp)\n    #now add the beginning brackets\n    temp = '('+temp+')'\n    return temp\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if n > len(tuplex):\n        n = len(tuplex)\n    colon = []\n    for i in range(0,n):\n        colon.append(tuplex[i])\n    for i in range(n,m):\n        colon.append(0)\n    return colon\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    l=[]\n    for i in range(len(tuplex)-m+1):\n        l.append(tuplex[i:i+m])\n    for i in l:\n        if len(i)<n:\n            l.remove(i)\n    return l\ndef tuples(d):\n    '''\n    Write a function to get all tuples of length 2 from a dictionary.\n    '''\n    l=[]\n    for i in d.keys():\n        for j in d[i]:\n            l.append((i,j))\n    return l\ndef tuples_tuple(l):\n    '''\n    Write a function to get all tuples of length 2 from a list.\n    '''\n    l2=[]\n    for i in l:\n        for j in i:\n            l2.append(j)\n    return l2\ndef tuples_tuple_d(l,d):\n    '''\n    Write a function to get all tuples of length 2 from a list with a dictionary\n    '''\n    l2=[]\n    for i in l:\n        for j in i:\n            l2.append((j,d[j]))\n    return l2\ndef tuples_tuple_dd(l,d):\n    '''\n    Write a function to get all tuples of length 2 from a list with a dictionary\n    '''\n    l2=[]\n    for i in l:\n        for j in i:\n            l2.append((j,d[j],d[j]))\n    return l2\ndef tuples_tuple_ddd(l,d):\n    '''\n    Write a function to get all tuples of length 2 from a list with a dictionary\n    '''\n    l2=[]\n    for i in l:\n        for j in i:\n            l2.append((j,d[j],d[j],d[j]))\n    return l2\ndef tuples_tuple_dddd(l,d):\n    '''\n    Write a function to get all tuples of length 2 from a list with a dictionary\n    '''\n    l2=[]\n    for i in l:\n        for j in i:\n            l2.append((j,d[j],d[j],d[j],d[j]))\n    return l2\ndef tuples_tuple_ddddd(l,d):\n    '''\n    Write a function to get all tuples of length 2 from a list with a dictionary\n    '''\n    l2=[]\n    for i in l:\n        for j in i:\n            l2.append((j,d[j],d[j],d[j],d[j],d[j]))\n    return l2\ndef tuples_tuple_dddddd(l,d):\n    '''\n    Write a function to get all tuples of length 2 from a list with a dictionary\n    '''\n    l2=[]\n    for i in l:\n        for j in i:\n            l2.append((j,d[j],d[j],d[j],d[j],d[j],d[j]))\n    return l2\ndef tuples_tuple_ddddddd(l,d):\n    '''\n    Write a function to get all tuples of length 2 from a list with a dictionary\n    '''\n    l2=[]\n    for i in l:\n        for j in i:\n            l2.append((j,d[j],d[j],d[j],d[j],d[j],d[j],d[j]))\n    return l2\ndef tuples_tuple_dddddddd(l,d):\n    '''\n    Write a function to get all tuples of length 2 from a list with a dictionary\n    '''\n    l2=[]\n    for i in l:\n        for j in i:\n            l2.append((j,d[j],d[j],d[j],d[j],d[j],d[j],d[j],d[j]))\n    return l2\ndef dictionary(l):\n    '''\n    Write a function to get all tuples of length 2 from a list with a dictionary\n    '''\n    l2={}\n    for i in l:\n        if i[0] not in l2:\n            l2[i[0]]=[i[1]]\n        else:\n            l2[i[0]].append(i[1])\n    return l2\ndef tuples_tuple_dd_dictionary(l,d):\n    '''\n    Write a function to get all tuples of length 2 from a list with a dictionary\n    '''\n    l2=[]\n    for i in l:\n        for j in i:\n            l2.append((j,d[j]))\n    return l2\ndef tuples_tuple_ddd_dictionary(l,d):\n    '''\n    Write a function to get all tuples of length 2 from a list with a dictionary\n    '''\n    l2=[]\n    for i in l:\n        for j in i:\n            l2.append((j,d[j],d[j]))\n    return l2\ndef tuples_tuple_dddd_dictionary(l,d):\n    '''\n    Write a function to get all tuples of length 2 from a list with a dictionary\n    '''\n    l2=[]\n    for i in l:\n        for j in i:\n            l2.append((j,d[j],d[j],d[j]))\n    return l2\ndef tuples_tuple_dddddd_dictionary(l,d):\n    '''\n    Write a function to get all tuples of length 2 from a list with a dictionary\n    '''\n    l2=[]\n    for i in l:\n        for j in i:\n            l2.append((j,d[j],d[j],d[j],d[j]))\n    return l2\ndef tuples_tuple_dddddddd_dictionary(l,d):\n    '''\n    Write a function to get all tuples of length 2 from a list with a dictionary\n    '''\n    l2=[]\n    for i in l:\n        for j in i:\n            l2.append((j,d[j],d[j],d[j],d[j],d[j]))\n    return l2\ndef tuples_tuple_dddddddddd_dictionary(l,d):\n    '''\n    Write a function to get all tuples of length 2 from a list with a dictionary\n    '''\n    l2=[]\n    for i in l:\n        for j in i:\n            l2.append((j,d[j],d[j],d[j],d[j],d[j],d[j],d[j]))\n    return l2\ndef tuples_tuple_dddddddddddd_dictionary(l,d):\n    '''\n    Write a function to get all tuples of length 2 from a list with a dictionary\n    '''\n    l2=[]\n    for i in l:\n        for j in i:\n            l2.append((j,d[j],d[j],d[j],d[j],d[j],d[j],d[j],d[j]))\n    return l2\ndef tuples_tuple_ddddddddddddd_dictionary(l,d):\n    '''\n    Write a function to get all tuples of length 2 from a list with a dictionary\n    '''\n    l2=[]\n    for i in l:\n        for j in i:\n            l2.append((j,d[j],d[j],d[j],d[j],d[j],d[j],d[j],d[j],d[j]))\n    return l2\ndef tuples_tuple_dddddddddddddd_dictionary(l,d):\n    '''\n    Write a function to get all tuples of length 2 from a list with a dictionary\n    '''\n    l2=[]\n    for i in l:\n        for j in i:\n            l2.append((j,d[j],d[j],d[j],d[j],d[j],d[j],d[j],d[j],d[j]))\n    return l2\ndef tuples_tuple_d"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex = deepcopy(tuplex)\n    while m>0:\n        tuplex += (0,)\n        m -= 1\n    while n>0:\n        tuplex += (0,0)\n        n -= 1\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex[m][n] = ''\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex[0:m,0:n]=1\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(n):\n        for j in range(m):\n            tuplex[i][j] = \":\"\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(0,m):\n        for j in range(0,n):\n            print tuplex[i][j],\n        print\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:m+n]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    nxt_tuplex = deepcopy(tuplex)\n    for i in xrange(len(tuplex)):\n        for j in xrange(len(tuplex[0])):\n            nxt_tuplex[i][j] = m*tuplex[i][j] + n\n    return nxt_tuplex\ndef mul_tuplex(tuplex,m):\n    '''\n    Write a function to get a tuple of tuple by multiplie each element of the tuple by m.\n    '''\n    nxt_tuplex = deepcopy(tuplex)\n    for i in xrange(len(tuplex)):\n        for j in xrange(len(tuplex[0])):\n            nxt_tuplex[i][j] = m * tuplex[i][j]\n    return nxt_tuplex\ndef mat_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a tuple of tuple by adding m and n to the tuple of tuple.\n    '''\n    nxt_tuplex = deepcopy(tuplex)\n    for i in xrange(len(tuplex)):\n        for j in xrange(len(tuplex[0])):\n            nxt_tuplex[i][j] = m*tuplex[i][j] + n\n    return nxt_tuplex\ndef gen_diag_tuplex(tuplex):\n    '''\n    Write a function to get the diagonal of a tuple.\n    '''\n    nxt_tuplex = deepcopy(tuplex)\n    for i in xrange(len(tuplex)):\n        for j in xrange(len(tuplex[0])):\n            if i == j:\n                nxt_tuplex[i][j] = 1\n            else:\n                nxt_tuplex[i][j] = 0\n    return nxt_tuplex\ndef transpose_tuplex(tuplex):\n    '''\n    Write a function to get the transpose of a tuple.\n    '''\n    nxt_tuplex = deepcopy(tuplex)\n    for i in xrange(len(tuplex)):\n        for j in xrange(len(tuplex[0])):\n            nxt_tuplex[j][i] = tuplex[i][j]\n    return nxt_tuplex\ndef vector_from_tuplex(tuplex):\n    '''\n    Write a function to get a vector from a tuple of tuple.\n    '''\n    return [sum(x) for x in zip(*tuplex)]\ndef sum_tuplex(tuplex,m):\n    '''\n    Write a function to get a tuple by adding m to the tuple.\n    '''\n    nxt_tuplex = deepcopy(tuplex)\n    for i in xrange(len(tuplex)):\n        for j in xrange(len(tuplex[0])):\n            nxt_tuplex[i][j] = m + tuplex[i][j]\n    return nxt_tuplex\ndef scalar_from_tuplex(tuplex,m):\n    '''\n    Write a function to get a tuple by scalar multiply from tuple.\n    '''\n    nxt_tuplex = deepcopy(tuplex)\n    for i in xrange(len(tuplex)):\n        for j in xrange(len(tuplex[0])):\n            nxt_tuplex[i][j] = m * tuplex[i][j]\n    return nxt_tuplex\ndef scalar_from_vector(vector,m):\n    '''\n    Write a function to get a tuple by scalar multiply from vector.\n    '''\n    nxt_tuplex = deepcopy(vector)\n    for i in xrange(len(vector)):\n        nxt_tuplex[i] = m * vector[i]\n    return nxt_tuplex\ndef div_tuplex(tuplex,n):\n    '''\n    Write a function to get a tuple by scalar multiply from vector.\n    '''\n    nxt_tuplex = deepcopy(tuplex)\n    for i in xrange(len(tuplex)):\n        for j in xrange(len(tuplex[0])):\n            nxt_tuplex[i][j] = tuplex[i][j] / n\n    return nxt_tuplex\ndef mat_from_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a matrix from a tuple of tuple.\n    '''\n    nxt_tuplex = deepcopy(tuplex)\n    for i in xrange(len(tuplex)):\n        for j in xrange(len(tuplex[0])):\n            nxt_tuplex[i][j] = m * tuplex[i][j] + n\n    return nxt_tuplex\ndef mat_from_vector(vector,m,n):\n    '''\n    Write a function to get a matrix from a vector.\n    '''\n    nxt_tuplex = deepcopy(vector)\n    for i in xrange(len(vector)):\n        nxt_tuplex[i] = m * vector[i] + n\n    return nxt_tuplex\ndef add_mat_mat(matrix_a,matrix_b):\n    '''\n    Write a function to get a matrix by add a matrix to another matrix.\n    '''\n    nxt_tuplex = deepcopy(matrix_a)\n    for i in xrange(len(matrix_a)):\n        for j in xrange(len(matrix_a[0])):\n            nxt_tuplex[i][j] = matrix_a[i][j] + matrix_b[i][j]\n    return nxt_tuplex\ndef gen_random_tuplex(tuplex,n):\n    '''\n    Write a function to get a tuple by scalar multiply from vector.\n    '''\n    nxt_tuplex = deepcopy(tuplex)\n    for i in xrange(len(tuplex)):\n        for j in xrange(len(tuplex[0])):\n            nxt_tuplex[i][j] = random.randint(0,n)\n    return nxt_tuplex\ndef gen_random_vector(vector,n):\n    '''\n    Write a function to get a vector by scalar multiply from vector.\n    '''\n    nxt_tuplex = deepcopy(vector)\n    for i in xrange(len(vector)):\n        nxt_tuplex[i] = random.randint(0,n)\n    return nxt_tuplex\ndef mat_mat_tuplex(matrix_a,matrix_b,m,n):\n    '''\n    Write a function to get a matrix by scalar multiply from vector.\n    '''\n    nxt_tuplex = deepcopy(matrix_a)\n    for i in xrange(len(matrix_a)):\n        for j in xrange(len(matrix_a[0])):\n            nxt_tuplex[i][j] = m * matrix_a[i][j] + n\n    return nxt_tuplex\ndef mat_vector_tuplex(matrix_a,vector,m,n):\n    '''\n    Write a function to get a matrix by scalar multiply from vector.\n    '''\n    nxt_tuplex = deepcopy(vector)\n    for i in xrange(len(vector)):\n        nxt_tuplex[i] = m * vector[i] + n\n    return nxt_tuplex\ndef mat_mat_vector(matrix_a,matrix_b,vector,m,n):\n    '''\n    Write a function to get a matrix by scalar multiply from vector.\n    '''\n    nxt_tuplex = deepcopy(matrix_a)\n    for i in xrange(len(matrix_a)):\n        for j in xrange(len(matrix_a[0])):\n            nxt_tuplex[i][j] = m * matrix_a"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    for n1 in nums1:\n        for n2 in nums2:\n            if len(result) < N:\n                if n1 * n2 > result[0] * result[-1]:\n                    result.append(n1 * n2)\n            elif len(result) == N:\n                if n1 * n2 > result[0]:\n                    result = [n1 * n2]\n            else:\n                break\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    for i in range(N):\n        prod = 1\n        for n in nums1:\n            prod *= n\n        for n in nums2:\n            prod *= n\n        result.append(prod)\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    res = [1]\n    for i in range(N):\n        res.append(max(res)*nums1[i]/max(res)*nums2[i]/max(res))\n    return res[-N:]\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    return [max(product(nums1, i, N), product(nums2, i, N)) for i in range(N)]\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    from functools import partial\n    \n    # One liner\n    #return max((partial(map, lambda n: n*n)).__call__(nums1),\n    #       (partial(map, lambda n: n*n)).__call__(nums2))\n    \n    # Top-Down Approach\n    # for each element, we have two choices, 1) multiple by itself, 2) multiple by the factor of other list\n    # so, we need to store each of the two choices and see which one is larger\n    # this is a lot slower than the two lines below\n    #def recursive(nums1, nums2, N, memo):\n    #    if N in memo:\n    #        return memo[N]\n    #    if N < 0:\n    #        return -float('inf')\n    #    if N == 0:\n    #        return 0\n    #    if len(nums1) == 0 or len(nums2) == 0:\n    #        return -float('inf')\n    #    result1 = recursive(nums1[1:], nums2, N - nums1[0] * nums2[0], memo)\n    #    result2 = recursive(nums1, nums2[1:], N - nums1[0] * nums2[0], memo)\n    #    memo[N] = max(result1, result2)\n    #    return memo[N]\n    #\n    #def memoized(nums1, nums2, N):\n    #    memo = {}\n    #    return recursive(nums1, nums2, N, memo)\n    \n    # Top-Down Approach, with optimizations\n    # maintain a 2D array memo[n][m], which will store the product of the largest n elements from the first list and m elements from the second list\n    # in the end, the final result is the max of the memo[n][m]\n    # when we pick the first element from each list, we are making sure that the product of the next element is not picked before\n    # so, we can't pick it, we need to store whether the next element is picked before\n    # if we have a negative product, we need to return -inf, this is to avoid the iteration\n    # so, we need to return -inf, if we have 0 or 1 element in the list, it can be anything\n    # if the next element is larger than the previous, we can choose the larger one\n    # if the next element is not larger than the previous, we can choose the previous\n    # if we have 2 or more elements, we can choose the previous, and if the next element is smaller than the previous, we can choose the previous\n    # if we have more than 3 elements, we can choose the previous, and if the next element is smaller than the previous, we can choose the previous\n    # since we are selecting the two largest numbers from two list, we don't care whether the product of the next element is greater than the previous\n    def memoized(nums1, nums2, N):\n        memo = [[-float('inf') for j in range(len(nums2))] for i in range(len(nums1))]\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if i == 0 or j == 0:\n                    memo[i][j] = -float('inf')\n                elif nums1[i] * nums2[j] == 0:\n                    memo[i][j] = 0\n                elif nums1[i] * nums2[j] > 0:\n                    memo[i][j] = max(nums1[i] * nums2[j], nums1[i] * memo[i-1][j], nums1[i] * memo[i][j-1])\n                else:\n                    memo[i][j] = min(nums1[i] * nums2[j], nums1[i] * memo[i-1][j], nums1[i] * memo[i][j-1])\n        return memo[-1][-1]\n    \n    def bottom_up(nums1, nums2, N):\n        if len(nums1) == 0 or len(nums2) == 0:\n            return -float('inf')\n        result = [0 for i in range(N+1)]\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if nums1[i] * nums2[j] == 0:\n                    result[i+j] = 0\n                elif nums1[i] * nums2[j] > 0:\n                    result[i+j] = max(nums1[i] * nums2[j], nums1[i] * result[i+j-1], nums1[i] * result[i+j])\n                else:\n                    result[i+j] = min(nums1[i] * nums2[j], nums1[i] * result[i+j-1], nums1[i] * result[i+j])\n        return result[N]\n    \n    # Top-Down Approach, with optimizations\n    # maintain a 2D array memo[n][m], which will store the product of the largest n elements from the first list and m elements from the second list\n    # in the end, the final result is the max of the memo[n][m]\n    # when we pick the first element from each list, we are making sure that the product of the next element is not picked before\n    # so, we can't pick it, we need to store whether the next element is picked before\n    # if we have a negative product, we need to return -inf, this is to avoid the iteration\n    # so, we need to return -inf, if we have 0 or 1 element in the list, it can be anything\n    # if the next element is larger than the previous, we can choose the larger one\n    # if the next element is not larger than the previous, we can choose the previous\n    # if we have 2 or more elements, we can choose the previous, and if the next element is smaller than the previous, we can choose the previous\n    # if we have more than 3 elements, we can choose the previous, and if the next element is smaller than the previous, we can choose the previous\n    # since we are selecting the two largest numbers from two list, we don't care whether the product of the next element is greater than the previous\n    def memoized(nums1, nums2, N):\n        memo = [[-float('inf') for j in range(len(nums2))] for i in range(len(nums1))]\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if i == 0 or j == 0:\n                    memo[i][j] = -float('inf')\n                elif nums1[i] * nums2[j] == 0:\n                    memo[i][j] = 0\n                elif nums1[i] * nums2[j] > 0:\n                    memo[i][j] = max(nums1[i] * nums2[j], nums1[i] * memo[i-1][j], nums1[i] * memo[i][j-1])\n                else:\n                    memo[i][j] = min(nums1[i] * nums2[j], nums1[i] * memo[i-1][j], nums1[i] * memo[i][j-1])\n        return memo[-1][-1]\n    \n    # Top-Down Approach, with optimizations\n    # maintain a 2D array memo[n][m], which will store the product of the largest n elements from the first list and m elements from the second list\n    # in the end, the final result is the max of the memo[n][m]\n    # when we pick the first element from each list, we are making sure that the product of the next element is not picked before\n    # so, we can't pick it, we need to store whether the next element is picked before\n    # if we have a negative product, we need to return -inf, this is to avoid the iteration\n    # so, we need to return -inf, if we have 0 or 1 element in the list, it can be anything\n    # if the next element is larger than the previous, we can choose the larger one\n    # if th"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # for each num in nums1\n    # create product and store in dict\n    products = {}\n    for num1 in nums1:\n        product = 1\n        for num2 in nums2:\n            product *= (num1 % num2)\n        products[num1] = product\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(N):\n        if nums1[i] * nums2[i] > nums2[i] * nums1[i]:\n            products.append(nums1[i] * nums2[i])\n        else:\n            products.append(nums2[i] * nums1[i])\n    return products\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    pass\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = [1] * N\n    for i in xrange(N):\n        for j in xrange(N):\n            products[i] *= max(nums1[i], nums2[j])\n    return products\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Check if N is greater than the size of lists\n    if N > max(len(nums1), len(nums2)):\n        return \"Invalid Number of Inputs\"\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a>b):\n        return a\n    else:\n        return b\ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a<b):\n        return a\n    else:\n        return b\ndef first_last(a_list):\n    '''\n    Write a python function to find the sum of the first and last elements in a list.\n    '''\n    return a_list[0]+a_list[-1]\ndef even_num(a_list):\n    '''\n    Write a python function to return a list with the even numbers in it.\n    '''\n    return [x for x in a_list if x%2==0]\ndef odd_num(a_list):\n    '''\n    Write a python function to return a list with the odd numbers in it.\n    '''\n    return [x for x in a_list if x%2!=0]\ndef check_prime(a_number):\n    '''\n    Write a python function to check if a number is prime.\n    '''\n    if (a_number==2):\n        return True\n    elif (a_number%2==0):\n        return False\n    else:\n        for x in range(3,a_number):\n            if(a_number%x==0):\n                return False\n        return True\ndef list_sum(a_list):\n    '''\n    Write a python function to return the sum of all the elements in a list.\n    '''\n    return sum(a_list)\ndef count_letters(a_string):\n    '''\n    Write a python function to return a list with all the unique letters of a string.\n    '''\n    return [x for x in set(a_string)]\ndef count_words(a_string):\n    '''\n    Write a python function to return the number of words in a string.\n    '''\n    return a_string.count(\" \")+1\ndef count_characters(a_string):\n    '''\n    Write a python function to return the number of characters in a string.\n    '''\n    return len(a_string)\ndef count_spaces(a_string):\n    '''\n    Write a python function to return the number of spaces in a string.\n    '''\n    return a_string.count(\" \")\ndef is_vowel(a_string):\n    '''\n    Write a python function to return a list with all the vowels in a string.\n    '''\n    return [x for x in a_string if x in [\"a\",\"e\",\"i\",\"o\",\"u\",\"A\",\"E\",\"I\",\"O\",\"U\"]]\ndef is_consonant(a_string):\n    '''\n    Write a python function to return a list with all the consonants in a string.\n    '''\n    return [x for x in a_string if x not in [\"a\",\"e\",\"i\",\"o\",\"u\",\"A\",\"E\",\"I\",\"O\",\"U\"]]\ndef count_vowels(a_string):\n    '''\n    Write a python function to return the number of vowels in a string.\n    '''\n    return a_string.count(\"a\")+a_string.count(\"e\")+a_string.count(\"i\")+a_string.count(\"o\")+a_string.count(\"u\")\ndef count_consonants(a_string):\n    '''\n    Write a python function to return the number of consonants in a string.\n    '''\n    return len(is_consonant(a_string))\ndef is_letter(a_string):\n    '''\n    Write a python function to return a list with all the letters in a string.\n    '''\n    return [x for x in a_string if x in [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]]\ndef is_number(a_string):\n    '''\n    Write a python function to return a list with all the numbers in a string.\n    '''\n    return [x for x in a_string if x in [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"]]\ndef count_letters(a_string):\n    '''\n    Write a python function to return the number of letters in a string.\n    '''\n    return len(is_letter(a_string))\ndef count_words(a_string):\n    '''\n    Write a python function to return the number of words in a string.\n    '''\n    return a_string.count(\" \")+1\ndef count_characters(a_string):\n    '''\n    Write a python function to return the number of characters in a string.\n    '''\n    return len(a_string)\ndef is_punct(a_string):\n    '''\n    Write a python function to return a list with all the punctuation marks in a string.\n    '''\n    return [x for x in a_string if x in [\".\",\",\",\":\",\";\",\"?\",\"!\",\"/\",\"(\",\")\"]]\ndef count_punct(a_string):\n    '''\n    Write a python function to return the number of punctuation marks in a string.\n    '''\n    return a_string.count(\".\")+a_string.count(\",\")+a_string.count(\":\")+a_string.count(\";\")+a_string.count(\"?\")+a_string.count(\"!\")+a_string.count(\"/\")+a_string.count(\"(\")+a_string.count(\")\")\ndef is_title(a_string):\n    '''\n    Write a python function to return a list with all the title words in a string.\n    '''\n    return [x for x in a_string.split() if x.istitle()]\ndef is_lower(a_string):\n    '''\n    Write a python function to return a list with all the lowercase words in a string.\n    '''\n    return [x for x in a_string.split() if x.islower()]\ndef is_upper(a_string):\n    '''\n    Write a python function to return a list with all the uppercase words in a string.\n    '''\n    return [x for x in a_string.split() if x.isupper()]\ndef count_words(a_string):\n    '''\n    Write a python function to return the number of words in a string.\n    '''\n    return a_string.count(\" \")+1\ndef count_characters(a_string):\n    '''\n    Write a python function to return the number of characters in a string.\n    '''\n    return len(a_string)\ndef count_vowels(a_string):\n    '''\n    Write a python function to return the number of vowels in a string.\n    '''\n    return a_string.count(\"a\")+a_string.count(\"e\")+a_string.count(\"i\")+a_string.count(\"o\")+a_string.count(\"u\")\ndef count_consonants(a_string):\n    '''\n    Write a python function to return the number of consonants in a string.\n    '''\n    return len(is_consonant(a_string))\ndef count_spaces(a_string):\n    '''\n    Write a python function to return the number of spaces in a string.\n    '''\n    return a_string.count(\" \")\ndef count_letters(a_string):\n    '''\n    Write a python function to return the number of letters in a string.\n    '''\n    return len(is_letter(a_string))\ndef count_numbers(a_string):\n    '''\n    Write a python function to return the number of numbers in a string.\n    '''\n    return len(is_number(a_string))\ndef count_punct(a_string):\n    '''\n    Write a python function to return the number of punctuation marks in a string.\n    '''\n    return len(is_punct(a_string))\ndef reverse(a_string):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return a_string[::-1]\ndef is_palindrome(a_string):\n    '''\n    Write a python function to return a list with all the palindromes in "
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a>b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a>b):\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a<b):\n        return a\n    else:\n        return b\n        \ndef count_digits(number,base):\n    '''\n    Write a python function to count the number of digits of a given number in a given base.\n    '''\n    digits = \"\"\n    while(number>0):\n        digits += str(number%base)\n        number = number//base\n    return len(digits)\n    \ndef count_digits_rec(number,base):\n    '''\n    Write a python function to count the number of digits of a given number in a given base using recursion.\n    '''\n    if (number==0):\n        return 0\n    return count_digits_rec(number//base,base)+1\n    \ndef power_rec(x,n):\n    '''\n    Write a python function to compute the power of a given number x to the given power n using recursion.\n    '''\n    if (n==0):\n        return 1\n    return x*power_rec(x,n-1)\n    \ndef power(x,n):\n    '''\n    Write a python function to compute the power of a given number x to the given power n using iteration.\n    '''\n    temp = 1\n    while(n>0):\n        if (n&1):\n            temp = temp*x\n        x = x*x\n        n = n//2\n    return temp\n    \ndef sum_of_digits(number):\n    '''\n    Write a python function to compute the sum of the digits of a given number.\n    '''\n    temp = number\n    sum = 0\n    while(temp>0):\n        sum += temp%10\n        temp = temp//10\n    return sum\n    \ndef sum_of_digits_rec(number):\n    '''\n    Write a python function to compute the sum of the digits of a given number using recursion.\n    '''\n    if (number==0):\n        return 0\n    return number%10+sum_of_digits_rec(number//10)\n    \ndef factorial_rec(number):\n    '''\n    Write a python function to compute the factorial of a given number using recursion.\n    '''\n    if (number==0 or number==1):\n        return 1\n    return number*factorial_rec(number-1)\n    \ndef factorial(number):\n    '''\n    Write a python function to compute the factorial of a given number using iteration.\n    '''\n    temp = 1\n    while(number>0):\n        temp = temp*number\n        number = number-1\n    return temp\n    \ndef sum_of_digits_iter(number):\n    '''\n    Write a python function to compute the sum of the digits of a given number using iteration.\n    '''\n    sum = 0\n    while(number>0):\n        sum = sum+number%10\n        number = number//10\n    return sum\n    \ndef sum_of_digits_iter_rec(number):\n    '''\n    Write a python function to compute the sum of the digits of a given number using iteration using recursion.\n    '''\n    if (number==0):\n        return 0\n    return number%10+sum_of_digits_iter_rec(number//10)\n    \ndef is_palindrome(number):\n    '''\n    Write a python function to check whether the given number is a palindrome or not.\n    '''\n    temp = number\n    reverse = 0\n    while(number>0):\n        reverse = reverse*10+number%10\n        number = number//10\n    if (temp==reverse):\n        return True\n    return False\n    \ndef is_palindrome_rec(number):\n    '''\n    Write a python function to check whether the given number is a palindrome or not using recursion.\n    '''\n    if (number==0):\n        return True\n    if (number%10==number//10%10):\n        return is_palindrome_rec(number//10)\n    else:\n        return False\n    \ndef is_palindrome_iter(number):\n    '''\n    Write a python function to check whether the given number is a palindrome or not using iteration.\n    '''\n    temp = number\n    reverse = 0\n    while(number>0):\n        reverse = reverse*10+number%10\n        number = number//10\n    if (temp==reverse):\n        return True\n    return False\n    \ndef remove_duplicates(mylist):\n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    temp = mylist[0]\n    i = 1\n    while(i<len(mylist)):\n        if(mylist[i]!=temp):\n            temp = mylist[i]\n        i+=1\n    return temp\n    \ndef remove_duplicates_rec(mylist):\n    '''\n    Write a python function to remove duplicates from a list using recursion.\n    '''\n    if (len(mylist)==0 or len(mylist)==1):\n        return mylist\n    if (mylist[0]==mylist[1]):\n        return remove_duplicates_rec(mylist[1:])\n    else:\n        return [mylist[0]]+remove_duplicates_rec(mylist[1:])\n    \ndef remove_duplicates_iter(mylist):\n    '''\n    Write a python function to remove duplicates from a list using iteration.\n    '''\n    if (len(mylist)==0 or len(mylist)==1):\n        return mylist\n    temp = mylist[0]\n    i = 1\n    while(i<len(mylist)):\n        if(mylist[i]!=temp):\n            temp = mylist[i]\n            i+=1\n        else:\n            mylist = mylist[:i]+mylist[i+1:]\n    return temp\n    \ndef sort_list(mylist):\n    '''\n    Write a python function to sort a list in increasing order.\n    '''\n    for i in range(0,len(mylist)-1):\n        for j in range(i+1,len(mylist)):\n            if (mylist[j]<mylist[i]):\n                temp = mylist[i]\n                mylist[i] = mylist[j]\n                mylist[j] = temp\n    return mylist\n    \ndef sort_list_rec(mylist):\n    '''\n    Write a python function to sort a list in increasing order using recursion.\n    '''\n    if (len(mylist)==1):\n        return mylist\n    if (len(mylist)==2):\n        if (mylist[0]>mylist[1]):\n            temp = mylist[0]\n            mylist[0] = mylist[1]\n            mylist[1] = temp\n        return mylist\n    if (len(mylist)>2):\n        return [sort_list_rec(mylist[:len(mylist)//2])]+[sort_list_rec(mylist[len(mylist)//2:])]\n    \ndef reverse_list(mylist):\n    '''\n    Write a python function to reverse a list.\n    '''\n    for i in range(0,len(mylist)//2):\n        temp = mylist[i]\n        mylist[i] = mylist[len(mylist)-1-i]\n        mylist[len(mylist)-1-i] = temp\n    return mylist\n    \ndef reverse_list_rec(mylist):\n    '''\n    Write a python function to reverse a list using recursion.\n    '''\n    if (len(mylist)==1):\n        return mylist\n    return [mylist[len(mylist)-1]]+reverse_list_rec(mylist[:len(mylist)-1])\n    \ndef check_sub_list(mylist,mylist2):\n    '''\n    Write a python function to check if a list is a sublist of another list.\n    '''\n    for i in range(len(mylist2)):\n        if (mylist2[i]==mylis"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \n    \ndef sign(x):\n    '''\n    Write a python function to find the sign of a number.\n    '''\n    if x<0:\n        return -1\n    elif x>0:\n        return 1\n    elif x==0:\n        return 0\n    else:\n        return None\n    \n    \ndef abs(x):\n    '''\n    Write a python function to find the absolute value of a number.\n    '''\n    if x<0:\n        return -x\n    else:\n        return x\n    \n    \ndef power(a,b):\n    '''\n    Write a python function to calculate a to the power of b.\n    '''\n    if b==0:\n        return 1\n    else:\n        return a*power(a,b-1)\n    \n    \ndef factorial(n):\n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\n    \n    \ndef log(x,b):\n    '''\n    Write a python function to calculate the natural logarithm of x to the base b.\n    '''\n    if b==1:\n        return log(x,x)\n    elif b<1:\n        raise Exception('log base must be greater than 1')\n    elif x==0:\n        raise Exception('log cannot be calculated when x=0')\n    elif b==x:\n        return 0\n    else:\n        return 1/log(x,b)*(1+log(x,b)*(1-b**-x))\n    \n    \ndef is_prime(x):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if x<2:\n        return False\n    if x==2:\n        return True\n    if x%2==0:\n        return False\n    for i in range(3,int(x**(1/2))+1,2):\n        if x%i==0:\n            return False\n    return True\n    \n    \ndef digit_count(n):\n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    if n<10:\n        return 1\n    else:\n        return 1+digit_count(n/10)\n    \n    \ndef is_palindrome(x):\n    '''\n    Write a python function to check if a number is palindrome or not.\n    '''\n    if x<10:\n        return True\n    if x%10==x/10%10:\n        return is_palindrome(x/10)\n    else:\n        return False\n    \n    \ndef is_anagram(a,b):\n    '''\n    Write a python function to check if two words are anagrams or not.\n    '''\n    if len(a)!=len(b):\n        return False\n    else:\n        d1={}\n        d2={}\n        for i in a:\n            d1[i]=d1.get(i,0)+1\n        for i in b:\n            d2[i]=d2.get(i,0)+1\n        for i in d1:\n            if d1[i]!=d2[i]:\n                return False\n        return True\n    \n    \ndef is_pandigital(n,start=1,end=9):\n    '''\n    Write a python function to check if a number is pandigital or not.\n    '''\n    s=str(n)\n    l=len(s)\n    for i in range(start,end+1):\n        if str(i) not in s:\n            return False\n    return True\n    \n    \ndef is_superincreasing(a):\n    '''\n    Write a python function to check if a list is superincreasing or not.\n    '''\n    if len(a)==1:\n        return True\n    else:\n        if a[0]<=a[1]:\n            return is_superincreasing(a[1:])\n        else:\n            return False\n    \n    \ndef is_superincreasing_optimized(a):\n    '''\n    Write a python function to check if a list is superincreasing or not.\n    '''\n    for i in range(len(a)-1):\n        if a[i]>a[i+1]:\n            return False\n    return True\n    \n    \ndef is_superincreasing_optimized_v2(a):\n    '''\n    Write a python function to check if a list is superincreasing or not.\n    '''\n    for i in range(1,len(a)):\n        if a[i]<=a[i-1]:\n            return False\n    return True\n    \n    \ndef is_superincreasing_optimized_v3(a):\n    '''\n    Write a python function to check if a list is superincreasing or not.\n    '''\n    for i in range(len(a)-1):\n        if a[i]<=a[i+1]:\n            return False\n    return True\n    \n    \ndef is_superincreasing_optimized_v4(a):\n    '''\n    Write a python function to check if a list is superincreasing or not.\n    '''\n    for i in range(len(a)-1):\n        if a[i]<=a[i+1]:\n            return False\n    return True\n    \n    \ndef is_superincreasing_v5(a):\n    '''\n    Write a python function to check if a list is superincreasing or not.\n    '''\n    for i in range(1,len(a)):\n        if a[i]<a[i-1]:\n            return False\n    return True\n    \n    \ndef is_superincreasing_v6(a):\n    '''\n    Write a python function to check if a list is superincreasing or not.\n    '''\n    for i in range(len(a)-1):\n        if a[i]<=a[i+1]:\n            return False\n    return True\n    \n    \ndef is_superincreasing_v7(a):\n    '''\n    Write a python function to check if a list is superincreasing or not.\n    '''\n    for i in range(len(a)-1):\n        if a[i]>a[i+1]:\n            return False\n    return True\n    \n    \ndef is_superincreasing_v8(a):\n    '''\n    Write a python function to check if a list is superincreasing or not.\n    '''\n    for i in range(1,len(a)):\n        if a[i]<=a[i-1]:\n            return False\n    return True\n    \n    \ndef is_superincreasing_v9(a):\n    '''\n    Write a python function to check if a list is superincreasing or not.\n    '''\n    for i in range(len(a)-1):\n        if a[i]<=a[i+1]:\n            return False\n    return True\n    \n    \ndef is_superincreasing_v10(a):\n    '''\n    Write a python function to check if a list is superincreasing or not.\n    '''\n    for i in range(len(a)-1):\n        if a[i]<=a[i+1]:\n            return False\n    return True\n    \n    \ndef is_superincreasing_v11(a):\n    '''\n    Write a python function to check if a list is superincreasing or not.\n    '''\n    for i in range(len(a)-1):\n        if a[i]<=a[i+1]:\n            return False\n    return True\n    \n    \ndef is_superincreasing_v12(a):\n    '''\n    Write a python function to check if a list is superincreasing or not.\n    '''\n    for i in range(len(a)-1):\n        if a[i]<a[i+1]:\n            return False\n    return True\n    \n    \ndef is_superincreasing_v13(a):"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Using isdigit() to check if a string is all numeric\n    if str1.isdigit():\n        return tuple(str1)\n    return str1\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    if str1 == '':\n        return tuple()\n    else:\n        return tuple(str1[0])\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n & (n - 1)\n    n = n + 1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = 1\n    while n & i == 0:\n        i = i << 1\n    return n ^ i\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    for i in range(32): \n        if (n&1<<i) == 0:\n            n = n|1<<i\n            break\n    return n\n    \ndef set_right_most_unset_bit(n): \n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    i = 0\n    while (n&1<<i) == 0:\n        i += 1\n    n = n | (1 << i)\n    return n\n    \ndef clear_left_most_unset_bit(n): \n    '''\n    Write a python function to clear the left most unset bit.\n    '''\n    i = 0\n    while (n&1<<i) == 1:\n        i += 1\n    return n & ~(1<<i)\n    \ndef clear_right_most_unset_bit(n): \n    '''\n    Write a python function to clear the right most unset bit.\n    '''\n    i = 0\n    while (n&1<<i) == 0:\n        i += 1\n    return n & (0xFFFFFFFF ^ (1<<i))\n    \ndef clear_left_most_set_bit(n): \n    '''\n    Write a python function to clear the left most set bit.\n    '''\n    i = 0\n    while (n&1<<i) == 1:\n        i += 1\n    return n & ~(1<<i)\n    \ndef clear_right_most_set_bit(n): \n    '''\n    Write a python function to clear the right most set bit.\n    '''\n    i = 0\n    while (n&1<<i) == 0:\n        i += 1\n    return n & (0xFFFFFFFF ^ (1<<i))\n    \ndef set_left_most_set_bit(n): \n    '''\n    Write a python function to set the left most set bit.\n    '''\n    i = 0\n    while (n&1<<i) == 0:\n        i += 1\n    n = n | (1 << i)\n    return n\n    \ndef set_right_most_set_bit(n): \n    '''\n    Write a python function to set the right most set bit.\n    '''\n    i = 0\n    while (n&1<<i) == 0:\n        i += 1\n    n = n | (1 << i)\n    return n\n    \ndef is_power_of_2(n): \n    '''\n    Write a python function to determine if n is a power of 2 or not.\n    '''\n    return n & (n-1) == 0\n    \ndef count_ones_in_binary_rep(n): \n    '''\n    Write a python function to count the number of ones in the binary representation of n.\n    '''\n    count = 0\n    while n > 0:\n        if n%2 == 1:\n            count += 1\n        n = n//2\n    return count\n    \ndef remove_count_zero_from_right(n): \n    '''\n    Write a python function to remove the count of zero from the right of the number.\n    '''\n    count = 0\n    while n > 0:\n        if n%2 == 1:\n            count += 1\n        n = n//2\n    return n*2**count\n    \ndef remove_count_zero_from_left(n): \n    '''\n    Write a python function to remove the count of zero from the left of the number.\n    '''\n    count = 0\n    while n > 0:\n        if n%2 == 0:\n            count += 1\n        n = n//2\n    return n//2**count\n    \ndef reverse_bitwise_sub(n): \n    '''\n    Write a python function to reverse the bits of an integer.\n    '''\n    s = 0\n    while n > 0:\n        s = s*10 + n%10\n        n = n//10\n    return s\n    \ndef count_bits(n): \n    '''\n    Write a python function to count the number of bits set in an integer.\n    '''\n    count = 0\n    while n > 0:\n        if n%2 == 1:\n            count += 1\n        n = n//2\n    return count\n    \ndef set_bit(n,i): \n    '''\n    Write a python function to set the ith bit.\n    '''\n    return n|(1<<i)\n    \ndef clear_bit(n,i): \n    '''\n    Write a python function to clear the ith bit.\n    '''\n    return n&~(1<<i)\n    \ndef toggle_bit(n,i): \n    '''\n    Write a python function to toggle the ith bit.\n    '''\n    return n^(1<<i)\n    \ndef is_bit_set(n,i): \n    '''\n    Write a python function to determine if the ith bit is set or not.\n    '''\n    return (n&(1<<i)) == (1<<i)\n    \ndef is_bit_clear(n,i): \n    '''\n    Write a python function to determine if the ith bit is clear or not.\n    '''\n    return (n&(1<<i)) == 0\n    \ndef flip_bit(n,i): \n    '''\n    Write a python function to flip the ith bit.\n    '''\n    return n^(1<<i)\n    \ndef flip_bits(n,i,j): \n    '''\n    Write a python function to flip the ith bit to the jth bit.\n    '''\n    if i > j:\n        return n ^ (1 << (j-i))\n    else:\n        return n ^ (1 << (i-j))\n    \ndef swap_bits(n,i,j): \n    '''\n    Write a python function to swap the ith and jth bits.\n    '''\n    if i > j:\n        return n ^ (1 << (j-i+1))\n    else:\n        return n ^ (1 << (i-j+1))\n    \ndef swap_bits_in_place(n,i,j): \n    '''\n    Write a python function to swap the ith and jth bits in-place.\n    '''\n    if i > j:\n        return n ^ (1 << (j-i+1))\n    else:\n        return n ^ (1 << (i-j+1))\n    \ndef rotate_left(n,i): \n    '''\n    Write a python function to rotate the ith bit left.\n    '''\n    return (n<<i) | (n>>(32-(i)))\n    \ndef rotate_right(n,i): \n    '''\n    Write a python function to rotate the ith bit right.\n    '''\n    return (n>>i) | (n<<(32-(i)))\n    \ndef to_signed_int(n): \n    '''\n    Write a python function to convert an integer to a signed integer.\n    '''\n    if n >= 0:\n        return n\n    else:\n        return 2**32 + n\n    \ndef to_unsigned_int(n): \n    '''\n    Write a python function to convert a signed integer to an unsigned integer.\n    '''\n    return n%2**32\n    \ndef subtract(n1,n2): \n    '''\n    Write a python function to subtract two signed integers.\n    '''\n    return n1 - n2\n    \ndef add(n1,n2): \n    '''\n    Write a python function to add two signed integers.\n    '''\n    return n1 + n2\n    \ndef add_signed_int(n1,n2): \n    '''\n    Write a python function to add two signed integers.\n    '''\n    return to_signed_int(n1 + n2)\n    \ndef add_unsigned_int(n1,n2): \n    '''\n    Write a python function to add two unsigned integers.\n    '''\n    return to_unsigned_int(n1 + n2)\n    \ndef and_unsigned_int(n1,n2): \n    '''\n    Write a python function to and two unsigned integers.\n    '''\n    return n1 & n2\n    \ndef and_signed_int(n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    bit = n & -n\n    n |= bit\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n & ~(n - 1)\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n &= n - 1\n    n |= (1 << n.bit_length())\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    num = bin(n).replace(\"0b\", \"\")\n    # if num is odd length\n    if len(num) % 2!= 0: \n        # set the bit to 1\n        num = \"1\" + num \n    else: \n        # set the bit to 0\n        num = \"0\" + num\n    return int(num, 2)\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    count = 0\n    while(n):\n        if(n & 1):\n            break\n        n >>= 1\n        count += 1\n    count = -count\n    return count\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return (n & 0x01)\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # number of bits.\n    n = n & -n\n    # The below line is to set the rightmost 1bit\n    n = n | 1\n    return n\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*(r**2)*h/3\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if r <= 0:\n        return 0\n    return 1/3*math.pi*r*r*h\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (3/4)*math.pi*r*r*h\n    \ndef area_cone(r,h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    return math.pi*r*r+(math.pi/2)*r*r*h\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * r**2 * h / 3\n    return v\ndef area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    a = math.pi * r**2 + math.pi * r * math.sqrt(h**2 + r**2)\n    return a\ndef base_area_hex(a,h):\n    '''\n    Write a function to find the base area of a hexagon.\n    '''\n    return a * 3 * h / 2\ndef surface_area_hex(a,h):\n    '''\n    Write a function to find the surface area of a hexagon.\n    '''\n    return a * 6 * h\ndef surface_area_rect(w,l):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return 2 * l * w + 2 * w * l\ndef surface_area_rect_parallelogram(w,l):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return 2 * l * w + l * w\ndef triangle_area(s,h):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return s * h / 2\ndef area_rect_circle(a,h):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a * h\ndef volume_rect_cone(a,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    v = a**3 * h / 3\n    return v\ndef area_triangle(s,h):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return s * h / 2\ndef area_triangle_rectangle(w,l):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return w * l\ndef perimeter_hex(s,h):\n    '''\n    Write a function to find the perimeter of a hexagon.\n    '''\n    return s * 6 + s * math.sqrt(3) * h\ndef perimeter_rect(w,l):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2 * (w + l)\ndef perimeter_rect_circle(a,h):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 4 * a + 2 * a * math.sqrt(2)\ndef perimeter_rect_hex(a,h):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 4 * a + 2 * a * math.sqrt(3) * h\ndef perimeter_triangle(s,h):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return s * 3 + s * math.sqrt(3) * h\ndef perimeter_circle(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    return 2 * math.pi * r\ndef perimeter_hex_circle(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    return 2 * math.pi * r * math.sqrt(3) / 2\ndef perimeter_rect_hex_circle(w,l):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    return 2 * (w + l)\ndef vol_cyl(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v = math.pi * r**2 * h\n    return v\ndef area_cyl(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a = math.pi * r**2 + 2 * math.pi * r * math.sqrt(h**2 + r**2)\n    return a\ndef volume_ellipsoid(r,h):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    v = (4/3) * math.pi * r**3 * h\n    return v\ndef area_ellipsoid(r,h):\n    '''\n    Write a function to find the surface area of an ellipsoid.\n    '''\n    a = 4 * math.pi * r**2 * h\n    return a\ndef area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\ndef area_sphere_circle(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\ndef surface_area_sphere_rect(w,l):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 2 * (w * l + w * math.sqrt(l**2 + w**2) + l * math.sqrt(l**2 + w**2))\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * r**3\n    return v\ndef area_sphere_rect(w,l):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 2 * (w * l + w * math.sqrt(l**2 + w**2) + l * math.sqrt(l**2 + w**2))\ndef volume_sphere_triangle(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * r**3\n    return v\ndef area_sphere_triangle(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4 * math.pi * r**2\n    return a\ndef volume_sphere_octahedron(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * r**3 * math.sqrt(2)\n    return v\ndef area_sphere_octahedron(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4 * math.pi * r**2 * math.sqrt(3)\n    return a\ndef volume_sphere_dodecaedron(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * r**3 * math.sqrt(2)\n    return v\ndef area_sphere_dodecaedron(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4 * math.pi * r**2 * math.sqrt(3)\n    return a\ndef volume_sphere_tetrahedron(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * r**3 * math.sqrt(1/4)\n    return v\ndef area_sphere_tetrahedron(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4 * math.pi * r**2 * math.sqrt(1/4)\n    return a\ndef volume_sphere_hexahedron(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * r**3 * math.sqrt(2)\n    return v\ndef area_sphere_hexahedron(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4 * math.pi * r**2 * math.sqrt(3)\n    return a\ndef volume_sphere_octahedron"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi*r*r*h)/3\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h / 3\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    r = float(r)\n    h = float(h)\n    if r < 0:\n        return 'Value must be non-negative'\n    elif h < 0:\n        return 'Value must be non-negative'\n    else:\n        return r*h*pi/3\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    h=float(h)\n    if(r<0 or h<0):\n        print \"Negative arguments are not allowed\"\n        return\n    else:\n        volume=(math.pi/3)*math.pow(r,2)*h\n        return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h / 3\n    return volume\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 / 3 * math.pi * r**3\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = math.pi * r**2 * h\n    return volume\ndef temp_of_fluid(r,v):\n    '''\n    Write a function to calculate the temperature of a fluid using pressure and volume.\n    '''\n    temperature = (v / r) * (273.15 + 0.0065 * r)\n    return temperature\ndef kinetic_energy(m,v):\n    '''\n    Write a function to calculate kinetic energy of an object using mass and velocity.\n    '''\n    kinetic_energy = m * v\n    return kinetic_energy\ndef radiation_on_celsius(t):\n    '''\n    Write a function to find the radiation on Celsius degrees using standard temperature.\n    '''\n    radiation = 0.082 * t**4 - 0.0367 * t**3 + 0.0031 * t**2 + 0.0029 * t\n    return radiation\ndef radiation_on_fahrenheit(t):\n    '''\n    Write a function to find the radiation on Fahrenheit degrees using standard temperature.\n    '''\n    radiation = (9/5) * (t - 32)\n    return radiation\ndef radiation_on_kelvin(t):\n    '''\n    Write a function to find the radiation on Kelvin degrees using standard temperature.\n    '''\n    radiation = (9/5) * (t - 32) + 459.67\n    return radiation\ndef radiation_on_rankine(t):\n    '''\n    Write a function to find the radiation on Rankine degrees using standard temperature.\n    '''\n    radiation = (9/5) * (t - 32) + 491.67\n    return radiation\ndef energy_required(power,efficiency):\n    '''\n    Write a function to calculate the energy required to do something using power and efficiency.\n    '''\n    required_energy = power * efficiency\n    return required_energy\ndef energy_produced(m,v):\n    '''\n    Write a function to calculate the energy produced by a cannon using mass and velocity.\n    '''\n    energy_produced = m * v\n    return energy_produced\ndef energy_produced_by_drag(v,rho,C):\n    '''\n    Write a function to calculate the energy produced by a cannon using velocity, density and drag coefficient.\n    '''\n    energy_produced_by_drag = 0.5 * rho * v**2 * C\n    return energy_produced_by_drag\ndef energy_produced_by_thrust(v,m,thrust):\n    '''\n    Write a function to calculate the energy produced by a cannon using velocity, mass and thrust.\n    '''\n    energy_produced_by_thrust = m * thrust\n    return energy_produced_by_thrust\ndef momentum(m,v):\n    '''\n    Write a function to calculate the momentum of an object using mass and velocity.\n    '''\n    momentum = m * v\n    return momentum\ndef distance(x,y,z,x2,y2,z2):\n    '''\n    Write a function to calculate the distance between two points using their coordinates.\n    '''\n    distance = math.sqrt(x2 - x)**2 + (y2 - y)**2 + (z2 - z)**2\n    return distance\ndef velocity(t,r):\n    '''\n    Write a function to calculate the velocity of an object using time and distance.\n    '''\n    velocity = r * t\n    return velocity\ndef force_of_gravity(m,r):\n    '''\n    Write a function to calculate the force of gravity on an object using mass and distance.\n    '''\n    force_of_gravity = m * G * r\n    return force_of_gravity\ndef force_of_gravity_on_celsius(t,r):\n    '''\n    Write a function to calculate the force of gravity on an object using time and distance.\n    '''\n    force_of_gravity_on_celsius = G * (m * t - r**2)\n    return force_of_gravity_on_celsius\ndef force_of_gravity_on_kelvin(t,r):\n    '''\n    Write a function to calculate the force of gravity on an object using time and distance.\n    '''\n    force_of_gravity_on_kelvin = G * (m * t - r**2) + G * r\n    return force_of_gravity_on_kelvin\ndef force_of_gravity_on_rankine(t,r):\n    '''\n    Write a function to calculate the force of gravity on an object using time and distance.\n    '''\n    force_of_gravity_on_rankine = G * (m * t - r**2) + G * (m * t - r**2)\n    return force_of_gravity_on_rankine\ndef force_of_gravity_on_fahrenheit(t,r):\n    '''\n    Write a function to calculate the force of gravity on an object using time and distance.\n    '''\n    force_of_gravity_on_fahrenheit = G * (m * t - r**2) + G * (m * t - r**2) + G * r\n    return force_of_gravity_on_fahrenheit\ndef acceleration_on_celsius(t,r):\n    '''\n    Write a function to calculate the acceleration on Celsius degrees using standard time and distance.\n    '''\n    acceleration_on_celsius = G * (m * t - r**2) / r\n    return acceleration_on_celsius\ndef acceleration_on_kelvin(t,r):\n    '''\n    Write a function to calculate the acceleration on Kelvin degrees using standard time and distance.\n    '''\n    acceleration_on_kelvin = G * (m * t - r**2) / r\n    return acceleration_on_kelvin\ndef acceleration_on_rankine(t,r):\n    '''\n    Write a function to calculate the acceleration on Rankine degrees using standard time and distance.\n    '''\n    acceleration_on_rankine = G * (m * t - r**2) / r\n    return acceleration_on_rankine\ndef acceleration_on_fahrenheit(t,r):\n    '''\n    Write a function to calculate the acceleration on Fahrenheit degrees using standard time and distance.\n    '''\n    acceleration_on_fahrenheit = G * (m * t - r**2) / r\n    return acceleration_on_fahrenheit\ndef acceleration(m,v):\n    '''\n    Write a function to calculate the acceleration of an object using mass and velocity.\n    '''\n    acceleration = m * v\n    return acceleration\ndef acceleration_of_drag(v,rho,C):\n    '''\n    Write a function to calculate the acceleration of an object using velocity, density and drag coefficient.\n    '''\n    acceleration_of_drag = 0.5 * rho * v**2 * C\n    return acceleration_of_drag\ndef acceleration_of_thrust(v,m,thrust):\n    '''\n    Write a function to calculate the acceleration of an object using velocity, mass and thrust.\n    '''\n    acceleration_of_thrust = m * thrust\n    return acceleration_of_thrust\ndef time_to_fall(m,v,g):\n    '''\n    Write a function to calculate the time to fall from a certain height with a certain speed using mass and velocity.\n    '''\n    time_to_fall = - (v * v) / (2 * g)\n    return time_to_fall\ndef time_to_fall_with_drag(v,rho,C,g):\n    '''\n    Write a function to calculate the time to fall from a certain height with a certain speed and drag coefficient using velocity, density and drag coefficient.\n    '''\n    time_to_fall_with_drag = - (v * v) / (2 * g) - v * math.sqrt(rho * v * v) / C\n    return time_to_fall_with_dra"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v=math.pi*r**2*h/3\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=math.pi*r**2*h\n    return v\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v=4*math.pi*r**3/3\n    return v\ndef volume_torus(r,h):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    v=math.pi*(r**2)*(r**2+(h**2))\n    return v\ndef volume_cone_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone and cylinder.\n    '''\n    v=math.pi*r**2*h\n    return v\ndef volume_cylinder_torus(r,h):\n    '''\n    Write a function to find the volume of a cylinder and torus.\n    '''\n    v=math.pi*r**2*h\n    return v\ndef volume_sphere_cylinder(r,h):\n    '''\n    Write a function to find the volume of a sphere and cylinder.\n    '''\n    v=4*math.pi*r**3/3*h\n    return v\ndef volume_sphere_torus(r,h):\n    '''\n    Write a function to find the volume of a sphere and torus.\n    '''\n    v=4*math.pi*r**3/3*h\n    return v\ndef volume_sphere_cone(r,h):\n    '''\n    Write a function to find the volume of a sphere and cone.\n    '''\n    v=4*math.pi*r**3/3*h\n    return v\ndef volume_sphere_cylinder(r,h):\n    '''\n    Write a function to find the volume of a sphere and cylinder.\n    '''\n    v=4*math.pi*r**3/3*h\n    return v\ndef volume_sphere_torus(r,h):\n    '''\n    Write a function to find the volume of a sphere and torus.\n    '''\n    v=4*math.pi*r**3/3*h\n    return v\ndef volume_sphere_cone_cylinder(r,h):\n    '''\n    Write a function to find the volume of a sphere, cone and cylinder.\n    '''\n    v=4*math.pi*r**3/3*h\n    return v\ndef volume_cylinder_torus(r,h):\n    '''\n    Write a function to find the volume of a cylinder and torus.\n    '''\n    v=math.pi*(r**2)*(r**2+(h**2))\n    return v\ndef volume_cone_cylinder_torus(r,h):\n    '''\n    Write a function to find the volume of a cone, cylinder and torus.\n    '''\n    v=math.pi*(r**2)*h\n    return v\ndef volume_sphere_torus_cylinder(r,h):\n    '''\n    Write a function to find the volume of a sphere, torus and cylinder.\n    '''\n    v=4*math.pi*r**3/3*h\n    return v\ndef volume_sphere_torus_cone(r,h):\n    '''\n    Write a function to find the volume of a sphere, torus and cone.\n    '''\n    v=4*math.pi*r**3/3*h\n    return v\ndef volume_sphere_torus_cylinder(r,h):\n    '''\n    Write a function to find the volume of a sphere, torus and cylinder.\n    '''\n    v=4*math.pi*r**3/3*h\n    return v\ndef volume_sphere_cone_cylinder(r,h):\n    '''\n    Write a function to find the volume of a sphere, cone, cylinder and torus.\n    '''\n    v=4*math.pi*r**3/3*h\n    return v\ndef volume_cylinder_torus_sphere(r,h):\n    '''\n    Write a function to find the volume of a cylinder, torus and sphere.\n    '''\n    v=math.pi*(r**2)*(r**2+(h**2))\n    return v\ndef volume_cone_cylinder_torus_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone, cylinder, torus and sphere.\n    '''\n    v=math.pi*(r**2)*h\n    return v\ndef volume_sphere_torus_cylinder_cone(r,h):\n    '''\n    Write a function to find the volume of a sphere, torus, cylinder, and cone.\n    '''\n    v=4*math.pi*r**3/3*h\n    return v\ndef volume_sphere_torus_cylinder_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere, torus, cylinder, and sphere.\n    '''\n    v=4*math.pi*r**3/3*h\n    return v\ndef volume_sphere_torus_cone_cylinder(r,h):\n    '''\n    Write a function to find the volume of a sphere, torus, cone, cylinder and torus.\n    '''\n    v=4*math.pi*r**3/3*h\n    return v\ndef volume_cylinder_torus_sphere_cone(r,h):\n    '''\n    Write a function to find the volume of a cylinder, torus, sphere, cone and torus.\n    '''\n    v=math.pi*(r**2)*(r**2+(h**2))\n    return v\ndef volume_cone_torus_cylinder_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone, torus, cylinder, sphere and torus.\n    '''\n    v=math.pi*(r**2)*h\n    return v\ndef volume_cylinder_sphere_torus(r,h):\n    '''\n    Write a function to find the volume of a cylinder, sphere, torus and torus.\n    '''\n    v=math.pi*(r**2)*h\n    return v\ndef volume_cylinder_sphere_torus_sphere(r,h):\n    '''\n    Write a function to find the volume of a cylinder, sphere, torus and sphere.\n    '''\n    v=math.pi*(r**2)*h\n    return v\ndef volume_cone_torus_cylinder_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone, torus, cylinder, sphere and torus.\n    '''\n    v=math.pi*(r**2)*h\n    return v\ndef volume_sphere_cylinder_torus_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere, cylinder, torus, and sphere.\n    '''\n    v=math.pi*(r**2)*h\n    return v\ndef volume_sphere_torus_cylinder_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere, torus, cylinder, and sphere.\n    '''\n    v=math.pi*(r**2)*h\n    return v\ndef volume_cylinder_sphere_torus_sphere(r,h):\n    '''\n    Write a function to find the volume of a cylinder, sphere, torus and sphere.\n    '''\n    v=math.pi*(r**2)*h\n    return v\ndef volume_cylinder_torus_sphere_torus(r,h):\n    '''\n    Write a function to find the volume of a cylinder, torus, sphere, and torus.\n    '''\n    v=math.pi*(r**2)*h\n    return v\ndef volume_sphere_torus_cylinder_torus_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere, torus, cylinde"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n/2**power >= 2:\n        power+=1\n    return power\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n==0:\n        return 0\n    ans=0\n    while (2**ans)<n:\n        ans+=1\n    return ans\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    #base case\n    if n < 1:\n        return 0\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    result = 0\n    if n==0:\n        return result\n    else:\n        while result <= n:\n            result = result * 2\n        return result/2\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    i = 1\n    power = 1\n    while i <= n:\n        power *= 2\n        i *= 2\n    return power // 2\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    high_power = 0\n    while(n >= pow(2,high_power)):\n        high_power = high_power + 1\n    return high_power - 1\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while 2**power <= n:\n        power += 1\n    return power - 1\n    \n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    def next_Power_of_2(n):\n        return 2**(n - 1).bit_length()\n    \n    if n < 2:\n        return n\n    else:\n        x = next_Power_of_2(n)\n        if x == n:\n            return x\n        else:\n            return next_Power_of_2(x)\n        \nprint (highest_Power_of_2(8)"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n<=0:\n        return 0\n    else:\n        return n.bit_length()-1\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 2**(n - 1).bit_length()\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    def lucas_recur(n, a = 1, b = 1):\n        if n == 0:\n            return a\n        if n == 1:\n            return b\n        return lucas_recur(n - 2, b, a + b)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2)) % 1000000007\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    a = 2\n    b = 1\n    \n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    \n    for x in range(2,n):\n        temp = b\n        b = a + b\n        a = temp\n    \n    return b\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    i = 2\n    lucas = [2, 1]\n    while i < n:\n        lucas.append(lucas[i-1] + lucas[i-2])\n        i += 1\n    return lucas[n-1]\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = [2,1]\n    for i in range(2,n):\n        lucas.append(lucas[i-2] + lucas[i-1])\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 1\n    return (find_lucas(n-1) + find_lucas(n-2))\n    \n    \ndef generate_nth_fibonacci_number(n):\n    '''\n    Write a function to generate a fibonacci number ofn'th order.\n    '''\n    fib1 = 0\n    fib2 = 1\n    \n    for i in range(n-1):\n        fib1, fib2 = fib2, fib1 + fib2\n    \n    return fib2\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    a,b,n = 1,1,n-1\n    for i in range(n-1):\n        a,b = b,a+b\n    return a\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    \n    # NOTE: F(0) = 2, F(1) = 1\n    #     F(n+1) = (F(n) + F(n-1))%m\n    #     F(n) = ((F(n-1) + F(n-2))%m)%m\n    #     F(2) = F(1) + F(0)\n    #     F(3) = F(2) + F(1)\n    #     F(4) = F(3) + F(2)\n    #     F(5) = F(4) + F(3)\n    #     F(6) = F(5) + F(4)\n    #     F(7) = F(6) + F(5)\n    #     F(8) = F(7) + F(6)\n    #     F(9) = F(8) + F(7)\n    #     F(10) = F(9) + F(8)\n    #     F(11) = F(10) + F(9)\n    #     F(12) = F(11) + F(10)\n    #     F(13) = F(12) + F(11)\n    #     F(14) = F(13) + F(12)\n    #     F(15) = F(14) + F(13)\n    #     F(16) = F(15) + F(14)\n    #     F(17) = F(16) + F(15)\n    #     F(18) = F(17) + F(16)\n    #     F(19) = F(18) + F(17)\n    #     F(20) = F(19) + F(18)\n    #     F(21) = F(20) + F(19)\n    #     F(22) = F(21) + F(20)\n    #     F(23) = F(22) + F(21)\n    #     F(24) = F(23) + F(22)\n    #     F(25) = F(24) + F(23)\n    #     F(26) = F(25) + F(24)\n    #     F(27) = F(26) + F(25)\n    #     F(28) = F(27) + F(26)\n    #     F(29) = F(28) + F(27)\n    #     F(30) = F(29) + F(28)\n    #     F(31) = F(30) + F(29)\n    #     F(32) = F(31) + F(30)\n    #     F(33) = F(32) + F(31)\n    #     F(34) = F(33) + F(32)\n    #     F(35) = F(34) + F(33)\n    #     F(36) = F(35) + F(34)\n    #     F(37) = F(36) + F(35)\n    #     F(38) = F(37) + F(36)\n    #     F(39) = F(38) + F(37)\n    #     F(40) = F(39) + F(38)\n    #     F(41) = F(40) + F(39)\n    #     F(42) = F(41) + F(40)\n    #     F(43) = F(42) + F(41)\n    #     F(44) = F(43) + F(42)\n    #     F(45) = F(44) + F(43)\n    #     F(46) = F(45) + F(44)\n    #     F(47) = F(46) + F(45)\n    #     F(48) = F(47) + F(46)\n    #     F(49) = F(48) + F(47)\n    #     F(50) = F(49) + F(48)\n    #     F(51) = F(50) + F(49)\n    #     F(52) = F(51) + F(50)\n    #     F(53) = F(52) + F(51)\n    #     F(54) = F(53) + F(52)\n    #     F(55) = F(54) + F(53)\n    #     F(56) = F(55) + F(54)\n    #     F(57) = F(56) + F(55)\n    #     F(58) = F(57) + F(56)\n    #     F(59) = F(58) + F(57)\n    #     F(60) = F(59) + F(58)\n    #     F(61) = F(60) + F(59)\n    #     F(62) = F(61) + F(60)\n    #     F(63) = F(62) + F(61)\n    #     F(64) = F(63) + F(62)\n    #     F(65) = F(64) + F(63)\n    #     F(66) = F(65) + F(64)\n    #     F(67) = F(66) + F(65)\n    #     F(68) = F(67) + F(66)\n    #     F(69) = F(68) + F(67)\n    #     F(70) = F(69) + F(68)\n    #     F(71) = F(70) + F(69)\n    #     F(72) = F(71) + F(70)\n    #     F(73) = F(72) + F(71)\n    #     F(74) = F(73) + F(72)\n    #     F(75) = F(74) + F(73)\n    #     F(76) = F(75) + F(74)\n    #     F(77) = F(76) + F(75)\n    #     F(78) = F(77) + F(76)\n    #     F(79) = F(78) + F(77)\n    #     F(80) = F(79) + F(78)\n    #     F(81) = F(80) + F(79)\n    #     F(82) = F(81) + F(80)\n    #     F(83) = F(82) + F(81)\n    #     F(84) = F(83) + F(82)\n    #     F(85) = F(84) + F(83)\n    #     F(86) = F(85) + F(84)\n    #     F(87) = F(86) + F(85)\n    #     F(88) = F(87) + F(86)\n    #     F(89) = F(88) + F(87)\n    #     F(90) = F(89) + F(88)\n    #     F(91) = F(90) + F(89)\n    #     F(92) = F(91) + F(90)\n    #     F(93) = F(92) + F(91)\n    #     F(94) = F(93) + F(92)\n    #     F(95) = F(94) + F(93)\n    #     F(96) = F(95) + F(94)\n    #     F(97) = F(96) + F(95)\n    #     F(98) = F(97) + F(96)\n    #     F(99) = F(98) + F(97)\n    #     F(100) = F(99) + F(98)\n    #     F(101) = F(100) + F(99)\n    #     F(102) = F(101) + F(100)\n    #     F(103) = F(102) + F(101)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    \n    # Lucas numbers are the sum of the previous two numbers\n    lucas_num = [2, 1]\n    \n    # If n is 1, 2, 3, 4, or 5, return 2\n    if n < 0:\n        return 0\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 7\n    \n    # If n is greater than 5, iterate through the above sequence\n    else:\n        for i in range(n - 5):\n            lucas_num.append(lucas_num[-2] + lucas_num[-1])\n        return lucas_num[-1]\n    \n    return 'error'\n    \n    \ndef find_binary_nums(n, base):\n    '''\n    Write a function to convert an integer to a base\n    \n    A base between 2 and 36 inclusive.\n    '''\n    \n    # Base is between 2 and 36\n    if base < 2 or base > 36:\n        return 0\n    \n    # If n is 0, return '0'\n    if n == 0:\n        return '0'\n    \n    # The number of digits of n\n    num_digits = 0\n    \n    # The number of digits that are needed to form n\n    num_bits = 0\n    \n    # The list to store the binary numbers\n    binary_nums = [0]\n    \n    # If n is negative, invert the number\n    if n < 0:\n        n = -1 * n\n        \n    # Keep adding 1 to the number until the number of digits is n\n    while num_digits < n:\n        num_bits += 1\n        num_digits = num_bits * 2\n        \n    # The number of bits is the number of digits\n    num_bits = num_digits\n    \n    # The carry\n    carry = 0\n    \n    # Initialize the index to 0\n    index = 0\n    \n    # Iterate through the number of bits\n    for i in range(num_bits - 1, -1, -1):\n        \n        # If the bit is a 1, add the next 2 bits of the number to the carry\n        if n & (1 << i):\n            carry += 1\n            \n        # If the bit is a 0, add the carry and the previous 2 bits of the number\n        else:\n            carry = 0\n            binary_nums.append(carry)\n            binary_nums.append(n & (1 << i))\n            index += 1\n    \n    # If there is a carry, append a 0 to the list\n    if carry:\n        binary_nums.append(0)\n        \n    # Reverse the list to get the binary number in descending order\n    binary_nums.reverse()\n    \n    # Return the list\n    return binary_nums\n    \n    \ndef is_palindrome(n):\n    '''\n    Write a function to check if a number is a palindrome.\n    '''\n    \n    # Convert the number to a string\n    n = str(n)\n    \n    # Length of the number\n    length = len(n)\n    \n    # Initialize the variables\n    is_palindrome = True\n    i = 0\n    j = length - 1\n    \n    # Iterate through the number\n    while i < j:\n        \n        # If the numbers are not equal, then return False\n        if n[i]!= n[j]:\n            is_palindrome = False\n            break\n        \n        # Move the pointers one step forward\n        i += 1\n        j -= 1\n        \n    # Return True if the number is palindrome\n    return is_palindrome\n    \n    \ndef is_power_of_2(n):\n    '''\n    Write a function to check if a number is a power of 2.\n    '''\n    \n    # If n is 0, return False\n    if n == 0:\n        return False\n    \n    # If n is 1, return True\n    if n == 1:\n        return True\n    \n    # If n is not a power of 2, return False\n    if n & (n - 1):\n        return False\n    \n    # If n is a power of 2, return True\n    return True\n    \n    \ndef is_anagram(s, t):\n    '''\n    Write a function to check if two strings are anagrams.\n    '''\n    \n    # If the lengths are not equal, return False\n    if len(s)!= len(t):\n        return False\n    \n    # If the strings are the same length, but have different characters, return False\n    if s == t:\n        return False\n    \n    # The dictionary to store the counts\n    counts = {}\n    \n    # Iterate through the string s\n    for i in s:\n        \n        # Add to the counts dictionary\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    \n    # Initialize the dictionary\n    new_counts = {}\n    \n    # Iterate through the string t\n    for j in t:\n        \n        # If the counts dictionary has the character, add 1\n        if j in new_counts:\n            new_counts[j] += 1\n        # Else add the character to the dictionary\n        else:\n            new_counts[j] = 1\n    \n    # Iterate through the counts dictionary\n    for i in counts:\n        \n        # If the counts is not the same as the new counts, return False\n        if counts[i]!= new_counts[i]:\n            return False\n    \n    # If the counts are equal, return True\n    return True\n    \n    \ndef is_antipalindrome(n):\n    '''\n    Write a function to check if a number is a palindrome.\n    '''\n    \n    # Convert the number to a string\n    n = str(n)\n    \n    # Length of the number\n    length = len(n)\n    \n    # Initialize the variables\n    is_palindrome = True\n    i = 0\n    j = length - 1\n    \n    # Iterate through the number\n    while i < j:\n        \n        # If the numbers are not equal, return False\n        if n[i]!= n[j]:\n            is_palindrome = False\n            break\n        \n        # Move the pointers one step forward\n        i += 1\n        j -= 1\n        \n    # Return True if the number is palindrome\n    return is_palindrome\n    \n    \ndef is_interesting(s):\n    '''\n    Write a function to check if a number is interesting.\n    '''\n    \n    # If the length is greater than 7, return False\n    if len(s) > 7:\n        return False\n    \n    # If the length is less than 3, return False\n    if len(s) < 3:\n        return False\n    \n    # If the string is a palindrome, return False\n    if is_palindrome(s):\n        return False\n    \n    # If the string is a power of 2, return True\n    if is_power_of_2(len(s)):\n        return True\n    \n    # If the string is an anagram, return True\n    if is_anagram(s, s):\n        return True\n    \n    # If the string is a palindrome, return True\n    if is_palindrome(s):\n        return True\n    \n    # If the string is a power of 2, return True\n    if is_power_of_2(len(s)):\n        return True\n    \n    # If the string is an interesting number, return True\n    return True\n    \n    \ndef is_interesting2(s):\n    '''\n    Write a function to check if a number is interesting.\n    '''\n    \n    # If the length is greater than 7, return False\n    if len(s) > 7:\n        return False\n    \n    # If the length is less than 3, return False\n    if len(s) < 3:\n        return False\n    \n    # If the string is a palindrome, return False\n    if is_palindrome(s):\n        return False\n    \n    # If the string is a power of 2, return True\n    if is_power_of_2(len(s)):\n        retur"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return list(map(lambda s: string.format(s), list_))\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for element in list_:\n        new_list.append(element.format(string))\n    return new_list\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string % x for x in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    #print(list_, string)\n    for i in list_:\n        print(string.format(i))\n        \n        \ndef len_of_list(list_):\n    return len(list_)\n    \ndef pop_list(list_, index):\n    return list_.pop(index)\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_[:] = [s.format(string) for s in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    string = string.split('%')\n    n = len(string)\n    for i in range(0,len(list_)):\n        for j in range(0,n):\n            list_[i] = list_[i].replace(string[j], '%'+str(j+1))\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = list_[i] % string\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if not list_:\n        list_ = [string]\n    else:\n        list_.append(string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = list_[i] % string\n    return list_\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l4 = []\n    for i in range(len(l1)):\n        temp = {}\n        temp['name'] = l1[i]\n        temp['age'] = l2[i]\n        temp['city'] = l3[i]\n        l4.append(temp)\n    return l4\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # return [{'a':l1, 'b':l2, 'c':l3}]\n    return {l1[i]:{'b':l2[i], 'c':l3[i]} for i in range(len(l1))}\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1)!= len(l2)!= len(l3):\n        raise IndexError\n    else:\n        return {l1[i]: {l2[i]: {l3[i]: l[i]}} for i in range(len(l))}\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    lst = []\n    for i in range(0, len(l1)):\n        dicti = {}\n        for j in range(0, len(l1[i])):\n            dicti[l1[i][j]] = l2[i][j]\n        lst.append(dicti)\n    return lst\n    \ndef list_to_dict(l1, l2):\n    '''\n    Write a function to convert two lists to dictionary.\n    '''\n    return dict(zip(l1, l2))\n    \ndef list_to_dict_by_index(l1, l2):\n    '''\n    Write a function to convert two lists to dictionary by index.\n    '''\n    return dict(zip(l1, l2))\n    \ndef sum_list(l1):\n    '''\n    Write a function to sum the numbers in a list.\n    '''\n    sum = 0\n    for i in l1:\n        sum += i\n    return sum\n    \ndef sort_list(l1):\n    '''\n    Write a function to sort a list.\n    '''\n    return sorted(l1)\n    \ndef count_list(l1):\n    '''\n    Write a function to count the occurrences of a specific number in a list.\n    '''\n    dicti = {}\n    for i in l1:\n        dicti[i] = dicti.get(i, 0) + 1\n    return dicti\n    \ndef reverse_list(l1):\n    '''\n    Write a function to reverse a list.\n    '''\n    return l1[::-1]\n    \ndef is_palindrome(l1):\n    '''\n    Write a function to check if a list is palindrome.\n    '''\n    return l1 == l1[::-1]\n    \ndef add_list(l1):\n    '''\n    Write a function to add two lists.\n    '''\n    lst = []\n    for i in range(0, len(l1)):\n        lst.append(l1[i] + l2[i])\n    return lst\n    \ndef multiply_list(l1):\n    '''\n    Write a function to multiply two lists.\n    '''\n    lst = []\n    for i in range(0, len(l1)):\n        lst.append(l1[i] * l2[i])\n    return lst\n    \ndef intersection(l1, l2):\n    '''\n    Write a function to get the intersection of two lists.\n    '''\n    intersect = []\n    for i in l1:\n        if i in l2:\n            intersect.append(i)\n    return intersect\n    \ndef union(l1, l2):\n    '''\n    Write a function to get the union of two lists.\n    '''\n    union = []\n    for i in l1:\n        union.append(i)\n    for i in l2:\n        if i not in union:\n            union.append(i)\n    return union\n    \ndef remove_duplicate(l1):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    lst = []\n    for i in l1:\n        if i not in lst:\n            lst.append(i)\n    return lst\n    \ndef common_words(l1, l2):\n    '''\n    Write a function to get the common words in two lists.\n    '''\n    common = []\n    for i in l1:\n        if i in l2:\n            common.append(i)\n    return common\n    \ndef unique_list(l1):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    return list(set(l1))\n    \ndef is_unique(l1):\n    '''\n    Write a function to check if a list is unique.\n    '''\n    if len(l1) == len(set(l1)):\n        return True\n    return False\n    \ndef list_to_num(l1):\n    '''\n    Write a function to convert a list of integers to an integer.\n    '''\n    sum = 0\n    for i in l1:\n        sum = sum * 10 + i\n    return sum\n    \ndef num_to_list(n1):\n    '''\n    Write a function to convert an integer to a list of integers.\n    '''\n    lst = []\n    while n1 > 0:\n        lst.append(n1 % 10)\n        n1 //= 10\n    lst.reverse()\n    return lst\n    \ndef unique_list(l1):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    lst = []\n    for i in l1:\n        if i not in lst:\n            lst.append(i)\n    return lst\n    \ndef is_unique(l1):\n    '''\n    Write a function to check if a list is unique.\n    '''\n    if len(l1) == len(set(l1)):\n        return True\n    return False\n    \ndef list_to_dict(l1, l2):\n    '''\n    Write a function to convert two lists to dictionary.\n    '''\n    return dict(zip(l1, l2))\n    \ndef sort_dict(d1):\n    '''\n    Write a function to sort a dictionary by key.\n    '''\n    return sorted(d1)\n    \ndef sort_dict_by_value(d1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(d1.items(), key=lambda x:x[1])\n    \ndef find_smallest_num(l1):\n    '''\n    Write a function to find the smallest number in a list.\n    '''\n    if len(l1) > 0:\n        return min(l1)\n    return None\n    \ndef find_largest_num(l1):\n    '''\n    Write a function to find the largest number in a list.\n    '''\n    if len(l1) > 0:\n        return max(l1)\n    return None\n    \ndef filter_list(l1, func):\n    '''\n    Write a function to filter a list by a function.\n    '''\n    lst = []\n    for i in l1:\n        if func(i):\n            lst.append(i)\n    return lst\n    \ndef map_list(l1, func):\n    '''\n    Write a function to map a list by a function.\n    '''\n    lst = []\n    for i in l1:\n        lst.append(func(i))\n    return lst\n    \ndef reduce_list(l1, func, start=0):\n    '''\n    Write a function to reduce a list by a function.\n    '''\n    sum = start\n    for i in l1:\n        sum = func(sum, i)\n    return sum\n    \ndef find_duplicates(l1):\n    '''\n    Write a function to find duplicates in a list.\n    '''\n    dup = []\n    for i in l1:\n        if l1.count(i) > 1:\n            dup.append(i)\n    return dup\n    \ndef find_words(l1):\n    '''\n    Write a function to find words in a list.\n    '''\n    lst = []\n    for i in l1:\n        if'' in i:\n            lst.append(i)\n    return lst\n    \ndef find_words_1(l1):\n    '''\n    Write a function to find words in a list.\n    '''\n    lst = []\n    for i in l1:\n        if len(i) > 1:\n            lst.append(i)\n    return lst\n    \ndef list_to_str(l1):\n    '''\n    Write a function to convert a list to a string.\n    '''\n    str = ''\n    for i in l1:\n        str += i\n    return str\n    \ndef str_to_list(s1):\n    '''\n    Write a function to convert a string to a list.\n    '''\n    lst = []\n    fo"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i,j,k in zip(l1, l2, l3):\n        d[i] = dict(zip(j,k))\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    dictionary['nested_dict'] = l1 + l2 + l3\n    return dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1_dictionary = {}\n    for item in l1:\n        l1_dictionary[item] = {}\n        for item2 in l2:\n            l1_dictionary[item][item2] = []\n            for item3 in l3:\n                l1_dictionary[item][item2].append(item3)\n    return l1_dictionary\n    \nprint convert_list_dictionary(['1','2','3'],[1,2,3],[1,2,3,4])"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {l1[i]: {l2[i]: l3[i]} for i in range(len(l1))}\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1) == 0:\n        return l2\n    else:\n        return {l1[0]: convert_list_dictionary(l1[1:], l2, l3)}\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return [dict(zip(l1, x)) for x in zip(l2,l3)]\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    n = n/2\n    while n >= 1:\n        n = n/2\n        if n >= 1:\n            n = n/3\n            if n >= 1:\n                n = n/4\n                if n >= 1:\n                    n = n/5\n                    if n >= 1:\n                        return 'exceeded'\n                else:\n                    return 'n is too small'\n            else:\n                return 'n is too small'\n        else:\n            return 'n is too small'\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    return max(n + get_max_sum (n/2) + get_max_sum (n/3) + get_max_sum (n/4) + get_max_sum (n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5) + n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    n = int (n)\n    if (n == 1):\n        return 1\n    elif (n%2 == 0):\n        return get_max_sum(n/2)\n    elif (n%3 == 0):\n        return get_max_sum(n/3)\n    elif (n%4 == 0):\n        return get_max_sum(n/4)\n    else:\n        return get_max_sum(n/5)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    ans = n\n    for i in range (1, int(n/2) + 1):\n        ans += max (n - i, i)\n    return ans\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    else:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return 0\n    return max(n + get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return int((2*n+1)**0.5-1)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    f = [0 for x in range (n+1)]\n    f[0] = 0\n    for i in range (1,n+1):\n        f[i] = max(f[i/2] + f[i/3] + f[i/4] + f[i/5], i)\n    return f[n]\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n%2 == 0:\n        return n + get_max_sum(n/2)\n    elif n%3 == 0:\n        return n + get_max_sum(n/3)\n    elif n%4 == 0:\n        return n + get_max_sum(n/4)\n    elif n%5 == 0:\n        return n + get_max_sum(n/5)\n    else:\n        return n\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=lambda x: len(x))\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for word in input_list:\n        if len(word) > max_length:\n            max_length = len(word)\n            max_list = [word]\n        elif len(word) == max_length:\n            max_list.append(word)\n    return max_list\n    \n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            max_list.append(item)\n    print \"The maximum length is %d\" % max_len\n    print \"The list with maximum length is %s\" % max_list\n    return 0\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for each in input_list:\n        if len(each) > max_len:\n            max_len = len(each)\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_len_list = []\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_len:\n            max_len = len(input_list[i])\n            max_len_list = input_list[i]\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return None\n    max_len = len(input_list[0])\n    max_list = input_list[0]\n    for l in input_list:\n        if len(l) > max_len:\n            max_len = len(l)\n            max_list = l\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length_list = []\n    for item in input_list:\n        length_list.append(len(item))\n    return input_list[length_list.index(max(length_list))]\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length = []\n    for i in range(len(input_list)):\n        length.append(len(input_list[i]))\n    return length.index(max(length))\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    for l in input_list:\n        if len(l) > max_length:\n            max_length = len(l)\n            max_list = l\n    return max_list\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_set = set()\n    for tup in test_tup:\n        unique_set.add(tup)\n    return len(unique_set) == len(test_tup)\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dic = {}\n    for i in str1:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    for i in str1:\n        if dic[i] == 1:\n            return i\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            return str1[i]\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict = {}\n    for x in str1:\n        if x in dict.keys():\n            dict[x] = dict[x] + 1\n        else:\n            dict[x] = 1\n    for x in str1:\n        if dict[x] == 1:\n            return x\n    return '_'\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str2 = str1.lower()\n    s=set()\n    for i in str2:\n        if i not in s:\n            s.add(i)\n            if len(s)==1:\n                return i\n    return -1\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # chr(i) returns the unicode character for i\n    # ord(i) returns the unicode value of i\n    # ord('a') - ord('A') returns the unicode value for lower case 'a'\n    # ord('Z') - ord('A') returns the unicode value for upper case 'z'\n    for i in range(len(str1)):\n        # print chr(i)\n        if chr(ord(str1[i]) - ord('a') + 1) not in str1:\n            return chr(i + ord('a'))\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    d = {}\n    for i in str1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in str1:\n        if d[i] == 1:\n            return i\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    for char in str1:\n        count = 0\n        for i in range(0, len(str1)):\n            if(str1[i] == char):\n                count += 1\n        if(count == 1):\n            return char\n    return -1\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dictionary = {}\n    for char in str1:\n        if char in char_dictionary:\n            char_dictionary[char] = char_dictionary[char] + 1\n        else:\n            char_dictionary[char] = 1\n    for char in str1:\n        if char_dictionary[char] == 1:\n            return char\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    map_count = {}\n    for char in str1:\n        if char not in map_count:\n            map_count[char] = 0\n        map_count[char] += 1\n    \n    for char in str1:\n        if map_count[char] == 1:\n            return char\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for c in str1:\n        if str1.count(c) == 1:\n            return c\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    \n    return re.match(regex, string)\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string): \n        print(\"String %s is palindrome!\" % string)\n    else: \n        print(\"String %s is not palindrome!\" % string)\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string)\nprint(check_char(\"ab\"))\nprint(check_char(\"aa\"))\nprint(check_char(\"aa\"))\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string) is not None\n    \n    \n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (re.match(regex, string)): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string)\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    global regex\n    if re.match(regex, string): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string)"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b:\n        if b < c:\n            return b\n        elif a > c:\n            return a\n        else:\n            return b\n    else:\n        if a > c:\n            return a\n        elif b < c:\n            return c\n        else:\n            return a\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (a > b):\n        if (a > c):\n            return a\n        else:\n            return c\n    elif (b > c):\n        return b\n    else:\n        return c\n    \ndef list_to_string(a):\n    '''\n    Write a function to convert a list to a string.\n    '''\n    b = ''\n    for i in a:\n        b += str(i) +''\n    return b\n    \ndef run_example():\n    a = [1,2,3,4,5,6,7,8,9,10]\n    b = 'Hello'\n    c = 'World'\n    d = [1,2,3]\n    e = [4,5,6,7]\n    f = [8,9,10]\n    g = ['H','e','l','l','o']\n    h = ['W','o','r','l','d']\n    i = [1,2,3,4,5,6,7,8,9,10]\n    j = [5,6,7]\n    k = ['A','B','C','D','E','F','G','H','I','J']\n    l = [1,2,3,4,5,6,7]\n    m = ['H','e','l','l','o']\n    n = ['W','o','r','l','d']\n    o = [1,2,3,4,5,6,7,8,9,10]\n    p = [2,3,4,5,6,7,8,9,10]\n    q = [9,10,11,12,13,14,15,16,17,18]\n    r = [1,2,3,4,5,6,7,8,9,10]\n    s = [1,2,3,4,5,6,7,8,9,10]\n    t = [1,2,3,4,5,6,7,8,9,10]\n    u = [1,2,3,4,5,6,7,8,9,10]\n    v = [1,2,3,4,5,6,7,8,9,10]\n    w = [1,2,3,4,5,6,7,8,9,10]\n    x = [1,2,3,4,5,6,7,8,9,10]\n    y = [1,2,3,4,5,6,7,8,9,10]\n    z = [1,2,3,4,5,6,7,8,9,10]\n    \n    #a)\n    print median_numbers(a[0],a[1],a[2])\n    \n    #b)\n    print list_to_string(a)\n    \n    #c)\n    print list_to_string(b)\n    \n    #d)\n    print list_to_string(c)\n    \n    #e)\n    print list_to_string(d)\n    \n    #f)\n    print list_to_string(e)\n    \n    #g)\n    print list_to_string(g)\n    \n    #h)\n    print list_to_string(h)\n    \n    #i)\n    print list_to_string(i)\n    \n    #j)\n    print list_to_string(j)\n    \n    #k)\n    print list_to_string(k)\n    \n    #l)\n    print list_to_string(l)\n    \n    #m)\n    print list_to_string(m)\n    \n    #n)\n    print list_to_string(n)\n    \n    #o)\n    print list_to_string(o)\n    \n    #p)\n    print list_to_string(p)\n    \n    #q)\n    print list_to_string(q)\n    \n    #r)\n    print list_to_string(r)\n    \n    #s)\n    print list_to_string(s)\n    \n    #t)\n    print list_to_string(t)\n    \n    #u)\n    print list_to_string(u)\n    \n    #v)\n    print list_to_string(v)\n    \n    #w)\n    print list_to_string(w)\n    \n    #x)\n    print list_to_string(x)\n    \n    #y)\n    print list_to_string(y)\n    \n    #z)\n    print list_to_string(z)\n    \ndef run_example2():\n    '''\n    Write a function to get the sum of all the numbers in a list of integers.\n    '''\n    a = [1,2,3,4,5,6,7,8,9,10]\n    \n    #a)\n    print sum(a)\n    \n    #b)\n    print sum(a[0:5])\n    \n    #c)\n    print sum(a[2:5])\n    \n    #d)\n    print sum(a[3:5])\n    \n    #e)\n    print sum(a[3:8])\n    \n    #f)\n    print sum(a[2:])\n    \n    #g)\n    print sum(a[:])\n    \ndef run_example3():\n    '''\n    Write a function to get the sum of the positive and negative numbers in a list of integers.\n    '''\n    a = [1,2,3,4,5,6,7,8,9,10]\n    \n    #a)\n    print sum(a[0:10:2])\n    \n    #b)\n    print sum(a[1:10:2])\n    \n    #c)\n    print sum(a[2:10:2])\n    \n    #d)\n    print sum(a[3:10:2])\n    \n    #e)\n    print sum(a[3:10:2])\n    \n    #f)\n    print sum(a[2:10:2])\n    \n    #g)\n    print sum(a[2:10:2])\n    \n    #h)\n    print sum(a[0:10:2])\n    \n    #i)\n    print sum(a[0:10:3])\n    \n    #j)\n    print sum(a[0:10:3])\n    \n    #k)\n    print sum(a[3:10:2])\n    \n    #l)\n    print sum(a[3:10:2])\n    \n    #m)\n    print sum(a[3:10:2])\n    \n    #n)\n    print sum(a[3:10:2])\n    \n    #o)\n    print sum(a[3:10:2])\n    \n    #p)\n    print sum(a[3:10:2])\n    \n    #q)\n    print sum(a[3:10:2])\n    \n    #r)\n    print sum(a[3:10:2])\n    \n    #s)\n    print sum(a[3:10:2])\n    \n    #t)\n    print sum(a[3:10:2])\n    \n    #u)\n    print sum(a[3:10:2])\n    \n    #v)\n    print sum(a[3:10:2])\n    \n    #w)\n    print sum(a[3:10:2])\n    \n    #x)\n    print sum(a[3:10:2])\n    \n    #y)\n    print sum(a[3:10:2])\n    \n    #z)\n    print sum(a[3:10:2])\n    \ndef run_example4():\n    '''\n    Write a function to get the average of all the numbers in a list of integers.\n    '''\n    a = [1,2,3,4,5,6,7,8,9,10]\n    \n    #a)\n    print sum(a[0:10:2])/10\n    \n    #b)\n    print sum(a[1:10:2])/10\n    \n    #c)\n    print sum(a[2:10:2])/10\n    \n    #d)\n    print sum(a[3:10:"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b:\n        if b < c:\n            return b\n        elif a > c:\n            return c\n        else:\n            return a\n    else:\n        if a > c:\n            return a\n        elif b < c:\n            return c\n        else:\n            return b\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    if b<a and b<c:\n        return b\n    if c<a and c<b:\n        return c\n    if a==b:\n        return a\n    if a==c:\n        return a\n    if b==c:\n        return b\n    else:\n        return 'No Median'\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>=b:\n        if a>=c:\n            if b>=c:\n                return b\n            else:\n                return c\n        else:\n            return a\n    else:\n        if b>=c:\n            if a>=c:\n                return a\n            else:\n                return c\n        else:\n            return b\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    nums = [a,b,c]\n    nums.sort()\n    if len(nums) % 2 == 0:\n        mid_num = int((len(nums) / 2) - 0.5)\n        return nums[mid_num]\n    else:\n        mid_num = int((len(nums) - 1) / 2)\n        return nums[mid_num]\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    #get the median of a,b,c\n    if a <= b and b <= c:\n        return a\n    elif a <= c and c <= b:\n        return a\n    elif b <= a and a <= c:\n        return b\n    elif b <= c and c <= a:\n        return b\n    elif c <= a and a <= b:\n        return c\n    else:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if b > c:\n            return b\n        elif a > c:\n            return c\n        else:\n            return a\n    else:\n        if a > c:\n            return a\n        elif b > c:\n            return c\n        else:\n            return b\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a=float(a)\n    b=float(b)\n    c=float(c)\n    if a>b>c:\n        return b\n    elif a<b<c:\n        return b\n    elif b>a>c:\n        return a\n    elif b<a<c:\n        return a\n    elif c>a>b:\n        return a\n    elif c<a<b:\n        return a\n    elif a==b==c:\n        return a\n    elif a==b>c:\n        return b\n    elif a==b<c:\n        return b\n    elif a==c>b:\n        return c\n    elif a==c<b:\n        return c\n    elif b==c>a:\n        return c\n    elif b==c<a:\n        return c\n    elif a>c>b:\n        return c\n    elif a<c<b:\n        return c\n    elif c>b>a:\n        return b\n    elif c<b<a:\n        return b\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    arr = [a,b,c]\n    arr.sort()\n    if len(arr) %2 == 1:\n        return arr[len(arr)/2]\n    return (arr[len(arr)/2 - 1] + arr[len(arr)/2])/2.0\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(lambda x: sum(map(lambda y: int(y), str(x))), nums))\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(x) for x in str(num))\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(x) for x in nums])\n    \ndef is_palindrome(string):\n    '''\n    Given a string, return True if it is a palindrome, False otherwise.\n    '''\n    string = string.lower()\n    return string == string[::-1]\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(i) for i in str(nums))\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    # make a copy of the list\n    list_of_nums = list(nums)\n    \n    # sum up the digits\n    sum_of_digits = 0\n    for n in list_of_nums:\n        digits = str(n)\n        sum_of_digits += sum(int(d) for d in digits)\n        \n    return sum_of_digits\n    \n    \n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    if not nums:\n        return 0\n    return sum_of_digits(nums[1:]) + nums[0]\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(str(nums)[i]) for i in range(len(nums))])\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for n in nums:\n        total += sum_of_digits_aux(n)\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(x) for x in nums)\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(x) for x in str(nums))\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    x = 0\n    for i in range(len(test_tup1)):\n        x = x ^ test_tup1[i] ^ test_tup2[i]\n    return x\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0]^test_tup2[0], test_tup1[1]^test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a^b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    \n    result = tuple(test_tup1[i] ^ test_tup2[i] for i in range(len(test_tup1)))\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    \n    test_tup1_bit1 = test_tup1[0]\n    test_tup1_bit2 = test_tup1[1]\n    test_tup2_bit1 = test_tup2[0]\n    test_tup2_bit2 = test_tup2[1]\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (tup1[0] ^ tup2[0], tup1[1] ^ tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if type(test_tup1) is not tuple or type(test_tup2) is not tuple:\n        print(\"Unhandled type, must be tuples\")\n        return None\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Tuples must be of equal length\")\n        return None\n    result = tuple()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = test_tup1[0]\n    test_tup2 = test_tup2[0]\n    return tuple(map(lambda x,y: x^y, test_tup1, test_tup2))\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for x in test_list:\n        if x in freq:\n            freq[x] += 1\n        else:\n            freq[x] = 1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = []\n    for tuple in test_list:\n        if tuple not in unique_tuples:\n            unique_tuples.append(tuple)\n    print unique_tuples\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    dict_freq = {}\n    for elem in test_list:\n        if elem in dict_freq:\n            dict_freq[elem] += 1\n        else:\n            dict_freq[elem] = 1\n    return dict_freq\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    return len(freq)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    seen = {}\n    for item in test_list:\n        if item not in seen:\n            seen[item] = 1\n    return len(seen.items())\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for elem in test_list:\n        key = elem[0], elem[1]\n        if key in freq:\n            freq[key] += 1\n        else:\n            freq[key] = 1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for i in test_list:\n        if i[0] not in test_list[count+1:]:\n            count += 1\n    return count\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Let's consider a list of tuples with the following format: (a, b, c)\n    # where a, b, and c are non-negative integers.\n    # For example, (0, 1, 2) has a unique tuple count of 1 since there is only one unique tuple\n    # of that format. Also, (0, 0, 1) has a unique tuple count of 0 since there is no unique tuple\n    # of that format.\n    # The function should return the number of unique tuples.\n    #\n    # Hint: how many unique tuples exist?\n    # Hint: how many unique tuples exist if we remove duplicates?\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in xrange(len(test_tup1)):\n        sub_tup1 = test_tup1[i]\n        sub_tup2 = test_tup2[i]\n        for j in xrange(len(sub_tup1)):\n            result.append(sub_tup1[j] + sub_tup2[j])\n    return tuple(result)\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    #Initialize variables\n    i=0\n    j=0\n    \n    #Checking to see if the two tuples have same length\n    if len(test_tup1)==len(test_tup2):\n        #If yes, then perform addition\n        nested_tuple=[]\n        for item in test_tup1:\n            i=0\n            j=0\n            for item2 in test_tup2:\n                temp=test_tup1[i]+test_tup2[j]\n                nested_tuple.append(temp)\n                i=i+1\n                j=j+1\n    return nested_tuple\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1) <= len(test_tup2):\n        for i in range(len(test_tup1)):\n            test_tup1[i] += test_tup2[i]\n        return test_tup1\n    else:\n        for i in range(len(test_tup2)):\n            test_tup1[i] += test_tup2[i]\n        return test_tup1\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(x + y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    new_tup = ()\n    \n    # calculate length of the tuple\n    length = len(test_tup1)\n    \n    # iterate through each tuple element\n    for i in range(length):\n        \n        # sum the tuple elements\n        summ = test_tup1[i] + test_tup2[i]\n        \n        # store the sum in the new tuple\n        new_tup = new_tup + (summ,)\n    \n    # return the new tuple\n    return new_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    l = []\n    for i in xrange(len(test_tup1)):\n        l.append(test_tup1[i] + test_tup2[i])\n    return tuple(l)\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup1 = ()\n    new_tup2 = ()\n    for i in range(len(test_tup1)):\n        new_tup1 += (test_tup1[i]+test_tup2[i],)\n        new_tup2 += (test_tup2[i]+test_tup1[i],)\n    return new_tup1, new_tup2\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] + test_tup2[i],)\n    return result\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n    if len1!= len2:\n        print \"Length of the two tuples are not equal\"\n        return\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise ValueError('Both tuples should be non-empty tuples')\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples should have same number of elements')\n    return tuple([test_tup1[i]+test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        print(a)\n    else:\n        print(b)\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        print a\n    else:\n        print b\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print a\n    else:\n        print b\ndef swap(a,b):\n    '''\n    Write a python function to swap two numbers.\n    '''\n    a,b = b,a\n    print a,b\ndef string_reverse(a):\n    '''\n    Write a python function to reverse a string.\n    '''\n    b = a[::-1]\n    print b\ndef square(a):\n    '''\n    Write a python function to calculate the square of a number.\n    '''\n    c = a*a\n    print c\ndef cube(a):\n    '''\n    Write a python function to calculate the cube of a number.\n    '''\n    c = a*a*a\n    print c\ndef is_odd(a):\n    '''\n    Write a python function to check if a number is odd or even.\n    '''\n    if a%2==0:\n        print \"even\"\n    else:\n        print \"odd\"\ndef is_even(a):\n    '''\n    Write a python function to check if a number is even or odd.\n    '''\n    if a%2==0:\n        print \"even\"\n    else:\n        print \"odd\"\ndef fibonacci(n):\n    '''\n    Write a python function to calculate the nth fibonacci number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\ndef factorial(n):\n    '''\n    Write a python function to calculate the nth factorial.\n    '''\n    return 1 if n==1 else n*factorial(n-1)\ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime.\n    '''\n    if n==1:\n        return False\n    elif n==2:\n        return True\n    elif n%2==0:\n        return False\n    else:\n        for i in range(3,n/2+1,2):\n            if n%i==0:\n                return False\n        return True\ndef is_perfect(n):\n    '''\n    Write a python function to check if a number is perfect.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if n%i==0:\n            sum+=i\n    return sum==n\ndef is_abundant(n):\n    '''\n    Write a python function to check if a number is abundant.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if n%i==0:\n            sum+=i\n    return sum>n\ndef is_deficient(n):\n    '''\n    Write a python function to check if a number is deficient.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if n%i==0:\n            sum+=i\n    return sum<n\ndef is_amicable(a,b):\n    '''\n    Write a python function to check if two numbers are amicable.\n    '''\n    return sum(factorial(a) for i in range(2,a/2+1))==b and sum(factorial(b) for i in range(2,b/2+1))==a\ndef is_strongly_abundant(n):\n    '''\n    Write a python function to check if a number is strongly abundant.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if n%i==0:\n            sum+=i\n    return sum>n\ndef is_strongly_deficient(n):\n    '''\n    Write a python function to check if a number is strongly deficient.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if n%i==0:\n            sum+=i\n    return sum<n\ndef is_strongly_amicable(a,b):\n    '''\n    Write a python function to check if two numbers are strongly amicable.\n    '''\n    return sum(factorial(a) for i in range(2,a/2+1))==b and sum(factorial(b) for i in range(2,b/2+1))==a\ndef is_triangular(n):\n    '''\n    Write a python function to check if a number is triangular.\n    '''\n    return n==int(n*(n+1)/2)\ndef is_pentagonal(n):\n    '''\n    Write a python function to check if a number is pentagonal.\n    '''\n    return n==int(n*(3*n-1)/2)\ndef is_hexagonal(n):\n    '''\n    Write a python function to check if a number is hexagonal.\n    '''\n    return n==int(n*(2*n-1))\ndef is_heptagonal(n):\n    '''\n    Write a python function to check if a number is hexagonal.\n    '''\n    return n==int(n*(5*n-3)/2)\ndef is_octagonal(n):\n    '''\n    Write a python function to check if a number is hexagonal.\n    '''\n    return n==int(n*(3*n-2))\ndef is_nonagonal(n):\n    '''\n    Write a python function to check if a number is nonagonal.\n    '''\n    return (n*(2*n-1))==int(n*(5*n-3)/2)\ndef is_hexagonal_triangle(n):\n    '''\n    Write a python function to check if a number is hexagonal triangle.\n    '''\n    return n*(3*n-1)==int(n*(5*n-3)/2)\ndef is_hexagonal_square(n):\n    '''\n    Write a python function to check if a number is hexagonal square.\n    '''\n    return n*(2*n-1)==int(n*(5*n-3)/2)\ndef is_hexagonal_pentagon(n):\n    '''\n    Write a python function to check if a number is hexagonal pentagon.\n    '''\n    return n*(3*n-2)==int(n*(5*n-3)/2)\ndef is_hexagonal_hexagon(n):\n    '''\n    Write a python function to check if a number is hexagonal hexagon.\n    '''\n    return n*(2*n-1)==int(n*(5*n-3)/2)\ndef is_hexagonal_heptagon(n):\n    '''\n    Write a python function to check if a number is hexagonal heptagon.\n    '''\n    return n*(5*n-3)==int(n*(5*n-3)/2)\ndef is_hexagonal_octagon(n):\n    '''\n    Write a python function to check if a number is hexagonal octagon.\n    '''\n    return n*(3*n-2)==int(n*(5*n-3)/2)\ndef is_hexagonal_nonagon(n):\n    '''\n    Write a python function to check if a number is hexagonal nonagon.\n    '''\n    return (n*(2*n-1))==int(n*(5*n-3)/2)\ndef is_hexagonal_trianle(n):\n    '''\n    Write a python function to check if a number is hexagonal triangle.\n    '''\n    return n*(3*n-1)==int(n*(5*n-3)/2)\ndef is_hexagonal_square(n):\n    '''\n    Write a python function to check if a number is hexagonal square.\n    '''\n    return n*(2*n-1)==int(n*(5*n-3)/2)\ndef is_hexagonal_pentagon(n):\n    '''\n    Write a python function to check if a number is hexagonal pentagon.\n    '''\n    return n*(5*n-3)==int(n*(5*n-3)/"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \ndef is_prime(n):\n    '''\n    Write a python function to check if the number is prime or not.\n    '''\n    if n==1:\n        return False\n    else:\n        for i in range(2,n):\n            if n%i==0:\n                return False\n        return True\n    \ndef factorial(n):\n    '''\n    Write a python function to return the factorial of a number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\n    \ndef fibonacci(n):\n    '''\n    Write a python function to return the nth number in fibonacci series.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\n    \ndef pfactorial(n):\n    '''\n    Write a python function to return the product of the first n prime numbers.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return n\n    else:\n        return n*pfactorial(n-1)\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef max(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef reverse(string):\n    '''\n    Write a python function to reverse a string.\n    '''\n    if string=='':\n        return ''\n    return string[-1]+reverse(string[:-1])\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    if string=='':\n        return True\n    if string[0]==string[-1]:\n        return isPalindrome(string[1:-1])\n    else:\n        return False\ndef factorial(n):\n    '''\n    Write a python function to compute the factorial of a given number.\n    '''\n    if n==0:\n        return 1\n    return n*factorial(n-1)\ndef fibonacci(n):\n    '''\n    Write a python function to compute the nth Fibonacci number.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    return fibonacci(n-1)+fibonacci(n-2)\ndef toHex(dec):\n    '''\n    Write a python function to convert a decimal number to hexadecimal.\n    '''\n    if dec==0:\n        return '0'\n    if dec==1:\n        return '1'\n    if dec==2:\n        return '2'\n    if dec==3:\n        return '3'\n    if dec==4:\n        return '4'\n    if dec==5:\n        return '5'\n    if dec==6:\n        return '6'\n    if dec==7:\n        return '7'\n    if dec==8:\n        return '8'\n    if dec==9:\n        return '9'\n    if dec==10:\n        return 'A'\n    if dec==11:\n        return 'B'\n    if dec==12:\n        return 'C'\n    if dec==13:\n        return 'D'\n    if dec==14:\n        return 'E'\n    if dec==15:\n        return 'F'\ndef fact(n):\n    '''\n    Write a python function to compute the factorial of a given number.\n    '''\n    if n==0:\n        return 1\n    return n*fact(n-1)\ndef isPerfect(n):\n    '''\n    Write a python function to check whether a given number is perfect or not.\n    '''\n    sum=0\n    for i in range(1,n):\n        if n%i==0:\n            sum+=i\n    if sum==n:\n        return True\n    else:\n        return False\ndef nPr(n,r):\n    '''\n    Write a python function to compute the value of nPr(n,r)\n    '''\n    return fact(n)/factorial(r)/factorial(n-r)\ndef nCr(n,r):\n    '''\n    Write a python function to compute the value of nCr(n,r)\n    '''\n    if r>n-r:\n        return nPr(n,r)\n    return factorial(n)/factorial(r)/factorial(n-r)\ndef isFibonacci(n):\n    '''\n    Write a python function to check whether a given number is Fibonacci or not.\n    '''\n    if n==0 or n==1:\n        return True\n    return isFibonacci(n-1) and isFibonacci(n-2)\ndef cuberoot(x,n):\n    '''\n    Write a python function to compute the nth cube root of a number x.\n    '''\n    return x**(1/n)\ndef isPerfectSquare(x):\n    '''\n    Write a python function to check whether a given number is perfect square or not.\n    '''\n    i=0\n    while i**2<=x:\n        if i**2==x:\n            return True\n        i+=1\n    return False\ndef fib(n):\n    '''\n    Write a python function to compute the nth Fibonacci number.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    return fib(n-1)+fib(n-2)\ndef reverseString(string):\n    '''\n    Write a python function to reverse a string.\n    '''\n    if string=='':\n        return ''\n    return string[-1]+reverseString(string[:-1])\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    if string=='':\n        return True\n    if string[0]==string[-1]:\n        return isPalindrome(string[1:-1])\n    else:\n        return False\ndef sumofDigits(n):\n    '''\n    Write a python function to compute the sum of digits of a given number.\n    '''\n    if n==0:\n        return 0\n    return n%10+sumofDigits(n//10)\ndef pythagoras(a,b):\n    '''\n    Write a python function to compute the pythagorean triplet.\n    '''\n    c=minimum(a,b)**2+maximum(a,b)**2\n    return c\ndef circleArea(r):\n    '''\n    Write a python function to compute the area of a circle with given radius.\n    '''\n    return 3.14*r**2\ndef findMax(a,b):\n    '''\n    Write a python function to compute the maximum of two numbers.\n    '''\n    return max(a,b)\ndef reverse(string):\n    '''\n    Write a python function to reverse a string.\n    '''\n    if string=='':\n        return ''\n    return string[-1]+reverse(string[:-1])\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    if string=='':\n        return True\n    if string[0]==string[-1]:\n        return isPalindrome(string[1:-1])\n    else:\n        return False\ndef nPr(n,r):\n    '''\n    Write a python function to compute the value of nPr(n,r)\n    '''\n    return fact(n)/factorial(r)/factorial(n-r)\ndef nCr(n,r):\n    '''\n    Write a python function to compute the value of nCr(n,r)\n    '''\n    if r>n-r:\n        return nPr(n,r)\n    return factorial(n)/factorial(r)/factorial(n-r)\ndef isFibonacci(n):\n    '''\n    Write a python function to check whether a given number is Fibonacci or not.\n    '''\n    if n==0 or n==1:\n        return True\n    return isFibonacci(n-1) and isFibonacci(n-2)\ndef cuberoot(x,n):\n    '''\n    Write a python function to compute the nth cube root of a number x.\n    '''\n    return x**(1/n)\ndef isPerfectSquare(x):\n    '''\n    Write a python function to check whether a given number is perfect square or not.\n    '''\n    i=0\n    while i**2<=x:\n        if i**2==x:\n            return True\n        i+=1\n    return False\ndef fib(n):\n    '''\n    Write a python function to compute the nth Fibonacci number.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    return fib(n-1)+fib(n-2)\ndef reverse(string):\n    '''\n    Write a python function to reverse a string.\n    '''\n    if string=='':\n        return ''\n    return string[-1]+reverse(string[:-1])\ndef isPalindrome(string):\n    '''\n    Write "
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n    \n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for ele in tuplex:\n        if ele == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for t in tuplex:\n        if t == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuplex:\n        if tuplex.index(x) == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex: \n        if i == tuple1: \n            return True \n    return False \n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex.count(tuple1) == 0:\n        print \"The tuple\",tuple1,\"is not found in the tuple\",tuplex\n    else:\n        print \"The tuple\",tuple1,\"is found in the tuple\",tuplex\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if (tuplex[tuple1]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex[0] == tuple1:\n        print (\"element found\")\n    else:\n        print (\"element not found\")\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for t in tuplex:\n        if t == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # Initialise an empty list to contain the output.\n    output = []\n    # Iterate over the elements of the tuple.\n    for i in range(len(tuplex)):\n        # If the tuple has a value match with the element we are searching,\n        # add it to the list.\n        if tuplex[i] == tuple1:\n            output.append(True)\n        else:\n            output.append(False)\n    # If the output list contains True values, then we know that the tuple\n    # we are searching for is in the tuple.\n    if True in output:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0: \n        return \"Parity is Even\"\n    else:\n        return \"Parity is Odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    if (x & 1) == 0: \n        return 0\n    else: \n        return 1\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    print x % 2\n    return x % 2\n    \ndef sum(x, y): \n    '''\n    Write a python function to return the sum of two numbers.\n    '''\n    return x + y\n    \ndef factorial(n): \n    '''\n    Write a python function to return the factorial of a number.\n    '''\n    factorial = 1\n    if n < 0: \n        print \"Sorry, factorial does not exist for negative numbers\"\n    elif n == 0: \n        return factorial\n    else: \n        for i in range(1, n + 1): \n            factorial = factorial * i\n    return factorial\n    \ndef fibonacci(n):\n    '''\n    Write a python function to return the nth number of the Fibonacci sequence.\n    '''\n    if n < 0: \n        print \"Sorry, Fibonacci sequence does not exist for negative numbers\"\n    elif n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return fibonacci(n - 1) + fibonacci(n - 2)\n    \ndef sum_all(L): \n    '''\n    Write a python function to return the sum of all the numbers in a list.\n    '''\n    sum = 0\n    for number in L: \n        sum = sum + number\n    return sum\n    \ndef sum_odd(L): \n    '''\n    Write a python function to return the sum of all the odd numbers in a list.\n    '''\n    sum = 0\n    for number in L: \n        if number % 2 == 1: \n            sum = sum + number\n    return sum\n    \ndef sum_even(L): \n    '''\n    Write a python function to return the sum of all the even numbers in a list.\n    '''\n    sum = 0\n    for number in L: \n        if number % 2 == 0: \n            sum = sum + number\n    return sum\n    \ndef sum_odd_and_even(L): \n    '''\n    Write a python function to return the sum of all the odd and even numbers in a list.\n    '''\n    sum = 0\n    for number in L: \n        if number % 2 == 0: \n            sum = sum + number\n    return sum\n    \ndef is_vowel(ch): \n    '''\n    Write a python function to check whether a character is a vowel or not.\n    '''\n    if ch == 'a' or ch == 'e' or ch == 'i' or ch == 'o' or ch == 'u': \n        return True\n    else: \n        return False\n    \ndef get_vowels(L): \n    '''\n    Write a python function to return a list of vowels in a string.\n    '''\n    L = list(L)\n    vowels = []\n    for ch in L: \n        if is_vowel(ch): \n            vowels.append(ch)\n    return vowels\n    \ndef palindrome(s): \n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    s = s.lower()\n    return s == s[::-1]\n    \ndef vowel_count(s): \n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = 0\n    for ch in s: \n        if is_vowel(ch): \n            vowels = vowels + 1\n    return vowels\n    \ndef get_vowel_count(s): \n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = 0\n    for ch in s: \n        if is_vowel(ch): \n            vowels = vowels + 1\n    return vowels\n    \ndef reverse(s): \n    '''\n    Write a python function to reverse a string.\n    '''\n    if len(s) == 0: \n        return s\n    else: \n        return reverse(s[1:]) + s[0]\n    \ndef remove_duplicates(L): \n    '''\n    Write a python function to remove duplicate elements in a list.\n    '''\n    L = list(L)\n    L.sort()\n    new_L = []\n    for number in L: \n        if number not in new_L: \n            new_L.append(number)\n    return new_L\n    \ndef get_duplicates(L): \n    '''\n    Write a python function to get duplicates in a list.\n    '''\n    L = list(L)\n    L.sort()\n    new_L = []\n    for number in L: \n        if number not in new_L: \n            new_L.append(number)\n        else: \n            new_L.append(number)\n    return new_L\n    \ndef count_duplicates(L): \n    '''\n    Write a python function to count the number of duplicates in a list.\n    '''\n    L = list(L)\n    L.sort()\n    new_L = []\n    for number in L: \n        if number not in new_L: \n            new_L.append(number)\n        else: \n            new_L.append(number)\n    return len(new_L) - 1\n    \ndef remove_duplicates_using_sets(L): \n    '''\n    Write a python function to remove duplicates in a list. Use sets.\n    '''\n    L = list(L)\n    L.sort()\n    new_L = []\n    for number in L: \n        if number not in new_L: \n            new_L.append(number)\n    return new_L\n    \ndef get_duplicates_using_sets(L): \n    '''\n    Write a python function to get duplicates in a list. Use sets.\n    '''\n    L = list(L)\n    L.sort()\n    new_L = []\n    for number in L: \n        if number not in new_L: \n            new_L.append(number)\n        else: \n            new_L.append(number)\n    return new_L\n    \ndef is_anagram(s, t): \n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    if len(s)!= len(t): \n        return False\n    else: \n        return sorted(s) == sorted(t)\n    \ndef count_anagrams(L): \n    '''\n    Write a python function to count the number of anagrams in a list.\n    '''\n    L = list(L)\n    L.sort()\n    new_L = []\n    for number in L: \n        if number not in new_L: \n            new_L.append(number)\n    return len(new_L)\n    \ndef count_anagrams_using_sets(L): \n    '''\n    Write a python function to count the number of anagrams in a list.\n    '''\n    L = list(L)\n    L.sort()\n    new_L = []\n    for number in L: \n        if number not in new_L: \n            new_L.append(number)\n    return len(new_L)\n    \ndef print_table(n): \n    '''\n    Write a python function to print a table of powers.\n    '''\n    for i in range(1, n + 1): \n        print \"%d! = %d\" % (i, factorial(i))\n    \ndef print_table_row(n): \n    '''\n    Write a python function to print a table of powers.\n    '''\n    for i in range(1, n + 1): \n        print \"%d\" % (factorial(i))\n    \ndef print_table_column(n): \n    '''\n    Write a python function to print a table of powers.\n    '''\n    for i in range(1, n + 1): \n        print \"%d\" % (i)\n    \ndef print_table_in_rows(n): \n    '''\n    Write a python functio"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x%2 == 1): \n        print \"The parity of %d is %d\" %(x, 1)\n    else: \n        print \"The parity of %d is %d\" %(x, 0)\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = abs(x)\n    if x % 2 == 0:\n        return \"Parity is even\"\n    else:\n        return \"Parity is odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    while x: \n        parity ^= x & 1\n        x >>= 1\n    return parity \n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    import math\n    sum = 0\n    for i in range(1, int(math.sqrt(x))):\n        if x % i == 0:\n            sum += i\n    return (sum + x) % 2\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x&1) == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # x is a positive number\n    if x & 1 == 1:\n        return \"odd\"\n    else:\n        return \"even\"\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x & 1:\n        return 'Parity is odd'\n    else:\n        return 'Parity is even'\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    out = []\n    # reverse\n    for i in reversed(range(len(str(n)))):\n        out.append(int(str(n)[i]))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    nlist = list(n)\n    nlist.sort(reverse=True)\n    nlist = list(map(int,nlist))\n    nlist = list(map(str,nlist))\n    n = int(\"\".join(nlist))\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    nums = list(str(n))\n    # print nums\n    for i in range(len(nums)):\n        if i+1 < len(nums) and nums[i] < nums[i+1]:\n            for j in range(i+1, len(nums)):\n                if nums[j] > nums[i]:\n                    nums[i], nums[j] = nums[j], nums[i]\n                    break\n            # print nums\n            break\n    res = int(''.join(nums))\n    return res\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n_string = str(n)\n    max_val = n_string[-1]\n    for i in range(len(n_string)-1, 0, -1):\n        if int(n_string[i]) > int(max_val):\n            max_val = n_string[i]\n        else:\n            break\n    r_val = n_string[:i]\n    r_val += max_val\n    return int(r_val)\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    res = []\n    temp = list(str(n))\n    while len(temp) > 0:\n        res.append(temp.pop())\n        temp.insert(0, temp.pop())\n    return int(''.join(res))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = []\n    while n:\n        digits.append(n % 10)\n        n //= 10\n    i = len(digits) - 1\n    j = 0\n    while i > 0:\n        if digits[i-1] < digits[i]:\n            j = i - 1\n            break\n        i -= 1\n    if j == 0:\n        digits.reverse()\n        return int(''.join(map(str,digits)))\n    k = j - 1\n    while digits[k] >= digits[j]:\n        k -= 1\n    digits[k], digits[j] = digits[j], digits[k]\n    digits[j+1:] = digits[:j:-1]\n    return int(''.join(map(str,digits)))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        n_str = str(n)\n        n_len = len(n_str)\n        digits = [int(x) for x in n_str]\n        digits_len = len(digits)\n        i = n_len - 1\n        flag = False\n        while i > 0:\n            if digits[i - 1] < digits[i]:\n                digits[i - 1], digits[i] = digits[i], digits[i - 1]\n                digits = digits[:i] + sorted(digits[i:])\n                flag = True\n                break\n            i -= 1\n        if flag == False:\n            digits.reverse()\n        if digits[0] == 9:\n            digits[0] = 0\n            digits = [9] + digits[1:]\n        new_n = int(''.join([str(x) for x in digits]))\n        return new_n\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    nums = [int(x) for x in str(n)]\n    size = len(nums)\n    i = 0\n    while i < size-1:\n        j = i+1\n        while j < size:\n            if nums[i] < nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n            j += 1\n        i += 1\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    import math\n    # preprocess the input\n    l = len(str(n))\n    s = str(n)\n    # find the largest power of 10 that exceeds the length of the number\n    p = int(math.ceil(math.log(l,10)))\n    # create a new number by rearranging the digits\n    n = int(''.join(s[::-1][i:i+p][::-1] for i in range(0,len(s[::-1]),p)))\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    rearrange_digits(n)\n    if n < 0:\n        n = -n\n    else:\n        pass\n    return n\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in nums1:\n        for j in nums2:\n            if len(heap) < k:\n                heapq.heappush(heap, (i + j, [i, j]))\n            elif i + j < heap[0][0]:\n                heapq.heapreplace(heap, (i + j, [i, j]))\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    \n    pairs = []\n    heapq.heapify(pairs)\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(pairs) < k:\n                heapq.heappush(pairs, (num1 + num2, (num1, num2)))\n            else:\n                heapq.heappushpop(pairs, (num1 + num2, (num1, num2)))\n    \n    return [x[1] for x in pairs]\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    '''\n    pq = []\n    for i in xrange(len(nums2)):\n        heapq.heappush(pq, (-nums2[i], nums2[i]))\n    for i in xrange(len(nums1)):\n        if len(pq) == k:\n            heapq.heappop(pq)\n        heapq.heappush(pq, (-nums1[i], nums1[i]))\n        yield [pq[0][1], pq[0][0]]\n    '''\n    '''\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    ans = []\n    i, j = 0, 0\n    while len(ans) < k:\n        if j >= len(nums2):\n            ans.append(nums1[i])\n            i += 1\n            continue\n        if i >= len(nums1):\n            ans.append(nums2[j])\n            j += 1\n            continue\n        if nums1[i] <= nums2[j]:\n            ans.append(nums1[i])\n            i += 1\n        else:\n            ans.append(nums2[j])\n            j += 1\n    return ans\n    '''\n    '''\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    ans = []\n    i, j = 0, 0\n    while len(ans) < k:\n        if j >= len(nums2):\n            ans.append(nums1[i])\n            i += 1\n            continue\n        if i >= len(nums1):\n            ans.append(nums2[j])\n            j += 1\n            continue\n        if nums1[i] <= nums2[j]:\n            ans.append(nums1[i])\n            i += 1\n        else:\n            ans.append(nums2[j])\n            j += 1\n    return ans\n    '''\n    '''\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    ans = []\n    i, j = 0, 0\n    while len(ans) < k:\n        if j >= len(nums2):\n            ans.append((nums1[i], -nums2[j]))\n            i += 1\n            continue\n        if i >= len(nums1):\n            ans.append((-nums2[j], nums1[i]))\n            j += 1\n            continue\n        if nums1[i] <= nums2[j]:\n            ans.append((nums1[i], -nums2[j]))\n            i += 1\n        else:\n            ans.append((-nums2[j], nums1[i]))\n            j += 1\n    return ans\n    '''\n    '''\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    ans = []\n    i, j = 0, 0\n    while len(ans) < k:\n        if j >= len(nums2):\n            ans.append((-nums1[i], nums2[j]))\n            i += 1\n            continue\n        if i >= len(nums1):\n            ans.append((nums1[i], -nums2[j]))\n            j += 1\n            continue\n        if nums1[i] <= nums2[j]:\n            ans.append((-nums1[i], nums2[j]))\n            i += 1\n        else:\n            ans.append((nums1[i], -nums2[j]))\n            j += 1\n    return ans\n    '''\n    '''\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    ans = []\n    i, j = 0, 0\n    while len(ans) < k:\n        if j >= len(nums2):\n            ans.append((nums1[i], -nums2[j]))\n            i += 1\n            continue\n        if i >= len(nums1):\n            ans.append((-nums1[j], nums2[i]))\n            j += 1\n            continue\n        if nums1[i] <= nums2[j]:\n            ans.append((nums1[i], -nums2[j]))\n            i += 1\n        else:\n            ans.append((-nums1[j], nums2[i]))\n            j += 1\n    return ans\n    '''\n    '''\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    ans = []\n    i, j = 0, 0\n    while len(ans) < k:\n        if j >= len(nums2):\n            ans.append((nums1[i], -nums2[j]))\n            i += 1\n            continue\n        if i >= len(nums1):\n            ans.append((-nums1[j], nums2[i]))\n            j += 1\n            continue\n        if nums1[i] <= nums2[j]:\n            ans.append((nums1[i], -nums2[j]))\n            i += 1\n        else:\n            ans.append((-nums1[j], nums2[i]))\n            j += 1\n    return ans\n    '''\n    '''\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    ans = []\n    i, j = 0, 0\n    while len(ans) < k:\n        if j >= len(nums2):\n            ans.append((nums1[i], -nums2[j]))\n            i += 1\n            continue\n        if i >= len(nums1):\n            ans.append((-nums1[j], nums2[i]))\n            j += 1\n            continue\n        if nums1[i] <= nums2[j]:\n            ans.append((nums1[i], -nums2[j]))\n            i += 1\n        else:\n            ans.append((-nums1[j], nums2[i]))\n            j += 1\n    return ans\n    '''\n    '''\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    ans = []\n    i, j = 0, 0\n    while len(ans) < k:\n        if j >= len(nums2):\n            ans.append((nums1[i], -nums2[j]))\n            i += 1\n            continue\n        if i >= len(nums1):\n            ans.append((-nums1[j], nums2[i]))\n            j += 1\n            continue\n        if nums1[i] <= nums2[j]:\n            ans.append((nums1[i], -nums2[j]))\n            i += 1\n        else:\n            ans.append((-nums1[j], nums2[i]))\n            j += 1\n    return ans\n    '''\n    '''\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    ans = []\n    i, j = 0, 0\n    while len(ans) < k:\n        if j >= len(nums2):\n            ans.append((nums1[i], -nums2[j]))\n            i += 1\n            continue\n        if i >= len(nums1):\n            ans.append((-nums1[j], nums2[i]))\n            j += 1\n            continue\n        if nums1[i] <= nums2[j]:\n            ans.append((nums1[i], -nums2[j]))\n            i += 1\n        else:\n            ans.append((-nums1[j], nums2[i]))\n            j += 1\n    return ans\n    '''\n    '''\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    ans = []\n    i, j "
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    res = []\n    for i in range(k):\n        heapq.heappush(heap, [nums1[i], nums2[i]])\n    for i in range(k, len(nums1)):\n        if nums1[i] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, [nums1[i], nums2[i]])\n        else:\n            res.append(heap[0])\n            heapq.heappop(heap)\n            heapq.heappush(heap, [nums1[i], nums2[i]])\n    for i in range(len(heap)):\n        res.append(heap[i])\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def heap_to_list(heap):\n        return [heapq.heappop(heap) for _ in range(len(heap))]\n    def k_smallest_pairs(nums1, nums2, k):\n        pairs = []\n        heap = []\n        i, j = 0, 0\n        while len(pairs) < k:\n            if i < len(nums1) and j < len(nums2):\n                if nums1[i] < nums2[j]:\n                    heapq.heappush(heap, (nums1[i], nums2[j]))\n                    i += 1\n                    if len(heap) < k:\n                        continue\n                else:\n                    heapq.heappush(heap, (nums2[j], nums1[i]))\n                    j += 1\n                    if len(heap) < k:\n                        continue\n            elif i == len(nums1) and j < len(nums2):\n                if len(heap) < k:\n                    for i in range(j, len(nums2)):\n                        heapq.heappush(heap, (nums2[i], nums1[0]))\n                    continue\n            elif i < len(nums1) and j == len(nums2):\n                if len(heap) < k:\n                    for i in range(i, len(nums1)):\n                        heapq.heappush(heap, (nums1[i], nums2[0]))\n                    continue\n            else:\n                if len(heap) < k:\n                    heap = []\n                    i, j = 0, 0\n                    continue\n            pairs.append(heap_to_list(heap))\n            heap = []\n            i, j = 0, 0\n        return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    h1 = [(nums1[0]+nums2[0], 0, 0)]\n    heapq.heapify(h1)\n    count = 0\n    for i in range(1, len(nums1)):\n        while count < k and h1[0][0] < nums1[i]+nums2[0]:\n            heapq.heappop(h1)\n            count += 1\n        heapq.heappush(h1, (nums1[i]+nums2[0], i, 0))\n    pairs = []\n    while count > 0:\n        pairs.append((nums1[heapq.heappop(h1)[1]], nums2[heapq.heappop(h1)[2]]))\n        count -= 1\n    return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k > len(nums1) * len(nums2):\n        return None\n    result = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            result.append((nums1[i], nums2[j]))\n    result = sorted(result, key = lambda x: x[0] + x[1])\n    return result[:k]\ndef k_smallest_pairs_1(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k > len(nums1) * len(nums2):\n        return None\n    result = []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                temp = heapq.heappushpop(heap, (nums1[i] + nums2[j], i, j))\n                if temp[1]!= temp[2]:\n                    heapq.heappush(heap, temp)\n    while heap:\n        result.append((heapq.heappop(heap)[0], heapq.heappop(heap)[1], heapq.heappop(heap)[2]))\n    return result\ndef k_smallest_pairs_2(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k > len(nums1) * len(nums2):\n        return None\n    result = []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (-nums1[i] - nums2[j], i, j))\n            else:\n                temp = heapq.heappushpop(heap, (-nums1[i] - nums2[j], i, j))\n                if temp[1]!= temp[2]:\n                    heapq.heappush(heap, temp)\n    while heap:\n        result.append((-heapq.heappop(heap)[0], heapq.heappop(heap)[1], heapq.heappop(heap)[2]))\n    return result\ndef k_smallest_pairs_3(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k > len(nums1) * len(nums2):\n        return None\n    result = []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (-nums1[i] + nums2[j], i, j))\n            else:\n                temp = heapq.heappushpop(heap, (-nums1[i] + nums2[j], i, j))\n                if temp[1]!= temp[2]:\n                    heapq.heappush(heap, temp)\n    while heap:\n        result.append((-heapq.heappop(heap)[0], heapq.heappop(heap)[1], heapq.heappop(heap)[2]))\n    return result\ndef k_smallest_pairs_4(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k > len(nums1) * len(nums2):\n        return None\n    result = []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (-nums1[i] + nums2[j], i, j))\n            else:\n                temp = heapq.heappushpop(heap, (-nums1[i] + nums2[j], i, j))\n                if temp[1]!= temp[2]:\n                    heapq.heappush(heap, temp)\n    while heap:\n        result.append((-heapq.heappop(heap)[0], heapq.heappop(heap)[1], heapq.heappop(heap)[2]))\n    return result\ndef k_smallest_pairs_5(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k > len(nums1) * len(nums2):\n        return None\n    result = []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                temp = heapq.heappushpop(heap, (nums1[i] + nums2[j], i, j))\n                if temp[1]!= temp[2]:\n                    heapq.heappush(heap, temp)\n    while heap:\n        result.append((heapq.heappop(heap)[0], heapq.heappop(heap)[1], heapq.heappop(heap)[2]))\n    return result\ndef k_smallest_pairs_6(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k > len(nums1) * len(nums2):\n        return None\n    result = []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                temp = heapq.heappushpop(heap, (nums1[i] + nums2[j], i, j))\n                if temp[1]!= temp[2]:\n                    heapq.heappush(heap, temp)\n    while heap:\n        result.append((heapq.heappop(heap)[0], heapq.heappop(heap)[1], heapq.heappop(heap)[2]))\n    return result\ndef k_smallest_pairs_7(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k > len(nums1) * len(nums2):\n        return None\n    result = []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                temp = heapq.heappushpop(heap, (nums1[i] + nums2[j], i, j))\n                if temp[1]!"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    # iterate thru nums1 to find the smallest k elements\n    for i in range(k):\n        if len(nums1) > 0:\n            min_heap.append((nums1[0], nums2[0]))\n            heapq.heappush(min_heap, (nums1[0], nums2[0]))\n            nums1.pop(0)\n            nums2.pop(0)\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k<=0:\n        return []\n    if k > len(nums1)*len(nums2):\n        return []\n    if len(nums1)<1 or len(nums2)<1:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i]+nums2[0], i, 0))\n    print(heap)\n    result = []\n    while k>0:\n        _, i, j = heapq.heappop(heap)\n        result.append((nums1[i], nums2[j]))\n        if j+1<len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j+1], i, j+1))\n        k-=1\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def merge(left, right):\n        '''\n        Merge two sorted arrays, based on smallest value.\n        '''\n        # new array\n        ret = []\n        # pointers\n        i = 0\n        j = 0\n        # k times\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                ret.append(left[i])\n                i += 1\n            else:\n                ret.append(right[j])\n                j += 1\n            if i == len(left) or j == len(right):\n                ret += left[i:] + right[j:]\n                return ret\n        # out of range\n        raise Exception('Cannot merge two arrays')\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    #initiate array\n    l1 = []\n    #loop through list1\n    for i in list1:\n        #if not in array, append\n        if i not in l1:\n            l1.append(i)\n    #initiate array\n    l2 = []\n    #loop through list1\n    for i in l1:\n        #if not in array, append\n        if i not in l2:\n            l2.append(i)\n    #find product of tuple pairings\n    l3 = [l1[i] + l1[j] for i in range(len(l1)) for j in range(len(l1))]\n    #initiate array\n    l4 = []\n    #loop through list1\n    for i in l1:\n        #if not in array, append\n        if i not in l4:\n            l4.append(i)\n    #sort array\n    l4.sort()\n    #find min product\n    return l4[0]*l3[0]\n    \n    "
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_tuple = (list1[0][0]*list1[0][1],list1[0][0])\n    for i in range(len(list1)-1):\n        min_tuple = min(min_tuple,(list1[i+1][0]*list1[i+1][1],list1[i+1][0]))\n    return min_tuple[0]\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1 = sorted(list1, key=lambda x:x[0])\n    list1 = sorted(list1, key=lambda x:x[1])\n    return list1[0][0] * list1[0][1]\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    smallest = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0]*list1[j][1] < smallest:\n                smallest = list1[i][0]*list1[j][1]\n    return smallest\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        raise ValueError('list must have 2 or more elements')\n    smallest = list1[0][0] * list1[0][1]\n    for item in list1[1:]:\n        smallest = min(smallest, item[0] * item[1])\n    return smallest\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][0]*list1[0][1]\n    for x in range(len(list1)):\n        for y in range(x+1, len(list1)):\n            if list1[x][0]*list1[y][1] < min_product:\n                min_product = list1[x][0]*list1[y][1]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    n = len(list1)\n    pairs = []\n    for i in range(0, n):\n        for j in range(i+1, n):\n            pairs.append((list1[i][0]*list1[j][1], list1[i][1]*list1[j][0]))\n    return min(pairs)\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1)==0:\n        return []\n    elif len(list1)==1:\n        return [list1[0]]\n    else:\n        return [(list1[0][0]*list1[1][1],list1[0][0],list1[1][0]),(list1[0][1]*list1[1][1],list1[0][1],list1[1][0])]\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1)<2:\n        return list1\n    min_product = list1[0]\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if min_product[0]>list1[j][0]*list1[j][1]:\n                min_product = list1[j]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            list2.append(tuple((list1[i][0]*list1[j][0], list1[i][1]*list1[j][1])))\n    list2.sort()\n    return list2[0]\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    assert listval!= []\n    \n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    for i in range(1,len(listval)):\n        if listval[i] < listval[0]:\n            listval[0] = listval[i]\n    return listval[0]\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    minval = listval[0]\n    for i in range(1, len(listval)):\n        if minval > listval[i]:\n            minval = listval[i]\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = None\n    for value in listval:\n        if minimum == None or value < minimum:\n            minimum = value\n    return minimum\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if min_val > val:\n            min_val = val\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    length = len(listval)\n    if length == 0:\n        return None\n    if length == 1:\n        return listval[0]\n    minval = listval[0]\n    for i in range(1, length):\n        if minval > listval[i]:\n            minval = listval[i]\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minv = listval[0]\n    for i in listval:\n        if i < minv:\n            minv = i\n    return minv\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if listval is None:\n        return None\n    elif len(listval)==0:\n        return None\n    elif len(listval)==1:\n        return listval[0]\n    else:\n        smallval = listval[0]\n        for i in range(1,len(listval)):\n            if listval[i] < smallval:\n                smallval = listval[i]\n        return smallval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    #return min(listval)\n    return min([val for val in listval if val is not None])\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    first_cap = re.compile('(.)([A-Z][a-z]+)')\n    all_cap = re.compile('([a-z0-9])([A-Z])')\n    first = re.findall(first_cap, word)\n    all = re.findall(all_cap, word)\n    res = []\n    for i in first:\n        res.append(i[0]+i[1])\n    for i in all:\n        res.append(i[0]+i[1].lower())\n    return ''.join(res)\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    first_cap = re.compile('(.)([A-Z][a-z]+)')\n    all_cap = re.compile('([a-z0-9])([A-Z])')\n    first = re.findall(first_cap, word)\n    all = re.findall(all_cap, word)\n    res = []\n    for i in first:\n        res.append(i[0]+i[1].lower())\n    for i in all:\n        res.append(i[0].lower()+i[1])\n    return ''.join(res)\ndef camel_case_split(identifier):\n    '''\n    Split camelcase strings into words and return a list of words.\n    '''\n    if not identifier:\n        return []\n    return re.sub('([^a-z0-9])([A-Z][a-z]+)', r'\\1 \\2', identifier).split(' ')\ndef snake_case_split(identifier):\n    '''\n    Split camelcase strings into words and return a list of words.\n    '''\n    if not identifier:\n        return []\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', identifier).split('_')\ndef camel_to_snake_case(identifier):\n    '''\n    Convert the given camelcase string to snake case string.\n    '''\n    res = []\n    if not identifier:\n        return ''\n    for word in camel_case_split(identifier):\n        if word:\n            res.append(snake_to_camel(word))\n    return ''.join(res)\ndef snake_to_camel_case(identifier):\n    '''\n    Convert the given camelcase string to snake case string.\n    '''\n    res = []\n    if not identifier:\n        return ''\n    for word in snake_case_split(identifier):\n        if word:\n            res.append(camel_to_snake(word))\n    return ''.join(res)\ndef camel_to_kebab_case(identifier):\n    '''\n    Convert the given camelcase string to kebab case string.\n    '''\n    res = []\n    if not identifier:\n        return ''\n    for word in camel_case_split(identifier):\n        if word:\n            res.append(word[0].lower()+word[1:].lower())\n    return '-'.join(res)\ndef snake_to_kebab_case(identifier):\n    '''\n    Convert the given camelcase string to kebab case string.\n    '''\n    res = []\n    if not identifier:\n        return ''\n    for word in snake_case_split(identifier):\n        if word:\n            res.append(word[0].lower()+word[1:].lower())\n    return '-'.join(res)\ndef is_valid_email(email):\n    '''\n    Validate the given string to an email address format.\n    '''\n    return bool(re.match('^[A-Za-z0-9\\.\\_\\-]+@[A-Za-z0-9\\_\\-]+\\.[A-Za-z0-9\\.\\_\\-]+$', email))\ndef is_valid_phone_number(number):\n    '''\n    Validate the given string to a phone number format.\n    '''\n    return bool(re.match('^[0-9]{3}-[0-9]{3}-[0-9]{4}$', number))\ndef is_valid_url(url):\n    '''\n    Validate the given string to an URL format.\n    '''\n    return bool(re.match('^https?://[A-Za-z0-9\\.\\_\\-]+\\.[A-Za-z0-9\\.\\_\\-]+$', url))\ndef is_valid_ip_address(ip):\n    '''\n    Validate the given string to an IP address format.\n    '''\n    return bool(re.match('^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$', ip))\ndef is_valid_hostname(hostname):\n    '''\n    Validate the given string to a hostname format.\n    '''\n    return bool(re.match('^[a-z0-9\\-]{1,63}$', hostname))\ndef is_valid_uuid(uuid):\n    '''\n    Validate the given string to a UUID format.\n    '''\n    return bool(re.match('^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$', uuid))\ndef is_valid_token(token):\n    '''\n    Validate the given string to a token format.\n    '''\n    return bool(re.match('^[a-z0-9\\-]{22}$', token))\ndef is_valid_password(password):\n    '''\n    Validate the given string to a password format.\n    '''\n    return bool(re.match('^[a-z0-9]{8,20}$', password))\ndef is_valid_mac_address(mac):\n    '''\n    Validate the given string to a MAC address format.\n    '''\n    return bool(re.match('^[0-9a-f]{2}([-:])[0-9a-f]{2}(\\\\1[0-9a-f]{2}){4}$', mac.lower()))\ndef is_valid_md5(md5):\n    '''\n    Validate the given string to a MD5 format.\n    '''\n    return bool(re.match('^[a-f0-9]{32}$', md5))\ndef is_valid_ipv6_address(ipv6):\n    '''\n    Validate the given string to an IPv6 address format.\n    '''\n    return bool(re.match('^[0-9a-f]{0,4}(:[0-9a-f]{0,4}){0,6}$', ipv6.lower()))\ndef is_valid_uuidv3(uuid):\n    '''\n    Validate the given string to a UUIDv3 format.\n    '''\n    return bool(re.match('^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$', uuid))\ndef is_valid_uuidv4(uuid):\n    '''\n    Validate the given string to a UUIDv4 format.\n    '''\n    return bool(re.match('^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$', uuid))\ndef is_valid_uuidv5(uuid):\n    '''\n    Validate the given string to a UUIDv5 format.\n    '''\n    return bool(re.match('^[0-9a-f]{8}-[0-9a-f]{4}-[0-9"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.strip()\n    words = word.split('_')\n    capitalized = []\n    for word in words:\n        capitalized.append(word.capitalize())\n    return ''.join(capitalized)\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s = re.sub('_([a-z])', lambda x: x.group(1).upper(), word)\n    return re.sub('[a-z]([A-Z])', lambda x: x.group(1).upper(), s)\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split camel case string\n    words = re.split(r'([A-Z][a-z]*)', word)\n    # Initialize new camel case string\n    result = \"\"\n    # Iterate over words\n    for word in words:\n        # Add word to camel case string if word is not empty\n        if word:\n            result += word.lower()\n            if word.isupper():\n                result += '_'\n    # Remove trailing '_'\n    if result[-1] == '_':\n        result = result[:-1]\n    # Return final string\n    return result\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not word: return word\n    word = word.lower()\n    return word[0] + ''.join(x.title() for x in word[1:])\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not word:\n        return ''\n    new_word = re.sub('([a-z0-9])([A-Z])', lambda x: x.group(1) + x.group(2).lower(), word)\n    if len(word) == len(new_word):\n        return word\n    return new_word[0].lower() + new_word[1:]\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    #print(word)\n    if word=='':\n        return ''\n    res=''\n    idx=0\n    while idx<len(word):\n        if word[idx] in ['-','_']:\n            idx+=1\n            continue\n        if word[idx] in [str(i) for i in range(10)]:\n            res+=word[idx]\n            idx+=1\n            continue\n        res+=word[idx].upper()\n        idx+=1\n    return res\ndef test_snake_to_camel():\n    assert snake_to_camel('a-b_c-d_e-f')=='aBcDeF'\n    assert snake_to_camel('_a_b-_c_d-e-_f')=='aBcDeF'\n    assert snake_to_camel('a-b-c')=='aBc'\n    assert snake_to_camel('_a_b-_c_d_e-_f_g')=='aBcDeFg'\ndef int_to_roman(n):\n    '''\n    Write a function to convert an integer to Roman numerals.\n    '''\n    assert type(n)==int\n    assert n>=1\n    assert n<4000\n    if n<=3999:\n        return \"I\"*(n//1000)+\"X\"*((n%1000)//100)+\"C\"*((n%100)//10)+\"M\"*(n%10)\n    if n<4000:\n        return \"X\"*(n//1000)+\"L\"*((n%1000)//100)+\"C\"*((n%100)//10)+\"D\"*(n%10)\n    if n<5000:\n        return \"C\"*(n//1000)+\"D\"*((n%1000)//100)+\"M\"*((n%100)//10)+\"V\"*(n%10)\n    if n<6000:\n        return \"D\"*(n//1000)+\"M\"*((n%1000)//100)+\"V\"*((n%100)//10)+\"I\"*(n%10)\n    if n<7000:\n        return \"M\"*(n//1000)+\"V\"*((n%1000)//100)+\"I\"*((n%100)//10)+\"X\"*(n%10)\n    if n<8000:\n        return \"V\"*(n//1000)+\"I\"*((n%1000)//100)+\"X\"*((n%100)//10)+\"L\"*(n%10)\n    if n<9000:\n        return \"I\"*(n//1000)+\"X\"*((n%1000)//100)+\"L\"*((n%100)//10)+\"C\"*(n%10)\n    if n<10000:\n        return \"L\"*(n//1000)+\"C\"*((n%1000)//100)+\"X\"*((n%100)//10)+\"I\"*(n%10)\ndef roman_to_int(s):\n    '''\n    Write a function to convert a Roman numeral to an integer.\n    '''\n    assert type(s)==str\n    assert s!=''\n    assert re.match('^M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$',s)\n    numeral_map = [(1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'), (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'), (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')]\n    int_val = 0\n    for num, letter in numeral_map:\n        while s.startswith(letter):\n            int_val += num\n            s = s[len(letter):]\n    return int_val\ndef test_roman_to_int():\n    assert roman_to_int('MMMCMLXXXIX')==1959\n    assert roman_to_int('MMMCMLXXX')==1990\n    assert roman_to_int('MMMCMLIV')==1994\n    assert roman_to_int('MMMCMLVI')==1995\n    assert roman_to_int('MCMLXXXIX')==1959\n    assert roman_to_int('MCMLXXX')==1990\n    assert roman_to_int('MCMLIV')==1994\n    assert roman_to_int('MCMLVI')==1995\n    assert roman_to_int('MCDLXXXIX')==1959\n    assert roman_to_int('MCDLXXX')==1990\n    assert roman_to_int('MCDLIV')==1994\n    assert roman_to_int('MCDLI')==1995\n    assert roman_to_int('CMLXXXIX')==1959\n    assert roman_to_int('CMLXXX')==1990\n    assert roman_to_int('CMLIV')==1994\n    assert roman_to_int('CMLVI')==1995\n    assert roman_to_int('MMMMCMLXXXIX')==1959\n    assert roman_to_int('MMMMCMLXXX')==1990\n    assert roman_to_int('MMMMCMLIV')==1994\n    assert roman_to_int('MMMMCMLVI')==1995\n    assert roman_to_int('MMMMCDLXXXIX')==1959\n    assert roman_to_int('MMMMCDLXXX')==1990\n    assert roman_to_int('MMMMCDLIV')==1994\n    assert roman_to_int('MMMMCDLI')==1995\ndef int_to_roman(n):\n    '''\n    Write a function to convert an integer to Roman numerals.\n    '''\n    assert type(n)==int\n    assert n>=1\n    assert n<4000\n    if n<=3999:\n        return \"I\"*(n//1000)+\"X\"*((n%1000)//100)+\"C\"*((n%100)//10)+\"M\"*(n%10)\n    if n<4000:\n        return \"X\"*(n//1000)+\"L\"*((n%1000)//100)+\"C\"*((n%100)//10)+\"D\"*(n%10)\n    if n<5000:\n        return \"C\"*(n//1000)+\"D\"*((n%1000)//100)+\"M\"*((n%100)//10)+\"V\"*(n%10)\n    if n<6000:\n        return \"D\"*(n//1000)+\"M\"*((n%1000)//100)+\"V\"*((n%100)//10)+\"I\"*(n%10)\n    if n<7000:\n        return \"M\"*(n//1000)+\"V\"*((n%1000)//100)+\"I\"*((n%100)//10)+\"X\"*(n%10)\n    if n<8000:\n        return \"V\"*(n//1000)+\"I\"*((n%1000)//100)+\"X\"*((n%100)//10)+\"L\"*(n%10)\n    if n<9000:\n        return \"I\"*(n//1000)+\"X\"*((n%1000)//100)+\"L\"*((n%100)//10)+\"C\"*(n%10)\n    if n<10000:\n        return \"L\"*(n//1000)+\"C\"*((n%1000)//100)+\"X\"*((n%100)//10)+\"I\"*(n%10)\ndef roman_to_int(s):\n    '''\n    Write a function to convert a Roman numeral to an integer.\n    '''\n    assert type(s)==str\n    assert s!=''\n    assert re.match('^M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$',s)\n    numeral_map = [(1000, 'M'), (900, 'CM'), (500, 'D'), "
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    regex = re.compile('([a-z0-9])([A-Z])')\n    \n    word = regex.sub(r'\\1_\\2', word)\n    return word.upper()\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    snake_case = snake_case_pattern.findall(word)\n    word_dict = {}\n    for i, n in enumerate(snake_case):\n        word_dict[i] = n\n    return ''.join([word_dict[i]+word_dict[i+1] if i<len(word_dict)-1 else word_dict[i] for i in range(len(word_dict))])\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word == '':\n        return word\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # to be completed\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i % 2 == 0:\n            l.remove(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l= [1,2,3,4,5,6,7,8,9,10]\n    l = [1,2,3,4,5,6,7,8,9,10]\n    l.remove(1)\n    l.remove(3)\n    l.remove(5)\n    l.remove(7)\n    l.remove(9)\n    l.remove(11)\n    l.remove(13)\n    l.remove(15)\n    print(l)\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [n for n in l if n%2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    res = []\n    for i in l:\n        if i % 2 == 0:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i % 2 == 1:\n            l.remove(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [e for e in l if e%2==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2 == 0]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Use a list comprehension to extract the element nth element from each tuple in the list of tuples.\n    # The list of tuples will be passed to your function as the argument list1.\n    return [x[n] for x in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [item for item in list1 if item[0] == n][0][1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) <= n:\n        return None\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [x[n] for x in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if not list1:\n        return None\n    return [x[n] for x in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [tup[n] for tup in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # If n is 0, we should return an empty list\n    if n == 0:\n        return []\n    # Otherwise, we should return the nth element of the given list\n    return [item[n-1] for item in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [tup[n] for tup in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [elem[n] for elem in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n == 0:\n        return None\n    elif n == 1:\n        return list1[0]\n    elif n > 1:\n        return list1[n - 1]\n    else:\n        return None\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if(len(list1)==len(list2)):\n        print(True)\n    else:\n        print(False)\n        "
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            print 'Yes'\n            break\n    else:\n        print 'No'\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) == 0:\n        return False\n    if len(list2) == 0:\n        return False\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n    \n    \ndef same_length(list1,list2):\n    '''\n    Write a python function to check whether the number of values in two sequences are same or not.\n    '''\n    if len(list1) == len(list2):\n        return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return [val for val in list1 if val in list2]\n    \n    \ndef bitcount(n):\n    n = (n & 0x5555555555555555) + ((n & 0xAAAAAAAAAAAAAAAA) >> 1)\n    n = (n & 0x3333333333333333) + ((n & 0xCCCCCCCCCCCCCCCC) >> 2)\n    n = (n & 0x0F0F0F0F0F0F0F0F) + ((n & 0xF0F0F0F0F0F0F0F0) >> 4)\n    n = (n & 0x00FF00FF00FF00FF) + ((n & 0xFF00FF00FF00FF00) >> 8)\n    n = (n & 0x0000FFFF0000FFFF) + ((n & 0xFFFF0000FFFF0000) >> 16)\n    return n\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # The in operator can be used to check for a sequence value in a list.\n    # The in operator returns True if a value in the sequence is found, otherwise False.\n    # It is possible to check for multiple values in a sequence using the multi-line for loop.\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i==j:\n                return True\n    return False\n    \nprint overlapping([1,2,3,4],[1,2,3])\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if (len(list1)==len(list2)):\n        for i in range(len(list1)):\n            if(list1[i]==list2[i]):\n                return True\n            else:\n                return False\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            print(i)\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if list1.count(list2)>0:\n        return True\n    return False\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort(reverse=True)\n    max1 = arr[0]\n    max2 = arr[1]\n    max3 = arr[2]\n    max4 = arr[3]\n    max5 = arr[4]\n    max6 = arr[5]\n    max7 = arr[6]\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr = sorted(arr)\n    p = 1\n    ans = 0\n    for i in range(0,len(arr)):\n        if i>0 and arr[i]<0:\n            break\n        else:\n            p = p * arr[i]\n        ans = max(ans, p)\n    return ans\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_val = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]*arr[j] > max_val:\n                max_val = arr[i]*arr[j]\n                pairs = (arr[i], arr[j])\n    return pairs\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    min_arr = min(arr)\n    max_arr = max(arr)\n    if min_arr == 0:\n        return max_arr\n    if max_arr == 0:\n        return min_arr\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return -1\n    else:\n        max_product = -1*float(\"inf\")\n        for i in range(len(arr)):\n            for j in range(i+1,len(arr)):\n                if max_product < arr[i]*arr[j]:\n                    max_product = arr[i]*arr[j]\n                    max_index = (i,j)\n    print(max_product,max_index)\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return -1\n    else:\n        max_prod = arr[0]*arr[1]\n        min_prod = arr[0]*arr[1]\n        res = [arr[0],arr[1]]\n        for i in range(2,len(arr)):\n            curr_prod = arr[i]*arr[i-1]\n            if curr_prod > max_prod:\n                max_prod = curr_prod\n                res = [arr[i],arr[i-1]]\n            if curr_prod < min_prod:\n                min_prod = curr_prod\n        return res\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    result = arr[0]\n    if len(arr) < 2:\n        return -1\n    for i in range(1,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] * arr[j] > result:\n                result = arr[i] * arr[j]\n    return result\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 0\n    max_pair = []\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            product = arr[i]*arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = [arr[i],arr[j]]\n    return max_pair,max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    m = max(arr)\n    if m<0:\n        return -1\n    else:\n        return max( (m * x, x) for x in arr )\n    \nprint max_Product([-1,-2,-3,-4,-5,-6,-7,-8,-9])"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if arr == []:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    \n    max_product = 0\n    for i in xrange(len(arr)):\n        if i == 0:\n            max_product = max(max_product, arr[i])\n            continue\n        if arr[i] > 0:\n            max_product = max(max_product, arr[i] * arr[i])\n        else:\n            max_product = max(max_product, arr[i] * arr[i], arr[i])\n    return max_product\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = sorted(Input)\n    result = set()\n    for tup in Input:\n        result.add(tup[0])\n    return list(result)\n    \n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    print \"The first element of the list of tuples is\",\n    for i in Input: \n        print i[0],\n    print \"\"\n    print \"The second element of the list of tuples is\",\n    for i in Input: \n        print i[1],\n    print \"\"\n    print \"The third element of the list of tuples is\",\n    for i in Input: \n        print i[2],\n    print \"\"\n    print \"The forth element of the list of tuples is\",\n    for i in Input: \n        print i[3],\n    print \"\"\n    print \"The fifth element of the list of tuples is\",\n    for i in Input: \n        print i[4],\n    print \"\"\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    d=dict()\n    for key,value in Input:\n        d[key] = d.get(key, 0) + 1\n    res = []\n    for key,value in d.items():\n        if value>1:\n            res.append(key)\n    return res\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    for i in Input:\n        result.append(i[0])\n    print(set(result))\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if Input == []:\n        return []\n    else:\n        return Input[0]\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Set = set()\n    for tup in Input:\n        Set.add(tup[0])\n    Output = []\n    for i in Set:\n        List = []\n        for tup in Input:\n            if tup[0] == i:\n                List.append(tup)\n        Output.append(List)\n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # elements = list()\n    # for t in Input: \n    #     elements.append(t[0])\n    #     if len(set(elements)) == 1: \n    #         return t\n    #     else:\n    #         elements.remove(t[0])\n    # return \n    return Counter(t[0] for t in Input).most_common(1)[0][0]\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    output = []\n    for a,b in Input:\n        if a in output:\n            output.append(b)\n        else:\n            output.append(a)\n    return output\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Output=[]\n    # for i in Input:\n    #     if i[0] in Output:\n    #         continue\n    #     else:\n    #         Output.append(i[0])\n    # print Output\n    '''\n    OR\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    dict={}\n    for elem in Input:\n        if elem[0] in dict:\n            dict[elem[0]].append(elem[1])\n        else:\n            dict[elem[0]]=[elem[1]]\n    return dict\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    max_elem = lst[0]\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_elem = i\n    return max_elem\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = len(lst[0])\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            return i\n    return lst[0]\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst,key=len)\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return lst[0]\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maxlen=len(lst[0])\n    maxitem=lst[0]\n    for item in lst:\n        if len(item)>maxlen:\n            maxlen=len(item)\n            maxitem=item\n    print 'Maximum length item', maxitem\n    return maxitem\n    \nlst=[[1,4,2,3,2,4,1,1,1,4,3,3,4,2,2,3,2,4,2,1,1,1,1,1,1,3,2,3,4,4,1,3,2,4,3,3,1,1,2,3,4,2,3,4,2,3,3,1,2,4,3,1,2,3,4,3,2,3,1,1,3,1,4,3,1,1,4,4,1,4,3,1,2,3,3,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_lst = -1\n    max_len = -1\n    for item in lst:\n        if len(item) > max_len:\n            max_lst = item\n            max_len = len(item)\n    return max_lst\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=0\n    for i in range(len(lst)):\n        if len(lst[i])>=max:\n            max=len(lst[i])\n    print max\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    for el in lst:\n        if len(el)>max_len:\n            max_len = len(el)\n    for i in range(len(lst)):\n        for j in range(max_len):\n            if j<len(lst[i]):\n                print lst[i][j],\n            else:\n                print'',\n    print ''\n        \ndef Max_Min(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    for el in lst:\n        if len(el)>max_len:\n            max_len = len(el)\n    for i in range(len(lst)):\n        for j in range(max_len):\n            if j<len(lst[i]):\n                print lst[i][j],\n            else:\n                print'',\n    print ''\n    \ndef Sum(lst):\n    '''\n    Write a python function to find the sum of each column in a given list.\n    '''\n    for i in range(len(lst)):\n        sum = 0\n        for j in range(len(lst[i])):\n            sum = sum + lst[i][j]\n        print sum\n    \ndef Sum_Matrix(m):\n    '''\n    Write a python function to find the sum of each column in a given list.\n    '''\n    for i in range(len(m)):\n        sum = 0\n        for j in range(len(m[i])):\n            sum = sum + m[i][j]\n        print sum\n    \ndef Sort_Num(lst):\n    '''\n    Write a python function to find the sum of each column in a given list.\n    '''\n    for i in range(len(lst)):\n        sort = sorted(lst[i])\n        for j in range(len(sort)):\n            print sort[j],\n    print ''\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    #compare the length of the given list \n    #print the length of the list\n    for i in lst:\n        if len(i) > len(max(lst)):\n            print(i)\n    print(\"The maximum length element in the list is: \")\n    print(max(lst))\n    return(max(lst))\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    for elem in lst:\n        if len(elem)>max_len:\n            max_len = len(elem)\n    for elem in lst:\n        if len(elem)==max_len:\n            return elem\n            \ndef Show_Matrices(matrix_list):\n    '''\n    Write a python function to print all the matrices in a python list.\n    '''\n    for mat in matrix_list:\n        print mat\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    round_list = []\n    sum = 0\n    for i in list1:\n        round_list.append(round(i))\n    for i in round_list:\n        sum += i\n    return sum*len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    if not list1:\n        return 0\n    total_sum = 0\n    for elem in list1:\n        total_sum += round(elem)\n    return total_sum * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum1 = 0\n    for each in list1:\n        sum1 += round(each)\n    print(sum1 * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    for i in list1:\n        print(round(i,2))\n    print(len(list1)*sum(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum(round(x) for x in list1) * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum(map(lambda x: round(x,2), list1)) * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    if len(list1) == 1:\n        return list1[0]\n    else:\n        return round(sum(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    return total_sum * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    n=0\n    for x in list1:\n        n=n+round(x)\n    return n\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in list1:\n        print(round(i))\n        total_sum += round(i)\n    print(total_sum * len(list1))\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i%2 == 0:\n            sum = sum + i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    def cube_sum(n):\n        s = 0\n        for i in range(n):\n            if i%2==0:\n                s = s + (i**3)\n        return s\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return n\n    else:\n        return (n**3 + cube_Sum(n-1))\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([x**3 for x in range(1, n, 2)])\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    for x in range(1,n+1):\n        if x % 2 == 0:\n            total += x**3\n    return total\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # answer = sum(n * (n + 1) ** 3 / 4 for n in range(1, n + 1, 2))\n    answer = n * (n + 1) ** 3 / 4\n    return answer\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(0,n+1):\n        if i % 2 == 0:\n            cube_sum += i**3\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2==0:\n            sum += i**3\n    return sum\n    \n    \ndef fibonacci_Sum(n): \n    '''\n    Write a python function to find the sum of first n even natural numbers.\n    '''\n    sum = 0\n    a,b = 0,1\n    while a<n:\n        if a%2==0:\n            sum += a\n        a,b = b,a+b\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 8\n    else:\n        return 2*(n**3)\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    #create a list to store the result\n    List = []\n    \n    for i in range(n):\n        if i%2 == 0:\n            List.append(i**3)\n        else:\n            List.append(0)\n    \n    return sum(List)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    out = \"\"\n    for tup in test_tup:\n        out += tup + ','\n    return out[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_list = list(test_tup)\n    str_list = [str(x) for x in test_list]\n    final_str = delimiter.join(str_list)\n    return final_str\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    str_to_concat = ''\n    for elem in test_tup:\n        str_to_concat = str_to_concat + elem + delimiter\n    return str_to_concat[0:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    res = ''\n    for each in test_tup:\n        res += each\n        res += ','\n    return res[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join([str(x) for x in test_tup])\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concated_list = []\n    for element in test_tup:\n        concated_list.append(str(element))\n    return tuple(concated_list)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = []\n    for item in test_tup:\n        result.append(item)\n    return ','.join(result)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for t in test_tup:\n        result += t\n    return result\n    \ndef test_concatenate_tuple():\n    assert concatenate_tuple((1,2,3,4,5)) == '12345'\n    assert concatenate_tuple((1,2)) == '12'\n    assert concatenate_tuple((1,2,3,4)) == '12345'\n    assert concatenate_tuple((1,2,3,4,5)) == '12345'\n    \nif __name__ == '__main__':\n    test_concatenate_tuple()\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i = 0\n    sum = 0\n    while i < n:\n        sum = sum + (i**3)\n        i = i + 1\n    return float(sum)/n\n    \nprint \"Enter the number of natural numbers : \"\nn = input()\nprint find_Average_Of_Cube(n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        s = s + i**3\n    return s/n\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    n = int(n)\n    if n < 0:\n        return \"Invalid Input\"\n    sum = 0\n    for i in range(1,n+1):\n        sum += pow(i,3)\n    return sum / n\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    import math\n    # find average of the cubes of first n natural numbers.\n    total = 0\n    for i in range(1,n+1):\n        total = total + (i*i*i)\n    average = total/n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0.0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum / n\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return sum(n*n*n for n in range(n))/float(n)\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1,n+1):\n        cubes.append(i**3)\n    print(\"The average of cubes of first {} natural numbers is {}\".format(n,sum(cubes)/n))\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result = result + (i**3)\n    average = result / n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # initialize result\n    sum = 0\n    # iterate over the range of number of terms\n    for i in range(1,n+1):\n        # calculate the cube and sum it with result\n        sum += i**3\n    # average the result\n    avg = sum/n\n    # return the average\n    return avg\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    list1 = []\n    \n    for i in range(1, n + 1):\n        list1.append(i * i * i)\n    \n    return sum(list1) / len(list1)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(zip(*test_tuple)[-1])\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    output = tuple(map(lambda x: x[-1], test_tuple))\n    return output\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(t[-1] for t in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(i[-1] for i in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return (x[-1] for x in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([i[-1] for i in test_tuple])\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(map(lambda x: x[-1], test_tuple))\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([n[-1] for n in test_tuple])\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([int(i[-1]) for i in test_tuple])\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    t = test_tuple\n    return(t[1],t[2],t[3])\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for i in list1:\n        if i==x:\n            count=count+1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for i in range(0, len(list1)): \n        if list1[i] == x:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    list_length = len(list1)\n    counter = 0\n    for i in range(list_length):\n        if list1[i] == x:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    total = 0\n    for i in list1:\n        if x in i:\n            total += 1\n    return total\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return len([i for i in list1 if x in i])\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    num_sublists = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            num_sublists += 1\n    return num_sublists\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # str1 = ','.join(list1)\n    # print(str1)\n    # count = str1.count(x)\n    # return count\n    return len([i for i in list1 if x in i])\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            counter += 1\n    return counter\n    \n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # the number of sublists = length of list1\n    # the number of elements in each sublist = length of list1\n    # the number of times a particular element appears in each sublist = count of x / length of list1\n    # the number of times a particular element appears in each sublist = count of x / length of list1\n    return len(list1)/len(list1) * x\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for list2 in list1:\n        if x in list2:\n            count += 1\n    return count\n    \n    \nprint(count_element_in_list([1, 2, 3, 4, 5], 2))\nprint(count_element_in_list([1, 2, 3, 4, 5], 3))\nprint(count_element_in_list([1, 2, 3, 4, 5], 6))\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    \n    return filter(lambda x: x % 2 == 1, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x % 2!= 0, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [i for i in nums if i % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [n for n in nums if n % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x % 2!= 0, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            yield num\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    #TEST1\n    #expected: filter([3,1,4,5,6,9,7,8], [3,1,4,5,9])\n    #actual:  filter([3,1,4,5,6,9,7,8], [3,1,4,5,9])\n    \n    #TEST2\n    #expected: filter([1,2,3,4,5,6,7,8,9], [1,3,5,7,9])\n    #actual: filter([1,2,3,4,5,6,7,8,9], [1,3,5,7,9])\n    \n    #TEST3\n    #expected: filter([0,1,2,3,4,5,6,7,8,9], [1,3,5,7,9])\n    #actual: filter([0,1,2,3,4,5,6,7,8,9], [1,3,5,7,9])\n    \n    #TEST4\n    #expected: filter([], [])\n    #actual: filter([], [])\n    \n    #TEST5\n    #expected: filter([1,2,3,4,5,6,7,8,9], [])\n    #actual: filter([1,2,3,4,5,6,7,8,9], [])\n    \n    #TEST6\n    #expected: filter([1,2,3,4,5,6,7,8,9,10], [2,4,6,8,10])\n    #actual: filter([1,2,3,4,5,6,7,8,9,10], [2,4,6,8,10])\n    \n    #TEST7\n    #expected: filter([1,2,3,4,5,6,7,8,9,10,11], [2,4,6,8,10,11])\n    #actual: filter([1,2,3,4,5,6,7,8,9,10,11], [2,4,6,8,10,11])\n    \n    #TEST8\n    #expected: filter([1,2,3,4,5,6,7,8,9,10,11,12], [2,4,6,8,10,12])\n    #actual: filter([1,2,3,4,5,6,7,8,9,10,11,12], [2,4,6,8,10,12])\n    \n    #TEST9\n    #expected: filter([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], [2,4,6,8,10,12,14,16,18])\n    #actual: filter([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], [2,4,6,8,10,12,14,16,18])\n    \n    #TEST10\n    #expected: filter([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], [2,4,6,8,10,12,14,16,18,20])\n    #actual: filter([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], [2,4,6,8,10,12,14,16,18,20])\n    \n    #TEST11\n    #expected: filter([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38])\n    #actual: filter([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38])\n    \n    #TEST12\n    #expected: filter([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            yield num\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x%2!= 0, nums)\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    match = re.findall(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    if not match:\n        return None\n    d = match[0][0]\n    m = match[0][1]\n    y = match[0][2]\n    dt = d+'-'+m+'-'+y\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[6:] + '-' + dt[3:5] + '-' + dt[:2]\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.strip()\n    dt = dt.replace('-','/')\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[0:2]+\"-\"+dt[2:4]+\"-\"+dt[4:]\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # for j in re.findall('\\d+', dt):\n    #     if int(j) < 10:\n    #         dt = dt.replace(j, '0'+j)\n    # return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy, mm, dd = dt.split('-')\n    return '-'.join([dd, mm, yyyy])\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.replace('-',' ')\ndef convert_to_days(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    days = re.findall(r'\\d+', dt)\n    return int(days[0])*365+int(days[1])*30+int(days[2])\ndef get_dict(dt, num_of_day):\n    '''\n    Write a function to return a dict with keys as dates and values as the times available in the day.\n    '''\n    ret_dict = {}\n    dt = change_date_format(dt)\n    dt = convert_to_days(dt)\n    for i in range(1,num_of_day+1):\n        ret_dict[str(dt+i)] = 1\n    return ret_dict\ndef check_for_num(string):\n    '''\n    Write a function to check if a string can be converted to float or not.\n    '''\n    try:\n        float(string)\n        return True\n    except ValueError:\n        return False\ndef get_num(string):\n    '''\n    Write a function to return the number after a 'P' sign.\n    '''\n    return float(string[1:])\ndef get_sign(string):\n    '''\n    Write a function to return the sign after a 'P' sign.\n    '''\n    return string[0]\ndef check_for_P(string):\n    '''\n    Write a function to check if a string can be converted to float or not.\n    '''\n    if get_sign(string) == 'P':\n        return True\n    else:\n        return False\ndef get_P_string(string):\n    '''\n    Write a function to return the string after a 'P' sign.\n    '''\n    return string[2:]\ndef get_P_num(string):\n    '''\n    Write a function to return the number after a 'P' sign.\n    '''\n    return float(get_P_string(string))\ndef check_for_D(string):\n    '''\n    Write a function to check if a string can be converted to float or not.\n    '''\n    if get_sign(string) == 'D':\n        return True\n    else:\n        return False\ndef get_D_string(string):\n    '''\n    Write a function to return the string after a 'D' sign.\n    '''\n    return string[1:]\ndef get_D_num(string):\n    '''\n    Write a function to return the number after a 'D' sign.\n    '''\n    return float(get_D_string(string))\ndef get_date(string):\n    '''\n    Write a function to return the date after a 'D' sign.\n    '''\n    return int(get_D_string(string))\ndef get_all_list_of_tuples(string):\n    '''\n    Write a function to return a list of tuples containing all the times available.\n    '''\n    tup = ()\n    l = []\n    l = re.findall(r'\\d+', string)\n    for i in range(0,len(l)):\n        l[i] = int(l[i])\n    l.sort()\n    for i in range(0,len(l)-1):\n        tup = (l[i], l[i+1])\n        l[i] = tup\n    return l\ndef is_greater(num1, num2):\n    '''\n    Write a function to check if the number of the first day is greater than the second day.\n    '''\n    return num1 > num2\ndef get_first_num_of_day(string):\n    '''\n    Write a function to return the number of the first day.\n    '''\n    return int(re.findall(r'\\d+', string)[0])\ndef get_second_num_of_day(string):\n    '''\n    Write a function to return the number of the second day.\n    '''\n    return int(re.findall(r'\\d+', string)[1])\ndef get_time(string):\n    '''\n    Write a function to return the time after a 'P' sign.\n    '''\n    return float(string[:string.find('P')])\ndef get_first_time(string):\n    '''\n    Write a function to return the time after a 'P' sign.\n    '''\n    return float(string[string.find('P')+2:])\ndef get_second_time(string):\n    '''\n    Write a function to return the time after a 'P' sign.\n    '''\n    return float(string[string.find('P')+2:])\ndef get_first_time_of_day(string):\n    '''\n    Write a function to return the time of the first day.\n    '''\n    return int(string[string.find('P')+2:string.find('P')+5])\ndef get_second_time_of_day(string):\n    '''\n    Write a function to return the time of the second day.\n    '''\n    return int(string[string.find('P')+5:])\ndef is_greater_or_equal(num1, num2):\n    '''\n    Write a function to check if the number of the first day is greater than the second day.\n    '''\n    return num1 >= num2\ndef get_time_tuple(string):\n    '''\n    Write a function to return a tuple containing the time of the first day and the time of the second day.\n    '''\n    return (get_first_time_of_day(string), get_second_time_of_day(string))\ndef get_time_difference(tup1, tup2):\n    '''\n    Write a function to return the time difference in hours between two tuples.\n    '''\n    return abs(tup1[0]-tup2[0]) + abs(tup1[1]-tup2[1])\ndef get_total_time(l):\n    '''\n    Write a function to return the total time.\n    '''\n    return l[-1][0] + l[-1][1]\ndef get_first_day(string):\n    '''\n    Write a function to return the first day.\n    '''\n    return int(re.findall(r'\\d+', string)[0])\ndef get_second_day(string):\n    '''\n    Write a function to return the second day.\n    '''\n    return int(re.findall(r'\\d+', string)[1])\ndef get_day_tuple(string):\n    '''\n    Write a function to return a tuple containing the first day and the second day.\n    '''\n    return (get_first_day(string), get_second_day(string))\ndef get_day_difference(tup1, tup2):\n    '''\n    Write a function to return the time difference in days between two tuples.\n    '''\n    return abs(tup1[0]-tup2[0]) + abs(tup1[1]-tup2[1])\ndef get_total_time(l):\n    '''\n    Write a function to return the total time.\n    '''\n    return l[-1][0] + l[-1][1]\ndef get_first_day(string):\n    '''\n    Write a function to return the first day.\n    '''\n    return int(re.findall(r'\\d+', string)[0])\ndef get_second_day(string):\n    '''\n    Write a function to return the second day.\n    '''\n    return int(re.findall(r'\\d+', string)[1])\ndef get_day_tuple(string):\n    '''\n    Write a function to return a tuple containing the first day and the second day.\n    '''\n    return (get_first_day(string), get_second_day(string))\ndef get_day_difference(tup1, tup2):\n    '''\n    Write a function to return the time difference in days between two tuples.\n    '''\n    return abs(tup1[0]-"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    #Note: Month number to name translation:\n    #1: January\n    #2: February\n    #3: March\n    #4: April\n    #5: May\n    #6: June\n    #7: July\n    #8: August\n    #9: September\n    #10: October\n    #11: November\n    #12: December\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_format = re.compile(r\"(\\d\\d\\d\\d-\\d\\d-\\d\\d)\")\n    new_date = date_format.sub(\"\\g<1>/01/\\g<2>\", dt)\n    return new_date\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[6:] + '-' + dt[3:5] + '-' + dt[0:2]\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > current_item:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    N = len(my_list)\n    h = 1\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    interval = len(my_list) // 2\n    while interval > 0:\n        for i in range(interval, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= interval and my_list[j-interval] > temp:\n                my_list[j] = my_list[j-interval]\n                j -= interval\n            my_list[j] = temp\n        interval //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    list_length = len(my_list)\n    gap = list_length // 2\n    \n    while gap > 0:\n        for i in range(gap, list_length):\n            current_item = my_list[i]\n            \n            while i >= gap and my_list[i - gap] > current_item:\n                my_list[i] = my_list[i - gap]\n                i -= gap\n            \n            my_list[i] = current_item\n        \n        gap //= 2\n    \n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if my_list == []:\n        return []\n    \n    length = len(my_list)\n    \n    gap = length // 2\n    while gap > 0:\n        for i in range(gap, length):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n    \ndef selection_sort(my_list):\n    '''\n    Write a function to sort the given array by using selection sort.\n    '''\n    if my_list == []:\n        return []\n    \n    length = len(my_list)\n    for i in range(length):\n        min_index = i\n        for j in range(i + 1, length):\n            if my_list[min_index] > my_list[j]:\n                min_index = j\n        my_list[i], my_list[min_index] = my_list[min_index], my_list[i]\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n    \n    \ndef merge_sort(my_list):\n    '''\n    Write a function that takes a list as a parameter and returns a sorted list.\n    '''\n    if len(my_list) <= 1:\n        return my_list\n    mid = len(my_list) // 2\n    left = merge_sort(my_list[:mid])\n    right = merge_sort(my_list[mid:])\n    return merge(left, right)\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    #Get the length of the array\n    n = len(my_list)\n    gap = n/2\n    #Loop untill the gap is 1\n    while gap > 1:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            #Loop untill the index is within the range of the gap\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j = j-gap\n            my_list[j] = temp\n        #Update the gap for the next iteration\n        gap /= 2\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return [i and j for i, j in zip(test_tup1, test_tup2)]\n    "
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    for i in range(0, len(test_list1)):\n        test_list1[i] = list(test_list1[i])\n    for i in range(0, len(test_list2)):\n        test_list2[i] = list(test_list2[i])\n    for i in range(0, len(test_list1)):\n        for j in range(0, len(test_list1[i])):\n            test_list1[i][j] = test_list1[i][j] & test_list2[i][j]\n    test_list1 = tuple(test_list1)\n    test_list2 = tuple(test_list2)\n    test_tup = (test_list1, test_list2)\n    return test_tup\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    l1, l2 = [list(x) for x in test_tup1], [list(x) for x in test_tup2]\n    l1.extend(l2)\n    test_tup = tuple(l1)\n    return test_tup\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(tup1 and tup2 for tup1, tup2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # helper function\n    def extract_element(tup):\n        return tup[0], tup[1]\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(tuple, zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # the first list\n    list_one = []\n    # the second list\n    list_two = []\n    # and then add the two lists\n    for tup in test_tup1:\n        for e in tup:\n            list_one.append(e)\n    for tup in test_tup2:\n        for e in tup:\n            list_two.append(e)\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return [(i, j) for i, j in zip(test_tup1, test_tup2) if i == j]\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        new_tup1 = zip(test_tup1, test_tup2)\n        for tup1, tup2 in new_tup1:\n            print '{0} {1}'.format(tup1, tup2)\n    else:\n        print 'Tuples not of equal length'\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # your code here\n    return (test_tup1[0] and test_tup2[0], test_tup1[1] and test_tup2[1])\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -1 * b / (2 * a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Formula:\n    # ax^2 + bx + c = 0\n    # x = ( -b / (2 * a) )\n    # x = ( -b / (2 * a) ) + 2 * (a * c / b)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b/(2*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b/(2*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    ## ********** Code Starts ********** \n    if (a == 0): \n        if (b == 0): \n            raise ValueError(\"This parabola has no directrix\")\n        else: \n            x = -c/b\n            return x\n    else: \n        delta = b**2 - 4*a*c\n        if (delta < 0): \n            raise ValueError(\"This parabola has no directrix\")\n        else: \n            x1 = (-b + math.sqrt(delta))/(2*a)\n            x2 = (-b - math.sqrt(delta))/(2*a)\n            return x1, x2\n    ## ********** Code Ends ********** \n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = -b / (2 * a)\n    x2 = -b / (2 * a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import math\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    pass\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return - b / (2 * a)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if b**2 - 4 * a * c < 0: \n        return None\n    else: \n        x_1 = (-b + math.sqrt(b**2 - 4 * a * c)) / (2 * a)\n        x_2 = (-b - math.sqrt(b**2 - 4 * a * c)) / (2 * a)\n        return (x_1, x_2)\n    \n    \ndef parabola(a, b, c): \n    '''\n    Write a function to find the value of the y intercept of a parabola and the y value at which the x value is x.\n    '''\n    if b**2 - 4 * a * c < 0: \n        return None\n    else: \n        x = (-b + math.sqrt(b**2 - 4 * a * c)) / (2 * a)\n        y = a * x**2 + b * x + c\n        return (x, y)\n    \n    \ndef parabola_from_three_points(x1, y1, x2, y2, x3, y3):\n    '''\n    Write a function to find the value of the y intercept of a parabola passing through three points.\n    '''\n    a = (y1 - y2) / (x1 - x2)\n    b = y2 - a * x2\n    c = a * x1**2 + b * x1 + y1\n    return (a, b, c)\n    \n    \ndef point_on_line(x1, y1, x2, y2): \n    '''\n    Write a function to find the point on the line x1, y1, x2, y2 with the closest x and y values.\n    '''\n    if x1 == x2: \n        return x1, y1\n    else: \n        m = (y2 - y1) / (x2 - x1)\n        b = y2 - m * x2\n        return (m, b)\n    \n    \ndef line_intersection(m1, b1, m2, b2): \n    '''\n    Write a function to find the point of intersection of two lines.\n    '''\n    x = (b2 - b1) / (m1 - m2)\n    y = m1 * x + b1\n    return x, y\n    \n    \ndef two_line_intersection(m1, b1, m2, b2, m3, b3): \n    '''\n    Write a function to find the point of intersection of three lines.\n    '''\n    x = (b2 - b1) / (m1 - m2)\n    y = m1 * x + b1\n    x_1 = (b3 - b2) / (m2 - m3)\n    y_1 = m2 * x_1 + b2\n    return (x, y), (x_1, y_1)\n    \n    \ndef reverse(x): \n    '''\n    Write a function to reverse a string.\n    '''\n    return x[::-1]\n    \n    \ndef rotate_left(x, y): \n    '''\n    Write a function to rotate a string left.\n    '''\n    return y[len(y) - x:] + y[:len(y) - x]\n    \n    \ndef flip_vertically(x): \n    '''\n    Write a function to flip a string vertically.\n    '''\n    return x[::-1]\n    \n    \ndef rotate_to_the_left(x, y): \n    '''\n    Write a function to rotate a string to the left.\n    '''\n    return y[len(y) - x:] + y[:len(y) - x]\n    \n    \ndef flip_horizontally(x): \n    '''\n    Write a function to flip a string horizontally.\n    '''\n    return x[::-1]\n    \n    \ndef rotate_to_the_right(x, y): \n    '''\n    Write a function to rotate a string to the right.\n    '''\n    return y[x:] + y[:x]\n    \n    \ndef rotate_to_the_left_or_right(x, y, l): \n    '''\n    Write a function to rotate a string to the left or right.\n    '''\n    if l == 'left': \n        return rotate_to_the_left(x, y)\n    elif l == 'right': \n        return rotate_to_the_right(x, y)\n    else: \n        return y\n        \n    \ndef compress(x): \n    '''\n    Write a function to compress a string.\n    '''\n    return ''.join(x[0] + str(len(x) - 1) + x[-1])\n    \n    \ndef uncompress(x): \n    '''\n    Write a function to uncompress a string.\n    '''\n    return x.split(' ')[0] + x.split(' ')[1] + x.split(' ')[2][0] + x.split(' ')[2][1:]\n    \n    \ndef splice(x, y, z): \n    '''\n    Write a function to splice a string to get the last y letters of x and the first z letters of y.\n    '''\n    return x[-y:] + y[:z]\n    \n    \ndef compute_tip(x, y, z): \n    '''\n    Write a function to compute the tip of a cone.\n    '''\n    return x**2 * y / (x**2 + y**2)\n    \n    \ndef angle_between_three_points(x1, y1, x2, y2, x3, y3): \n    '''\n    Write a function to compute the angle of three points using the cross product.\n    '''\n    m1 = (y1 - y2) / (x1 - x2)\n    m2 = (y2 - y3) / (x2 - x3)\n    m3 = (y3 - y1) / (x3 - x1)\n    return math.degrees(math.atan(abs((m1 * m2) - (m1 * m3) + (m2 * m3))))\n    \n    \ndef angle_of_a_triangle(x1, y1, x2, y2, x3, y3): \n    '''\n    Write a function to compute the angle of a triangle using the cross product.\n    '''\n    m1 = (y1 - y2) / (x1 - x2)\n    m2 = (y2 - y3) / (x2 - x3)\n    m3 = (y3 - y1) / (x3 - x1)\n    return math.degrees(math.atan(abs((m1 * m2) - (m1 * m3) + (m2 * m3))))\n    \n    \ndef turn_clockwise(x, y, theta): \n    '''\n    Write a function to turn a point counter-clockwise.\n    '''\n    x_1 = x * math.cos(math.radians(theta)) - y * math.sin(math.radians(theta))\n    y_1 = x * math.sin(math.radians(theta)) + y * math.cos(math.radians(theta))\n    return x_1, y_1\n    \n    \ndef is_collinear(a, b, c): \n    '''\n    Write a function to check whether three points are collinear.\n    '''\n    return abs(a[0] * b[1] + b[0] * c[1] + c[0] * a[1] - a[0] * c[1] - b[0] * a[1] - c[0] * b[1]) < 0.00001\n    \n    \ndef is_intersecting(a, b, c, d): \n    '''\n    Write a function to check whether two circles are intersecting.\n    '''\n    return ((a[0] - c[0])**2 + (a[1] - c[1])**2) < (b[0]**2 + b[1]**2) and ((b[0] - d[0])**2 + (b[1] - d[1])**2) < (c["
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < len(list2):\n        return common_element(list2, list1)\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) > len(list2):\n        big_list = list1\n        small_list = list2\n    else:\n        big_list = list2\n        small_list = list1\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return bool(set(list1).intersection(list2))\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < len(list2):\n        x = len(list1)\n        list1, list2 = list2, list1\n    else:\n        x = len(list2)\n    for i in range(x):\n        if list1[i] in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 1.0*(base1+base2)/2.0 + 1.0*height/2.0\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 0.5*(base1+base2)*height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 1/2 * (base1 + base2) * height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2)/2.0\n    return median*height/2.0\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    s1 = base1 + base2\n    s2 = base1 * base2\n    s3 = base1 * height\n    s4 = base2 * height\n    return (s1 + s2 + s3 + s4) / 2\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1+base2)*height)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 1/2 * (base1 + base2) * height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 1/2*(base1+base2)*height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2.0*height\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)):\n        if number > arr[i]:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[-1]:\n        return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i < number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    number = int(number)\n    arr = [int(x) for x in arr.split()]\n    for element in arr:\n        if element > number:\n            print(number, 'is greater than', element)\n            return True\n    print(number, 'is not greater than any element in the array')\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n    \ndef check_less(arr, number):\n    '''\n    Write a function to check whether the entered number is less than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] < number:\n            return True\n    return False\n    \ndef check_equal(arr, number):\n    '''\n    Write a function to check whether the entered number is equal to the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == number:\n            return True\n    return False\n    \ndef check_arr_sum(arr, number):\n    '''\n    Write a function to check whether the sum of the elements of the given array is equal to the entered number.\n    '''\n    arr_sum = 0\n    for i in range(len(arr)):\n        arr_sum += arr[i]\n    if arr_sum == number:\n        return True\n    return False\n    \ndef get_max_arr_sum(arr):\n    '''\n    Write a function to find the maximum sum of the contiguous subarrays of a given array.\n    '''\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            max_sum = max(max_sum, sum(arr[i:j]))\n    return max_sum\n    \ndef get_max_subarray(arr):\n    '''\n    Write a function to find the contiguous subarray of a given array with the largest sum and return the sum.\n    '''\n    max_sum = 0\n    curr_sum = 0\n    for i in range(len(arr)):\n        curr_sum += arr[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum\n    \ndef is_valid_subarray(arr, start, end):\n    '''\n    Write a function to check whether the subarray from start to end (both inclusive) of the given array is valid. A valid subarray is a subarray that consists of at least one number and if the numbers in the subarray are in ascending order.\n    '''\n    if arr[start] < arr[end]:\n        return True\n    return False\n    \ndef reverse_arr(arr, start, end):\n    '''\n    Write a function to reverse a subarray of the given array from start to end (both inclusive).\n    '''\n    if start < end:\n        arr[start], arr[end] = arr[end], arr[start]\n    return arr\n    \ndef search_in_rotated_sorted_arr(arr, key):\n    '''\n    Write a function to search a given number in a given array in which the numbers are sorted in ascending order and the array is rotated between 1 and 3 times.\n    '''\n    if len(arr) == 0:\n        return -1\n    if len(arr) == 1 and arr[0] == key:\n        return 0\n    mid = int(len(arr) / 2)\n    if arr[mid] == key:\n        return mid\n    if len(arr) == 1:\n        return -1\n    if key > arr[0]:\n        return search_in_rotated_sorted_arr(arr[mid+1:], key)\n    else:\n        return search_in_rotated_sorted_arr(arr[:mid], key)\n        \ndef rotate_arr(arr, num_times):\n    '''\n    Write a function to rotate the given array by the number of times given in num_times.\n    '''\n    if num_times == 0:\n        return arr\n    if num_times == 1:\n        return arr[-1:] + arr[:-1]\n    return arr[-1:] + arr[:-1] + rotate_arr(arr[1:], num_times - 1)\n    \ndef find_intersect(arr1, arr2):\n    '''\n    Write a function to find the intersection of two given arrays.\n    '''\n    i = 0\n    j = 0\n    res = []\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] == arr2[j]:\n            res.append(arr1[i])\n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    return res\n    \ndef find_rotated_arr(arr):\n    '''\n    Write a function to find the index of the smallest element of the given array in a rotated sorted array.\n    '''\n    if len(arr) == 1:\n        return 0\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = int((low + high) / 2)\n        if arr[mid] < arr[mid - 1]:\n            return mid\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n    \ndef search_rotated_arr(arr, key):\n    '''\n    Write a function to find the index of the smallest element of the given array in a rotated sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = int((low + high) / 2)\n        if arr[mid] == key:\n            return mid\n        if arr[mid] > arr[high]:\n            if key >= arr[low] and key < arr[mid]:\n                return mid\n            else:\n                low = mid + 1\n        else:\n            if key >= arr[mid] and key < arr[high]:\n                return mid\n            else:\n                high = mid - 1\n    return -1\n    \ndef is_sorted(arr):\n    '''\n    Write a function to check whether the given array is sorted or not.\n    '''\n    if len(arr) == 1:\n        return True\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n    \ndef longest_palindromic_substring(str):\n    '''\n    Write a function to find the longest palindromic substring of the given string.\n    '''\n    if len(str) == 0:\n        return 0\n    start = 0\n    end = 0\n    for i in range(len(str)):\n        len1 = expand_center(str, i, i)\n        len2 = expand_center(str, i, i + 1)\n        max_len = max(len1, len2)\n        if max_len > end - start:\n            start = i - (max_len - 1) / 2\n            end = i + max_len / 2\n    return str[start:end+1]\n    \ndef expand_center(str, start, end):\n    '''\n    Write a function to expand a palindromic substring to the maximum length.\n    '''\n    while start >= 0 and end < len(str) and str[start] == str[end]:\n        start -= 1\n        end += 1\n    return end - start - 1\n    \ndef count_occurences(arr, key):\n    '''\n    Write a function to count the occurences of the given number in a given array.\n    '''\n    res = 0\n    for i in range(len(arr)):\n        if arr[i] == key:\n            res += 1\n    return res\n    \ndef count_occurences_in_rotated_arr(arr, key):\n    '''\n    Write a function to count the occurences of the given number in a given array in which the numbers are sorted in ascending order and the array is rotated between 1 and 3 times.\n    '''\n    if len(arr) == 1:\n        return 0\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = int((low + high) / 2)\n        if arr[mid] == key:\n            return 1 + count_occurences_in_rotated_arr(arr[mid+1"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for elem in arr:\n        if number > elem:\n            return False\n    return True\n    \nif __name__ == '__main__':\n    import sys\n    arr = list(map(int, sys.argv[1].split(',')))\n    number = int(sys.argv[2])\n    if check_greater(arr, number):\n        print('True')\n    else:\n        print('False')"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if text.count('a') == 1:\n        if text.find('a') == 0:\n            if text.find('b') == 1:\n                return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    matcher = re.compile(r'ab+')\n    if matcher.search(text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print match.group(0)\n    else:\n        print 'Not Matched'\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print match.group(0)\n    else:\n        print 'Not Matched'\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print match.group(0)\n    else:\n        print 'Not Matched'\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print match.group(0)\n    else:\n        print 'Not Matched'\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print match.group(0)\n    else:\n        print 'Not Matched'\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print match.group(0)\n    else:\n        print 'Not Matched'\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print match.group(0)\n    else:\n        print 'Not Matched'\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print match.group(0)\n    else:\n        print 'Not Matched'\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print match.group(0)\n    else:\n        print 'Not Matched'\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print match.group(0)\n    else:\n        print 'Not Matched'\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print match.group(0)\n    else:\n        print 'Not Matched'\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print match.group(0)\n    else:\n        print 'Not Matched'\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print match.group(0)\n    else:\n        print 'Not Matched'\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print match.group(0)\n    else:\n        print 'Not Matched'\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print match.group(0)\n    else:\n        print 'Not Matched'\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print match.group(0)\n    else:\n        print 'Not Matched'\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print match.group(0)\n    else:\n        print 'Not Matched'\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print match.group(0)\n    else:\n        print 'Not Matched'\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print match.group(0)\n    else:\n        print 'Not Matched'\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print match.group(0)\n    else:\n        print 'Not Matched'\ndef text_match_twenty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print match.group(0)\n    else:\n        print 'Not Matched'\ndef text_match_twenty_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print match.group(0)\n    else:\n        print 'Not Matched'\ndef text_match_twenty_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print match.group(0)\n    else:\n        print 'Not Matched'\ndef text_match_twenty_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print match.group(0)\n    else:\n        print 'Not Matched'\ndef text_match_twenty_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print match.group(0)\n    else:\n        print 'Not Matched'\ndef text_match_twenty_six(text):\n    '''\n    Writ"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search('a+b',text):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b'\n    if re.search(pattern, text):\n        return \"Matched 1\"\n    else:\n        return \"Did not match\"\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b'\n    if re.search(pattern, text):\n        return \"Matched 2\"\n    else:\n        return \"Did not match\"\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = 'ab+'\n    if re.match(pattern,text):\n        return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"ab+\"\n    if re.match(pattern,text):\n        return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.match(text)\n    if match:\n        return True\n    return False\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.match(text)\n    if match:\n        return True\n    return False\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.match(text)\n    if match:\n        return True\n    return False\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.match(text)\n    if match:\n        return True\n    return False\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.match(text)\n    if match:\n        return True\n    return False\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.match(text)\n    if match:\n        return True\n    return False\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.match(text)\n    if match:\n        return True\n    return False\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.match(text)\n    if match:\n        return True\n    return False\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.match(text)\n    if match:\n        return True\n    return False\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.match(text)\n    if match:\n        return True\n    return False\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.match(text)\n    if match:\n        return True\n    return False\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.match(text)\n    if match:\n        return True\n    return False\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.match(text)\n    if match:\n        return True\n    return False\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.match(text)\n    if match:\n        return True\n    return False\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.match(text)\n    if match:\n        return True\n    return False\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.match(text)\n    if match:\n        return True\n    return False\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.match(text)\n    if match:\n        return True\n    return False\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.match(text)\n    if match:\n        return True\n    return False\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.match(text)\n    if match:\n        return True\n    return False\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.match(text)\n    if match:\n        return True\n    return False\ndef text_match_twenty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.match(text)\n    if match:\n        return True\n    return False\ndef text_match_twenty_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.match(text)\n    if match:\n        return True\n    return False\ndef text_match_twenty_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.match(text)\n    if match:\n        return True\n    return False\ndef text_match_twenty_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.match(text)\n    if match:\n        return True\n    return False\ndef text_match_twenty_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.match(text)\n    if match:\n        return True\n    return False\ndef text_match_twenty_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.match(text)\n    if match:\n        return True\n    return False\ndef text_match_twenty_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return bool(re.search(r'ab+', text))\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n > 0 :\n        return n%10\n    else :\n        return 9\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    n = abs(n)\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n % 10\n    return last_digit\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0 :\n        n = -n\n    if n < 10 :\n        return n\n    else :\n        return last_Digit(n/10)\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    number = n % 10\n    return number\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [-x for x in list1]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in list1:\n        if i < 0:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    lst = []\n    for i in list1:\n        if i < 0:\n            lst.append(i)\n    return lst\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list_of_neg_nos = []\n    for i in list1:\n        if i < 0:\n            list_of_neg_nos.append(i)\n    return list_of_neg_nos\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2=[]\n    for x in list1:\n        if x<0:\n            list2.append(x)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in list1:\n        if i < 0:\n            print(i)\n    return None\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in list1:\n        if i < 0:\n            neg.append(i)\n    return neg\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list=[]\n    for i in list1:\n        if i<0:\n            neg_list.append(i)\n    return neg_list\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    #oddChar = '''[@%$\\\\^&~_=+{}][~\\|\\*\\'\\,;:\\.\\<>?/!@#$%&*()\\\\[\\]~``\u2018\u2019\u201c\u201d\u201d\u201e\u201e\u2039\u203a\u2039\u2019\u2019\u2018\u2018\u2019\u201a\u201a\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(str1.split('')[::2])\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    res = \"\"\n    for i in range(len(str1)):\n        if i%2==0:\n            res+=str1[i]\n    return res\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(str1[i] for i in range(0, len(str1), 2))\n    "
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    newstr=''\n    for char in str1:\n        if ord(char)%2==0:\n            newstr+=char\n    return newstr\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if len(str1) < 2:\n        return str1\n    res = str1[0]\n    for i in range(1, len(str1)):\n        if i % 2 == 0:\n            res += str1[i]\n    return res\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # create a new list of characters to return\n    new_list = []\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(str1.split('e'))\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if not str1:\n        return None\n    else:\n        temp = ''\n        for x in str1:\n            if x.isdigit():\n                temp += x\n        return temp\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join(filter(lambda x: x%2==0, str1))\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] <= test_list[j]:\n                if test_list[i][1] > test_list[j][1]:\n                    count += 1\n            elif test_list[i] > test_list[j]:\n                if test_list[i][1] < test_list[j][1]:\n                    count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][1] and test_list[i][0] < test_list[j][0]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    forward_counter = 0\n    backward_counter = 0\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    import itertools\n    return len([x for x in itertools.combinations(test_list,2) if x[0] < x[1]])\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    length = len(test_list)\n    if length == 0:\n        return 0\n    \n    pairs = 0\n    for i in range(0, length):\n        for j in range(i+1, length):\n            if test_list[i] == test_list[j] and test_list[i]!= None:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(0, len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    num_bidirectional = 0\n    for pair in test_list:\n        if pair[0] == pair[1]:\n            num_bidirectional += 1\n    return num_bidirectional\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    in_count = 0\n    out_count = 0\n    for item in test_list:\n        if item[0] >= item[1]:\n            in_count += 1\n        else:\n            out_count += 1\n    return (in_count, out_count)\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    for a in test_list:\n        for b in test_list:\n            if a < b and a > b:\n                if a + b == 10000:\n                    print(a,b)\n                    print(\"#\"*10)\n    return 0\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) == (test_list[j], test_list[i]):\n                count += 1\n    return count\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    if len(L) == 1:\n        return L[0]\n    \n    return (L[0] * (10 ** (len(L) - 1))) + multiple_to_single(L[1:])\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(x) for x in L))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return reduce(lambda x,y: x*10 + y, L)\n    \ndef single_to_multiple(num):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return [num/10**(len(str(num)) - i - 1)%10 for i in range(len(str(num)))]\n    \ndef single_to_multiple_v2(num):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    res = []\n    while num:\n        res.append(num % 10)\n        num /= 10\n    return res\n    \ndef join_list(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return reduce(lambda x,y: x*10 + y, L)\n    \ndef single_to_single_v2(num):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    res = []\n    while num:\n        res.append(num % 10)\n        num /= 10\n    return ''.join(map(str, res))\n    \ndef single_to_double(num):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return [num/10**(len(str(num)) - i - 1)%10 for i in range(len(str(num)))]\n    \ndef single_to_single_v2(num):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    res = []\n    while num:\n        res.append(num % 10)\n        num /= 10\n    return ''.join(map(str, res))\n    \ndef single_to_single_v3(num):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    res = []\n    while num:\n        res.append(num % 10)\n        num /= 10\n    return reduce(lambda x,y: x*10 + y, res)\n    \ndef test_multiple_to_single():\n    assert multiple_to_single([1,2,3,4,5,6]) == 657\n    \ndef test_single_to_multiple():\n    assert single_to_multiple(6765) == [1, 2, 3, 4, 5, 6]\n    \ndef test_single_to_multiple_v2():\n    assert single_to_multiple_v2(6765) == [1, 2, 3, 4, 5, 6]\n    \ndef test_join_list():\n    assert join_list([1,2,3,4,5,6]) == 657\n    \ndef test_single_to_single_v2():\n    assert single_to_single_v2(6765) == '67865'\n    \ndef test_single_to_double():\n    assert single_to_double(6765) == [6, 7, 8, 9, 0, 1]\n    \ndef test_single_to_single_v3():\n    assert single_to_single_v3(6765) == '6765'\n    \ndef test_single_to_single_v4():\n    assert single_to_single_v4(6765) == '6765'\n    \ndef test_single_to_single_v5():\n    assert single_to_single_v5(6765) == '6765'\n    \ndef test_single_to_single_v6():\n    assert single_to_single_v6(6765) == '6765'\n    \ndef test_single_to_single_v7():\n    assert single_to_single_v7(6765) == '6765'\n    \ndef test_single_to_single_v8():\n    assert single_to_single_v8(6765) == '6765'\n    \ndef test_single_to_single_v9():\n    assert single_to_single_v9(6765) == '6765'\n    \ndef test_single_to_single_v10():\n    assert single_to_single_v10(6765) == '6765'\n    \ndef test_single_to_single_v11():\n    assert single_to_single_v11(6765) == '6765'\n    \ndef test_single_to_single_v12():\n    assert single_to_single_v12(6765) == '6765'\n    \ndef test_single_to_single_v13():\n    assert single_to_single_v13(6765) == '6765'\n    \ndef test_single_to_single_v14():\n    assert single_to_single_v14(6765) == '6765'\n    \ndef test_single_to_single_v15():\n    assert single_to_single_v15(6765) == '6765'\n    \ndef test_single_to_single_v16():\n    assert single_to_single_v16(6765) == '6765'\n    \ndef test_single_to_single_v17():\n    assert single_to_single_v17(6765) == '6765'\n    \ndef test_single_to_single_v18():\n    assert single_to_single_v18(6765) == '6765'\n    \ndef test_single_to_single_v19():\n    assert single_to_single_v19(6765) == '6765'\n    \ndef test_single_to_single_v20():\n    assert single_to_single_v20(6765) == '6765'\n    \ndef test_single_to_single_v21():\n    assert single_to_single_v21(6765) == '6765'\n    \ndef test_single_to_single_v22():\n    assert single_to_single_v22(6765) == '6765'\n    \ndef test_single_to_single_v23():\n    assert single_to_single_v23(6765) == '6765'\n    \ndef test_single_to_single_v24():\n    assert single_to_single_v24(6765) == '6765'\n    \ndef test_single_to_single_v25():\n    assert single_to_single_v25(6765) == '6765'\n    \ndef test_single_to_single_v26():\n    assert single_to_single_v26(6765) == '6765'\n    \ndef test_single_to_single_v27():\n    assert single_to_single_v27(6765) == '6765'\n    \ndef test_single_to_single_v28():\n    assert single_to_single_v28(6765) == '6765'\n    \ndef test_single_to_single_v29():\n    assert single_to_single_v29(6765) == '6765'\n    \ndef test_single_to_single_v30():\n    assert single_to_single_v30(6765) == '6765'\n    \ndef test_single_to_single_v31():\n    assert single_to_single_v31(6765) == '6765'\n    \ndef test_single_to_single_v32():\n    assert single_to_single_v32(6765) == '6765'\n    \ndef test_single_to_single_v33():\n    assert single_to_single_v33(6765) == '6765'\n    \ndef test_single_to_single_v34():\n    assert single_to_single_v34(6765) == '6765'\n    \ndef test_single_to_single_v35():\n    assert single_to_single_v35(6765) == '6765'\n    \ndef test_single_to_single_v36():\n    assert single_to_single_v36(6765) == '6765'\n    \ndef test_single_to_single_v37():\n    assert single_to_single_v37(6765) == '6765'\n    \ndef test_single_to_single_v38():\n    assert single_to_single_v38(6765) == '6765'\n    \ndef test"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(L))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    elif len(L) == 1:\n        return L[0]\n    else:\n        return int(str(sum(L))[-1])\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if L == []:\n        return 0\n    return L[0] * 10 ** len(L) + multiple_to_single(L[1:])\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(x) for x in L))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 1:\n        return L[0]\n    else:\n        return L[0] * 10 ** len(L) + multiple_to_single(L[1:])\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n    \n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = []\n    index = [m.start() for m in re.finditer('r', text)]\n    index2 = [m.start() for m in re.finditer('n', text)]\n    for i in index:\n        for j in index2:\n            if j > i:\n                result.append([i, j])\n                break\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pos_dict = {}\n    sentence = text\n    adverb_pattern = re.compile('[a-zA-Z\\']*[A-Z\\s\\d]+[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*[a-zA-Z\\']*[A-Z\\s\\d]*"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    if not isinstance(text, str):\n        raise TypeError('text must be a string!')\n    match = re.search('[\\w]+', text)\n    if match is not None:\n        return match.start(), match.end()\n    else:\n        return -1, -1\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #tokenize the text\n    tokens = re.split('\\s+', text)\n    #first find the position of the adverb\n    for i in range(len(tokens)):\n        if tokens[i].lower() == 'adverb':\n            return i\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #return [(m.start(0), m.end(0)) for m in re.finditer(r'\\w+', text)]\n    #return [m.start(0) for m in re.finditer(r'\\w+', text)]\n    #return [m.start(0) for m in re.finditer(r'(?<=[\\.\\?!])[a-z]+', text)]\n    return [m.start(0) for m in re.finditer(r'(?<=[\\.\\?!])[a-z]+', text)]\n    \n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r\"(\\w+)(\\s?\\b)(\\w+)\")\n    match = pattern.search(text)\n    return match.groups()\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    positions = []\n    adverb_pos = re.findall('(?:^|\\s)(?:' + '|'.join(adverbs) + ')(?=\\s|$)', text, flags = re.I)\n    # print(adverb_pos)\n    for i in range(len(adverb_pos)):\n        start = text[:adverb_pos[i]].rfind(adverbs[i])\n        # print(start)\n        if start!= -1:\n            positions.append((start, adverb_pos[i]))\n    return positions\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r\"\\w+?[^\\w\\d\\s]+(?:(?<=[^\\w\\d\\s])[\\.\\?!]?(?=[^\\w\\d\\s])|[\\.\\?!](?=[^\\w\\d\\s]))\"\n    matches = re.finditer(pattern,text,re.I)\n    result = []\n    for match in matches:\n        result.append(match.group())\n    return result\n    \n    \n    "
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #find the position of adverb\n    #find the position of adverb that has a space after it\n    #find the position of adverb that has a space before it\n    positions = []\n    match = re.search(r'\\w+',text)\n    if match:\n        start_pos = match.start()\n        end_pos = match.end()\n        if end_pos - start_pos > 1:\n            positions.append((start_pos,end_pos))\n        end_pos = end_pos + 1\n        while(end_pos < len(text) and text[end_pos] ==''):\n            end_pos = end_pos + 1\n        if end_pos < len(text) and text[end_pos] == ',':\n            end_pos = end_pos + 1\n        if end_pos < len(text) and text[end_pos] == ':':\n            end_pos = end_pos + 1\n        while(end_pos < len(text) and text[end_pos] ==''):\n            end_pos = end_pos + 1\n        if end_pos < len(text):\n            positions.append((end_pos,end_pos + 1))\n        return positions\n    return None\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_index = []\n    #look for \"to\" in the text\n    p = re.compile('to')\n    #if there is a match, store the index in a list\n    if p.search(text)!= None:\n        adverb_index.append(p.search(text).span())\n    #if there is no match, return False\n    else:\n        return False\n    #return the list\n    return adverb_index\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l * 6\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    sa = 2 * l ** 2 * 6\n    return sa\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    side_area = l*l*6\n    top_side_area = (l*l)\n    return (side_area * 2) + (top_side_area * 2)\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * pow(l, 2)\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    l2 = l**2\n    return 6*l2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_pos = 0\n    num_neg = 0\n    for x in nums:\n        if x > 0:\n            num_pos += 1\n        elif x < 0:\n            num_neg += 1\n    return num_pos / num_neg\ndef reverse(x):\n    '''\n    Write a function to reverse a number.\n    '''\n    x_str = str(x)\n    rev_str = x_str[::-1]\n    return int(rev_str)\ndef minimum(nums):\n    '''\n    Write a function to find the minimum number in an array of integers.\n    '''\n    return min(nums)\ndef valid_parentheses(string):\n    '''\n    Write a function to check if the input string is valid parentheses.\n    '''\n    stack = []\n    for x in string:\n        if x == '(':\n            stack.append(x)\n        elif x == ')':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\ndef nth_to_last(nums, target):\n    '''\n    Write a function to find the nth to last element of a singly linked list.\n    '''\n    current = nums.head\n    pos = 0\n    while current:\n        if pos == n:\n            return current.val\n        pos += 1\n        current = current.next\n    return False\ndef is_palindrome(str):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    half_len = int(len(str)/2)\n    for x in xrange(half_len):\n        if str[x]!= str[len(str)-1-x]:\n            return False\n    return True\ndef rotate_string(str, n):\n    '''\n    Write a function to rotate a string.\n    '''\n    return str[n:] + str[:n]\ndef is_permutation(str1, str2):\n    '''\n    Write a function to check if two strings are permutations of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    sorted_str1 = sorted(str1)\n    sorted_str2 = sorted(str2)\n    for x in xrange(len(str1)):\n        if str1[x]!= str2[x]:\n            return False\n    return True\ndef is_substring(str1, str2):\n    '''\n    Write a function to check if one string is a substring of another.\n    '''\n    for x in xrange(len(str1)):\n        if str1[x:x+len(str2)] == str2:\n            return True\n    return False\ndef group_equal(nums):\n    '''\n    Write a function to group an array into subarrays such that each subarray is size k.\n    '''\n    out = []\n    if len(nums) < 2:\n        return nums\n    start = 0\n    while start < len(nums):\n        sub = []\n        for x in xrange(start, min(start+5, len(nums))):\n            sub.append(nums[x])\n        out.append(sub)\n        start += 5\n    return out\ndef int_to_binary(num):\n    '''\n    Write a function to convert a non-negative integer to its binary representation.\n    '''\n    if num == 0:\n        return [0]\n    out = []\n    while num > 0:\n        out.append(num % 2)\n        num /= 2\n    return out\ndef is_palindrome_permutation(str):\n    '''\n    Write a function that takes in a non-empty string and that returns a boolean\n    representing whether the string is a permutation of a palindrome.\n    A palindrome is a word or phrase that is the same forwards and backwards.\n    A permutation is a rearrangement of letters.\n    A palindrome permutation is a rearrangement of letters or word or phrase,\n    where all instances of the same letter are swapped throughout the string.\n    The partition method should return the starting index of the first\n    occurrence of such a permutation.\n    If no palindrome permutations can be found, the function should return -1.\n    '''\n    if len(str) < 2:\n        return True\n    str = sorted(str)\n    start = 0\n    while start < len(str):\n        if str[start]!= str[len(str)-1-start]:\n            return False\n        start += 1\n    return True\ndef insert(nums, val):\n    '''\n    Write a function to insert a value into a sorted array.\n    '''\n    new_nums = array('i', [])\n    pos = 0\n    for x in xrange(len(nums)):\n        if nums[x] < val:\n            new_nums.append(nums[x])\n            pos += 1\n        else:\n            new_nums.append(val)\n            return new_nums\n    new_nums.append(val)\n    return new_nums\ndef find_duplicate(nums):\n    '''\n    Write a function to find an element in a sorted array that occurs more than once and return the element's index.\n    If the element doesn't exist, return -1.\n    '''\n    for x in xrange(len(nums)):\n        if nums[x] == nums[x+1]:\n            return x+1\n    return -1\ndef subarrays_div_by_k(nums, k):\n    '''\n    Write a function to find the number of subarrays with a sum divisible by k.\n    '''\n    k_sum = 0\n    count = 0\n    for x in xrange(len(nums)):\n        k_sum += nums[x]\n        while k_sum % k == 0:\n            k_sum += nums[x+1]\n            count += 1\n    return count\ndef find_middle(nums):\n    '''\n    Write a function to find the middle element of a singly linked list.\n    '''\n    if nums.head is None:\n        return None\n    slow = nums.head\n    fast = nums.head\n    while fast.next and fast.next.next:\n        slow = slow.next\n        fast = fast.next.next\n    return slow\ndef is_valid_parenthese(str):\n    '''\n    Write a function to check if a string is valid parenthese.\n    '''\n    stack = []\n    for x in str:\n        if x == '(' or x == '[':\n            stack.append(x)\n        elif x == ')':\n            if len(stack) == 0 or stack.pop()!= '(':\n                return False\n        elif x == ']':\n            if len(stack) == 0 or stack.pop()!= '[':\n                return False\n    if len(stack) > 0:\n        return False\n    return True\ndef print_hash_table(hash_table, word, value):\n    print word, ': ', hash_table[word]\ndef get_word_value(hash_table, word):\n    return hash_table[word]\ndef update_hash_table(hash_table, word, value):\n    hash_table[word] = value\ndef is_key_present(hash_table, word):\n    return word in hash_table\ndef separate_characters(str):\n    '''\n    Write a function that takes in a string and returns a list of all characters\n    that are present in the string.\n    '''\n    out = []\n    for x in str:\n        if x not in out:\n            out.append(x)\n    return out\ndef count_characters_fast(str):\n    '''\n    Write a function that takes in a string and returns the number of times\n    each character occurs in the string.\n    '''\n    count_dict = {}\n    for x in str:\n        if x in count_dict:\n            count_dict[x] += 1\n        else:\n            count_dict[x] = 1\n    return count_dict\ndef check_permutation_one(str1, str2):\n    ''"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    l = len(nums)\n    if l == 0:\n        return 0\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return float(count) / l\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            sum += 1\n    return float(sum) / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    negative_count = 0\n    for i in nums:\n        if i > 0:\n            positive_count += 1\n        elif i < 0:\n            negative_count += 1\n    return float(positive_count / (positive_count + negative_count))\n    \n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos, neg = 0, 0\n    for num in nums:\n        if num > 0:\n            pos += 1\n        elif num < 0:\n            neg += 1\n    print (pos/float(pos+neg))\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    print count\n    return count/float(len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num = len(nums)\n    num_pos = 0\n    for i in range(num):\n        if nums[i] > 0:\n            num_pos += 1\n    print float(num_pos)/num\n    return float(num_pos)/num\n    \ndef remove_duplicate(nums):\n    '''\n    Write a function that removes duplicates from an array of integers and returns the new length.\n    '''\n    if not nums:\n        return 0\n    pos_nums = []\n    for num in nums:\n        if num > 0:\n            pos_nums.append(num)\n    pos_nums = array('i',pos_nums)\n    return len(pos_nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    l = []\n    for i in nums:\n        if i > 0:\n            l.append(i)\n    return len(l)/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos = 0\n    for i in nums:\n        if i > 0:\n            pos += 1\n    print pos / len(nums)\n    return pos / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1)==0:\n        return None\n    else:\n        return min(list1)\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    \n    max_neg = None\n    for num in list1: \n        if (num < 0 and max_neg is None): \n            max_neg = num\n        elif (num < 0 and max_neg is not None): \n            if num > max_neg: \n                max_neg = num \n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i] > list1[j]:\n                list1[i], list1[j] = list1[j], list1[i]\n    return list1[0]\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # largest_neg = -1\n    # for i in list1:\n    #     if i<0 and i>largest_neg:\n    #         largest_neg=i\n    # return largest_neg\n    largest_neg = -1\n    for i in list1:\n        if i<0 and i>largest_neg:\n            largest_neg=i\n    return largest_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -999999\n    for i in range(len(list1)):\n        if list1[i] < 0 and list1[i] > max_neg:\n            max_neg = list1[i]\n    return max_neg\n    \ndef largest_pos(list1):\n    '''\n    Write a python function to find the largest positive number from the given list.\n    '''\n    max_pos = 9999999\n    for i in range(len(list1)):\n        if list1[i] > 0 and list1[i] < max_pos:\n            max_pos = list1[i]\n    return max_pos\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) == 0:\n        return None\n    else:\n        return max(list1)\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    for number in list1:\n        if number<0:\n            return number\n    return None\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(filter(lambda x: x < 0, list1))\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max1 = -99999\n    for i in range(len(list1)):\n        if list1[i] < max1:\n            max1 = list1[i]\n    return max1\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    return list1[0]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_list.append(tup[:K])\n    return trimmed_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in test_list:\n        if i[-1] > K:\n            trimmed_list.append(i)\n    return trimmed_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result_list = []\n    for index, item in enumerate(test_list):\n        if index % 2 == 0:\n            result_list.append(item[:K])\n        else:\n            result_list.append(item)\n    return result_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [\n        tuple(t[:K])\n        for t in test_list\n    ]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in test_list:\n        print i\n    print \"=\" * 10\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Method 1\n    # return [x for x in test_list if len(x) == K]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = list()\n    for i in test_list:\n        if len(i) > K:\n            trimmed_list.append(i[:K])\n        else:\n            trimmed_list.append(i)\n    return trimmed_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(a, b) for a, b in test_list if a < b]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(x, y[K:]) for (x, y) in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(x[0],x[1]) for x in test_list if len(x) == K]\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    product = []\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the tuples are not equal.\")\n    for i in range(len(test_tup1)):\n        product.append(test_tup1[i]*test_tup2[i])\n    return tuple(product)\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(map(lambda x, y: x * y, test_tup1, test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return [test_tup1[i]*test_tup2[i] for i in range(len(test_tup1))]\n    \nif __name__ == '__main__':\n    \n    # Test case 1\n    test_tup1 = (1, 2, 3, 4)\n    test_tup2 = (10, 20, 30, 40)\n    print index_multiplication(test_tup1, test_tup2)\n    \n    # Test case 2\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 20, 30)\n    print index_multiplication(test_tup1, test_tup2)"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # result_list = [i*j for i,j in zip(test_tup1, test_tup2)]\n    # return tuple(result_list)\n    \n    # result_list = []\n    # for i, j in zip(test_tup1, test_tup2):\n    #     result_list.append(i*j)\n    # return tuple(result_list)\n    \n    # result_list = []\n    # for i in test_tup1:\n    #     for j in test_tup2:\n    #         result_list.append(i*j)\n    # return tuple(result_list)\n    \n    # result_list = []\n    # for i, j in zip(test_tup1, test_tup2):\n    #     result_list.append(i*j)\n    # return tuple(result_list)\n    \n    result_list = []\n    for i, j in zip(test_tup1, test_tup2):\n        result_list.append(i*j)\n    return tuple(result_list)\n    \n    \nif __name__ == '__main__':\n    test_tuple1 = (1, 2, 3, 4)\n    test_tuple2 = (2, 3, 4, 5)\n    \n    print index_multiplication(test_tuple1, test_tuple2)\n    print index_multiplication(test_tuple2, test_tuple1)"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print \"The tuples are not of equal length\"\n    else:\n        test_tup_mul = ()\n        for i in range(len(test_tup1)):\n            test_tup_mul = test_tup_mul + (test_tup1[i]*test_tup2[i],)\n        print test_tup_mul\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    output_list = []\n    for i in range(len(test_tup1)):\n        output_list.append(test_tup1[i] * test_tup2[i])\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = tuple()\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] * test_tup2[i],)\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    tup1 = zip(test_tup1[0], test_tup1[1])\n    tup2 = zip(test_tup2[0], test_tup2[1])\n    res = []\n    for i in range(len(tup1)):\n        res.append(tup1[i]*tup2[i])\n    return res\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    tup1 = list(test_tup1)\n    tup2 = list(test_tup2)\n    tup1_length = len(tup1)\n    tup2_length = len(tup2)\n    if tup1_length == tup2_length:\n        tup1.sort()\n        tup2.sort()\n        for i in xrange(tup1_length):\n            tup1[i] *= tup2[i]\n    return tuple(tup1)\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return [x * y for x, y in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    dct = {}\n    for item in lst:\n        if item in dct.keys():\n            dct[item] += 1\n        else:\n            dct[item] = 1\n    return dct[tup]\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(lst)\n    return counter[tup]\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst_count=[]\n    for val in lst:\n        lst_count.append(tup.count(val))\n    return lst_count\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return tuple([lst.count(i) for i in tup]) \ndef count_Occurrence_list(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return [lst.count(i) for i in tup] \ndef tuple_Occurrence_list(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return [tup.count(i) for i in lst] \ndef count_Occurrence_dict(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup_count = Counter(tup)\n    lst_count = Counter(lst)\n    return dict([(k, tup_count[k] + lst_count[k]) for k in set(tup_count)|set(lst_count)]) \ndef tuple_Occurrence_dict(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup_count = Counter(tup)\n    lst_count = Counter(lst)\n    return dict([(k, tup_count[k] + lst_count[k]) for k in set(tup_count)|set(lst_count)]) \ndef tuple_Occurrence_dict_list(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return [tup.count(i) for i in lst] \ndef tuple_Occurrence_dict_list_list(tup, lst): \n    return [tup.count(i) for i in lst] \ndef tuple_Occurrence_dict_list_list_list(tup, lst): \n    return [tup.count(i) for i in lst] \ndef tuple_Occurrence_dict_list_list_list_list(tup, lst): \n    return [tup.count(i) for i in lst] \ndef all_occurrence(lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return [lst.count(i) for i in lst] \ndef all_occurrence_list(lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return [lst.count(i) for i in lst] \ndef tuple_all_occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup_count = Counter(tup)\n    lst_count = Counter(lst)\n    return dict([(k, tup_count[k] + lst_count[k]) for k in set(tup_count)|set(lst_count)]) \ndef tuple_all_occurrence_list(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup_count = Counter(tup)\n    lst_count = Counter(lst)\n    return dict([(k, tup_count[k] + lst_count[k]) for k in set(tup_count)|set(lst_count)]) \ndef tuple_all_occurrence_dict(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup_count = Counter(tup)\n    lst_count = Counter(lst)\n    return dict([(k, tup_count[k] + lst_count[k]) for k in set(tup_count)|set(lst_count)]) \ndef tuple_all_occurrence_dict_list(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return [tup.count(i) for i in lst] \ndef tuple_all_occurrence_dict_list_list(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return [tup.count(i) for i in lst] \ndef tuple_all_occurrence_dict_list_list_list(tup, lst): \n    return [tup.count(i) for i in lst] \ndef tuple_all_occurrence_dict_list_list_list(tup, lst): \n    return [tup.count(i) for i in lst] \ndef tuple_all_occurrence_dict_list_list_list_list(tup, lst): \n    return [tup.count(i) for i in lst] \ndef tuple_all_occurrence_dict_list_list_list_list(tup, lst): \n    return [tup.count(i) for i in lst] \ndef tuple_all_occurrence_dict_list_list_list_list_list(tup, lst): \n    return [tup.count(i) for i in lst] \ndef tuple_all_occurrence_dict_list_list_list_list_list_list(tup, lst): \n    return [tup.count(i) for i in lst] \ndef all_occurrence_list(lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return [lst.count(i) for i in lst] \ndef all_occurrence_list_list(lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return [lst.count(i) for i in lst] \ndef tuple_all_occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup_count = Counter(tup)\n    lst_count = Counter(lst)\n    return dict([(k, tup_count[k] + lst_count[k]) for k in set(tup_count)|set(lst_count)]) \ndef tuple_all_occurrence_list(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup_count = Counter(tup)\n    lst_count = Counter(lst)\n    return dict([(k, tup_count[k] + lst_count[k]) for k in set(tup_count)|set(lst_count)]) \ndef tuple_all_occurrence_dict(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup_count = Counter(tup)\n    lst_count = Counter(lst)\n    return dict([(k, tup_count[k] + lst_count[k]) for k in set(tup_count)|set(lst_count)]) \ndef tuple_all_occurrence_dict_list(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return [tup.count(i) for i in lst] \ndef tuple_all_occurrence_dict_list_list(tup, lst): \n    return [tup.count(i) for i in lst] \ndef tuple_all_occurrence_dict_list_list_list(tup, lst): "
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup=tup\n    lst=lst\n    cnt=0\n    for i in lst:\n        if i in tup:\n            cnt +=1\n    return cnt\ndef count_Occurrence_dict(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup=tup\n    lst=lst\n    cnt={}\n    for i in lst:\n        if i in tup:\n            cnt[i]=cnt.get(i,0)+1\n    return cnt\ndef convert_String_to_Number(lst):\n    '''\n    Write a python function to convert each string to int.\n    '''\n    lst=lst\n    res_lst=[]\n    for i in lst:\n        res_lst.append(int(i))\n    return res_lst\ndef convert_String_to_Number_set(lst):\n    '''\n    Write a python function to convert each string to int.\n    '''\n    lst=lst\n    res_lst=set([])\n    for i in lst:\n        res_lst.add(int(i))\n    return res_lst\ndef convert_String_to_Number_dict(lst):\n    '''\n    Write a python function to convert each string to int.\n    '''\n    lst=lst\n    res_lst={}\n    for i in lst:\n        res_lst[i]=int(i)\n    return res_lst\ndef Convert_Strings_to_Numbers_Set(lst):\n    '''\n    Write a python function to convert each string to int.\n    '''\n    lst=lst\n    res_lst=set([])\n    for i in lst:\n        res_lst.add(int(i))\n    return res_lst\ndef Convert_Strings_to_Numbers_Dict(lst):\n    '''\n    Write a python function to convert each string to int.\n    '''\n    lst=lst\n    res_lst={}\n    for i in lst:\n        res_lst[i]=int(i)\n    return res_lst\ndef Convert_Strings_to_Numbers_List(lst):\n    '''\n    Write a python function to convert each string to int.\n    '''\n    lst=lst\n    res_lst=[]\n    for i in lst:\n        res_lst.append(int(i))\n    return res_lst\ndef Convert_List_to_String(lst):\n    '''\n    Write a python function to convert each string to int.\n    '''\n    lst=lst\n    res_lst=[]\n    for i in lst:\n        res_lst.append(str(i))\n    return res_lst\ndef Convert_Tuple_to_String(tup):\n    '''\n    Write a python function to convert each string to int.\n    '''\n    tup=tup\n    res_tup=[]\n    for i in tup:\n        res_tup.append(str(i))\n    return res_tup\ndef Convert_List_to_String_set(lst):\n    '''\n    Write a python function to convert each string to int.\n    '''\n    lst=lst\n    res_lst=set([])\n    for i in lst:\n        res_lst.add(str(i))\n    return res_lst\ndef Convert_Tuple_to_String_set(tup):\n    '''\n    Write a python function to convert each string to int.\n    '''\n    tup=tup\n    res_tup=set([])\n    for i in tup:\n        res_tup.add(str(i))\n    return res_tup\ndef Convert_Tuple_to_String_dict(tup):\n    '''\n    Write a python function to convert each string to int.\n    '''\n    tup=tup\n    res_tup={}\n    for i in tup:\n        res_tup[str(i)]=i\n    return res_tup\ndef Convert_Dict_to_String_dict(tup):\n    '''\n    Write a python function to convert each string to int.\n    '''\n    tup=tup\n    res_tup={}\n    for i in tup:\n        res_tup[str(i)]=tup[i]\n    return res_tup\ndef Convert_List_to_String_list(lst):\n    '''\n    Write a python function to convert each string to int.\n    '''\n    lst=lst\n    res_lst=[]\n    for i in lst:\n        res_lst.append(str(i))\n    return res_lst\ndef Convert_Tuple_to_String_list(tup):\n    '''\n    Write a python function to convert each string to int.\n    '''\n    tup=tup\n    res_tup=[]\n    for i in tup:\n        res_tup.append(str(i))\n    return res_tup\ndef Convert_Tuple_to_String_dict(tup):\n    '''\n    Write a python function to convert each string to int.\n    '''\n    tup=tup\n    res_tup={}\n    for i in tup:\n        res_tup[str(i)]=tup[i]\n    return res_tup\ndef Convert_Dict_to_String_dict(tup):\n    '''\n    Write a python function to convert each string to int.\n    '''\n    tup=tup\n    res_tup={}\n    for i in tup:\n        res_tup[str(i)]=tup[i]\n    return res_tup\ndef Convert_Set_to_String_set(tup):\n    '''\n    Write a python function to convert each string to int.\n    '''\n    tup=tup\n    res_tup=set([])\n    for i in tup:\n        res_tup.add(str(i))\n    return res_tup\ndef Convert_List_to_String_list(lst):\n    '''\n    Write a python function to convert each string to int.\n    '''\n    lst=lst\n    res_lst=[]\n    for i in lst:\n        res_lst.append(str(i))\n    return res_lst\ndef Convert_Tuple_to_String_list(tup):\n    '''\n    Write a python function to convert each string to int.\n    '''\n    tup=tup\n    res_tup=[]\n    for i in tup:\n        res_tup.append(str(i))\n    return res_tup\ndef Convert_List_to_String_tuple(lst):\n    '''\n    Write a python function to convert each string to int.\n    '''\n    lst=lst\n    res_lst=[]\n    for i in lst:\n        res_lst.append(str(i))\n    return tuple(res_lst)\ndef Convert_Tuple_to_String_tuple(tup):\n    '''\n    Write a python function to convert each string to int.\n    '''\n    tup=tup\n    res_tup=[]\n    for i in tup:\n        res_tup.append(str(i))\n    return tuple(res_tup)\ndef Convert_Dict_to_String_dict(tup):\n    '''\n    Write a python function to convert each string to int.\n    '''\n    tup=tup\n    res_tup={}\n    for i in tup:\n        res_tup[str(i)]=tup[i]\n    return res_tup\ndef Convert_Tuple_to_String_dict(tup):\n    '''\n    Write a python function to convert each string to int.\n    '''\n    tup=tup\n    res_tup={}\n    for i in tup:\n        res_tup[str("
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup = tuple(tup)\n    return Counter(tup)\n    #return [x[1] for x in tup if x[0] in lst]\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    if tup == () or lst == () or len(lst) < len(tup):\n        return 0\n    if tup == lst:\n        return 1\n    if tup[0] == lst[0]:\n        return count_Occurrence(tup[1:], lst[1:]) + count_Occurrence(tup[1:], lst[1:])\n    else:\n        return count_Occurrence(tup[1:], lst[1:])\ndef list_Frequency(List,key):\n    '''\n    Write a python function to get the frequency of all elements of list in a tuple.\n    '''\n    result = []\n    for item in List:\n        if item[0] == key:\n            result.append(item[1])\n    return result\ndef list_Frequency_tuple(List,key):\n    '''\n    Write a python function to get the frequency of all elements of list in a tuple.\n    '''\n    result = []\n    for item in List:\n        if item[0] == key:\n            result.append(item[1])\n    return result\ndef Frequency_tuple(tup,lst):\n    '''\n    Write a python function to get the frequency of all elements of list in a tuple.\n    '''\n    if tup == () or lst == () or len(lst) < len(tup):\n        return 0\n    if tup == lst:\n        return 1\n    if tup[0] == lst[0]:\n        return Frequency_tuple(tup[1:], lst[1:]) + Frequency_tuple(tup[1:], lst[1:])\n    else:\n        return Frequency_tuple(tup[1:], lst[1:])\ndef Frequency_tuple(tup,lst):\n    '''\n    Write a python function to get the frequency of all elements of list in a tuple.\n    '''\n    if tup == () or lst == () or len(lst) < len(tup):\n        return 0\n    if tup == lst:\n        return 1\n    if tup[0] == lst[0]:\n        return Frequency_tuple(tup[1:], lst[1:]) + Frequency_tuple(tup[1:], lst[1:])\n    else:\n        return Frequency_tuple(tup[1:], lst[1:])\ndef Count_Freq_1(tup,lst):\n    '''\n    Write a python function to get the frequency of all elements of list in a tuple.\n    '''\n    result = []\n    for item in lst:\n        if item[0] == tup[0]:\n            result.append(item[1])\n    return result\ndef Count_Freq_2(tup,lst):\n    '''\n    Write a python function to get the frequency of all elements of list in a tuple.\n    '''\n    result = []\n    for item in lst:\n        if item[0] == tup[0]:\n            result.append(item[1])\n    return result\ndef Count_Freq_3(tup,lst):\n    '''\n    Write a python function to get the frequency of all elements of list in a tuple.\n    '''\n    result = []\n    for item in lst:\n        if item[0] == tup[0]:\n            result.append(item[1])\n    return result\ndef Count_Freq_4(tup,lst):\n    '''\n    Write a python function to get the frequency of all elements of list in a tuple.\n    '''\n    result = []\n    for item in lst:\n        if item[0] == tup[0]:\n            result.append(item[1])\n    return result\ndef Count_Freq_5(tup,lst):\n    '''\n    Write a python function to get the frequency of all elements of list in a tuple.\n    '''\n    result = []\n    for item in lst:\n        if item[0] == tup[0]:\n            result.append(item[1])\n    return result\ndef Count_Freq_6(tup,lst):\n    '''\n    Write a python function to get the frequency of all elements of list in a tuple.\n    '''\n    result = []\n    for item in lst:\n        if item[0] == tup[0]:\n            result.append(item[1])\n    return result\ndef Count_Freq_7(tup,lst):\n    '''\n    Write a python function to get the frequency of all elements of list in a tuple.\n    '''\n    result = []\n    for item in lst:\n        if item[0] == tup[0]:\n            result.append(item[1])\n    return result\ndef Count_Freq_8(tup,lst):\n    '''\n    Write a python function to get the frequency of all elements of list in a tuple.\n    '''\n    result = []\n    for item in lst:\n        if item[0] == tup[0]:\n            result.append(item[1])\n    return result\ndef Count_Freq_9(tup,lst):\n    '''\n    Write a python function to get the frequency of all elements of list in a tuple.\n    '''\n    result = []\n    for item in lst:\n        if item[0] == tup[0]:\n            result.append(item[1])\n    return result\ndef Count_Freq_10(tup,lst):\n    '''\n    Write a python function to get the frequency of all elements of list in a tuple.\n    '''\n    result = []\n    for item in lst:\n        if item[0] == tup[0]:\n            result.append(item[1])\n    return result\ndef Count_Freq_11(tup,lst):\n    '''\n    Write a python function to get the frequency of all elements of list in a tuple.\n    '''\n    result = []\n    for item in lst:\n        if item[0] == tup[0]:\n            result.append(item[1])\n    return result\ndef Count_Freq_12(tup,lst):\n    '''\n    Write a python function to get the frequency of all elements of list in a tuple.\n    '''\n    result = []\n    for item in lst:\n        if item[0] == tup[0]:\n            result.append(item[1])\n    return result\ndef Count_Freq_13(tup,lst):\n    '''\n    Write a python function to get the frequency of all elements of list in a tuple.\n    '''\n    result = []\n    for item in lst:\n        if item[0] == tup[0]:\n            result.append(item[1])\n    return result\ndef Count_Freq_14(tup,lst):\n    '''\n    Write a python function to get the frequency of all elements of list in a tuple.\n    '''\n    result = []\n    for item in lst:\n        if item[0] == tup[0]:\n            result.append(item[1])\n    return result\ndef Count_Freq_15(tup,lst):\n    '''\n    Write a python function to get the frequency of all elements of list in a tuple.\n    '''\n    result = []\n    for item in lst:\n        if item[0] == tup[0]:\n            result.append(item[1])\n    return result\ndef Count_Freq_16(tup,lst):\n    '''\n    Write a python function to get the frequency of all elements of list in a tuple.\n    '''\n    result = []\n    for item in lst:\n        if item[0] == tup[0]:\n            result.append(item[1])\n    return result\ndef Count_Freq_17(tup,lst):\n    '''\n    Write a python function to get the frequency of all elements of list in a tuple.\n    '''\n    result = []\n    for item in lst:\n        if item[0] == tup[0]:\n            result.append(item[1])\n    return result\ndef Count_Freq_18(tup,lst):\n    '''\n    Write a pytho"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum(lst.count(i) for i in tup) \n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst) \n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst) [tup]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(\"{} cubed is {}\".format(num, num**3))\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    res = []\n    for num in nums:\n        res.append(num ** 3)\n    return res\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    print(\"\\nCubes of elements in a list:\")\n    for num in nums:\n        print(num ** 3)\n    \n    \ndef word_split(str_input):\n    '''\n    Given a string, return a list of strings made from the first word of each\n    sentence.\n    '''\n    print(\"\\nSplit a string into sentences:\")\n    result = []\n    for word in str_input.split():\n        result.append(word)\n    return result\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n==1:\n        return 0\n    else:\n        return 1 + cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 1\n    for i in range(1,n):\n        s = s + i\n    return s\ndef cal_perrin(n):\n    return cal_sum(n) / n\n    \n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    summation = 0\n    i = 1\n    while (i <= n):\n        summation = summation + (i % 2)\n        i = i + 1\n    return summation\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    \n    # intialise sum to 0.\n    # use an n for loop to calculate each perrin number\n    # add the current number to sum\n    \n    sum = 0\n    for i in range(1,n):\n        if i%2 == 0:\n            sum += i\n        else:\n            sum -= i\n    \n    return sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return (n*(n+1)*(n+2))/6\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    def sum_of_n_digits(n):\n        if n <= 1:\n            return n\n        return n % 10 + sum_of_n_digits(n/10)\n    total = 0\n    for i in range(1, n + 1):\n        if sum_of_n_digits(i) % 7 == 0:\n            total += i\n    return total\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    i = 1\n    total = 0\n    while True:\n        if i % n == 0:\n            total += i\n        i += 1\n        if i > 1000000:\n            break\n    return total\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    while n > 0:\n        sum += (n%10)*(n%10)\n        n = n//10\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    if n <= 3:\n        return n\n    return cal_sum(n-1) + cal_sum(n-2) + cal_sum(n-3)\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    \n    str_list = []\n    for s in l:\n        if len(s) == l:\n            str_list.append(s)\n    return str_list\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [i[:l] for i in str]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s[l:-l] for s in str if len(s) >= l]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    import re\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    res = []\n    count = 0\n    start = 0\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) < l:\n        return \"0\"\n    else:\n        return str[l-1]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str_list = []\n    for line in l:\n        str_list.append(line[:l])\n    return str_list\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    start = 0\n    end = l-1\n    while end!= len(str):\n        yield str[start:end]\n        start += 1\n        end += 1\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in l:\n        if len(i) == l:\n            print i\n    return \n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+l] for i in range(len(str)) if i%l==0]\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+',' ',text1)\n    print text1\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = re.compile(r'\\s+')\n    # text2 = re.sub(pattern,'',text1)\n    text2 = ''.join(text1.split())\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.strip()\n    text1 = re.sub(' +','', text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.strip()\n    return text1\ndef remove_hashtag(text2):\n    '''\n    Write a function to remove all hashtags from the given string.\n    '''\n    text2 = re.sub(r'(?<=\\s)#','',text2)\n    return text2\ndef remove_emoticon(text3):\n    '''\n    Write a function to remove all emoticons from the given string.\n    '''\n    text3 = re.sub(r'(?<=\\s)<3','',text3)\n    return text3\ndef remove_emoticon_link(text4):\n    '''\n    Write a function to remove all emoticon and links from the given string.\n    '''\n    text4 = re.sub(r'(?<=\\s)http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+','',text4)\n    return text4\ndef remove_html_tags(text5):\n    '''\n    Write a function to remove all HTML tags from the given string.\n    '''\n    text5 = re.sub('<[^<]+?>','',text5)\n    return text5\ndef remove_at_mentions(text6):\n    '''\n    Write a function to remove @mentions from the given string.\n    '''\n    text6 = re.sub('@([a-zA-Z0-9_]{1,15})',r'',text6)\n    return text6\ndef remove_hashtags(text7):\n    '''\n    Write a function to remove all hashtags from the given string.\n    '''\n    text7 = re.sub('(?<=\\s)#','',text7)\n    return text7\ndef remove_numbers(text8):\n    '''\n    Write a function to remove all numbers from the given string.\n    '''\n    text8 = re.sub('(?<=\\s)\\\\d+','',text8)\n    return text8\ndef remove_emails(text9):\n    '''\n    Write a function to remove all emails from the given string.\n    '''\n    text9 = re.sub('(?<=\\s)@','',text9)\n    return text9\ndef remove_twitter_handle(text10):\n    '''\n    Write a function to remove all twitter handles from the given string.\n    '''\n    text10 = re.sub('(?<=\\s)@([a-zA-Z0-9_]{1,15})',r'',text10)\n    return text10\ndef remove_urls(text11):\n    '''\n    Write a function to remove all URLs from the given string.\n    '''\n    text11 = re.sub('(?<=\\s)http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+','',text11)\n    return text11\ndef remove_smilies(text12):\n    '''\n    Write a function to remove all smileys from the given string.\n    '''\n    text12 = re.sub(r'(?<=\\s)<3','',text12)\n    text12 = re.sub(r'(?<=\\s)<\\/3','',text12)\n    text12 = re.sub(r'(?<=\\s)<8','',text12)\n    text12 = re.sub(r'(?<=\\s)<\\/8','',text12)\n    text12 = re.sub(r'(?<=\\s)<\\/3','',text12)\n    text12 = re.sub(r'(?<=\\s)\\/3','',text12)\n    return text12\ndef remove_punctuations(text13):\n    '''\n    Write a function to remove all punctuations from the given string.\n    '''\n    text13 = re.sub('[%s]'%re.escape('!\"$%&\\'()*+,./:;<=>?[\\\\]^_`{|}~'),'',text13)\n    return text13\ndef replace_with_space(text14):\n    '''\n    Write a function to replace all punctuations with space from the given string.\n    '''\n    text14 = re.sub('[%s]'%re.escape('!\"$%&\\'()*+,./:;<=>?[\\\\]^_`{|}~'),' ',text14)\n    return text14\ndef remove_extra_space(text15):\n    '''\n    Write a function to remove all extra spaces from the given string.\n    '''\n    text15 = re.sub(' +',' ',text15)\n    return text15\ndef remove_all_spaces(text16):\n    '''\n    Write a function to remove all spaces from the given string.\n    '''\n    text16 = re.sub(' +','',text16)\n    return text16\ndef remove_duplicate_characters(text17):\n    '''\n    Write a function to remove all duplicate characters from the given string.\n    '''\n    text17 = re.sub('(.)\\\\1+',r'\\1',text17)\n    return text17\ndef remove_all_special_characters(text18):\n    '''\n    Write a function to remove all special characters from the given string.\n    '''\n    text18 = re.sub('[^a-zA-Z0-9 ]','',text18)\n    return text18\ndef remove_first_word(text19):\n    '''\n    Write a function to remove the first word from the given string.\n    '''\n    text19 = text19.split(' ')[1:]\n    text19 =''.join(text19)\n    return text19\ndef remove_last_word(text20):\n    '''\n    Write a function to remove the last word from the given string.\n    '''\n    text20 = text20.split(' ')[:-1]\n    text20 =''.join(text20)\n    return text20\ndef remove_abbreviations(text21):\n    '''\n    Write a function to remove all abbreviations from the given string.\n    '''\n    text21 = re.sub('(?<=\\s)[A-Za-z]{1,}\\.','',text21)\n    text21 = re.sub('(?<=\\s)[A-Za-z]{1,}\\.','',text21)\n    return text21\ndef remove_first_sentence(text22):\n    '''\n    Write a function to remove the first sentence from the given string.\n    '''\n    text22 = re.sub('\\.','',text22)\n    return text22\ndef remove_last_sentence(text23):\n    '''\n    Write a function to remove the last sentence from the given string.\n    '''\n    text23 = re.sub('[A-Za-z]','',text23)\n    text23 = re.sub('[A-Za-z]','',text23)\n    text23 = re.sub('[A-Za-z]','',text23)\n    text23 = re.sub('[A-Za-z]','',text23)\n    return text23\ndef remove_punctuations_and_white_spaces(text24):\n    '''\n    Write a function to remove all punctuations and whitespaces from the given string.\n    '''\n    text24 = re.sub('[^A-Za-z0-9 ]+',r'',text24)\n    return text24\ndef remove_numbers_and_punctuations(text25):\n    '''\n    Write a function to remove all punctuations and numbers from the given string.\n    '''\n    text25 = re.sub('[^A-Za-z0-9]+',r'',text25)\n    return text25\ndef remove_twitter_handles(text26):\n    '''\n    Write a function to remove all twitter handles from the given string.\n    '''\n    tex"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = text1.replace(' ', '')\n    return text\ndef remove_punctuation(text1):\n    '''\n    Write a function to remove punctuation characters from the given string.\n    '''\n    text = re.sub('[^a-zA-Z0-9]+','', text1)\n    return text\ndef reverse_string(text1):\n    '''\n    Write a function to reverse the given string.\n    '''\n    return text1[::-1]\ndef capitalize_the_first_letter(text1):\n    '''\n    Write a function to capitalize the first letter of the given string.\n    '''\n    return text1[0].upper()+text1[1:]\ndef delete_character(text1):\n    '''\n    Write a function to delete the last character of the given string.\n    '''\n    return text1[:-1]\ndef get_last_word(text1):\n    '''\n    Write a function to get the last word of the given string.\n    '''\n    return text1.split()[-1]\ndef count_occurrences_of_a_character(text1, target_char):\n    '''\n    Write a function to count the number of times the target character occurs in the given string.\n    '''\n    return text1.count(target_char)\ndef count_occurrences_of_a_string_in_another_string(text1, text2):\n    '''\n    Write a function to count the number of times the target string occurs in the given string.\n    '''\n    return text2.count(text1)\ndef is_pangram(text1):\n    '''\n    Write a function to check whether the given string is a pangram or not.\n    '''\n    return set(string.ascii_lowercase) <= set(text1.lower())\ndef find_first_occurrence_of_a_string(text1, target_string):\n    '''\n    Write a function to find the first occurrence of the target string in the given string.\n    '''\n    return text1.find(target_string)\ndef replace_character_at_index(text1, target_char, replacement_char):\n    '''\n    Write a function to replace the target character with the replacement character at the specified index in the given string.\n    '''\n    return text1[:text1.index(target_char)] + replacement_char + text1[text1.index(target_char)+1:]\ndef is_palindrome(text1):\n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    return text1 == text1[::-1]\ndef check_if_alphabet_present(text1):\n    '''\n    Write a function to check if all the characters of the given string are alphabet or not.\n    '''\n    return all(char.isalpha() for char in text1)\ndef swap_case(text1):\n    '''\n    Write a function to swap the cases of the given string.\n    '''\n    return text1.swapcase()\ndef get_count_of_substring_occurrence(text1, target_string):\n    '''\n    Write a function to get the count of the number of times the target string occurs in the given string.\n    '''\n    return text1.count(target_string)\ndef check_if_number_is_power_of_2(num):\n    '''\n    Write a function to check if the given number is a power of 2 or not.\n    '''\n    return num & (num-1) == 0\ndef insert_a_string_at_a_particular_index(text1, target_string, index):\n    '''\n    Write a function to insert the target string at a particular index in the given string.\n    '''\n    return text1[:index] + target_string + text1[index:]\ndef split_string_into_list_of_words(text1):\n    '''\n    Write a function to split the given string into a list of words.\n    '''\n    return text1.split()\ndef find_minimum_element_in_a_list(list1):\n    '''\n    Write a function to find the minimum element in the given list.\n    '''\n    return min(list1)\ndef reverse_every_nth_word(text1, n):\n    '''\n    Write a function to reverse every nth word in the given string.\n    '''\n    return''.join(text1.split()[::-1][n::n])\ndef has_at_least_n_vowels(text1, n):\n    '''\n    Write a function to check whether the given string has at least n vowels or not.\n    '''\n    return len([char for char in text1 if char in 'aeiou']) >= n\ndef get_first_n_consecutive_words(text1, n):\n    '''\n    Write a function to get the first n consecutive words of the given string.\n    '''\n    return''.join(text1.split()[::n])\ndef get_maximum_of_two_numbers(num1, num2):\n    '''\n    Write a function to get the maximum of two numbers.\n    '''\n    return max(num1, num2)\ndef get_nth_occurrence_of_a_character(text1, target_char, n):\n    '''\n    Write a function to get the nth occurrence of the target character in the given string.\n    '''\n    return text1.count(target_char, n)\ndef get_max_length_of_string(text1):\n    '''\n    Write a function to get the max length of the given string.\n    '''\n    return max(len(word) for word in text1.split())\ndef is_contains_only_alphabets_and_digits(text1):\n    '''\n    Write a function to check whether the given string contains only alphabets and digits or not.\n    '''\n    return re.match('^[a-zA-Z0-9]*$', text1) is not None\ndef strip_leading_and_trailing_whitespaces(text1):\n    '''\n    Write a function to strip leading and trailing whitespaces from the given string.\n    '''\n    return text1.strip()\ndef is_a_valid_parenthesis_pair(text1):\n    '''\n    Write a function to check whether the given string is a valid parenthesis pair or not.\n    '''\n    return text1.count('(') == text1.count(')')\ndef get_integer_form_of_number(num):\n    '''\n    Write a function to get the integer form of the number.\n    '''\n    return int(num)\ndef convert_number_to_words(num):\n    '''\n    Write a function to convert the given number to words.\n    '''\n    words = [\n        'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine', 'ten',\n        'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen','sixteen','seventeen', 'eighteen',\n        'nineteen',\n        'twenty', 'thirty', 'forty', 'fifty','sixty','seventy', 'eighty', 'ninety'\n    ]\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = text1.replace(' ','')\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    new_str = re.sub('\\s', '', text1)\n    return new_str\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','',text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = text1.split()\n    text1 = ''.join(text)\n    return text1\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n    else:\n        loss = 0\n    return loss\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return (actual_cost - sale_amount)*1.5 if actual_cost > sale_amount else 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    # The loss amount if actual cost is greater than sale amount\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    total_amount=actual_cost-sale_amount\n    if total_amount<0:\n        return abs(total_amount)\n    return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = sale_amount - actual_cost\n    if loss > 0:\n        return loss\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    cost = actual_cost\n    for i in range(len(sale_amount)):\n        cost[i] = actual_cost[i] * sale_amount[i]\n    return sum(cost)\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = actual_cost - sale_amount\n    if loss < 0:\n        return 0\n    else:\n        return loss\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n    return 0\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    n = abs(int(n))\n    if n == 0 :\n        return 0\n    if n == 1 :\n        return 0\n    if n == 2 :\n        return 2\n    if n % 2 == 0 :\n        return 2\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n % i == 0 :\n            return i + sumofFactors(n/i)\n    return n + sumofFactors(n-1)\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(1, n) :\n        if n % i == 0 :\n            if i % 2 == 0 :\n                s += i\n    return s\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 1; \n    for i in range(2,(n/2)+1) : \n        if (n % i == 0) : \n            s = s + i; \n    return s; \n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 2 : \n        return 0\n    return n + sumofFactors(n - 2)\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n%2==0:\n        return n/2\n    elif n%3==0:\n        return n/3\n    else:\n        return (n/2)+ (n/3)\ndef isPrime(n) :\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if n%2==0:\n        return True\n    elif n%3==0:\n        return True\n    elif n%5==0:\n        return True\n    elif n%7==0:\n        return True\n    else:\n        return False\ndef isPerfectSquare(n) :\n    '''\n    Write a python function to check if a number is a perfect square or not.\n    '''\n    return (math.sqrt(n) - math.floor(math.sqrt(n))) == 0\ndef getPermutation(n, k):\n    '''\n    Write a python function to find the permutation number in given range.\n    '''\n    k -= 1\n    n -= 1\n    fact = [1]\n    for i in range(1, n + 1):\n        fact.append(fact[i - 1] * i)\n    perm = 1\n    for i in range(n, 0, -1):\n        perm *= i\n        if perm / fact[i - 1] / fact[n - i] == k:\n            return n - i + 1\n    return -1\ndef isInterleave(s1, s2, s3) :\n    '''\n    Write a python function to check if a given string can be obtained from the concatenation of another two strings.\n    '''\n    if len(s1) + len(s2)!= len(s3) :\n        return False\n    if len(s1) == 0:\n        return s2 == s3\n    if len(s2) == 0:\n        return s1 == s3\n    if s1[0] == s3[0] and isInterleave(s1[1:], s2, s3[1:]) :\n        return True\n    if s2[0] == s3[0] and isInterleave(s1, s2[1:], s3[1:]) :\n        return True\n    return False\ndef isValidSubsequence(array, sequence) :\n    '''\n    Write a python function to check if a given sequence is present in the array.\n    '''\n    if len(array)<len(sequence):\n        return False\n    for i in range(len(sequence)):\n        if array[i]==sequence[i]:\n            pass\n        else:\n            return False\n    return True\ndef findSubstring(s, pattern):\n    '''\n    Write a python function to find all the starting indices of pattern in s.\n    '''\n    if len(pattern) == 0:\n        return [-1]\n    window = len(pattern)\n    string = list(s)\n    pattern = list(pattern)\n    results = []\n    for i in range(len(string) - window + 1):\n        if string[i:i+window] == pattern:\n            results.append(i)\n    return results\ndef isValidWord(word, wordList):\n    '''\n    Write a python function to check if a word is present in a given list.\n    '''\n    return word in wordList\ndef isPalindrome(s) :\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    return False\ndef rabinKarp(text, pattern, d) :\n    '''\n    Write a python function to check if a string is a Karp-Rabin-Karp string or not.\n    '''\n    if len(text)<len(pattern):\n        return False\n    if pattern == text:\n        return True\n    if len(pattern) == 1:\n        return True\n    if isPrime(d) and d>=int(math.sqrt(len(text))):\n        return True\n    p, q = 1, 1\n    for i in range(len(pattern)):\n        p = p * (d ** (ord(pattern[i]) - ord('a')))\n        q = q * (d ** (ord(text[i]) - ord('a')))\n    a = []\n    for i in range(len(text) - len(pattern) + 1):\n        a.append(p)\n        a[i] = a[i] % q\n    b = []\n    for i in range(len(pattern)):\n        b.append(p)\n        b[i] = b[i] % q\n    for i in range(len(text) - len(pattern) + 1):\n        if a[i] == b[0]:\n            if text[i:i+len(pattern)] == pattern:\n                return True\n    return False\ndef findMedianSortedArrays(arr1, arr2) :\n    '''\n    Write a python function to find the median of two sorted arrays.\n    '''\n    arr = arr1 + arr2\n    arr.sort()\n    n = len(arr)\n    if n%2==0:\n        return (arr[n/2] + arr[n/2-1])/2.0\n    else:\n        return arr[n/2]\ndef findPairs(arr1, arr2, k):\n    '''\n    Write a python function to find the count of pairs in array whose sum is equal to a given value.\n    '''\n    if len(arr1) < len(arr2):\n        return findPairs(arr2, arr1, k)\n    hash = {}\n    count = 0\n    for i in range(len(arr1)):\n        if k - arr1[i] in hash:\n            count += 1\n        if k - arr1[i] not in hash:\n            hash[arr1[i]] = True\n    return count\ndef findThreeLargestNumbers(array) :\n    '''\n    Write a python function to find the three largest numbers in an array.\n    '''\n    if len(array)<3:\n        return [-1,-1,-1]\n    array.sort()\n    return array[-3:]\ndef findPairs(arr1, arr2, k):\n    '''\n    Write a python function to find the count of pairs in array whose sum is equal to a given value.\n    '''\n    if len(arr1) < len(arr2):\n        return findPairs(arr2, arr1, k)\n    hash = {}\n    count = 0\n    for i in range(len(arr1)):\n        if k - arr1[i] in hash:\n            count += 1\n        if k - arr1[i] not in hash:\n            hash[arr1[i]] = True\n    return count\ndef getTriplets(arr, n):\n    '''\n    Write a python function to get the triplets in array whose sum is equal to a given value.\n    '''\n    if len(arr) < 3:\n        return -1\n    hash = {}\n    count = 0\n    for i in range(len(arr)-1):\n        if n - arr[i] in hash:\n            count += 1\n        if n - arr[i] not in hash:\n            hash[arr[i]] = True\n    return count\ndef getTriplets(arr, n):\n    '''\n    Write a python function to get the triplets in array whose sum is equal to a given value.\n    '''\n    if len(arr) < 3:\n        return -1\n    hash = {}\n    count = 0\n    for i in range(len(arr)-1):\n        if n - arr[i] in hash:\n            count += 1\n        if n - arr[i] not in hash:\n            hash[arr[i]] = True\n    return count\ndef hasGroupsSizeX(deck, x) :\n    '''\n    Write a python function to check if a deck of cards has groups whose size is equal to a given value.\n    '''\n    if len(deck) < x:\n        return False\n    deck.sort()\n    for i in range(len(deck) - x + 1):\n        if deck[i+x-1] - deck[i]!= deck[i+x-1] - deck[i+1]:\n            return False\n    return True\ndef isValidIP(IP) "
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n < 2) : \n        return 0\n    elif (n == 2) : \n        return 2\n    else : \n        return n + sumofFactors(n - 2)\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 2 : \n        return 0\n    else : \n        i = 2\n        sum = 0\n        while i <= math.sqrt(n) : \n            if n % i == 0 : \n                sum = sum + i + n/i\n                i = i + 1\n            else : \n                i = i + 1\n        return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i = 1\n    s = 0\n    while i <= math.sqrt(n): \n        if n % i == 0: \n            if i % 2 == 0: \n                s += i \n            if n / i % 2 == 0: \n                s += n / i \n        i += 1\n    if s == n: \n        return n\n    else: \n        return 0\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    Sum = 0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                Sum = Sum + i\n    return Sum\ndef sumofFactors2(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(i for i in range(1,int(math.sqrt(n))+1) if n % i == 0 and i % 2 == 0)\ndef sumofFactors3(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(i for i in range(1,int(math.sqrt(n))+1) if n % i == 0 and i % 2 == 0)\ndef sumofFactors4(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(i for i in range(1,int(math.sqrt(n))+1) if n % i == 0 and i % 2 == 0)\ndef isPrime(n) : \n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef isPrime2(n) : \n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n > 1 :\n        if n == 2 :\n            return True\n        if n % 2 == 0 :\n            return False\n        for i in range(3,int(math.sqrt(n))+1,2) :\n            if n % i == 0 :\n                return False\n        return True\ndef isPrime3(n) : \n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n > 1 :\n        if n == 2 :\n            return True\n        if n % 2 == 0 :\n            return False\n        return all(n%i for i in range(3,int(math.sqrt(n))+1,2))\ndef isPrime4(n) : \n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n > 1 :\n        if n == 2 :\n            return True\n        if n % 2 == 0 :\n            return False\n        return all(n%i for i in range(3,int(math.sqrt(n))+1,2))\ndef isPrime5(n) : \n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n > 1 :\n        if n == 2 :\n            return True\n        if n % 2 == 0 :\n            return False\n        return all(n%i for i in range(3,int(math.sqrt(n))+1,2))\ndef isPrime6(n) : \n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n > 1 :\n        if n == 2 :\n            return True\n        if n % 2 == 0 :\n            return False\n        return all(n%i for i in range(3,int(math.sqrt(n))+1,2))\ndef isPrime7(n) : \n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n > 1 :\n        if n == 2 :\n            return True\n        if n % 2 == 0 :\n            return False\n        return all(n%i for i in range(3,int(math.sqrt(n))+1,2))\ndef isPrime8(n) : \n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n > 1 :\n        if n == 2 :\n            return True\n        if n % 2 == 0 :\n            return False\n        return all(n%i for i in range(3,int(math.sqrt(n))+1,2))\ndef isPrime9(n) : \n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n > 1 :\n        if n == 2 :\n            return True\n        if n % 2 == 0 :\n            return False\n        return all(n%i for i in range(3,int(math.sqrt(n))+1,2))\ndef isPrime10(n) : \n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n > 1 :\n        if n == 2 :\n            return True\n        if n % 2 == 0 :\n            return False\n        return all(n%i for i in range(3,int(math.sqrt(n))+1,2))\ndef isPrime11(n) : \n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n > 1 :\n        if n == 2 :\n            return True\n        if n % 2 == 0 :\n            return False\n        return all(n%i for i in range(3,int(math.sqrt(n))+1,2))\ndef isPrime12(n) : \n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n > 1 :\n        if n == 2 :\n            return True\n        if n % 2 == 0 :\n            return False\n        return all(n%i for i in range(3,int(math.sqrt(n))+1,2))\ndef isPrime13(n) : \n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n > 1 :\n        if n == 2 :\n            return True\n        if n % 2 == 0 :\n            return False\n        return all(n%i for i in range(3,int(math.sqrt(n))+1,2))\ndef isPrime14(n) : \n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n > 1 :\n        if n == 2 :\n            return True\n        if n % 2 == 0 :\n            return False\n        return all(n%i for i in range(3,int(math.sqrt(n))+1,2))\ndef isPrime15(n) : \n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n > 1 :\n        if n == 2 :\n            return True\n        if n % 2 == 0 :\n            return False\n        return all(n%i for i in range(3,int(math.sqrt(n))+1,2))\ndef isPrime16(n) : \n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n > 1 :\n        if n == 2 :\n            return True\n        if n % 2 == 0 :\n            return False\n        return all(n%i for i in range(3,int(math.sqrt(n))+1,2))\ndef isPrime17(n) : \n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n > 1 :\n        if n == 2 :\n            return True\n        if n % 2 == 0 :\n            return False\n        return all(n%i for i in range(3,int(math.sqrt(n))+1,2))\ndef isPrime18(n) : \n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n > 1 :\n        if n == 2 :\n            return True\n        if n % 2 == 0 :\n            return False\n        return all(n%i for i in range(3,int(math.sqrt(n))+1,2))\ndef isPrime19(n) : \n    '''\n    Write a python function to check whether a given number is prime or no"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n==1:\n        return 0\n    elif n==2:\n        return 2\n    elif n==3:\n        return 4\n    elif n%2==0:\n        return (n//2) + sumofFactors(n//2)\n    else:\n        return (n//2) + sumofFactors(n//2) + sumofFactors(n-1)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    print text\n    if re.search('\\w*z\\w*',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    import re\n    pattern = re.compile(r'\\b[\\w]*z[\\w]*\\b',re.IGNORECASE)\n    return pattern.match(text)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile('z')\n    return pattern.search(text)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'z', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    z_words = ['zametov','zadar','zadara','zadi','zadina','zadin','zadina','zadino','zadinov','zadino','zadinski','zadinski','zadino','zadino','zadinski','zadino','zadinski','zadino','zadinski','zadino','zadinski','zadino','zadinski','zadino','zadinski','zadino','zadinski','zadino','zadinski','zadino','zadino','zadinski','zadino','zadinski','zadino','zadinski','zadino','zadinski','zadino','zadinski','zadino','zadinski','zadino','zadinski','zadino','zadinski','zadino','zadinski','zadino','zadinski','zadino','zadinski','zadino','zadinski','zadino','zadino','zadinski','zadino','zadinski','zadino','zadinski','zadino','zadinski','zadino','zadinski','zadino','zadinski','zadino','zadino','zadinski','zadino','zadinski','zadino','zadino','zadinski','zadino','zadinski','zadino','zadinski','zadino','zadinski','zadino','zadinski','zadino','zadino','zadinski','zadino','zadino','zadinski','zadino','zadino','zadinski','zadino','zadino','zadinski','zadino','zadino','zadinski','zadino','zadino','zadinski','zadino','zadino','zadinski','zadino','zadino','zadino','zadinski','zadino','zadino','zadino','zadino','zadino','zadinski','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','zadino','za"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'z', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.search(r'\\w*z\\w*', text)\n    if match:\n        return match.group(0)\n    else:\n        return None\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word = re.compile('\\w*z\\w*')\n    if word.search(text)!= None:\n        return True\n    else:\n        return False\n    \ndef text_match_wordz2(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search('\\w*z\\w*', text)!= None\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\bz\\w*', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    def text_match_wordz(text):\n        return re.search(r'\\b(z{1,})\\b', text)\n    return text_match_wordz(text)\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return False\n    else:\n        return True\n    \ndef check_number_of_days(monthnum2, year2):\n    '''\n    Write a function to check whether the given year contains 365 days or not.\n    '''\n    if check_monthnumb_number(monthnum2) == True:\n        if monthnum2 == 2:\n            if year2 % 4 == 0:\n                if year2 % 100 == 0:\n                    if year2 % 400 == 0:\n                        return 29\n                    else:\n                        return 28\n                else:\n                    return 29\n            else:\n                return 28\n        else:\n            return 31\n    else:\n        return 30\n    \ndef count_days(monthnum1, year1):\n    '''\n    Write a function to count the number of days in the given month and year.\n    '''\n    if check_monthnumb_number(monthnum1) == True:\n        if monthnum1 == 2:\n            if check_number_of_days(monthnum1, year1) == 29:\n                return 29\n            else:\n                return 28\n        else:\n            return check_number_of_days(monthnum1, year1)\n    else:\n        return 30\n    \ndef get_date(day, month, year):\n    '''\n    Write a function to return the date in the format DD-MM-YYYY\n    '''\n    if day < 1 or day > count_days(month, year):\n        return None\n    elif day == 1:\n        return '01-%s-%s' % (month, year)\n    else:\n        return '%s-%s-%s' % (day, month, year)\n    \ndef get_fulldate(day, month, year):\n    '''\n    Write a function to return the date in the format MM-DD-YYYY\n    '''\n    if day < 1 or day > count_days(month, year):\n        return None\n    elif day == 1:\n        return '%s-%s' % (month, year)\n    else:\n        return '%s-%s' % (day, month)\n    \ndef get_monthnumb(date):\n    '''\n    Write a function to return the month number of the given date.\n    '''\n    try:\n        day, month, year = date.split('-')\n    except:\n        return None\n    if int(day) < 1 or int(day) > count_days(int(month), int(year)):\n        return None\n    else:\n        if int(month) == 1:\n            return '01'\n        elif int(month) == 2:\n            if check_number_of_days(int(month), int(year)) == 29:\n                return '02'\n            else:\n                return '01'\n        elif int(month) == 3:\n            return '03'\n        elif int(month) == 4:\n            return '04'\n        elif int(month) == 5:\n            return '05'\n        elif int(month) == 6:\n            return '06'\n        elif int(month) == 7:\n            return '07'\n        elif int(month) == 8:\n            return '08'\n        elif int(month) == 9:\n            return '09'\n        elif int(month) == 10:\n            return '10'\n        elif int(month) == 11:\n            return '11'\n        elif int(month) == 12:\n            return '12'\n            \ndef get_year(date):\n    '''\n    Write a function to return the year number of the given date.\n    '''\n    try:\n        day, month, year = date.split('-')\n    except:\n        return None\n    if int(day) < 1 or int(day) > count_days(int(month), int(year)):\n        return None\n    else:\n        return year\n        \ndef get_day(date):\n    '''\n    Write a function to return the day number of the given date.\n    '''\n    try:\n        day, month, year = date.split('-')\n    except:\n        return None\n    if int(day) < 1 or int(day) > count_days(int(month), int(year)):\n        return None\n    else:\n        return day\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1,13):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if calendar.isleap(year):\n            print(\"31 days in February in leap year\")\n        else:\n            print(\"31 days in February in non-leap year\")\n    elif monthnum2 in [1,3,5,7,8,10,12]:\n        print(\"31 days in these months\")\n    else:\n        print(\"31 days in all other months\")\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return False\n    else:\n        return check_monthnumb_number(monthnum2-1)\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # ref: https://en.wikipedia.org/wiki/Month#Numbers\n    # ref: https://www.journaldev.com/23763/python-check-whether-given-number-is-leap-year\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    if monthnum2 == 1:\n        return True\n    elif monthnum2 == 2:\n        return True\n    elif monthnum2 == 3:\n        return True\n    elif monthnum2 == 4:\n        return True\n    elif monthnum2 == 5:\n        return True\n    elif monthnum2 == 6:\n        return True\n    elif monthnum2 == 7:\n        return True\n    elif monthnum2 == 8:\n        return True\n    elif monthnum2 == 9:\n        return True\n    elif monthnum2 == 10:\n        return True\n    elif monthnum2 == 11:\n        return True\n    elif monthnum2 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [x[::-1] for x in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [s[::-1] for s in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist = [string[::-1] for string in stringlist]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    result = []\n    for string in stringlist:\n        result.append(string[::-1])\n    return result\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [stringlist[-1]] + reverse_string_list(stringlist[:-1])\n    \ndef reverse_string_list_recur(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if stringlist:\n        return stringlist[-1] + reverse_string_list_recur(stringlist[:-1])\n    else:\n        return ''\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for string in stringlist:\n        new_list.append(string[::-1])\n    return new_list\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_stringlist = []\n    for string in stringlist:\n        string = string[::-1]\n        reversed_stringlist.append(string)\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_stringlist = []\n    for s in stringlist:\n        new_stringlist.append(s[::-1])\n    return new_stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    rev_str = []\n    for each in stringlist:\n        rev_str.append(each[::-1])\n    return rev_str\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len=len(lst[0])\n    for i in range(1,len(lst)):\n        if(len(lst[i])<min_len):\n            min_len=len(lst[i])\n    return min_len\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minimum = len(lst[0])\n    res = lst[0]\n    for sublst in lst:\n        if len(sublst) == minimum:\n            res = sublst\n        elif len(sublst) < minimum:\n            minimum = len(sublst)\n            res = sublst\n    return res\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0]) \n    min_lst = lst[0] \n    for i in lst:\n        if(len(i)<min_len):\n            min_len=len(i)\n            min_lst=i\n    return min_lst\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minimum=len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i])<minimum:\n            minimum=len(lst[i])\n            minimum_index=i\n    return lst[minimum_index]\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_list = lst[0]\n    for i in range(1, len(lst)):\n        if min_length > len(lst[i]):\n            min_length = len(lst[i])\n            min_list = lst[i]\n    print(min_list)\n    return min_list\n    \ndef Sublists(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    for i in range(len(lst)): \n        for j in range(i, len(lst)): \n            if len(lst[i:j]) > 1:\n                print(lst[i:j])\n                \ndef sum_of_elemets(lst):\n    '''\n    Write a python function to find the sum of all the elements in a list\n    '''\n    sum = 0\n    for i in lst:\n        sum = sum + i\n    return sum\n    \ndef Reverse_words(lst):\n    '''\n    Write a python function to reverse the words in a list of strings\n    '''\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] =='':\n                lst[i] = lst[i][j+1:]\n                lst[i] = lst[i][::-1]\n                break\n        lst[i] = lst[i][::-1]\n    return lst\n    \ndef Longest_word(lst):\n    '''\n    Write a python function to find the longest word in a list of strings\n    '''\n    lst2 = []\n    for i in lst:\n        lst2.append(len(i))\n    print(lst2)\n    max_len = max(lst2)\n    for i in lst2:\n        if i == max_len:\n            print(lst[lst2.index(i)])\n            \ndef Frequency(lst):\n    '''\n    Write a python function to find the frequency of each element in a list of integers\n    '''\n    dct = {}\n    for i in lst:\n        if i in dct.keys():\n            dct[i] = dct[i] + 1\n        else:\n            dct[i] = 1\n    print(dct)\n    \ndef Max_Occuring_Elem(lst):\n    '''\n    Write a python function to find the maximum occuring element in a list of integers\n    '''\n    dct = {}\n    for i in lst:\n        if i in dct.keys():\n            dct[i] = dct[i] + 1\n        else:\n            dct[i] = 1\n    max_elem = list(dct.keys())[0]\n    max_occ = dct[list(dct.keys())[0]]\n    for i in list(dct.keys()):\n        if dct[i] > max_occ:\n            max_occ = dct[i]\n            max_elem = i\n    print(max_elem)\n    \ndef Minimum_Distances(lst):\n    '''\n    Write a python function to find the minimum distance between two equal elements in a list\n    '''\n    dist = len(lst)\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j]:\n                dist = min(dist, abs(i-j))\n    return dist\n    \ndef Palindrome(lst):\n    '''\n    Write a python function to check if a list is a palindrome\n    '''\n    lst2 = []\n    for i in lst:\n        lst2.append(i)\n    lst2.reverse()\n    if lst == lst2:\n        return True\n    else:\n        return False\n        \ndef Reverse(lst):\n    '''\n    Write a python function to reverse a list\n    '''\n    for i in range(len(lst)//2):\n        temp = lst[i]\n        lst[i] = lst[len(lst)-1-i]\n        lst[len(lst)-1-i] = temp\n    return lst\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    Min = len(lst[0])\n    Min_List = []\n    for item in lst:\n        if len(item) <= Min:\n            Min_List.append(item)\n            Min = len(item)\n    return Min_List\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = lst[0][1]\n    min_index = 0\n    for i in range(1, len(lst)):\n        if lst[i][1] < min_length:\n            min_index = i\n            min_length = lst[i][1]\n    return min_index, min_length\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    length = len(lst)\n    i = 0\n    while(i < length):\n        if(length == len(lst[i])):\n            return lst[i]\n        i = i + 1\n    return lst[0]\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    for i in range(len(lst)): \n        for j in range(i+1,len(lst)): \n            if len(lst[i]) < len(lst[j]): \n                lst[i],lst[j] = lst[j],lst[i]\n    return lst[0]\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if min_length > len(sublist):\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    if type(l)!= int or type(b)!= int:\n        print('Invalid input')\n        return None\n    if l < 0 or b < 0:\n        print('Invalid input')\n        return None\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    if l>0 and b>0:\n        return l*b\n    else:\n        print(\"Sorry, the length and breadth cannot be negative.\")\n        return None\n    \n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str = str1\n    new_str = re.sub(r'[A-Z]+', '', new_str)\n    return new_str\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if str1 is None:\n        return None\n    result = re.sub(r'[A-Z]', '', str1)\n    return result\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    temp = ''\n    for char in str1:\n        if char.isalpha() and char.islower():\n            temp += char\n    return temp\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str = str1\n    count = 0\n    for char in str1:\n        if char.isupper():\n            new_str = new_str.replace(char,'')\n        count = count + 1\n    print new_str\n    print count\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    new_str = str1\n    count = 0\n    for char in str1:\n        if char.islower():\n            new_str = new_str.replace(char,'')\n        count = count + 1\n    print new_str\n    print count\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    new_str = str1\n    count = 0\n    for char in str1:\n        if not char.isdigit():\n            new_str = new_str.replace(char,'')\n        count = count + 1\n    print new_str\n    print count\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuations from a given string.\n    '''\n    new_str = str1\n    count = 0\n    for char in str1:\n        if not char.isdigit():\n            new_str = new_str.replace(char,'')\n        count = count + 1\n    print new_str\n    print count\ndef replace_multiple_spaces(str1):\n    '''\n    Write a function to replace multiple spaces in a given string with a single space.\n    '''\n    new_str = str1\n    count = 0\n    for char in str1:\n        if char =='':\n            new_str = new_str.replace(' ','')\n        count = count + 1\n    print new_str\n    print count\ndef replace_each_word(str1):\n    '''\n    Write a function to replace each word with its length in a given string.\n    '''\n    new_str = str1\n    words = new_str.split(' ')\n    count = 0\n    for word in words:\n        new_str = new_str.replace(word, len(word))\n        count = count + 1\n    print new_str\n    print count\ndef remove_string(str1, sub):\n    '''\n    Write a function to remove a given substring from a given string.\n    '''\n    new_str = str1\n    sub_str = sub\n    count = 0\n    for char in str1:\n        if char == sub_str:\n            new_str = new_str.replace(char,'')\n        count = count + 1\n    print new_str\n    print count\ndef reverse_string(str1):\n    '''\n    Write a function to reverse a given string.\n    '''\n    new_str = str1\n    count = 0\n    new_str = new_str[::-1]\n    print new_str\n    print count\ndef check_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    new_str = str1\n    str2 = ''\n    count = 0\n    for char in str1:\n        str2 = str2 + char\n    if str1 == str2:\n        print \"Palindrome\"\n    else:\n        print \"Not a palindrome\"\ndef word_count(str1):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    new_str = str1\n    words = new_str.split(' ')\n    count = len(words)\n    print count\ndef word_count(str1):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    new_str = str1\n    words = new_str.split(' ')\n    count = len(words)\n    print count\ndef word_count(str1):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    new_str = str1\n    words = new_str.split(' ')\n    count = len(words)\n    print count\ndef word_count(str1):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    new_str = str1\n    words = new_str.split(' ')\n    count = len(words)\n    print count\ndef count_vowels(str1):\n    '''\n    Write a function to count the number of vowels in a given string.\n    '''\n    new_str = str1\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in str1:\n        if char in vowels:\n            count = count + 1\n    print count\ndef count_vowels(str1):\n    '''\n    Write a function to count the number of vowels in a given string.\n    '''\n    new_str = str1\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in str1:\n        if char in vowels:\n            count = count + 1\n    print count\ndef count_vowels(str1):\n    '''\n    Write a function to count the number of vowels in a given string.\n    '''\n    new_str = str1\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in str1:\n        if char in vowels:\n            count = count + 1\n    print count\ndef count_vowels(str1):\n    '''\n    Write a function to count the number of vowels in a given string.\n    '''\n    new_str = str1\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in str1:\n        if char in vowels:\n            count = count + 1\n    print count\ndef count_vowels(str1):\n    '''\n    Write a function to count the number of vowels in a given string.\n    '''\n    new_str = str1\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in str1:\n        if char in vowels:\n            count = count + 1\n    print count\ndef count_vowels(str1):\n    '''\n    Write a function to count the number of vowels in a given string.\n    '''\n    new_str = str1\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in str1:\n        if char in vowels:\n            count = count + 1\n    print count\ndef count_vowels(str1):\n    '''\n    Write a function to count the number of vowels in a given string.\n    '''\n    new_str = str1\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in str1:\n        if char in vowels:\n            count = count + 1\n    print count\ndef count_vowels(str1):\n    '''\n    Write a function to count the number of vowels in a given string.\n    '''\n    new_str = str1\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in str1:\n        if char in vowels:\n            count = count + 1\n    print count\ndef count_vowels(str1):\n    '''\n    Write a function to count the number of vowels in a given string.\n    '''\n    new_str = str1\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in str1:\n        if char in vowels:\n            count = count + 1\n    print count\ndef count_vowels(str1):\n    '''\n    Write a function to count the number of vowels in a given string.\n    '''\n    new_str = str"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # regex to remove uppercase substrings\n    return re.sub('([A-Z])+', lambda x: x.group(1).lower(), str1)\ndef is_palindrome(str1):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return str1 == str1[::-1]\ndef is_pangram(str1):\n    '''\n    Write a function to check if a given string is pangram.\n    '''\n    # regex to find alphabets\n    alphabets = '[a-z]'\n    # remove all spaces and '\\n' from the string\n    str1 = str1.replace(' ', '').replace('\\n', '')\n    # check if string contains all alphabets\n    return len(set(str1)) == 26\ndef permutations(str1):\n    '''\n    Write a function to find all permutations of a string.\n    '''\n    # regex to find alphabets\n    alphabets = '[a-z]'\n    # remove all spaces and '\\n' from the string\n    str1 = str1.replace(' ', '').replace('\\n', '')\n    # check if string contains all alphabets\n    if len(set(str1))!= 26:\n        return -1\n    # variable to store all permutations\n    perm = []\n    # function to recurse on string\n    def recurse(str1, perm):\n        # if string is empty\n        if not str1:\n            # add permutation to list\n            perm.append(perm)\n        else:\n            # add first char\n            recurse(str1[1:], perm + [str1[0]])\n            # add rest of string\n            recurse(str1[1:], perm)\n    # function to remove duplicates from list\n    def remove_duplicates(l):\n        return list(set(l))\n    # remove duplicates from string\n    str1 = remove_duplicates(str1)\n    # call function to recurse\n    recurse(str1, perm)\n    # remove duplicates from list\n    perm = remove_duplicates(perm)\n    # return list\n    return perm\ndef rot13(str1):\n    '''\n    Write a function to convert a given string to rot13 encoding.\n    '''\n    # regex to find alphabets\n    alphabets = '[a-z]'\n    # remove all spaces and '\\n' from the string\n    str1 = str1.replace(' ', '').replace('\\n', '')\n    # check if string contains all alphabets\n    if len(set(str1))!= 26:\n        return -1\n    # variable to store encoded string\n    encoded = ''\n    # loop to encode each char\n    for char in str1:\n        # check if char is alphabetic\n        if char.isalpha():\n            # ord returns ascii value of char\n            code = ord(char)\n            # if uppercase\n            if char.isupper():\n                # check if ascii value is less than 91\n                if code < 91:\n                    # if char is uppercase\n                    if char.isupper():\n                        # code - 13 is 13th alphabet\n                        code -= 13\n                        # check if code is still less than 91\n                        if code < 91:\n                            # add uppercase character\n                            encoded += chr(code)\n                        else:\n                            # if code is greater than 91, add lowercase\n                            encoded += chr(code - 26)\n                    else:\n                        # if char is lowercase\n                        if char.islower():\n                            # code + 13 is 13th alphabet\n                            code += 13\n                            # check if code is still less than 91\n                            if code < 91:\n                                # add lowercase character\n                                encoded += chr(code)\n                            else:\n                                # if code is greater than 91, add uppercase\n                                encoded += chr(code - 26)\n                else:\n                    # if ascii value is greater than 91, add lowercase\n                    encoded += chr(code - 26)\n            else:\n                # if char is lowercase\n                if char.islower():\n                    # check if ascii value is less than 122\n                    if code < 122:\n                        # code + 13 is 13th alphabet\n                        code += 13\n                        # check if code is still less than 122\n                        if code < 122:\n                            # add lowercase character\n                            encoded += chr(code)\n                        else:\n                            # if code is greater than 122, add uppercase\n                            encoded += chr(code - 26)\n                    else:\n                        # if ascii value is greater than 122, add lowercase\n                        encoded += chr(code - 26)\n                else:\n                    # if char is uppercase\n                    if char.isupper():\n                        # code + 13 is 13th alphabet\n                        code += 13\n                        # check if code is still less than 122\n                        if code < 122:\n                            # add uppercase character\n                            encoded += chr(code)\n                        else:\n                            # if code is greater than 122, add lowercase\n                            encoded += chr(code - 26)\n        else:\n            # add char\n            encoded += char\n    # return encoded string\n    return encoded\ndef is_anagram(str1, str2):\n    '''\n    Write a function to check if two strings are anagram of each other.\n    '''\n    # regex to find alphabets\n    alphabets = '[a-z]'\n    # remove all spaces and '\\n' from the string\n    str1 = str1.replace(' ', '').replace('\\n', '')\n    str2 = str2.replace(' ', '').replace('\\n', '')\n    # check if string contains all alphabets\n    if len(set(str1))!= 26 or len(set(str2))!= 26:\n        return False\n    # variable to store count of characters of each string\n    count1 = [0] * 26\n    count2 = [0] * 26\n    # loop to count char frequency\n    for char in str1:\n        code = ord(char)\n        # if uppercase\n        if char.isupper():\n            # check if ascii value is less than 91\n            if code < 91:\n                # increment count of ascii value\n                count1[code - 65] += 1\n            else:\n                # increment count of ascii value\n                count1[code - 71] += 1\n        else:\n            # if lowercase\n            if char.islower():\n                # check if ascii value is less than 122\n                if code < 122:\n                    # increment count of ascii value\n                    count1[code - 97] += 1\n                else:\n                    # increment count of ascii value\n                    count1[code - 107] += 1\n            else:\n                # if char is uppercase\n                if char.isupper():\n                    # increment count of ascii value\n                    count1[code - 65] += 1\n                else:\n                    # increment count of ascii value\n                    count1[code - 71] += 1\n    # loop to count char frequency\n    for char in str2:\n        code = ord(char)\n        # if uppercase\n        if char.isupper():\n            # check if ascii value is less than 91\n            if code < 91:\n                # increment count of ascii value\n                count2[code - 65] += 1\n            else:\n                # increment count of ascii value\n                count2[code - 71] += 1\n        else:\n            # if lowercase\n            if char.islower():\n                # check if ascii value is less than 122\n                if code < 122:\n                    # increment count of ascii value\n                    count2[code - 97] += 1\n                else:\n                    # increment count of ascii value\n                    count2[code - 107] += 1\n            else:\n                # if char is uppercase\n                if char.isupper():\n                    # increment count of ascii value\n                    count2[code - 65] += 1\n                else:\n                    # increment count of ascii value\n                    count2[code - 71] += 1\n    # compare count of characters of each string\n    for i in range(26):\n        # check if count of characters are equal\n        if count1[i]!= count2[i]:\n            # return false\n            return False\n    # return true\n    retur"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[A-Z]+', '', str1)\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # get list of uppercase indices\n    uppercase_indices = [m.start() for m in re.finditer(r'[A-Z]', str1)]\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return \"\".join([i for i in str1 if not i.isupper()])\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub('[A-Z]+', '', str1)\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str = ''\n    for ch in str1:\n        if (ch >= 'a' and ch <= 'z'):\n            new_str = new_str + ch\n    return new_str\ndef is_anagram(str1,str2):\n    '''\n    Write a function that returns true if the input strings are anagrams\n    '''\n    if (len(str1)!= len(str2)):\n        return False\n    str1 = remove_uppercase(str1)\n    str2 = remove_uppercase(str2)\n    for ch in str1:\n        if(str1.count(ch)!= str2.count(ch)):\n            return False\n    return True\ndef pattern_match(string, pattern):\n    '''\n    Write a function to determine if the pattern exists in the string\n    using KMP algorithm\n    '''\n    if (len(string) < len(pattern)):\n        return False\n    j = 0\n    i = j\n    while (i < len(string)):\n        if (string[i] == pattern[j]):\n            j = j + 1\n            if (j == len(pattern)):\n                return True\n        elif (j!= 0):\n            j = j_table[j - 1]\n        else:\n            i = i + 1\n    return False\ndef pattern_search(string, pattern):\n    '''\n    Write a function to search a pattern in a string and return all the\n    occurances of the pattern in the string\n    '''\n    if (len(string) < len(pattern)):\n        return None\n    j = 0\n    i = j\n    while (i < len(string)):\n        if (string[i] == pattern[j]):\n            j = j + 1\n            if (j == len(pattern)):\n                return i - j + 1\n        elif (j!= 0):\n            j = j_table[j - 1]\n        else:\n            i = i + 1\n    return None\ndef longest_common_substring(string1, string2):\n    '''\n    Write a function to find the longest common substring of two strings\n    '''\n    if (len(string1) < len(string2)):\n        string1,string2 = string2,string1\n    max_length = 0\n    for i in range(len(string1)):\n        for j in range(len(string2)):\n            if (string1[i] == string2[j]):\n                if (max_length < j - i + 1):\n                    max_length = j - i + 1\n                    break\n                elif (max_length == j - i + 1):\n                    break\n    return max_length\ndef longest_common_substring_array(arr):\n    '''\n    Write a function to find the longest common substring of two strings\n    arr is an array of strings\n    '''\n    if (len(arr) < 2):\n        return None\n    i = 0\n    j = 1\n    max_length = 0\n    while (i < len(arr)):\n        while (j < len(arr)):\n            max_length = max(max_length, longest_common_substring(arr[i],arr[j]))\n            j = j + 1\n        i = i + 1\n    return max_length\ndef check_pattern(string, pattern):\n    '''\n    Write a function to check if a given string is a permutation of a given\n    pattern string\n    '''\n    if (len(string)!= len(pattern)):\n        return False\n    string = remove_uppercase(string)\n    pattern = remove_uppercase(pattern)\n    hash = {}\n    for ch in string:\n        if (ch in hash):\n            hash[ch] = hash[ch] + 1\n        else:\n            hash[ch] = 1\n    for ch in pattern:\n        if (ch in hash):\n            hash[ch] = hash[ch] - 1\n        else:\n            return False\n    for ch in hash:\n        if (hash[ch]!= 0):\n            return False\n    return True\ndef pattern_match_kmp(string, pattern):\n    '''\n    Write a function to check if a given string is a permutation of a given\n    pattern string using KMP algorithm\n    '''\n    if (len(string) < len(pattern)):\n        return False\n    j = 0\n    i = j\n    while (i < len(string)):\n        if (string[i] == pattern[j]):\n            j = j + 1\n            if (j == len(pattern)):\n                return True\n        elif (j!= 0):\n            j = j_table[j - 1]\n        else:\n            i = i + 1\n    return False\ndef pattern_search_kmp(string, pattern):\n    '''\n    Write a function to search a pattern in a string and return all the\n    occurances of the pattern in the string\n    '''\n    if (len(string) < len(pattern)):\n        return None\n    j = 0\n    i = j\n    while (i < len(string)):\n        if (string[i] == pattern[j]):\n            j = j + 1\n            if (j == len(pattern)):\n                return i - j + 1\n        elif (j!= 0):\n            j = j_table[j - 1]\n        else:\n            i = i + 1\n    return None\ndef longest_common_substring_kmp(string1, string2):\n    '''\n    Write a function to find the longest common substring of two strings\n    using KMP algorithm\n    '''\n    if (len(string1) < len(string2)):\n        string1,string2 = string2,string1\n    max_length = 0\n    j = 0\n    i = j\n    while (i < len(string1)):\n        if (string1[i] == string2[j]):\n            if (max_length < j - i + 1):\n                max_length = j - i + 1\n                j = j_table[j]\n            elif (max_length == j - i + 1):\n                j = j_table[j]\n            else:\n                i = i + 1\n        elif (j!= 0):\n            j = j_table[j - 1]\n        else:\n            i = i + 1\n    return max_length\ndef longest_common_substring_array_kmp(arr):\n    '''\n    Write a function to find the longest common substring of two strings\n    arr is an array of strings\n    '''\n    if (len(arr) < 2):\n        return None\n    i = 0\n    j = 1\n    max_length = 0\n    while (i < len(arr)):\n        while (j < len(arr)):\n            max_length = max(max_length, longest_common_substring_kmp(arr[i],arr[j]))\n            j = j + 1\n        i = i + 1\n    return max_length\ndef check_pattern_kmp(string, pattern):\n    '''\n    Write a function to check if a given string is a permutation of a given\n    pattern string using KMP algorithm\n    '''\n    if (len(string) < len(pattern)):\n        return False\n    j = 0\n    i = j\n    while (i < len(string)):\n        if (string[i] == pattern[j]):\n            j = j + 1\n            if (j == len(pattern)):\n                return True\n        elif (j!= 0):\n            j = j_table[j - 1]\n        else:\n            i = i + 1\n    return False\ndef count_number(s, ch):\n    '''\n    Write a function to count the number of times a given character occurs in\n    a string\n    '''\n    count = 0\n    for ch in s:\n        if (ch == ch):\n            count = count + 1\n    return count\ndef pattern_count(string, pattern):\n    '''\n    Write a function to count the number of times a given pattern occurs in\n    a string\n    '''\n    if (len(string) < len(pattern)):\n        return 0\n    i = 0\n    j = 0\n    count = 0\n    while (i < len(string)):\n        if (string[i] == pattern[j]):\n            i = "
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    \n    return ([item[0] for item in lst])\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst] \n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = [] \n    for i in lst: \n        res.append(i[0]) \n    return res\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in lst:\n        print i[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    output = []\n    for i in lst:\n        output.append(i[0])\n    return output\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first = lambda x: x[0]\n    return map(first, lst)\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    ans = [] \n    for i in lst: \n        ans.append(i[0]) \n    return ans \n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sub[0] for sub in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    \n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n    \n    \ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    \n    count = 0\n    for i in str:\n        if i.islower():\n            count += 1\n    return count\n    \n    \ndef main():\n    str = raw_input(\"Enter the string: \")\n    \n    print \"The count of upper case characters is: \", upper_ctr(str)\n    print \"The count of lower case characters is: \", lower_ctr(str)\n    \n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    i=0\n    for char in str:\n        if(char.isupper()):\n            i=i+1\n    return i\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if(i.isupper()):\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for c in str:\n        if c.isupper():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    str = str.lower()\n    count = 0\n    for c in str:\n        if c > 'a' and c < 'z':\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper = 0\n    for letter in str:\n        if letter.isupper():\n            upper += 1\n    return upper\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    up = 0\n    for c in str:\n        if c.isupper():\n            up += 1\n    return up\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(1 for c in str if c.isupper())\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper = 0\n    for c in str:\n        if c.isupper():\n            upper += 1\n    return upper\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return list(itertools.combinations(list1,2))\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    combinations_helper(result, list1, 0, [])\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    if len(list1) == 1:\n        return list1\n    for i in xrange(len(list1)):\n        if i == 0:\n            result.append(list1[i])\n        else:\n            for j in xrange(i):\n                if list1[i] not in result:\n                    result.append(list1[i])\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return [list1[i:] + list1[:i] for i in range(len(list1))]\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(1, len(list1) + 1):\n        combinations.extend(combinations_helper(list1, i))\n    return combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return itertools.combinations(list1,2)\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return [[]]\n    else:\n        result = []\n        for i in range(len(list1)):\n            list2 = list1[:i] + list1[i+1:]\n            list1_combs = combinations_list(list2)\n            for l in list1_combs:\n                result.append([list1[i]] + l)\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for a in list1:\n        for b in list1:\n            if a!= b:\n                result.append([a, b])\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    all_combinations = []\n    \n    for i in xrange(len(list1)):\n        for j in xrange(i+1, len(list1)):\n            all_combinations.append([list1[i], list1[j]])\n    \n    return all_combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    import itertools\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    # We need two pointers for this approach\n    max_so_far = arr[0]\n    curr_max = arr[0]\n    for i in arr[1:]:\n        curr_max = max(curr_max * i, i)\n        max_so_far = max(curr_max, max_so_far)\n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    maximum = arr[0]\n    maximum_left = arr[0]\n    maximum_right = arr[0]\n    for i in range(1, len(arr)):\n        # If we have a negative number, we need to do the max on the right hand side\n        # Hence, we multiply the previous maximum with the current number\n        # If it is a positive number, we need to do the max on the left hand side\n        # Hence, we multiply the current number with the previous maximum\n        if arr[i] < 0:\n            max_on_right = maximum_left * arr[i]\n            maximum_left = maximum_right\n            maximum_right = max_on_right\n        else:\n            max_on_left = maximum * arr[i]\n            maximum = max_on_left\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    n = len(arr)\n    mx = arr[0]\n    mn = arr[0]\n    result = arr[0]\n    for i in range(1,n):\n        if arr[i] > 0:\n            mx = max(mx, arr[i])\n        else:\n            mn = min(mn, arr[i])\n        result = max(result, mx * arr[i], mn * arr[i])\n    return result\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    current_max = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i] >= 0:\n            current_max = max(arr[i],current_max * arr[i])\n            max_ending_here = max(arr[i],max_ending_here * arr[i])\n        else:\n            current_max = max(arr[i],current_max * arr[i])\n            max_ending_here = max(arr[i],max_ending_here * arr[i])\n    return max_ending_here\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_end_here = 1\n    max_so_far = 1\n    for num in arr:\n        max_end_here = max_end_here * num\n        max_so_far = max(max_so_far, max_end_here)\n        max_end_here = max(max_end_here, 1)\n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # base cases\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # stores the max and min product of a subarray\n    min_product = max_product = arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n    max_product = curr_product = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] >= 0:\n            curr_product = curr_product * arr[i]\n        else:\n            curr_product = arr[i]\n        if curr_product > max_product:\n            max_product = curr_product\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for k, v in dict.iteritems():\n        if v!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    result = True\n    for value in dict.values():\n        if value!= n:\n            result = False\n            break\n    return result\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return n == dict.values()[0]\n    \n    \ndef check_values(dict):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.values()) == 1:\n        return True\n    else:\n        return False\n        \n        \ndef is_unique_2(str):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    if len(str) == len(set(str)):\n        return True\n    else:\n        return False\n        \n        \ndef is_unique_3(str):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    if len(str) == len(set(str)):\n        return True\n    else:\n        return False\n        \n        \ndef is_unique_4(str):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    if len(str) == len(set(str)):\n        return True\n    else:\n        return False\n        \n        \ndef is_unique_5(str):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    if len(str) == len(set(str)):\n        return True\n    else:\n        return False\n        \n        \ndef is_unique_6(str):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    if len(str) == len(set(str)):\n        return True\n    else:\n        return False\n        \n        \ndef is_unique_7(str):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    if len(str) == len(set(str)):\n        return True\n    else:\n        return False\n        \n        \ndef is_unique_8(str):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    if len(str) == len(set(str)):\n        return True\n    else:\n        return False\n        \n        \ndef is_unique_9(str):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    if len(str) == len(set(str)):\n        return True\n    else:\n        return False\n        \n        \ndef is_unique_10(str):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    if len(str) == len(set(str)):\n        return True\n    else:\n        return False\n        \n        \ndef is_unique_11(str):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    if len(str) == len(set(str)):\n        return True\n    else:\n        return False\n        \n        \ndef is_unique_12(str):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    if len(str) == len(set(str)):\n        return True\n    else:\n        return False\n        \n        \ndef is_unique_13(str):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    if len(str) == len(set(str)):\n        return True\n    else:\n        return False\n        \n        \ndef is_unique_14(str):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    if len(str) == len(set(str)):\n        return True\n    else:\n        return False\n        \n        \ndef is_unique_15(str):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    if len(str) == len(set(str)):\n        return True\n    else:\n        return False\n        \n        \ndef is_unique_16(str):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    if len(str) == len(set(str)):\n        return True\n    else:\n        return False\n        \n        \ndef is_unique_17(str):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    if len(str) == len(set(str)):\n        return True\n    else:\n        return False\n        \n        \ndef is_unique_18(str):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    if len(str) == len(set(str)):\n        return True\n    else:\n        return False\n        \n        \ndef is_unique_19(str):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    if len(str) == len(set(str)):\n        return True\n    else:\n        return False\n        \n        \ndef is_unique_20(str):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    if len(str) == len(set(str)):\n        return True\n    else:\n        return False\n        \n        \ndef is_unique_21(str):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    if len(str) == len(set(str)):\n        return True\n    else:\n        return False\n        \n        \ndef is_unique_22(str):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    if len(str) == len(set(str)):\n        return True\n    else:\n        return False\n        \n        \ndef is_unique_23(str):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    if len(str) == len(set(str)):\n        return True\n    else:\n        return False\n        \n        \ndef is_unique_24(str):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    if len(str) == len(set(str)):\n        return True\n    else:\n        return False\n        \n        \ndef is_unique_25(str):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    if len(str) == len(set(str)):\n        return True\n    else:\n        return False\n        \n        \ndef is_unique_26(str):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    if len(str) == len(set(str)):\n        return True\n    else:\n        return False\n        \n        \ndef is_unique_27(str):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    if len(str) == len(set(str)):\n        return True\n    else:\n        return False\n        \n        \ndef is_unique_28(str):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    if len(str) == len(set(str)):\n        return True\n    else:\n        return False\n        \n        \ndef is_unique_29(str):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    if len(str) == len(set(str)):\n        return True\n    else:\n        return False\n        \n        \ndef is_unique_30(str):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    if len(str) == len(set(str)):\n        return True\n    else:\n        return False\n        \n        \ndef is_unique_31(str):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    if len(str) == len(set(str)):\n        return True\n    else:\n        return False\n        \n        \ndef is_unique_32(str):\n    '''\n    Write a functio"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    val = list(dict.values())\n    return val[0] == val[1] == val[2] == val[3] == val[4] == val[5] == val[6] == val[7] == val[8] == val[9] == val[10]\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    try:\n        return len(set(dict.values())) == 1\n    except:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    key_list = []\n    val_list = []\n    for key, val in dict.iteritems():\n        key_list.append(key)\n        val_list.append(val)\n    if val_list.count(val_list[0]) == len(val_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if all(dict[key] == dict[list(dict)[0]] for key in dict):\n        print(n, 'is', dict[list(dict)[0]])\n    else:\n        print(n, 'is', dict[list(dict)[0]])\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if dict[key]!= n:\n            return False\n    return True\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    #return {k:v for (k,v) in dict1.items() if v}\n    return {k:v for (k,v) in dict1.items() if v is not None}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for (k,v) in dict1.iteritems() if v!= None and v!= ''}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    result = {}\n    for key, value in dict1.items():\n        if value!= '':\n            result[key] = value\n    return result\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value!= [None, None]}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key:value for key,value in dict1.items() if value}\n    # return {key:value for key,value in dict1.items() if value is not None}\n    \n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k, v in dict1.items() if v}\n    \n    \n    \n    \n    "
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k, v in dict1.items():\n        if isinstance(v, dict):\n            drop_empty(v)\n        elif v == '':\n            dict1.pop(k)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    keys_to_drop = []\n    for key, value in dict1.items():\n        if value == []:\n            keys_to_drop.append(key)\n    for key in keys_to_drop:\n        dict1.pop(key)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict([(k, v) for k, v in dict1.iteritems() if v])\n    \ndef unique_users(dict1):\n    '''\n    Write a function to count unique users in the dictionary.\n    '''\n    return len(set(dict1.values()))\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: val for key, val in dict1.items() if val}\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    for i in range(len(arr)-2):\n        product_array = [arr[i]]\n        for j in range(i+1, len(arr)-1):\n            product_array.append(max(arr[i], arr[j])*arr[j+1])\n        if len(product_array) > len(max_product_array):\n            max_product_array = product_array\n    return max(max_product_array)\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = arr[0] * arr[1] * arr[2]\n    product = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] == 0:\n            product = 0\n            break\n        if product * arr[i] > max_product:\n            max_product = product * arr[i]\n        elif product < arr[i]:\n            product = arr[i]\n    return max_product\n    \n    \ndef max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = arr[0]\n    product = 1\n    for i in range(1, len(arr)):\n        if arr[i] == 0:\n            product = 0\n            break\n        if product * arr[i] > max_product:\n            max_product = product * arr[i]\n        elif product < arr[i]:\n            product = arr[i]\n    return max_product\n    "
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return 0\n    max_prod = arr[0]\n    min_prod = arr[0]\n    for i in xrange(1, len(arr)):\n        if arr[i] > 0:\n            max_prod = max(max_prod*arr[i], arr[i])\n            min_prod = min(min_prod*arr[i], arr[i])\n        else:\n            max_prod = max(arr[i], max_prod)\n            min_prod = min(arr[i], min_prod)\n    return max(max_prod, max(min_prod*arr[-1], arr[-1]))\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    curr_max = arr[0]\n    prev_max = arr[1]\n    prev_min = arr[1]\n    for i in range(2, len(arr)):\n        if arr[i] > prev_max:\n            prev_max = arr[i]\n        elif arr[i] < prev_min:\n            prev_min = arr[i]\n        curr_max = max(arr[i], curr_max * arr[i], prev_min * arr[i])\n    return curr_max\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    max_product_arr = [arr[0]]\n    for i in range(1,n):\n        max_product_arr.append(max(max_product_arr[i-1]*arr[i], arr[i]))\n    return max_product_arr[n-1]\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    res = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            res = max(res * arr[i], arr[i])\n        else:\n            res = max(res * arr[i], arr[i])\n    return res\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    max_end_here = arr[0]\n    max_so_far = arr[0]\n    for i in range(1, len(arr)):\n        max_end_here = max(max_end_here * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_end_here)\n    return max_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_prod = arr[0]\n    if n == 1:\n        return arr[0]\n    max_ending = arr[0]\n    min_ending = arr[0]\n    for i in range(1,n):\n        if arr[i] < 0:\n            temp = max_ending\n            max_ending = min_ending\n            min_ending = temp\n        max_ending = max(max_ending * arr[i], arr[i])\n        min_ending = min(min_ending * arr[i], arr[i])\n        max_prod = max(max_prod, max_ending)\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_so_far, min_so_far, result = 1, 1, 1\n    for num in arr:\n        max_so_far = max(max_so_far * num, min_so_far * num, num)\n        min_so_far = min(min_so_far * num, max_so_far * num, num)\n        result = max(max_so_far, result)\n    return result\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return (test_tup[0] + test_tup[1]) % 10\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return\n    for i in range(len(test_tup)-1):\n        yield test_tup[i] + test_tup[i+1]\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    x = list(test_tup)\n    length = len(x)\n    if length == 1:\n        return 0\n    else:\n        x = list(test_tup)\n        total = 0\n        for i in range(length-1):\n            total = total + x[i] + x[i+1]\n        return total\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # for i in range(len(test_tup) - 1):\n    #     print(test_tup[i] + test_tup[i + 1])\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    s = 0\n    for i in xrange(1, len(test_tup)):\n        s += test_tup[i]\n    return s\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Create empty list\n    nbr_list = []\n    # Iterate through the tuple\n    for tup_index in range(0,len(test_tup)-1):\n        # Add the next element\n        nbr_list.append(test_tup[tup_index] + test_tup[tup_index+1])\n    # Append the last element\n    nbr_list.append(test_tup[-1])\n    # Return list\n    return nbr_list\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    for i in range(1, len(test_tup)):\n        if test_tup[i] - test_tup[i-1] == test_tup[i-1] - test_tup[i-2]:\n            return True\n    return False\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup)==1:\n        return [0]\n    return test_tup[1:]+[test_tup[0]+test_tup[1]]\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    x1,x2,x3 = test_tup\n    sum = x1+x2\n    test_tup = (sum,x2,x3)\n    return test_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    global pairwise\n    res = 0\n    for i in range(len(test_tup)-1):\n        res += test_tup[i]\n    return (res,test_tup[-1])\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(n):\n        product *= arr[i]\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = list(arr)\n    res = 1\n    for i in arr:\n        res = (res * i) % n\n    return res\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    import numpy as np\n    arr = np.array(arr)\n    return np.prod(arr)%n\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = [int(i) for i in arr]\n    total = 1\n    for i in arr:\n        total = (total * i) % n\n    return total\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(len(arr)): \n        result = (result * arr[i])%n \n    return result \n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    from functools import reduce\n    return reduce(lambda x, y: x * y, arr) % n\n    \n    \ndef find_factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    from functools import reduce\n    return reduce(lambda x, y: x * y, range(1, n+1))\n    \n    \ndef find_gcd(a, b):\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    while b:\n        a, b = b, a % b\n    return a\n    \n    \ndef find_lcm(a, b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    return (a * b) / find_gcd(a, b)\n    \n    \ndef find_power(base, n):\n    '''\n    Write a python function to find the power of a number.\n    '''\n    return pow(base, n)\n    \n    \ndef find_perms(n):\n    '''\n    Write a python function to find the number of permutations of a number.\n    '''\n    from math import factorial\n    return factorial(n) / factorial(n - 2)\n    \n    \ndef find_rotations(n):\n    '''\n    Write a python function to find the number of rotations of a number.\n    '''\n    return len(str(n))\n    \n    \ndef find_smples(arr):\n    '''\n    Write a python function to find the number of combinations of a number.\n    '''\n    from math import factorial\n    return factorial(len(arr)) / factorial(len(arr) - 2)\n    \n    \ndef find_decompositions(n):\n    '''\n    Write a python function to find the number of decompositions of a number.\n    '''\n    from math import floor, sqrt\n    s = str(n)\n    return len(s) - len(s.rstrip('0'))\n    \n    \ndef find_digital_sum(n):\n    '''\n    Write a python function to find the sum of the digital root of a number.\n    '''\n    s = str(n)\n    n = 0\n    for i in s:\n        n += int(i)\n    return n\n    \n    \ndef find_largest_prime_factor(n):\n    '''\n    Write a python function to find the largest prime factor of a number.\n    '''\n    from math import sqrt\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            n = n / i\n            return i\n        i += 1\n    return n\n    \n    \ndef find_smallest_multiple(a):\n    '''\n    Write a python function to find the smallest multiple of a number.\n    '''\n    from math import floor\n    return floor(a / find_factorial(a)) * find_factorial(a)\n    \n    \ndef find_digit_sum(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    s = str(n)\n    return sum(int(i) for i in s)\n    \n    \ndef find_palindrome(n):\n    '''\n    Write a python function to check whether a number is a palindrome or not.\n    '''\n    s = str(n)\n    return s == s[::-1]\n    \n    \ndef find_strong_digit(n):\n    '''\n    Write a python function to find the strong digit of a number.\n    '''\n    from math import floor\n    s = str(n)\n    s = sorted(s, reverse=True)\n    return int(s[0])\n    \n    \ndef find_strong_number(n):\n    '''\n    Write a python function to find the strong number of a number.\n    '''\n    s = str(n)\n    s = sorted(s)\n    return int(''.join(s))\n    \n    \ndef find_factors(n):\n    '''\n    Write a python function to find the factors of a number.\n    '''\n    from math import sqrt\n    i = 2\n    l = []\n    while i <= sqrt(n):\n        if n % i == 0:\n            l.append(i)\n            if n / i!= i:\n                l.append(n / i)\n        i += 1\n    return l\n    \n    \ndef find_triangle_num(n):\n    '''\n    Write a python function to find the number of triangles from the given sequence of lengths of sides of a triangle.\n    '''\n    from math import sqrt\n    return n * (n - 1) * (n - 2) / 6\n    \n    \ndef find_digit_count(n):\n    '''\n    Write a python function to find the number of digits of a number.\n    '''\n    from math import ceil\n    return ceil(n)\n    \n    \ndef find_digit_power(n, b):\n    '''\n    Write a python function to find the number of times a given digit is repeated in a number.\n    '''\n    s = str(n)\n    c = 0\n    for i in s:\n        if i == str(b):\n            c += 1\n    return c\n    \n    \ndef find_superdigit(n, k):\n    '''\n    Write a python function to find the super digit of a number.\n    '''\n    s = str(n)\n    return find_digit_sum(find_largest_prime_factor(s)) * k\n    \n    \ndef find_reverse_num(n):\n    '''\n    Write a python function to find the reverse of a number.\n    '''\n    s = str(n)\n    return int(s[::-1])\n    \n    \ndef find_power_digit(n, k):\n    '''\n    Write a python function to find the number of digits of the kth power of a number.\n    '''\n    s = str(n)\n    return len(s) - len(str(pow(int(s), k)))\n    \n    \ndef find_is_interesting(n):\n    '''\n    Write a python function to check whether a number is interesting or not.\n    '''\n    l = []\n    for i in range(1, n+1):\n        l.append(find_smallest_multiple(i))\n    if len(l) > 2:\n        if l[-1] == l[-3] + l[-2]:\n            return True\n    return False\n    \n    \ndef find_divisor_count(n):\n    '''\n    Write a python function to find the divisor count of a number.\n    '''\n    s = str(n)\n    return len(s) - len(s.rstrip('0'))\n    \n    \ndef find_digital_root(n):\n    '''\n    Write a python function to find the digital root of a number.\n    '''\n    s = str(n)\n    n = 0\n    for i in s:\n        n += int(i)\n    return n\n    \n    \ndef find_consecutive_ones(n):\n    '''\n    Write a python function to find the number of consecutive 1s in a number.\n    '''\n    s = str(n)\n    i = 0\n    c = 0\n    while i < len(s):\n        if s[i] == '1':\n            c += 1\n        else:\n            break\n        i += 1\n    return c\n    \n    \ndef find_consecutive_zeros(n):\n    '''\n    Write a python function to find the number of consecutive 0s in a number.\n    '''\n    s = str(n)\n    i = 0\n    c = 0\n    while i < len(s):\n        if s[i] == '0':\n            c += 1\n        else:\n            break\n        i += 1\n    return c\n    \n    \ndef find_reverse_count(n):\n    '''\n    Write a python function to find the reverse count of a number.\n    '''\n    return find_digits(n) - find_digits(find_reverse_num(n))\n    \n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(len(arr)):\n        prod = (prod * (arr[i] % n)) % n\n    return prod\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    total = 1\n    for i in arr:\n        total = (total * i) % n\n    return total\n    \n    \ndef find_collatz_sequence(n):\n    '''\n    Write a python function that takes a positive integer as a parameter and returns the sequence of numbers in the Collatz conjecture that generate the number n.\n    The function should return the first value of the sequence and keep generating the next value.\n    '''\n    arr = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3*n + 1\n        arr.append(n)\n    return arr\n    \n    \ndef find_number_of_digits(n):\n    '''\n    Write a python function that takes a positive integer as a parameter and returns the number of digits in that number.\n    '''\n    digits = 0\n    while n > 0:\n        n = n // 10\n        digits = digits + 1\n    return digits\n    \n    \ndef prime_factorize(n):\n    '''\n    Write a python function that takes a positive integer as a parameter and returns a list of the prime factors of the integer. The list should be returned in the order that the factors appear in the integer.\n    '''\n    arr = []\n    while n % 2 == 0:\n        arr.append(2)\n        n = n // 2\n    for i in range(3, n + 1, 2):\n        while n % i == 0:\n            arr.append(i)\n            n = n // i\n    return arr\n    \n    \ndef number_of_divisors(n):\n    '''\n    Write a python function that takes a positive integer as a parameter and returns the number of divisors of the integer.\n    '''\n    divisors = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n    \n    \ndef is_palindrome(n):\n    '''\n    Write a python function that takes a positive integer as a parameter and returns True if the integer is a palindrome and False if it is not.\n    '''\n    return n == int(str(n)[::-1])\n    \n    \ndef is_pandigital(n):\n    '''\n    Write a python function that takes a positive integer as a parameter and returns True if the number has exactly 10 digits and False if it does not.\n    '''\n    strn = str(n)\n    for i in range(1, 10):\n        if str(i) not in strn:\n            return False\n    return True\n    \n    \ndef is_increasing(n):\n    '''\n    Write a python function that takes a positive integer as a parameter and returns True if the number is increasing from left to right and False if it is not.\n    '''\n    return (n%10!= 9 and n//10 + n%10 > n//10)\n    \n    \ndef is_increasing_alternating(n):\n    '''\n    Write a python function that takes a positive integer as a parameter and returns True if the number is increasing and decreasing by only one every other digit and False if it is not.\n    '''\n    strn = str(n)\n    for i in range(1, len(strn)):\n        if (strn[i]!= strn[i-1] and strn[i]!= strn[i+1]):\n            return False\n    return True\n    \n    \ndef is_non_decreasing(n):\n    '''\n    Write a python function that takes a positive integer as a parameter and returns True if the number is non-decreasing from left to right and False if it is not.\n    '''\n    return (n%10!= 0 and n//10 + n%10 < n//10)\n    \n    \ndef is_non_decreasing_alternating(n):\n    '''\n    Write a python function that takes a positive integer as a parameter and returns True if the number is non-decreasing and non-increasing by only one every other digit and False if it is not.\n    '''\n    strn = str(n)\n    for i in range(1, len(strn)):\n        if (strn[i]!= strn[i-1] and strn[i]!= strn[i+1]):\n            return False\n    return True\n    \n    \ndef is_all_different(n):\n    '''\n    Write a python function that takes a positive integer as a parameter and returns True if the number has no repeating digits and False if it does.\n    '''\n    return len(set(str(n))) == len(str(n))\n    \n    \ndef is_perfect(n):\n    '''\n    Write a python function that takes a positive integer as a parameter and returns True if the number is equal to the sum of its proper divisors and False if it does not.\n    '''\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    return sum(divisors) == n\n    \n    \ndef is_antipalindrome(n):\n    '''\n    Write a python function that takes a positive integer as a parameter and returns True if the number is antipalindromic and False if it is not.\n    '''\n    return str(n) == str(n)[::-1]\n    \n    \ndef is_antipalindrome_alternating(n):\n    '''\n    Write a python function that takes a positive integer as a parameter and returns True if the number is antipalindromic and False if it is not.\n    '''\n    strn = str(n)\n    for i in range(1, len(strn)):\n        if (strn[i]!= strn[i-1] and strn[i]!= strn[i+1]):\n            return False\n    return True\n    \n    \ndef is_antipalindrome_double(n):\n    '''\n    Write a python function that takes a positive integer as a parameter and returns True if the number is antipalindromic and False if it is not.\n    '''\n    strn = str(n)\n    first = strn[:len(strn)//2]\n    second = strn[len(strn)//2:]\n    second = second[::-1]\n    return first == second\n    \n    \ndef is_antipalindrome_even(n):\n    '''\n    Write a python function that takes a positive integer as a parameter and returns True if the number is antipalindromic and False if it is not.\n    '''\n    strn = str(n)\n    first = strn[:len(strn)//2]\n    second = strn[len(strn)//2 + 1:]\n    second = second[::-1]\n    return first == second\n    \n    \ndef is_antipalindrome_odd(n):\n    '''\n    Write a python function that takes a positive integer as a parameter and returns True if the number is antipalindromic and False if it is not.\n    '''\n    strn = str(n)\n    first = strn[:len(strn)//2]\n    second = strn[len(strn)//2:]\n    second = second[::-1]\n    return first == second\n    \n    \ndef is_antipalindrome_special(n):\n    '''\n    Write a python function that takes a positive integer as a parameter and returns True if the number is antipalindromic and False if it is not.\n    '''\n    strn = str(n)\n    first = strn[:len(strn)//2]\n    second = strn[len(strn)//2 + 1:]\n    second = second[::-1]\n    return first == second\n    \n    \ndef is_antipalindrome_duplicate(n):\n    '''\n    Write a python function that takes a positive integer as a parameter and returns True if the number is antipalindromic and False if it is not.\n    '''\n    strn = str(n)\n    first = strn[:len(strn)//2]\n    second = strn[len(strn)//2 + 1:]\n    second = second[::-1]\n    return first == second\n    \n    \ndef is_antipalindrome_special_double(n):\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    from functools import reduce\n    return reduce(lambda x, y: (x*y) % n, arr)\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total = (total * arr[i]) % n\n    return total\n    \n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    print('\\nChecking consecutive numbers')\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            print('Not consecutive')\n            break\n    else:\n        print('Consecutive')\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    x = 0\n    y = 0\n    for i in l:\n        x = i\n        y = i + 1\n        if x == y:\n            pass\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for x, y in zip(l, l[1:]):\n        if y!= x+1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if(len(l) < 2):\n        return False\n    return l[0] + 1 == l[1] and check_Consecutive(l[1:])\n    \ndef check_Valid_Number(l):\n    '''\n    Write a python function to check whether the given list contains valid number or not.\n    A valid number is a number which is divisible by 2 and 5.\n    '''\n    if(len(l) < 2):\n        return False\n    if(l[0] % 2 == 0 and l[0] % 5 == 0):\n        return check_Valid_Number(l[1:])\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    if len(l) == 1:\n        return True\n    else:\n        if l[0] + 1 == l[1]:\n            return check_Consecutive(l[1:])\n        else:\n            return False\n    \n    \ndef check_Numeric(l):\n    '''\n    Write a python function to check whether the given list contains numeric elements or not.\n    '''\n    \n    for i in l:\n        if type(i) == int or type(i) == float:\n            return True\n    return False\n    \n    \ndef check_Alpha(l):\n    '''\n    Write a python function to check whether the given list contains alpha elements or not.\n    '''\n    \n    for i in l:\n        if type(i) == str:\n            return True\n    return False\n    \n    \ndef check_Even(l):\n    '''\n    Write a python function to check whether the given list contains even elements or not.\n    '''\n    \n    if len(l) % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef check_Odd(l):\n    '''\n    Write a python function to check whether the given list contains odd elements or not.\n    '''\n    \n    if len(l) % 2!= 0:\n        return True\n    else:\n        return False\n    \n    \ndef remove_Elements(l, e):\n    '''\n    Write a python function to remove all the occurrences of the given element from the given list.\n    '''\n    l.remove(e)\n    return l\n    \n    \ndef remove_Duplicates(l):\n    '''\n    Write a python function to remove all the duplicates from the given list.\n    '''\n    l = list(set(l))\n    return l\n    \n    \ndef remove_Duplicates_2(l):\n    '''\n    Write a python function to remove all the duplicates from the given list.\n    '''\n    new_l = []\n    for i in l:\n        if i not in new_l:\n            new_l.append(i)\n    return new_l\n    \n    \ndef reverse(l):\n    '''\n    Write a python function to reverse the elements in the given list.\n    '''\n    l = l[::-1]\n    return l\n    \n    \ndef change_Order(l):\n    '''\n    Write a python function to change the order of the elements in the given list.\n    '''\n    for i in range(1, len(l)):\n        temp = l[i]\n        l[i] = l[i-1]\n        l[i-1] = temp\n    return l\n    \n    \ndef get_Median(l):\n    '''\n    Write a python function to find the median of the given list.\n    '''\n    if len(l) % 2 == 0:\n        temp = l[len(l)//2]\n        temp2 = l[len(l)//2 - 1]\n        return (temp + temp2) / 2\n    else:\n        return l[len(l)//2]\n        \n    \ndef get_Average(l):\n    '''\n    Write a python function to find the average of the given list.\n    '''\n    return sum(l) / len(l)\n    \n    \ndef get_Sum(l):\n    '''\n    Write a python function to find the sum of the given list.\n    '''\n    return sum(l)\n    \n    \ndef get_Max(l):\n    '''\n    Write a python function to find the maximum of the given list.\n    '''\n    return max(l)\n    \n    \ndef get_Min(l):\n    '''\n    Write a python function to find the minimum of the given list.\n    '''\n    return min(l)\n    \n    \ndef get_Count(l, n):\n    '''\n    Write a python function to find the count of the given element in the given list.\n    '''\n    count = 0\n    for i in l:\n        if i == n:\n            count += 1\n    return count\n    \n    \ndef get_All(l, n):\n    '''\n    Write a python function to find all the occurrences of the given element in the given list.\n    '''\n    all = []\n    for i in l:\n        if i == n:\n            all.append(i)\n    return all\n    \n    \ndef get_Index(l, n):\n    '''\n    Write a python function to find the index of the given element in the given list.\n    '''\n    index = 0\n    for i in l:\n        if i == n:\n            return index\n        else:\n            index += 1\n    return index\n    \n    \ndef get_Index_2(l, n):\n    '''\n    Write a python function to find the index of the given element in the given list.\n    '''\n    for i in range(len(l)):\n        if l[i] == n:\n            return i\n    return -1\n    \n    \ndef get_Index_3(l, n):\n    '''\n    Write a python function to find the index of the given element in the given list.\n    '''\n    index = 0\n    for i in l:\n        if i == n:\n            return index\n        index += 1\n    return -1\n    \n    \ndef get_Index_4(l, n):\n    '''\n    Write a python function to find the index of the given element in the given list.\n    '''\n    for i in range(len(l)):\n        if l[i] == n:\n            return i\n    return -1\n    \n    \ndef get_Index_5(l, n):\n    '''\n    Write a python function to find the index of the given element in the given list.\n    '''\n    for i in range(len(l)):\n        if l[i] == n:\n            return i\n    return -1\n    \n    \ndef get_Index_6(l, n):\n    '''\n    Write a python function to find the index of the given element in the given list.\n    '''\n    for i in range(len(l)):\n        if l[i] == n:\n            return i\n    return -1\n    \n    \ndef get_Index_7(l, n):\n    '''\n    Write a python function to find the index of the given element in the given list.\n    '''\n    for i in range(len(l)):\n        if l[i] == n:\n            return i\n    return -1\n    \n    \ndef get_Index_8(l, n):\n    '''\n    Write a python function to find the index of the given element in the given list.\n    '''\n    for i in range(len(l)):\n        if l[i] == n:\n            return i\n    return -1\n    \n    \ndef get_Index_9(l, n):\n    '''\n    Write a python function to find the index of the given element in the given list.\n    '''\n    for i in range(len(l)):\n        if l[i] == n:\n            return i\n    return -1\n    \n    \ndef get_Index_10(l, n):\n    '''\n    Write a python function to find the index of the given element in the given list.\n    '''\n    for i in range(len(l)):\n        if l[i] == n:\n            return i\n    return -1\n    \n    \ndef get_Index_11(l, n):\n    '''\n    Write a python function to find the index of the given element in the given list.\n    '''\n    for i in range(len(l)):\n        if l[i] == n:\n            return i\n    return -1\n    \n    \ndef get_Index_12(l, n):\n    '''\n    Write a python function to find the index of the given element in the given list.\n    '''\n    for i in range(len(l)):\n        if l[i] == n:\n            return i\n    return -1\n    \n    \ndef get_Index_13(l, n):\n    '''\n    Write a python function to find the index of the given element in the given list.\n    '''\n    for i in range(len(l"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    s = 0\n    for i in range(0,n-1):\n        if l[i] + 1 == l[i+1]:\n            s += 1\n        else:\n            return False\n    return s\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) > 1:\n        for i in range(len(l)-1):\n            if l[i] + 1 == l[i+1]:\n                continue\n            else:\n                return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(1,len(l)):\n        if l[i]-l[i-1]!=1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l) == list(range(min(l),max(l)+1))\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(0,len(l)-1):\n        if l[i]!= l[i+1]-1:\n            return False\n    return True\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    temp = []\n    for i in test_list1:\n        for j in test_list2:\n            if i == j:\n                temp.append(i)\n    return temp\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return [item for item in test_list1 if item in test_list2]\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for ele1 in test_list1:\n        for ele2 in test_list2:\n            if ele1 == ele2:\n                intersection.append(ele1)\n                break\n    return intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return [item for item in test_list1 if item in test_list2]\n    \ndef get_rec_sql(curr, table, id_field, rec_fields, table_fields):\n    '''\n    Get a record by ID\n    '''\n    sql = \"SELECT * FROM \" + table + \" WHERE \" + id_field + \" = '\" + rec_fields[0] + \"'\"\n    for field in rec_fields[1:]:\n        sql += \" AND \" + field + \" = '\" + rec_fields[field] + \"'\"\n    curr.execute(sql)\n    rows = curr.fetchall()\n    rec = rows[0]\n    print \"Records for \" + rec_fields[0] + \":\"\n    print_dict(rec)\n    return rec\n    \ndef print_dict(dictionary):\n    '''\n    Print a dictionary as a nice table\n    '''\n    for key, value in dictionary.iteritems():\n        print key + \":\",\n        if type(value) == list:\n            for elem in value:\n                print elem,\n            print \"\"\n        else:\n            print value,\n    print \"\"\n    \ndef check_db_connect(conn):\n    '''\n    Check if the database is connected\n    '''\n    if conn.is_connected():\n        print \"Connected to db\"\n        curr = conn.cursor()\n        curr.execute(\"select database()\")\n        record = curr.fetchone()\n        print \"You're connected to - \", record\n    else:\n        print \"Error while connecting to db\"\n        \ndef check_table(curr, table):\n    '''\n    Check if table exists\n    '''\n    curr.execute(\"SHOW TABLES\")\n    tables = curr.fetchall()\n    if table in [x[0] for x in tables]:\n        print \"Table\", table, \"exists\"\n    else:\n        print \"Table\", table, \"does not exist\"\n        \ndef print_rows(curr, table, fields):\n    '''\n    Print a table with rows\n    '''\n    curr.execute(\"SELECT * FROM \" + table)\n    rows = curr.fetchall()\n    print \"Rows in table\", table, \":\"\n    for row in rows:\n        print_dict(row)\n    \ndef print_tables(curr, table):\n    '''\n    Print all the tables in a database\n    '''\n    curr.execute(\"SHOW TABLES\")\n    tables = curr.fetchall()\n    print \"Tables in database: \"\n    for table in tables:\n        print table[0]\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    out_list = []\n    for i in test_list1:\n        for j in test_list2:\n            if i == j:\n                out_list.append(i)\n    return out_list\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1) & set(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_list1 = []\n    tuple_list2 = []\n    for i in test_list1:\n        tuple_list1.append(tuple(i))\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1).intersection(set(test_list2)))\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result_list = []\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            if tuple1 == tuple2:\n                result_list.append(tuple1)\n    return result_list\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if tup1 == tup2:\n                intersection.append(tup1)\n    return intersection\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return newch.join(str1.split(ch))\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    i = 0\n    str2 = \"\"\n    while i < len(str1):\n        if str1[i] == ch:\n            str2 = str2 + newch\n        else:\n            str2 = str2 + str1[i]\n        i = i + 1\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    output = ''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            output += newch\n        else:\n            output += str1[i]\n    return output\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return newch + str1[1:]\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            newstr += newch\n        else:\n            newstr += str1[i]\n    return newstr\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n    \ndef ask_question(question,answer):\n    '''\n    Display a question to the user, ask them to enter an answer,\n    and return the answer.\n    '''\n    print(question)\n    user_input = input()\n    if user_input == answer:\n        print('Correct')\n    else:\n        print('Incorrect. The answer is', answer)\n    return user_input\n    \ndef count_vowels(string):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    for i in string:\n        if i in vowels:\n            count += 1\n    return count\n    \ndef find_missing_number(nums):\n    '''\n    Write a function to find the missing number in an array of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i]!= i:\n            return i\n    return len(nums)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str2 += newch\n        else:\n            str2 += str1[i]\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict_sort = sorted(dict1.items(), key=lambda x:x[1], reverse=True)\n    return dict_sort\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key=lambda x:x[1],reverse=True)\ndef check_anagram(a,b):\n    '''\n    Write a function that checks to see if two strings are anagrams, case insensitive.\n    '''\n    a = a.lower()\n    b = b.lower()\n    return a == b\ndef check_permutation(a,b):\n    '''\n    Write a function to check if two strings are permutations of each other.\n    '''\n    c = Counter(a)\n    d = Counter(b)\n    return c == d\ndef sum_digits(n):\n    '''\n    Write a function to return the sum of the digits of a given integer.\n    '''\n    return sum(int(x) for x in str(n))\ndef is_palin(s):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return s == s[::-1]\ndef super_reduced_string(s):\n    '''\n    Write a function to reduce a string to its shortest superstring.\n    '''\n    if s==\"\":\n        return s\n    else:\n        x = s[0]\n        y = s[1:]\n        new_s = super_reduced_string(y)\n        if check_permutation(x,new_s):\n            return x + new_s\n        else:\n            return new_s\ndef rotate_left(s,n):\n    '''\n    Write a function to rotate a string left n times.\n    '''\n    return s[n:]+s[:n]\ndef substring(s,n):\n    '''\n    Write a function to find the longest substring in a string.\n    '''\n    res = \"\"\n    for i in range(0,len(s)):\n        for j in range(i,len(s)):\n            if len(res)<len(s[i:j+1]):\n                res = s[i:j+1]\n    return res\ndef split_string(s,n):\n    '''\n    Write a function to split a string into a list of n-sized substrings.\n    '''\n    res = []\n    for i in range(0,len(s),n):\n        res.append(s[i:i+n])\n    return res\ndef find_missing_letter(s1,s2):\n    '''\n    Write a function to find the missing letter in a string.\n    '''\n    lst = [x for x in s2]\n    for i in range(0,len(lst)):\n        if lst[i] not in s1:\n            return lst[i]\n    return '_'\ndef is_valid_parentheses(s):\n    '''\n    Write a function to check if a string is valid parentheses.\n    '''\n    left = 0\n    right = 0\n    for x in s:\n        if x=='(':\n            left = left + 1\n        if x==')':\n            right = right + 1\n        if left<right:\n            return False\n    if left==right:\n        return True\n    else:\n        return False\ndef get_max_product(lst):\n    '''\n    Write a function to get the maximum product of three numbers from a list.\n    '''\n    lst.sort()\n    return lst[-1]*lst[-2]*lst[-3]\ndef is_palindrome(s):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return s[::-1]==s\ndef group_by_letter(s):\n    '''\n    Write a function to group letters of a string together.\n    '''\n    dict1 = {}\n    for i in s:\n        if i in dict1:\n            dict1[i] = dict1[i]+1\n        else:\n            dict1[i] = 1\n    return dict1\ndef is_pandigital(s):\n    '''\n    Write a function to check if a string is pandigital.\n    '''\n    lst = [1,2,3,4,5,6,7,8,9]\n    if len(s)<10:\n        return False\n    else:\n        if s[0] not in lst:\n            return False\n        for i in s[1:]:\n            if int(i) not in lst:\n                return False\n            lst.remove(int(i))\n        return True\ndef max_letter(lst,s):\n    '''\n    Write a function to find the maximum letter in a string.\n    '''\n    res = lst[0]\n    for i in range(len(s)):\n        if lst[i]>lst[res]:\n            res = i\n    return s[res]\ndef is_unique(s):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    return len(s)==len(set(s))\ndef get_anagram(s):\n    '''\n    Write a function to find all the anagrams of a given word.\n    '''\n    lst = []\n    for i in range(1,len(s)):\n        if check_permutation(s[:i],s[i:]):\n            lst.append(s[:i]+s[i:])\n    return lst\ndef find_second_largest(lst):\n    '''\n    Write a function to find the second largest number in a list.\n    '''\n    lst.sort()\n    if len(lst)<2:\n        return lst[0]\n    else:\n        return lst[1]\ndef get_first_index(s,lst):\n    '''\n    Write a function to get the index of the first occurrence of a given substring.\n    '''\n    for i in range(0,len(s)):\n        if s[i]==lst[0]:\n            return i\n    return -1\ndef reverse_string(s):\n    '''\n    Write a function to reverse a string.\n    '''\n    return s[::-1]\ndef is_rotated_string(s1,s2):\n    '''\n    Write a function to check if a string is a rotation of another string.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        if reverse_string(s1)==s2:\n            return True\n        else:\n            return False\ndef kth_smallest(lst,k):\n    '''\n    Write a function to find the kth smallest element in a list.\n    '''\n    lst.sort()\n    return lst[k-1]\ndef is_straight_line(lst):\n    '''\n    Write a function to check if a list of numbers is a straight line.\n    '''\n    res = lst[0]\n    for i in range(1,len(lst)):\n        if lst[i]-res!=1:\n            return False\n        res = lst[i]\n    return True\ndef is_an_array(arr):\n    '''\n    Write a function to check if a list of numbers is an array.\n    '''\n    lst = []\n    for i in range(len(arr)):\n        if arr[i] in lst:\n            return False\n        else:\n            lst.append(arr[i])\n    return True\ndef most_common(lst):\n    '''\n    Write a function to get the most common element in a list.\n    '''\n    return max(lst,key=lst.count)\ndef is_prime(n):\n    '''\n    Write a function to check if a given number is prime.\n    '''\n    if n==1:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef find_missing_letter(s1,s2):\n    '''\n    Write a function to find the missing letter in a string.\n    '''\n    for i in range(ord('a'),ord('z')+1):\n        if chr(i) not in s1:\n            return chr(i)\n    return '_'"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.iteritems(), key = lambda x: x[1], reverse = True)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    for key in sorted(dict1, key = dict1.get, reverse = True):\n        print key, dict1[key]\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x:x[1])\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    l = []\n    for i in dict1:\n        l.append((dict1[i],i))\n    l.sort()\n    return [k for v,k in l]\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    c = Counter(dict1)\n    output = {k: v for k, v in sorted(c.iteritems(), key=lambda (k, v): (v, k), reverse=True)}\n    return output\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    t=sorted(dict1.items(),key=lambda x:x[1],reverse=True)\n    print t\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # new_dict = sorted(dict1.items(), key=lambda x: x[1])\n    # return new_dict\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\ndef ngrams(tokens,n):\n    '''\n    Return the ngrams of a list of tokens.\n    '''\n    ngrams = zip(*[tokens[i:] for i in range(n)])\n    return [\"\".join(ngram) for ngram in ngrams]\ndef get_phrases(text,n):\n    '''\n    Return the ngrams of a list of tokens.\n    '''\n    tokenize = lambda x: x.lower().split()\n    tokens = tokenize(text)\n    ngrams = ngrams(tokens,n)\n    return [\" \".join(ngram) for ngram in ngrams]\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    big = 0\n    small = 0\n    for i in nums:\n        if i > big:\n            big = i\n        if i < small:\n            small = i\n    return big + small\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest + smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    a = max(nums)\n    b = min(nums)\n    return a + b\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    return nums[-1] + nums[0]\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(nums) - min(nums) - max(nums)\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if not isinstance(string, str):\n        raise TypeError(\"expected a string, got %s instead\" % type(string))\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if isinstance(string,str):\n        return string.lower()\n    else:\n        return string\n    \ndef is_num(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if isinstance(string,str):\n        return string.isdigit()\n    else:\n        return string\n    \ndef is_num_str(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if isinstance(string,str):\n        return string.isdigit()\n    else:\n        return string\n    \ndef filter_str(string):\n    '''\n    Write a python function to filter the characters of a string.\n    '''\n    return \"\".join(filter(lambda x: x.isdigit(),string))\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if string.islower():\n        return True\n    return False\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    substr = re.findall(r'[a-z]+', str1)\n    res = str1\n    for s in substr:\n        res = res.replace(s, '')\n    return res\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    res = re.sub('[a-z]', '', str1)\n    return res\n    \ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    res = re.sub('[^\\w\\s]', '', str1)\n    return res\n    \ndef remove_whitespace(str1):\n    '''\n    Write a function to remove whitespace from a given string.\n    '''\n    res = re.sub('[\\s]', '', str1)\n    return res\n    \ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    res = re.sub('[0-9]', '', str1)\n    return res\n    \ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    res = re.sub('[A-Z]', '', str1)\n    return res\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = re.sub(r'[a-z]', '', str1)\n    return str2\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    result = ''\n    for letter in str1:\n        if letter.isupper():\n            result += letter\n    return result\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    str1 = re.sub(r'[a-z]', '', str1)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]+', '', str1)\ndef add_uppercase(str1):\n    '''\n    Write a function to add uppercase substrings from a given string.\n    '''\n    return re.sub('[a-z]+', lambda x: x.group(0).upper(), str1)\ndef replace_uppercase(str1):\n    '''\n    Write a function to replace uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]+', lambda x: x.group(0).lower(), str1)\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]+', '', str1)\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    return re.sub('[0-9]+', '', str1)\ndef remove_lowercase_digits(str1):\n    '''\n    Write a function to remove lowercase and digits from a given string.\n    '''\n    return re.sub('[a-z0-9]+', '', str1)\ndef remove_lowercase_digits_and_characters(str1):\n    '''\n    Write a function to remove lowercase and digits and characters from a given string.\n    '''\n    return re.sub('[a-z0-9]+', '', str1)\ndef remove_uppercase_digits(str1):\n    '''\n    Write a function to remove uppercase and digits from a given string.\n    '''\n    return re.sub('[A-Z0-9]+', '', str1)\ndef remove_uppercase_digits_and_characters(str1):\n    '''\n    Write a function to remove uppercase and digits and characters from a given string.\n    '''\n    return re.sub('[A-Z0-9]+', '', str1)\ndef remove_uppercase_and_digits(str1):\n    '''\n    Write a function to remove uppercase and digits from a given string.\n    '''\n    return re.sub('[A-Z0-9]+', '', str1)\ndef remove_digits_and_characters(str1):\n    '''\n    Write a function to remove digits and characters from a given string.\n    '''\n    return re.sub('[0-9a-zA-Z]+', '', str1)\ndef remove_lowercase_and_digits(str1):\n    '''\n    Write a function to remove lowercase and digits from a given string.\n    '''\n    return re.sub('[a-z0-9]+', '', str1)\ndef remove_lowercase_and_digits_and_characters(str1):\n    '''\n    Write a function to remove lowercase and digits and characters from a given string.\n    '''\n    return re.sub('[a-z0-9]+', '', str1)\ndef remove_lowercase_and_digits_and_characters_and_space(str1):\n    '''\n    Write a function to remove lowercase and digits and characters and space from a given string.\n    '''\n    return re.sub('[a-z0-9 ]+', '', str1)\ndef remove_lowercase_and_digits_and_characters_and_space_and_newlines(str1):\n    '''\n    Write a function to remove lowercase and digits and characters and space and newlines from a given string.\n    '''\n    return re.sub('[a-z0-9\\n ]+', '', str1)\ndef remove_lowercase_and_digits_and_characters_and_space_and_newlines_and_tabs(str1):\n    '''\n    Write a function to remove lowercase and digits and characters and space and newlines and tabs from a given string.\n    '''\n    return re.sub('[a-z0-9\\n\\t ]+', '', str1)\ndef remove_lowercase_and_digits_and_characters_and_space_and_newlines_and_tabs_and_space(str1):\n    '''\n    Write a function to remove lowercase and digits and characters and space and newlines and tabs and space from a given string.\n    '''\n    return re.sub('[a-z0-9\\n\\t ]+', '', str1)\ndef remove_lowercase_and_digits_and_characters_and_space_and_newlines_and_tabs_and_space_and_tabs(str1):\n    '''\n    Write a function to remove lowercase and digits and characters and space and newlines and tabs and space and tabs from a given string.\n    '''\n    return re.sub('[a-z0-9\\n\\t ]+', '', str1)\ndef remove_lowercase_and_digits_and_characters_and_space_and_newlines_and_tabs_and_space_and_tabs_and_space(str1):\n    '''\n    Write a function to remove lowercase and digits and characters and space and newlines and tabs and space and tabs and space from a given string.\n    '''\n    return re.sub('[a-z0-9\\n\\t ]+', '', str1)\ndef remove_lowercase_and_digits_and_characters_and_space_and_newlines_and_tabs_and_space_and_tabs_and_space_and_space(str1):\n    '''\n    Write a function to remove lowercase and digits and characters and space and newlines and tabs and space and tabs and space and space from a given string.\n    '''\n    return re.sub('[a-z0-9\\n\\t ]+', '', str1)\ndef remove_lowercase_and_digits_and_characters_and_space_and_newlines_and_tabs_and_space_and_tabs_and_space_and_space_and_space(str1):\n    '''\n    Write a function to remove lowercase and digits and characters and space and newlines and tabs and space and tabs and space and space and space from a given string.\n    '''\n    return re.sub('[a-z0-9\\n\\t ]+', '', str1)\ndef remove_lowercase_and_digits_and_characters_and_space_and_newlines_and_tabs_and_space_and_tabs_and_space_and_space_and_space_and_space(str1):\n    '''\n    Write a function to remove lowercase and digits and characters and space and newlines and tabs and space and tabs and space and space and space and space from a given string.\n    '''\n    return re.sub('[a-z0-9\\n\\t ]+', '', str1)\ndef remove_lowercase_and_digits_and_characters_and_space_and_newlines_and_tabs_and_space_and_tabs_and_space_and_space_and_space_and_space(str1):\n    '''\n    Write a function to remove lowercase and digits and characters and space and newlines and tabs and space and tabs and space and space and space and space from a given string.\n    '''\n    return re.sub('[a-z0-9\\n\\t ]+', '', str1)\ndef remove_lowercase_and_digits_and_characters_and_space_and_newlines_and_tabs_and_space_and_tabs_and_space_and_space_and_space_and_space(str1):\n    '''\n    Write a function to remove lowercase and digits and characters and space and newlines and tabs and space and tabs and space and space and space and space from a given string.\n    '''\n    return re.sub('[a-z0-9\\n\\t ]+', '', str1)\ndef remove_lowercase_and_digits_and_characters_and_space_and_newlines_and_tabs_and_space_and_tabs_and_space_and_space_and_space_and_space(str1):\n    '''"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    res = ''\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            res = res + str1[i]\n    return res\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[a-z]{1,}', '', str1)\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return re.sub(r'[^\\w\\s]', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]','',str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]+', '', str1)\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return re.sub(r'[^a-zA-Z]+','', str1)\ndef remove_tags(str1):\n    '''\n    Write a function to remove HTML tags from a given string.\n    '''\n    return re.sub(r'<[^<>]+>', '', str1)\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    return re.sub(r'[0-9]+', '', str1)\ndef remove_multiple_whitespaces(str1):\n    '''\n    Write a function to remove multiple whitespaces from a given string.\n    '''\n    return re.sub(r'\\s+','', str1)\ndef remove_stopwords(str1, stopwords):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    return''.join(w for w in str1.split() if w not in stopwords)\ndef remove_elongations(str1):\n    '''\n    Write a function to remove elongations from a given string.\n    '''\n    return re.sub(r'(\\w*)(\\w)\\2(\\w*)', '\\g<1>\\g<2>\\g<3>', str1)\ndef remove_single_characters(str1):\n    '''\n    Write a function to remove single characters from a given string.\n    '''\n    return re.sub(r'\\b\\w\\b', '', str1)\ndef remove_short_words(str1, n):\n    '''\n    Write a function to remove short words from a given string.\n    '''\n    return''.join(w for w in str1.split() if len(w)>n)\ndef remove_twitter_handles(str1):\n    '''\n    Write a function to remove twitter handles from a given string.\n    '''\n    return re.sub(r'@[^\\s]+', '', str1)\ndef remove_emojis(str1):\n    '''\n    Write a function to remove emojis from a given string.\n    '''\n    return re.sub(r'[^\\w\\s]', '', str1)\ndef remove_tweets(str1):\n    '''\n    Write a function to remove tweets from a given string.\n    '''\n    return re.sub(r'\\b(RT|MT)[\\s]+','', str1)\ndef remove_mentions(str1):\n    '''\n    Write a function to remove mentions from a given string.\n    '''\n    return re.sub(r'(^|[^@\\w])@\\w+','', str1)\ndef remove_all_special_characters(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    return re.sub(r'[^a-zA-Z\\s]+', '', str1)\ndef remove_twitter_handles(str1):\n    '''\n    Write a function to remove twitter handles from a given string.\n    '''\n    return re.sub(r'@[^\\s]+', '', str1)\ndef remove_emojis(str1):\n    '''\n    Write a function to remove emojis from a given string.\n    '''\n    return re.sub(r'[^\\w\\s]', '', str1)\ndef remove_all_special_characters(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    return re.sub(r'[^a-zA-Z\\s]+', '', str1)\ndef remove_emojis(str1):\n    '''\n    Write a function to remove emojis from a given string.\n    '''\n    return re.sub(r'[^\\w\\s]', '', str1)\ndef remove_tweets(str1):\n    '''\n    Write a function to remove tweets from a given string.\n    '''\n    return re.sub(r'(^|[^@\\w])@\\w+','', str1)\ndef remove_mentions(str1):\n    '''\n    Write a function to remove mentions from a given string.\n    '''\n    return re.sub(r'(^|[^@\\w])@\\w+','', str1)\ndef remove_all_special_characters(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    return re.sub(r'[^a-zA-Z\\s]+', '', str1)\ndef remove_emojis(str1):\n    '''\n    Write a function to remove emojis from a given string.\n    '''\n    return re.sub(r'[^\\w\\s]', '', str1)\ndef remove_all_special_characters(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    return re.sub(r'[^a-zA-Z\\s]+', '', str1)\ndef remove_all_special_characters(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    return re.sub(r'[^a-zA-Z\\s]+', '', str1)\ndef remove_tweets(str1):\n    '''\n    Write a function to remove tweets from a given string.\n    '''\n    return re.sub(r'(^|[^@\\w])@\\w+','', str1)\ndef remove_mentions(str1):\n    '''\n    Write a function to remove mentions from a given string.\n    '''\n    return re.sub(r'(^|[^@\\w])@\\w+','', str1)\ndef remove_all_special_characters(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    return re.sub(r'[^a-zA-Z\\s]+', '', str1)\ndef remove_tweets(str1):\n    '''\n    Write a function to remove tweets from a given string.\n    '''\n    return re.sub(r'(^|[^@\\w])@\\w+','', str1)\ndef remove_mentions(str1):\n    '''\n    Write a function to remove mentions from a given string.\n    '''\n    return re.sub(r'(^|[^@\\w])@\\w+','', str1)\ndef remove_all_special_characters(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    return re.sub(r'[^a-zA-Z\\s]+', '', str1)\ndef remove_tweets(str1):\n    '''\n    Write a function to remove tweets from a given string.\n    '''\n    return re.sub(r'(^|[^@\\w])@\\w+','', str1)\ndef remove_mentions(str1):\n    '''\n    Write a function to remove mentions from a given string.\n    '''\n    return re.sub(r'(^|[^@\\w])@\\w+','', str1)\ndef remove_all_special_characters(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    return re.sub(r'[^a-zA-Z\\s]+', '', str1)\ndef remove_tweets(str1):\n    '''\n    Write a function to remove tweets from a given string.\n    '''\n    return re.sub(r'(^|[^@\\w])@\\w+','', str1)\ndef remove_mentions(str1):\n    '''\n    Write a function to remove mentions from a given string.\n    '''\n    return re.sub(r'("
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n==0 :\n        return 0\n    if n%10==0 :\n        return 0\n    return 1\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n//10%10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = n\n    if x >= 0 :\n        return x % 10\n    else :\n        return -(x % -10)\n        \n    \ndef last_Digit(n) :  \n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    x = n\n    while x > 0 :\n        x //= 10\n    return x\n        \ndef list_to_int(l) :  \n    '''\n    Write a python function to convert a list of digits to a single integer.\n    '''\n    s = 0\n    for i in l :\n        s += i\n    return s\n        \ndef int_to_list(n) :  \n    '''\n    Write a python function to convert a single integer to a list of digits.\n    '''\n    l = []\n    while n > 0 :\n        l.append(n % 10)\n        n //= 10\n    return l\n        \ndef sum_of_digits(n) :  \n    '''\n    Write a python function to sum of the digits of a given number.\n    '''\n    s = 0\n    while n > 0 :\n        s += n % 10\n        n //= 10\n    return s\n    \ndef sum_of_digits2(n) :  \n    '''\n    Write a python function to sum of the digits of a given number.\n    '''\n    return sum(int_to_list(n))\n    \ndef sum_of_digits3(n) :  \n    '''\n    Write a python function to sum of the digits of a given number.\n    '''\n    return n and sum_of_digits2(n//10) + n % 10\n    \ndef sum_of_digits4(n) :  \n    '''\n    Write a python function to sum of the digits of a given number.\n    '''\n    return sum(int_to_list(n))\n    \ndef sum_of_digits5(n) :  \n    '''\n    Write a python function to sum of the digits of a given number.\n    '''\n    return sum_of_digits3(n//10) + n % 10\n    \ndef sum_of_digits6(n) :  \n    '''\n    Write a python function to sum of the digits of a given number.\n    '''\n    return sum_of_digits2(n//10) + n % 10\n    \ndef is_Perfect(n) :  \n    '''\n    Write a python function to check whether a given number is a perfect number.\n    '''\n    return sum_of_digits(n) == n\n    \ndef is_Perfect2(n) :  \n    '''\n    Write a python function to check whether a given number is a perfect number.\n    '''\n    return n == sum_of_digits2(n)\n    \ndef is_Perfect3(n) :  \n    '''\n    Write a python function to check whether a given number is a perfect number.\n    '''\n    return n == sum_of_digits3(n)\n    \ndef is_Perfect4(n) :  \n    '''\n    Write a python function to check whether a given number is a perfect number.\n    '''\n    return n == sum_of_digits4(n)\n    \ndef is_Perfect5(n) :  \n    '''\n    Write a python function to check whether a given number is a perfect number.\n    '''\n    return n == sum_of_digits5(n)\n    \ndef is_Perfect6(n) :  \n    '''\n    Write a python function to check whether a given number is a perfect number.\n    '''\n    return n == sum_of_digits6(n)\n    \ndef is_Perfect7(n) :  \n    '''\n    Write a python function to check whether a given number is a perfect number.\n    '''\n    return n == sum_of_digits2(n)\n    \ndef is_Perfect8(n) :  \n    '''\n    Write a python function to check whether a given number is a perfect number.\n    '''\n    return n == sum_of_digits3(n)\n    \ndef is_Perfect9(n) :  \n    '''\n    Write a python function to check whether a given number is a perfect number.\n    '''\n    return n == sum_of_digits4(n)\n    \ndef is_Perfect10(n) :  \n    '''\n    Write a python function to check whether a given number is a perfect number.\n    '''\n    return n == sum_of_digits5(n)\n    \ndef is_Perfect11(n) :  \n    '''\n    Write a python function to check whether a given number is a perfect number.\n    '''\n    return n == sum_of_digits6(n)\n    \ndef is_Perfect12(n) :  \n    '''\n    Write a python function to check whether a given number is a perfect number.\n    '''\n    return n == sum_of_digits2(n)\n    \ndef is_Perfect13(n) :  \n    '''\n    Write a python function to check whether a given number is a perfect number.\n    '''\n    return n == sum_of_digits3(n)\n    \ndef is_Perfect14(n) :  \n    '''\n    Write a python function to check whether a given number is a perfect number.\n    '''\n    return n == sum_of_digits4(n)\n    \ndef is_Perfect15(n) :  \n    '''\n    Write a python function to check whether a given number is a perfect number.\n    '''\n    return n == sum_of_digits5(n)\n    \ndef is_Perfect16(n) :  \n    '''\n    Write a python function to check whether a given number is a perfect number.\n    '''\n    return n == sum_of_digits6(n)\n    \ndef is_Perfect17(n) :  \n    '''\n    Write a python function to check whether a given number is a perfect number.\n    '''\n    return n == sum_of_digits2(n)\n    \ndef is_Perfect18(n) :  \n    '''\n    Write a python function to check whether a given number is a perfect number.\n    '''\n    return n == sum_of_digits3(n)\n    \ndef is_Perfect19(n) :  \n    '''\n    Write a python function to check whether a given number is a perfect number.\n    '''\n    return n == sum_of_digits4(n)\n    \ndef is_Perfect20(n) :  \n    '''\n    Write a python function to check whether a given number is a perfect number.\n    '''\n    return n == sum_of_digits5(n)\n    \ndef is_Perfect21(n) :  \n    '''\n    Write a python function to check whether a given number is a perfect number.\n    '''\n    return n == sum_of_digits6(n)\n    \ndef is_Perfect22(n) :  \n    '''\n    Write a python function to check whether a given number is a perfect number.\n    '''\n    return n == sum_of_digits2(n)\n    \ndef is_Perfect23(n) :  \n    '''\n    Write a python function to check whether a given number is a perfect number.\n    '''\n    return n == sum_of_digits3(n)\n    \ndef is_Perfect24(n) :  \n    '''\n    Write a python function to check whether a given number is a perfect number.\n    '''\n    return n == sum_of_digits4(n)\n    \ndef is_Perfect25(n) :  \n    '''\n    Write a python function to check whether a given number is a perfect number.\n    '''\n    return n == sum_of_digits5(n)\n    \ndef is_Perfect26(n) :  \n    '''\n    Write a python function to check whether a given number is a perfect number.\n    '''\n    return n == sum_of_digits6(n)\n    \ndef is_Perfect27(n) :  \n    '''\n    Write a python function to check whether a given number is a perfect number.\n    '''\n    return n == sum_of_digits2(n)\n    \ndef is_Perfect2"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # to check the input type in python 3 use below statement\n    #n = int(n)\n    #print(type(n))\n    # if n<10 :\n    #     return n\n    # else :\n    #     return int(n/10)\n    return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    if n < 10 :\n        return n\n    else :\n        return n // 10 + first_Digit(n % 10)\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = str(n)\n    for i in range(len(n)):\n        if n[i] == '0' :\n            return int(n[i])\n    \ndef calculate_Number_of_Digits(num) :\n    '''\n    Write a python function to calculate the number of digits in a given number.\n    '''\n    num = str(num)\n    return len(num)\n    \ndef is_Palindrome(num) :\n    '''\n    Write a python function to check whether a given number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n    \ndef is_Prime(num) :\n    '''\n    Write a python function to check whether a given number is a prime number.\n    '''\n    divisor = 2\n    while divisor < num :\n        if num % divisor == 0 :\n            return False\n        divisor += 1\n    return True\n    \ndef first_Digit_Reverse(num) :\n    '''\n    Write a python function to find the first digit of a given number in reverse order.\n    '''\n    n = str(num)\n    for i in range(len(n)-1, -1, -1):\n        if n[i] == '0' :\n            return int(n[i])\n        \ndef count_Digits(num) :\n    '''\n    Write a python function to count the number of digits in a given number.\n    '''\n    n = str(num)\n    count = 0\n    for i in n :\n        count += 1\n    return count\n    \ndef is_Double_Digit_Number(num) :\n    '''\n    Write a python function to check whether a given number has two digits whose sum is equal to it.\n    '''\n    n = str(num)\n    for i in range(len(n)-1) :\n        if int(n[i]) == int(n[i+1]) :\n            return True\n    return False\n    \ndef Sum_of_digits(num) :\n    '''\n    Write a python function to find the sum of the digits of a given number.\n    '''\n    n = str(num)\n    count = 0\n    for i in n :\n        count += int(i)\n    return count\n    \ndef is_Pangram(sentence) :\n    '''\n    Write a python function to check whether a given sentence is a pangram.\n    '''\n    import string\n    count = 0\n    for letter in sentence :\n        if letter in string.ascii_lowercase or letter in string.ascii_uppercase :\n            count += 1\n    return count == 26\n    \ndef is_String_Pangram(sentence) :\n    '''\n    Write a python function to check whether a given sentence is a pangram.\n    '''\n    import string\n    count = 0\n    for letter in sentence :\n        if letter in string.ascii_lowercase or letter in string.ascii_uppercase :\n            count += 1\n    return count == 26\n    \ndef is_Digit_Pangram(sentence) :\n    '''\n    Write a python function to check whether a given sentence is a pangram.\n    '''\n    import string\n    count = 0\n    for letter in sentence :\n        if letter.isdigit() :\n            count += 1\n    return count == 10\n    \ndef remove_Digit(num, digit) :\n    '''\n    Write a python function to remove a given digit from a given number.\n    '''\n    n = str(num)\n    for i in range(len(n)) :\n        if n[i] == str(digit) :\n            n = n[:i] + n[i+1:]\n    return int(n)\n    \ndef is_Arithmetic_Pangram(sentence) :\n    '''\n    Write a python function to check whether a given sentence is a pangram.\n    '''\n    import string\n    count = 0\n    for letter in sentence :\n        if letter in string.ascii_lowercase or letter in string.ascii_uppercase :\n            count += 1\n    return count == 26\n    \ndef is_Arithmetic_Pangram_Solution(sentence) :\n    '''\n    Write a python function to check whether a given sentence is a pangram.\n    '''\n    import string\n    count = 0\n    for letter in sentence :\n        if letter.isdigit() :\n            count += 1\n    return count == 10\n    \ndef is_Palindrome_Pangram(sentence) :\n    '''\n    Write a python function to check whether a given sentence is a pangram.\n    '''\n    import string\n    count = 0\n    for letter in sentence :\n        if letter in string.ascii_lowercase or letter in string.ascii_uppercase :\n            count += 1\n    return count == 26\n    \ndef is_Palindrome_Pangram_Solution(sentence) :\n    '''\n    Write a python function to check whether a given sentence is a pangram.\n    '''\n    import string\n    count = 0\n    for letter in sentence :\n        if letter.isdigit() :\n            count += 1\n    return count == 10\n    \ndef string_to_List(sentence) :\n    '''\n    Write a python function to convert a given sentence into a list of words.\n    '''\n    return sentence.split()\n    \ndef list_to_string(words) :\n    '''\n    Write a python function to convert a given sentence into a string.\n    '''\n    return''.join(words)\n    \ndef list_to_string_Solution(words) :\n    '''\n    Write a python function to convert a given sentence into a string.\n    '''\n    return''.join(words)\n    \ndef word_to_Number(word) :\n    '''\n    Write a python function to convert a given word to a number.\n    '''\n    return int(word)\n    \ndef number_to_word(num) :\n    '''\n    Write a python function to convert a given number to a word.\n    '''\n    import string\n    return string.lowercase[num-1]\n    \ndef is_Correct_Number(num) :\n    '''\n    Write a python function to check whether a given number is a correct number or not.\n    '''\n    if num == 0 :\n        return True\n    elif num % 2 == 0 :\n        return True\n    else :\n        return False\n    \ndef is_Correct_Number_Solution(num) :\n    '''\n    Write a python function to check whether a given number is a correct number or not.\n    '''\n    if num == 0 or num == 2 :\n        return True\n    elif num % 2 == 0 :\n        return True\n    else :\n        return False\n    \ndef is_Sum_of_Four_Digits(num) :\n    '''\n    Write a python function to check whether a given number is a sum of four digits or not.\n    '''\n    n = str(num)\n    for i in range(len(n)-3) :\n        if int(n[i]) + int(n[i+1]) + int(n[i+2]) + int(n[i+3]) == num :\n            return True\n    return False\n    \ndef is_Sum_of_Four_Digits_Solution(num) :\n    '''\n    Write a python function to check whether a given number is a sum of four digits or not.\n    '''\n    n = str(num)\n    for i in range(len(n)-3) :\n        if int(n[i]) + int(n[i+1]) + int(n[i+2]) + int(n[i+3]) == num :\n            return True\n    return False\n    \ndef find_Max_of_Four_Digits(num1, num2, num3, num4) :\n    '''\n    Write a python function to find the max of four given numbers.\n    '''\n    numbers = [num1, num2, num3, num4]\n    return max(numbers)\n    \ndef find_Max_of_Four_Digits_Solution(num1, num2, num3, num4) :\n    '''\n    Write a python function to find the ma"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n=int(n)\n    if n<10:\n        return str(n)\n    else:\n        return str(n%10)\n        \ndef isDigit(n) :  \n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n=int(n)\n    if n%10==0:\n        return False\n    else:\n        return True\n        \ndef isOdd(n) :  \n    '''\n    Write a python function to find the oddity of a given number.\n    '''\n    n=int(n)\n    if n%2!=0:\n        return True\n    else:\n        return False\n        \ndef isPrime(n) :  \n    '''\n    Write a python function to find the primality of a given number.\n    '''\n    n=int(n)\n    if n<2:\n        return False\n    else:\n        i=2\n        while i<=n/2:\n            if n%i==0:\n                return False\n            i+=1\n        return True\n        \ndef isLucky(n) :  \n    '''\n    Write a python function to find the luckyness of a given number.\n    '''\n    n=int(n)\n    if isDigit(n)==True:\n        return False\n    else:\n        return True\n        \ndef isDigitPrime(n) :  \n    '''\n    Write a python function to find the first and last digit of a given number, and whether it is a prime number or not.\n    '''\n    n=int(n)\n    if isDigit(n)==False:\n        return False\n    else:\n        if isDigit(n)==True:\n            if isPrime(n)==True:\n                return True\n            else:\n                return False\n        else:\n            if isPrime(n)==True:\n                return True\n            else:\n                return False\n                \ndef isDigitOdd(n) :  \n    '''\n    Write a python function to find the first and last digit of a given number, and whether it is an odd number or not.\n    '''\n    n=int(n)\n    if isDigit(n)==False:\n        return False\n    else:\n        if isDigit(n)==True:\n            if isOdd(n)==True:\n                return True\n            else:\n                return False\n        else:\n            if isOdd(n)==True:\n                return True\n            else:\n                return False\n                \ndef isDigitEven(n) :  \n    '''\n    Write a python function to find the first and last digit of a given number, and whether it is an even number or not.\n    '''\n    n=int(n)\n    if isDigit(n)==False:\n        return False\n    else:\n        if isDigit(n)==True:\n            if isEven(n)==True:\n                return True\n            else:\n                return False\n        else:\n            if isEven(n)==True:\n                return True\n            else:\n                return False\n                \ndef isDigitFactor(n,k) :  \n    '''\n    Write a python function to find the first and last digit of a given number, and whether it is a factor of a given number or not.\n    '''\n    n=int(n)\n    k=int(k)\n    if isDigit(n)==False:\n        return False\n    else:\n        if isDigit(n)==True:\n            if n%k==0:\n                return True\n            else:\n                return False\n        else:\n            if n%k==0:\n                return True\n            else:\n                return False\n                \ndef isDigitMultiple(n,k) :  \n    '''\n    Write a python function to find the first and last digit of a given number, and whether it is a multiple of a given number or not.\n    '''\n    n=int(n)\n    k=int(k)\n    if isDigit(n)==False:\n        return False\n    else:\n        if isDigit(n)==True:\n            if n%k==0:\n                return False\n            else:\n                return True\n        else:\n            if n%k==0:\n                return False\n            else:\n                return True\n                \ndef isDigitPercentage(n,p) :  \n    '''\n    Write a python function to find the first and last digit of a given number, and whether it is a percentage of a given number or not.\n    '''\n    n=int(n)\n    p=int(p)\n    if isDigit(n)==False:\n        return False\n    else:\n        if isDigit(n)==True:\n            if n%p==0:\n                return False\n            else:\n                return True\n        else:\n            if n%p==0:\n                return False\n            else:\n                return True\n                \ndef isDigitPower(n,k) :  \n    '''\n    Write a python function to find the first and last digit of a given number, and whether it is a power of a given number or not.\n    '''\n    n=int(n)\n    k=int(k)\n    if isDigit(n)==False:\n        return False\n    else:\n        if isDigit(n)==True:\n            if n**k==n:\n                return True\n            else:\n                return False\n        else:\n            if n**k==n:\n                return True\n            else:\n                return False\n                \ndef isDigitSquare(n) :  \n    '''\n    Write a python function to find the first and last digit of a given number, and whether it is a square of a given number or not.\n    '''\n    n=int(n)\n    if isDigit(n)==False:\n        return False\n    else:\n        if isDigit(n)==True:\n            if n**0.5==int(n**0.5):\n                return True\n            else:\n                return False\n        else:\n            if n**0.5==int(n**0.5):\n                return True\n            else:\n                return False\n                \ndef isDigitPrimePower(n,k) :  \n    '''\n    Write a python function to find the first and last digit of a given number, and whether it is a prime power of a given number or not.\n    '''\n    n=int(n)\n    k=int(k)\n    if isDigit(n)==False:\n        return False\n    else:\n        if isDigit(n)==True:\n            if n**k==n:\n                if isPrime(n)==True:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            if n**k==n:\n                if isPrime(n)==True:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n                \ndef isDigitTrinomial(n,k) :  \n    '''\n    Write a python function to find the first and last digit of a given number, and whether it is a trinomial of a given number or not.\n    '''\n    n=int(n)\n    k=int(k)\n    if isDigit(n)==False:\n        return False\n    else:\n        if isDigit(n)==True:\n            if n**k==n:\n                if isPrime(n)==True:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            if n**k==n:\n                if isPrime(n)==True:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n                \ndef isDigitSquareRoot(n) :  \n    '''\n    Write a python function to find the first and last digit of a given number, and whether it is a square root of a given number or not.\n    '''\n    n=int(n)\n    if isDigit(n)==False:\n        return False\n    else:\n        if isDigit(n)==True:\n            if n**0.5==int(n**0.5):\n                return True\n            else:\n                return False\n        else:\n            if n**0.5==int(n*"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = n\n    while x > 0 :\n        digit = x % 10\n        if digit!= 0 :\n            return digit\n        x = x // 10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return first_Digit(n // 10)\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = abs(n)\n    while (n // 10) > 0 : \n        n //= 10\n    return n\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    list1 = []\n    for i in list:\n        if i%2!= 0:\n            list1.append(i)\n    return list1\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [int(x) for x in list if x%2!= 0]\n    \ndef Combine(list1, list2):\n    '''\n    Write a python function which takes two lists and returns a single list that contains all the items from the first list followed by all the items from the second list.\n    '''\n    return list1 + list2\n    \ndef FizzBuzz(list):\n    '''\n    Write a python function which takes a list of integers and returns a list that only contains the multiples of 3 in the first position and the multiples of 5 in the second position.\n    '''\n    return [list[0]*3 if list[0]%3 == 0 else '', list[1]*5 if list[1]%5 == 0 else '']\n    \ndef Reduce(list):\n    '''\n    Write a python function which takes a list of integers and returns a list that only contains the multiples of 2 in the first position and the multiples of 3 in the second position.\n    '''\n    return [list[0]/2 if list[0]%2 == 0 else '', list[1]/3 if list[1]%3 == 0 else '']\n    \ndef Reverse(list):\n    '''\n    Write a python function which takes a list of integers and returns a list that only contains the reverse of the original list.\n    '''\n    return list[::-1]\n    \ndef Contains(list, val):\n    '''\n    Write a python function which takes a list of integers and another integer and returns a list of integers that contains all integers in the first list which are less than or equal to the integer provided.\n    '''\n    return [x for x in list if x <= val]\n    \ndef Inverse(list):\n    '''\n    Write a python function which takes a list of integers and returns a list that only contains the items in the first list that are greater than the last item in the list.\n    '''\n    return [x for x in list[::-1] if x >= list[-1]]\n    \ndef Invert(list):\n    '''\n    Write a python function which takes a list of integers and returns a list that only contains the items in the first list that are greater than the last item in the list.\n    '''\n    return [x*-1 for x in list[::-1]]\n    \ndef DiscreteLogarithm(a, b, c):\n    '''\n    Write a python function which takes three integers and returns the number of iterations needed to calculate b from a.\n    '''\n    return (b-a)%c\n    \ndef Copy(list):\n    '''\n    Write a python function which takes a list and returns a copy of the list.\n    '''\n    return list[:]\n    \ndef Compress(list):\n    '''\n    Write a python function which takes a list of integers and returns a list which contains only the even numbers from the original list.\n    '''\n    return [x for x in list if x%2 == 0]\n    \ndef Combination(n, k):\n    '''\n    Write a python function which takes two integers and returns the value of nCrk.\n    '''\n    if n < k:\n        return 0\n    if n == k or k == 1:\n        return 1\n    return Combination(n-1, k-1) + Combination(n-1, k)\n    \ndef Combination2(n, k):\n    '''\n    Write a python function which takes two integers and returns the value of nCrk.\n    '''\n    if n < k:\n        return 0\n    if n == k or k == 1:\n        return 1\n    p = [0 for x in range(k+1)]\n    p[0] = 1\n    for i in range(1, n+1):\n        for j in range(i, k+1):\n            p[j] += p[j-i]\n    return p[k]\n    \ndef Partition(list):\n    '''\n    Write a python function which takes a list of integers and returns a list of integers in which the sum of the first k elements is equal to the sum of the last k elements.\n    '''\n    k = len(list)/2\n    if sum(list[:k]) == sum(list[k:]):\n        return 'yes'\n    else:\n        return 'no'\n    \ndef InverseList(list):\n    '''\n    Write a python function which takes a list of integers and returns the inverse of the list.\n    '''\n    return [x*-1 for x in list[::-1]]\n    \ndef InverseList2(list):\n    '''\n    Write a python function which takes a list of integers and returns the inverse of the list.\n    '''\n    return [x*-1 for x in list]\n    \ndef DecimalToBinary(n):\n    '''\n    Write a python function which takes a positive integer n and returns the value of n in binary.\n    '''\n    return bin(n)[2:]\n    \ndef BinaryToDecimal(n):\n    '''\n    Write a python function which takes a string of 0s and 1s and returns the integer value of the string.\n    '''\n    return int(n, 2)\n    \ndef BinaryToDecimal2(n):\n    '''\n    Write a python function which takes a string of 0s and 1s and returns the integer value of the string.\n    '''\n    return int(n, 2)\n    \ndef Rotate(list, n):\n    '''\n    Write a python function which takes a list and integer n and returns a list which is the first n elements of the original list.\n    '''\n    return list[:n]\n    \ndef Rotate2(list, n):\n    '''\n    Write a python function which takes a list and integer n and returns a list which is the first n elements of the original list.\n    '''\n    return list[n:]+list[:n]\n    \ndef ReverseString(list):\n    '''\n    Write a python function which takes a list of characters and returns the string in reverse order.\n    '''\n    return list[::-1]\n    \ndef RotateString(list, n):\n    '''\n    Write a python function which takes a list of characters and integer n and returns a list which is the first n characters of the original string in reverse order.\n    '''\n    return list[n:]+list[:n]\n    \ndef OneToTen(list):\n    '''\n    Write a python function which takes a list of integers and returns the value of the largest integer in the list.\n    '''\n    return max(list)\n    \ndef OneToTen2(list):\n    '''\n    Write a python function which takes a list of integers and returns the value of the largest integer in the list.\n    '''\n    return max(list)\n    \ndef OneToTen3(list):\n    '''\n    Write a python function which takes a list of integers and returns the value of the largest integer in the list.\n    '''\n    return list[len(list)-1]\n    \ndef OneToTen4(list):\n    '''\n    Write a python function which takes a list of integers and returns the value of the largest integer in the list.\n    '''\n    return list[-1]\n    \ndef OneToTen5(list):\n    '''\n    Write a python function which takes a list of integers and returns the value of the largest integer in the list.\n    '''\n    return list[-2]\n    \ndef OneToTen6(list):\n    '''\n    Write a python function which takes a list of integers and returns the value of the largest integer in the list.\n    '''\n    return list[-3]\n    \ndef OneToTen7(list):\n    '''\n    Write a python function which takes a list of integers and returns the value of the largest integer in the list.\n    '''\n    return list[-4]\n    \ndef OneToTen8(list):\n    '''\n    Write a python function which takes a list of integers and returns the value of the largest integer in the list.\n    '''\n    return list[-5]\n    \ndef OneToTen9(list):\n    '''\n    Write a python function which takes a list of integers and returns the value of the largest integer in the list.\n    '''\n    return list[-6]\n    \ndef OneToTen10(list):\n    '''\n    Write a python function which takes a list of integers and returns the value of the largest integer in the list.\n    '''\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    #Your code here\n    return [int(i) for i in list if int(i)%2]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x%2 == 1]\n    \ndef CountEven(list):\n    '''\n    Write a python function which takes a list of integers and counts the number of even integers.\n    '''\n    return len([x for x in list if x%2 == 0])\n    \ndef SumAndAverage(list):\n    '''\n    Write a python function which takes a list of integers and returns the sum of the even integers and the average of the odd integers.\n    '''\n    return [sum(list[1::2]), sum(list[0::2])/len(list[0::2])]\n    \ndef MaxAndMin(list):\n    '''\n    Write a python function which takes a list of integers and returns the maximum and the minimum of the integers.\n    '''\n    return [max(list), min(list)]\n    \ndef Palindrome(word):\n    '''\n    Write a python function which takes a word and returns True if the word is a palindrome and False otherwise.\n    '''\n    return word == word[::-1]\n    \ndef MyOwnFactorial(n):\n    '''\n    Write a python function which takes an integer and returns the factorial of that integer.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*MyOwnFactorial(n-1)\n    \ndef FizzBuzz(n):\n    '''\n    Write a python function which takes an integer and returns True if the number is divisible by 3 and 5, False otherwise.\n    '''\n    if n%3 == 0 and n%5 == 0:\n        return \"FizzBuzz\"\n    elif n%3 == 0:\n        return \"Fizz\"\n    elif n%5 == 0:\n        return \"Buzz\"\n    else:\n        return n\n    \ndef Fibonacci(n):\n    '''\n    Write a python function which takes an integer and returns the nth number in the Fibonacci sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return Fibonacci(n-1)+Fibonacci(n-2)\n    \ndef Factorial(n):\n    '''\n    Write a python function which takes an integer and returns the factorial of that integer.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*Factorial(n-1)\n    \ndef PascalTriangle(n):\n    '''\n    Write a python function which takes an integer and returns the nth row of Pascal's triangle.\n    '''\n    if n == 0:\n        return [1]\n    else:\n        return PascalTriangle(n-1)+[1]\n    \ndef Reverse(list):\n    '''\n    Write a python function which takes a list of integers and returns the reversed list.\n    '''\n    return list[::-1]\n    \ndef Interleave(list1, list2):\n    '''\n    Write a python function which takes two lists of integers and interleaves the values of the first list with the values of the second.\n    '''\n    return [list1[i%len(list1)] for i in range(len(list1)+len(list2))]\n    \ndef BinaryAddition(list1, list2):\n    '''\n    Write a python function which takes two lists of integers and returns the sum of the two binary numbers.\n    '''\n    return [int(x,2) + int(y,2) for x,y in zip(list1, list2)]\n    \ndef PowerSet(list):\n    '''\n    Write a python function which takes a list of integers and returns a list of all the subsets of that list.\n    '''\n    if list == []:\n        return [[]]\n    else:\n        return PowerSet(list[1:]) + [[list[0]] + x for x in PowerSet(list[1:])]\n    \ndef LetterCount(string):\n    '''\n    Write a python function which takes a string and returns a dictionary whose keys are the letters in the string and whose values are the counts of those letters.\n    '''\n    if string == \"\":\n        return {}\n    else:\n        return LetterCount(string[1:]) + {string[0]:1}\n    \ndef LetterCombinations(string):\n    '''\n    Write a python function which takes a string and returns a list of all the possible letter combinations that the string contains.\n    '''\n    if string == \"\":\n        return []\n    else:\n        return [x+y for y in LetterCombinations(string[1:]) for x in LetterCombinations(string[0])]\n    \ndef ListIndex(list, item):\n    '''\n    Write a python function which takes a list of integers and returns the index of the first occurrence of an integer in the list.\n    '''\n    return list.index(item)\n    \ndef Contains(list, item):\n    '''\n    Write a python function which takes a list of integers and returns True if the list contains the integer and False otherwise.\n    '''\n    return item in list\n    \ndef IsPalindrome(string):\n    '''\n    Write a python function which takes a string and returns True if the string is a palindrome and False otherwise.\n    '''\n    return string == string[::-1]\n    \ndef IsPalindrome2(string):\n    '''\n    Write a python function which takes a string and returns True if the string is a palindrome and False otherwise.\n    '''\n    return len(string) == 0 or string[0] == string[-1] and IsPalindrome2(string[1:-1])\n    \ndef Encode(string):\n    '''\n    Write a python function which takes a string and returns an encoded string.\n    '''\n    return \"\".join(chr(ord(x)+2) for x in string)\n    \ndef GetEvens(list):\n    '''\n    Write a python function which takes a list of integers and returns a list of the even integers from the original list.\n    '''\n    return [x for x in list if x%2 == 0]\n    \ndef GetOdds(list):\n    '''\n    Write a python function which takes a list of integers and returns a list of the odd integers from the original list.\n    '''\n    return [x for x in list if x%2!= 0]\n    \ndef StringReverse(string):\n    '''\n    Write a python function which takes a string and returns the reverse of that string.\n    '''\n    return string[::-1]\n    \ndef LargestDivisor(list):\n    '''\n    Write a python function which takes a list of integers and returns the largest integer from the list that divides all the numbers evenly.\n    '''\n    return max([x for x in range(1,max(list)+1) if all(x%y == 0 for y in list)])\n    \ndef AllLinesHaveSameLength(list):\n    '''\n    Write a python function which takes a list of integers and returns True if all the numbers in the list have the same length and False otherwise.\n    '''\n    return len(set([len(x) for x in list])) == 1\n    \ndef ArithmeticSlices(list):\n    '''\n    Write a python function which takes a list of integers and returns all the arithmetic sequences in that list.\n    '''\n    result = []\n    for x in range(len(list)):\n        if x+2 <= len(list):\n            if list[x] + list[x+1] == list[x+2]:\n                result.append([list[x], list[x+1], list[x+2]])\n    return result\n    \ndef LettersAndDigits(string):\n    '''\n    Write a python function which takes a string and returns a list of the characters that are both letters and digits.\n    '''\n    return [x for x in string if x.isalpha() and x.isdigit()]\n    \ndef IsAnagram(string1, string2):\n    '''\n    Write a python function which takes two strings and returns True if the two strings are anagrams of each other and False otherwise.\n    '''\n    return sorted(string1) == sorted(string2)\n    \ndef IsAnagram2(string1, string2):\n    '''\n    Write a python function which takes two strings and returns True if the two strings are anagrams of each other and False otherwise.\n    '''\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for item in list:\n        if item%2 == 1:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list.sort()\n    for x in list:\n        if (x % 2!= 0):\n            print(x)\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n    return even\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    new_list = []\n    for i in list:\n        if (i % 2!= 0):\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum([i**3 for i in range(1,n)]) - sum([i for i in range(1,n+1)])\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # initialize sum of cubes as 0\n    sum_of_cubes = 0\n    \n    # start counting from 1\n    for i in range(1, n+1) :\n        sum_of_cubes = sum_of_cubes + (i * i * i)\n    \n    # sum of first n natural numbers\n    sum_of_first_n_numbers = ((n * (n + 1))/2)\n    \n    # difference = sum of cubes - sum of first n natural numbers\n    return sum_of_cubes - sum_of_first_n_numbers\n    \n    \nif __name__ == \"__main__\":\n    number = int(input(\"Enter a number: \"))\n    print(\"The difference is: \", difference(number))"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    s=0\n    for i in range(1,n+1):\n        s=s+i**3\n    return (s*2)-(n*(n+1)*(2*n+1))/6\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    #formula to find the sum of cubes of the first n natural numbers\n    cubeSum = (n*(n+1)*(2*n+1))/6\n    \n    #formula to find the sum of first n natural numbers\n    sum = n*(n+1)/2\n    \n    return cubeSum - sum\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    s = 0\n    for i in range(1, n + 1) :\n        s += i ** 3\n    return (s**3 - sum(range(1, n + 1)))\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum1 = 0\n    sum2 = 0\n    for i in range(1, n + 1) :\n        sum1 = sum1 + i * i * i\n    for j in range(1, n + 1) :\n        sum2 = sum2 + j\n    return sum1 - sum2\nprint(difference(100))\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return (sum([x**3 for x in range(1,n+1)]))**0.5 - sum(range(1,n+1))\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum([i**3 for i in range(1,n+1)]) - sum([i for i in range(1,n+1)])\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    s = 0\n    for i in range(1, n+1) :\n        s = s + i ** 3\n    \n    t = 0\n    for i in range(1, n+1) :\n        t = t + i\n    \n    return t ** 3 - s\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    total = 0\n    for i in range(n) :\n        total += i**3\n    print(total)\n    return total - sum(range(n))**3\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    A.sort()\n    count = 0\n    for i in range(N) : \n        for j in range(i+1,N) : \n            if A[j] ^ A[i] & 1 : \n                count += 1\n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # Brute force Method \n    # Total pairs will be : 2N-2\n    # 4-bit each \n    # 4^4 = 256\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_sum = 0\n    for i in range(N-1) : \n        for j in range(i+1,N) :\n            if A[i] ^ A[j] & 1 : \n                xor_sum += 1\n    return xor_sum\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if (A[i]^A[j])%2!= 0 :\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    B = [0]*(N)\n    C = [0]*(N)\n    for i in range(N):\n        B[i] = A[i]%2\n    for i in range(N):\n        for j in range(i+1,N):\n            if B[i]==B[j]:\n                C[i] += 1\n    return C\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    A = sorted(A)\n    count = 0\n    for i in range(N-1) :\n        if (A[i]^A[i+1])%2 == 1 :\n            count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_pairs = 0\n    for i in range(0,N) : \n        for j in range(i+1,N) : \n            if (A[i]^A[j])%2 : \n                odd_pairs += 1\n    return odd_pairs\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count=0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if A[i] ^ A[j] & 1 :\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-1) : \n        for j in range(i+1,N) : \n            if A[i] ^ A[j] & 0x01 : \n                count += 1\n    return count\ndef find_Odd_Pair_with_XOR(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-1) : \n        for j in range(i+1,N) : \n            if A[i] ^ A[j] & 0x01 : \n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if A[i] ^ A[j] & 1 :\n                count += 1\n    return count\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(list(map(str.swapcase, list(string))))\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    t = string.lower()\n    return t.capitalize()\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string == \"\":\n        return string\n    if len(string) == 1:\n        return string.lower()\n    else:\n        return string[0].upper() + string[1:].lower()\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return \"\".join(map(lambda x: x.upper() if x.islower() else x.lower(), string))\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = []\n    for char in string:\n        if char.isupper():\n            new_string.append(char.lower())\n        elif char.islower():\n            new_string.append(char.upper())\n        else:\n            new_string.append(char)\n    return ''.join(new_string)\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for c in string:\n        if c.isalpha():\n            result += c.lower() if c.isupper() else c.upper()\n        else:\n            result += c\n    return result\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    \n    new_string = ''\n    for i in string:\n        if i == i.upper():\n            new_string += i.lower()\n        else:\n            new_string += i.upper()\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # return string.swapcase()\n    return ''.join([char.swapcase() if char.isalpha() else char for char in string])\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for c in string:\n        if c.islower():\n            result += c.upper()\n        else:\n            result += c.lower()\n    return result\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1, n2 = abs(n1), abs(n2)\n    digit_diff = 0\n    if n1 < n2:\n        n1, n2 = n2, n1\n    digit_num = len(str(n1))\n    while n1 and n2:\n        digit_diff += (n1 % 10) - (n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    if n1:\n        digit_diff += n1 - n2\n    digit_diff *= 10**(digit_num - 1)\n    return digit_diff\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    return sum([1 if int(i1) - int(i2)!= 0 else 0 for i1, i2 in zip(n1, n2)])\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    if len(n1) < len(n2):\n        n1, n2 = n2, n1\n    n1 = n1[::-1]\n    n2 = n2[::-1]\n    n1 = n1.lstrip('0')\n    n2 = n2.lstrip('0')\n    result = 0\n    for i in range(len(n1)):\n        result += (ord(n1[i]) - ord(n2[i]))\n    return result\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1, n2 = [int(x) for x in (n1, n2)]\n    if not isinstance(n1, int) or not isinstance(n2, int):\n        return None\n    if n1 < n2:\n        n1, n2 = n2, n1\n    n1, n2 = str(n1), str(n2)\n    return sum(abs(int(i1) - int(i2)) for i1, i2 in zip(n1, n2))\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    num1, num2 = abs(n1), abs(n2)\n    str1, str2 = str(num1), str(num2)\n    lst1, lst2 = [int(i) for i in str1], [int(i) for i in str2]\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1, n2 = int(n1), int(n2)\n    return sum(abs(int(a) - int(b)) for a, b in zip(str(n1), str(n2)))\n    \nif __name__ == '__main__':\n    print digit_distance_nums(1, 9)\n    print digit_distance_nums(1234, 5678)"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 < n2:\n        num1 = n1\n        num2 = n2\n    else:\n        num1 = n2\n        num2 = n1\n    sum = 0\n    for i in range(len(str(num1))):\n        sum += abs(int(str(num1)[i]) - int(str(num2)[i]))\n    return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(int(d1) - int(d2)) for d1, d2 in zip(str(n1), str(n2))])\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == n2:\n        return 0\n    elif n1 < n2:\n        return digit_distance_nums(n2, n1)\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = str(n1)\n    d2 = str(n2)\n    d1 = d1.split('.')\n    d2 = d2.split('.')\n    d1_1 = d1[1]\n    d2_1 = d2[1]\n    d1_2 = int(d1_1)\n    d2_2 = int(d2_1)\n    d = abs(d2_2 - d1_2)\n    d = int(d)\n    return d\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(0, size):\n        max_ending_here += a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif (max_so_far < max_ending_here):\n            max_so_far = max_ending_here\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    start = 0\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n            start = i+1\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    max_sum, curr_sum = a[0], a[0]\n    for i in xrange(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = -float('inf')\n    cur_sum = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_ending_here = max_so_far = 0\n    for i in range(0,size):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif(max_so_far < max_ending_here):\n            max_so_far = max_ending_here\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = 0\n    max_ending_here = 0\n    start = 0\n    end = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n            start = i + 1\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            end = i\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    start = 0\n    max_so_far = float('-inf')\n    curr_max = float('-inf')\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = -99999999999999999\n    current_sum = 0\n    for i in range(0, size):\n        current_sum = current_sum + a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    curr_max = a[0]\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if len(a) == 0:\n        return 0\n    else:\n        max_ending_here = max_so_far = a[0]\n        for i in xrange(1, size):\n            max_ending_here = max(a[i], max_ending_here + a[i])\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set(test_tup1) | set(test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Your code here\n    return tuple(sorted(set(test_tup1 + test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise ValueError(\"The input values must be tuples\")\n    union_tup = tuple(set(test_tup1) | set(test_tup2))\n    return union_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    set1, set2 = set(test_tup1), set(test_tup2)\n    return tuple(set1 | set2)\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup3 = sorted(list(set(test_tup1) | set(test_tup2)))\n    return test_tup3\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    for tup in test_tup1:\n        if tup not in test_tup2:\n            test_tup2 += (tup,)\n    test_tup2 = sorted(test_tup2)\n    return test_tup2\n    \ndef main():\n    test_tup1 = ('1', '3', '5', '7')\n    test_tup2 = ('2', '4', '6', '8')\n    print(union_elements(test_tup1, test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) == 0:\n        return test_tup2\n    elif len(test_tup2) == 0:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return [test_tup1[0]] + union_elements(test_tup1[1:], test_tup2)\n    else:\n        return [test_tup2[0]] + union_elements(test_tup1, test_tup2[1:])\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup1, test_tup2 = map(tuple, [test_tup1, test_tup2])\n    # write your code here\n    union_list = []\n    for tup in test_tup1:\n        if tup not in test_tup2:\n            union_list.append(tup)\n    for tup in test_tup2:\n        if tup not in test_tup1:\n            union_list.append(tup)\n    union_list.sort()\n    return tuple(union_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup1 = set(test_tup1)\n    test_tup2 = set(test_tup2)\n    union_elements = sorted(test_tup1 | test_tup2)\n    return union_elements\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    test_set3 = test_set1.union(test_set2)\n    test_tuple = tuple(sorted(test_set3))\n    return test_tuple\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    d = {}  # Create an empty dictionary\n    max = 0  # The max value of the dictionary\n    for i in lst:  # For each item in the list\n        s = str(i)\n        if s not in d:  # If the item is not in the dictionary\n            d[s] = 1  # Add it with value 1\n        else:  # If it is in the dictionary\n            d[s] += 1  # Increment the value by 1\n        if d[s] > max:  # If the value is greater than the max value\n            max = d[s]  # Assign the new value to max\n    return max  # Return the max value\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    result = []\n    for i in range(len(lst)):\n        if i+1 < len(lst):\n            if lst[i] < lst[i+1]:\n                result.append(lst[i])\n            else:\n                result.append(lst[i+1])\n        else:\n            result.append(lst[i])\n    return result\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    for i in range(len(lst)):\n        for j in range(len(lst)-i):\n            if lst[i] < lst[i+j]:\n                lst[i+j] = lst[i]\n    \n    return max(lst)\n    \n    \n    \ndef Find_Max_Length_2(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        j = 0\n        temp_length = 1\n        while j < len(lst):\n            if lst[i+j] < lst[i]:\n                temp_length += 1\n            else:\n                if temp_length > max_length:\n                    max_length = temp_length\n                break\n            j += 1\n    \n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length=0\n    for i in range(0,len(lst)):\n        if(len(lst[i])>max_length):\n            max_length=len(lst[i])\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return 1\n    sublist_lst = []\n    for i in range(0, len(lst)):\n        for j in range(i, len(lst)):\n            sublist_lst.append(lst[i:j+1])\n    max_length = 0\n    for lst in sublist_lst:\n        if len(lst) > max_length:\n            max_length = len(lst)\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest = 0\n    for x in lst:\n        if len(x) > longest:\n            longest = len(x)\n    return longest\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    def create_groups(lst):  \n        '''\n        Write a python function to create groups\n        '''\n        tmp = []\n        i = 0\n        while i < len(lst):  \n            tmp.append(lst[i])  \n            i = i+1  \n            if i == len(lst):  \n                break  \n            if lst[i]!= lst[i-1]:  \n                yield tmp  \n                tmp = []  \n                i = i+1  \n        if len(tmp) > 0:  \n            yield tmp  \n            \n    \n    def find_max_length(lst):  \n        '''\n        Write a python function to find the length of the longest sublists.\n        '''\n        max_length = 0  \n        for group in create_groups(lst):  \n            max_length = max(max_length, len(group))  \n        return max_length  \n    \n    \n    def create_groups(lst):  \n        '''\n        Write a python function to create groups\n        '''\n        tmp = []\n        i = 0\n        while i < len(lst):  \n            tmp.append(lst[i])  \n            i = i+1  \n            if i == len(lst):  \n                break  \n            if lst[i]!= lst[i-1]:  \n                yield tmp  \n                tmp = []  \n                i = i+1  \n        if len(tmp) > 0:  \n            yield tmp  \n            \n    \n    def find_max_length(lst):  \n        '''\n        Write a python function to find the length of the longest sublists.\n        '''\n        max_length = 0  \n        for group in create_groups(lst):  \n            max_length = max(max_length, len(group))  \n        return max_length  \n    \n    \n    def create_groups(lst):  \n        '''\n        Write a python function to create groups\n        '''\n        tmp = []\n        i = 0\n        while i < len(lst):  \n            tmp.append(lst[i])  \n            i = i+1  \n            if i == len(lst):  \n                break  \n            if lst[i]!= lst[i-1]:  \n                yield tmp  \n                tmp = []  \n                i = i+1  \n        if len(tmp) > 0:  \n            yield tmp  \n            \n    \n    def find_max_length(lst):  \n        '''\n        Write a python function to find the length of the longest sublists.\n        '''\n        max_length = 0  \n        for group in create_groups(lst):  \n            max_length = max(max_length, len(group))  \n        return max_length  \n    \n    \n    def create_groups(lst):  \n        '''\n        Write a python function to create groups\n        '''\n        tmp = []\n        i = 0\n        while i < len(lst):  \n            tmp.append(lst[i])  \n            i = i+1  \n            if i == len(lst):  \n                break  \n            if lst[i]!= lst[i-1]:  \n                yield tmp  \n                tmp = []  \n                i = i+1  \n        if len(tmp) > 0:  \n            yield tmp  \n            \n    \n    def find_max_length(lst):  \n        '''\n        Write a python function to find the length of the longest sublists.\n        '''\n        max_length = 0  \n        for group in create_groups(lst):  \n            max_length = max(max_length, len(group))  \n        return max_length  \n    \n    \n    def create_groups(lst):  \n        '''\n        Write a python function to create groups\n        '''\n        tmp = []\n        i = 0\n        while i < len(lst):  \n            tmp.append(lst[i])  \n            i = i+1  \n            if i == len(lst):  \n                break  \n            if lst[i]!= lst[i-1]:  \n                yield tmp  \n                tmp = []  \n                i = i+1  \n        if len(tmp) > 0:  \n            yield tmp  \n            \n    \n    def find_max_length(lst):  \n        '''\n        Write a python function to find the length of the longest sublists.\n        '''\n        max_length = 0  \n        for group in create_groups(lst):  \n            max_length = max(max_length, len(group))  \n        return max_length  \n    \n    \n    def create_groups(lst):  \n        '''\n        Write a python function to create groups\n        '''\n        tmp = []\n        i = 0\n        while i < len(lst):  \n            tmp.append(lst[i])  \n            i = i+1  \n            if i == len(lst):  \n                break  \n            if lst[i]!= lst[i-1]:  \n                yield tmp  \n                tmp = []  \n                i = i+1  \n        if len(tmp) > 0:  \n            yield tmp  \n            \n    \n    def find_max_length(lst):  \n        '''\n        Write a python function to find the length of the longest sublists.\n        '''\n        max_length = 0  \n        for group in create_groups(lst):  \n            max_length = max(max_length, len(group))  \n        return max_length  \n    \n    \n    def create_groups(lst):  \n        '''\n        Write a python function to create groups\n        '''\n        tmp = []\n        i = 0\n        while i < len(lst):  \n            tmp.append(lst[i])  \n            i = i+1  \n            if i == len(lst):  \n                break  \n            if lst[i]!= lst[i-1]:  \n                yield tmp  \n                tmp = []  \n                i = i+1  \n        if len(tmp) > 0:  \n            yield tmp  \n            \n    \n    def find_max_length(lst):  \n        '''\n        Write a python function to find the length of the longest sublists.\n        '''\n        max_length = 0  \n        for group in create_groups(lst):  \n            max_length = max(max_length, len(group))  \n        return max_length  \n    \n    \n    def create_groups(lst):  \n        '''\n        Write a python function to create groups\n        '''\n        tmp = []\n        i = 0\n        while i < len(lst):  \n            tmp.append(lst[i])  \n            i = i+1  \n            if i == len(lst):  \n                break  \n            if lst[i]!= lst[i-1]:  \n                yield tmp  \n                tmp = []  \n                i = i+1  \n        if len(tmp) > 0:  \n            yield tmp  \n            \n    \n    def find_max_length(lst):  \n        '''\n        Write a python function to find the length of the longest sublists.\n        '''\n        max_length = 0  \n        for group in create_groups(lst):  \n            max_length = max(max_length, len(group))  \n        return max_lengt"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    val_start_index = 0\n    val_end_index = 0\n    i = 0\n    for i, char in enumerate(text):\n        if char == '\"':\n            val_start_index = i + 1\n            break\n    for i, char in enumerate(text[::-1]):\n        if char == '\"':\n            val_end_index = len(text) - i\n            break\n    return text[val_start_index:val_end_index]\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # using the regex expression from: https://regex101.com/r/Q0TBeE/1\n    # extract all values between quotation marks\n    # return them as a list\n    # return the list\n    return re.findall(r'\\\"(.+?)\\\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\\\"(.*?)\\\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    result = re.findall(r'\"([^\"]*)\"', text)\n    return result\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = []\n    matcher = re.compile(r'\".*?\"')\n    for i in matcher.findall(text):\n        values.append(i[1:-1])\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('(\\\"(.*?)\\\"|\\'(.*?)\\')', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\\\"(.*?)\\\"')\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\\\".*?\\\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Split the string and then reverse the list\n    list_of_values = [value for value in text[1:-1]]\n    list_of_values.reverse()\n    # Join the list together\n    return ''.join(list_of_values)\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    \n    new_text = re.findall(r'\\\".*?\\\"',text)\n    return new_text\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pair_count = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                pair_count = pair_count + 1\n    return pair_count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    #Initialize count to zero\n    count = 0\n    #Create an empty dictionary\n    dictionary = {}\n    #Iterate through the list\n    for i in range(n):\n        #Update the count\n        count += arr[i]\n        #Add the key/value pair to dictionary\n        if arr[i] in dictionary:\n            dictionary[arr[i]] += 1\n        else:\n            dictionary[arr[i]] = 1\n    #Now the count is equal to the total number of distinct elements\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    arr.sort()\n    for i in range(n):\n        if arr[i] == arr[i+1]:\n            count += 1\n    return count \n        \ndef sieve_of_Eratosthenes(n):\n    '''\n    Write a python program to generate the prime numbers upto N using Sieve of Eratosthenes method.\n    '''\n    arr = [1]*(n+1)\n    arr[0], arr[1] = 0, 0\n    for i in range(2,n+1):\n        if arr[i]:\n            for j in range(i*2,n+1,i):\n                arr[j] = 0\n    return arr\n    \ndef prime_factors(n):\n    '''\n    Write a python program to compute the prime factors of a number\n    '''\n    arr = []\n    while n%2 == 0:\n        arr.append(2)\n        n /= 2\n    for i in range(3,int(n**0.5)+1,2):\n        while n%i == 0:\n            arr.append(i)\n            n /= i\n    if n>2:\n        arr.append(n)\n    return arr\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    from collections import defaultdict\n    count = 0\n    arr = sorted(arr)\n    hashtable = defaultdict(int)\n    for i in range(n):\n        hashtable[arr[i]] += 1\n    for i in range(n-1):\n        if arr[i]!= arr[i+1]:\n            hashtable[arr[i+1]] += hashtable[arr[i]]\n            count += hashtable[arr[i]] * hashtable[arr[i+1]]\n    return count\n    \n    \n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    a = Counter(arr)\n    pairs = 0\n    for i in a:\n        if a[i]>1:\n            pairs+= a[i]-1\n    print pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    #logic - loop through the array and store the elements in a set\n    #then use the set to count the pairs\n    \n    unique_elements = set()\n    pairs = 0\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n < 2:\n        return 0\n    if n == 2:\n        if arr[0]!= arr[1]:\n            return 1\n        else:\n            return 0\n    \n    arr.sort()\n    count = 0\n    for i in range(n):\n        if arr[i]!= arr[i-1]:\n            count += count_Pairs(arr[i:],n-1)\n    return count\n    \ndef count_Pairs_nlogn(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n < 2:\n        return 0\n    if n == 2:\n        if arr[0]!= arr[1]:\n            return 1\n        else:\n            return 0\n    \n    arr.sort()\n    count = 0\n    for i in range(n):\n        if arr[i]!= arr[i-1]:\n            count += 1\n            left = i + 1\n            right = n - 1\n            while left < right:\n                if arr[left] == arr[right]:\n                    count += 1\n                    left += 1\n                    right -= 1\n                else:\n                    right -= 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    counter = 0\n    for i in xrange(n):\n        for j in xrange(i,n):\n            if arr[i]!=arr[j]:\n                counter+=1\n    return counter\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    if not word:\n        return []\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word) \n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n!= 0:\n        s += n % 10\n        n /= 10\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n % 10) + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n//10)\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(x) for x in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(map(int, str(n)))\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n<0:\n        return 0\n    else:\n        return n%10+sum_digits(n//10)\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n / 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(x) for x in str(n)])\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list2 = sorted(list1)\n    if list1 == list2:\n        print \"The list is sorted\"\n    else:\n        print \"The list is not sorted\"\n    return\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\n    \ndef issort_list2(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1, reverse = True)\n    "
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1,len(list1)):\n        if list1[i-1]>list1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return (all(list1[i] <= list1[i+1] for i in range(len(list1)-1)) == True)\n    \n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1,len(list1)):\n        if list1[i]<list1[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    if len(list1) == 1:\n        return True\n    if len(list1) > 1:\n        if list1[0] >= list1[1]:\n            return False\n        else:\n            return issort_list(list1[1:])\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i - 1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    return False\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return list1[0] <= list1[1] and issort_list(list1[1:])\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for x in range(len(list1)-1):\n        if list1[x] > list1[x+1]:\n            return False\n    return True\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list_of_dicts = []\n    for i in range(length):\n        list_of_dicts.append({})\n    return list_of_dicts\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for x in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [dict() for i in xrange(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    def list_empty():\n        return [{} for _ in range(length)]\n    return list_empty\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty = [{} for i in range(length)]\n    return empty\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list_of_dictionaries = []\n    for _ in range(length):\n        dict = {}\n        list_of_dictionaries.append(dict)\n    return list_of_dictionaries\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    dict1 = {}\n    for item in list1:\n        if item[0] not in dict1:\n            dict1[item[0]] = [item[1]]\n        else:\n            dict1[item[0]].append(item[1])\n    return dict1\n    \ndef sort_by_alpha(dict1):\n    '''\n    Write a function to sort the dictionary by the key's alphabetically.\n    '''\n    list1 = []\n    for key in sorted(dict1.keys()):\n        list1.append((key, dict1[key]))\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2.append(sorted(list1[i]))\n    return list2\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    newlist = []\n    for i in range(len(list1)):\n        newlist.append(sorted(list1[i]))\n    return newlist\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1.sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for list2 in list1:\n        list2.sort(key=lambda x:x[0])\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    temp = []\n    for i in list1:\n        for j in i:\n            temp.append(j)\n    temp = sorted(temp)\n    new_list = []\n    for i in temp:\n        new_list.append(list1[temp.index(i)])\n    return new_list\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if not list1:\n        return []\n    else:\n        for i in range(len(list1)):\n            list1[i] = sorted(list1[i])\n        return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=lambda word: sorted(word))\n    \nprint(sort_sublists([\"hello\", \"goodbye\", \"I\", \"am\", \"a\", \"student\", \"I\", \"have\", \"been\", \"in\", \"the\", \"world\", \"before\", \"I\", \"killed\", \"him\"]))\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    final_list = []\n    for i in range(len(list1)):\n        list1[i].sort()\n        final_list.append(list1[i])\n    return final_list\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return len(set(nums)) == 2\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(set(sum(nums, [])))\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return len(unique_nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(set(nums))\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    l = []\n    for num in nums:\n        if num not in l:\n            l.append(num)\n    return l\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    for i in nums:\n        if i not in result:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    l1 = list(set(nums))\n    l2 = l1[::-1]\n    print (l2)\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return set(nums)\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for i in list_data:\n        if i!= 0:\n            product *= i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for data in list_data:\n        product = product * data\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return reduce(lambda x, y: x*y, (set(list_data)))\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    if len(list_data) == 0:\n        return 1\n    for i in range(len(list_data)):\n        product *= list_data[i]\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    output = 1\n    for x in list_data:\n        output = output*x\n    return output\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return reduce(lambda x, y: x * y, set(list_data))\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique = []\n    for i in list_data:\n        if i not in unique:\n            unique.append(i)\n    product = 1\n    for i in unique:\n        product = product * i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    total = 1\n    for data in list_data:\n        total *= data\n    return total\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    #create an empty dictionary\n    mapping = {}\n    #traverse through the list\n    for x in list_data:\n        #if the number is already there\n        #in the dictionary\n        if x in mapping:\n            #increment the count by one\n            mapping[x] += 1\n        else:\n            #add the number to dictionary with count as 1\n            mapping[x] = 1\n    #print the keys in the dictionary\n    print(mapping.keys())\n    #print the values in the dictionary\n    print(mapping.values())\n    #print the sum of the values in the dictionary\n    print(sum(mapping.values()))\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = [2,4,5,6,2,4,2,6,6,7,2]\n    temp_list = []\n    product = 1\n    for x in list_data:\n        if x not in temp_list:\n            temp_list.append(x)\n            product *= x\n    return product\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi=3.14159265358979323\n    return 2*pi*r*h + 2*pi*r**2\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*(r+h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (2*3.14159265359*r*h + 2*3.14159265359*r**2)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return np.pi*(r**2)+(2*np.pi*r*h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159265359\n    return pi*(r**2) + 2*pi*r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159\n    sa = (2*pi*r*h) + (2*pi*r**2)\n    return sa\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sa = 2*math.pi*r*(r+h)\n    return sa\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    SA = 2*np.pi*r*h + 2*np.pi*r**2\n    return SA\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sa = 2 * pi * r * (r + h)\n    return sa\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*(r+h)\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B)>len(A): return False\n    for i in xrange(len(B)):\n        if B[i]!=A[i]:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    def is_Sublist(A, B):\n        if len(B) > len(A):\n            return False\n        for i in range(0, len(A)):\n            if A[i] == B[0]:\n                if is_Sublist(A[i:], B):\n                    return True\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)):\n        if B[i] not in A:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if type(B) is not list:\n        return 0\n    if type(A) is not list:\n        return 0\n    for a in A:\n        if a not in B:\n            return 0\n    return 1\ndef is_Sub_Array_2(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if type(B) is not list:\n        return 0\n    if type(A) is not list:\n        return 0\n    \n    if len(B) > len(A):\n        return 0\n    for i in range(len(A)):\n        if A[i]!= B[i]:\n            return 0\n    return 1\n    \n    \n    \ndef is_Sub_Array_3(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if type(B) is not list:\n        return 0\n    if type(A) is not list:\n        return 0\n    for i in range(len(A)):\n        if A[i] not in B:\n            return 0\n    return 1\ndef is_Sub_Array_4(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if type(B) is not list:\n        return 0\n    if type(A) is not list:\n        return 0\n    if len(B) > len(A):\n        return 0\n    for i in range(len(A)):\n        if A[i] not in B:\n            return 0\n    return 1\ndef is_Sub_Array_5(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if type(B) is not list:\n        return 0\n    if type(A) is not list:\n        return 0\n    if len(B) > len(A):\n        return 0\n    for i in range(len(A)):\n        if A[i] not in B:\n            return 0\n    return 1\ndef is_Sub_Array_6(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if type(B) is not list:\n        return 0\n    if type(A) is not list:\n        return 0\n    if len(B) > len(A):\n        return 0\n    for i in range(len(A)):\n        if A[i] not in B:\n            return 0\n    return 1\ndef is_Sub_Array_7(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if type(B) is not list:\n        return 0\n    if type(A) is not list:\n        return 0\n    if len(B) > len(A):\n        return 0\n    for i in range(len(A)):\n        if A[i] not in B:\n            return 0\n    return 1\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if B == []:\n        return True\n    if len(A) < len(B):\n        return False\n    for i in xrange(len(B)):\n        if A[i] == B[i]:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)==0:\n        return 1\n    elif len(B)==0:\n        return 0\n    elif len(A)>len(B):\n        return 0\n    else:\n        for i in range(len(B)):\n            if A[i]==B[i]:\n                pass\n            else:\n                return 0\n        return 1\ndef reverse(A):\n    '''\n    Write a python function to reverse the list.\n    '''\n    if len(A)==0:\n        return A\n    else:\n        return reverse(A[1:])+[A[0]]\ndef partition(A,p,r):\n    '''\n    Write a python function to partition a list based on a particular value(p)\n    '''\n    i=p-1\n    for j in range(p,r):\n        if A[j]<=A[r]:\n            i=i+1\n            A[i],A[j]=A[j],A[i]\n    A[i+1],A[r]=A[r],A[i+1]\n    return i+1\ndef quick_sort(A,p,r):\n    '''\n    Write a python function to sort a list in ascending order using quick sort\n    '''\n    if p<r:\n        q=partition(A,p,r)\n        quick_sort(A,p,q-1)\n        quick_sort(A,q+1,r)\n    return A\ndef merge_Sort(A):\n    '''\n    Write a python function to sort a list in ascending order using merge sort.\n    '''\n    if len(A)<2:\n        return A\n    else:\n        mid=len(A)//2\n        L=merge_Sort(A[:mid])\n        R=merge_Sort(A[mid:])\n        i=0\n        j=0\n        C=[]\n        while i<len(L) and j<len(R):\n            if L[i]<=R[j]:\n                C.append(L[i])\n                i=i+1\n            else:\n                C.append(R[j])\n                j=j+1\n        while i<len(L):\n            C.append(L[i])\n            i=i+1\n        while j<len(R):\n            C.append(R[j])\n            j=j+1\n        return C\ndef swap_Sort(A):\n    '''\n    Write a python function to sort a list in ascending order using swap sort.\n    '''\n    if len(A)<2:\n        return A\n    else:\n        for i in range(len(A)-1):\n            if A[i]>A[i+1]:\n                A[i],A[i+1]=A[i+1],A[i]\n    return A\ndef binary_Search(A,key):\n    '''\n    Write a python function to search a list for a particular value and return the position of the value in the list.\n    '''\n    if len(A)==0:\n        return -1\n    else:\n        l=0\n        r=len(A)-1\n        while l<=r:\n            mid=(l+r)//2\n            if A[mid]==key:\n                return mid\n            elif A[mid]<key:\n                l=mid+1\n            else:\n                r=mid-1\n        return -1\ndef sorted_Insert(A,key):\n    '''\n    Write a python function to insert a particular value in a sorted list.\n    '''\n    if len(A)==0:\n        A.append(key)\n    else:\n        l=0\n        r=len(A)-1\n        while l<=r:\n            mid=(l+r)//2\n            if A[mid]>key:\n                r=mid-1\n            else:\n                l=mid+1\n        A.insert(l,key)\n    return A\ndef Select(A,p,r):\n    '''\n    Write a python function to select a particular value from a sorted list based on the index position.\n    '''\n    if p==r:\n        return A[p]\n    else:\n        q=partition(A,p,r)\n        if q==p:\n            return A[q]\n        elif q==r:\n            return A[q]\n        else:\n            return Select(A,p,q-1)\ndef radix_Sort(A):\n    '''\n    Write a python function to sort a list of strings using radix sort.\n    '''\n    if len(A)==0:\n        return A\n    else:\n        m=max(A)\n        k=0\n        while 10**k<=m:\n            buckets=[[] for i in range(10)]\n            for a in A:\n                d=a//(10**k)%10\n                buckets[d].append(a)\n            k=k+1\n            i=0\n            for bucket in buckets:\n                for a in bucket:\n                    A[i]=a\n                    i=i+1\n    return A\ndef insertion_Sort(A):\n    '''\n    Write a python function to sort a list of strings using insertion sort.\n    '''\n    if len(A)==0:\n        return A\n    else:\n        for i in range(1,len(A)):\n            j=i-1\n            key=A[i]\n            while j>=0 and A[j]>key:\n                A[j+1]=A[j]\n                j=j-1\n            A[j+1]=key\n    return A\ndef selection_Sort(A):\n    '''\n    Write a python function to sort a list of strings using selection sort.\n    '''\n    if len(A)==0:\n        return A\n    else:\n        for i in range(len(A)):\n            min=i\n            for j in range(i,len(A)):\n                if A[min]>A[j]:\n                    min=j\n            A[i],A[min]=A[min],A[i]\n    return A\ndef bubble_Sort(A):\n    '''\n    Write a python function to sort a list of strings using bubble sort.\n    '''\n    if len(A)==0:\n        return A\n    else:\n        for i in range(len(A)-1):\n            for j in range(len(A)-i-1):\n                if A[j]>A[j+1]:\n                    A[j],A[j+1]=A[j+1],A[j]\n    return A\ndef insertion_Sort(A):\n    '''\n    Write a python function to sort a list of strings using insertion sort.\n    '''\n    if len(A)==0:\n        return A\n    else:\n        for i in range(1,len(A)):\n            j=i-1\n            key=A[i]\n            while j>=0 and A[j]>key:\n                A[j+1]=A[j]\n                j=j-1\n            A[j+1]=key\n    return A\ndef shell_Sort(A):\n    '''\n    Write a python function to sort a list of strings using shell sort.\n    '''\n    if len(A)==0:\n        return A\n    else:\n        d=len(A)//2\n        while d>0:\n            for i in range(d,len(A)):\n                j=i\n                key=A[i]\n                while j>=d and A[j-d]>key:\n                    A[j]=A[j-d]\n                    j=j-d\n                A[j]=key\n            d=d//2\n    return A\ndef exchange_Sort(A):\n    '''\n    Write a python function to sort a list of strings using exchange sort.\n    '''\n    if len(A)==0:\n        return A\n    else:\n        for i in range(len(A)):\n            for j in range(i,len(A)):\n                if A[i]>A[j]:\n                    A[i],A[j]=A[j],A[i]\n    return A\ndef python_Sort(A):\n    '''\n    Write a python function to sort a list o"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return A == B or (len(A) <= len(B)) and is_Sub_Array(A[1:], B)\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(B)):\n        if A[i] == B[i]:\n            pass\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    for i in range(0,len(B)):\n        if B[i]!=A[i]:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    else:\n        for i in range(len(A)):\n            if A[i] == B[i]:\n                i+=1\n            else:\n                return False\n        return True\ndef is_Sub_Array_2(A,B):\n    return B in A\ndef find_Sub_Arrays(A,B):\n    '''\n    Write a python function to find all the sub-arrays of A such that each element in the sub-array is also a sub-array of B.\n    '''\n    if len(A)<len(B):\n        return []\n    else:\n        result=[]\n        for i in range(len(A)):\n            if is_Sub_Array(A[i:],B):\n                result.append(A[i:])\n    return result\ndef find_all_SubArrays(A,B):\n    '''\n    Write a python function to find all the sub-arrays of A such that each element in the sub-array is also a sub-array of B.\n    '''\n    if len(A)<len(B):\n        return []\n    else:\n        return [A[i:j] for i in range(len(A)) for j in range(i,len(A)) if is_Sub_Array(A[i:j],B)]"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    a = n\n    x = 1\n    while a>0:\n        x *= a\n        a -= 1\n    return x%10\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    import math\n    if n < 0:\n        print(\"Invalid Input\")\n    elif n == 0:\n        return 1\n    else:\n        return math.factorial(n-1) % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    digit = 1\n    while n > 0:\n        digit = digit * (n % 10)\n        n = n // 10\n    return digit\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return pow(n, 10, 10)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    c = 1\n    for i in range(1,n+1):\n        c = c * i\n    return c%10\n    \ndef first_Digit_Factorial(n):\n    '''\n    Write a python function to find the first digit in factorial of a given number.\n    '''\n    c = 1\n    for i in range(1,n+1):\n        c = c * i\n    return c%10\n    \ndef sum_Digits_Factorial(n):\n    '''\n    Write a python function to find the sum of digits in factorial of a given number.\n    '''\n    s = 0\n    c = 1\n    for i in range(1,n+1):\n        c = c * i\n    for i in range(0,len(str(c))):\n        s = s + int(str(c)[i])\n    return s\n    \ndef first_Digit_Prime(n):\n    '''\n    Write a python function to find the first digit in prime of a given number.\n    '''\n    c = 0\n    for i in range(2,n+1):\n        if n%i == 0:\n            c = c + 1\n    if c == 0:\n        return 1\n    else:\n        return 0\n        \ndef last_Digit_Prime(n):\n    '''\n    Write a python function to find the last digit in prime of a given number.\n    '''\n    c = 0\n    for i in range(2,n+1):\n        if n%i == 0:\n            c = c + 1\n    if c == 0:\n        return 1\n    else:\n        return 0\n        \ndef sum_Digits_Prime(n):\n    '''\n    Write a python function to find the sum of digits in prime of a given number.\n    '''\n    s = 0\n    c = 0\n    for i in range(2,n+1):\n        if n%i == 0:\n            s = s + i\n            c = c + 1\n    if c == 0:\n        return 1\n    else:\n        return 0\n        \ndef first_Digit_Armstrong(n):\n    '''\n    Write a python function to find the first digit in armstrong of a given number.\n    '''\n    s = 0\n    c = 0\n    for i in range(2,n+1):\n        for j in range(1,i):\n            if i%j == 0:\n                s = s + j\n        if s == i:\n            c = c + 1\n    if c == 0:\n        return 1\n    else:\n        return 0\n        \ndef last_Digit_Armstrong(n):\n    '''\n    Write a python function to find the last digit in armstrong of a given number.\n    '''\n    s = 0\n    c = 0\n    for i in range(2,n+1):\n        for j in range(1,i):\n            if i%j == 0:\n                s = s + j\n        if s == i:\n            c = c + 1\n    if c == 0:\n        return 1\n    else:\n        return 0\n        \ndef sum_Digits_Armstrong(n):\n    '''\n    Write a python function to find the sum of digits in armstrong of a given number.\n    '''\n    s = 0\n    c = 0\n    for i in range(2,n+1):\n        for j in range(1,i):\n            if i%j == 0:\n                s = s + j\n        if s == i:\n            c = c + 1\n    if c == 0:\n        return 1\n    else:\n        return 0\n        \ndef first_Digit_Armstrong_Prime(n):\n    '''\n    Write a python function to find the first digit in armstrong prime of a given number.\n    '''\n    c = 0\n    for i in range(2,n+1):\n        if n%i == 0:\n            for j in range(1,i):\n                if i%j == 0:\n                    c = c + 1\n            if c == 0:\n                return 1\n            else:\n                return 0\n    \ndef last_Digit_Armstrong_Prime(n):\n    '''\n    Write a python function to find the last digit in armstrong prime of a given number.\n    '''\n    c = 0\n    for i in range(2,n+1):\n        if n%i == 0:\n            for j in range(1,i):\n                if i%j == 0:\n                    c = c + 1\n            if c == 0:\n                return 1\n            else:\n                return 0\n    \ndef sum_Digits_Armstrong_Prime(n):\n    '''\n    Write a python function to find the sum of digits in armstrong prime of a given number.\n    '''\n    s = 0\n    c = 0\n    for i in range(2,n+1):\n        if n%i == 0:\n            for j in range(1,i):\n                if i%j == 0:\n                    s = s + j\n            if s == i:\n                c = c + 1\n            s = 0\n    if c == 0:\n        return 1\n    else:\n        return 0\n        \ndef first_Digit_Perfect(n):\n    '''\n    Write a python function to find the first digit in perfect of a given number.\n    '''\n    c = 0\n    for i in range(1,n):\n        if n%i == 0:\n            c = c + 1\n    if c == i:\n        return 1\n    else:\n        return 0\n        \ndef last_Digit_Perfect(n):\n    '''\n    Write a python function to find the last digit in perfect of a given number.\n    '''\n    c = 0\n    for i in range(1,n):\n        if n%i == 0:\n            c = c + 1\n    if c == n:\n        return 1\n    else:\n        return 0\n        \ndef sum_Digits_Perfect(n):\n    '''\n    Write a python function to find the sum of digits in perfect of a given number.\n    '''\n    s = 0\n    c = 0\n    for i in range(1,n):\n        if n%i == 0:\n            s = s + i\n            c = c + 1\n    if c == n:\n        return 1\n    else:\n        return 0\n        \ndef first_Digit_Perfect_Prime(n):\n    '''\n    Write a python function to find the first digit in perfect prime of a given number.\n    '''\n    c = 0\n    for i in range(1,n):\n        if n%i == 0:\n            for j in range(1,i):\n                if i%j == 0:\n                    c = c + 1\n            if c == i:\n                return 1\n            else:\n                return 0\n    \ndef last_Digit_Perfect_Prime(n):\n    '''\n    Write a python function to find the last digit in perfect prime of a given number.\n    '''\n    c = 0\n    for i in range(1,n):\n        if n%i == 0:\n            for j in range(1,i):\n                if i%j == 0:\n                    c = c + 1\n            if c == i:\n                return 1\n            else:\n                return 0\n    \ndef sum_Digits_Perfect_Prime(n):\n    '''\n    Write a python function to find the sum of digits in perfect prime of a given number.\n    '''\n    s = 0\n    c = 0\n    for i in range(1,n):\n        if n%i == 0:\n            for j in range(1,i):\n                if i%j == 0:\n                    s = s + j\n            if s == i:\n                c = c + 1\n            s = 0\n    if c == n:\n        return 1\n    else:\n        return 0\n        \ndef first_Digit_Harshad(n):\n    '''\n    Write a python function to find the first digit in harshad of a given number.\n    '''\n    c = 0\n    for i in range(1,n):\n        if n%i == 0:\n            c = c + 1\n    if c == i:\n        return 1\n    else:\n        return 0\n        \ndef last_Digit_Harshad(n):\n    '''\n    Writ"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<0:\n        raise Exception(\"Factorial is not defined for negative numbers\")\n    elif n==0:\n        return 1\n    else:\n        return n%10*last_Digit_Factorial(n/10)\ndef is_Palindrome(n): \n    '''\n    Write a python function to check whether a given number is palindrome or not.\n    '''\n    if n==0:\n        return True\n    elif n==1:\n        return False\n    else:\n        return (n%10==last_Digit_Factorial(n/10)) and is_Palindrome(n/10)\ndef is_Prime(n):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n==0 or n==1:\n        return False\n    elif n==2:\n        return True\n    else:\n        return (is_Prime(n-2) and n%2!=0)\ndef remove_Digits(n): \n    '''\n    Write a python function to remove all the digits from a given number.\n    '''\n    if n<0:\n        raise Exception(\"Cannot remove the digits from a negative number\")\n    elif n==0:\n        return 0\n    else:\n        return 10*remove_Digits(n/10) + n%10\ndef fibonacci(n): \n    '''\n    Write a python function to calculate nth Fibonacci number.\n    '''\n    if n<0:\n        raise Exception(\"Cannot find Fibonacci of a negative number\")\n    elif n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\ndef is_Valid(n): \n    '''\n    Write a python function to check whether a given number is valid or not.\n    '''\n    if n<0:\n        raise Exception(\"Cannot check for a negative number\")\n    elif n==0:\n        return True\n    elif n==1:\n        return False\n    else:\n        return (is_Valid(n-2) and n%2!=0)\ndef change(amount, coin): \n    '''\n    Write a python function to change the number of coins by adding the amount of coins you have.\n    '''\n    if amount<0:\n        raise Exception(\"Cannot add coins to a negative number\")\n    elif amount==0:\n        return 0\n    elif amount==1:\n        return coin\n    else:\n        return change(amount-coin, coin) + change(amount, 1)\ndef count_Digits(n): \n    '''\n    Write a python function to count the digits in a given number.\n    '''\n    if n<0:\n        raise Exception(\"Cannot find the digits in a negative number\")\n    elif n==0:\n        return 0\n    else:\n        return 1+count_Digits(n/10)\ndef largest_Digit(n): \n    '''\n    Write a python function to find the largest digit in a given number.\n    '''\n    if n<0:\n        raise Exception(\"Cannot find the digits in a negative number\")\n    elif n==0:\n        return 0\n    else:\n        return (n%10>last_Digit_Factorial(n/10)) and largest_Digit(n/10) or n%10\ndef is_Anagram(str1, str2): \n    '''\n    Write a python function to check whether two given strings are anagram of each other or not.\n    '''\n    if len(str1)!=len(str2):\n        return False\n    else:\n        return sorted(str1)==sorted(str2)\ndef generate_Permutation(n): \n    '''\n    Write a python function to generate permutation of the string of length n.\n    '''\n    if n<0:\n        raise Exception(\"Cannot generate permutations of a negative number\")\n    elif n==0:\n        return []\n    else:\n        if n==1:\n            return [\"A\"]\n        else:\n            return [\"\".join(x) for x in ([i]+generate_Permutation(n-1) for i in generate_Permutation(n-1))]\ndef next_Palindrome(n): \n    '''\n    Write a python function to find the next palindrome number of a given number.\n    '''\n    if n<0:\n        raise Exception(\"Cannot find the next palindrome of a negative number\")\n    elif n==0:\n        return 1\n    else:\n        return (n%10)*10**(len(str(n))-1) + next_Palindrome(n/10)\ndef is_Armstrong(n): \n    '''\n    Write a python function to check whether a given number is Armstrong or not.\n    '''\n    if n==0:\n        return True\n    else:\n        return sum([int(x)**len(str(n)) for x in str(n)])==n\ndef is_Armstrong_Number(n): \n    '''\n    Write a python function to check whether a given number is Armstrong number or not.\n    '''\n    if n<0:\n        raise Exception(\"Armstrong number is not defined for negative numbers\")\n    elif n==0:\n        return True\n    else:\n        return is_Armstrong(n) and is_Armstrong(remove_Digits(n))\ndef digits(n): \n    '''\n    Write a python function to find the number of digits in a given number.\n    '''\n    if n<0:\n        raise Exception(\"Cannot find the digits of a negative number\")\n    elif n==0:\n        return 1\n    else:\n        return 1+digits(n/10)\ndef is_Palindrome_Number(n): \n    '''\n    Write a python function to check whether a given number is a palindrome or not.\n    '''\n    if n<0:\n        raise Exception(\"Cannot check for a negative number\")\n    elif n==0:\n        return True\n    else:\n        return is_Palindrome(n) and is_Palindrome(remove_Digits(n))\ndef next_Palindrome_Number(n): \n    '''\n    Write a python function to find the next palindrome number of a given number.\n    '''\n    if n<0:\n        raise Exception(\"Cannot find the next palindrome of a negative number\")\n    elif n==0:\n        return 1\n    else:\n        return (n%10)*10**(len(str(n))-1) + next_Palindrome_Number(n/10)\ndef smallest_Difference(arr1, arr2): \n    '''\n    Write a python function to find the smallest difference between two arrays.\n    '''\n    arr1.sort()\n    arr2.sort()\n    i=j=0\n    smallest_diff=abs(arr1[i]-arr2[j])\n    smallest_diff_pair=(arr1[i], arr2[j])\n    while(i<len(arr1) and j<len(arr2)):\n        if abs(arr1[i]-arr2[j])<smallest_diff:\n            smallest_diff=abs(arr1[i]-arr2[j])\n            smallest_diff_pair=(arr1[i], arr2[j])\n        if arr1[i]>arr2[j]:\n            j+=1\n        elif arr1[i]<arr2[j]:\n            i+=1\n        else:\n            i+=1\n            j+=1\n    return smallest_diff_pair\ndef is_Permutation(str1, str2): \n    '''\n    Write a python function to check whether two given strings are permutations of each other or not.\n    '''\n    if len(str1)!=len(str2):\n        return False\n    else:\n        return sorted(str1)==sorted(str2)\ndef rotate_String(n,s): \n    '''\n    Write a python function to rotate a string by n places.\n    '''\n    if n<0:\n        raise Exception(\"Cannot rotate a string by a negative number\")\n    elif n>=len(s):\n        return s"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n1 = 1\n    for i in range(1,n):\n        n1 = n1 * i\n    return n1 % 10\n    \ndef last_Digit_Power(n): \n    '''\n    Write a python function to find the last digit in power of a given number.\n    '''\n    n1 = 1\n    for i in range(1,n):\n        n1 = n1 * i\n    return pow(n1,n) % 10\n    \ndef last_Digit_Exponent(n): \n    '''\n    Write a python function to find the last digit in exponent of a given number.\n    '''\n    n1 = 1\n    for i in range(1,n):\n        n1 = n1 * i\n    return pow(n1,n) % 10\n    \ndef last_Digit_Prime(n): \n    '''\n    Write a python function to find the last digit in prime of a given number.\n    '''\n    n1 = 1\n    for i in range(1,n):\n        n1 = n1 * i\n    return n1 % 11\n    \ndef last_Digit_Prime2(n): \n    '''\n    Write a python function to find the last digit in prime of a given number.\n    '''\n    n1 = 1\n    for i in range(1,n):\n        n1 = n1 * i\n    return pow(n1,n) % 11\n    \ndef last_Digit_Factorial2(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n1 = 1\n    for i in range(1,n):\n        n1 = n1 * i\n    return pow(n1,n) % 11\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0:\n        factorial = factorial * n\n        n = n - 1\n    return factorial % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    #print \"This is the input number:\",n\n    i = 5\n    factorial = 1\n    while i <= n: \n        factorial = factorial * i \n        i = i + 1\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] + list2[i] + list3[i] for i in range(len(list1))]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    final = []\n    for i in range(len(list1)):\n        final.append(list1[i])\n        final.append(list2[i])\n        final.append(list3[i])\n    \n    return final\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    for i in range(len(list1)):\n        list3[i] = list1[i]\n        list3[i+len(list2)] = list2[i]\n    return list3\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    #print(list1,list2,list3)\n    interleave = []\n    for x in range(len(list1)):\n        if x < len(list2):\n            interleave.append(list1[x])\n        if x < len(list3):\n            interleave.append(list2[x])\n        if x < len(list3):\n            interleave.append(list3[x])\n    #print(interleave)\n    return interleave\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list_total = []\n    for i in range(len(list1)):\n        list_total.extend([list1[i], list2[i], list3[i]])\n    return list_total\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    l = []\n    for i in range(len(list1)):\n        l.append(list1[i])\n        l.append(list2[i])\n        l.append(list3[i])\n    return l\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [item for pair in zip(list1,list2,list3) for item in pair]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flatlist = []\n    for i in xrange(len(list1)):\n        flatlist.append(list1[i])\n        flatlist.append(list2[i])\n        flatlist.append(list3[i])\n    return flatlist\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return tuple(set(test_tup1).symmetric_difference(test_tup2))\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    tup1_len = len(test_tup1)\n    tup2_len = len(test_tup2)\n    if tup1_len!= tup2_len:\n        print 'Tuples have different lengths'\n        return False\n    else:\n        for i in xrange(tup1_len):\n            if test_tup1[i]!= test_tup2[i]:\n                print 'Tuples have dissimilar elements'\n                return True\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    output_list = []\n    for item1, item2 in zip(test_tup1, test_tup2):\n        if item1!= item2:\n            output_list.append((item1, item2))\n    return output_list\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return list(set1 - set2)\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff_tup = ()\n    for i in range(len(test_tup1)):\n        if(test_tup1[i]!= test_tup2[i]):\n            diff_tup = diff_tup + (test_tup1[i],)\n    return diff_tup\n    \ndef find_similar(test_tup1, test_tup2):\n    '''\n    Write a function to find the similar elements in the given two tuples.\n    '''\n    similar_tup = ()\n    for i in range(len(test_tup1)):\n        if(test_tup1[i] == test_tup2[i]):\n            similar_tup = similar_tup + (test_tup1[i],)\n    return similar_tup\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1 = set(test_tup1)\n    test_tup2 = set(test_tup2)\n    dissimilar = test_tup1.symmetric_difference(test_tup2)\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return tuple(a for a in test_tup1 if a not in test_tup2)\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    i = 0\n    j = 0\n    test_list1 = []\n    test_list2 = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            if test_tup1[i] == test_tup2[j]:\n                test_list1.append(test_tup1[i])\n                test_list2.append(test_tup2[j])\n    for k in test_list1:\n        if k not in test_list2:\n            return k\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i,j in zip(test_tup1, test_tup2):\n        if i!=j:\n            dissimilar.append(i)\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    for i in test_tup1:\n        if i in test_tup2:\n            print(i)\n    return\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    nested_tuple = ( (1,2,3,4,5,6), (1,3,5,7,8,9), (2,4,6,8,10) )\n    res_tuple = []\n    for val in test_tuple:\n        if even_fnc(val):\n            res_tuple.append(val)\n    return tuple(res_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    \n    nested_list = []\n    for ele in test_tuple:\n        if isinstance(ele, tuple):\n            nested_list.append(even_ele(ele, even_fnc))\n        else:\n            nested_list.append(ele)\n    \n    #print(nested_list)\n    if even_fnc(nested_list):\n        return tuple(nested_list)\n    else:\n        return tuple(nested_list)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_list = []\n    for ele in test_tuple:\n        if even_fnc(ele):\n            new_list.append(ele)\n    return tuple(new_list)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    test_list = []\n    for ele in test_tuple:\n        if not even_fnc(ele):\n            test_list.append(ele)\n    return tuple(test_list)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple):\n        return tuple([even_fnc(sub_tuple) for sub_tuple in test_tuple])\n    else:\n        return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    return tuple([tup for tup in test_tuple if even_fnc(tup)])\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    lst = []\n    for ele in test_tuple:\n        if even_fnc(ele):\n            lst.append(ele)\n    return tuple(lst)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return [x for x in test_tuple if even_fnc(x)]\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return even_fnc(test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if not even_fnc(test_tuple):\n        return tuple(filter(even_fnc, test_tuple))\n    return test_tuple\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b * (s/2)\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = b**2\n    return a*s\n    \ndef circumference(b,s):\n    '''\n    Write a python function to find the circumference of a square pyramid with a given base edge and height.\n    '''\n    c = 2*b*s\n    return c\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b*s \n    return area \n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s*4\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = b*s\n    return a\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = b*s\n    return a\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s*2\n    "
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if b == 0 or s == 0:\n        return 'Invalid base edge and height'\n    else:\n        return 4*b + 2*s**2\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    print(\"surface area of square pyramid is\", 2*b*s, \"sq units\")\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    A = b*s*2\n    return A\n    \nprint(surface_Area(4,3))\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    # if dict1 == {}:\n    #     return True\n    # else:\n    #     return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print('empty')\n    else:\n        print('not empty')\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"It is an empty dictionary\")\n    else:\n        print(\"It is not an empty dictionary\")\n    return\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for key,value in dict1.items():\n        if value:\n            print 'This dictionary is not empty'\n            break\n    else:\n        print 'This dictionary is empty'\n    return\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    # return all(value == 0 for value in dict1.values())\n    # return all(value == 0 for value in dict1)\n    # dict1 = {'a': 0, 'b': 0, 'c': 0, 'd': 0}\n    # return all(value == 0 for value in dict1.values())\n    # return all(value == 0 for value in dict1)\n    # return all(value == 0 for value in dict1.itervalues())\n    return all(value == 0 for value in dict1.itervalues())\n    \n    # if all(value == 0 for value in dict1.values()):\n    #     return True\n    # else:\n    #     return False\n    # if all(value == 0 for value in dict1.values()):\n    #     return True\n    # else:\n    #     return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for key in dict1.keys():\n        if dict1[key]:\n            return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for key,value in dict1.iteritems():\n        return False\n        \n    return True\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = [0] * (num + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n    for i in xrange(2, num + 1):\n        for j in xrange(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    return catalan_number(num - 1) * num / 2\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = 2 * num\n    i = 0\n    catalan = [1, 1]\n    for i in range(2, n):\n        c = 0\n        for j in range(i):\n            c += catalan[j] * catalan[i - j - 1]\n        catalan.append(c)\n    return catalan[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    res = [1]\n    for i in range(1, num):\n        res.append(res[i-1] * (num-i)/i)\n    return res[num-1]\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 0:\n        return 1\n    if num == 1:\n        return 1\n    else:\n        return catalan_number(num - 1) + catalan_number(num - 2)\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    \n    count = [0] * (num+1)\n    count[0] = 1\n    for i in xrange(1, num+1):\n        for j in xrange(i):\n            count[i] += count[j] * count[i-j-1]\n    return count[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return sum([catalan_number(num-i-1) * (num+i+1) for i in xrange(num)])\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_list = []\n    for i in range(num+1):\n        catalan_list.append(catalan(i))\n    return catalan_list[-1]\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return 0\n    if num == 0:\n        return 1\n    \n    #Initialize list to contain catalan number at each index\n    catalan_numbers = [1]\n    \n    #Calculate catalan number\n    for i in range(1,num):\n        catalan_numbers.append(0)\n        for j in range(i+1):\n            catalan_numbers[i] += catalan_numbers[j]*catalan_numbers[i-j-1]\n    \n    return catalan_numbers[num-1]\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num > 99:\n        catalan_nums = [1]\n        for i in range(num):\n            catalan_nums.append(sum(catalan_nums[:-1]))\n        return catalan_nums[-1]\n    return 1\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return re.findall(r'ly\\b\\w*', text)\ndef find_numbers(text):\n    '''\n    Write a function to find the first two number ending with and their positions in a given string.\n    '''\n    return re.findall(r'\\d+',text)\ndef find_numbers_in_file(filename):\n    '''\n    Write a function to find all numbers ending with and their positions in a given file.\n    '''\n    with open(filename, 'r') as f:\n        return find_numbers(f.read())\ndef test_find_adverbs():\n    assert find_adverbs('ly') == ['']\n    assert find_adverbs('ly ly') == ['ly']\n    assert find_adverbs('ly lyly') == ['ly']\n    assert find_adverbs('lylyly') == ['ly']\n    assert find_adverbs('ly lylyly') == ['ly']\n    assert find_adverbs('ly lylylyly') == ['ly', 'ly']\n    assert find_adverbs('ly lylylylyly') == ['ly', 'ly']\ndef test_find_numbers():\n    assert find_numbers('2') == ['2']\n    assert find_numbers('2 2') == ['2']\n    assert find_numbers('2 2 4') == ['2', '4']\n    assert find_numbers('2 2 4 5') == ['2', '4']\n    assert find_numbers('2 2 4 5 6') == ['2', '4']\n    assert find_numbers('2 2 4 5 6 7') == ['2', '4']\n    assert find_numbers('2 2 4 5 6 7 8') == ['2', '4']\n    assert find_numbers('2 2 4 5 6 7 8 9') == ['2', '4']\n    assert find_numbers('2 2 4 5 6 7 8 9 10') == ['2', '4']\ndef test_find_numbers_in_file():\n    assert find_numbers_in_file('test.txt') == ['1', '2']\ndef test_find_numbers_in_file2():\n    assert find_numbers_in_file('test2.txt') == ['1', '2', '3']\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    for i in range(len(text)):\n        if(text[i]=='l' and text[i+1]=='y'):\n            return [i]\n    return False\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return [m.start() for m in re.finditer('ly$', text)]\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ly = re.compile(r\"ly$\")\n    adverb = re.compile(r\"adverb\")\n    ly_pos = []\n    adverb_pos = []\n    for match in ly.finditer(text):\n        ly_pos.append(match.end())\n    for match in adverb.finditer(text):\n        adverb_pos.append(match.end())\n    return ly_pos, adverb_pos\n    \ndef find_stressed_ends(text):\n    '''\n    Write a function to find the first stressed ending and its positions in a given string.\n    '''\n    stressed = re.compile(r\"^s\")\n    stressed_end = re.compile(r\"ed$\")\n    stressed_pos = []\n    stressed_end_pos = []\n    for match in stressed.finditer(text):\n        stressed_pos.append(match.end())\n    for match in stressed_end.finditer(text):\n        stressed_end_pos.append(match.end())\n    return stressed_pos, stressed_end_pos\n    \ndef find_numbers(text):\n    '''\n    Write a function to find the first number ending with 1, 2, 3 and its positions in a given string.\n    '''\n    number = re.compile(r\"1|2|3$\")\n    number_pos = []\n    for match in number.finditer(text):\n        number_pos.append(match.end())\n    return number_pos\n    \ndef find_possessive_ends(text):\n    '''\n    Write a function to find the first possessive ending and its positions in a given string.\n    '''\n    possessive = re.compile(r\"^'s$\")\n    possessive_end = re.compile(r\"'$\")\n    possessive_pos = []\n    possessive_end_pos = []\n    for match in possessive.finditer(text):\n        possessive_pos.append(match.end())\n    for match in possessive_end.finditer(text):\n        possessive_end_pos.append(match.end())\n    return possessive_pos, possessive_end_pos\n    \ndef find_numbers_with_apostrophe(text):\n    '''\n    Write a function to find the first number ending with 1, 2, 3, 4, 5, 6 and its positions in a given string.\n    '''\n    number = re.compile(r\"1|2|3|4|5|6$\")\n    number_pos = []\n    for match in number.finditer(text):\n        number_pos.append(match.end())\n    return number_pos\n    \ndef find_determiner_endings(text):\n    '''\n    Write a function to find the first determiner ending with all, a, an, the, of, or its positions in a given string.\n    '''\n    determiner = re.compile(r\"^(all|a|an|the|of|the)$\")\n    determiner_end = re.compile(r\"$\")\n    determiner_pos = []\n    determiner_end_pos = []\n    for match in determiner.finditer(text):\n        determiner_pos.append(match.end())\n    for match in determiner_end.finditer(text):\n        determiner_end_pos.append(match.end())\n    return determiner_pos, determiner_end_pos\n    \ndef find_verb_endings(text):\n    '''\n    Write a function to find the first verb ending with er, es, ed, ed, er, t, s, sh, sh, t, z, h, s, sch, t, d, dh, s, g, z, d, s, c, z, i, r, r, t, d, s, th, r, sch, z, v, l, n, d, h, m, r, t, n, c, b, b, h, f, v, th, sch, r, sch, n, v, d, h, t, s, z, i, h, j, v, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, th, sch, n, a, d, t, d, c, sch, d, t"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pass\n    # regex_one = re.compile(r'(?<=[^aeiou])ly$', re.IGNORECASE)\n    # regex_two = re.compile(r'(?<=[^aeiou])ly', re.IGNORECASE)\n    # result = regex_one.findall(text)\n    # result = regex_two.findall(text)\n    # print result\n    # return result\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    verb_positions = []\n    for word in text.split():\n        if word.endswith('ly'):\n            verb_positions.append(text.index(word))\n    return verb_positions\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    word = re.compile(r'\\w+ly$', re.I)\n    print(word.findall(text))\nfind_adverbs('I like to be happy and ly')\nfind_adverbs('I like to be happy and happy')\nfind_adverbs('I like to be happy and happyly')\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = re.compile(r'(?<=[^aeiouy]ly)ly')\n    return pattern.findall(text)\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #find all adverbs\n    list = re.findall(r'\\w+ly$',text)\n    if len(list) == 0:\n        return\n    for item in list:\n        print(item)\ndef is_palindrome(string):\n    '''\n    Write a function that returns True if the given string is a palindrome (a word that spells the same way from both directions), and False otherwise.\n    '''\n    if string[::-1] == string:\n        return True\n    return False\ndef test_is_palindrome():\n    assert is_palindrome('abc') == True\n    assert is_palindrome('noon') == True\n    assert is_palindrome('racecar') == True\n    assert is_palindrome('evil') == False\n    assert is_palindrome('madam') == True\n    assert is_palindrome('a') == True\n    assert is_palindrome('of') == True\n    assert is_palindrome('Civic') == True\n    assert is_palindrome('Mom') == False\ndef sort_by_length(strings):\n    '''\n    Write a function that returns a list of strings sorted by length, with the longest strings at the end of the list.\n    '''\n    #sort by length\n    length = [(len(s),s) for s in strings]\n    length.sort()\n    length.reverse()\n    sorted_strings = [s[1] for s in length]\n    return sorted_strings\ndef test_sort_by_length():\n    assert sort_by_length(['a','ab','abc','aba','abcd','a']) == ['a', 'ab', 'abcd', 'abc', 'aba', 'a']\n    assert sort_by_length(['A','AB','ABC','a']) == ['a', 'AB', 'ABC', 'A']\n    assert sort_by_length(['a','b','c','d']) == ['a', 'b', 'c', 'd']\n    assert sort_by_length(['a','b','a']) == ['a', 'b', 'a']\n    assert sort_by_length(['a','a','a']) == ['a', 'a', 'a']\n    assert sort_by_length(['abcd','abc','abc']) == ['abc', 'abc', 'abcd']\ndef validate_pin(pin):\n    '''\n    Write a function that takes a 4-digit number and returns True if it is a valid PIN code, and False otherwise.\n    A valid PIN code is a number that consists of only digits. A valid PIN code is always divisible by 10, and the last digit cannot be 0.\n    '''\n    #check length\n    if len(pin)!= 4:\n        return False\n    #check first digit\n    if not pin.isdigit():\n        return False\n    #check last digit\n    if int(pin[3]) == 0:\n        return False\n    #check all digits\n    for d in pin:\n        if not d.isdigit():\n            return False\n    #validate\n    if int(pin) % 10!= 0:\n        return False\n    return True\ndef test_validate_pin():\n    assert validate_pin('1234') == True\n    assert validate_pin('12345') == False\n    assert validate_pin('123') == False\n    assert validate_pin('123456789') == False\n    assert validate_pin('12345678901') == True\n    assert validate_pin('12345678') == False\ndef is_pangram(string):\n    '''\n    Write a function that returns True if the given string contains all letters of the alphabet.\n    '''\n    #check alphabet\n    for c in string:\n        if not c.isalpha():\n            return False\n    return True\ndef test_is_pangram():\n    assert is_pangram('The quick brown fox jumps over the lazy dog') == True\n    assert is_pangram('Pack my box with five dozen liquor jugs') == True\n    assert is_pangram('A quick brown fox jumps over the lazy dog') == False\n    assert is_pangram('The five boxing wizards jump quickly') == False\n    assert is_pangram('The five boxing wizards jump quickly') == False\n    assert is_pangram('A quick brown fox jumps over the lazy dog') == False\n    assert is_pangram('The five boxing wizards jump quickly') == True\ndef is_pangram_2(string):\n    '''\n    Write a function that returns True if the given string contains all letters of the alphabet.\n    '''\n    #check alphabet\n    return all(c.isalpha() for c in string)\ndef test_is_pangram_2():\n    assert is_pangram_2('The quick brown fox jumps over the lazy dog') == True\n    assert is_pangram_2('Pack my box with five dozen liquor jugs') == True\n    assert is_pangram_2('A quick brown fox jumps over the lazy dog') == False\n    assert is_pangram_2('The five boxing wizards jump quickly') == False\n    assert is_pangram_2('The five boxing wizards jump quickly') == False\n    assert is_pangram_2('A quick brown fox jumps over the lazy dog') == False\n    assert is_pangram_2('The five boxing wizards jump quickly') == True\ndef unique(string):\n    '''\n    Write a function that returns True if the given string contains all unique characters.\n    '''\n    #use dict to store each character\n    char_dict = {}\n    for c in string:\n        if c in char_dict:\n            return False\n        else:\n            char_dict[c] = True\n    return True\ndef test_unique():\n    assert unique('univer') == True\n    assert unique('universe') == False\n    assert unique('univers') == False\n    assert unique('universo') == False\n    assert unique('universo') == False\ndef unique_2(string):\n    '''\n    Write a function that returns True if the given string contains all unique characters.\n    '''\n    #use set to store each character\n    char_set = set()\n    for c in string:\n        if c in char_set:\n            return False\n        else:\n            char_set.add(c)\n    return True\ndef test_unique_2():\n    assert unique_2('univer') == True\n    assert unique_2('universe') == False\n    assert unique_2('univers') == False\n    assert unique_2('universo') == False\n    assert unique_2('universo') == False\ndef count_letters(string):\n    '''\n    Write a function that returns a dictionary with the number of times each letter occurs in a string.\n    '''\n    #create a dict to store each character\n    char_dict = {}\n    for c in string:\n        if c in char_dict:\n            char_dict[c] += 1\n        else:\n            char_dict[c] = 1\n    return char_dict\ndef test_count_letters():\n    assert count_letters('a') == {'a': 1}\n    assert count_letters('aab') == {'a': 2, 'b': 1}\n    assert count_letters('aabcd') == {'a': 2, 'b': 1, 'c': 1, 'd': 1}\n    assert count_letters('') == {}\n    assert count_letters('a') == {'a': 1}\n    assert count_letters('aab') == {'a': 2, 'b': 1}\n    assert count_letters('aabcd') == {'a': 2, 'b': 1, 'c': 1, 'd': 1}\ndef count_letters_2(string):\n    '''\n    Write a function that returns a dictionary with the number of times each letter occurs in a string.\n    '''\n    #use list to store each character\n    char_list = [c for c in string]\n    #create a dict to store each character\n    char_dict = {}\n    for c in char_list:\n        if c in char_dict:\n            char_dict[c] += 1\n        else:\n            char_dict[c] = 1\n    return char_dict\ndef test_count_letters_2():\n    assert count_letters_2('a') == {'a': 1}\n    assert count_letters_2('aab') == {'a': 2, 'b': "
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    positions = []\n    try:\n        while True:\n            a = text.index('ly', text.index(re.search('ly$', text).group(0)))\n            b = text.index('ly', a+1)\n            positions.append((a,b))\n            text = text[b+1:]\n    except ValueError:\n        pass\n    return positions\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heapq.heapify(items)\n    return heapq.nlargest(n,items)\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,(-1*item[1],item))\n    top_items = []\n    while n > 0:\n        top_items.append(heapq.heappop(heap)[1])\n        n -= 1\n    return top_items\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #sort the list\n    items = sorted(items, key=lambda x: x[1], reverse=True)\n    return items[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    nums = [items[i] for i in range(0,n)]\n    heapq.heapify(nums)\n    for i in range(n,len(items)):\n        heapq.heappushpop(nums,items[i])\n    return nums\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n==0 or len(items)==0:\n        return []\n    d= {}\n    for item in items:\n        if item[0] in d:\n            d[item[0]] += item[1]\n        else:\n            d[item[0]] = item[1]\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    nums = []\n    nums.append((items[0],0))\n    for i in range(1,len(items)):\n        if items[i] > nums[0][0]:\n            heapq.heappush(nums,(items[i],i))\n            if len(nums) > n:\n                heapq.heappop(nums)\n    return [items[x[1]] for x in nums]\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    for i in range(n):\n        print heapq.heappop(items),\n    print\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(key = lambda x: x[1],reverse = True)\n    return items[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #This is not a good solution. It would be better to use a min-heap\n    items=sorted(items,key=lambda item:item[1],reverse=True)\n    return [item[0] for item in items[:n]]\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n>=len(items):\n        return items\n    index=0\n    item_list=[]\n    for item in items:\n        if index<n:\n            heapq.heappush(item_list,item)\n            index+=1\n        else:\n            heapq.heappushpop(item_list,item)\n    return item_list\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if l is None:\n        return None\n    new = []\n    new.extend(l[:n])\n    new.extend(l[n:])\n    return new\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:].reverse()\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[0:n]+l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:len(l)-1] + l[len(l)-1:]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    list1 = l[:n]\n    list2 = l[n:]\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l1 = l[:n]\n    l2 = l[n:]\n    l1.reverse()\n    return l1 + l2\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    \n    arr = [l[i:i + n] for i in range(0, len(l), n)]\n    \n    arr.extend(l[n:])\n    return arr\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    for i in range(0, len(l), n):\n        yield l[i:i+n]\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    new_tuple = tuple(listx)\n    return new_tuple\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    print(listx)\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    \ndef max_list(lst):\n    '''\n    Write a function to find the maximum value in a list.\n    '''\n    return max(lst)\n    \ndef max_num(num1,num2,num3):\n    '''\n    Write a function to find the maximum value of three numbers.\n    '''\n    if num1 > num2 and num1 > num3:\n        return num1\n    elif num2 > num1 and num2 > num3:\n        return num2\n    else:\n        return num3\n    \ndef sort_list(lst):\n    '''\n    Write a function to sort a list in ascending order.\n    '''\n    return sorted(lst)\n    \ndef sum_list(lst):\n    '''\n    Write a function to find the sum of all values in a list.\n    '''\n    return sum(lst)\n    \ndef calculate_num(lst):\n    '''\n    Write a function to calculate the mean of all values in a list.\n    '''\n    return sum(lst) / len(lst)\n    \ndef add_ten(lst):\n    '''\n    Write a function to add 10 to every value in a list.\n    '''\n    return [i + 10 for i in lst]\n    \ndef replace_items(lst):\n    '''\n    Write a function to replace every even value with \"EVEN\" and every odd value with \"ODD\".\n    '''\n    return [lst[i] if i % 2 == 0 else lst[i] for i in range(len(lst))]\n    \ndef find_item(lst,item):\n    '''\n    Write a function to find a particular item in a list and return its index.\n    '''\n    return lst.index(item)\n    \ndef get_index(lst,item):\n    '''\n    Write a function to find a particular item in a list and return its index.\n    '''\n    return lst.index(item)\n    \ndef remove_item(lst,item):\n    '''\n    Write a function to remove a particular item in a list.\n    '''\n    return lst.remove(item)\n    \ndef get_sort_order(lst):\n    '''\n    Write a function to return the sorted order of a list.\n    '''\n    return sorted(lst)\n    \ndef get_reverse_order(lst):\n    '''\n    Write a function to return the reverse order of a list.\n    '''\n    return lst[::-1]\n    \ndef print_list(lst):\n    '''\n    Write a function to print the contents of a list in a readable format.\n    '''\n    for i in lst:\n        print i\n        \ndef get_first_last(lst):\n    '''\n    Write a function to get the first and last value of a list.\n    '''\n    return [lst[0],lst[-1]]\n    \ndef get_unique(lst):\n    '''\n    Write a function to get a list of unique items.\n    '''\n    return set(lst)\n    \ndef get_unique_index(lst):\n    '''\n    Write a function to get the index of a unique item.\n    '''\n    for i in range(len(lst)):\n        if lst[i] not in lst[:i]:\n            return i\n    return -1\n    \ndef get_greater_than_5(lst):\n    '''\n    Write a function to get a list of items greater than 5.\n    '''\n    return [i for i in lst if i > 5]\n    \ndef get_less_than_5(lst):\n    '''\n    Write a function to get a list of items less than 5.\n    '''\n    return [i for i in lst if i < 5]\n    \ndef get_even(lst):\n    '''\n    Write a function to get a list of even values.\n    '''\n    return [i for i in lst if i % 2 == 0]\n    \ndef get_odd(lst):\n    '''\n    Write a function to get a list of odd values.\n    '''\n    return [i for i in lst if i % 2!= 0]\n    \ndef get_length(lst):\n    '''\n    Write a function to get the length of a list.\n    '''\n    return len(lst)\n    \ndef get_max_min(lst):\n    '''\n    Write a function to get the maximum and minimum values of a list.\n    '''\n    return [max(lst),min(lst)]\n    \ndef get_value_count(lst):\n    '''\n    Write a function to get a dictionary with the number of times each value occurs in a list.\n    '''\n    value_count = {}\n    for i in lst:\n        value_count[i] = value_count.get(i,0) + 1\n    return value_count\n    \ndef get_sorted_count(lst):\n    '''\n    Write a function to get a dictionary with the number of times each value occurs in a list sorted by value.\n    '''\n    value_count = {}\n    for i in lst:\n        value_count[i] = value_count.get(i,0) + 1\n    sorted_value_count = sorted(value_count.items(), key = operator.itemgetter(1))\n    return sorted_value_count\n    \ndef get_duplicates(lst):\n    '''\n    Write a function to get a list of duplicates in a list.\n    '''\n    lst_dict = {}\n    for i in lst:\n        lst_dict[i] = lst_dict.get(i,0) + 1\n    return [i[0] for i in lst_dict.items() if i[1] > 1]\n    \ndef is_in_list(lst,item):\n    '''\n    Write a function to check whether an item is in a list.\n    '''\n    return item in lst\n    \ndef get_item_list(lst,item):\n    '''\n    Write a function to get a list of values for a given key.\n    '''\n    return [i[item] for i in lst]\n    \ndef has_duplicates(lst):\n    '''\n    Write a function to check whether a list contains duplicates.\n    '''\n    return len(set(lst)) < len(lst)\n    \ndef get_random_list(lst,length):\n    '''\n    Write a function to get a random list of a given length.\n    '''\n    return random.sample(lst,length)\n    \ndef get_random_item(lst):\n    '''\n    Write a function to get a random item in a list.\n    '''\n    return random.choice(lst)\n    \ndef get_random_value(lst):\n    '''\n    Write a function to get a random value from a list.\n    '''\n    return random.choice(lst)\n    \ndef get_random_index(lst):\n    '''\n    Write a function to get a random index from a list.\n    '''\n    return random.randint(0,len(lst) - 1)\n    \ndef get_random_value_index(lst):\n    '''\n    Write a function to get a random value and index from a list.\n    '''\n    return random.choice(lst)\n    \ndef get_random_value_index_list(lst):\n    '''\n    Write a function to get a random value and index from a list.\n    '''\n    return random.sample(lst,1)[0]\n    \ndef replace_value(lst,value,new_value):\n    '''\n    Write a function to replace a value with a new value in a list.\n    '''\n    return [i if i!= value else new_value for i in lst]\n    \ndef count_occurences(lst,item):\n    '''\n    Write a function to count the number of occurrences of a value in a list.\n    '''\n    return lst.count(item)\n    \ndef append_value(lst,value):\n    '''\n    Write a function to append "
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    \ndef sum_tuple(tup1, tup2):\n    '''\n    Write a function to convert a tuple to a list.\n    '''\n    return list(tup1) + list(tup2)\n    \ndef dict_keys(dictx):\n    '''\n    Write a function to convert a dict to a list.\n    '''\n    return list(dictx.keys())\n    \ndef dict_values(dictx):\n    '''\n    Write a function to convert a dict to a list.\n    '''\n    return list(dictx.values())\n    \ndef dict_update(dictx):\n    '''\n    Write a function to convert a dict to a list.\n    '''\n    return dictx.update()\n    \ndef dict_items(dictx):\n    '''\n    Write a function to convert a dict to a list.\n    '''\n    return dictx.items()\n    \ndef test_list_tuple():\n    lst = list(range(1,5))\n    assert lst == [1,2,3,4]\n    assert list_tuple(lst) == (1,2,3,4)\n    assert tuple(lst) == (1,2,3,4)\n    \ndef test_sum_tuple():\n    lst1 = list(range(1,5))\n    lst2 = list(range(5,9))\n    assert sum_tuple(lst1, lst2) == (1,2,3,4,5,6,7,8)\n    \ndef test_dict_keys():\n    dic = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    assert list(dic.keys()) == ['a', 'b', 'c', 'd']\n    assert dict_keys(dic) == ['a', 'b', 'c', 'd']\n    assert tuple(dic.keys()) == ('a', 'b', 'c', 'd')\n    assert set(dic.keys()) == {'a', 'b', 'c', 'd'}\n    \ndef test_dict_values():\n    dic = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    assert list(dic.values()) == [1,2,3,4]\n    assert dict_values(dic) == [1,2,3,4]\n    assert tuple(dic.values()) == (1,2,3,4)\n    assert set(dic.values()) == {1,2,3,4}\n    \ndef test_dict_update():\n    dic1 = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    dic2 = {'a': 5, 'b': 6, 'e': 7, 'f': 8}\n    assert dic1.update(dic2) == {'a': 5, 'b': 6, 'c': 3, 'd': 4, 'e': 7, 'f': 8}\n    assert dic1 == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 7, 'f': 8}\n    assert dict_update(dic1, dic2) == {'a': 5, 'b': 6, 'c': 3, 'd': 4, 'e': 7, 'f': 8}\n    assert dic1 == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 7, 'f': 8}\n    \ndef test_dict_items():\n    dic = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    assert list(dic.items()) == [('a', 1), ('b', 2), ('c', 3), ('d', 4)]\n    assert dict_items(dic) == [('a', 1), ('b', 2), ('c', 3), ('d', 4)]\n    assert tuple(dic.items()) == (('a', 1), ('b', 2), ('c', 3), ('d', 4))\n    assert set(dic.items()) == {('a', 1), ('b', 2), ('c', 3), ('d', 4)}\n    \ndef test_nesting_list():\n    \"\"\"\n    The function returns the list with the innermost list as the last element.\n    \"\"\"\n    lst = ['a', 'b', 'c', 'd', 'e']\n    assert list_tuple(lst) == (lst[-1], lst[-2], lst[-3], lst[-4], lst[-5])\n    \ndef test_nesting_tuple():\n    \"\"\"\n    The function returns the tuple with the innermost tuple as the last element.\n    \"\"\"\n    tup = ('a', 'b', 'c', 'd', 'e')\n    assert tuple(tup) == (tup[-1], tup[-2], tup[-3], tup[-4], tup[-5])\n    \ndef test_nesting_list_and_tuple():\n    \"\"\"\n    The function returns the list with the innermost list as the last element.\n    \"\"\"\n    lst = ['a', 'b', 'c', 'd', 'e']\n    tup = ('a', 'b', 'c', 'd', 'e')\n    assert sum_tuple(lst, tup) == (lst[-1], lst[-2], lst[-3], lst[-4], lst[-5], tup[-1], tup[-2], tup[-3], tup[-4], tup[-5])\n    \ndef test_nesting_dict():\n    \"\"\"\n    The function returns the list with the innermost list as the last element.\n    \"\"\"\n    dic = {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e'}\n    assert list_tuple(dic) == (dic['a'], dic['b'], dic['c'], dic['d'], dic['e'])\n    \ndef test_nesting_dict_and_tuple():\n    \"\"\"\n    The function returns the list with the innermost list as the last element.\n    \"\"\"\n    dic = {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e'}\n    tup = ('a', 'b', 'c', 'd', 'e')\n    assert sum_tuple(dic, tup) == (dic['a'], dic['b'], dic['c'], dic['d'], dic['e'], tup[-1], tup[-2], tup[-3], tup[-4], tup[-5])\n    \ndef test_nesting_dict_and_list():\n    \"\"\"\n    The function returns the list with the innermost list as the last element.\n    \"\"\"\n    dic = {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e'}\n    lst = ['a', 'b', 'c', 'd', 'e']\n    assert sum_tuple(dic, lst) == (dic['a'], dic['b'], dic['c'], dic['d'], dic['e'], lst[-1], lst[-2], lst[-3], lst[-4], lst[-5])\n    \ndef test_nesting_dict_and_list_and_tuple():\n    \"\"\"\n    The function returns the list with the innermost list as the last element.\n    \"\"\"\n    dic = {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e'}\n    lst = ['a', 'b', 'c', 'd', 'e']\n    tup = ('a', 'b', 'c', 'd', 'e')\n    assert sum_tuple(dic, lst, tup) == (dic['a'], dic['b'], dic['c'], dic['d'], dic['e'], lst[-1], lst[-2], lst[-3], lst[-4], ls"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    diff = max(nums) - min(nums)\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums)-min(nums)\n    \n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_value = max(nums)\n    min_value = min(nums)\n    return max_value - min_value\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums)-min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums = sorted(nums)\n    smallest_val = nums[0]\n    largest_val = nums[-1]\n    return largest_val - smallest_val\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val-min_val\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a < b:\n        for n in range(a,b+1):\n            if n**0.5 == int(n**0.5):\n                print(n)\n    else:\n        for n in range(b,a+1):\n            if n**0.5 == int(n**0.5):\n                print(n)\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b < a:\n        a, b = b, a\n    r = []\n    i = a\n    while i * i <= b:\n        if i * i == b:\n            r.append(i)\n        i += 1\n    return r\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b-a < 2:\n        return b-a\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    \n    perfect_squares = []\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    perfect_squares_below = []\n    x = a\n    while x < b:\n        y = x ** 0.5\n        if y == int(y):\n            perfect_squares_below.append(y)\n        else:\n            break\n        squares.append(x)\n        x += 1\n    return perfect_squares_below\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    pas"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b + 1):\n        if i * i == i:\n            squares.append(i)\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    if a <= b:\n        for i in range(a, b+1):\n            squares.append(i**2)\n    elif a >= b:\n        for i in range(b, a+1):\n            squares.append(i**2)\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == b:\n        return []\n    elif a < b:\n        left, right = a, b\n    else:\n        left, right = b, a\n    left_sq = [i**2 for i in range(left, 0, -1)]\n    right_sq = [i**2 for i in range(right+1)]\n    return [x for x in left_sq if x in right_sq]\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    import math\n    return [x*x for x in range(int(math.floor(a)), int(math.ceil(b))) if x*x >= a and x*x <= b]\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x**2+y**2)**0.5, atan2(y,x)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = complex(x,y)\n    theta = cmath.phase(r)\n    print(r)\n    print(theta)\n    theta = theta * 180.0/math.pi\n    print(theta)\n    print(theta.real)\n    return (theta.real, theta.imag)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #print x,y\n    if(abs(x)==abs(y)):\n        return \"%.3f\"%x+\"i\"\n    elif(x==0 and y>0):\n        return \"%.3f\"%y+\"i\"\n    elif(x==0 and y<0):\n        return \"%.3f\"%(-y)+\"i\"\n    elif(y==0 and x>0):\n        return \"%.3f\"%x+\"i\"\n    elif(y==0 and x<0):\n        return \"%.3f\"%(-x)+\"i\"\n    elif(x>0 and y>0):\n        return \"%.3f\"%(x*abs(y)/(abs(x)+abs(y)))+\"i\"\n    elif(x<0 and y<0):\n        return \"%.3f\"%(-x*abs(y)/(abs(x)+abs(y)))+\"i\"\n    elif(x>0 and y<0):\n        return \"%.3f\"%(-x*abs(y)/(abs(x)+abs(y)))+\"i\"\n    else:\n        return \"%.3f\"%(x*abs(y)/(abs(x)+abs(y)))+\"i\"\n        \ndef polar_rect_n(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #print x,y\n    if(abs(x)==abs(y)):\n        return \"%.3f\"%x+\"i\"\n    elif(x==0 and y>0):\n        return \"%.3f\"%y+\"i\"\n    elif(x==0 and y<0):\n        return \"%.3f\"%(-y)+\"i\"\n    elif(y==0 and x>0):\n        return \"%.3f\"%x+\"i\"\n    elif(y==0 and x<0):\n        return \"%.3f\"%(-x)+\"i\"\n    elif(x>0 and y>0):\n        return \"%.3f\"%(x*abs(y)/(abs(x)+abs(y)))+\"i\"\n    elif(x<0 and y<0):\n        return \"%.3f\"%(-x*abs(y)/(abs(x)+abs(y)))+\"i\"\n    elif(x>0 and y<0):\n        return \"%.3f\"%(-x*abs(y)/(abs(x)+abs(y)))+\"i\"\n    else:\n        return \"%.3f\"%(x*abs(y)/(abs(x)+abs(y)))+\"i\"\ndef polar_rect_b(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #print x,y\n    if(abs(x)==abs(y)):\n        return \"%.3f\"%x+\"i\"\n    elif(x==0 and y>0):\n        return \"%.3f\"%y+\"i\"\n    elif(x==0 and y<0):\n        return \"%.3f\"%(-y)+\"i\"\n    elif(y==0 and x>0):\n        return \"%.3f\"%x+\"i\"\n    elif(y==0 and x<0):\n        return \"%.3f\"%(-x)+\"i\"\n    elif(x>0 and y>0):\n        return \"%.3f\"%(x*abs(y)/(abs(x)+abs(y)))+\"i\"\n    elif(x<0 and y<0):\n        return \"%.3f\"%(-x*abs(y)/(abs(x)+abs(y)))+\"i\"\n    elif(x>0 and y<0):\n        return \"%.3f\"%(-x*abs(y)/(abs(x)+abs(y)))+\"i\"\n    else:\n        return \"%.3f\"%(x*abs(y)/(abs(x)+abs(y)))+\"i\"\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if y==0:\n        return (x,0)\n    return (x*1j,y*1j)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = round(x**2+y**2)\n    t = cmath.phase(complex(x,y))\n    return (r,t)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=cmath.rect(x,y)\n    print (x)\n    \npolar_rect(1.0, cmath.pi/2)\npolar_rect(1.0, cmath.pi)\npolar_rect(1.0, 3*cmath.pi/4)\npolar_rect(1.0, cmath.pi/3)\npolar_rect(1.0, 2*cmath.pi)\npolar_rect(1.0, cmath.pi/4)\npolar_rect(1.0, -cmath.pi/4)\npolar_rect(1.0, -cmath.pi/3)\npolar_rect(1.0, -2*cmath.pi)\npolar_rect(1.0, -cmath.pi/2)"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a=x.real\n    b=x.imag\n    c=y.real\n    d=y.imag\n    if (b==0 and c==0):\n        return (a,d)\n    elif (b==0 and c!=0):\n        return (-c,d)\n    elif (b!=0 and c==0):\n        return (a,d)\n    elif (b!=0 and c!=0):\n        return (-c+d*1j,a)\n    else:\n        return (x,y)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*cmath.cos(y),x*cmath.sin(y)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rect_x = x * cmath.cos(y)\n    rect_y = x * cmath.sin(y)\n    return rect_x, rect_y\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    polar_x = cmath.sqrt(x**2 + y**2)\n    polar_y = cmath.atan(y / x)\n    return polar_x, polar_y\ndef rect_equirect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to equirectangular coordinates.\n    '''\n    a = cmath.sqrt(x**2 + y**2)\n    b = cmath.atan2(y, x)\n    return a, b\ndef equirect_rect(a,b):\n    '''\n    Write a function to convert equirectangular coordinates to rectangular coordinates.\n    '''\n    x = a * cmath.cos(b)\n    y = a * cmath.sin(b)\n    return x, y\ndef gps_to_m(latitude, longitude):\n    '''\n    Write a function to convert GPS coordinates to meters.\n    '''\n    r = 6371000\n    a = cmath.pi / 180\n    latitude_r = latitude * a\n    longitude_r = longitude * a\n    x = r * longitude_r\n    y = r * latitude_r\n    return x, y\ndef m_to_gps(x,y):\n    '''\n    Write a function to convert meters to GPS coordinates.\n    '''\n    r = 6371000\n    a = cmath.pi / 180\n    latitude_r = y / r\n    longitude_r = x / r\n    latitude = latitude_r / a\n    longitude = longitude_r / a\n    return latitude, longitude\ndef haversine(latitude1, longitude1, latitude2, longitude2):\n    '''\n    Write a function to calculate the great circle distance between two points given their longitudes and latitudes.\n    '''\n    r = 6371000\n    a = cmath.pi / 180\n    latitude1_r = latitude1 * a\n    longitude1_r = longitude1 * a\n    latitude2_r = latitude2 * a\n    longitude2_r = longitude2 * a\n    delta_longitude = longitude2_r - longitude1_r\n    delta_latitude = latitude2_r - latitude1_r\n    a = cmath.sqrt(delta_latitude**2 + cmath.cos(latitude1_r) * cmath.cos(latitude2_r) * cmath.sin(delta_longitude)**2)\n    c = 2 * r * cmath.asin(a)\n    return c\ndef distance(latitude1, longitude1, latitude2, longitude2):\n    '''\n    Write a function to calculate the great circle distance between two points given their longitudes and latitudes.\n    '''\n    r = 6371000\n    a = cmath.pi / 180\n    latitude1_r = latitude1 * a\n    longitude1_r = longitude1 * a\n    latitude2_r = latitude2 * a\n    longitude2_r = longitude2 * a\n    delta_longitude = longitude2_r - longitude1_r\n    delta_latitude = latitude2_r - latitude1_r\n    a = cmath.sqrt(delta_latitude**2 + cmath.cos(latitude1_r) * cmath.cos(latitude2_r) * cmath.sin(delta_longitude)**2)\n    c = 2 * r * cmath.asin(a)\n    return c\ndef get_summation(x):\n    '''\n    Write a function to calculate the summation of the squares of the integers between 1 and x.\n    '''\n    s = 0\n    for i in range(1, x):\n        s += i**2\n    return s\ndef test_polar_rect():\n    assert (polar_rect(5, cmath.pi / 2) == (5, 0)) == True\n    assert (polar_rect(5, cmath.pi / 4) == (5 * cmath.sqrt(2) / 2, cmath.pi / 4)) == True\n    assert (polar_rect(0, cmath.pi / 3) == (0, 0)) == True\n    assert (polar_rect(5, 0) == (5, 0)) == True\n    assert (polar_rect(-5, 0) == (-5, 0)) == True\n    assert (polar_rect(5, -cmath.pi / 2) == (5, cmath.pi)) == True\n    assert (polar_rect(5, -cmath.pi / 4) == (5 * cmath.sqrt(2) / 2, -cmath.pi / 4)) == True\n    assert (polar_rect(0, -cmath.pi / 3) == (0, -cmath.pi / 3)) == True\n    assert (polar_rect(-5, -cmath.pi / 2) == (-5, -cmath.pi)) == True\n    assert (polar_rect(-5, -cmath.pi / 4) == (-5 * cmath.sqrt(2) / 2, -cmath.pi / 4)) == True\ndef test_rect_polar():\n    assert (rect_polar(5, cmath.pi / 2) == (5, 0)) == True\n    assert (rect_polar(5, cmath.pi / 4) == (5 * cmath.sqrt(2) / 2, cmath.pi / 4)) == True\n    assert (rect_polar(0, cmath.pi / 3) == (0, cmath.pi / 3)) == True\n    assert (rect_polar(5, 0) == (5, 0)) == True\n    assert (rect_polar(5, -cmath.pi / 2) == (5, -cmath.pi)) == True\n    assert (rect_polar(5, -cmath.pi / 4) == (5 * cmath.sqrt(2) / 2, -cmath.pi / 4)) == True\n    assert (rect_polar(0, -cmath.pi / 3) == (0, -cmath.pi / 3)) == True\n    assert (rect_polar(-5, -cmath.pi / 2) == (-5, -cmath.pi)) == True\n    assert (rect_polar(-5, -cmath.pi / 4) == (-5 * cmath.sqrt(2) / 2, -cmath.pi / 4)) == True\ndef test_rect_equirect():\n    assert (rect_equirect(5, cmath.pi / 2) == (5, 0)) == True\n    assert (rect_equirect(5, cmath.pi / 4) == (5 * cmath.sqrt(2) / 2, cmath.pi / 4)) == True\n    assert (rect_equirect(0, cmath.pi / 3) == (0, cmath.pi / 3)) == True\n    assert (rect_equirect(5, 0) == (5, 0)) == True\n    assert (rect_equirect(5, -cmath.pi / 2) == (5, -cmath.pi)) == True\n    assert (rect_equirect(5, -cmath.pi / 4) == (5 * cmath.sqrt(2) / 2, -cmath.pi / 4)) == True\n    assert (rect_equirect(0, -cmath.pi / 3) == (0, -cmath.pi / 3)) == True\n    assert (rect_equirect(-5, -cmath.pi / 2) == (-5, -cmath.pi)) == True\n    assert (rect_equirect(-5, -cmath.pi / 4) == (-5 * cmath.sqrt(2) / 2, -cmath.pi / 4)) == True\ndef test_haversine():\n    assert (haversine(0, 0, 0, 1) == 0) == True\n    assert (haversine(0, 0, 1, 0) == cmath.sqrt(2)) == True\n    assert (haversine(0, 1, 0, 0) == cmath.sqrt(2)) == True\n    assert (h"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x**2+y**2\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return cmath.sqrt(x**2+y**2)\ndef test_polar_rect():\n    assert polar_rect(1,0) == 1**2 + 0**2\n    assert polar_rect(1,3) == 1**2 + 3**2\n    assert polar_rect(0,3) == 3**2\n    assert polar_rect(3,3) == 3**2\n    assert polar_rect(3,1) == 3**2\n    assert polar_rect(2,1) == 2**2\n    assert polar_rect(1,2) == 1**2\n    assert polar_rect(0,0) == 0**2\n    assert polar_rect(0,2) == 2**2\n    assert polar_rect(3,3) == 3**2\n    assert polar_rect(1,3) == 1**2\n    assert polar_rect(3,1) == 3**2\n    assert polar_rect(2,1) == 2**2\n    assert polar_rect(1,2) == 1**2\n    assert polar_rect(0,0) == 0**2\n    assert polar_rect(0,2) == 2**2\n    assert polar_rect(3,3) == 3**2\n    assert polar_rect(1,3) == 1**2\n    assert polar_rect(3,1) == 3**2\n    assert polar_rect(2,1) == 2**2\n    assert polar_rect(1,2) == 1**2\n    assert polar_rect(0,0) == 0**2\n    assert polar_rect(0,2) == 2**2\n    assert polar_rect(3,3) == 3**2\n    assert polar_rect(1,3) == 1**2\n    assert polar_rect(3,1) == 3**2\n    assert polar_rect(2,1) == 2**2\n    assert polar_rect(1,2) == 1**2\n    assert polar_rect(0,0) == 0**2\n    assert polar_rect(0,2) == 2**2\n    assert polar_rect(3,3) == 3**2\n    assert polar_rect(1,3) == 1**2\n    assert polar_rect(3,1) == 3**2\n    assert polar_rect(2,1) == 2**2\n    assert polar_rect(1,2) == 1**2\n    assert polar_rect(0,0) == 0**2\n    assert polar_rect(0,2) == 2**2\n    assert polar_rect(3,3) == 3**2\n    assert polar_rect(1,3) == 1**2\n    assert polar_rect(3,1) == 3**2\n    assert polar_rect(2,1) == 2**2\n    assert polar_rect(1,2) == 1**2\n    assert polar_rect(0,0) == 0**2\n    assert polar_rect(0,2) == 2**2\n    assert polar_rect(3,3) == 3**2\n    assert polar_rect(1,3) == 1**2\n    assert polar_rect(3,1) == 3**2\n    assert polar_rect(2,1) == 2**2\n    assert polar_rect(1,2) == 1**2\n    assert polar_rect(0,0) == 0**2\n    assert polar_rect(0,2) == 2**2\n    assert polar_rect(3,3) == 3**2\n    assert polar_rect(1,3) == 1**2\n    assert polar_rect(3,1) == 3**2\n    assert polar_rect(2,1) == 2**2\n    assert polar_rect(1,2) == 1**2\n    assert polar_rect(0,0) == 0**2\n    assert polar_rect(0,2) == 2**2\n    assert polar_rect(3,3) == 3**2\n    assert polar_rect(1,3) == 1**2\n    assert polar_rect(3,1) == 3**2\n    assert polar_rect(2,1) == 2**2\n    assert polar_rect(1,2) == 1**2\n    assert polar_rect(0,0) == 0**2\n    assert polar_rect(0,2) == 2**2\n    assert polar_rect(3,3) == 3**2\n    assert polar_rect(1,3) == 1**2\n    assert polar_rect(3,1) == 3**2\n    assert polar_rect(2,1) == 2**2\n    assert polar_rect(1,2) == 1**2\n    assert polar_rect(0,0) == 0**2\n    assert polar_rect(0,2) == 2**2\n    assert polar_rect(3,3) == 3**2\n    assert polar_rect(1,3) == 1**2\n    assert polar_rect(3,1) == 3**2\n    assert polar_rect(2,1) == 2**2\n    assert polar_rect(1,2) == 1**2\n    assert polar_rect(0,0) == 0**2\n    assert polar_rect(0,2) == 2**2\n    assert polar_rect(3,3) == 3**2\n    assert polar_rect(1,3) == 1**2\n    assert polar_rect(3,1) == 3**2\n    assert polar_rect(2,1) == 2**2\n    assert polar_rect(1,2) == 1**2\n    assert polar_rect(0,0) == 0**2\n    assert polar_rect(0,2) == 2**2\n    assert polar_rect(3,3) == 3**2\n    assert polar_rect(1,3) == 1**2\n    assert polar_rect(3,1) == 3**2\n    assert polar_rect(2,1) == 2**2\n    assert polar_rect(1,2) == 1**2\n    assert polar_rect(0,0) == 0**2\n    assert polar_rect(0,2) == 2**2\n    assert polar_rect(3,3) == 3**2\n    assert polar_rect(1,3) == 1**2\n    assert polar_rect(3,1) == 3**2\n    assert polar_rect(2,1) == 2**2\n    assert polar_rect(1,2) == 1**2\n    assert polar_rect(0,0) == 0**2\n    assert polar_rect(0,2) == 2**2\n    assert polar_rect(3,3) == 3**2\n    assert polar_rect(1,3) == 1**2\n    assert polar_rect(3,1) == 3**2\n    assert polar_rect(2,1) == 2**2\n    assert polar_rect(1,2) == 1**2\n    assert polar_rect(0,0) == 0**2\n    assert polar_rect(0,2) == 2**2\n    assert polar_rect(3,3) == 3**2\n    assert polar_rect(1,3) == 1**2\n    assert polar_rect(3,1) == 3**2\n    assert polar_rect(2,1) == 2**2\n    assert polar_rect(1,2) == 1**2\n    assert polar_rect(0,0) == 0**2\n    assert polar_rect(0,2) == 2**2\n    assert polar_rect(3,3) == 3**2\n    assert polar_rect(1,3) == 1**2\n    assert polar_rect(3,1) == 3**2\n    assert polar_rect(2,1) == 2**2\n    assert polar_rect(1,2) == 1**2\n    assert polar_rect(0,0) == 0**2\n    assert polar_rect(0,2) == 2**2\n    assert polar_rect(3,3) == 3**2\n    assert polar_rect(1,3) == 1**2\n    assert polar_rect(3,1) == 3**2\n    assert polar_rect(2,1) == 2**2\n    assert polar_rect(1,2) == 1**2\n    assert polar_rect(0,0) == 0**2\n    assert polar_rect(0,2) == 2**2\n    assert polar_rect(3,3) == 3**2"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1] = newList[-1],newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    if length < 2:\n        return newList\n    else:\n        newList[0], newList[length - 1] = newList[length - 1], newList[0]\n        return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) >= 1:\n        lastElement = newList[-1]\n        newList[-1] = newList[0]\n        newList[0] = lastElement\n        return newList\n    else:\n        return None\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #take the first element of the list and store in a variable\n    first = newList[0]\n    #take the last element of the list and store in a variable\n    last = newList[len(newList)-1]\n    #slice the list and put the first element in the end\n    newList = newList[1:len(newList)-1]\n    #put the last element in the first position\n    newList.append(last)\n    #put the first element in the second position\n    newList.insert(1, first)\n    #return the new list\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #Type your code here.\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Your code here\n    newList[0] = newList[-1]\n    newList[-1] = newList[0]\n    return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return (int) ((math.factorial(n)) / ((math.factorial(k)) * (math.factorial(n-k)))\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return int((factorial(n))/(factorial(k)*factorial(n-k)))\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(k):\n        res = res * (n-i)\n        res = res // (i+1)\n    return res\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    co_eff = 1\n    for i in xrange(k):\n        co_eff *= (n-i)\n        co_eff /= (i+1)\n    return co_eff\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = [0 for i in xrange(k+1)]\n    C[0] = 1\n    for i in xrange(1,n+1):\n        j = min(i,k)\n        while j>=1:\n            C[j] += C[j-1]\n            j-=1\n    return C[k]"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(1,k+1): \n        res = res*(n-i+1)/i\n    return res \ndef print_Pattern(n): \n    for i in range(1,n+1): \n        for j in range(1,i+1): \n            print j,\n        print \"\"\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = [[0 for i in range(k+1)] for j in range(n+1)] \n    C[0][0] = 1\n    for i in range(1,n+1): \n        C[i][0] = 1\n        for j in range(1,min(i,k)+1): \n            C[i][j] = C[i-1][j-1] + C[i-1][j] \n    return C[n][k] \n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    binomial_arr = [0 for i in range(k+1)]\n    binomial_arr[0] = 1\n    for i in range(1,n+1):\n        binomial_arr[i%k+1] = (binomial_arr[i%k] * (i-i%k) )/float(i)\n    \n    return binomial_arr[k]\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in xrange(k):\n        res = res * (n-i)\n        res = res / (i+1)\n    return res\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return int((factorial(n))/(factorial(k)*factorial(n-k)))\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ip.lstrip('0')\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip=ip.split('.')\n    for x in range(len(ip)):\n        ip[x]=ip[x].lstrip('0')\n    ip='.'.join(ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    try:\n        #ip = ip.strip(\"0\")\n        ip = re.sub(\"0\", \"\", ip)\n        print ip\n    except:\n        pass\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'0*',r'',ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'\\.[0]{1,4}', '.0', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #TODO\n    ip = re.sub(r'(0)+(\\.)',r'\\2',ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #a = re.findall(r'(\\d{1,3})',ip)\n    #if a:\n    #    ip = a[0]\n    return ''.join(filter(lambda x: not x == '0',ip))\ndef isValidIp(ip):\n    ip = removezero_ip(ip)\n    parts = ip.split('.')\n    if len(parts)!= 4:\n        return False\n    for p in parts:\n        if not p.isdigit() or int(p) > 255:\n            return False\n    return True\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'\\.(0)+', '', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(\"0\", \"\", ip)\n    ip = re.sub(\"\\.0*\", \".\", ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\d*\\.(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)(\\d+)$',r'\\1.\\2.\\3.\\4.\\5.\\6.\\7',ip)\n    return ip\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list1.sort()\n    first_even = list1[1]\n    first_odd = list1[0]\n    return first_odd - first_even\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            list1[i] = list1[i] - list1[i-1]\n        else:\n            list1[i] = list1[i] - list1[i-1]\n    return list1\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return list1[0] - list1[-1]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 0:\n        raise ValueError(\"The list is empty.\")\n    if len(list1) == 1:\n        raise ValueError(\"There is only one element in the list.\")\n    if len(list1) == 2:\n        raise ValueError(\"There are two elements in the list.\")\n    if len(list1) % 2!= 0:\n        raise ValueError(\"The list must have an even number of elements.\")\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # for all indices of the list\n    for i in range(len(list1)):\n        # if the index is even\n        if i % 2 == 0:\n            # get the first even number\n            even = list1[i]\n        # if the index is odd\n        elif i % 2 == 1:\n            # get the first odd number\n            odd = list1[i]\n    # return the difference between the two\n    return even - odd\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_num = 0\n    for i in range(len(list1)):\n        if i%2 == 0:\n            odd_num = list1[i]\n        else:\n            continue\n    even_num = 0\n    for i in range(len(list1)):\n        if i%2!= 0:\n            even_num = list1[i]\n        else:\n            continue\n    print \"first even number:\", even_num\n    print \"first odd number:\", odd_num\n    print \"difference:\", abs(even_num-odd_num)\n    \ndiff_even_odd([2,1,3,5,6,4,8,7])\ndiff_even_odd([10,9,8,7,6,5,4,3,2,1])\ndiff_even_odd([1,2,3,4,5,6,7,8,9,10])\n    \n    \ndef test_diff_even_odd():\n    assert diff_even_odd([2,1,3,5,6,4,8,7]) == 2\n    assert diff_even_odd([10,9,8,7,6,5,4,3,2,1]) == 7\n    assert diff_even_odd([1,2,3,4,5,6,7,8,9,10]) == 0\n    \ntest_diff_even_odd()\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff = list1[0] - list1[1]\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return list1[0] - list1[-1]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1)<2:\n        return None\n    if len(list1)%2==0:\n        return list1[0] - list1[-1]\n    else:\n        return list1[0] + list1[-1]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return list1[0] - list1[-1]\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    i = 0\n    j = 0\n    while i < len(str1) and j < len(str2):\n        if str1[i] == str2[j]:\n            i += 1\n            j += 1\n        else:\n            count += 1\n            j += 1\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0 \n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            count+=1 \n    return count \n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            count += 1\n            str1 = str1[:i] + str1[i+1:] + str2[i] + str2[i+1:]\n    return count \n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    m = len(str1)\n    n = len(str2)\n    if m > n : \n        tmp = str1\n        str1 = str2\n        str2 = tmp\n        m = len(str1)\n        n = len(str2)\n    l = [0]*m\n    ans = 0\n    for i in range(m) :\n        l[i] = str1[i]\n    for i in range(m) :\n        if l[i] == '0' :\n            continue\n        for j in range(n) :\n            if str2[j] == '0' :\n                continue\n            if l[i] == str2[j] :\n                break\n        l[i] = str2[j]\n        ans = ans + 1\n    return ans\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    import numpy as np\n    def count_Swaps(str1,str2):\n        str1 = np.array(str1,int)\n        str2 = np.array(str2,int)\n        count=0\n        for i in range(len(str1)):\n            if str1[i]!=str2[i]:\n                str1[i],str1[str2[i]] = str1[str2[i]],str1[i]\n                count += 1\n        return count\n    print(count_Swaps(str1,str2))\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            count += 1\n            str2 = str2[:i] + '0' + str2[i+1:]\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2) : \n        return \"Length of both the string are not same\"\n    swaps=0\n    for i in xrange(len(str1)): \n        if str1[i]!= str2[i] : \n            str1=str1[:i] + '1' + str1[i+1:]\n            str2=str2[:i] + '1' + str2[i+1:]\n            swaps+=1\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n    count = 0\n    for i in range(0,n) :\n        if str1[i] == str2[i] :\n            continue\n        for j in range(0,m) :\n            if str1[i] == str2[j] :\n                str2 = list(str2)\n                str2[j] = str1[i]\n                str2 = ''.join(str2)\n                break\n        count = count + 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # We will be using a HashMap to store the binary number as key and the count of the number of swaps required to convert it to desired number as value\n    str1 = str1 + '0'\n    str2 = str2 + '0'\n    Map = {}\n    for i in range(len(str1)) :\n        Map[str1[i]] = 0\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    count = 0\n    for i in range(n) :\n        if str1[i] == str2[i] :\n            continue\n        else :\n            count += 1\n            for j in range(n) :\n                if str1[j]!= str2[i] :\n                    temp = str1[j]\n                    str1[j] = str2[i]\n                    str2[i] = temp\n                    break\n    return count\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for each_tuple in tuple_list:\n        size = size + sys.getsizeof(each_tuple)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # return type: number\n    # create a list of the tuple\n    tuple_list_copy = list(tuple_list)\n    # for each element in the tuple\n    for i in range(len(tuple_list_copy)):\n        # increment i by one\n        i+=1\n        # if i is greater than the length of tuple_list_copy\n        if i > len(tuple_list_copy):\n            # stop\n            break\n        # increment the size of the tuple\n        size = tuple_list_copy[i-1][0]+tuple_list_copy[i-1][1]\n        # decrement i by one\n        i-=1\n        # increment the size of the tuple\n        size+=tuple_list_copy[i][0]\n        # print the size\n        print size\n    # return the size of the tuple\n    return size\ndef tuple_min(tuple_list):\n    # create a list of the tuple\n    tuple_list_copy = list(tuple_list)\n    # for each element in the tuple\n    for i in range(len(tuple_list_copy)):\n        # increment i by one\n        i+=1\n        # if i is greater than the length of tuple_list_copy\n        if i > len(tuple_list_copy):\n            # stop\n            break\n        # increment the min of the tuple\n        min = tuple_list_copy[i-1][1]\n        # decrement i by one\n        i-=1\n        # increment the min of the tuple\n        min+=tuple_list_copy[i][1]\n        # print the min\n        print min\n    # return the min of the tuple\n    return min\ndef tuple_max(tuple_list):\n    # create a list of the tuple\n    tuple_list_copy = list(tuple_list)\n    # for each element in the tuple\n    for i in range(len(tuple_list_copy)):\n        # increment i by one\n        i+=1\n        # if i is greater than the length of tuple_list_copy\n        if i > len(tuple_list_copy):\n            # stop\n            break\n        # increment the max of the tuple\n        max = tuple_list_copy[i-1][2]\n        # decrement i by one\n        i-=1\n        # increment the max of the tuple\n        max+=tuple_list_copy[i][2]\n        # print the max\n        print max\n    # return the max of the tuple\n    return max\ndef tuple_average(tuple_list):\n    # create a list of the tuple\n    tuple_list_copy = list(tuple_list)\n    # for each element in the tuple\n    for i in range(len(tuple_list_copy)):\n        # increment i by one\n        i+=1\n        # if i is greater than the length of tuple_list_copy\n        if i > len(tuple_list_copy):\n            # stop\n            break\n        # increment the average of the tuple\n        average = tuple_list_copy[i-1][3]\n        # decrement i by one\n        i-=1\n        # increment the average of the tuple\n        average+=tuple_list_copy[i][3]\n        # print the average\n        print average\n    # return the average of the tuple\n    return average\ndef tuple_median(tuple_list):\n    # create a list of the tuple\n    tuple_list_copy = list(tuple_list)\n    # for each element in the tuple\n    for i in range(len(tuple_list_copy)):\n        # increment i by one\n        i+=1\n        # if i is greater than the length of tuple_list_copy\n        if i > len(tuple_list_copy):\n            # stop\n            break\n        # increment the median of the tuple\n        median = tuple_list_copy[i-1][4]\n        # decrement i by one\n        i-=1\n        # increment the median of the tuple\n        median+=tuple_list_copy[i][4]\n        # print the median\n        print median\n    # return the median of the tuple\n    return median\ndef tuple_mode(tuple_list):\n    # create a list of the tuple\n    tuple_list_copy = list(tuple_list)\n    # for each element in the tuple\n    for i in range(len(tuple_list_copy)):\n        # increment i by one\n        i+=1\n        # if i is greater than the length of tuple_list_copy\n        if i > len(tuple_list_copy):\n            # stop\n            break\n        # increment the mode of the tuple\n        mode = tuple_list_copy[i-1][5]\n        # decrement i by one\n        i-=1\n        # increment the mode of the tuple\n        mode+=tuple_list_copy[i][5]\n        # print the mode\n        print mode\n    # return the mode of the tuple\n    return mode\ndef tuple_to_set(tuple_list):\n    # create a list of the tuple\n    tuple_list_copy = list(tuple_list)\n    # for each element in the tuple\n    for i in range(len(tuple_list_copy)):\n        # increment i by one\n        i+=1\n        # if i is greater than the length of tuple_list_copy\n        if i > len(tuple_list_copy):\n            # stop\n            break\n        # increment the size of the tuple\n        tuple_list_copy[i-1][0]+=tuple_list_copy[i-1][1]\n        # decrement i by one\n        i-=1\n        # increment the size of the tuple\n        tuple_list_copy[i][0]+=tuple_list_copy[i][1]\n    # remove the elements of the tuple\n    tuple_list_copy.remove([0,0])\n    # remove the duplicate elements of the tuple\n    tuple_list_copy = set(tuple_list_copy)\n    # print the size of the tuple\n    print tuple_size(tuple_list_copy)\n    # return the size of the tuple\n    return tuple_size(tuple_list_copy)\ndef tuple_even_value(tuple_list):\n    # create a list of the tuple\n    tuple_list_copy = list(tuple_list)\n    # for each element in the tuple\n    for i in range(len(tuple_list_copy)):\n        # increment i by one\n        i+=1\n        # if i is greater than the length of tuple_list_copy\n        if i > len(tuple_list_copy):\n            # stop\n            break\n        # increment the size of the tuple\n        tuple_list_copy[i-1][0]+=tuple_list_copy[i-1][1]\n        # decrement i by one\n        i-=1\n        # increment the size of the tuple\n        tuple_list_copy[i][0]+=tuple_list_copy[i][1]\n    # remove the elements of the tuple\n    tuple_list_copy.remove([0,0])\n    # remove the duplicate elements of the tuple\n    tuple_list_copy = set(tuple_list_copy)\n    # print the size of the tuple\n    print tuple_size(tuple_list_copy)\n    # return the size of the tuple\n    return tuple_size(tuple_list_copy)\ndef tuple_odd_value(tuple_list):\n    # create a list of the tuple\n    tuple_list_copy = list(tuple_list)\n    # for each element in the tuple\n    for i in range(len(tuple_list_copy)):\n        # increment i by one\n        i+=1\n        # if i is greater than the length of tuple_list_copy\n        if i > len(tuple_list_copy):\n            # stop\n            break\n        # increment the size of the tuple\n        tuple_list_copy[i-1][0]+=tuple_list_copy[i-1][1]\n        # decrement i by one\n        i-=1\n        # increment the size of the tuple\n        tuple_list_copy[i][0]+=tuple_list_copy[i][1]\n    # remove the elements of the tuple\n    tuple_list_copy.remove([0,"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    length=0\n    for item in tuple_list:\n        length+=sys.getsizeof(item)\n    return length\ndef tuple_equal(tuple1,tuple2):\n    '''\n    Write a function to check if the two tuples are equal.\n    '''\n    if(len(tuple1)!=len(tuple2)):\n        return False\n    else:\n        for i in range(0,len(tuple1)):\n            if(tuple1[i]!=tuple2[i]):\n                return False\n        return True\ndef tuple_length(tuple_list):\n    '''\n    Write a function to get the length of the given tuple.\n    '''\n    length=0\n    for item in tuple_list:\n        length+=1\n    return length\ndef tuple_find(tuple_list,find_item):\n    '''\n    Write a function to find an item in a tuple.\n    '''\n    for item in tuple_list:\n        if(item==find_item):\n            return True\n    return False\ndef tuple_max(tuple_list):\n    '''\n    Write a function to find the maximum value in a tuple.\n    '''\n    max_value=tuple_list[0]\n    for item in tuple_list:\n        if(item>max_value):\n            max_value=item\n    return max_value\ndef tuple_min(tuple_list):\n    '''\n    Write a function to find the minimum value in a tuple.\n    '''\n    min_value=tuple_list[0]\n    for item in tuple_list:\n        if(item<min_value):\n            min_value=item\n    return min_value\ndef tuple_average(tuple_list):\n    '''\n    Write a function to find the average value in a tuple.\n    '''\n    sum_value=0\n    for item in tuple_list:\n        sum_value+=item\n    average=float(sum_value)/len(tuple_list)\n    return average\ndef tuple_count(tuple_list,find_item):\n    '''\n    Write a function to count the number of times an item appears in a tuple.\n    '''\n    count=0\n    for item in tuple_list:\n        if(item==find_item):\n            count+=1\n    return count\ndef tuple_append(tuple_list,item):\n    '''\n    Write a function to append an item to a tuple.\n    '''\n    tuple_list=list(tuple_list)\n    tuple_list.append(item)\n    return tuple(tuple_list)\ndef tuple_insert(tuple_list,item,index):\n    '''\n    Write a function to insert an item at a given index in a tuple.\n    '''\n    tuple_list=list(tuple_list)\n    tuple_list.insert(index,item)\n    return tuple(tuple_list)\ndef tuple_extract(tuple_list,index):\n    '''\n    Write a function to extract an item from a tuple.\n    '''\n    tuple_list=list(tuple_list)\n    return tuple_list[index]\ndef tuple_remove(tuple_list,item):\n    '''\n    Write a function to remove an item from a tuple.\n    '''\n    tuple_list=list(tuple_list)\n    tuple_list.remove(item)\n    return tuple(tuple_list)\ndef tuple_sort(tuple_list):\n    '''\n    Write a function to sort a tuple.\n    '''\n    tuple_list=sorted(tuple_list)\n    return tuple_list\ndef tuple_reverse(tuple_list):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    tuple_list=tuple_list[::-1]\n    return tuple_list\ndef tuple_pop(tuple_list,index):\n    '''\n    Write a function to remove and return an item from a tuple.\n    '''\n    tuple_list=list(tuple_list)\n    return tuple_list.pop(index)\ndef tuple_str(tuple_list):\n    '''\n    Write a function to convert a tuple into a string.\n    '''\n    tuple_list=str(tuple_list)\n    return tuple_list\ndef tuple_int(tuple_list):\n    '''\n    Write a function to convert a tuple into a string.\n    '''\n    tuple_list=int(tuple_list)\n    return tuple_list\ndef tuple_float(tuple_list):\n    '''\n    Write a function to convert a tuple into a string.\n    '''\n    tuple_list=float(tuple_list)\n    return tuple_list\ndef tuple_format(tuple_list):\n    '''\n    Write a function to format a tuple.\n    '''\n    tuple_list=format(tuple_list)\n    return tuple_list\ndef tuple_slice(tuple_list,index_start,index_stop):\n    '''\n    Write a function to slice a tuple.\n    '''\n    tuple_list=tuple_list[index_start:index_stop]\n    return tuple_list\ndef tuple_add(tuple_list1,tuple_list2):\n    '''\n    Write a function to add two tuples.\n    '''\n    length=tuple_length(tuple_list1)\n    tuple_list2=tuple_list2[0:length]\n    tuple_list=[]\n    for i in range(0,len(tuple_list1)):\n        tuple_list.append(tuple_list1[i]+tuple_list2[i])\n    return tuple_list\ndef tuple_concat(tuple_list1,tuple_list2):\n    '''\n    Write a function to concatenate two tuples.\n    '''\n    length=tuple_length(tuple_list1)\n    tuple_list2=tuple_list2[0:length]\n    tuple_list=[]\n    for i in range(0,len(tuple_list1)):\n        tuple_list.append(tuple_list1[i]+tuple_list2[i])\n    return tuple(tuple_list)\ndef tuple_mult(tuple_list1,tuple_list2):\n    '''\n    Write a function to multiply two tuples.\n    '''\n    length=tuple_length(tuple_list1)\n    tuple_list2=tuple_list2[0:length]\n    tuple_list=[]\n    for i in range(0,len(tuple_list1)):\n        tuple_list.append(tuple_list1[i]*tuple_list2[i])\n    return tuple(tuple_list)\ndef tuple_cross(tuple_list1,tuple_list2):\n    '''\n    Write a function to cross two tuples.\n    '''\n    length=tuple_length(tuple_list1)\n    tuple_list2=tuple_list2[0:length]\n    tuple_list=[]\n    for i in range(0,len(tuple_list1)):\n        tuple_list.append(tuple_list1[i]*tuple_list2[i])\n    return tuple(tuple_list)\ndef tuple_comparison(tuple_list1,tuple_list2):\n    '''\n    Write a function to compare the values of two tuples.\n    '''\n    length=tuple_length(tuple_list1)\n    tuple_list2=tuple_list2[0:length]\n    tuple_list=[]\n    for i in range(0,len(tuple_list1)):\n        tuple_list.append(tuple_list1[i]==tuple_list2[i])\n    return tuple_list\ndef tuple_in(tuple_list1,tuple_list2):\n    '''\n    Write a function to check if an item exists in a tuple.\n    '''\n    length=tuple_length(tuple_list1)\n    tuple_list2=tuple_list2[0:length]\n    tuple_list=[]\n    for i i"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size = size + sys.getsizeof(tuple_list[i])\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    length=0\n    for x in tuple_list:\n        length=length+sys.getsizeof(x)\n    return length\ndef test_tuple_size():\n    assert tuple_size([])==0\n    assert tuple_size((0,))==2\n    assert tuple_size((0,1,2,3,4,5))==6\n    assert tuple_size((0,1,2,3,4,5,6))==8\n    assert tuple_size((0,1,2,3,4,5,6,7))==10\n    assert tuple_size((0,1,2,3,4,5,6,7,8))==12\n    assert tuple_size((0,1,2,3,4,5,6,7,8,9))==14\n    assert tuple_size((0,1,2,3,4,5,6,7,8,9,10))==16\n    assert tuple_size((0,1,2,3,4,5,6,7,8,9,10,11))==18\n    assert tuple_size((0,1,2,3,4,5,6,7,8,9,10,11,12))==20\n    assert tuple_size((0,1,2,3,4,5,6,7,8,9,10,11,12,13))==22\n    assert tuple_size((0,1,2,3,4,5,6,7,8,9,10,11,12,13,14))==24\n    assert tuple_size((0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15))==26\n    assert tuple_size((0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16))==28\n    assert tuple_size((0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17))==30\n    assert tuple_size((0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18))==32\n    assert tuple_size((0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19))==34\n    assert tuple_size((0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20))==36\n    assert tuple_size((0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21))==38\n    assert tuple_size((0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22))==40\n    assert tuple_size((0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23))==42\n    assert tuple_size((0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24))==44\n    assert tuple_size((0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25))==46\n    assert tuple_size((0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26))==48\n    assert tuple_size((0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27))==50\n    assert tuple_size((0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28))==52\n    assert tuple_size((0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29))==54\n    assert tuple_size((0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30))==56\n    assert tuple_size((0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31))==58\n    assert tuple_size((0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32))==60\n    assert tuple_size((0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33))==62\n    assert tuple_size((0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34))==64\n    assert tuple_size((0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35))==66\n    assert tuple_size((0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36))==68\n    assert tuple_size((0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37))==70\n    assert tuple_size((0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38))==72\n    assert tuple_size((0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39))==74\n    assert tuple_size((0,1,2,3,4,5,6,"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Here, assume the tuple is a list of strings\n    size = 0\n    for item in tuple_list:\n        size += len(item)\n    return size\ndef compute_frequencies(my_list):\n    '''\n    Write a function that takes a list of strings and returns a dictionary of\n    frequencies of the elements of the list.\n    '''\n    # Here, the input list is a list of strings\n    freq_dict = {}\n    for word in my_list:\n        if word not in freq_dict:\n            freq_dict[word] = 1\n        else:\n            freq_dict[word] += 1\n    return freq_dict\ndef compute_co_occurrence(dict1, dict2):\n    '''\n    Write a function that takes two dictionaries of word counts and returns a\n    dictionary of co-occurrence counts.\n    '''\n    # Here, the input dictionaries are dictionaries of word counts\n    co_occur_dict = {}\n    for word1 in dict1:\n        for word2 in dict2:\n            if word1 == word2:\n                co_occur_dict[(word1, word2)] = (dict1[word1]*dict2[word2])\n    return co_occur_dict\ndef compute_chi_squared(dict1, dict2):\n    '''\n    Write a function that takes two dictionaries of word counts and returns a\n    chi-squared statistic.\n    '''\n    # Here, the input dictionaries are dictionaries of word counts\n    chi_squared_stat = 0\n    for word1 in dict1:\n        for word2 in dict2:\n            if word1 == word2:\n                chi_squared_stat += ((dict1[word1]-dict2[word2])**2)/(dict1[word1]+dict2[word2])\n    return chi_squared_stat\ndef compute_intersection(dict1, dict2):\n    '''\n    Write a function that takes two dictionaries of word counts and returns the\n    intersection of the two dictionaries.\n    '''\n    # Here, the input dictionaries are dictionaries of word counts\n    intersection_dict = {}\n    for word1 in dict1:\n        if word1 in dict2:\n            intersection_dict[word1] = dict1[word1]\n    return intersection_dict\ndef compute_jaccard(dict1, dict2):\n    '''\n    Write a function that takes two dictionaries of word counts and returns the\n    Jaccard similarity coefficient.\n    '''\n    # Here, the input dictionaries are dictionaries of word counts\n    intersection = compute_intersection(dict1,dict2)\n    union = compute_intersection(dict1,dict2)\n    jaccard_coefficient = len(intersection)/len(union)\n    return jaccard_coefficient\ndef compute_contingency_table(dict1, dict2):\n    '''\n    Write a function that takes two dictionaries of word counts and returns a\n    contingency table.\n    '''\n    # Here, the input dictionaries are dictionaries of word counts\n    intersection = compute_intersection(dict1,dict2)\n    contingency_table = []\n    for word in intersection:\n        row_list = []\n        row_list.append(word)\n        row_list.append(intersection[word])\n        contingency_table.append(row_list)\n    return contingency_table\ndef compute_fisher_z_score(dict1, dict2, n, dict1_total, dict2_total):\n    '''\n    Write a function that takes two dictionaries of word counts and a size n,\n    the total number of words in the two dictionaries, and two total word\n    counts, dict1_total and dict2_total, and returns a Fisher Z score.\n    '''\n    # Here, the input dictionaries are dictionaries of word counts\n    intersection = compute_intersection(dict1,dict2)\n    intersection_size = len(intersection)\n    total_size = n\n    observed_p = intersection_size/total_size\n    chi_squared_stat = compute_chi_squared(dict1,dict2)\n    chi_squared_stat = chi_squared_stat/(n-1)\n    expected_p = ((n-1)*chi_squared_stat)/(dict1_total+dict2_total)\n    fisher_z_score = (observed_p-expected_p)/(expected_p/n)\n    return fisher_z_score\ndef compute_information_gain(dict1, dict2, n, dict1_total, dict2_total):\n    '''\n    Write a function that takes two dictionaries of word counts and a size n,\n    the total number of words in the two dictionaries, and two total word\n    counts, dict1_total and dict2_total, and returns the information gain\n    between the two dictionaries.\n    '''\n    # Here, the input dictionaries are dictionaries of word counts\n    intersection = compute_intersection(dict1,dict2)\n    intersection_size = len(intersection)\n    total_size = n\n    observed_p = intersection_size/total_size\n    entropy_dict1 = compute_entropy(dict1)\n    entropy_dict2 = compute_entropy(dict2)\n    entropy_dict1 = entropy_dict1*(dict1_total/n)\n    entropy_dict2 = entropy_dict2*(dict2_total/n)\n    information_gain = (observed_p*entropy_dict1)-(entropy_dict2)\n    return information_gain\ndef compute_entropy(dict1):\n    '''\n    Write a function that takes a dictionary of word counts and returns the\n    entropy of the counts in the dictionary.\n    '''\n    # Here, the input dictionary is a dictionary of word counts\n    entropy_dict = 0\n    for word in dict1:\n        entropy_dict += (-(dict1[word]/sum(dict1.values()))*log2(dict1[word]/sum(dict1.values())))\n    return entropy_dict\ndef compute_mutual_information(dict1, dict2, n, dict1_total, dict2_total):\n    '''\n    Write a function that takes two dictionaries of word counts and a size n,\n    the total number of words in the two dictionaries, and two total word\n    counts, dict1_total and dict2_total, and returns the mutual information\n    between the two dictionaries.\n    '''\n    # Here, the input dictionaries are dictionaries of word counts\n    intersection = compute_intersection(dict1,dict2)\n    intersection_size = len(intersection)\n    total_size = n\n    observed_p = intersection_size/total_size\n    entropy_dict1 = compute_entropy(dict1)\n    entropy_dict2 = compute_entropy(dict2)\n    entropy_dict1 = entropy_dict1*(dict1_total/n)\n    entropy_dict2 = entropy_dict2*(dict2_total/n)\n    mutual_information = (observed_p*entropy_dict1)-(entropy_dict2)\n    return mutual_information\ndef compute_chi_squared_probability_distribution(dict1, dict2, n, dict1_total, dict2_total):\n    '''\n    Write a function that takes two dictionaries of word counts and a size n,\n    the total number of words in the two dictionaries, and two total word\n    counts, dict1_total and dict2_total, and returns a chi-squared\n    probability distribution.\n    '''\n    # Here, the input dictionaries are dictionaries of word counts\n    intersection = compute_intersection(dict1,dict2)\n    intersection_size = len(intersection)\n    total_size = n\n    chi_squared_stat = compute_chi_squared(dict1,dict2)\n    chi_squared_stat = chi_squared_stat/(n-1)\n    expected_p = ((n-1)*chi_squared_stat)/(dict1_total+dict2_total)\n    probability_distribution = []\n    for word in intersection:\n        probability_distribution.append((word, chi_squared_stat/expected_p))"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size=0\n    for item in tuple_list:\n        size+=sys.getsizeof(item)\n    return size\ndef tuple_list_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple list.\n    '''\n    size=0\n    for item in tuple_list:\n        size+=sys.getsizeof(item)\n    return size\ndef test():\n    '''\n    Write a function to find the size in bytes of the given tuple list.\n    '''\n    #tuple_list=[(1,2,3),(4,5,6)]\n    #tuple_list=[(1,2),(3,4)]\n    #tuple_list=[(1,2,3,4,5),(1,2,3,4,5,6,7,8,9,10,11,12),(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15),(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30),(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size = sys.getsizeof(tuple_list)\n    return tuple_size\ndef list_size(list_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    list_size = sys.getsizeof(list_list)\n    return list_size\ndef list_sum(list_list):\n    '''\n    Write a function to find the sum of the given list.\n    '''\n    list_sum = sum(list_list)\n    return list_sum\ndef list_sum_element(list_list):\n    '''\n    Write a function to find the sum of the given list.\n    '''\n    list_sum = sum(list_list)\n    return list_sum\ndef tuple_sum(tuple_list):\n    '''\n    Write a function to find the sum of the given tuple.\n    '''\n    tuple_sum = sum(tuple_list)\n    return tuple_sum\ndef list_sum_element(list_list):\n    '''\n    Write a function to find the sum of the given list.\n    '''\n    list_sum = sum(list_list)\n    return list_sum\ndef list_mean(list_list):\n    '''\n    Write a function to find the mean of the given list.\n    '''\n    list_mean = sum(list_list)/len(list_list)\n    return list_mean\ndef list_max(list_list):\n    '''\n    Write a function to find the max of the given list.\n    '''\n    list_max = max(list_list)\n    return list_max\ndef list_min(list_list):\n    '''\n    Write a function to find the min of the given list.\n    '''\n    list_min = min(list_list)\n    return list_min\ndef list_median(list_list):\n    '''\n    Write a function to find the median of the given list.\n    '''\n    list_median = statistics.median(list_list)\n    return list_median\ndef list_variance(list_list):\n    '''\n    Write a function to find the variance of the given list.\n    '''\n    list_var = statistics.variance(list_list)\n    return list_var\ndef list_std_dev(list_list):\n    '''\n    Write a function to find the standard deviation of the given list.\n    '''\n    list_std_dev = statistics.stdev(list_list)\n    return list_std_dev\ndef list_skewness(list_list):\n    '''\n    Write a function to find the skewness of the given list.\n    '''\n    list_skew = statistics.skew(list_list)\n    return list_skew\ndef list_kurtosis(list_list):\n    '''\n    Write a function to find the kurtosis of the given list.\n    '''\n    list_kurtosis = statistics.kurtosis(list_list)\n    return list_kurtosis\ndef list_all(list_list):\n    '''\n    Write a function to find the mean, sum, max, min, median, std_dev, and \n    skewness of the given list.\n    '''\n    list_mean = statistics.mean(list_list)\n    list_sum = sum(list_list)\n    list_max = max(list_list)\n    list_min = min(list_list)\n    list_median = statistics.median(list_list)\n    list_var = statistics.variance(list_list)\n    list_std_dev = statistics.stdev(list_list)\n    list_skew = statistics.skew(list_list)\n    list_kurtosis = statistics.kurtosis(list_list)\n    return list_mean, list_sum, list_max, list_min, list_median, list_var, list_std_dev, list_skew, list_kurtosis\ndef list_sorted_ascending(list_list):\n    '''\n    Write a function to find the mean, sum, max, min, median, std_dev, \n    and skewness of the given list.\n    '''\n    list_mean = statistics.mean(list_list)\n    list_sum = sum(list_list)\n    list_max = max(list_list)\n    list_min = min(list_list)\n    list_median = statistics.median(list_list)\n    list_var = statistics.variance(list_list)\n    list_std_dev = statistics.stdev(list_list)\n    list_skew = statistics.skew(list_list)\n    list_kurtosis = statistics.kurtosis(list_list)\n    sorted_list = sorted(list_list)\n    list_sorted_ascending = sorted_list\n    return list_mean, list_sum, list_max, list_min, list_median, list_var, list_std_dev, list_skew, list_kurtosis, list_sorted_ascending\ndef list_sorted_descending(list_list):\n    '''\n    Write a function to find the mean, sum, max, min, median, std_dev, \n    and skewness of the given list.\n    '''\n    list_mean = statistics.mean(list_list)\n    list_sum = sum(list_list)\n    list_max = max(list_list)\n    list_min = min(list_list)\n    list_median = statistics.median(list_list)\n    list_var = statistics.variance(list_list)\n    list_std_dev = statistics.stdev(list_list)\n    list_skew = statistics.skew(list_list)\n    list_kurtosis = statistics.kurtosis(list_list)\n    sorted_list = sorted(list_list, reverse = True)\n    list_sorted_descending = sorted_list\n    return list_mean, list_sum, list_max, list_min, list_median, list_var, list_std_dev, list_skew, list_kurtosis, list_sorted_descending\ndef tuple_sorted_ascending(tuple_list):\n    '''\n    Write a function to find the mean, sum, max, min, median, std_dev, \n    and skewness of the given tuple.\n    '''\n    tuple_mean = statistics.mean(tuple_list)\n    tuple_sum = sum(tuple_list)\n    tuple_max = max(tuple_list)\n    tuple_min = min(tuple_list)\n    tuple_median = statistics.median(tuple_list)\n    tuple_var = statistics.variance(tuple_list)\n    tuple_std_dev = statistics.stdev(tuple_list)\n    tuple_skew = statistics.skew(tuple_list)\n    tuple_kurtosis = statistics.kurtosis(tuple_list)\n    sorted_tuple = sorted(tuple_list)\n    tuple_sorted_ascending = sorted_tuple\n    return tuple_mean, tuple_sum, tuple_max, tuple_min, tuple_median, tuple_var, tuple_std_dev, tuple_skew, tuple_kurtosis, tuple_sorted_ascending\ndef tuple_sorted_descending(tuple_list):\n    '''\n    Write a function to find the mean, sum, max, min, median, std_dev, \n    and skewness of the given tuple.\n    '''\n    tuple_mean = statistics.mean(tuple_list)\n    tuple_sum = sum(tuple_list)\n    tuple_max = max(tuple_list)\n    tuple_min = min(tuple_list)\n    tuple_median = statistics.median(tuple_list)\n    tuple_var = statistics.variance(tuple_list)\n    tuple_std_dev = statistics.stdev(tuple_list)\n    tuple_skew = statistics.skew(tuple_list)\n    tuple_kurtosis = statistics.kurtosis(tupl"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    s=0\n    for elem in tuple_list:\n        if isinstance(elem,str):\n            s+=len(elem)*sys.getsizeof(str)\n        elif isinstance(elem,int):\n            s+=len(str(elem))*sys.getsizeof(int)\n        elif isinstance(elem,float):\n            s+=len(str(elem))*sys.getsizeof(float)\n        elif isinstance(elem,list):\n            s+=tuple_size(elem)\n        elif isinstance(elem,tuple):\n            s+=tuple_size(elem)\n        elif isinstance(elem,dict):\n            s+=tuple_size(elem)\n        elif isinstance(elem,set):\n            s+=tuple_size(elem)\n    return s\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n = len(arr1)\n    m = len(arr2)\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    if n1 > n2:\n        return find_kth(arr2, arr1, k)\n    m1 = n1//2\n    m2 = n2//2\n    if k > m1 + m2:\n        if arr1[m1] > arr2[m2]:\n            return find_kth(arr2, arr1, k - m1 - m2)\n        else:\n            return find_kth(arr1, arr2, k - m2)\n    elif k < m1 + m2:\n        if arr1[m1] > arr2[m2]:\n            return find_kth(arr1, arr2[:m2+1], k)\n        else:\n            return find_kth(arr1[:m1+1], arr2, k)\n    else:\n        return arr1[m1]\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # BUG: don't know why it doesn't work\n    arr1_ptr, arr2_ptr = 0, 0\n    res = None\n    while k > 0 and (arr1_ptr < len(arr1) or arr2_ptr < len(arr2)):\n        if k > len(arr1):\n            res = arr2[arr2_ptr]\n            arr2_ptr += 1\n            k -= len(arr1)\n        elif k > len(arr2):\n            res = arr1[arr1_ptr]\n            arr1_ptr += 1\n            k -= len(arr2)\n        elif arr1[arr1_ptr] < arr2[arr2_ptr]:\n            res = arr1[arr1_ptr]\n            arr1_ptr += 1\n        else:\n            res = arr2[arr2_ptr]\n            arr2_ptr += 1\n    return res\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # need to find the middle element of the two arrays\n    # the middle element is the kth element if k is less than or equal to the size of array 1\n    # the middle element is the kth element if k is greater than the size of array 2\n    # if the size of array 1 is greater than the size of array 2, then the element is in the left half of array 1\n    # if the size of array 1 is less than the size of array 2, then the element is in the right half of array 2\n    # if the size of array 1 is equal to the size of array 2, then the element is in the middle of both arrays\n    size1 = len(arr1)\n    size2 = len(arr2)\n    if size1 > size2:\n        return find_kth(arr2, arr1, k)\n    if size2 > size1:\n        return find_kth(arr1, arr2, k)\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    i1, i2 = 0, 0\n    n1, n2 = len(arr1), len(arr2)\n    while i1 < n1 and i2 < n2:\n        if arr1[i1] < arr2[i2]:\n            i1 += 1\n        elif arr1[i1] > arr2[i2]:\n            i2 += 1\n        else:\n            if i1 == n1 - 1:\n                return arr2[i2 + k - 1]\n            elif i2 == n2 - 1:\n                return arr1[i1 + k - 1]\n            else:\n                i1 += 1\n                i2 += 1\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1 is None or arr2 is None:\n        return None\n    if len(arr1) == 0 or len(arr2) == 0:\n        return None\n    if len(arr1) == 1:\n        if k < arr1[0]:\n            return arr2[k]\n        else:\n            return arr1[0]\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    idx1 = 0\n    idx2 = 0\n    \n    while (idx1 < len(arr1) and idx2 < len(arr2)):\n        if (arr1[idx1] < arr2[idx2]):\n            idx1 += 1\n        elif (arr1[idx1] > arr2[idx2]):\n            idx2 += 1\n        else:\n            idx1 += 1\n            idx2 += 1\n        if (idx1 + idx2 == k):\n            return arr1[idx1]\n        if (idx1 + idx2 > k):\n            return arr2[idx2]\n        if (idx1 + idx2 < k):\n            return arr1[idx1]\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    #base case\n    if len(arr1) == 0:\n        return arr2[k-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1 and arr2:\n        return find_kth_recursive(arr1, arr2, k)\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1 == [] or arr2 == []:\n        return None\n    p1 = 0\n    p2 = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n    while p1 < n1 and p2 < n2:\n        if arr1[p1] < arr2[p2]:\n            if p2 == k-1:\n                return arr1[p1]\n            else:\n                p1 += 1\n                p2 += 1\n        else:\n            if p1 == k-1:\n                return arr2[p2]\n            else:\n                p1 += 1\n                p2 += 1\n    if p1 < n1:\n        return arr1[p1]\n    else:\n        return arr2[p2]\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # base case\n    if number <= 0:\n        return False\n    # recurse case\n    return number == sum(int(digit) ** 3 for digit in str(number))\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    # temp = str(number)\n    sum = 0\n    n = len(str(number))\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** n\n        temp //= 10\n    if number == sum:\n        print('Number is armstrong')\n    else:\n        print('Number is not armstrong')\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    digit_sum = 0\n    temp = number\n    while(temp > 0):\n        digit_sum += pow(temp % 10, 3)\n        temp = temp // 10\n    return number == digit_sum\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    armstrong = 0\n    for i in range(1, number + 1):\n        n = i\n        total = 0\n        while n > 0:\n            digit = n % 10\n            total = total + digit ** 3\n            n = n // 10\n        if total == i:\n            armstrong = 1\n    if armstrong == 1:\n        print('Armstrong Number')\n    else:\n        print('Not a armstrong number')\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # number = int(input(\"Enter the number:\"))\n    summation = 0\n    sumofdigits = 0\n    while number > 0:\n        sumofdigits = sumofdigits + (number % 10)**3\n        number = number // 10\n    if number == sumofdigits:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    while(temp>0):\n        digit = temp%10\n        sum += digit**3\n        temp //= 10\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    return sum([int(digit) ** len(str(number)) for digit in str(number)]) == number\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # sum = 0\n    # for i in str(number):\n    #     sum = sum + pow(int(i), 3)\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # convert number to string\n    number_str = str(number)\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    return str(number) == ''.join(list(map(lambda x: str(x ** 3), list(range(1, int(number / 3) + 1)))))\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # create a list of n natural numbers\n    n = []\n    # iterate the natural numbers\n    for i in range(1,number + 1):\n        # append the natural numbers to the list\n        n.append(i)\n    # return the sum and the average of the list\n    return sum(n), float(sum(n))/len(n)\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum, count = 0, 1\n    while count <= number:\n        sum += count\n        count += 1\n    average = sum / number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if type(number)!= int:\n        raise TypeError('number must be integer')\n    elif number < 1:\n        raise ValueError('number must be positive')\n    else:\n        total = 0\n        average = 0\n        for i in range(1, number + 1):\n            total += i\n            average += i / number\n        return total, average\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return sum(range(1,number+1)), sum(range(1,number+1))/len(range(1,number+1))\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number+1):\n        sum += i\n    return sum/number\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number == 0:\n        return 0\n    else:\n        return number + sum_average(number-1)\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    i = 0\n    total = 0\n    while i < number:\n        total += i\n        i += 1\n    print(\"sum of first %s natural numbers: %s\" % (number, total))\n    print(\"average of first %s natural numbers: %s\" % (number, total/number))\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number<1:\n        raise ValueError('Invalid Input')\n    return sum(range(1,number+1))/number\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,number+1):\n        sum += i\n    average = sum/number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    s = 0\n    for i in range(number):\n        s += i\n    return s / number\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return (n%2 == 0)\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2) == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2) == 0 : \n        return True\n    else : \n        return False\n    \ndef is_Even_BruteForce(n) : \n    '''\n    Write a python function to check whether the given number is even or not using brute force.\n    '''\n    if is_Even(n) : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2 == 0) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    # if n == 0 : \n    #     return True\n    # elif n % 2 == 1 : \n    #     return False\n    # else : \n    #     return True\n    if n == 0 : \n        return True\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2) == 0 : \n        return True\n    else : \n        return False\n    \ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    # Special case for 0, negative numbers, and 1\n    if n == 2 or n == 3 : \n        return True\n    elif n < 2 or n % 2 == 0 : \n        return False\n    # n is now assumed to be an odd number greater than 2\n    return sum(map(lambda x : n % x, range(3, int(n**0.5)+1, 2))) == 0\n    \ndef fib(n) : \n    '''\n    Write a python function to compute the nth Fibonacci number.\n    '''\n    # base cases\n    if n == 0 or n == 1 : \n        return 1\n    else : \n        return fib(n-1) + fib(n-2)\n    \ndef factorial(n) : \n    '''\n    Write a python function to compute the nth factorial number.\n    '''\n    # base cases\n    if n == 0 or n == 1 : \n        return 1\n    else : \n        return n * factorial(n-1)\n    \ndef factorial_modulo(n, m) : \n    '''\n    Write a python function to compute the mth modulo factorial number.\n    '''\n    # base cases\n    if n == 0 or n == 1 : \n        return 1\n    else : \n        return (factorial(n) % m)\n    \ndef fib_mod(n, m) : \n    '''\n    Write a python function to compute the nth modulo fibonacci number.\n    '''\n    # base cases\n    if n == 0 or n == 1 : \n        return 1\n    else : \n        return (fib(n) % m)\n    \ndef is_Pandigital(n) : \n    '''\n    Write a python function to check whether the given number is pandigital or not.\n    '''\n    # base cases\n    if len(set(str(n))) == 9 : \n        return True\n    return False\n    \ndef is_Pandigital_list(l) : \n    '''\n    Write a python function to check whether the given list is pandigital or not.\n    '''\n    # base cases\n    if len(set(l)) == 9 : \n        return True\n    return False\n    \ndef is_Pandigital_string(s) : \n    '''\n    Write a python function to check whether the given string is pandigital or not.\n    '''\n    # base cases\n    if len(set(s)) == 9 : \n        return True\n    return False\n    \ndef palindrome(n) : \n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    # base cases\n    if n == 0 : \n        return True\n    elif n == 1 : \n        return True\n    elif n < 0 : \n        return False\n    # let's do some maths \n    n = str(n)\n    for i in range(len(n)/2) : \n        if n[i]!= n[-1*(i+1)] : \n            return False\n    return True\n    \ndef is_perfect(n) : \n    '''\n    Write a python function to check whether the given number is perfect or not.\n    '''\n    # base cases\n    if n == 1 : \n        return True\n    elif n < 1 : \n        return False\n    # let's do some maths \n    s = 0\n    for i in range(1, n) : \n        if n % i == 0 : \n            s += i\n    if s == n : \n        return True\n    return False\n    \ndef is_perfect_number(n) : \n    '''\n    Write a python function to check whether the given number is perfect or not.\n    '''\n    # base cases\n    if n == 1 : \n        return True\n    elif n < 1 : \n        return False\n    # let's do some maths \n    s = 0\n    for i in range(1, n) : \n        if n % i == 0 : \n            s += i\n    if s == n : \n        return True\n    return False\n    \ndef is_perfect_number_list(l) : \n    '''\n    Write a python function to check whether the given list of numbers is perfect or not.\n    '''\n    # base cases\n    if len(l) == 0 : \n        return True\n    elif len(l) == 1 : \n        return True\n    # let's do some maths \n    s = 0\n    for i in l : \n        s += i\n    if s == l[0] * len(l) : \n        return True\n    return False\n    \ndef is_perfect_number_string(s) : \n    '''\n    Write a python function to check whether the given string is perfect number or not.\n    '''\n    # base cases\n    if len(s) == 0 : \n        return True\n    elif len(s) == 1 : \n        return True\n    # let's do some maths \n    s = int(s)\n    s = str(s)\n    l = list(s)\n    s = 0\n    for i in l : \n        s += int(i)\n    if s == int(l[0] * len(l)) : \n        return True\n    return False\n    \ndef is_perfect_number_list_modulo(l, m) : \n    '''\n    Write a python function to check whether the given list of numbers is perfect modulo m or not.\n    '''\n    # base cases\n    if len(l) == 0 : \n        return True\n    elif len(l) == 1 : \n        return True\n    # let's do some maths \n    s = 0\n    for i in l : \n        s += i\n    if s % m == l[0] : \n        return True\n    return False\n    \ndef is_perfect_number_string_modulo(s, m) : \n    '''\n    Write a python function to check whether the given string is perfect modulo m or not.\n    '''\n    # base cases\n    if len(s) == 0 : \n        return True\n    elif len(s) == 1 : \n        return True\n    # let's do some maths \n    s = int(s)\n    s = str(s)\n    l = list(s)\n    s = 0\n    for i in l : \n        s += int(i)\n    if s % m == int(l[0] * len(l)) : \n        return True\n    return False\n    \ndef is_perfect_number_modulo_list(l, m) : \n    '''\n    Write a python function to check whether the given list of numbers is perfect modulo m or not.\n    '''\n    # base cases\n    if len(l) == 0 : \n        return True\n    elif len(l) == 1 : \n        return True\n    # let's do some maths \n    s = 0\n    for i in l : \n        s += i\n    if s % m == l[0] : \n        return True\n    return False\n    \ndef is_perfect_number_modulo_string(s, m) : \n    '''\n    Write a python function to check whether the given string is perfect modulo m or not.\n    '''\n    # base cases\n    if len(s) == 0 : \n        return True\n    elif len(s) == 1 : \n        return True\n    # let's do some maths \n    s = int(s)\n    s = str(s)\n    l = list(s)\n    s = 0\n    for i in l : \n        s += int(i)\n    if s % m == int(l[0] * len(l)) : \n        return True\n    return False\n    \ndef is_perfect_number_string_modulo(s, m) : \n    '''\n    Write a python function to check whether the given string is perfect modulo m or not.\n    '''\n    # base cases\n    if len"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    else :\n        return False\n    \ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n == 1 : \n        return False\n    for i in range(2, n) :\n        if n%i == 0 :\n            return False\n    return True\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a map to store the number of occurrences of each character\n    map = {}\n    for i in str1:\n        if i in map:\n            map[i] += 1\n        else:\n            map[i] = 1\n    \n    # Find the index of the first repeated character\n    for i in range(len(str1)):\n        if map[str1[i]] > 1:\n            return i\n    \n    # If no repeated character is found, return -1\n    return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    count = {}\n    for i in str1:\n        if i not in count:\n            count[i]=0\n        else:\n            count[i]+=1\n            break\n    if count[i] > 1:\n        return i\n    else:\n        return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_map = {}\n    for char in str1:\n        if char in char_map:\n            return char\n        else:\n            char_map[char] = 1\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dict1 = {}\n    for char in str1:\n        if char in dict1:\n            return char\n        else:\n            dict1[char] = 1\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char) > 1:\n            return char\n            break\n    return 'no repeated char'\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n    return 'No duplicates'\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if len(str1) == 0:\n        return -1\n    return str1[0] + str1[1:].replace(str1[0], '', 1)\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    list1 = []\n    dict1 = {}\n    for i in str1:\n        if i not in dict1:\n            dict1[i] = 1\n        else:\n            dict1[i] = dict1[i] + 1\n    for k,v in dict1.iteritems():\n        if v == 1:\n            return k\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for c in str1:\n        if str1.count(c) > 1:\n            return c\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dict1 = {}\n    for s in str1:\n        if s in dict1:\n            return s\n        else:\n            dict1[s] = True\n    return None\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1,2]\n    elif n == 3:\n        return [1,2,3]\n    elif n == 4:\n        return [1,2,3,4]\n    else:\n        ludic_list = [1,2,3,4]\n        #Even length\n        if n%2 == 0:\n            ludic_list.extend(get_ludic(n/2))\n            ludic_list.extend(get_ludic(n/2))\n            return ludic_list\n        #Odd length\n        else:\n            ludic_list.extend(get_ludic(n/2))\n            ludic_list.extend(get_ludic((n+1)/2))\n            return ludic_list\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_nums = [2, 3]\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 4:\n        return [n]\n    ludics = [2, 3]\n    n -= 2\n    while True:\n        if len(ludics) > 1 and ludics[-1] < n / 2:\n            break\n        ludics += [ludics[-1] + 2, ludics[-1] + 3]\n        n -= ludics[-1]\n    ludics = sorted(ludics)\n    result = ludics[-1] + n\n    return [result, ludics[-2]]\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # from math import ceil, log, sqrt\n    # from decimal import Decimal\n    # lucid_limit = ceil(Decimal(sqrt(n))*1.1)\n    # print lucid_limit\n    ludic_list = [2]\n    prime_list = [2]\n    max_prime = 2\n    while len(ludic_list) < n:\n        if max_prime in prime_list:\n            max_prime += 1\n            continue\n        else:\n            for i in prime_list:\n                max_prime += 1\n                if max_prime % i == 0:\n                    break\n            else:\n                ludic_list.append(max_prime)\n                prime_list.append(max_prime)\n    return ludic_list[:n]\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 3:\n        return [n]\n    l = [1]\n    while len(l) < n:\n        l = list(map(lambda x: x**2 + l[-1]**2, l))\n        l = filter(lambda x: x <= n, l)\n    return list(l)\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(2,n+1):\n        sqr = i*i\n        if is_ludic(sqr):\n            ludic.append(sqr)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    l = []\n    for i in xrange(2, n):\n        if is_ludic(i):\n            l.append(i)\n    return l\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 4:\n        return [n]\n    else:\n        return get_ludic(n-1) + [n-1] + get_ludic(n-2)\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(n):\n        if i == 1:\n            lucids.append(1)\n        else:\n            if i % 2 == 0:\n                lucids.append(2 * i)\n            else:\n                lucids.append(3 * i + 1)\n    return lucids\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 3:\n        return [1]\n    if n == 3:\n        return [2,1,1]\n    ludics = []\n    for i in range(2, n):\n        if is_ludic(i):\n            ludics.append(i)\n    return ludics\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split(' ')\n    print(s)\n    s.reverse()\n    print(s)\n    s =''.join(s)\n    print(s)\n    return s\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    \n    def reverse_word(s, reverse_count):\n        if reverse_count == len(s):\n            return s\n        reverse_char(s, reverse_count)\n        if s[reverse_count] =='':\n            return reverse_word(s, reverse_count+1)\n        else:\n            return reverse_word(s, reverse_count+1)\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(list(reversed(s.split(' '))))\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words = [word[::-1] for word in words]\n    return''.join(words)\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    def reverse_words_helper(s, start, end):\n        while start < end:\n            s[start], s[end] = s[end], s[start]\n            start += 1\n            end -= 1\n    reverse_words_helper(s, 0, len(s) - 1)\n    start = 0\n    while start < len(s) - 1:\n        if s[start] =='':\n            reverse_words_helper(s, start + 1, end)\n            start += 1\n        end += 1\n    reverse_words_helper(s, 0, len(s) - 1)\n    return ''.join(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if len(s) < 2:\n        return s\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    return''.join(reversed(words))\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num<2:\n        return False\n    else:\n        for i in range(2,num):\n            if num%i==0:\n                return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num**(0.5))+1, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    flag = True\n    for i in range(2, num):\n        if num % i == 0:\n            flag = False\n            break\n    return flag\n    \ndef prime_num_list(num):\n    '''\n    Write a function to return a list of all the prime numbers\n    below the given integer.\n    '''\n    prime_list = []\n    for i in range(2, num):\n        if prime_num(i):\n            prime_list.append(i)\n    return prime_list\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    #Since all the numbers are divisible by either 1 or themselves\n    #we can skip the even numbers\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num == 2 or num == 3:\n        return True\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n    else:\n        return all(num % x for x in range(5, int(math.sqrt(num))+1, 6))\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef add(x, y):\n    '''\n    Write a function to add two numbers.\n    '''\n    return x + y\ndef multiply(x, y):\n    '''\n    Write a function to multiply two numbers.\n    '''\n    return x * y\ndef subtract(x, y):\n    '''\n    Write a function to subtract two numbers.\n    '''\n    return x - y\ndef div(x, y):\n    '''\n    Write a function to divide two numbers.\n    '''\n    return x / y\ndef modulus(x, y):\n    '''\n    Write a function to compute modulus of two numbers.\n    '''\n    return x % y\ndef power(x, y):\n    '''\n    Write a function to compute power of two numbers.\n    '''\n    return x ** y\ndef root(x, y):\n    '''\n    Write a function to compute root of a number.\n    '''\n    return x ** (1/y)\ndef cube(x):\n    '''\n    Write a function to compute cube of a number.\n    '''\n    return x ** 3\ndef power_function(x, y):\n    '''\n    Write a function to compute power of two numbers.\n    '''\n    return pow(x, y)\ndef logarithm(x):\n    '''\n    Write a function to compute logarithm of a number.\n    '''\n    return math.log(x)\ndef sine(x):\n    '''\n    Write a function to compute sine of a number.\n    '''\n    return math.sin(x)\ndef cosine(x):\n    '''\n    Write a function to compute cosine of a number.\n    '''\n    return math.cos(x)\ndef tangent(x):\n    '''\n    Write a function to compute tangent of a number.\n    '''\n    return math.tan(x)\ndef cot(x):\n    '''\n    Write a function to compute cotangent of a number.\n    '''\n    return 1/math.tan(x)\ndef cotangent(x):\n    '''\n    Write a function to compute cotangent of a number.\n    '''\n    return math.acos(x)\ndef arc_tan(x):\n    '''\n    Write a function to compute arc tangent of a number.\n    '''\n    return math.atan(x)\ndef inverse_power(x):\n    '''\n    Write a function to compute inverse power of a number.\n    '''\n    return 1/x\ndef square_root(x):\n    '''\n    Write a function to compute square root of a number.\n    '''\n    return x ** (1/2)\ndef square(x):\n    '''\n    Write a function to compute square of a number.\n    '''\n    return x ** 2\ndef inverse(x):\n    '''\n    Write a function to compute inverse of a number.\n    '''\n    return 1/x\ndef square_root_function(x):\n    '''\n    Write a function to compute square root of a number.\n    '''\n    return math.sqrt(x)\ndef cube_root(x):\n    '''\n    Write a function to compute cube root of a number.\n    '''\n    return x ** (1/3)\ndef e(x):\n    '''\n    Write a function to compute e of a number.\n    '''\n    return math.e ** x\ndef pi(x):\n    '''\n    Write a function to compute pi of a number.\n    '''\n    return math.pi\ndef p(x):\n    '''\n    Write a function to compute p of a number.\n    '''\n    return math.p\ndef r(x):\n    '''\n    Write a function to compute r of a number.\n    '''\n    return math.r\ndef pi_constant(x):\n    '''\n    Write a function to compute pi constant of a number.\n    '''\n    return math.pi ** x\ndef e_constant(x):\n    '''\n    Write a function to compute e constant of a number.\n    '''\n    return math.e ** x\ndef e_function(x):\n    '''\n    Write a function to compute e of a number.\n    '''\n    return math.e ** x\ndef sin_function(x):\n    '''\n    Write a function to compute sin of a number.\n    '''\n    return math.sin(x)\ndef cos_function(x):\n    '''\n    Write a function to compute cos of a number.\n    '''\n    return math.cos(x)\ndef tan_function(x):\n    '''\n    Write a function to compute tan of a number.\n    '''\n    return math.tan(x)\ndef cot_function(x):\n    '''\n    Write a function to compute cot of a number.\n    '''\n    return 1/math.tan(x)\ndef arc_tan_function(x):\n    '''\n    Write a function to compute arc tangent of a number.\n    '''\n    return math.atan(x)\ndef root_function(x):\n    '''\n    Write a function to compute root of a number.\n    '''\n    return x ** (1/2)\ndef cube_function(x):\n    '''\n    Write a function to compute cube of a number.\n    '''\n    return x ** 3\ndef power_function(x, y):\n    '''\n    Write a function to compute power of two numbers.\n    '''\n    return pow(x, y)\ndef logarithm_function(x):\n    '''\n    Write a function to compute logarithm of a number.\n    '''\n    return math.log(x)\ndef sine_function(x):\n    '''\n    Write a function to compute sine of a number.\n    '''\n    return math.sin(x)\ndef cosine_function(x):\n    '''\n    Write a function to compute cosine of a number.\n    '''\n    return math.cos(x)\ndef tangent_function(x):\n    '''\n    Write a function to compute tangent of a number.\n    '''\n    return math.tan(x)\ndef cotangent_function(x):\n    '''\n    Write a function to compute cotangent of a number.\n    '''\n    return 1/math.tan(x)\ndef arc_tan_function(x):\n    '''\n    Write a function to compute arc tangent of a number.\n    '''\n    return math.atan(x)\ndef inverse_power_function(x):\n    '''\n    Write a function to compute inverse power of a number.\n    '''\n    return 1/x\ndef square_root_function(x):\n    '''\n    Write a function to compute square root of a number.\n    '''\n    return x ** (1/2)\ndef cube_root_function(x):\n    '''\n    Write a function to compute cube root of a number.\n    '''\n    return x ** (1/3)\ndef e_function(x):\n    '''\n    Write a function to compute e of a number.\n    '''\n    return math.e ** x\ndef pi_function(x):\n    '''\n    Write a function to compute pi of a number.\n    '''\n    return math.pi ** x\ndef p_function(x):\n    '''\n    Write a function to compute p of a number.\n    '''\n    return math.p ** x\ndef r_function(x):\n    '''\n    Write a function to compute r of a number.\n    '''\n    return math.r ** x\ndef pi_constant_function(x):\n    '''\n    Write a function to compute pi constant of a number.\n    '''\n    return math.pi ** x\ndef e_constant_function(x):\n    '''\n    Write a function to compute e constant of a number.\n    '''\n    return math.e ** x\ndef e_function_function(x):\n    '''\n    Write a function to compute e of a number.\n    '''\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\ndef radian_angle(angle):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return (angle * 180) / math.pi\ndef quadrant(x, y):\n    '''\n    Write a function that takes two coordinates and returns the quadrant in which they lie.\n    '''\n    if x > 0 and y > 0:\n        return 1\n    if x < 0 and y > 0:\n        return 2\n    if x < 0 and y < 0:\n        return 3\n    if x > 0 and y < 0:\n        return 4\n    return 0\ndef triangle_area(a, b, c):\n    '''\n    Write a function to find the area of a triangle using Heron's formula.\n    '''\n    p = (a + b + c) / 2\n    return math.sqrt(p * (p - a) * (p - b) * (p - c))\ndef interval(min, max, decimals):\n    '''\n    Write a function to calculate the width of an interval.\n    '''\n    if min >= max:\n        return 0\n    return ((max - min) / 10 ** decimals)\ndef tau(n):\n    '''\n    Write a function that returns the value of the upper triangular part of an n\u00d7n upper triangular matrix.\n    '''\n    for i in xrange(n - 1):\n        for j in xrange(i + 1, n):\n            if i < j:\n                print i, j\n                print math.sqrt(((i + 1) ** 2) - ((j + 1) ** 2))\ndef pythagorean_triplet(a, b, c):\n    '''\n    Write a function that takes three numbers a, b, and c as input, and returns the triplet (a, b, c) that has the pythagorean property.\n    '''\n    for i in xrange(1, 1000):\n        for j in xrange(1, 1000):\n            if math.sqrt(i ** 2 + j ** 2) == c:\n                return i, j, c\ndef python_lang(s):\n    '''\n    Write a function that takes a string and returns a string that is the same, but with the vowels replaced by the letter x.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    for i in s:\n        if i in vowels:\n            s = s.replace(i, 'x')\n    return s\ndef quadratic_roots(a, b, c):\n    '''\n    Write a function that takes three numbers a, b, and c as input, and returns the two roots of the quadratic equation.\n    '''\n    delta = (b ** 2) - (4 * a * c)\n    if delta < 0:\n        return 'no real roots'\n    elif delta == 0:\n        return -b / (2 * a)\n    else:\n        return (-b + math.sqrt(delta)) / (2 * a), (-b - math.sqrt(delta)) / (2 * a)\ndef smallest_of_three(a, b, c):\n    '''\n    Write a function that takes three numbers a, b, and c as input and returns the smallest of them.\n    '''\n    return a if a < b and a < c else b if b < a and b < c else c\ndef largest_of_three(a, b, c):\n    '''\n    Write a function that takes three numbers a, b, and c as input and returns the largest of them.\n    '''\n    return a if a > b and a > c else b if b > a and b > c else c\ndef pi(n):\n    '''\n    Write a function that returns the value of pi to n decimal places.\n    '''\n    return 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\ndef reverse_string(s):\n    '''\n    Write a function to reverse a string.\n    '''\n    return s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return s == s[::-1]\ndef rot13(s):\n    '''\n    Write a function to encode and decode a string using the ROT13 cipher.\n    '''\n    return ''.join(map(lambda x: chr(ord(x) + 13), s))\ndef find_triplet(s):\n    '''\n    Write a function that returns the position of the first term that is not in ascending order.\n    '''\n    for i in xrange(len(s) - 1):\n        for j in xrange(i + 1, len(s)):\n            if s[i] > s[j]:\n                return i, j\n    return 'there are no bad words'\ndef over_under_one(n):\n    '''\n    Write a function that takes a number as input and returns the number over 1 or below 1.\n    '''\n    return abs(n) if n < 1 else 1 - abs(n)\ndef minimum_of_three(a, b, c):\n    '''\n    Write a function that takes three numbers a, b, and c as input and returns the smallest of them.\n    '''\n    return a if a < b and a < c else b if b < a and b < c else c\ndef max_of_three(a, b, c):\n    '''\n    Write a function that takes three numbers a, b, and c as input and returns the largest of them.\n    '''\n    return a if a > b and a > c else b if b > a and b > c else c\ndef shuffle_strings(s1, s2):\n    '''\n    Write a function to shuffle two strings together.\n    '''\n    s1, s2 = list(s1), list(s2)\n    for i in xrange(len(s1)):\n        s2[i] = s1[i]\n    return ''.join(s2)\ndef make_pig_latin(s):\n    '''\n    Write a function to convert a string to pig latin.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if s[0] in vowels:\n        return s + 'yay'\n    else:\n        return s[1:] + s[0] + 'ay'\ndef triple_trouble(s1, s2, s3):\n    '''\n    Write a function that takes three strings as input and returns a string that is the first string repeated three times the second string.\n    '''\n    return s1 * 3 + s2\ndef palindrome_permutation(s):\n    '''\n    Write a function to check if a string is a permutation of a palindrome.\n    '''\n    return sorted(s) == sorted(s)[::-1]\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    return n > 1 and all(n % i for i in xrange(2, n))\ndef xor_cipher(s, k):\n    '''\n    Write a function to encode a string using the XOR cipher.\n    '''\n    return ''.join(map(lambda x: chr(ord(x) ^ ord(k)), s))\ndef eval_pow(x, y):\n    '''\n    Write a function to calculate the power of a number.\n    '''\n    return x ** y\ndef is_prime_number(n):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    return is_prime(n)\ndef sqrt(n):\n    '''\n    Write a function to find the square root of a number.\n    '''\n    return n ** 0.5\ndef is_prime_number(n):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    return n > 1 and all(n % i for i in xrange(2, n))\ndef pythagorean_triplet(a, b, c):\n    '''\n    Write a function that takes three numbers a, b, and c as input and return"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef radian_degree_list(degree_list):\n    return [radian_degree(deg) for deg in degree_list]\ndef gps_to_spherical(gps_list):\n    '''\n    Write a function to convert GPS coordinates to spherical\n    coordinates (also known as geodetic coordinates)\n    Input: a list of [latitude, longitude, altitude] in radians\n    Output: a list of [radius, theta, phi]\n    '''\n    #convert GPS to ENU\n    lat_r, lon_r, alt_r = gps_list[0], gps_list[1], gps_list[2]\n    x, y, z = math.cos(lat_r) * math.cos(lon_r), math.cos(lat_r) * math.sin(lon_r), math.sin(lat_r)\n    return [x, y, z]\ndef gps_to_cartesian(gps_list):\n    '''\n    Write a function to convert GPS coordinates to cartesian coordinates.\n    Input: a list of [latitude, longitude, altitude] in radians\n    Output: a list of [radius, theta, phi]\n    '''\n    #convert GPS to ENU\n    lat_r, lon_r, alt_r = gps_list[0], gps_list[1], gps_list[2]\n    x, y, z = math.cos(lat_r) * math.cos(lon_r), math.cos(lat_r) * math.sin(lon_r), math.sin(lat_r)\n    return [x, y, z]\ndef gps_to_geographic(gps_list):\n    '''\n    Write a function to convert GPS coordinates to geographic coordinates.\n    Input: a list of [radius, theta, phi]\n    Output: a list of [latitude, longitude, altitude] in radians\n    '''\n    #convert GPS to ENU\n    lat_r, lon_r, alt_r = gps_list[0], gps_list[1], gps_list[2]\n    #latitude = math.asin(math.sin(lat_r) * math.cos(alt_r))\n    #longitude = math.atan2(math.sin(lon_r) * math.cos(alt_r), math.cos(lat_r) - math.sin(lat_r) * math.sin(alt_r))\n    latitude = math.asin(math.sin(lat_r) * math.cos(alt_r))\n    longitude = math.atan2(math.sin(lon_r) * math.cos(alt_r), math.cos(lat_r) - math.sin(lat_r) * math.sin(alt_r))\n    return [latitude, longitude, alt_r]\ndef cartesian_to_spherical(cartesian_list):\n    '''\n    Write a function to convert cartesian coordinates to spherical\n    coordinates (also known as geodetic coordinates)\n    Input: a list of [x, y, z]\n    Output: a list of [radius, theta, phi]\n    '''\n    #convert GPS to ENU\n    x, y, z = cartesian_list[0], cartesian_list[1], cartesian_list[2]\n    # radius = math.sqrt(x**2 + y**2 + z**2)\n    # theta = math.acos(z / radius)\n    # phi = math.atan2(y, x)\n    radius = math.sqrt(x**2 + y**2)\n    return [radius, math.atan2(y, x), math.atan2(z, radius)]\ndef spherical_to_cartesian(spherical_list):\n    '''\n    Write a function to convert spherical coordinates to cartesian coordinates.\n    Input: a list of [radius, theta, phi]\n    Output: a list of [x, y, z]\n    '''\n    #convert GPS to ENU\n    radius, theta, phi = spherical_list[0], spherical_list[1], spherical_list[2]\n    return [radius * math.cos(theta) * math.cos(phi), radius * math.cos(theta) * math.sin(phi), radius * math.sin(theta)]\ndef cartesian_to_geographic(cartesian_list):\n    '''\n    Write a function to convert cartesian coordinates to geographic coordinates.\n    Input: a list of [x, y, z]\n    Output: a list of [latitude, longitude, altitude] in radians\n    '''\n    #convert GPS to ENU\n    x, y, z = cartesian_list[0], cartesian_list[1], cartesian_list[2]\n    # latitude = math.asin(z / radius)\n    # longitude = math.atan2(y, x)\n    # radius = math.sqrt(x**2 + y**2 + z**2)\n    latitude = math.asin(z / math.sqrt(x**2 + y**2 + z**2))\n    longitude = math.atan2(y, x)\n    return [latitude, longitude, z]\ndef spherical_to_cartesian(spherical_list):\n    '''\n    Write a function to convert spherical coordinates to cartesian coordinates.\n    Input: a list of [radius, theta, phi]\n    Output: a list of [x, y, z]\n    '''\n    #convert GPS to ENU\n    radius, theta, phi = spherical_list[0], spherical_list[1], spherical_list[2]\n    return [radius * math.cos(theta) * math.cos(phi), radius * math.cos(theta) * math.sin(phi), radius * math.sin(theta)]\ndef spherical_to_gps(spherical_list):\n    '''\n    Write a function to convert spherical coordinates to GPS coordinates.\n    Input: a list of [radius, theta, phi]\n    Output: a list of [latitude, longitude, altitude] in radians\n    '''\n    #convert GPS to ENU\n    radius, theta, phi = spherical_list[0], spherical_list[1], spherical_list[2]\n    return [radius * math.asin(math.sin(theta) * math.cos(phi)), radius * math.atan2(math.sin(phi), math.cos(phi)), radius * math.asin(math.sin(theta))]\ndef cartesian_to_spherical(cartesian_list):\n    '''\n    Write a function to convert cartesian coordinates to spherical\n    coordinates (also known as geodetic coordinates)\n    Input: a list of [x, y, z]\n    Output: a list of [radius, theta, phi]\n    '''\n    #convert GPS to ENU\n    x, y, z = cartesian_list[0], cartesian_list[1], cartesian_list[2]\n    # radius = math.sqrt(x**2 + y**2 + z**2)\n    # theta = math.acos(z / radius)\n    # phi = math.atan2(y, x)\n    radius = math.sqrt(x**2 + y**2)\n    return [radius, math.atan2(y, x), math.atan2(z, radius)]\ndef lat_long_alt_to_spherical(lat_long_alt):\n    '''\n    Write a function to convert [latitude, longitude, altitude] to spherical\n    coordinates (also known as geodetic coordinates)\n    Input: a list of [latitude, longitude, altitude] in radians\n    Output: a list of [radius, theta, phi]\n    '''\n    #convert GPS to ENU\n    lat, lon, alt = lat_long_alt[0], lat_long_alt[1], lat_long_alt[2]\n    x, y, z = math.cos(lat) * math.cos(lon), math.cos(lat) * math.sin(lon), math.sin(lat)\n    return [x, y, z]\ndef lat_long_alt_to_cartesian(lat_long_alt):\n    '''\n    Write a function to convert [latitude, longitude, altitude] to cartesian\n    coordinates"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree/180\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    pi=math.pi\n    radian=pi*(degree/180)\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef radians_degree(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180 / math.pi\ndef ln(x):\n    '''\n    Write a function to compute the logarithm of x to base 2.\n    '''\n    return math.log(x)\ndef ln2(x):\n    '''\n    Write a function to compute the logarithm of x to base 2.\n    '''\n    return math.log2(x)\ndef e(x):\n    '''\n    Write a function to compute the e to power x.\n    '''\n    return math.exp(x)\ndef s(x):\n    '''\n    Write a function to compute the sine of x.\n    '''\n    return math.sin(radian_degree(x))\ndef c(x):\n    '''\n    Write a function to compute the cosine of x.\n    '''\n    return math.cos(radian_degree(x))\ndef t(x):\n    '''\n    Write a function to compute the tangent of x.\n    '''\n    return math.tan(radian_degree(x))\ndef arctan(x):\n    '''\n    Write a function to compute the arc tangent of x.\n    '''\n    return math.atan(x)\ndef arcctan(x):\n    '''\n    Write a function to compute the arc tangent of x in radians.\n    '''\n    return radians_degree(arctan(x))\ndef arcsin(x):\n    '''\n    Write a function to compute the arc sine of x.\n    '''\n    return math.asin(x)\ndef arcsinh(x):\n    '''\n    Write a function to compute the inverse hyperbolic sine of x.\n    '''\n    return math.asinh(x)\ndef arccosh(x):\n    '''\n    Write a function to compute the inverse hyperbolic cosine of x.\n    '''\n    return math.acosh(x)\ndef arccot(x):\n    '''\n    Write a function to compute the inverse hyperbolic tangent of x.\n    '''\n    return math.atan(1/x)\ndef arccoth(x):\n    '''\n    Write a function to compute the inverse hyperbolic tangent of x.\n    '''\n    return math.atan(1/x)\ndef arctanh(x):\n    '''\n    Write a function to compute the inverse hyperbolic tangent of x.\n    '''\n    return math.atanh(x)\ndef beta(a,b):\n    '''\n    Write a function to compute the beta function of a and b.\n    '''\n    return math.gamma(a) * math.gamma(b) / math.gamma(a+b)\ndef gammainc(a,x):\n    '''\n    Write a function to compute the incomplete gamma function of a and x.\n    '''\n    return math.gammainc(a,x)\ndef gammaincinv(a,y):\n    '''\n    Write a function to compute the inverse of the incomplete gamma function of a and x.\n    '''\n    return math.gammaincinv(a,y)\ndef zeta(x):\n    '''\n    Write a function to compute the Riemann zeta function of x.\n    '''\n    return math.zeta(x)\ndef riemannzeta(s):\n    '''\n    Write a function to compute the Riemann zeta function of s.\n    '''\n    return math.zeta(s)\ndef eulerphi(x):\n    '''\n    Write a function to compute the Euler's Phi function of x.\n    '''\n    return math.exp(x-1) * (x + 1) / 2\ndef eulernumphi(n):\n    '''\n    Write a function to compute the Euler's Phi function of n.\n    '''\n    return math.exp(n) * (n + 1) / 2\ndef digamma(x):\n    '''\n    Write a function to compute the digamma function of x.\n    '''\n    return math.digamma(x)\ndef digammainv(y):\n    '''\n    Write a function to compute the inverse of the digamma function of y.\n    '''\n    return math.digamma(y)\ndef gamma(x):\n    '''\n    Write a function to compute the gamma function of x.\n    '''\n    return math.gamma(x)\ndef gammainv(x):\n    '''\n    Write a function to compute the inverse of the gamma function of x.\n    '''\n    return math.gammainv(x)\ndef gammaprod(a,b):\n    '''\n    Write a function to compute the gamma function of a and b.\n    '''\n    return math.gamma(a) * math.gamma(b)\ndef pochhammer(a,b):\n    '''\n    Write a function to compute the Pochhammer symbol (a.k.a. beta function) of a and b.\n    '''\n    return math.gamma(a) * math.gamma(b) / math.gamma(a+b)\ndef sign(x):\n    '''\n    Write a function to compute the sign of x.\n    '''\n    return math.copysign(1,x)\ndef fabs(x):\n    '''\n    Write a function to compute the absolute value of x.\n    '''\n    return math.fabs(x)\ndef fmod(x,y):\n    '''\n    Write a function to compute the remainder of x / y.\n    '''\n    return math.fmod(x,y)\ndef fsum(x):\n    '''\n    Write a function to compute the sum of the first n terms of the sequence x.\n    '''\n    return math.fsum(x)\ndef fsum1(x):\n    '''\n    Write a function to compute the sum of the first n terms of the sequence x.\n    '''\n    return math.fsum(x[:1])\ndef fsum2(x,n):\n    '''\n    Write a function to compute the sum of the first n terms of the sequence x.\n    '''\n    return math.fsum(x[:n])\ndef fsum3(x,n):\n    '''\n    Write a function to compute the sum of the first n terms of the sequence x.\n    '''\n    return math.fsum(x[:n])\ndef fsum4(x,n):\n    '''\n    Write a function to compute the sum of the first n terms of the sequence x.\n    '''\n    return math.fsum(x[:n])\ndef fsum5(x,n):\n    '''\n    Write a function to compute the sum of the first n terms of the sequence x.\n    '''\n    return math.fsum(x[:n])\ndef fsum6(x,n):\n    '''\n    Write a function to compute the sum of the first n terms of the sequence x.\n    '''\n    return math.fsum(x[:n])\ndef fsum7(x,n):\n    '''\n    Write a function to compute the sum of the first n terms of the sequence x.\n    '''\n    return math.fsum(x[:n])\ndef fsum8(x,n):\n    '''\n    Write a function to compute the sum of the first n terms of the sequence x.\n    '''\n    return math.fsum(x[:n])\ndef fsum9(x,n):\n    '''\n    Write a function to compute the sum of the first n terms of the sequence x.\n    '''\n    return math.fsum(x[:n])\ndef fsum10(x,n):\n    '''\n    Write a function to compute the sum of the first n terms of the sequence x.\n    '''\n    return math.fsum(x[:n])\ndef fsum11(x,n):\n    '''\n    Write a function to compute the sum of the first n terms of the sequence x.\n    '''\n    return math.fsum(x[:n])\ndef fsum12(x,n):\n    '''\n    Write a function to compute the sum o"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return re.search(pattern, text).group(), re.search(pattern, text).start(), re.search(pattern, text).end()\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start = text.find(pattern)\n    end = start + len(pattern)\n    return text[start:end]\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern_match = pattern.search(text)\n    if pattern_match:\n        start = pattern_match.start()\n        end = pattern_match.end()\n        return text[start:end], start, end\n    return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern_index = 0\n    start_index = 0\n    end_index = 0\n    start_index_of_next = 0\n    end_index_of_next = 0\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pos = text.find(pattern)\n    while pos >= 0:\n        print('Found \"{}\" at index {}'.format(pattern, pos))\n        pos = text.find(pattern, pos+1)\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        # Do something with the match object\n        # print match.start()\n        # print match.end()\n        # print match.group()\n        # print match.span()\n        return (match.start(), match.end(), match.group())\n    else:\n        # print \"NONE\"\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    literal = re.search(pattern, text)\n    print literal.group()\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start_index = text.find(pattern)\n    end_index = start_index + len(pattern)\n    return text[start_index:end_index], start_index, end_index\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    literal_regex = re.compile(pattern)\n    match = literal_regex.search(text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = list()\n    for m in re.finditer(pattern, text):\n        matches.append(m)\n    return matches\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n > 1:\n        return int(round(n*((1+(1/3))**n-1)/((1+(1/3))**n-1)/3)))\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    return n * factorial(n - 1)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * bell_Number(n-1)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    b = [0] * (n + 1)\n    b[0] = 1\n    for i in range(1,n + 1):\n        for j in range(1,i + 1):\n            b[i] += b[j - 1] * b[i - j]\n    return b[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * bell_Number(n - 1)\n    \n    \ndef fib_Number(n):\n    '''\n    Write a python function to find nth fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib_Number(n - 1) + fib_Number(n - 2)\n    \n    \ndef factorial(n):\n    '''\n    Write a python function to find nth factorial.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n    \n    \ndef power(n, p):\n    '''\n    Write a python function to find nth power.\n    '''\n    if p == 0:\n        return 1\n    elif p == 1:\n        return n\n    else:\n        return n * power(n, p - 1)\n    \n    \ndef convert_to_words(n):\n    '''\n    Write a python function to convert a given number into words.\n    '''\n    if n == 0:\n        return 'Zero'\n    elif n == 1:\n        return 'One'\n    elif n == 2:\n        return 'Two'\n    elif n == 3:\n        return 'Three'\n    elif n == 4:\n        return 'Four'\n    elif n == 5:\n        return 'Five'\n    elif n == 6:\n        return 'Six'\n    elif n == 7:\n        return 'Seven'\n    elif n == 8:\n        return 'Eight'\n    elif n == 9:\n        return 'Nine'\n    else:\n        return convert_to_words(n - 10) + 'teen'\n    \n    \ndef convert_to_words(n):\n    '''\n    Write a python function to convert a given number into words.\n    '''\n    if n == 0:\n        return 'Zero'\n    elif n == 1:\n        return 'One'\n    elif n == 2:\n        return 'Two'\n    elif n == 3:\n        return 'Three'\n    elif n == 4:\n        return 'Four'\n    elif n == 5:\n        return 'Five'\n    elif n == 6:\n        return 'Six'\n    elif n == 7:\n        return 'Seven'\n    elif n == 8:\n        return 'Eight'\n    elif n == 9:\n        return 'Nine'\n    else:\n        return convert_to_words(n - 10) + 'teen'\n    \n    \ndef pytha_triangle_row(n):\n    '''\n    Write a python function to find nth row of pytha triangle.\n    '''\n    row = [1]\n    for i in range(1, n):\n        row.append(row[i - 1] + row[i])\n    return row\n    \n    \ndef pytha_triangle_row(n):\n    '''\n    Write a python function to find nth row of pytha triangle.\n    '''\n    row = [1]\n    for i in range(1, n):\n        row.append(row[i - 1] + row[i])\n    return row\n    \n    \ndef pytha_triangle_row(n):\n    '''\n    Write a python function to find nth row of pytha triangle.\n    '''\n    row = [1]\n    for i in range(1, n):\n        row.append(row[i - 1] + row[i])\n    return row\n    \n    \ndef pytha_triangle_row(n):\n    '''\n    Write a python function to find nth row of pytha triangle.\n    '''\n    row = [1]\n    for i in range(1, n):\n        row.append(row[i - 1] + row[i])\n    return row\n    \n    \ndef pytha_triangle_row(n):\n    '''\n    Write a python function to find nth row of pytha triangle.\n    '''\n    row = [1]\n    for i in range(1, n):\n        row.append(row[i - 1] + row[i])\n    return row\n    \n    \ndef pytha_triangle_row(n):\n    '''\n    Write a python function to find nth row of pytha triangle.\n    '''\n    row = [1]\n    for i in range(1, n):\n        row.append(row[i - 1] + row[i])\n    return row\n    \n    \ndef pytha_triangle_row(n):\n    '''\n    Write a python function to find nth row of pytha triangle.\n    '''\n    row = [1]\n    for i in range(1, n):\n        row.append(row[i - 1] + row[i])\n    return row\n    \n    \ndef pytha_triangle_row(n):\n    '''\n    Write a python function to find nth row of pytha triangle.\n    '''\n    row = [1]\n    for i in range(1, n):\n        row.append(row[i - 1] + row[i])\n    return row\n    \n    \ndef pytha_triangle_row(n):\n    '''\n    Write a python function to find nth row of pytha triangle.\n    '''\n    row = [1]\n    for i in range(1, n):\n        row.append(row[i - 1] + row[i])\n    return row\n    \n    \ndef pytha_triangle_row(n):\n    '''\n    Write a python function to find nth row of pytha triangle.\n    '''\n    row = [1]\n    for i in range(1, n):\n        row.append(row[i - 1] + row[i])\n    return row\n    \n    \ndef pytha_triangle_row(n):\n    '''\n    Write a python function to find nth row of pytha triangle.\n    '''\n    row = [1]\n    for i in range(1, n):\n        row.append(row[i - 1] + row[i])\n    return row\n    \n    \ndef pytha_triangle_row(n):\n    '''\n    Write a python function to find nth row of pytha triangle.\n    '''\n    row = [1]\n    for i in range(1, n):\n        row.append(row[i - 1] + row[i])\n    return row\n    \n    \ndef pytha_triangle_row(n):\n    '''\n    Write a python function to find nth row of pytha triangle.\n    '''\n    row = [1]\n    for i in range(1, n):\n        row.append(row[i - 1] + row[i])\n    return row\n    \n    \ndef pytha_triangle_row(n):\n    '''\n    Write a python function to find nth row of pytha triangle.\n    '''\n    row = [1]\n    for i in range(1, n):\n        row.append(row[i - 1] + row[i])\n    return row\n    \n    \ndef pytha_triangle_row(n):\n    '''\n    Write a python function to find nth row of pytha triangle.\n    '''\n    row = [1]\n    for i in range(1, n):\n        row.append(row[i - 1] + row[i])\n    return row\n    \n    \ndef pytha_triangle_row(n):\n    '''\n    Write a python function to find nth row of pytha triangle.\n    '''\n    row = [1]\n    for i in range(1, n):\n        row.append(row[i - 1] + row[i])\n    return row\n    \n    \ndef pytha_triangle_row(n):\n    '''\n    Write a python function to find nth row of pytha triangle.\n    '''\n    row = [1]\n    for i in range(1, n):\n        row.append(row[i - 1] + row[i])\n    return row\n    \n    \ndef pyth"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    a = [[0 for x in range(n)] for x in range(n)]\n    for i in range(n):\n        a[i][0] = 1\n    for i in range(1, n):\n        for j in range(i, n):\n            a[j][i] = j * a[j - 1][i - 1]\n    return a[n - 1][n - 1]\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return (((((2*n)-1)*((2*n)-3))/2)*n)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n - 1) * bell_Number(n - 1) + bell_Number(n - 2)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return int((((1 + (5 ** 0.5)) / 2) ** n) / (((1 + (5 ** 0.5)) / 2) ** n) / (5 ** 0.5)) \n    \ndef factorial(n):\n    '''\n    Write a python function to find nth factorial.\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact *= i\n    return fact\n    \ndef fibonacci(n):\n    '''\n    Write a python function to find nth fibonacci number.\n    '''\n    fib = [1,1]\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        for i in range(2,n):\n            fib.append(fib[i-1] + fib[i-2])\n        return fib[n-1]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # remove kth element from the list\n    return list1[:L]+list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # return [x for i,x in enumerate(list1) if i!= L]\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[0:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    l1 = list1.copy()\n    l1.pop(L)\n    return l1\n    "
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    result = []\n    for i in range(0, len(list1)):\n        if i!= L:\n            result.append(list1[i])\n    return result\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]\n    "
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) < L:\n        print \"Your list is empty, or your element does not exist in your list\"\n    else:\n        newList = []\n        for i in list1:\n            if i!= list1[L]:\n                newList.append(i)\n        return newList\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) == 0:\n        return []\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(x[N-1] for x in test_list)\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    #if N is bigger than the number of columns, return the number of columns\n    if N > len(test_list):\n        N = len(test_list)\n    #create a new list of n-sized lists\n    new_list = [[0 for x in range(0,N)] for y in range(0,len(test_list))]\n    #loop through the test_list and populate the new_list with the maxes\n    for i in range(0,len(test_list)):\n        for j in range(0,N):\n            new_list[i][j] = max(test_list[i])\n    #return the max of then'th column\n    return max(new_list[i])\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        max_val = max(max_val, row[N-1])\n    return max_val\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    col = N\n    max = test_list[0][col]\n    for i in range(len(test_list)):\n        if test_list[i][col] > max:\n            max = test_list[i][col]\n    return max\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N > len(test_list) or N <= 0:\n        return -1\n    \n    return max([elem[N-1] for elem in test_list])\n    \n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(map(max, zip(*test_list)[N]))\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(x[N] for x in test_list)\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    print max([test_list[i][N-1] for i in range(len(test_list))])\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_elements = []\n    for row in test_list:\n        max_elements.append(row[N - 1])\n    return max(max_elements)\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    # max_val = 0\n    # for i in range(len(test_list)):\n    #     if test_list[i][N-1] > max_val:\n    #         max_val = test_list[i][N-1]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst.sort(key = lambda x: x[0])\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append([lst[i][0],lst[i][1]])\n    return new_lst\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst2=[]\n    for i in lst:\n        lst2.append(i[0])\n        lst2.append(i[1])\n    return lst2\n    \nprint(merge([[1,2],[3,4],[5,6]]))\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    if len(lst) < 1:\n        return []\n    if len(lst) == 1:\n        return lst\n    \n    mid = int(len(lst)/2)\n    \n    first = merge(lst[0:mid])\n    second = merge(lst[mid:])\n    \n    return merge_list(first, second)\n    \ndef merge_list(a,b):\n    return a+b\n    \ndef test_merge():\n    assert merge([[1,2],[3,4],[5,6,7]]) == [[1,2],[3,4],[5,6,7]]\n    assert merge([[1,2],[3]]) == [[1,2],[3]]\n    assert merge([[2,4],[3,5,7]]) == [[2,4],[3,5,7]]\n    assert merge([]) == []\n    \ntest_merge()\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    if len(lst) > 0:\n        for item in lst:\n            merged_lst.append(item[0])\n            merged_lst.append(item[1])\n    return merged_lst\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [ [i[0],i[1]] for i in lst]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst = [i for i in lst if len(i) == 2]\n    lst2 = zip(*lst)\n    return list(lst2)\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in lst:\n        result.append(i[0])\n        result.append(i[1])\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in lst:\n        result.append([i[0],i[1]])\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[i][0],lst[i][1]] for i in range(len(lst))]\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum_of_list = 0\n    for index in range(len(test_list)):\n        sum_of_list = sum_of_list + test_list[index]\n    return sum_of_list\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    final_list = [0]\n    for element in test_list:\n        final_list.append(final_list[-1] + element)\n    return final_list\n    "
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    out_list = []\n    total = 0\n    for i in test_list:\n        total = total + i\n        out_list.append(total)\n    return out_list\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    \n    result = []\n    for i in range(len(test_list)):\n        sum_of_elem = 0\n        for j in range(i + 1):\n            sum_of_elem += test_list[j]\n        result.append(sum_of_elem)\n    return result\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    cumulative_sum = []\n    for x in test_list:\n        sum += x\n        cumulative_sum.append(sum)\n    return cumulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    ans = []\n    s = 0\n    for x in test_list:\n        s += x\n        ans.append(s)\n    return ans\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    output = []\n    # write your code here\n    s = 0\n    for i in test_list:\n        s += i\n        output.append(s)\n    return output\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return\n    if len(test_list) == 1:\n        return test_list[0]\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum_list = []\n    for idx, num in enumerate(test_list):\n        if idx == 0:\n            cumulative_sum_list.append(num)\n        else:\n            cumulative_sum_list.append(cumulative_sum_list[idx-1] + num)\n    return cumulative_sum_list\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in test_list:\n        cumulative_sum = cumulative_sum + i\n    return cumulative_sum\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(sub_tuple)/len(sub_tuple) for sub_tuple in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    #solution 1:\n    #return [(sum(x)/len(x)) for x in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        averages.append(sum(tup)/len(tup))\n    return averages\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for i in nums:\n        average_list.append(sum(i)/len(i))\n    return average_list\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(x)/len(x) for x in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    nums_list = []\n    for tup in nums:\n        nums_list.append(sum(tup)/len(tup))\n    return nums_list\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average = []\n    for tup in nums:\n        average.append(sum(tup)/len(tup))\n    return average\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for each_tuple in nums:\n        averages.append(sum(each_tuple)/len(each_tuple))\n    return averages\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(i)/len(i) for i in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = []\n    for i in nums:\n        total.append(sum(i) / len(i))\n    return total\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    output = []\n    for i, j in zip(test_tup1, test_tup2):\n        output.append(i % j)\n    return tuple(output)\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([(t1%t2) for (t1, t2) in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([a%b for a, b in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1\n    "
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tuples must be of the same length')\n    return tuple([tup1%tup2 for tup1,tup2 in zip(test_tup1,test_tup2)])\n    \nassert tuple_modulo((1,2,3,4), (2,3,4,5)) == (1,0,1,0)\nassert tuple_modulo((1,2,3,4), (1,2,3,4)) == (0,0,0,0)\nassert tuple_modulo((1,2,3,4), (3,4,5,6)) == (1,2,3,4)\nassert tuple_modulo((1,2,3,4), (1,2,3,4,5)) == (0,0,0,0,0)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,4,5,6)) == (0,0,0,0,0,0)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,4,5,7)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,4,6,7)) == (1,2,3,4,5,0)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,4,7,8)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,5,6,7)) == (1,2,3,0,6,7)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,7,8,9)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,8,9,10)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,9,10,11)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,11,12,13)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,12,13,14)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,13,14,15)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,14,15,16)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,15,16,17)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,16,17,18)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,17,18,19)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,18,19,20)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,19,20,21)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,20,21,22)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,21,22,23)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,22,23,24)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,23,24,25)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,24,25,26)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,25,26,27)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,26,27,28)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,27,28,29)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,28,29,30)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,29,30,31)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,30,31,32)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,31,32,33)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,32,33,34)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,33,34,35)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,34,35,36)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,35,36,37)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,36,37,38)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,37,38,39)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,38,39,40)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,39,40,41)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,40,41,42)) == (1,2,3,4,5,6)\nassert tuple_modulo((1,2,3,4,5,6), (1,2,3,41,42,43)) == (1,2,"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    return [(x1 % x2) for (x1, x2) in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulo_tup = ()\n    for i in range(len(test_tup1)):\n        modulo_tup = modulo_tup + (test_tup1[i] % test_tup2[i],)\n    return modulo_tup\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # iterate through the length of both tuples\n    for i in range(len(test_tup1)):\n        #print \"test_tup1[i]\", test_tup1[i]\n        #print \"test_tup2[i]\", test_tup2[i]\n        # modulo the current element in each tuple\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(0, len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    try:\n        assert len(test_tup1) == len(test_tup2)\n        result = []\n        for i in range(0, len(test_tup1)):\n            result.append(test_tup1[i] % test_tup2[i])\n        return tuple(result)\n    except:\n        return None\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if len(steps) == 0:\n        return 0\n    if steps[0] > d:\n        return float('inf')\n    min_jumps = 1 + min_Jumps(steps[1:], d)\n    if steps[0] <= d:\n        return min_jumps\n    else:\n        return float('inf')\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def is_safe(i, j): \n        if (0 <= i < len(steps) and 0 <= j < len(steps[i])): \n            return True\n        return False \n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    matrix = [[0 for i in range(steps)] for j in range(steps)]\n    for i in range(steps):\n        matrix[i][i] = 0\n    for i in range(steps):\n        for j in range(steps):\n            if i == j:\n                matrix[i][j] = float('inf')\n            elif i == 0:\n                matrix[i][j] = abs(i - j)\n            else:\n                matrix[i][j] = min(matrix[i - 1][j] + 1, matrix[i][j - 1] + 1, matrix[i - 1][j - 1] + abs(i - j))\n    return matrix[steps - 1][steps - 1]\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 0\n    elif d < 0 or steps < 0:\n        return 0\n    elif steps == 1:\n        return 1\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps <= 1:\n        return 0\n    else:\n        return 1 + min_Jumps(steps-d, d)\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jump_count = 0\n    \n    if steps == 0: \n        return jump_count\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    memo = {}\n    \n    def min_jumps(steps, d):\n        if steps == 0:\n            return 0\n        if steps < 0:\n            return float('inf')\n        if (steps, d) in memo:\n            return memo[(steps, d)]\n        jumps = float('inf')\n        for jump in range(1, steps + 1):\n            if d - jump >= 0 and min_jumps(steps - jump, d - jump)!= float('inf'):\n                jumps = min(jumps, 1 + min_jumps(steps - jump, d - jump))\n        memo[(steps, d)] = jumps\n        return jumps\n    return min_jumps(steps, d)\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return steps\n    if d < 0:\n        return float('inf')\n    res = float('inf')\n    for i in range(len(steps)):\n        if steps[i] < d:\n            res = min(res, 1+ min_Jumps(steps[i:], d - steps[i]))\n    return res\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    global x,y\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # A recursive function to find the number of jumps to reach a particular position in 2d plane\n    def min_Jumps(steps, d): \n        if d==0:\n            return 0\n        if d==1:\n            return steps\n        jump=0\n        if d>steps:\n            return float('inf')\n        for i in range(1,steps+1):\n            jump=jump+min_Jumps(steps-i,d-1)\n        return jump\n    return min_Jumps(steps,d)\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    try:\n        assert len(nums1) == len(nums2)\n        result = [0]*len(nums1)\n        for i in range(0,len(nums1)):\n            result[i] = nums1[i]/nums2[i]\n        return result\n    except:\n        print('Error, list not of same length')\n        return None\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    r = [0]*len(nums1)\n    for i in range(len(nums1)):\n        r[i] = (nums1[i]/nums2[i])\n    return r\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    assert type(nums1) == list and type(nums2) == list\n    for i,j in zip(nums1,nums2):\n        nums1[nums1.index(i)] = i / j\n    return nums1\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if not nums1 or not nums2:\n        return\n    result = []\n    for i in xrange(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n    \n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] /= nums2[i]\n    return nums1\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i]/nums2[i]\n    return nums1\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #return [[x/y for x,y in zip(nums1,nums2)],]\n    return [ [x/y for x,y in zip(nums1,nums2)] for x,y in zip(nums1,nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    results = []\n    for num in nums1:\n        results.append(num / nums2[0])\n    return results\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = \"\"\n    for char in test_str:\n        if char.isdigit():\n            result += char\n    return result\n    \ndef rotate_left3(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = \"\"\n    for char in test_str:\n        if not char.isdigit():\n            result += char\n    return result\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    index = 0\n    while index < len(test_str):\n        if test_str[index].isdigit():\n            test_str = test_str[:index]+test_str[index:].replace(test_str[index], \"\")\n        index+=1\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = test_str\n    num_str = ''\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return re.sub(r'([a-zA-Z]+)', '', test_str)\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = ['0','1','2','3','4','5','6','7','8','9']\n    new_str = ''\n    for i in test_str:\n        if i not in nums:\n            new_str += i\n    new_str = new_str + ''.join(nums)\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if not test_str:\n        return ''\n    l = []\n    for i in test_str:\n        if i.isdigit():\n            l.append(i)\n    l.sort()\n    l.extend(list(test_str[:test_str.index(l[-1])]))\n    return ''.join(l)\n    \n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if len(test_str) == 0:\n        return \"\"\n    else:\n        num = []\n        letters = []\n        for i in test_str:\n            if i.isnumeric():\n                num.append(i)\n            else:\n                letters.append(i)\n        return \"\".join(letters + num)\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    str_len = len(test_str)\n    if test_str == '':\n        return ''\n    \n    new_str = list(test_str)\n    idx = 0\n    for i in range(str_len):\n        if not new_str[i].isdigit():\n            new_str[i], new_str[idx] = new_str[idx], new_str[i]\n            idx += 1\n    return ''.join(new_str)\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    test_str = 'abc123def123'\n    if not test_str:\n        return ''\n    \n    test_list = list(test_str)\n    move_num_list = []\n    for char in test_list:\n        if not char.isdigit():\n            move_num_list.append(char)\n    for num in range(0, len(test_list)):\n        if test_list[num].isdigit():\n            move_num_list.append(test_list[num])\n    result_str = ''.join(move_num_list)\n    return result_str\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join([str(i) for i in test_str if i.isdigit()]) + ''.join([str(i) for i in test_str if not i.isdigit()])\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def helper(a, start, end, count):\n        if end - start == 1:\n            return count\n        mid = (start + end) // 2\n        left = helper(a, start, mid, count)\n        right = helper(a, mid, end, count)\n        if left >= right:\n            return right\n        total = 0\n        for i in range(mid, start - 1, -1):\n            if a[mid] % a[i] == 0:\n                total += 1\n            else:\n                break\n        return max(total, left, right)\n    result = 0\n    for i in range(len(a)):\n        result = max(result, helper(a, i, len(a), 0))\n    return result\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    divisor = 1\n    divisors = {}\n    for x in a:\n        divisors[divisor] = divisors.get(divisor, []) + [x]\n        divisor += 1\n    best = {}\n    for x in divisors:\n        for y in divisors[x+1]:\n            key = ','.join(map(str, divisors[x])) + ',' + ','.join(map(str, divisors[x+1]))\n            best[key] = best.get(key, []) + [x]\n    best = max(best.keys(), key = len)\n    return len(best.split(','))\n    \nprint(largest_subset([1,2,3,4,5,6]))"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def is_divisible(a, b):\n        return a % b == 0\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) <= 1:\n        return a\n    else:\n        pairs = sorted(a)\n        last_num = pairs.pop()\n        n = len(a)\n        m = 0\n        for i in xrange(n):\n            if pairs[i] % last_num == 0:\n                m += 1\n        return m\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n    if n == 2:\n        if a[0]%2 == 0:\n            return a[0] if a[0]>a[1] else a[1]\n        else:\n            return a[1]\n    left = [0]*n\n    right = [0]*n\n    left[0] = a[0]\n    right[n-1] = a[n-1]\n    for i in range(1,n):\n        left[i] = max(left[i-1],a[i])\n    for i in range(n-2,-1,-1):\n        right[i] = max(right[i+1],a[i])\n    max_count = 0\n    for i in range(n):\n        if i == 0:\n            if left[i]%2 == 0:\n                max_count = max(max_count,right[i])\n        else:\n            if left[i]%2 == 0:\n                max_count = max(max_count,right[i]+1)\n            else:\n                max_count = max(max_count,right[i])\n    return max_count\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    if n == 0:\n        return 0\n    max = 0\n    for i in range(n):\n        a[i] = (a[i],i)\n    a.sort(key = lambda x: x[0])\n    s = [0]*(n+1)\n    c = 0\n    for i in range(n):\n        if a[i][0] <= a[i-1][0]:\n            s[a[i][1]] = 1\n    for i in range(n+1):\n        if s[i] == 0:\n            c += 1\n    return c\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    if n < 2:\n        return n\n    p = [0] * n\n    p[0] = 1\n    p[1] = 2 if a[0] % 2 == 0 else 1\n    for i in xrange(2, n):\n        if a[i] % 2 == 0:\n            p[i] = p[i - 1] + 1\n        else:\n            p[i] = 2 if a[i] % p[i - 1] == 0 else p[i - 1]\n    return p[-1]\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    if len(a) == 1:\n        return a[0]\n    if len(a) == 2:\n        return max(a[0], a[1])\n    return max(a[0] + largest_subset(a[2:]), largest_subset(a[1:]))\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    s = [0] * len(a)\n    s[0] = a[0]\n    max_len = 1\n    for i in range(1,len(a)):\n        if a[i] % a[i-1] == 0:\n            s[i] = a[i]\n            max_len = max(max_len,s[i])\n        else:\n            s[i] = s[i-1]\n    return max_len\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    divisible_pairs = []\n    \n    for i in range(0, len(a)):\n        for j in range(i, len(a)):\n            if a[i] % a[j] == 0:\n                divisible_pairs.append((a[i], a[j]))\n    \n    return divisible_pairs\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    def bin_search(arr1, arr2, n, start1, end1, start2, end2):\n        if start1 == end1:\n            return arr1[start1]\n        if start2 == end2:\n            return arr2[start2]\n        mid1 = start1 + (end1 - start1) // 2\n        mid2 = start2 + (end2 - start2) // 2\n        if arr1[mid1] > arr2[mid2]:\n            return bin_search(arr1, arr2, n, start1, mid1, start2, end2)\n        else:\n            return bin_search(arr1, arr2, n, start1, end1, start2, mid2)\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return (arr1[n//2-1] + arr1[n//2])/2\n    else:\n        return arr1[n//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 1:\n        return arr1[n // 2]\n    else:\n        return (arr1[n // 2] + arr1[n // 2 - 1]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    left, right = 0, n-1\n    while True:\n        i = left + (right-left)//2\n        j = n-1-i\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return arr1[0]\n    elif n == 2:\n        return (arr1[0] + arr2[1]) / 2.0\n    else:\n        return get_median(arr1[n/2:], arr2[:(n/2)], n/2)\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    return get_kth_smallest(arr1, arr2, n/2)\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return (get_median(arr1, arr2, n/2) + get_median(arr1, arr2, n/2 - 1)) / 2.0\n    return arr1[n/2]\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Assuming that arr1 and arr2 are sorted\n    # the median will be the (k/2 + 1)th number\n    # where k is the length of the arrays\n    m = int(len(arr1) / 2)\n    if (n % 2) == 0:\n        median = (arr1[m-1] + arr1[m]) / 2\n    else:\n        median = arr1[m]\n    \n    return median\n    \n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.sort()\n    arr2.sort()\n    mid_1 = n//2\n    mid_2 = (n+1)//2\n    \n    if n%2 == 1:\n        return max(arr1[mid_1], arr2[mid_2])\n    else:\n        return (arr1[mid_1]+arr2[mid_2])/2.0\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return (arr1[n/2] + arr2[n/2])/2\n    else:\n        return arr1[(n-1)/2]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    res=[]\n    for num in nums:\n        res.append(num**n)\n    return res\n    \nassert nth_nums([1,2,3,4],2)==[1,2,9,16]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [n ** x for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [n**i for i in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    pow_nums = []\n    for num in nums:\n        pow_nums.append(num ** n)\n    return pow_nums\n    \nprint nth_nums([1,2,3,4],2"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    from functools import reduce\n    return [reduce(lambda x,y: x**y, nums[:n])]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums_power = []\n    for num in nums:\n        nums_power.append(num**n)\n    return nums_power\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n <= 0:\n        return []\n    else:\n        return [i**n for i in nums]\n        \nnums = [1,2,3,4,5]\nn = 2\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper_string = ''\n    for char in string:\n        upper_string += char.upper()\n    return upper_string\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    for i in range(len(string)):\n        if string[i] == 'i':\n            string = string[:i] + '!' + string[i+1:]\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if newList:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    # Number of elements in the list \n    n = len(newList) \n    \n    # Swapping \n    temp = newList[0] \n    newList[0] = newList[n-1] \n    newList[n-1] = temp \n    \n    return newList\n    \n    \ndef sort_List(newList): \n    '''\n    Write a python function to sort a list in increasing order.\n    '''\n    \n    # Number of elements in the list \n    n = len(newList) \n    \n    # Sorting \n    for i in range(n-1): \n        for j in range(i+1, n): \n            if newList[i] > newList[j]: \n                temp = newList[i] \n                newList[i] = newList[j] \n                newList[j] = temp \n                \n    return newList\n    \n    \ndef n_th_element(newList, n): \n    '''\n    Write a python function to find the n-th smallest element in the given list.\n    '''\n    \n    # Sorting the list \n    sort_List(newList) \n    \n    # Printing the n-th element \n    print(newList[n-1])\n    \n    \ndef remove_duplicate_elements(newList): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    \n    # Sorting the list \n    sort_List(newList) \n    \n    # Printing the new list \n    print(newList) \n    \n    \ndef insertion_sort(newList): \n    '''\n    Write a python function to implement insertion sort.\n    '''\n    \n    # Number of elements in the list \n    n = len(newList) \n    \n    for i in range(1, n): \n        \n        # Swapping \n        temp = newList[i] \n        j = i-1\n        \n        while (j >= 0 and temp < newList[j]): \n            newList[j+1] = newList[j] \n            j -= 1\n            \n        newList[j+1] = temp \n        \n    return newList\n    \n    \ndef selection_sort(newList): \n    '''\n    Write a python function to implement selection sort.\n    '''\n    \n    # Number of elements in the list \n    n = len(newList) \n    \n    for i in range(n): \n        \n        # Assigning the minimum value \n        min_val = i \n        \n        # Swapping the current element with the minimum element \n        for j in range(i+1, n): \n            if newList[j] < newList[min_val]: \n                min_val = j \n                \n        temp = newList[i] \n        newList[i] = newList[min_val] \n        newList[min_val] = temp \n        \n    return newList\n    \n    \ndef merge_sort(newList): \n    '''\n    Write a python function to implement merge sort.\n    '''\n    \n    # Calling the merge_sort function recursively \n    merge_sort_recursive(newList, 0, len(newList)-1) \n    \n    return newList\n    \n    \ndef merge_sort_recursive(newList, left, right): \n    '''\n    Write a python function to implement merge sort using recursion.\n    '''\n    \n    # Sorting the first half of the list \n    if left < right: \n        mid = (left + right) // 2\n        merge_sort_recursive(newList, left, mid) \n        merge_sort_recursive(newList, mid+1, right) \n        merge(newList, left, mid, right) \n        \n    return newList\n    \n    \ndef merge(newList, left, mid, right): \n    '''\n    Write a python function to implement merge sort using recursion.\n    '''\n    \n    # Storing the sorted list in a temporary list \n    temp = [0]*(right-left+1) \n    i = 0\n    \n    # Sorting the first half of the list \n    for i in range(left, mid+1): \n        temp[i-left] = newList[i] \n        \n    # Sorting the second half of the list \n    for i in range(mid+1, right+1): \n        temp[i-left] = newList[i] \n        \n    # Copy the sorted list to the original list \n    for i in range(left, right+1): \n        newList[i] = temp[i-left] \n        \n    return newList\n    \n    \ndef merge_sort_iterative(newList): \n    '''\n    Write a python function to implement merge sort using recursion.\n    '''\n    \n    # Sorting the list using a divide and conquer method \n    merge_sort_recursive(newList, 0, len(newList)-1) \n    \n    return newList\n    \n    \ndef merge_sort_recursive(newList, left, right): \n    '''\n    Write a python function to implement merge sort using recursion.\n    '''\n    \n    # Sorting the first half of the list \n    if left < right: \n        mid = (left + right) // 2\n        merge_sort_recursive(newList, left, mid) \n        merge_sort_recursive(newList, mid+1, right) \n        merge(newList, left, mid, right) \n        \n    return newList\n    \n    \ndef merge(newList, left, mid, right): \n    '''\n    Write a python function to implement merge sort using recursion.\n    '''\n    \n    # Storing the sorted list in a temporary list \n    temp = [0]*(right-left+1) \n    i = 0\n    \n    # Sorting the first half of the list \n    for i in range(left, mid+1): \n        temp[i-left] = newList[i] \n        \n    # Sorting the second half of the list \n    for i in range(mid+1, right+1): \n        temp[i-left] = newList[i] \n        \n    # Copy the sorted list to the original list \n    for i in range(left, right+1): \n        newList[i] = temp[i-left] \n        \n    return newList\n    \n    \ndef quick_sort(newList): \n    '''\n    Write a python function to implement quick sort.\n    '''\n    \n    # Sorting the list using a divide and conquer method \n    quick_sort_recursive(newList, 0, len(newList)-1) \n    \n    return newList\n    \n    \ndef quick_sort_recursive(newList, left, right): \n    '''\n    Write a python function to implement quick sort using recursion.\n    '''\n    \n    # Sorting the first half of the list \n    if left < right: \n        \n        # Selecting the pivot element from the list \n        mid = partition(newList, left, right) \n        \n        # Sorting the left half \n        quick_sort_recursive(newList, left, mid-1) \n        \n        # Sorting the right half \n        quick_sort_recursive(newList, mid+1, right) \n        \n    return newList\n    \n    \ndef partition(newList, left, right): \n    '''\n    Write a python function to implement quick sort using recursion.\n    '''\n    \n    # Storing the pivot element at the end of the list \n    temp = newList[right] \n    newList[right] = newList[left] \n    newList[left] = temp \n    \n    # Sorting the list \n    pivot = left \n    for i in range(left+1, right+1): \n        if newList[i] <= newList[left]: \n            pivot += 1\n            temp = newList[i] \n            newList[i] = newList[pivot] \n            newList[pivot] = temp "
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\ndef perm_List(newList):\n    '''\n    Write a python function to find the permutation of a list.\n    '''\n    if len(newList)==0:\n        return []\n    else:\n        first = newList[0]\n        rest = perm_List(newList[1:])\n        result = [first]+rest\n        return result\ndef sum_List(newList):\n    '''\n    Write a python function to find the sum of all the elements in a list.\n    '''\n    if len(newList)==0:\n        return 0\n    else:\n        return newList[0]+sum_List(newList[1:])\ndef max_List(newList):\n    '''\n    Write a python function to find the maximum element in a list.\n    '''\n    if len(newList)==0:\n        return None\n    else:\n        max=newList[0]\n        maxIndex=0\n        for i in range(1,len(newList)):\n            if newList[i]>max:\n                max=newList[i]\n                maxIndex=i\n        return max,maxIndex\ndef min_List(newList):\n    '''\n    Write a python function to find the minimum element in a list.\n    '''\n    if len(newList)==0:\n        return None\n    else:\n        min=newList[0]\n        minIndex=0\n        for i in range(1,len(newList)):\n            if newList[i]<min:\n                min=newList[i]\n                minIndex=i\n        return min,minIndex\ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a list.\n    '''\n    if len(newList)==0:\n        return newList\n    else:\n        firstElement=newList[0]\n        newList.pop(0)\n        newList.append(firstElement)\n        return reverse_List(newList)\ndef diff_List(newList):\n    '''\n    Write a python function to find the difference between consecutive elements in a list.\n    '''\n    if len(newList)<2:\n        return 0\n    else:\n        return newList[1]-newList[0]\ndef concat_List(newList, list2):\n    '''\n    Write a python function to concatenate two lists.\n    '''\n    if len(list2)==0:\n        return newList\n    else:\n        return newList+list2\ndef remove_List(newList, val):\n    '''\n    Write a python function to remove all the occurences of a given element in a list.\n    '''\n    if len(newList)==0:\n        return newList\n    elif newList[0]==val:\n        newList.pop(0)\n        return remove_List(newList, val)\n    else:\n        return remove_List(newList[1:], val)\ndef count_List(newList, val):\n    '''\n    Write a python function to count the number of occurences of a given element in a list.\n    '''\n    if len(newList)==0:\n        return 0\n    elif newList[0]==val:\n        return 1+count_List(newList[1:], val)\n    else:\n        return count_List(newList[1:], val)\ndef slice_List(newList, start, end):\n    '''\n    Write a python function to slice a list.\n    '''\n    if start<0 or end<0 or end>=len(newList) or start>=end:\n        return None\n    elif start>=0 and end<=len(newList):\n        return newList[start:end+1]\n    else:\n        return None\ndef append_List(newList, val):\n    '''\n    Write a python function to append a given element to a list.\n    '''\n    if len(newList)==0:\n        return [val]\n    else:\n        return newList+[val]\ndef append_List2(newList, val):\n    '''\n    Write a python function to append a given element to a list.\n    '''\n    if len(newList)==0:\n        return [val]\n    else:\n        return newList+[val]\ndef insert_List(newList, index, val):\n    '''\n    Write a python function to insert a given element to a list at a given index.\n    '''\n    if index<0 or index>=len(newList):\n        return None\n    else:\n        return newList[:index]+[val]+newList[index:]\ndef extend_List(newList, list2):\n    '''\n    Write a python function to extend a list with another list.\n    '''\n    if len(list2)==0:\n        return newList\n    else:\n        return newList+list2\ndef list_comp(newList):\n    '''\n    Write a python function to compute the product of all the elements in a list.\n    '''\n    if len(newList)==0:\n        return 1\n    else:\n        return newList[0]*list_comp(newList[1:])\ndef sum_List2(newList):\n    '''\n    Write a python function to find the sum of all the elements in a list.\n    '''\n    if len(newList)==0:\n        return 0\n    else:\n        return newList[0]+sum_List2(newList[1:])\ndef map_List(newList, function):\n    '''\n    Write a python function to map a function to all the elements in a list.\n    '''\n    if len(newList)==0:\n        return newList\n    else:\n        return newList+[function(newList)]\ndef max_List2(newList):\n    '''\n    Write a python function to find the maximum element in a list.\n    '''\n    if len(newList)==0:\n        return None\n    else:\n        max=newList[0]\n        maxIndex=0\n        for i in range(1,len(newList)):\n            if newList[i]>max:\n                max=newList[i]\n                maxIndex=i\n        return max,maxIndex\ndef min_List2(newList):\n    '''\n    Write a python function to find the minimum element in a list.\n    '''\n    if len(newList)==0:\n        return None\n    else:\n        min=newList[0]\n        minIndex=0\n        for i in range(1,len(newList)):\n            if newList[i]<min:\n                min=newList[i]\n                minIndex=i\n        return min,minIndex\ndef reverse_List2(newList):\n    '''\n    Write a python function to reverse a list.\n    '''\n    if len(newList)==0:\n        return newList\n    else:\n        firstElement=newList[0]\n        newList.pop(0)\n        newList.append(firstElement)\n        return reverse_List2(newList)\ndef diff_List2(newList):\n    '''\n    Write a python function to find the difference between consecutive elements in a list.\n    '''\n    if len(newList)<2:\n        return 0\n    else:\n        return newList[1]-newList[0]\ndef concat_List2(newList, list2):\n    '''\n    Write a python function to concatenate two lists.\n    '''\n    if len(list2)==0:\n        return newList\n    else:\n        return newList+list2\ndef remove_List2(newList, val):\n    '''\n    Write a python function to remove all the occurences of a given element in a list.\n    '''\n    if len(newList)==0:\n        return newList\n    elif newList[0]==val:\n        newList.pop(0)\n        return remove_List2(newList, val)\n    else:\n        return remove_List2(newList[1:], val)\ndef count_List2(newList, val):\n    '''\n    Write a python function to count the numbe"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[-1] = newList[-1],newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[len(newList) - 1] = newList[len(newList) - 1], newList[0] \n    return newList \n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    return newList[-1:] + newList[1:len(newList)-1] + newList[:1]\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # your code here\n    return newList[-1:] + newList[1:-1] + newList[:1]\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def area_of_a_triangle(s) : \n        return s*(s-1)/2\n    def area_of_a_semicircle(s) : \n        return math.pi*s*s/4\n    def area_of_a_quadrilateral(s) : \n        return s*(s-1)\n    def area_of_a_trapezium(s) : \n        return s*(s-1)*(s+1)/6\n    def area_of_a_rectangle(s) : \n        return s*s\n    def area_of_a_isosceles_triangle(s) : \n        return s*s/2\n    def area_of_a_quadratic_triangle(s) : \n        return s*s\n    def area_of_a_kite(s) : \n        return s*(s-1)\n    def area_of_a_tetrahedral_triangle(s) : \n        return s*s*s/4\n    def area_of_a_heptagonal_triangle(s) : \n        return s*s*s/6\n    def area_of_a_octagonal_triangle(s) : \n        return s*s*s/8\n    def area_of_a_dodecahedral_triangle(s) : \n        return s*s*s*s/12\n    def area_of_a_icosahedral_triangle(s) : \n        return s*s*s*s/6\n    def area_of_a_trigonal_triangle(s) : \n        return s*s*s/3\n    def area_of_a_dodecagonal_triangle(s) : \n        return s*s*s/8\n    def area_of_a_dodecagonal_tetrahedral_triangle(s) : \n        return s*s*s*s/8\n    def area_of_a_n_gon(n) : \n        return n*(n-1)*(2*n+1)/6\n    def area_of_a_n_pig_hole(n) : \n        return n*(n-1)*(2*n+1)/4\n    def area_of_a_regular_polygon(n,r) : \n        return area_of_a_n_gon(n)*r*r\n    def area_of_a_irregular_polygon(n,r) : \n        return area_of_a_n_gon(n)*r*r/n\n    def area_of_a_regular_octagon(s) : \n        return s*s*s/4\n    def area_of_a_regular_kite(s) : \n        return s*(s-1)*s/2\n    def area_of_a_regular_heptagon(s) : \n        return s*s*s/6\n    def area_of_a_regular_tetrahedral_triangle(s) : \n        return s*s*s/4\n    def area_of_a_regular_hexagonal_triangle(s) : \n        return s*s*s/2\n    def area_of_a_regular_tetrahedral_hexagonal_triangle(s) : \n        return s*s*s*s/6\n    def area_of_a_regular_octagonal_triangle(s) : \n        return s*s*s/4\n    def area_of_a_regular_dodecahedral_triangle(s) : \n        return s*s*s*s/12\n    def area_of_a_regular_icosahedral_triangle(s) : \n        return s*s*s*s/6\n    def area_of_a_regular_trigonal_triangle(s) : \n        return s*s*s/3\n    def area_of_a_regular_dodecagonal_triangle(s) : \n        return s*s*s/8\n    def area_of_a_regular_trigonal_heptagonal_triangle(s) : \n        return s*s*s*s/8\n    def area_of_a_regular_octagonal_heptagonal_triangle(s) : \n        return s*s*s*s/8\n    def area_of_a_regular_heptagonal_octagonal_triangle(s) : \n        return s*s*s*s/8\n    def area_of_a_regular_dodecagonal_octagonal_triangle(s) : \n        return s*s*s*s/8\n    def area_of_a_regular_dodecagonal_tetrahedral_triangle(s) : \n        return s*s*s*s/8\n    def area_of_a_regular_dodecagonal_hexagonal_triangle(s) : \n        return s*s*s*s/8\n    def area_of_a_regular_pentagonal_hexagonal_triangle(s) : \n        return s*s*s*s/8\n    def area_of_a_regular_pentagonal_octagonal_triangle(s) : \n        return s*s*s*s/8\n    def area_of_a_regular_octagonal_heptagonal_triangle(s) : \n        return s*s*s*s/8\n    def area_of_a_regular_dodecagon(s) : \n        return s*s*s*s/12\n    def area_of_a_regular_hexagon(s) : \n        return s*s*s/2\n    def area_of_a_regular_heptagon(s) : \n        return s*s*s/6\n    def area_of_a_regular_tetrahedral_triangle(s) : \n        return s*s*s/4\n    def area_of_a_regular_trigonal_triangle(s) : \n        return s*s*s/3\n    def area_of_a_regular_heptagonal_triangle(s) : \n        return s*s*s/6\n    def area_of_a_regular_octagonal_triangle(s) : \n        return s*s*s/4\n    def area_of_a_regular_tetrahedral_hexagonal_triangle(s) : \n        return s*s*s/4\n    def area_of_a_regular_hexagonal_heptagonal_triangle(s) : \n        return s*s*s/6\n    def area_of_a_regular_octagonal_heptagonal_triangle(s) : \n        return s*s*s/4\n    def area_of_a_regular_heptagonal_octagonal_triangle(s) : \n        return s*s*s/6\n    def area_of_a_regular_pentagonal_octagonal_triangle(s) : \n        return s*s*s/4\n    def area_of_a_regular_heptagonal_pentagonal_triangle(s) : \n        return s*s*s/6\n    def area_of_a_regular_heptagonal_dodecagonal_triangle(s) : \n        return s*s*s/8\n    def area_of_a_regular_heptagonal_tetrahedral_triangle(s) : \n        return s*s*s/8\n    def area_of_a_regular_octagonal_dodecagonal_triangle(s) : \n        return s*s*s/8\n    def area_of_a_regular_heptagonal_octagonal_triangle(s) : \n        return s*s*s/8\n    def area_of_a_regular_dodecagonal_hexagonal_triangle(s) : \n        return s*s*s*s/8\n    def area_of_a_regular_heptagonal_heptagonal_triangle(s) : \n        return s*s*s*s/8\n    def area_of_a_regular_pentagonal_hexagonal_triangle(s) : \n        return s*s*s"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pass\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pass\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    A = math.pi*(r**2)\n    return A\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = 2 * r**2\n    b = r**2 * math.sin(2 * math.pi / 3)\n    return (a - b) / 2\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area_square_formula(r) :  \n        return 3.14*r**2\n    return (area_square_formula(r)/2)**0.5\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (r**2)/2\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi\n    area = pi * r**2 / 4\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    return 3*r**2/4\n    \ndef pentagon_area(r) : \n    '''\n    Write a python function to find the area of the largest pentagon that can be inscribed in a circle with a given radius.\n    '''\n    \n    return 5*r**2/4\n    \ndef hexagon_area(r) : \n    '''\n    Write a python function to find the area of the largest hexagon that can be inscribed in a circle with a given radius.\n    '''\n    \n    return 6*r**2/4\n    \ndef square_area(r) : \n    '''\n    Write a python function to find the area of the largest square that can be inscribed in a circle with a given radius.\n    '''\n    \n    return r**2\n    \ndef octagon_area(r) : \n    '''\n    Write a python function to find the area of the largest octagon that can be inscribed in a circle with a given radius.\n    '''\n    \n    return 8*r**2/4\n    \ndef nonagon_area(r) : \n    '''\n    Write a python function to find the area of the largest nonagon that can be inscribed in a circle with a given radius.\n    '''\n    \n    return 10*r**2/4\n    \ndef circle_area(r) : \n    '''\n    Write a python function to find the area of the largest circle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    return 2*3.14*r\n    \ndef rectangle_area(r, l) : \n    '''\n    Write a python function to find the area of the largest rectangle that can be inscribed in a circle with a given radius.\n    '''\n    \n    return r*l\n    \ndef triangle_perimeter(a, b, c) : \n    '''\n    Write a python function to find the perimeter of the longest triangle that can be inscribed in a circle with a given radius.\n    '''\n    \n    return a+b+c\n    \ndef pentagon_perimeter(a, b, c) : \n    '''\n    Write a python function to find the perimeter of the longest pentagon that can be inscribed in a circle with a given radius.\n    '''\n    \n    return a+b+c\n    \ndef hexagon_perimeter(a, b, c) : \n    '''\n    Write a python function to find the perimeter of the longest hexagon that can be inscribed in a circle with a given radius.\n    '''\n    \n    return a+b+c\n    \ndef square_perimeter(a, b, c, d) : \n    '''\n    Write a python function to find the perimeter of the longest square that can be inscribed in a circle with a given radius.\n    '''\n    \n    return a+b+c+d\n    \ndef octagon_perimeter(a, b, c) : \n    '''\n    Write a python function to find the perimeter of the longest octagon that can be inscribed in a circle with a given radius.\n    '''\n    \n    return a+b+c\n    \ndef nonagon_perimeter(a, b, c) : \n    '''\n    Write a python function to find the perimeter of the longest nonagon that can be inscribed in a circle with a given radius.\n    '''\n    \n    return a+b+c\n    \ndef rectangle_perimeter(a, b, c, d) : \n    '''\n    Write a python function to find the perimeter of the longest rectangle that can be inscribed in a circle with a given radius.\n    '''\n    \n    return a+b+c+d\n    \ndef rectangle_perimeter_wrong(a, b, c, d) : \n    '''\n    Write a python function to find the perimeter of the longest rectangle that can be inscribed in a circle with a given radius.\n    This is a wrong solution as it is assumed that the longest rectangle can be inscribed in a circle of a given radius.\n    '''\n    \n    return 2*(a+b)\n    \ndef triangle_perimeter_wrong(a, b, c) : \n    '''\n    Write a python function to find the perimeter of the longest triangle that can be inscribed in a circle with a given radius.\n    This is a wrong solution as it is assumed that the longest triangle can be inscribed in a circle of a given radius.\n    '''\n    \n    return a+b+c\n    \ndef pentagon_perimeter_wrong(a, b, c) : \n    '''\n    Write a python function to find the perimeter of the longest pentagon that can be inscribed in a circle with a given radius.\n    This is a wrong solution as it is assumed that the longest pentagon can be inscribed in a circle of a given radius.\n    '''\n    \n    return a+b+c\n    \ndef hexagon_perimeter_wrong(a, b, c) : \n    '''\n    Write a python function to find the perimeter of the longest hexagon that can be inscribed in a circle with a given radius.\n    This is a wrong solution as it is assumed that the longest hexagon can be inscribed in a circle of a given radius.\n    '''\n    \n    return a+b+c\n    \ndef circle_perimeter(r) : \n    '''\n    Write a python function to find the perimeter of the largest circle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    return 2*3.14*r\n    \ndef circle_perimeter_wrong(r) : \n    '''\n    Write a python function to find the perimeter of the largest circle that can be inscribed in a semicircle with a given radius.\n    This is a wrong solution as it is assumed that the largest circle can be inscribed in a semicircle of a given radius.\n    '''\n    \n    return 2*r\n    \ndef circle_perimeter_2(r) : \n    '''\n    Write a python function to find the perimeter of the largest circle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    return 2*3.14*r\n    \ndef triangle_perimeter_2(a, b, c) : \n    '''\n    Write a python function to find the perimeter of the longest triangle that can be inscribed in a circle with a given radius.\n    '''\n    \n    return a+b+c\n    \ndef pentagon_perimeter_2(a, b, c) : \n    '''\n    Write a python function to find the perimeter of the longest pentagon that can be inscribed in a circle with a given radius.\n    '''\n    \n    return a+b+c\n    \ndef hexagon_perimeter_2(a, b, c) : \n    '''\n    Write a python function to find the perimeter of the longest hexagon that can be inscribed in a circle with a given radius.\n    '''\n    \n    return a+b+c\n    \ndef square_perimeter_2(a, b, c, d) : \n    '''\n    Write a python function to find the perimeter of the longest square that can be inscribed in a circle with a given radius.\n    '''\n    \n    return a+b+c+d\n    \ndef rectangle_perimeter_2(a, b, c, d) : \n    '''\n    Write a python function to find the perimeter of the longest rectangle that can be inscribed in a circle with a given radius.\n    '''\n    \n    return a+b+c+d\n    \ndef square_perimeter_wrong(a, b, c, d) : \n    '''\n    Write a python function to find the perimeter of the longest square that can be inscribed in a circle with a given radius.\n    '''\n    \n    return 2*(a+b)\n    \ndef rectangle_perimeter_wrong(a, b, c, d) : \n    '''\n    Write a python function to find the perimeter of the longest rectangle that can be inscribed in a circle with a given radius.\n    This is a wrong solution as it is assumed that the longest rectangle can be inscribed in a circle of a given radius.\n    '''\n    \n    return 2*(a+b)\n    \ndef triangle_perimeter_wrong(a, b, c) : \n    '''\n    Write a python function to find the perimeter of the longest triangle that can be inscribed in a circle with a given radius.\n    This is a wrong solution as it is assumed that the longest triangle can be inscribed in a circle of a given radiu"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi\n    return r*r*(3*pi-3*r)/(2*r)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start < end:\n        mid = int((end-start)/2 + start)\n        if array[mid]!= mid:\n            if array[mid] > mid:\n                return find_First_Missing(array, start, mid-1)\n            else:\n                return find_First_Missing(array, mid+1, end)\n        else:\n            if array[mid] == mid:\n                return find_First_Missing(array, mid+1, end)\n            else:\n                return mid\n    else:\n        return None\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start>end:\n        return None\n    elif start==end:\n        if array[start]==start+1:\n            return start+1\n        else:\n            return None\n    else:\n        mid=(start+end)//2\n        if array[mid]==mid+1:\n            return find_First_Missing(array,start=mid+1,end=end)\n        else:\n            return find_First_Missing(array,start=start,end=mid)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start>end:\n        return None\n    if start==end:\n        if array[start]==start:\n            return start+1\n        else:\n            return start\n    mid=start+(end-start)/2\n    if array[mid]==mid:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start>end:\n        return -1\n    if start==end:\n        return array[end]\n    mid=(start+end)/2\n    if array[mid]==mid:\n        return find_First_Missing(array,start,mid-1)\n    else:\n        return find_First_Missing(array,mid+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    # Base case\n    if start == end:\n        return array[start] + 1\n    # Recursive case\n    mid = (start + end) // 2\n    if array[mid] == mid:\n        return find_First_Missing(array, start, mid - 1)\n    else:\n        return find_First_Missing(array, mid + 1, end)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start>=end:\n        return end+1\n    if array[start] is not None:\n        return find_First_Missing(array,start+1,end)\n    return find_First_Missing(array,start+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if(end==None):\n        end=len(array)-1\n    if(start>end):\n        return None\n    if(start==end):\n        if(array[start]==start+1):\n            return start+1\n        else:\n            return None\n    mid=(start+end)//2\n    if(array[mid]==mid+1):\n        return find_First_Missing(array,start,mid-1)\n    else:\n        return find_First_Missing(array,mid+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    # print array[start:end]\n    if start==end-1:\n        return start+1\n    if array[start]!=start:\n        return start\n    mid=(start+end)/2\n    if array[mid]==mid:\n        return find_First_Missing(array,mid+1,end)\n    return find_First_Missing(array,start,mid)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    if start >= end:\n        return start\n    pivot = array[end]\n    i = start\n    while i <= end:\n        if array[i] == pivot:\n            i += 1\n        elif array[i] > pivot:\n            array[i], array[start] = array[start], array[i]\n            start += 1\n            i += 1\n        else:\n            array[i], array[end] = array[end], array[i]\n            end -= 1\n    if start > end:\n        return start\n    else:\n        return end\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start >= end:\n        return start\n    if array[start]!= start + 1:\n        return start\n    mid = (start + end) // 2\n    if array[mid] == mid + 1:\n        return find_First_Missing(array, mid + 1, end)\n    else:\n        return find_First_Missing(array, start, mid)\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # result = string.replace(' ', '%20')\n    # return result\n    new_string = ''\n    for i in range(len(string)):\n        if string[i] =='':\n            new_string += '%20'\n        else:\n            new_string += string[i]\n    return new_string\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n    \nprint replace_spaces('The quick Brow Fox')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return '%20'.join(string.split(' '))\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # Your code here\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    EvenNumbers = [] \n    for i in list: \n        if i%2 == 0: \n            EvenNumbers.append(i) \n    return EvenNumbers\n    \ndef Sort(list):\n    '''\n    Write a python function to sort a list of strings and numbers\n    '''\n    sortedList = []\n    for i in list: \n        if isinstance(i, int) or isinstance(i, float):\n            sortedList.append(i)\n        elif isinstance(i, str):\n            sortedList.append(i)\n    sortedList.sort()\n    return sortedList\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for num in list:\n        if num % 2 == 0:\n            evens.append(num)\n    return evens\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list1 = []\n    list2 = []\n    for x in list:\n        if x%2 == 0:\n            list1.append(x)\n        else:\n            list2.append(x)\n    print list1\n    print list2\n    return list1, list2\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [x for x in list if x % 2 == 0]\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result = []\n    for n in list:\n        if n % 2 == 0:\n            result.append(n)\n    return result\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    odd = []\n    for i in list:\n        if i%2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even,odd\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list_evens = []\n    for x in list:\n        if x % 2 == 0:\n            list_evens.append(x)\n    return list_evens\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    # list = [x for x in range(10)]\n    # Even = [i for i in list if i % 2 == 0]\n    Even = [i for i in list if i % 2 == 0]\n    return Even\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    \n    even = []\n    for num in list:\n        if num % 2 == 0:\n            even.append(num)\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [x for x in list if x%2==0]\n    \ndef PrintFibonacci(n): \n    '''\n    Write a python function to generate a Fibonacci sequence to the nth term.\n    '''\n    a,b=0,1\n    while b<=n:\n        print b,\n        a,b=b,a+b\n        \ndef FindMissingNumber(list):\n    '''\n    Write a python function to return the missing number from a list of numbers\n    '''\n    sum=0\n    for i in range(len(list)):\n        sum+=i+1\n    return sum-sum(list)\n    \ndef RemoveDuplicates(list):\n    '''\n    Write a python function to remove duplicates from a list\n    '''\n    temp=[]\n    for i in list:\n        if i not in temp:\n            temp.append(i)\n    return temp\n    \ndef Occurrence(list):\n    '''\n    Write a python function to return the number of occurrences of a given element in a list\n    '''\n    return list.count(element)\n    \ndef main():\n    print \"Welcome to this little helper script!\"\n    \n    print \"I can do some of the most common python tasks in a few seconds!\"\n    \n    print \"Here are the available tasks: \"\n    \n    print \"Split()\\t\\t\\t\\t\\tSplits a given list into multiple lists\"\n    print \"PrintFibonacci()\\t\\t\\tPrints a fibonacci sequence to the given nth term\"\n    print \"FindMissingNumber()\\t\\t\\tFinds the missing number from a list\"\n    print \"RemoveDuplicates()\\t\\t\\tRemoves duplicates from a given list\"\n    print \"Occurrence()\\t\\t\\t\\tReturns the number of occurrences of an element in a list\"\n    \n    print \"Enjoy using this helper script!\"\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    n, m = ele\n    for i in range(n):\n        for j in range(m):\n            if (i, j)!= ele:\n                yield i, j\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for i in range(len(ele)):\n        for j in (-1, 1):\n            if 0 <= ele[i] + j < len(ele) and ele[i]!= ele[i] + j:\n                sub.append((ele[i], ele[i] + j))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append(ele)\n    adj_list = []\n    if ele[0] > 0:\n        adj_list.append((ele[0] - 1, ele[1]))\n    if ele[0] < 4:\n        adj_list.append((ele[0] + 1, ele[1]))\n    if ele[1] > 0:\n        adj_list.append((ele[0], ele[1] - 1))\n    if ele[1] < 4:\n        adj_list.append((ele[0], ele[1] + 1))\n    return adj_list\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    n = len(ele)\n    a = []\n    for i in range(n):\n        if ele[i] % 2 == 0:\n            a.append(ele[i] - 1)\n            a.append(ele[i] + 1)\n        else:\n            a.append(ele[i] + 1)\n            a.append(ele[i] - 1)\n    return a\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if not sub:\n        return [(ele[0]-1, ele[1]), (ele[0]+1, ele[1]), (ele[0], ele[1]-1), (ele[0], ele[1]+1)]\n    else:\n        sub.append(ele)\n        return adjac(sub[-1], sub)\n    \n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [tuple(map(sum, zip(ele, d))) for d in ((-1,0), (1,0), (0,-1), (0,1))]\ndef get_all_neighbors(ele, n):\n    '''\n    Get all the coordinates of the n-neighbors of the given coordinate.\n    '''\n    return [ele + d for d in adjac(ele)]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    neighbours = []\n    for i in range(len(ele)):\n        n = ele[i]\n        if n < ele[i-1]:\n            neighbours.append((n, ele[i-1]))\n        elif n > ele[i-1]:\n            neighbours.append((ele[i-1],n))\n        else:\n            continue\n    return neighbours\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    i = ele[0]\n    j = ele[1]\n    if i > 0 and j > 0:\n        sub.append((i-1, j-1))\n    if i > 0:\n        sub.append((i-1, j))\n    if i > 0 and j < 4:\n        sub.append((i-1, j+1))\n    if j > 0:\n        sub.append((i, j-1))\n    if j < 4:\n        sub.append((i, j+1))\n    if i < 4 and j > 0:\n        sub.append((i+1, j-1))\n    if i < 4:\n        sub.append((i+1, j))\n    if i < 4 and j < 4:\n        sub.append((i+1, j+1))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    return [(i, y) for i in xrange(x-1, x+2)] + [(x, j) for j in xrange(y-1, y+2)]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if not isinstance(ele, tuple): raise TypeError, 'expected tuple'\n    if not len(ele) == 2: raise ValueError, 'expected tuple of length 2'\n    sub.append(ele)\n    if ele[0] < 0 or ele[0] >= len(grid) or ele[1] < 0 or ele[1] >= len(grid[0]):\n        raise ValueError, 'coordinate out of bounds'\n    else:\n        if grid[ele[0]][ele[1]]:\n            if len(sub) >= 2:\n                output.append(sub)\n            else:\n                output = output + adjac(sub)\n        else:\n            output = output + adjac(sub)\n        sub.pop()\n    return output\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if type(text)!= type(''):\n        raise TypeError('text should be a string')\n    if text.isspace():\n        return '_'\n    else:\n        return''\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \",\"_\").replace(\"_\",\" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    assert isinstance(text, str) and len(text) > 0\n    \n    if len(text) == 0:\n        return ''\n    \n    text = text.lower()\n    text = text.replace(' ', '_')\n    text = text.replace('_','')\n    text = text.lower()\n    \n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = \"\"\n    for character in text:\n        if character == \" \":\n            result += \"_\"\n        else:\n            result += character\n    return result\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    return text.replace('_','').replace(' ', '_')\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    # Initialise two lists\n    new_str = []\n    spaces_str = []\n    \n    # Iterate through the string and add to new_str\n    # if the characters are not spaces\n    # and to spaces_str if the characters are spaces\n    for letter in text:\n        if letter!= \" \":\n            new_str.append(letter)\n        else:\n            spaces_str.append(letter)\n    \n    # Iterate through the spaces_str and add to new_str\n    # if the characters are not spaces\n    # and to spaces_str if the characters are spaces\n    for letter in spaces_str:\n        if letter!= \" \":\n            new_str.append(letter)\n        else:\n            new_str.append(\"_\")\n    \n    # Return the new string\n    return \"\".join(new_str)\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    i = 0\n    new_text = ''\n    while i < len(text):\n        if text[i] =='':\n            new_text += '_'\n        else:\n            new_text += text[i]\n        i += 1\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if type(text) is not str:\n        return None\n    return text.replace(' ','_') + '_' + text.replace('_',' ')\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('_','')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # python list.remove(object) method is used to remove the first occurrence of an element from the list\n    # we are looping through our list from the start of the list to the end of the list\n    # if we find a 0 we are adding it to the new list and removing it from the old list\n    # when we finish the loop we will have all the zeros at the end of the list\n    # this is quite a bit faster than the list.remove(0) method\n    new_list = []\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            new_list.append(num_list[i])\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            new_list.append(num_list[i])\n            num_list.remove(num_list[i])\n    return new_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for index, item in enumerate(num_list):\n        if item == 0:\n            num_list[index] = item + 1\n            num_list[-1] = 0\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list = sorted(num_list)\n    num_list = filter(lambda x: x!=0, num_list)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if not num_list:\n        return []\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    return [i for i in num_list if i!=0] + [0]*num_list.count(0)\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    # for every number in the list (except the last number)\n    for i in range(len(num_list)-1):\n        # if the current number is a zero\n        if num_list[i] == 0:\n            # get the index of the number before the current number\n            index = i - 1\n            # while the index is valid and the number before the index is not a zero\n            while index >= 0 and num_list[index]!= 0:\n                # change the index number to the previous number\n                index -= 1\n            # if the number before the index is not a zero\n            if index!= i - 1:\n                # get the previous number\n                num = num_list[i]\n                # change the number at the index to the previous number\n                num_list[i] = num_list[index]\n                # change the previous number to the current number\n                num_list[index] = num\n    # return the list\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Loop from the end of the list until 0 is found\n    for i in range(len(num_list)-1, -1, -1):\n        # If 0 is found, move it to the end of the list\n        if num_list[i] == 0:\n            num_list.append(num_list.pop(i))\n    return num_list\n    \ndef move_zero_by_count(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Counter to keep track of how many zeroes we have\n    counter = 0\n    for num in num_list:\n        if num == 0:\n            counter += 1\n    # Loop from the end of the list until 0 is found\n    for i in range(len(num_list)-1, -1, -1):\n        # If 0 is found, move it to the end of the list\n        if num_list[i] == 0:\n            num_list.append(num_list.pop(i))\n    # Loop to remove the zero's we just added\n    for _ in range(counter):\n        num_list.remove(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in num_list:\n        if i == 0:\n            count += 1\n    for i in range(count):\n        num_list.remove(0)\n        num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    return [i for i in num_list if i!= 0] + [0] * (len(num_list) - len(num_list))\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n<2:\n        return 0\n    else:\n        return (arr[0]^arr[1]) + pair_xor_Sum(arr[2:],n-1)\n    \ndef pair_xor_Sum_Optimized(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n<2:\n        return 0\n    else:\n        return (arr[0]^arr[1]) + pair_xor_Sum_Optimized(arr[2:],n-1)\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # split the list into even and odd numbers\n    arr1 = []\n    arr2 = []\n    for i in range(n) : \n        if i % 2 == 0 : \n            arr1.append(arr[i])\n        else : \n            arr2.append(arr[i])\n    # find xor of all pairs\n    arr1_sum = 0\n    arr2_sum = 0\n    for i in range(len(arr1)) : \n        arr1_sum = arr1_sum ^ arr1[i]\n    for i in range(len(arr2)) : \n        arr2_sum = arr2_sum ^ arr2[i]\n    # sum of xor of all pairs\n    return (arr1_sum^arr2_sum)\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(0,len(arr)) : \n        for j in range(i+1,len(arr)) : \n            sum = sum + (arr[i] ^ arr[j])\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(n) :\n        for j in range(i + 1,n) :\n            s += arr[i] ^ arr[j]\n    return s\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return reduce(lambda a,b : a ^ b,arr)\n    \n    \nprint pair_xor_Sum([1,3,5,7,9,11,13,15],8)"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    if n < 2 : \n        return 0\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            sum += arr[i]^arr[j]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Initialize the variable\n    res = 0\n    # Iterate over the array\n    for i in range(0,n) :\n        # Initialize another variable to store the result of xor\n        curr_res = 0\n        for j in range(0,n) :\n            # Check if the numbers are equal\n            if arr[i] == arr[j] :\n                continue\n            # If the numbers are not equal, then add the result of the xor of the two\n            curr_res += arr[i] ^ arr[j]\n        # Update the result variable with the result of xor of two numbers\n        res += curr_res\n    # Return the result\n    return res\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            s += arr[i]^arr[j]\n    return s\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if len(arr)<2 : return arr[0]\n    return arr[0]^arr[1]^pair_xor_Sum(arr[1:],n)\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # hq = []\n    # for val in iterable:\n    #     hq.append(val)\n    # hq.sort()\n    # return hq\n    for i in range(len(iterable)):\n        min_idx = i\n        left_idx = 2*i+1\n        right_idx = 2*i+2\n        if left_idx<len(iterable) and iterable[left_idx]<iterable[min_idx]:\n            min_idx = left_idx\n        if right_idx<len(iterable) and iterable[right_idx]<iterable[min_idx]:\n            min_idx = right_idx\n        if i!=min_idx:\n            iterable[i], iterable[min_idx] = iterable[min_idx], iterable[i]\n    return iterable\ndef quick_sort(iterable):\n    # base case\n    if len(iterable)<=1:\n        return iterable\n    # randomly select the pivot\n    pivot = iterable[0]\n    # find the pivot location\n    for i in range(1,len(iterable)):\n        if iterable[i]<pivot:\n            iterable[i], iterable[0] = iterable[0], iterable[i]\n    # make sure to swap the pivot with the last element\n    iterable[0], iterable[len(iterable)-1] = iterable[len(iterable)-1], iterable[0]\n    left = []\n    right = []\n    for num in iterable[1:]:\n        if num<iterable[0]:\n            left.append(num)\n        else:\n            right.append(num)\n    return quick_sort(left) + [iterable[0]] + quick_sort(right)\ndef bubble_sort(iterable):\n    for i in range(len(iterable)):\n        for j in range(1,len(iterable)):\n            if iterable[j-1]>iterable[j]:\n                iterable[j-1], iterable[j] = iterable[j], iterable[j-1]\n    return iterable\ndef insertion_sort(iterable):\n    for i in range(1, len(iterable)):\n        for j in range(i,0,-1):\n            if iterable[j-1]>iterable[j]:\n                iterable[j-1], iterable[j] = iterable[j], iterable[j-1]\n    return iterable\ndef selection_sort(iterable):\n    for i in range(len(iterable)):\n        min_idx = i\n        for j in range(i+1,len(iterable)):\n            if iterable[j]<iterable[min_idx]:\n                min_idx = j\n        iterable[i], iterable[min_idx] = iterable[min_idx], iterable[i]\n    return iterable\ndef bubble_sort_optimized(iterable):\n    for i in range(len(iterable)):\n        swap_occurred = False\n        for j in range(0,len(iterable)-i-1):\n            if iterable[j]>iterable[j+1]:\n                iterable[j], iterable[j+1] = iterable[j+1], iterable[j]\n                swap_occurred = True\n        if not swap_occurred:\n            break\n    return iterable\ndef insertion_sort_optimized(iterable):\n    for i in range(1, len(iterable)):\n        key = iterable[i]\n        j = i-1\n        while j>=0 and key<iterable[j]:\n            iterable[j+1] = iterable[j]\n            j -= 1\n        iterable[j+1] = key\n    return iterable\ndef shell_sort(iterable):\n    n = len(iterable)\n    h = 1\n    while h<n/3:\n        h = 3*h + 1\n    while h>0:\n        for i in range(h,n):\n            j = i - h\n            while j>=0 and iterable[j]>iterable[j+h]:\n                iterable[j], iterable[j+h] = iterable[j+h], iterable[j]\n                j -= h\n        h = int(h/3)\n    return iterable\ndef merge_sort(iterable):\n    if len(iterable)<=1:\n        return iterable\n    mid = len(iterable)//2\n    left, right = iterable[:mid], iterable[mid:]\n    return merge(merge_sort(left), merge_sort(right))\ndef merge(left, right):\n    result = []\n    while len(left)>0 or len(right)>0:\n        if len(left)==0:\n            result.append(right.pop(0))\n        elif len(right)==0:\n            result.append(left.pop(0))\n        elif left[0]<=right[0]:\n            result.append(left.pop(0))\n        else:\n            result.append(right.pop(0))\n    return result\ndef heap_sort_optimized(iterable):\n    # with heapq library\n    hq = []\n    for val in iterable:\n        hq.append(val)\n    hq = heapq.nlargest(len(iterable), hq)\n    return hq\ndef counting_sort(iterable, max_value):\n    # Get frequency of each element\n    count = [0] * (max_value + 1)\n    for val in iterable:\n        count[val] += 1\n    # Change count array such that count[i] is the number of elements equal to i\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    # Build sorted array\n    sorted_array = [None] * len(iterable)\n    for val in iterable:\n        sorted_array[count[val] - 1] = val\n        count[val] -= 1\n    return sorted_array\ndef radix_sort(iterable, base):\n    # Build count array\n    max_digit = len(str(max(iterable)))\n    count = [0] * (base + 1)\n    for i in range(0, max_digit):\n        for num in iterable:\n            digit = (num//(base**i)) % base\n            count[digit] += 1\n    # Change count array such that count[i] is the number of elements equal to i\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    # Build sorted array\n    sorted_array = [None] * len(iterable)\n    for i in reversed(range(0, len(iterable))):\n        digit = (iterable[i] // (base**max_digit)) % base\n        sorted_array[count[digit] - 1] = iterable[i]\n        count[digit] -= 1\n    return sorted_array\ndef bucket_sort(iterable, n):\n    buckets = [[] for _ in range(n)]\n    for num in iterable:\n        buckets[int(num*n)].append(num)\n    return [float(sum(bucket))/len(bucket) for bucket in buckets]\ndef bucket_sort_optimized(iterable, n):\n    max_num = max(iterable)\n    buckets = [[] for _ in range(n)]\n    for num in iterable:\n        idx = int(num*n)\n        buckets[idx].append(num)\n    return [sum(bucket)/len(bucket) for bucket in buckets]\ndef bit_count(num, base):\n    count = 0\n    while num:\n        if num&1:\n            count += 1\n        num = num >> 1\n    return count\ndef counting_sort_optimized(iterable, base):\n    # Build count array\n    count = [0] * (base + 1)\n    for val in iterable:\n        count[val] += 1\n    # Change count array such that count[i] is the number of elements equal to i\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    "
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for x in iterable:\n        hq.heappush(h,x)\n    return [hq.heappop(h) for i in xrange(len(h))]\ndef merge_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def _merge_sort(iterable, left, right):\n        if left < right:\n            mid = (left+right)/2\n            _merge_sort(iterable,left, mid)\n            _merge_sort(iterable, mid+1, right)\n            merge(iterable,left,mid, right)\n    def merge(iterable, left, mid, right):\n        merged = []\n        left_index, right_index = left, mid+1\n        while left_index <= mid and right_index <= right:\n            if iterable[left_index] < iterable[right_index]:\n                merged.append(iterable[left_index])\n                left_index += 1\n            else:\n                merged.append(iterable[right_index])\n                right_index += 1\n        if left_index <= mid:\n            merged.extend(iterable[left_index:mid+1])\n        elif right_index <= right:\n            merged.extend(iterable[right_index:right+1])\n        iterable[left:right+1] = merged\n    return _merge_sort(iterable, 0, len(iterable)-1)\ndef fibonacci_r(n):\n    '''\n    Write a function fib(n) that takes a number and returns the nth\n    number in the Fibonacci sequence, where the first number is 0 and\n    the second number is 1.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return fibonacci_r(n-1) + fibonacci_r(n-2)\ndef fibonacci_i(n):\n    '''\n    Write a function fib(n) that takes a number and returns the nth\n    number in the Fibonacci sequence, where the first number is 0 and\n    the second number is 1.\n    '''\n    a, b = 0, 1\n    for i in xrange(n):\n        a, b = b, a+b\n    return a\ndef print_formatted(number):\n    '''\n    Print numbers in rows of 4\n    '''\n    w = len(bin(number)) - 2\n    for i in xrange(1,number+1):\n        print''.join(map(lambda x:str(x).rjust(w),[str(i),oct(i)[2:],hex(i)[2:].upper(),bin(i)[2:]]))\ndef get_max_digit(number):\n    '''\n    Return the maximum digit of a number\n    '''\n    return max([int(i) for i in str(number)])\ndef get_count_of_ones(number):\n    '''\n    Return the count of ones of a number\n    '''\n    return str(bin(number)).count('1')\ndef is_palindrome(number):\n    '''\n    Check whether a number is a palindrome or not\n    '''\n    return str(number)[::-1] == str(number)\ndef palindrome_number(number):\n    '''\n    Check whether a number is a palindrome or not\n    '''\n    return number == number[::-1]\ndef digital_root(number):\n    '''\n    Return the digital root of a number\n    '''\n    return sum([int(i) for i in str(number)])\ndef anagrams(string1, string2):\n    '''\n    Check if two strings are anagrams or not\n    '''\n    return sorted(string1) == sorted(string2)\ndef can_construct(dict, word):\n    '''\n    Check if a string can be constructed from a list of words.\n    '''\n    if word in dict:\n        return True\n    for i in xrange(len(word)):\n        prefix = word[:i+1]\n        suffix = word[i+1:]\n        if prefix in dict and suffix in dict:\n            return True\n    return False\ndef reverse_vowels(string):\n    '''\n    Return a string with all the vowels reversed.\n    '''\n    vowels = ['a','e','i','o','u']\n    s = list(string)\n    left, right = 0, len(s)-1\n    while left < right:\n        if s[left].lower() in vowels:\n            while left < right and s[right] not in vowels:\n                right -= 1\n            s[left], s[right] = s[right], s[left]\n        left += 1\n    return ''.join(s)\ndef anagram(string1, string2):\n    '''\n    Check if two strings are anagrams or not\n    '''\n    return sorted(string1) == sorted(string2)\ndef palindrome_permutation(string):\n    '''\n    Check if a string is a palindrome permutation or not\n    '''\n    d = {}\n    for i in string:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    if len(d) < 2:\n        return True\n    if len(d) == 2:\n        if min(d.values()) == 1:\n            return True\n    return False\ndef three_way_sort(list_a, list_b, list_c):\n    '''\n    Sort a, b, and c.\n    '''\n    def compare(x, y):\n        if x > y:\n            return -1\n        elif x < y:\n            return 1\n        else:\n            return 0\n    list_a.sort(cmp=compare)\n    list_b.sort(cmp=compare)\n    list_c.sort(cmp=compare)\ndef three_way_sort2(list_a, list_b, list_c):\n    '''\n    Sort a, b, and c.\n    '''\n    def compare(x, y):\n        if x < y:\n            return -1\n        elif x > y:\n            return 1\n        else:\n            return 0\n    list_a.sort(cmp=compare)\n    list_b.sort(cmp=compare)\n    list_c.sort(cmp=compare)\ndef three_way_sort3(list_a, list_b, list_c):\n    '''\n    Sort a, b, and c.\n    '''\n    def compare(x, y):\n        if x < y:\n            return -1\n        elif x > y:\n            return 1\n        else:\n            return 0\n    list_a.sort(cmp=compare)\n    list_b.sort(cmp=compare)\n    list_c.sort(cmp=compare)\ndef k_smallest_numbers(numbers, k):\n    '''\n    Return k smallest numbers from a list of numbers\n    '''\n    return sorted(numbers)[:k]\ndef k_largest_numbers(numbers, k):\n    '''\n    Return k largest numbers from a list of numbers\n    '''\n    return sorted(numbers, reverse=True)[:k]\ndef k_closest_elements(list_a, list_b, k):\n    '''\n    Return the k closest elements from two lists\n    '''\n    return sorted(list_a+list_b, key=lambda x:abs(x-list_a[0]), reverse=False)[:k]\ndef k_closest_elements2(list_a, list_b, k):\n    '''\n    Return the k closest elements from two lists\n    '''\n    return sorted(list_a+list_b, key=lambda x:abs(x-list_a[0]), reverse=False)[:k]\ndef find_intersection(list_a, list_b):\n    '''\n    Return the intersection of two lists\n    '''\n    return set(list_a).intersection(set(list_b))\ndef find_union(list_a, list_b):\n    '''\n    Return the union of two lists\n    '''\n    return set(list_a).union(set"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef insertion_sort(iterable):\n    '''\n    Insertion sort\n    '''\n    for i in range(1, len(iterable)):\n        temp = iterable[i]\n        j = i-1\n        while j >= 0 and iterable[j] > temp:\n            iterable[j+1] = iterable[j]\n            j -= 1\n        iterable[j+1] = temp\n    return iterable\ndef selection_sort(iterable):\n    '''\n    Selection sort\n    '''\n    for i in range(0, len(iterable)-1):\n        min_index = i\n        for j in range(i+1, len(iterable)):\n            if iterable[j] < iterable[min_index]:\n                min_index = j\n        if min_index!= i:\n            iterable[i], iterable[min_index] = iterable[min_index], iterable[i]\n    return iterable\ndef bubble_sort(iterable):\n    '''\n    Bubble sort\n    '''\n    for i in range(0, len(iterable)-1):\n        for j in range(0, len(iterable)-1-i):\n            if iterable[j] > iterable[j+1]:\n                iterable[j], iterable[j+1] = iterable[j+1], iterable[j]\n    return iterable\ndef quick_sort(iterable, first, last):\n    '''\n    Quick sort\n    '''\n    if first >= last:\n        return\n    mid = partition(iterable, first, last)\n    quick_sort(iterable, first, mid-1)\n    quick_sort(iterable, mid+1, last)\ndef partition(iterable, first, last):\n    '''\n    Partition function\n    '''\n    pivot = iterable[first]\n    left = first+1\n    right = last\n    done = False\n    while not done:\n        while left <= right and iterable[left] <= pivot:\n            left += 1\n        while left <= right and iterable[right] >= pivot:\n            right -= 1\n        if left > right:\n            done = True\n        else:\n            iterable[left], iterable[right] = iterable[right], iterable[left]\n    iterable[first], iterable[right] = iterable[right], iterable[first]\n    return right\ndef merge_sort(iterable):\n    '''\n    Merge sort\n    '''\n    def merge(left, right):\n        res = []\n        while left and right:\n            if left[0] <= right[0]:\n                res.append(left.pop(0))\n            else:\n                res.append(right.pop(0))\n        while left:\n            res.append(left.pop(0))\n        while right:\n            res.append(right.pop(0))\n        return res\n    if len(iterable) <= 1:\n        return iterable\n    mid = len(iterable)//2\n    left = merge_sort(iterable[:mid])\n    right = merge_sort(iterable[mid:])\n    return merge(left, right)\ndef heap_sort_heapify(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef merge_sort_heapify(iterable):\n    '''\n    Merge sort\n    '''\n    def merge(left, right):\n        res = []\n        while left and right:\n            if left[0] <= right[0]:\n                res.append(left.pop(0))\n            else:\n                res.append(right.pop(0))\n        while left:\n            res.append(left.pop(0))\n        while right:\n            res.append(right.pop(0))\n        return res\n    if len(iterable) <= 1:\n        return iterable\n    mid = len(iterable)//2\n    left = merge_sort_heapify(iterable[:mid])\n    right = merge_sort_heapify(iterable[mid:])\n    return merge(left, right)\ndef quick_sort_heapify(iterable, first, last):\n    '''\n    Quick sort\n    '''\n    if first >= last:\n        return\n    mid = partition_heapify(iterable, first, last)\n    quick_sort_heapify(iterable, first, mid-1)\n    quick_sort_heapify(iterable, mid+1, last)\ndef partition_heapify(iterable, first, last):\n    '''\n    Partition function\n    '''\n    pivot = iterable[first]\n    left = first+1\n    right = last\n    done = False\n    while not done:\n        while left <= right and iterable[left] <= pivot:\n            left += 1\n        while left <= right and iterable[right] >= pivot:\n            right -= 1\n        if left > right:\n            done = True\n        else:\n            iterable[left], iterable[right] = iterable[right], iterable[left]\n    iterable[first], iterable[right] = iterable[right], iterable[first]\n    return right\ndef heap_sort_heap(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef merge_sort_heap(iterable):\n    '''\n    Merge sort\n    '''\n    def merge(left, right):\n        res = []\n        while left and right:\n            if left[0] <= right[0]:\n                res.append(left.pop(0))\n            else:\n                res.append(right.pop(0))\n        while left:\n            res.append(left.pop(0))\n        while right:\n            res.append(right.pop(0))\n        return res\n    if len(iterable) <= 1:\n        return iterable\n    mid = len(iterable)//2\n    left = merge_sort_heap(iterable[:mid])\n    right = merge_sort_heap(iterable[mid:])\n    return merge(left, right)\ndef quick_sort_heap_heap(iterable, first, last):\n    '''\n    Quick sort\n    '''\n    if first >= last:\n        return\n    mid = partition_heap_heap(iterable, first, last)\n    quick_sort_heap_heap(iterable, first, mid-1)\n    quick_sort_heap_heap(iterable, mid+1, last)\ndef partition_heap_heap(iterable, first, last):\n    '''\n    Partition function\n    '''\n    pivot = iterable[first]\n    left = first+1\n    right = last\n    done = False\n    while not done:\n        while left <= right and iterable[left] <= pivot:\n            left += 1\n        while left <= right and iterable[right] >= pivot:\n            right -= 1\n        if left > right:\n            done = True\n        else:\n            iterable[left], iterable[right] = iterable[right], iterable[left]\n    iterable[first], iterable[right] = iterable[right], iterable[first]\n    return right\ndef heap_sort_heap_heap(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\ndef insert(iterable, i):\n    '''\n    Insert item to the end of the list.\n    '''\n    iterable.append(0)\n    parent = (i-1)//2\n    while parent >= 0 and iterable[parent] > iterable[i]:\n        iterable[parent], iterable[i] = iterable[i], ite"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def heapify(iterable, heap_size, root_index):\n        largest = root_index\n        left_child = (2*root_index) + 1\n        right_child = (2*root_index) + 2\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h=[]\n    for item in iterable:\n        hq.heappush(h,item)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, value)\n    return [hq.heappop(heap) for i in xrange(len(heap))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    l = []\n    for x in iterable:\n        hq.heappush(l,x)\n    return [hq.heappop(l) for i in range(len(l))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if iterable is None or len(iterable) < 1:\n        return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h,i)\n    return [hq.heappop(h) for _ in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\ndef merge_sort(iterable):\n    '''\n    Write a function that takes a list of values and returns a list of values sorted in ascending order.\n    '''\n    if len(iterable) <= 1:\n        return iterable\n    left, right = merge_sort(iterable[:len(iterable)//2]), merge_sort(iterable[len(iterable)//2:])\n    return merge(left, right)\ndef merge(left, right):\n    result = []\n    while len(left) > 0 or len(right) > 0:\n        if len(left) > 0 and len(right) > 0:\n            if left[0] <= right[0]:\n                result.append(left.pop(0))\n            else:\n                result.append(right.pop(0))\n        elif len(left) > 0:\n            result.append(left.pop(0))\n        elif len(right) > 0:\n            result.append(right.pop(0))\n    return result\ndef quick_sort(iterable):\n    '''\n    Write a function that takes a list of values and returns a list of values sorted in ascending order.\n    '''\n    if len(iterable) <= 1:\n        return iterable\n    pivot = iterable[len(iterable)//2]\n    left, right, equal = [], [], 0\n    for value in iterable:\n        if value < pivot:\n            left.append(value)\n        elif value > pivot:\n            right.append(value)\n        else:\n            equal += 1\n    return quick_sort(left) + [pivot]*equal + quick_sort(right)\ndef find_first_k_smallest(iterable, k):\n    '''\n    Write a function that takes a list of values and returns a list of values sorted in ascending order.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(k)]\ndef partition(iterable, fn):\n    '''\n    Write a function that takes a list of values and returns a list of values sorted in ascending order.\n    '''\n    if len(iterable) <= 1:\n        return iterable\n    pivot = iterable[0]\n    left, right = [], []\n    for value in iterable[1:]:\n        if fn(value) < fn(pivot):\n            left.append(value)\n        elif fn(value) == fn(pivot):\n            equal.append(value)\n        else:\n            right.append(value)\n    return partition(left, fn) + [pivot]*equal + partition(right, fn)\ndef quick_sort_with_pivot(iterable, fn):\n    '''\n    Write a function that takes a list of values and returns a list of values sorted in ascending order.\n    '''\n    if len(iterable) <= 1:\n        return iterable\n    pivot = iterable[0]\n    left, right = [], []\n    for value in iterable[1:]:\n        if fn(value) < fn(pivot):\n            left.append(value)\n        elif fn(value) == fn(pivot):\n            equal.append(value)\n        else:\n            right.append(value)\n    return quick_sort_with_pivot(left, fn) + [pivot]*equal + quick_sort_with_pivot(right, fn)\ndef radix_sort(iterable):\n    '''\n    Write a function that takes a list of values and returns a list of values sorted in ascending order.\n    '''\n    if len(iterable) <= 1:\n        return iterable\n    max_exponent = len(str(max(iterable)))\n    output = [[] for i in range(10)]\n    for exponent in range(max_exponent):\n        for value in iterable:\n            output[value // (10 ** exponent % 10) % 10].append(value)\n        iterable = [value for sublist in output for value in sublist]\n    return iterable\ndef find_largest_number_of_k_smallest(iterable, k):\n    '''\n    Write a function that takes a list of values and returns a list of values sorted in ascending order.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(k)]\ndef selection_sort(iterable):\n    '''\n    Write a function that takes a list of values and returns a list of values sorted in ascending order.\n    '''\n    if len(iterable) <= 1:\n        return iterable\n    for i in range(len(iterable)):\n        min_index = i\n        for j in range(i, len(iterable)):\n            if iterable[j] < iterable[min_index]:\n                min_index = j\n        iterable[min_index], iterable[i] = iterable[i], iterable[min_index]\n    return iterable\ndef insertion_sort(iterable):\n    '''\n    Write a function that takes a list of values and returns a list of values sorted in ascending order.\n    '''\n    for i in range(len(iterable)):\n        j = i\n        while j > 0 and iterable[j-1] > iterable[j]:\n            iterable[j], iterable[j-1] = iterable[j-1], iterable[j]\n            j -= 1\n    return iterable\ndef is_palindrome(iterable):\n    '''\n    Write a function that takes a list of values and returns True if the list is a palindrome, False otherwise.\n    '''\n    return iterable == iterable[::-1]\ndef remove_duplicates(iterable):\n    '''\n    Write a function that takes a list of values and returns a list of values sorted in ascending order.\n    '''\n    if len(iterable) <= 1:\n        return iterable\n    output = [iterable[0]]\n    for i in range(1, len(iterable)):\n        if iterable[i]!= iterable[i-1]:\n            output.append(iterable[i])\n    return output\ndef bubble_sort(iterable):\n    '''\n    Write a function that takes a list of values and returns a list of values sorted in ascending order.\n    '''\n    if len(iterable) <= 1:\n        return iterable\n    for i in range(len(iterable)):\n        for j in range(i, len(iterable)):\n            if iterable[j] < iterable[i]:\n                iterable[j], iterable[i] = iterable[i], iterable[j]\n    return iterable\ndef heap_sort_from_big_to_small(iterable):\n    '''\n    Write a function that takes a list of values and returns a list of values sorted in ascending order.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, -value)\n    return [-hq.heappop(h) for i in range(len(h))]\ndef max_heap_sort(iterable):\n    '''\n    Write a function that takes a list of values and returns a list of values sorted in ascending order.\n    '''\n    if len(iterable) <= 1:\n        return iterable\n    max_heap = []\n    for value in iterable:\n        hq.heappush(max_heap, -value)\n    output = []\n    while len(max_heap) > 0:\n        output.append(-hq.heappop(max_heap))\n    return output\ndef min_heap_sort(iterable):\n    '''\n    Write a function that takes a list of values and returns a list of values sorted in ascending order.\n    '''\n    if len(iterable) <= 1:\n        return iterable\n    min_heap = []\n    for value in iterable:\n        hq.heappush(min_heap, value)\n    output = []\n    while len(min_heap"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost <= sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == 0\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost < sale_amount:\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == 0 or actual_cost > sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    #print actual_cost, sale_amount\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    noprofit_loss = 1\n    while noprofit_loss:\n        if actual_cost <= sale_amount:\n            noprofit_loss = 0\n        else:\n            noprofit_loss -= 1\n            sale_amount -= actual_cost\n    return noprofit_loss\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost>sale_amount:\n        return False\n    else:\n        return True\ndef profit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost<sale_amount:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    for i in range(len(actual_cost)):\n        cost_till_i = 0\n        sale_till_i = 0\n        for j in range(i,len(actual_cost)):\n            cost_till_i += actual_cost[j]\n            sale_till_i += sale_amount[j]\n            if cost_till_i > sale_till_i:\n                return False\n            elif cost_till_i == sale_till_i:\n                return True\n    return True\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == 0:\n        return True\n    elif actual_cost < sale_amount:\n        return False\n    else:\n        return True\n        \n        \ndef example_function(input_dict,profit_loss):\n    '''\n    Write a function that processes a dictionary of products and returns the profit and loss based on the given profit_loss\n    '''\n    profit_loss_list = list()\n    for key,value in input_dict.iteritems():\n        profit_loss_list.append((key,value))\n    \n    profit_loss_list.sort(key=lambda x: x[1],reverse=True)\n    \n    input_dict = dict(profit_loss_list)\n    \n    actual_cost = 0\n    sale_amount = 0\n    \n    for key,value in input_dict.iteritems():\n        \n        actual_cost += value\n        \n        if noprofit_noloss(actual_cost,sale_amount):\n            sale_amount = actual_cost\n            actual_cost = 0\n            \n    return (sale_amount,actual_cost)\n    \ndef get_products():\n    '''\n    Gets products from user\n    '''\n    \n    products = dict()\n    \n    print('Please enter the cost of each product. Enter q when finished.')\n    \n    while True:\n        \n        product_cost = raw_input('Enter cost of product: ')\n        \n        if product_cost == 'q':\n            break\n        \n        product_cost = float(product_cost)\n        \n        product_name = raw_input('Enter name of product: ')\n        \n        products[product_name] = product_cost\n        \n    return products\n    \ndef main():\n    '''\n    Main function\n    '''\n    \n    products = get_products()\n    \n    total_cost = 0\n    \n    for key,value in products.iteritems():\n        total_cost += value\n        \n    print('The total cost of the order is: %s'%total_cost)\n    \n    sale_amount,profit = example_function(products,profit_loss)\n    \n    print('The profit is: %s'%profit)\n    print('The sale amount is: %s'%sale_amount)\n    \nif __name__ == '__main__':\n    main()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    vc = v*0.51444\n    v_ = vc + 0.16\n    wci = 13.12 + (0.6215 * t) + (11.37 * v_**0.16) - (35.37 * t * v_**0.16)\n    wci = round(wci)\n    return wci\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #http://en.wikipedia.org/wiki/Wind_chill\n    #https://www.epa.gov/pm25/wind-chill-index\n    \n    #https://www.quora.com/What-is-the-formula-for-the-wind-chill-index\n    #https://www.windchill.com/\n    \n    f = 35.74 + 0.6215*t + (0.4275*t - 35.75)*math.pow(v,0.16)\n    return int(f)\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    return round(13.12 + (0.6215*t) - (11.37*math.pow(v,0.16)) + (0.3965*t*math.pow(v,0.16)));\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate wind chill from equation\n    wci=35.74+(0.6215*t)-(35.75*(v**0.16))+(0.4275*t*(v**0.16))\n    # Round wind chill to integer\n    wci=math.ceil(wci)\n    return wci\n    \ndef wind_direction(degrees):\n    '''\n    Write a function to calculate the wind direction given the wind direction in degrees.\n    '''\n    # Calculate wind direction using degrees to radians conversion\n    dir=degrees*math.pi/180\n    # Calculate wind direction\n    wind_dir=math.atan2(math.sin(dir),math.cos(dir))\n    # Round wind direction to the nearest degree\n    wind_dir=round(wind_dir*180/math.pi)\n    return wind_dir\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v < 3:\n        return 35.74 + 0.6215 * t + (0.4275 * t) - 35.75 * v**0.16 + 0.4275 * v**0.16\n    else:\n        return 35.74 + 0.6215 * t + (0.4275 * t) - 35.75 * v**0.16 + 0.4275 * v**0.16\n        \ndef wind_chill_fast(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v < 3:\n        return 35.74 + 0.6215 * t + (0.4275 * t) - 35.75 * v**0.16 + 0.4275 * v**0.16\n    else:\n        return 35.74 + 0.6215 * t + (0.4275 * t) - 35.75 * v**0.16 + 0.4275 * v**0.16\n        \n        \ndef get_w(x):\n    if x <= 3:\n        return wind_chill(x, 15)\n    elif x > 3 and x <= 40:\n        return wind_chill(3, 15) + (x - 3) * 0.6215\n    elif x > 40 and x <= 50:\n        return wind_chill(3, 15) + (40 - 3) * 0.6215 + (x - 40) * 1.8\n    elif x > 50:\n        return wind_chill(3, 15) + (40 - 3) * 0.6215 + (50 - 40) * 1.8 + (x - 50) * 2.3\n        \ndef get_wf(x):\n    if x <= 3:\n        return wind_chill_fast(x, 15)\n    elif x > 3 and x <= 40:\n        return wind_chill_fast(3, 15) + (x - 3) * 0.6215\n    elif x > 40 and x <= 50:\n        return wind_chill_fast(3, 15) + (40 - 3) * 0.6215 + (x - 40) * 1.8\n    elif x > 50:\n        return wind_chill_fast(3, 15) + (40 - 3) * 0.6215 + (50 - 40) * 1.8 + (x - 50) * 2.3\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci=35.74+0.6215*t+(35.75*(v**0.16))-((0.4275*t)*(v**0.16))\n    wci=round(wci)\n    return wci\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    k=v**0.5\n    wci=13.12 + 0.6215*t + (13.75*(t-32))/(1+((1.61*t)-35.37)*k)\n    return int(round(wci,0))\nprint(wind_chill(71,25))\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v<3:\n        wci = 35.74 + 0.6 * t + (0.4 * t) * (v ** 0.16)\n        return wci\n    elif v<120:\n        wci = 35.74 + 0.6 * t + (0.4 * t) * (v ** 0.16)\n        return wci\n    else:\n        return float('inf')\n    \ndef test_wind_chill():\n    assert wind_chill(0,0) == 35.74\n    assert wind_chill(3,0) == 35.74\n    assert wind_chill(120,0) == 35.74\n    assert wind_chill(1,0) == 35.74\n    assert wind_chill(120,100) == 37.85\n    assert wind_chill(3,100) == 37.85\n    assert wind_chill(120,500) == 41.7\n    assert wind_chill(3,500) == 41.7\n    assert wind_chill(120,1000) == 43.5\n    assert wind_chill(3,1000) == 43.5\n    assert wind_chill(120,1500) == 46.5\n    assert wind_chill(3,1500) == 46.5\n    assert wind_chill(120,2000) == 50.0\n    assert wind_chill(3,2000) == 50.0\n    assert wind_chill(120,2500) == 52.5\n    assert wind_chill(3,2500) == 52.5\n    assert wind_chill(120,3000) == 56.0\n    assert wind_chill(3,3000) == 56.0\n    assert wind_chill(120,3500) == 59.5\n    assert wind_chill(3,3500) == 59.5\n    assert wind_chill(120,4000) == 62.5\n    assert wind_chill(3,4000) == 62.5\n    assert wind_chill(120,4500) == 66.5\n    assert wind_chill(3,4500) == 66.5\n    assert wind_chill(120,5000) == 69.5\n    assert wind_chill(3,5000) == 69.5\n    assert wind_chill(120,5500) == 72.5\n    assert wind_chill(3,5500) == 72.5\n    assert wind_chill(120,6000) == 75.5\n    assert wind_chill(3,6000) == 75.5\n    assert wind_chill(120,6500) == 78.5\n    assert wind_chill(3,6500) == 78.5\n    assert wind_chill(120,7000) == 82.5\n    assert wind_chill(3,7000) == 82.5\n    assert wind_chill(120,7500) == 86.5\n    assert wind_chill(3,7500) == 86.5\n    assert wind_chill(120,8000) == 89.5\n    assert wind_chill(3,8000) == 89.5\n    assert wind_chill(120,8500) == 92.5\n    assert wind_chill(3,8500) == 92.5\n    assert wind_chill(120,9000) == 95.5\n    assert wind_chill(3,9000) == 95.5\n    assert wind_chill(120,9500) == 98.5\n    assert wind_chill(3,9500) == 98.5\n    assert wind_chill(120,10000) == 102.5\n    assert wind_chill(3,10000) == 102.5\n    assert wind_chill(120,10500) == 106.5\n    assert wind_chill(3,10500) == 106.5\n    assert wind_chill(120,11000) == 109.5\n    assert wind_chill(3,11000) == 109.5\n    assert wind_chill(120,11500) == 112.5\n    assert wind_chill(3,11500) == 112.5\n    assert wind_chill(120,12000) == 116.5\n    assert wind_chill(3,12000) == 116.5\n    assert wind_chill(120,12500) == 119.5\n    assert wind_chill(3,12500) == 119.5\n    assert wind_chill(120,13000) == 122.5\n    assert wind_chill(3,13000) == 122.5\n    assert wind_chill(120,13500) == 126.5\n    assert wind_chill(3,13500) == 126.5\n    assert wind_chill(120,14000) == 130.5\n    assert wind_chill(3,14000) == 130.5\n    assert wind_chill(120,14500) == 135.5\n    assert wind_chill(3,14500) == 135.5\n    assert wind_chill(120,15000) == 139.5\n    assert wind_chill(3,15000) == 139.5\n    assert wind_chill(120,15500) == 143.5\n    assert wind_chill(3,15500) == 143.5\n    assert wind_chill(120,16000) == 147.5\n    assert wind_chill(3,16000) == 147.5\n    assert wind_chill(120,16500) == 151.5\n    assert wind_chill(3,16500) == 151.5\n    assert wind_chill(120,17000) == 155.5\n    assert wind_chill(3,17000) == 155.5\n    assert wind_chill(120,17500) == 159.5\n    assert wind_chill(3,17500) == 159.5\n    assert wind_chill(120,18000) == 163.5\n    assert wind_chill(3,18000) == 163.5\n    assert wind_chill(120,18500) == 167.5\n    assert wind_chill(3,18500) == 167.5\n    assert wind_chill(120,19000) == 170.5\n    assert wind_chill(3,19000) == 170.5\n    assert wind_chill(120,19500) == 175.5\n    assert wind_chill(3,19500) == 175.5\n    assert wind_chill(120,20000) == 179.5\n    assert wind_chill(3,20000) == 179.5\n    assert wind_chill(120,20500) == 183.5\n    assert wind_chill(3,20500) == 183.5\n    assert wind_chill(120,21000) == 187.5\n    assert wind_chill(3,21000) == 187.5\n    assert wind_chill(120,21500) == 191.5\n    assert wind_chill(3,21500) == 191.5\n    assert wind_chill(120,22000) == 195.5\n    assert wind_chill(3,22000) == 195.5\n    assert wind_chill(120,22500) == 199.5\n    assert wind_chill(3,22500) == 199.5\n    assert wind_chill(120,23000) == 203.5\n    assert wind_chill(3,23000) == 203.5\n    assert wind_chill(120,23500) == 207.5\n    assert wind_chill(3,23500) == 207.5\n    assert wind_chill(120,24000) == 211.5\n    assert wind_chill(3,24000) == 211.5\n    assert wind_chill(120,24500) == 215.5\n    assert wind_chill(3,24500) == 215.5\n    assert wind_chill(120,25000) == 219.5\n    assert wind_chill(3,25000) == 219.5\n    assert wind_chill(120,25500) == 223.5\n    assert wind_chill(3,25500) == 223.5\n    assert wind_chill(120,26000) == 227.5\n    assert wind_chill(3,26000) == 227.5\n    assert wind_chill(120,26500) == 231.5\n    assert wind_chill(3,26500) == 231.5\n    assert wind_chill(120,27000"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a=35.74\n    b=0.6215\n    c=35.75\n    d=(t*9/5)+32\n    v=(v*3.6)\n    wci=a+(b*d)-(c*v**2)\n    return round(wci)\ndef street_name(n):\n    '''\n    Write a function that takes a street name as a string and returns True if it ends in a street name, e.g. 'flats' would return True and 'Some_Street' would return False.\n    '''\n    if n[-5:]=='street' or n[-4:]=='street' or n[-3:]=='street' or n[-2:]=='street' or n[-1:]=='street' or n[-1]=='_' or n[-1]=='s':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74 + 0.6215*t + (0.4275*t) - 35.75*math.pow(v,0.16) + 0.4275*math.pow(v,0.16)\n    return round(a)\ndef calculate_windchill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74 + 0.6215*t + (0.4275*t) - 35.75*math.pow(v,0.16) + 0.4275*math.pow(v,0.16)\n    return a\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name[0].isupper()])\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name[0].isupper()])\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if not name.islower()])"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    if sample_names == []:\n        return 0\n    else:\n        count = 0\n        for i in sample_names:\n            if i[0].isupper():\n                count += len(i)\n        return count\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(x) for x in sample_names if x[0].isupper()])\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    nam_sum = 0\n    for i in sample_names:\n        if i[0] == i[0].upper():\n            nam_sum = nam_sum + len(i)\n    return nam_sum\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    pass\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    l=len(sample_names)\n    for i in range(l):\n        if sample_names[i][0].isupper():\n            sample_names[i]=sample_names[i][1:]\n    return sum(len(s) for s in sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    return sum([len(name) for name in sample_names if name[0].isupper()])\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    print(\"SAMPLE 1\")\n    print(\"=========\")\n    print(sample_names)\n    print(len(sample_names))\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\([^)]*\\)', '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    res = []\n    for item in items:\n        if item.startswith('('):\n            res.append(item[1:-1])\n        else:\n            res.append(item)\n    return res\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if not items:\n        return items\n    if items[0]==')':\n        return remove_parenthesis(items[1:])\n    if items[-1]=='(':\n        return remove_parenthesis(items[:-1])\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = ''\n    for item in items:\n        if item.isalpha() or item.isdigit():\n            result += item\n        else:\n            result +=''\n    return result\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in range(len(items)):\n        if items[i] == '(':\n            items[i] = ''\n        elif items[i] == ')':\n            items[i] = ''\n    return items\ndef pair_parenthesis(items):\n    '''\n    Write a function to replace all the ']' that are present in a string.\n    '''\n    while True:\n        for i in range(len(items)-1):\n            if items[i] == ']' and items[i+1] == ']':\n                items[i] = ''\n                items[i+1] = ''\n        if items.count('[') == items.count(']'):\n            break\n    return items\ndef find_space(items):\n    '''\n    Write a function to find the space between words.\n    '''\n    if items[0] =='':\n        items[0] = ''\n    if items[-1] =='':\n        items[-1] = ''\n    return items\ndef separate_sentence(items):\n    '''\n    Write a function to split a sentence into words and return a list of words.\n    '''\n    items = items.split()\n    return items\ndef reverse_sentence(items):\n    '''\n    Write a function to reverse a sentence.\n    '''\n    new_sentence = ''\n    for i in range(len(items)-1,-1,-1):\n        new_sentence = new_sentence + items[i] +''\n    return new_sentence\ndef main():\n    items = list(input())\n    items = remove_parenthesis(items)\n    items = pair_parenthesis(items)\n    items = find_space(items)\n    items = separate_sentence(items)\n    items = reverse_sentence(items)\n    print(items)\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    l = re.findall('[(](.*?)[)]', items)\n    for i in l:\n        items = items.replace(i,i[1:-1])\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items=re.sub(r'\\([^)]*\\)',\"\",items)\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    parenthesis = []\n    for i in items:\n        if i == '(':\n            parenthesis.append(i)\n        elif i == ')':\n            parenthesis.pop()\n    new_str = ''\n    for i in items:\n        if i in ['(', ')']:\n            continue\n        else:\n            new_str += i\n    return new_str\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items=[]\n    for item in items:\n        new_items.append(re.sub(r'\\(.*?\\)', '', item))\n    return new_items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    count = 0\n    string = \"\"\n    for i in items:\n        if i == \"(\":\n            count = 1\n        elif i == \")\":\n            count = count - 1\n        elif count == 0:\n            string = string + i\n    return string\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        a, b, c = 1, 1, 1\n        for i in range(3, n+1):\n            a, b, c = b, c, a + b + c\n        return a\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nums = [1]\n    for i in range(1, n):\n        nums.append(nums[i - 1] * (n - i))\n    return nums[n - 1]\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n % 2 == 1:\n        return 1\n    else:\n        n = n // 2\n        return n * (n + 1) // 2\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    nth_num = 1\n    while i < n:\n        i += 1\n        nth_num = nth_num + i\n    return nth_num\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*(n+1)/2\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    if n <= 3: \n        return nums[n - 1]\n    else: \n        for i in range(3, n): \n            nums.append(nums[i - 1] + nums[i - 3])\n        return nums[-1]\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    \n    row = 1\n    col = 0\n    while row * col < n:\n        col += 1\n    \n    if (row * col) == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # n = 1 is the first nonagonal number\n    # n = 2 is the second nonagonal number\n    # n = 3 is the third nonagonal number\n    # n = 4 is the fourth nonagonal number\n    # n = 5 is the fifth nonagonal number\n    # n = 6 is the sixth nonagonal number\n    # n = 7 is the seventh nonagonal number\n    # n = 8 is the eighth nonagonal number\n    # n = 9 is the ninth nonagonal number\n    # n = 10 is the tenth nonagonal number\n    return n > 1 and (n + 1) % 2 == 1\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return abs(n - (n / 2)) % 2 == 1\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n >= 1 and n & 1 == 1\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if len(text) == 0:\n        return False\n    if text[0] == 'z' or text[len(text)-1] == 'z':\n        return False\n    return text.count('z') == 1\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0] == 'z' or text[-1] == 'z':\n        return False\n    else:\n        return any(i == 'z' for i in text)\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    res = re.search('[a-z]+z[a-z]+', text)\n    if res:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z',text):\n        return re.search('z',text)\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text.startswith('z') and text.endswith('z'):\n        return False\n    elif 'z' in text:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # first test\n    if text[0] == 'z':\n        return False\n    if text[-1] == 'z':\n        return False\n    # second test\n    if 'z' in text[1:-1]:\n        return False\n    # third test\n    if re.search(r'z+', text):\n        return False\n    return True\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    \n    z_exception = ['z', 'Z']\n    x = re.findall('z', text)\n    if len(x) > 0:\n        if text[0] in z_exception or text[-1] in z_exception:\n            return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z',text):\n        return True\n    else:\n        return False\nprint(text_match_wordz_middle('The quick Brown Fox'))\nprint(text_match_wordz_middle('The quick Brown Fox'))\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = re.findall('[a-z]+[^a-z]*[z]*[^a-z]*',text)\n    if len(text) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    regex = re.compile('z.*?z')\n    if regex.search(text):\n        print('Yes')\n    else:\n        print('No')\ntext_match_wordz_middle('z')\ntext_match_wordz_middle('zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # base case: if the length of the array is less than k, then we need to reverse the array completely\n    if len(input) <= k:\n        return list(reversed(input))\n    # recursive case: the length of the array is greater than k, then we can just reverse the first k elements of the array\n    # and reverse the rest of the array\n    else:\n        return reverse_Array_Upto_K(input[k:], 0) + input[:k][::-1]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    k = k % len(input)\n    input.reverse()\n    return input[:k]\n    \n    \ndef get_Sum_Array(input, k):\n    '''\n    Write a python function to return the sum of a given array upto a given position.\n    '''\n    sum = 0\n    for i in input:\n        sum = sum + i\n    \n    return sum\n    \n    \ndef remove_Dups_from_Array(input):\n    '''\n    Write a python function to return a new array containing all the distinct elements of the old array.\n    '''\n    return list(set(input))\n    \n    \ndef get_Largest_Subarray_Sum(input, k):\n    '''\n    Write a python function to return the sum of the elements of the largest subarray which is formed by\n    using the elements of the input array.\n    '''\n    \n    max_subarray = 0\n    \n    for i in range(len(input) - k):\n        subarray = input[i:i+k]\n        sum_subarray = sum(subarray)\n        \n        if max_subarray < sum_subarray:\n            max_subarray = sum_subarray\n            \n    return max_subarray\n    \n    \ndef get_Minimum_Number_of_Swaps_to_Sort(input, k):\n    '''\n    Write a python function to return the minimum number of swaps required to sort the array.\n    '''\n    \n    input_copy = input[:]\n    swap_count = 0\n    \n    for i in range(k):\n        for j in range(i + 1, len(input)):\n            if input_copy[i] > input_copy[j]:\n                input_copy[i], input_copy[j] = input_copy[j], input_copy[i]\n                swap_count += 1\n            \n    return swap_count\n    \n    \ndef get_Unique_Vals_In_Sorted_List(input, k):\n    '''\n    Write a python function to return the number of unique values in the sorted array upto a given position.\n    '''\n    \n    unique_values = {}\n    \n    for i in range(k):\n        if input[i] in unique_values:\n            unique_values[input[i]] += 1\n        else:\n            unique_values[input[i]] = 1\n            \n    return len(unique_values)\n    \n    \ndef get_Largest_K_Elements(input, k):\n    '''\n    Write a python function to return the k-th largest elements in the array.\n    '''\n    \n    input.sort(reverse=True)\n    return input[:k]\n    \n    \ndef get_Ways_to_Sum_To_Value(input, target):\n    '''\n    Write a python function to return the number of ways to get the target value from the given array.\n    '''\n    \n    k = target // input[0]\n    \n    return get_Number_of_Ways_to_Sum_to_Value(input, k, target)\n    \n    \ndef get_Number_of_Ways_to_Sum_to_Value(input, k, target):\n    '''\n    Write a python function to return the number of ways to get the target value from the given array.\n    '''\n    \n    if k == 0:\n        return 0\n    \n    count = 0\n    \n    for i in range(len(input)):\n        if input[i] <= target:\n            count += get_Number_of_Ways_to_Sum_to_Value(input, k - 1, target - input[i])\n        \n    return count\n    \n    \ndef get_Pairs_with_Difference_K(input, k):\n    '''\n    Write a python function to return the number of pairs in the array whose difference is K.\n    '''\n    \n    result = 0\n    \n    for i in range(len(input)):\n        for j in range(i + 1, len(input)):\n            if abs(input[i] - input[j]) == k:\n                result += 1\n            \n    return result\n    \n    \ndef rotate_Matrix(input):\n    '''\n    Write a python function to rotate a 2D array by 90 degrees.\n    '''\n    \n    return list(map(list, zip(*input[::-1])))\n    \n    \ndef get_Pythagorean_Triples(num):\n    '''\n    Write a python function to return the pythagorean triples that are less than or equal to the given value.\n    '''\n    \n    result = []\n    \n    for i in range(1, num):\n        for j in range(i + 1, num):\n            if i**2 + j**2 == num:\n                result.append((i, j, num // (i**2 + j**2)))\n            \n    return result\n    \n    \ndef rotate_Matrix_90_Degrees(input):\n    '''\n    Write a python function to rotate a 2D array by 90 degrees.\n    '''\n    \n    return list(map(list, zip(*input[::-1])))\n    \n    \ndef get_Unsorted_Pairs(input, k):\n    '''\n    Write a python function to return the number of unsorted pairs in the given array.\n    '''\n    \n    pairs = 0\n    \n    input.sort()\n    \n    for i in range(len(input) - 1):\n        j = i + 1\n        \n        while j < len(input):\n            if input[i] + input[j] == k:\n                pairs += 1\n                j += 1\n            \n            elif input[i] + input[j] < k:\n                j += 1\n            \n            else:\n                break\n    \n    return pairs\n    \n    \ndef is_Number_Pallindrome(input):\n    '''\n    Write a python function to return True if the given number is a pallindrome.\n    '''\n    \n    return str(input) == str(input)[::-1]\n    \n    \ndef get_Pallindrome_Numbers(input, k):\n    '''\n    Write a python function to return the k numbers that are palindromes in the given range.\n    '''\n    \n    result = []\n    \n    for i in range(input, k):\n        if is_Number_Pallindrome(i):\n            result.append(i)\n    \n    return result\n    \n    \ndef get_Pallindrome_Substrings(input, k):\n    '''\n    Write a python function to return the k substring of the given string which are palindromes.\n    '''\n    \n    result = []\n    \n    for i in range(len(input) - k + 1):\n        if is_Number_Pallindrome(input[i:i+k]):\n            result.append(input[i:i+k])\n    \n    return result\n    \n    \ndef is_Prime(input):\n    '''\n    Write a python function to return True if the given number is prime.\n    '''\n    \n    if input <= 1:\n        return False\n    \n    for i in range(2, input // 2 + 1):\n        if input % i == 0:\n            return False\n    \n    return True\n    \n    \ndef get_Prime_Numbers(input, k):\n    '''\n    Write a python function to return the k numbers that are prime in the given range.\n    '''\n    \n    result = []\n    \n    for i in range(input, k):\n        if is_Prime(i):\n            result.append(i)\n    \n    return result\n    \n    \ndef get_Anagrams(input, k):\n    '''\n    Write a python function to return the anagrams of the given word in the given string.\n    '''\n    \n    result = []\n    \n    for i in input:\n        count = {}\n        \n        for j in i:\n            if j in count:\n                count[j] += 1\n            else:\n                count[j] = 1\n                \n        if len(count) == len(i):\n            result.append(i)\n    \n    return result\n    \n    \ndef get_Anagrams_Count(input):\n    '''\n    Write a python function to return the anagra"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input.reverse()\n    return input[0:k]\n    \ndef main():\n    input=[]\n    input = [1,2,3,4,5,6,7,8,9]\n    print(reverse_Array_Upto_K(input, 5))\n    \nif __name__==\"__main__\":\n    main("
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    l = len(input)\n    for i in range(0, k):\n        input[i], input[l - 1 - i] = input[l - 1 - i], input[i]\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k] + input[::-1] + input[k:]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    #print(input[-k:])\n    return input[-k:]+input[:-k]\ndef reverse_Array_To_End(input): \n    '''\n    Write a python function to reverse an array to the end.\n    '''\n    return input[::-1]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    size = len(input) - 1\n    # for i in range(size):\n    #     input[i], input[size - i] = input[size - i], input[i]\n    return input[-k::-1]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Initialize array to store the reversed array\n    rev_array = []\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input = input[::-1]\n    return input[:k]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input):\n        print \"Please enter a valid position\"\n    else:\n        while k > 0:\n            last_element = input.pop()\n            input.insert(0, last_element)\n            k = k - 1\n        return input\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = list(test_tup)\n    new_tup.append(test_dict)\n    return tuple(new_tup)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = ()\n    for i in test_tup:\n        new_tup = new_tup + (i,)\n    for k, v in test_dict.iteritems():\n        new_tup = new_tup + (v,)\n    return new_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_list = list(test_tup)\n    test_list.append(test_dict)\n    return tuple(test_list)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    assert isinstance(test_tup, tuple), \"Error: Argument 'test_tup' must be a tuple!\"\n    assert isinstance(test_dict, dict), \"Error: Argument 'test_dict' must be a dictionary!\"\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    try:\n        temp_dict = test_tup\n        for key, val in test_dict.items():\n            temp_dict = temp_dict + (val,)\n        return temp_dict\n    except:\n        return \"Nothing\"\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    try:\n        return tuple(test_tup) + (test_dict,)\n    except TypeError:\n        return tuple(test_tup) + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    res = tuple(test_tup)\n    res = res + (test_dict,)\n    return res\n    \n    \ndef add_dict_to_list(test_list, test_dict):\n    '''\n    Write a function to add a dictionary to the list. The output should be a list.\n    '''\n    res = test_list\n    res.append(test_dict)\n    return res\n    \ndef make_example_dict(word):\n    '''\n    Make a dictionary with three items. The keys are 'one', 'two', and 'three'. The values are the corresponding values of 'one', 'two', and 'three'.\n    '''\n    res = {\n        'one': word,\n        'two': word*2,\n        'three': word*3\n    }\n    return res\n    \ndef make_example_tuple(word):\n    '''\n    Make a tuple with three items. The keys are 'one', 'two', and 'three'. The values are the corresponding values of 'one', 'two', and 'three'.\n    '''\n    res = (word, word*2, word*3)\n    return res\n    \ndef make_example_list(word):\n    '''\n    Make a list with three items. The keys are 'one', 'two', and 'three'. The values are the corresponding values of 'one', 'two', and 'three'.\n    '''\n    res = [word, word*2, word*3]\n    return res\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_list = []\n    for index in range(0, len(test_tup)):\n        test_list.append(test_tup[index])\n    for key in test_dict.keys():\n        test_list.insert(key, test_dict[key])\n    return tuple(test_list)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1] + test_dict)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    import numpy as np\n    #memoize \n    global memo \n    memo = {}\n    #memoization for top-down approach\n    def helper(row,col,M,N):\n        global memo \n        if row>=N or col>=N or row<0 or col<0:\n            return 0\n        if (row,col) in memo:\n            return memo[(row,col)]\n        \n        total = helper(row+1,col,M,N) + helper(row,col+1,M,N) + M[row][col]\n        memo[(row,col)] = total\n        return total\n    \n    #N*N matrix\n    N = len(cost)\n    #cache of memoized results\n    result = {}\n    for row in range(N):\n        for col in range(N):\n            result[(row,col)] = helper(row,col,cost,N)\n    return max(result.values())\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m = len(cost)\n    n = len(cost[0])\n    # all cells are initially unreached\n    reach = [[False for j in range(n)] for i in range(m)]\n    # we have visited each cell so far\n    visited = [[False for j in range(n)] for i in range(m)]\n    # we want to reach the bottom right\n    goal = (m-1, n-1)\n    # we will keep track of all possible paths\n    paths = [[(0,0)]]\n    # we can reach all cells from any cell in the matrix\n    for i in range(m):\n        for j in range(n):\n            reach[i][j] = True\n    for i in range(m):\n        for j in range(n):\n            if i==0 and j==0:\n                continue\n            # we can reach a cell from any other cell, so we can reach from current cell by moving right or down\n            if j+1<n:\n                reach[i][j] |= reach[i][j+1]\n            if i+1<m:\n                reach[i][j] |= reach[i+1][j]\n    # find all possible paths\n    while len(paths)>0:\n        # we have reached a goal\n        if goal in paths[0]:\n            # we can return max average\n            return max([len(path) for path in paths])/(len(paths[0])-1)\n        else:\n            # we can continue our search\n            paths.pop(0)\n            # now we remove a cell from our path and add all the new paths\n            # we will add new paths as we continue to visit cells\n            cell = paths[0][-1]\n            for i in range(m):\n                for j in range(n):\n                    if cell[0]==i and cell[1]==j and cell[1]<n-1 and not visited[i][j] and not reach[i][j]:\n                        # we can reach the next cell by moving right\n                        visited[i][j] = True\n                        reach[i][j] |= reach[i][j+1]\n                        # add a new path, we have a new cell\n                        new_path = list(paths[0])\n                        new_path.append((i,j+1))\n                        paths.append(new_path)\n                    elif cell[0]==i and cell[1]==j and cell[1]==n-1 and not visited[i][j] and not reach[i][j]:\n                        # we can reach the next cell by moving down\n                        visited[i][j] = True\n                        reach[i][j] |= reach[i+1][j]\n                        new_path = list(paths[0])\n                        new_path.append((i+1,j))\n                        paths.append(new_path)\n                    elif cell[0]==i and j==0 and not visited[i][j]:\n                        # we can reach the next cell by moving right\n                        visited[i][j] = True\n                        reach[i][j] |= reach[i][j+1]\n                        new_path = list(paths[0])\n                        new_path.append((i,j+1))\n                        paths.append(new_path)\n                    elif cell[0]==i and j==0 and not visited[i][j] and not reach[i][j]:\n                        # we can reach the next cell by moving down\n                        visited[i][j] = True\n                        reach[i][j] |= reach[i+1][j]\n                        new_path = list(paths[0])\n                        new_path.append((i+1,j))\n                        paths.append(new_path)\n                    elif cell[0]==i and j==n-1 and not visited[i][j]:\n                        # we can reach the next cell by moving right\n                        visited[i][j] = True\n                        reach[i][j] |= reach[i][j-1]\n                        new_path = list(paths[0])\n                        new_path.append((i,j-1))\n                        paths.append(new_path)\n                    elif cell[0]==i and j==n-1 and not visited[i][j]:\n                        # we can reach the next cell by moving down\n                        visited[i][j] = True\n                        reach[i][j] |= reach[i-1][j]\n                        new_path = list(paths[0])\n                        new_path.append((i-1,j))\n                        paths.append(new_path)\n    return 0\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows, cols = len(cost), len(cost[0])\n    max_average = float('-inf')\n    best_path = None\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows, cols = len(cost), len(cost[0])\n    for row in range(rows):\n        for col in range(cols):\n            if row==0 and col==0:\n                dp[row][col] = cost[row][col]\n            elif row==0:\n                dp[row][col] = dp[row][col-1]+cost[row][col]\n            elif col==0:\n                dp[row][col] = dp[row-1][col]+cost[row][col]\n            else:\n                dp[row][col] = max(dp[row-1][col], dp[row][col-1])+cost[row][col]\n    return dp[rows-1][cols-1]//(rows*cols)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m = len(cost)\n    n = len(cost[0])\n    #base case: if we have gone through all the cells, return 0\n    if m == 1 and n == 1:\n        return cost[0][0]\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    h = len(cost)\n    if h == 0:\n        return 0\n    w = len(cost[0])\n    if w == 0:\n        return 0\n    dp = [[0 for j in range(w)] for i in range(h)]\n    for i in range(h):\n        dp[i][0] = cost[i][0]\n    for j in range(w):\n        dp[0][j] = cost[0][j]\n    for i in range(1,h):\n        for j in range(1,w):\n            dp[i][j] = cost[i][j] + max(dp[i][j-1],dp[i-1][j])\n    max_cost = -float('inf')\n    for i in range(h):\n        for j in range(w):\n            if i == j == h-1:\n                max_cost = max(max_cost, dp[i][j])\n            else:\n                max_cost = max(max_cost, dp[i][j], dp[i][j+1], dp[i+1][j])\n    return max_cost/float(h*w)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m = len(cost)\n    n = len(cost[0])\n    visited = [[False for i in xrange(n)] for j in xrange(m)]\n    res = float(\"-inf\")\n    \n    def dfs(i,j, visited, res, total):\n        nonlocal cost\n        if i == m-1 and j == n-1:\n            res = max(res, total)\n            return\n        if i < m and j < n:\n            if not visited[i][j]:\n                visited[i][j] = True\n                total += cost[i][j]\n                dfs(i+1,j, visited, res, total)\n                dfs(i, j+1, visited, res, total)\n                visited[i][j] = False\n                total -= cost[i][j]\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*(N+1) for i in range(N+1)]\n    for i in range(1,N+1):\n        dp[i][1] = dp[i-1][1] + cost[i-1][0]\n    for j in range(1,N+1):\n        dp[1][j] = dp[1][j-1] + cost[0][j-1]\n    for i in range(2,N+1):\n        for j in range(2,N+1):\n            dp[i][j] = max(dp[i-1][j],dp[i][j-1]) + cost[i-1][j-1]\n    max_cost = max(dp[N])\n    return max_cost, dp[N]\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Build matrix - N*N with height being the number of rows and width being the number of columns\n    N = len(cost)\n    path = [[0 for _ in range(N)] for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                path[0][0] = cost[0][0]\n            elif i == 0:\n                path[i][j] = path[i][j-1] + cost[i][j]\n            elif j == 0:\n                path[i][j] = path[i-1][j] + cost[i][j]\n            else:\n                path[i][j] = max(path[i-1][j], path[i][j-1]) + cost[i][j]\n    max_val = 0\n    for i in range(N):\n        for j in range(N):\n            if i == N - 1 and j == N - 1:\n                continue\n            if i == N - 1:\n                val = path[i][j] + cost[i][j]\n            elif j == N - 1:\n                val = path[i][j] + cost[i][j]\n            else:\n                val = max(path[i][j], path[i][j+1]) + cost[i][j]\n            max_val = max(max_val, val)\n    return max_val / (N*N)\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    pass\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student_name in students.keys():\n        student_height, student_weight = students[student_name]\n        if (student_height > h and student_weight > w):\n            filtered_students[student_name] = students[student_name]\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    out = {}\n    for name,height_weight_tuple in students.items():\n        height,weight = height_weight_tuple\n        if height > h and weight > w:\n            out[name] = height_weight_tuple\n    return out\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    print \" The new dictionary after filtering is : \"\n    for student in students:\n        if students[student][0] > h and students[student][1] > w:\n            print student + \" : \" + str(students[student])\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    pass\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    l = []\n    for s in students:\n        if (students[s][0] > h) and (students[s][1] > w):\n            l.append(s)\n    return l\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    pass\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    list_of_students = []\n    for student in students:\n        if students[student][0] > h and students[student][1] > w:\n            list_of_students.append(student)\n    return list_of_students\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student in students.keys():\n        if students[student][0] > h and students[student][1] > w:\n            print student\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students_filtered=[]\n    for student in students:\n        if student[0] > h and student[1] > w:\n            students_filtered.append(student)\n    return students_filtered\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\ndef compare_strings(str1, str2):\n    '''\n    The input is two strings. Write a function to check if they are the same or not.\n    '''\n    return (str1 == str2)\ndef string_match(a, b):\n    '''\n    Write a function that takes in two strings a and b and returns the longest substring common to both strings.\n    '''\n    # if len(a) < len(b):\n    #     return string_match(b, a)\n    # #use a dictionary to store the substring\n    # common = {}\n    # for i in range(len(a)):\n    #     if a[i] == b[i]:\n    #         common[i] = a[i]\n    #     else:\n    #         if len(common) == 0:\n    #             return a[i]\n    #         else:\n    #             sub_start = min(common.keys())\n    #             for j in range(sub_start, i):\n    #                 if a[j] == b[j]:\n    #                     common[j] = a[j]\n    #                 else:\n    #                     break\n    #     if len(common) > len(b) - i:\n    #         return \"\".join(common.values())\n    # return a\n    return \"\"\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for x in range(len(nums1)):\n        if nums1[x] == nums2[x]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    pairs = []\n    for i in range(len(nums1)):\n        for j in range(i + 1, len(nums2)):\n            if nums1[i] == nums2[j]:\n                pairs.append((i, j))\n    return pairs\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i, j in zip(nums1, nums2):\n        if i == j:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    i,j = 0,0\n    count = 0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] == nums2[j]:\n            count += 1\n            i += 1\n            j += 1\n        elif nums1[i] > nums2[j]:\n            j += 1\n        else:\n            i += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\ndef count_same_pair2(nums1, nums2):\n    '''\n    Same as count_same_pair but with two pointers\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        while i < len(nums1):\n            if nums1[i] == nums2[i]:\n                count += 1\n            i += 1\n    return count\ndef count_same_pair3(nums1, nums2):\n    '''\n    Same as count_same_pair2 but with dictionary\n    '''\n    dict = {}\n    for i in range(len(nums1)):\n        if nums1[i] in dict:\n            dict[nums1[i]] += 1\n        else:\n            dict[nums1[i]] = 1\n    count = 0\n    for i in range(len(nums2)):\n        if nums2[i] in dict:\n            count += 1\n            dict[nums2[i]] -= 1\n            if dict[nums2[i]] == 0:\n                del dict[nums2[i]]\n    return count\ndef largest_histogram(arr):\n    '''\n    Write a function that takes an array of integers and returns the largest sub-array that contains only two different numbers.\n    '''\n    if len(arr) < 2:\n        return None\n    nums = [arr[0]]\n    max = 0\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i - 1]:\n            nums.append(arr[i])\n        else:\n            if len(nums) > max:\n                max = len(nums)\n            nums = [arr[i]]\n    if len(nums) > max:\n        max = len(nums)\n    return max\ndef longest_palindromic_substring(s):\n    '''\n    Given a string, find the longest palindromic substring in it.\n    '''\n    if s == s[::-1]:\n        return s\n    max_len = 1\n    for i in range(len(s)):\n        l = r = i\n        while l >= 0 and r < len(s) and s[l] == s[r]:\n            if r - l + 1 > max_len:\n                max_len = r - l + 1\n            l -= 1\n            r += 1\n        l = i\n        r = i + 1\n        while l >= 0 and r < len(s) and s[l] == s[r]:\n            if r - l + 1 > max_len:\n                max_len = r - l + 1\n            l -= 1\n            r += 1\n    return s[max_len // 2: max_len // 2 + max_len]\ndef valid_parentheses(s):\n    '''\n    Given a string containing just the characters '(', ')', determine if the input string is valid.\n    The brackets must close in the correct order, \"()\" and \"()[]{}\" are all valid but \"(]\" and \"([)]\" are not.\n    '''\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(')')\n        elif c == ')':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\ndef valid_parentheses2(s):\n    '''\n    Same as valid_parentheses but with 2 stacks\n    '''\n    stack = [c for c in s]\n    stack2 = []\n    while len(stack) > 0:\n        c = stack.pop()\n        if c == '(':\n            stack2.append(')')\n        elif c == ')':\n            if len(stack2) > 0:\n                stack2.pop()\n            else:\n                return False\n    return len(stack2) == 0\ndef reverse_integer(n):\n    '''\n    Given a 32-bit signed integer, reverse digits of an integer.\n    '''\n    if n < 0:\n        return -reverse_integer(-n)\n    arr = []\n    while n:\n        arr.append(n % 10)\n        n //= 10\n    reversed_num = 0\n    for i in range(len(arr)):\n        reversed_num += arr[i] * pow(10, len(arr) - 1 - i)\n    return reversed_num\ndef reverse_integer2(n):\n    '''\n    Same as reverse_integer but with 2 stacks\n    '''\n    stack = []\n    while n > 0:\n        stack.append(n % 10)\n        n //= 10\n    reversed_num = 0\n    for i in range(len(stack)):\n        reversed_num += stack[len(stack) - 1 - i] * pow(10, len(stack) - 1 - i)\n    return reversed_num\ndef is_palindrome(s):\n    '''\n    Given a string, write a function to check if it is a palindrome.\n    '''\n    for i in range(len(s) // 2):\n        if s[i]!= s[-i - 1]:\n            return False\n    return True\ndef is_palindrome2(s):\n    '''\n    Same as is_palindrome but with 2 stacks\n    '''\n    stack = []\n    for c in s:\n        stack.append(c)\n    stack2 = []\n    for i in range(len(s)):\n        stack2.append(stack.pop())\n    return stack == stack2\ndef is_palindrome3(s):\n    '''\n    Same as is_palindrome but with dictionary\n    '''\n    dict = {}\n    for c in s:\n        if c in dict:\n            dict[c] += 1\n        else:\n            dict[c] = 1\n    odd_count = 0\n    for k in dict:\n        if dict[k] % 2 == 1:\n            odd_count += 1\n        if odd_count > 1:\n            return False\n    return True\ndef is_palindrome4(s):\n    '''\n    Same as is_palindrome3 but with 2 pointers\n    '''\n    left = 0\n    right = len(s) - 1\n    while left < right:\n        if s[left]!= s[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\ndef check_substring(s, t):\n    '''\n    Given a string s and a string t, check if s is substring of t\n    '''\n    for i in range(len(t) - len(s) + 1):\n        for j in range(len(s)):\n            if s[j]!= t[i + j]:\n                break\n        else:\n            return True\n    return False\ndef find_largest_num(nums):\n    '''\n    Given a list of integers, find the largest integer in the list.\n    '''\n    max = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > max:\n            max = nums[i]\n    return max\ndef find_largest_num2(nums):\n    '''\n    Same as find_largest_num but with 2 pointers\n    '''\n    left = 0\n    right = len(nums) - 1\n    max = nums[0]\n    while left < right:\n        if nums[left] < nums[right]:\n            max = nums[left]\n        left += 1\n    return max\ndef find_largest_num3(nums):\n    '''\n    Same as find_largest_num2 but with dictionary\n    '''\n    dict = {}\n    for i in range(len(nums)):\n        if nums[i] in dict:\n            dict[nums[i]] += 1\n        else:\n            dict[nums[i]] = 1\n    return max(dict, key=dict.get)\ndef is_valid_parenthese(s):\n    '''\n    Given a string "
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    counter = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return sum(1 for i in range(len(nums1)) if nums1[i] == nums2[i])\ndef check_if_rotated(nums1, nums2):\n    if count_same_pair(nums1, nums2) == 1:\n        return True\n    elif count_same_pair(nums1, nums2) == 0:\n        return False\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[len(nums1) - 1 - i]:\n            return True\n    return False\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for digit in str(base**power):\n        sum += int(digit)\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    assert type(base) is int and base >= 0\n    assert type(power) is int and power >= 0\n    result = 0\n    for i in range(power):\n        result += int(base)\n    return result\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    pass\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power <= 0:\n        return 0\n    if power == 1:\n        return 1\n    return int(str(base)[0]) + power_base_sum(base, power-1)\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(int(digit)**power for digit in str(base))\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for i in range(10):\n        result += (base ** power) % 10\n    return result\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base < 2:\n        return 0\n    return sum(int(i) for i in str(base**power))\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power!= 0:\n        sum += (power % 10)\n        power = power // 10\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(int(digit)**power for digit in str(base))\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 0:\n        return 0\n    if power == 0:\n        return 1\n    if power == 1:\n        return base\n    if power < 0:\n        return 1 / power_base_sum(base, -power)\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #write a for loop to iterate through the string and use regex to extract the values\n    #return the values in a list\n    pass\ndef extract_integers(text2):\n    '''\n    Write a function to extract all the integers from a string\n    '''\n    #write a for loop to iterate through the string and use regex to extract the values\n    #return the values in a list\n    pass\ndef extract_words(text3):\n    '''\n    Write a function to extract all the words from a string\n    '''\n    #write a for loop to iterate through the string and use regex to extract the values\n    #return the values in a list\n    pass\ndef extract_websites(text4):\n    '''\n    Write a function to extract all the web-pages from a string\n    '''\n    #write a for loop to iterate through the string and use regex to extract the values\n    #return the values in a list\n    pass\ndef extract_email(text5):\n    '''\n    Write a function to extract all the email-ids from a string\n    '''\n    #write a for loop to iterate through the string and use regex to extract the values\n    #return the values in a list\n    pass\ndef extract_ip(text6):\n    '''\n    Write a function to extract all the IP-addresses from a string\n    '''\n    #write a for loop to iterate through the string and use regex to extract the values\n    #return the values in a list\n    pass\ndef extract_numbers(text7):\n    '''\n    Write a function to extract all the numbers from a string\n    '''\n    #write a for loop to iterate through the string and use regex to extract the values\n    #return the values in a list\n    pass\ndef extract_mobile_no(text8):\n    '''\n    Write a function to extract all the mobile numbers from a string\n    '''\n    #write a for loop to iterate through the string and use regex to extract the values\n    #return the values in a list\n    pass\ndef extract_months(text9):\n    '''\n    Write a function to extract all the months from a string\n    '''\n    #write a for loop to iterate through the string and use regex to extract the values\n    #return the values in a list\n    pass\ndef extract_years(text10):\n    '''\n    Write a function to extract all the years from a string\n    '''\n    #write a for loop to iterate through the string and use regex to extract the values\n    #return the values in a list\n    pass\ndef extract_dates(text11):\n    '''\n    Write a function to extract all the dates from a string\n    '''\n    #write a for loop to iterate through the string and use regex to extract the values\n    #return the values in a list\n    pass\ndef extract_currency(text12):\n    '''\n    Write a function to extract all the currency symbols from a string\n    '''\n    #write a for loop to iterate through the string and use regex to extract the values\n    #return the values in a list\n    pass\ndef extract_special_chars(text13):\n    '''\n    Write a function to extract all the special characters from a string\n    '''\n    #write a for loop to iterate through the string and use regex to extract the values\n    #return the values in a list\n    pass\ndef extract_random(text14):\n    '''\n    Write a function to extract all the random characters from a string\n    '''\n    #write a for loop to iterate through the string and use regex to extract the values\n    #return the values in a list\n    pass\ndef extract_urls(text15):\n    '''\n    Write a function to extract all the URLS from a string\n    '''\n    #write a for loop to iterate through the string and use regex to extract the values\n    #return the values in a list\n    pass\ndef extract_emails(text16):\n    '''\n    Write a function to extract all the email-ids from a string\n    '''\n    #write a for loop to iterate through the string and use regex to extract the values\n    #return the values in a list\n    pass\ndef extract_months(text17):\n    '''\n    Write a function to extract all the months from a string\n    '''\n    #write a for loop to iterate through the string and use regex to extract the values\n    #return the values in a list\n    pass\ndef extract_years(text18):\n    '''\n    Write a function to extract all the years from a string\n    '''\n    #write a for loop to iterate through the string and use regex to extract the values\n    #return the values in a list\n    pass\ndef extract_dates(text19):\n    '''\n    Write a function to extract all the dates from a string\n    '''\n    #write a for loop to iterate through the string and use regex to extract the values\n    #return the values in a list\n    pass\ndef extract_currency(text20):\n    '''\n    Write a function to extract all the currency symbols from a string\n    '''\n    #write a for loop to iterate through the string and use regex to extract the values\n    #return the values in a list\n    pass\ndef extract_special_chars(text21):\n    '''\n    Write a function to extract all the special characters from a string\n    '''\n    #write a for loop to iterate through the string and use regex to extract the values\n    #return the values in a list\n    pass\ndef extract_random(text22):\n    '''\n    Write a function to extract all the random characters from a string\n    '''\n    #write a for loop to iterate through the string and use regex to extract the values\n    #return the values in a list\n    pass\ndef extract_urls(text23):\n    '''\n    Write a function to extract all the URLS from a string\n    '''\n    #write a for loop to iterate through the string and use regex to extract the values\n    #return the values in a list\n    pass\ndef extract_emails(text24):\n    '''\n    Write a function to extract all the email-ids from a string\n    '''\n    #write a for loop to iterate through the string and use regex to extract the values\n    #return the values in a list\n    pass\ndef extract_months(text25):\n    '''\n    Write a function to extract all the months from a string\n    '''\n    #write a for loop to iterate through the string and use regex to extract the values\n    #return the values in a list\n    pass\ndef extract_years(text26):\n    '''\n    Write a function to extract all the years from a string\n    '''\n    #write a for loop to iterate through the string and use regex to extract the values\n    #return the values in a list\n    pass\ndef extract_dates(text27):\n    '''\n    Write a function to extract all the dates from a string\n    '''\n    #write a for loop to iterate through the string and use regex to extract the values\n    #return the values in a list\n    pass\ndef extract_currency(text28):\n    '''\n    Write a function to extract all the currency symbols from a string\n    '''\n    #write a for loop to iterate through the string and use regex to extract the values\n    #return the values in a list\n    pass\ndef extract_special_chars(text29):\n    '''\n    Write a function to extract all the special characters from a string\n    '''\n    #write a for loop to iterate through the string and use regex to extract the values\n    #return the values in a list\n    pass\ndef extract_random(text30):\n    '''\n    Write a function to extract all the random characters from a string\n    '''\n    #write a for loop to iterate through the string and use regex to extract the values\n    #return the values in a list\n    pass\ndef extract_urls(text31):\n    '''\n    Write a function to extract all the URLS from a string\n    '''\n    #write a for loop to iterate through the string and use regex to extract the values\n    #return the values in a list\n    pass\ndef extract_emails(text32):\n    '''\n    Write a function to extract all the email-ids from a string\n    '''\n    #write a for loop to iterate through the string and use regex to extract the values\n    #return the values in a list\n    pass\ndef extract_months(text33)"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'\\\"(.*)\\\"', text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # using.*? means that anything doesn't match the pattern\n    # it means that any regex pattern can be used\n    # in this case it's a pattern that matches any string that is not a quotation mark\n    # in case it is not specified then it will match any special character\n    quotation_mark = re.compile(r'\".*?\"')\n    quotation_mark_list = quotation_mark.findall(text1)\n    # print quotation_mark_list\n    for i in quotation_mark_list:\n        # it prints the whole string that matches the pattern\n        # print i\n        # it prints only the value between the quotation marks\n        # print i[1:-1]\n        # print i[1:-1].strip()\n        print i[1:-1].strip()\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1=text1.strip(' ')\n    text2=text1.replace(' ','')\n    text2=text2.replace('\\t','')\n    text3=text2.replace('\\\"','')\n    text4=text3.replace('\\n','')\n    text5=text4.replace('\\r','')\n    text6=text5.replace('\\'','')\n    text7=text6.replace('(','')\n    text8=text7.replace(')','')\n    text9=text8.split(';')\n    for i in range(0,len(text9)):\n        text9[i]=text9[i].strip(' ')\n        text9[i]=text9[i].replace('\\t','')\n        text9[i]=text9[i].replace('\\n','')\n        text9[i]=text9[i].replace('\\r','')\n        text9[i]=text9[i].replace('\\xa0','')\n        text9[i]=text9[i].replace('\\xae','')\n        text9[i]=text9[i].replace('\\\"','')\n        text9[i]=text9[i].replace('\\'','')\n    return text9\ndef extract_a_list(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1=text1.strip(' ')\n    text2=text1.replace(' ','')\n    text2=text2.replace('\\t','')\n    text3=text2.replace('\\\"','')\n    text4=text3.replace('\\n','')\n    text5=text4.replace('\\r','')\n    text6=text5.replace('\\xa0','')\n    text7=text6.replace('\\xae','')\n    text8=text7.split(';')\n    for i in range(0,len(text8)):\n        text8[i]=text8[i].strip(' ')\n        text8[i]=text8[i].replace('\\t','')\n        text8[i]=text8[i].replace('\\n','')\n        text8[i]=text8[i].replace('\\r','')\n        text8[i]=text8[i].replace('\\xa0','')\n        text8[i]=text8[i].replace('\\xae','')\n        text8[i]=text8[i].replace('\\\"','')\n        text8[i]=text8[i].replace('\\'','')\n    return text8\ndef extract_dictionary(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1=text1.strip(' ')\n    text2=text1.replace(' ','')\n    text2=text2.replace('\\t','')\n    text3=text2.replace('\\\"','')\n    text4=text3.replace('\\n','')\n    text5=text4.replace('\\r','')\n    text6=text5.replace('\\xa0','')\n    text7=text6.replace('\\xae','')\n    text8=text7.split(';')\n    for i in range(0,len(text8)):\n        text8[i]=text8[i].strip(' ')\n        text8[i]=text8[i].replace('\\t','')\n        text8[i]=text8[i].replace('\\n','')\n        text8[i]=text8[i].replace('\\r','')\n        text8[i]=text8[i].replace('\\xa0','')\n        text8[i]=text8[i].replace('\\xae','')\n        text8[i]=text8[i].replace('\\\"','')\n        text8[i]=text8[i].replace('\\'','')\n    return text8\ndef extract_single_value(text1):\n    text1=text1.strip(' ')\n    text2=text1.replace(' ','')\n    text2=text2.replace('\\t','')\n    text3=text2.replace('\\\"','')\n    text4=text3.replace('\\n','')\n    text5=text4.replace('\\r','')\n    text6=text5.replace('\\xa0','')\n    text7=text6.replace('\\xae','')\n    text8=text7.strip(';')\n    text8=text8.replace('\\t','')\n    text8=text8.replace('\\n','')\n    text8=text8.replace('\\r','')\n    text8=text8.replace('\\xa0','')\n    text8=text8.replace('\\xae','')\n    text8=text8.replace('\\\"','')\n    text8=text8.replace('\\'','')\n    return text8\ndef extract_index_words(text1):\n    text1=text1.strip(' ')\n    text2=text1.replace(' ','')\n    text2=text2.replace('\\t','')\n    text3=text2.replace('\\\"','')\n    text4=text3.replace('\\n','')\n    text5=text4.replace('\\r','')\n    text6=text5.replace('\\xa0','')\n    text7=text6.replace('\\xae','')\n    text8=text7.split(';')\n    for i in range(0,len(text8)):\n        text8[i]=text8[i].strip(' ')\n        text8[i]=text8[i].replace('\\t','')\n        text8[i]=text8[i].replace('\\n','')\n        text8[i]=text8[i].replace('\\r','')\n        text8[i]=text8[i].replace('\\xa0','')\n        text8[i]=text8[i].replace('\\xae','')\n        text8[i]=text8[i].replace('\\\"','')\n        text8[i]=text8[i].replace('\\'','')\n    return text8\ndef extract_index_words_2(text1):\n    text1=text1.strip(' ')\n    text2=text1.replace(' ','')\n    text2=text2.replace('\\t','')\n    text3=text2.replace('\\\"','')\n    text4=text3.replace('\\n','')\n    text5=text4.replace('\\r','')\n    text6=text5.replace('\\xa0','')\n    text7=text6.replace('\\xae','')\n    text8=text7.split(';')\n    for i in range(0,len(text8)):\n        text8[i]=text8[i].strip(' ')\n        text8[i]=text8[i].replace('\\t','')\n        text8[i]=text8[i].replace('\\n','')\n        text8[i]=text8[i].replace('\\r','')\n        text8[i]=text8[i].replace('\\xa0','')\n        text8[i]=text8[i].replace('\\xae','')\n        text8[i]=text8[i].replace('\\\"','')\n        text8[i]=text8[i].replace('\\'','')\n    return text8\ndef extract_index_words_3(text1):\n    text1=text1.strip(' ')\n    text2=text1.replace(' ','')\n    text2=text2.replace('\\t','')\n    text3=text2.replace('\\\"','')\n    text4=text3.replace('\\n','')\n    text5=text4.replace('\\r','')\n    text6=text5.replace('\\xa0','')\n    text7=text6.replace('\\xae','')\n    text8=text7.split(';')\n    for i in range(0,len(text8)):\n        text8[i]=text8[i].stri"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list_quotation = []\n    list_quotation_text = []\n    list_quotation_start = []\n    list_quotation_end = []\n    list_quotation_start_text = []\n    list_quotation_end_text = []\n    for i,j in enumerate(text1):\n        if j == \"\\\"\":\n            list_quotation_start.append(i)\n    for i,j in enumerate(text1):\n        if j == \"\\\"\":\n            list_quotation_end.append(i)\n    for i in list_quotation_start:\n        list_quotation_text.append(text1[i:list_quotation_end[list_quotation_start.index(i)]+1])\n    for i in list_quotation_text:\n        if i == \"\":\n            list_quotation_text.remove(i)\n    for i in list_quotation_text:\n        if i == \"\\\"\":\n            list_quotation_text.remove(i)\n    for i in list_quotation_start:\n        list_quotation_start_text.append(i-len(list_quotation_text[list_quotation_start.index(i)]))\n    for i in list_quotation_end:\n        list_quotation_end_text.append(i-len(list_quotation_text[list_quotation_end.index(i)]))\n    for i in range(len(list_quotation_start_text)):\n        list_quotation.append(text1[list_quotation_start_text[i]:list_quotation_end_text[i]+1])\n    return list_quotation\ndef extract_quotation_with_b_e(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string, with new lines\n    before and after quotation marks.\n    '''\n    list_quotation = []\n    list_quotation_text = []\n    list_quotation_start = []\n    list_quotation_end = []\n    list_quotation_start_text = []\n    list_quotation_end_text = []\n    for i,j in enumerate(text1):\n        if j == \"\\\"\":\n            list_quotation_start.append(i)\n    for i,j in enumerate(text1):\n        if j == \"\\\"\":\n            list_quotation_end.append(i)\n    for i in list_quotation_start:\n        list_quotation_text.append(text1[i:list_quotation_end[list_quotation_start.index(i)]+1])\n    for i in list_quotation_text:\n        if i == \"\":\n            list_quotation_text.remove(i)\n    for i in list_quotation_text:\n        if i == \"\\\"\":\n            list_quotation_text.remove(i)\n    for i in list_quotation_start:\n        list_quotation_start_text.append(i-len(list_quotation_text[list_quotation_start.index(i)]))\n    for i in list_quotation_end:\n        list_quotation_end_text.append(i-len(list_quotation_text[list_quotation_end.index(i)]))\n    for i in range(len(list_quotation_start_text)):\n        list_quotation.append(text1[list_quotation_start_text[i]:list_quotation_end_text[i]+1])\n    return list_quotation\ndef extract_quotation_with_s(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string, with new lines\n    before and after quotation marks.\n    '''\n    list_quotation = []\n    list_quotation_text = []\n    list_quotation_start = []\n    list_quotation_end = []\n    list_quotation_start_text = []\n    list_quotation_end_text = []\n    for i,j in enumerate(text1):\n        if j == \"\\\"\":\n            list_quotation_start.append(i)\n    for i,j in enumerate(text1):\n        if j == \"\\\"\":\n            list_quotation_end.append(i)\n    for i in list_quotation_start:\n        list_quotation_text.append(text1[i:list_quotation_end[list_quotation_start.index(i)]+1])\n    for i in list_quotation_text:\n        if i == \"\":\n            list_quotation_text.remove(i)\n    for i in list_quotation_text:\n        if i == \"\\\"\":\n            list_quotation_text.remove(i)\n    for i in list_quotation_start:\n        list_quotation_start_text.append(i-len(list_quotation_text[list_quotation_start.index(i)]))\n    for i in list_quotation_end:\n        list_quotation_end_text.append(i-len(list_quotation_text[list_quotation_end.index(i)]))\n    for i in range(len(list_quotation_start_text)):\n        list_quotation.append(text1[list_quotation_start_text[i]:list_quotation_end_text[i]+1])\n    return list_quotation\ndef extract_quotation_with_b_e_s(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string, with new lines\n    before and after quotation marks.\n    '''\n    list_quotation = []\n    list_quotation_text = []\n    list_quotation_start = []\n    list_quotation_end = []\n    list_quotation_start_text = []\n    list_quotation_end_text = []\n    for i,j in enumerate(text1):\n        if j == \"\\\"\":\n            list_quotation_start.append(i)\n    for i,j in enumerate(text1):\n        if j == \"\\\"\":\n            list_quotation_end.append(i)\n    for i in list_quotation_start:\n        list_quotation_text.append(text1[i:list_quotation_end[list_quotation_start.index(i)]+1])\n    for i in list_quotation_text:\n        if i == \"\":\n            list_quotation_text.remove(i)\n    for i in list_quotation_text:\n        if i == \"\\\"\":\n            list_quotation_text.remove(i)\n    for i in list_quotation_start:\n        list_quotation_start_text.append(i-len(list_quotation_text[list_quotation_start.index(i)]))\n    for i in list_quotation_end:\n        list_quotation_end_text.append(i-len(list_quotation_text[list_quotation_end.index(i)]))\n    for i in range(len(list_quotation_start_text)):\n        list_quotation.append(text1[list_quotation_start_text[i]:list_quotation_end_text[i]+1])\n    return list_quotation\ndef extract_quotation_with_s_without_space(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string, with new lines\n    before and after quotation marks.\n    '''\n    list_quotation = []\n    list_quotation_text = []\n    list_quotation_start = []\n    list_quotation_end = []\n    list_quotation_start_text = []\n    list_quotation_end_text = []\n    for i,j in enumerate(text1):\n        if j == \"\\\"\":\n            list_quotation_start.append(i)\n    for i,j in enumerate(text1):\n        if j == \"\\\"\":\n            list_quotation_end.append(i)\n    for i in list_quotation_start:\n        list_quotation_text.append(text1[i:list_quotation_end[list_quotation_start.index(i)]+1])\n    for i in list_quotatio"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result = re.findall('\"([^\"]*)\"', text1)\n    return result\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    def get_quotations(string):\n        if string == '':\n            return 0\n        else:\n            counter = 0\n            if string[0] == '\"':\n                counter += 1\n            elif string[0] == \"'\":\n                counter += 1\n            for i in range(1, len(string)):\n                if string[i] == '\"':\n                    counter += 1\n                elif string[i] == \"'\":\n                    counter += 1\n                if counter == 2:\n                    return i\n            return len(string)\n    string = text1\n    list_of_quotations = []\n    index = 0\n    while index < len(string):\n        quotation = get_quotations(string[index:])\n        if quotation!= 0:\n            list_of_quotations.append(string[index:index+quotation])\n        index += quotation\n    if len(list_of_quotations) == 0:\n        return 0\n    return list_of_quotations\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pass\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #result = re.findall(r'\"', text1)\n    #print result\n    result = re.findall(r'\"(.*?)\"', text1)\n    return result\n    \ndef extract_quotation_strip(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #result = re.findall(r'\"', text1)\n    #print result\n    result = re.findall(r'\"(.*?)\"', text1)\n    return [x.strip() for x in result]\n    \ndef extract_quotation_strip_list(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #result = re.findall(r'\"', text1)\n    #print result\n    result = re.findall(r'\"(.*?)\"', text1)\n    return [x.strip() for x in result]\n    \ndef extract_quotation_strip_list2(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #result = re.findall(r'\"', text1)\n    #print result\n    result = re.findall(r'\"(.*?)\"', text1)\n    return [x.strip() for x in result]\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    lst = re.findall(r'\"[^\"]*\"', text1)\n    return lst\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    return tuple(el1 * el2 for el1, el2 in zip(test_tup, test_tup[1:]))\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    try:\n        return tuple([i * j for i, j in zip(test_tup[:-1], test_tup[1:])])\n    except:\n        return None\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(x*y for x,y in zip(test_tup[:-1], test_tup[1:]))\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # TODO: replace this with your code\n    # YOUR CODE HERE\n    test_tup = (1,) + test_tup\n    return tuple([x*y for x, y in zip(test_tup, test_tup[1:])])\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) == 0:\n        return []\n    elif len(test_tup) == 1:\n        return [1]\n    else:\n        return [test_tup[0] * test_tup[1]] + multiply_elements(test_tup[1:])\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    out_tup = ()\n    for i in range(len(test_tup)):\n        if i < len(test_tup)-1:\n            out_tup += (test_tup[i] * test_tup[i+1],)\n        else:\n            out_tup += (test_tup[i] * test_tup[0],)\n    return out_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(tup[i]*tup[i+1] for i in range(len(tup)-1))\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    def iterate_list(l):\n        if len(l) == 1:\n            return l\n        else:\n            return (l[0]*l[1], l[1]) + iterate_list(l[2:])\n    return iterate_list(test_tup)\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst = []\n    for i in range(len(lst1)):\n        lst.append(lst1[i]+lst2[i])\n    return lst\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst = []\n    for i in range(len(lst1)):\n        lst.append(lst1[i]+lst2[i])\n    return lst\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [i + j for i, j in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    assert isinstance(lst1, list)\n    assert isinstance(lst2, list)\n    assert len(lst1) == len(lst2)\n    for i in range(len(lst1)):\n        assert isinstance(lst1[i], int)\n        assert isinstance(lst2[i], int)\n    lst_ans = [lst1[i]+lst2[i] for i in range(len(lst1))]\n    return lst_ans\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        print(\"The two lists have different length\")\n        return None\n    else:\n        lst = []\n        for i in range(len(lst1)):\n            lst.append(lst1[i] + lst2[i])\n        return lst\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    assert len(lst1) == len(lst2), \"Lists are not the same length\"\n    return [a + b for a, b in zip(lst1, lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst = []\n    for i in xrange(len(lst1)):\n        lst.append(lst1[i] + lst2[i])\n    return lst\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum_lst = []\n    for i in range(len(lst1)):\n        sum_lst.append(lst1[i] + lst2[i])\n    return sum_lst\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a,b in zip(lst1,lst2)]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums)<=1:\n        return nums\n    i=0\n    while i<len(nums)-1:\n        if nums[i]==nums[i+1]:\n            nums.pop(i)\n        else:\n            i+=1\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #for i in nums:\n    #    if nums.count(i) > 1:\n    #        nums.remove(i)\n    #return nums\n    return [i for i, _ in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result=[]\n    for k,g in groupby(nums):\n        result.append(list(g))\n    return result\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) <= 1:\n        return nums\n    ans = []\n    for num in nums:\n        if ans and num == ans[-1]:\n            continue\n        ans.append(num)\n    return ans\ndef num_to_words(num):\n    '''\n    Write a function to convert an integer to its word representation.\n    For example:\n    >>> num_to_words(0)\n    'zero'\n    >>> num_to_words(1)\n    'one'\n    >>> num_to_words(27)\n    'twenty seven'\n    >>> num_to_words(123456)\n    'twelve hundred thirty-six thousand three hundred forty-five'\n    '''\n    ones = [\"\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"]\n    tens = [\"\", \"ten\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"]\n    thousands = [\"\", \"thousand\", \"million\", \"billion\", \"trillion\", \"quadrillion\", \"quintillion\", \"sextillion\", \"septillion\", \"octillion\", \"nonillion\", \"decillion\", \"undecillion\", \"duodecillion\", \"tredecillion\", \"quattuordecillion\", \"sexdecillion\", \"septendecillion\", \"octodecillion\", \"novemdecillion\", \"vigintillion\"]\n    ans = []\n    if num == 0:\n        return 'zero'\n    elif num < 20:\n        ans.append(ones[num])\n    elif num < 100:\n        ans.append(tens[num//10])\n        ans.append(ones[num%10])\n    elif num < 1000:\n        ans.append(ones[num//100])\n        ans.append(\"hundred\")\n        if num%100!= 0:\n            ans.append(ones[num%100])\n    elif num < 1000000:\n        ans.append(ones[num//1000])\n        ans.append(\"thousand\")\n        if num%1000!= 0:\n            ans.append(num_to_words(num%1000))\n    elif num < 1000000000:\n        ans.append(ones[num//1000000])\n        ans.append(\"million\")\n        if num%1000000!= 0:\n            ans.append(num_to_words(num%1000000))\n    elif num < 1000000000000:\n        ans.append(ones[num//1000000000])\n        ans.append(\"billion\")\n        if num%1000000000!= 0:\n            ans.append(num_to_words(num%1000000000))\n    elif num < 1000000000000000:\n        ans.append(ones[num//1000000000000])\n        ans.append(\"trillion\")\n        if num%1000000000000!= 0:\n            ans.append(num_to_words(num%1000000000000))\n    elif num < 10000000000000000:\n        ans.append(ones[num//1000000000000000])\n        ans.append(\"quadrillion\")\n        if num%1000000000000000!= 0:\n            ans.append(num_to_words(num%1000000000000000))\n    elif num < 1000000000000000000:\n        ans.append(ones[num//10000000000000000])\n        ans.append(\"quintillion\")\n        if num%10000000000000000!= 0:\n            ans.append(num_to_words(num%10000000000000000))\n    elif num < 1000000000000000:\n        ans.append(ones[num//100000000000000])\n        ans.append(\"sextillion\")\n        if num%100000000000000!= 0:\n            ans.append(num_to_words(num%100000000000000))\n    elif num < 100000000000000000:\n        ans.append(ones[num//1000000000000000])\n        ans.append(\"septillion\")\n        if num%1000000000000000!= 0:\n            ans.append(num_to_words(num%1000000000000000))\n    elif num < 100000000000000000000:\n        ans.append(ones[num//1000000000000000])\n        ans.append(\"octillion\")\n        if num%1000000000000000!= 0:\n            ans.append(num_to_words(num%1000000000000000))\n    elif num < 100000000000000000000000:\n        ans.append(ones[num//1000000000000000000])\n        ans.append(\"nonillion\")\n        if num%1000000000000000000!= 0:\n            ans.append(num_to_words(num%1000000000000000000))\n    elif num < 100000000000000000000000000:\n        ans.append(ones[num//1000000000000000000000])\n        ans.append(\"decillion\")\n        if num%1000000000000000000000!= 0:\n            ans.append(num_to_words(num%1000000000000000000000))\n    elif num < 100000000000000000000000000000:\n        ans.append(ones[num//1000000000000000000000000])\n        ans.append(\"undecillion\")\n        if num%1000000000000000000000000!= 0:\n            ans.append(num_to_words(num%1000000000000000000000000))\n    elif num < 100000000000000000000000000000000:\n        ans.append(ones[num//100000000000000000000000000])\n        ans.append(\"duodecillion\")\n        if num%100000000000000000000000000!= 0:\n            ans.append(num_to_words(num%100000000000000000000000000))\n    elif num < 1000000000000000000000000000000000:\n        ans.append(ones[num//100000000000000000000000000000])\n        ans.append(\"tredecillion\")\n        if num%100000000000000000000000000000!= 0:\n            ans.append(num_to_words(num%100000000000000000000000000000))\n    elif num < 100000000000000000000000000000000000:\n        ans.append(ones[num//1000000000000000000000000000000])\n        ans.append(\"quattuordecillion\")\n        if num%1000000000000000000000000000000!= 0:\n            ans.append(num_to_words(num%1000000000000000000000000000000))\n    elif num < 100000000000000000000000000000000000:\n        ans.append(ones[num//10000000000000000000000000000000])\n        ans.append(\"sexdecillion\")\n        if num%10000000000000000000000000000000!= 0:\n            ans.append(num_to_words(num%10000000000000000000000000000000))\n    elif num < 100000000000000000000000000000000000:\n        ans.append(ones[num//1000000000000000000000000000000])\n        ans.append(\"septendecillion\")\n        if num%1000000000000000000000000000000!= 0:\n            ans.append(num_to_words(num%1000000000000000000000000000000))\n    elif num < 100000000000000000000000000000000000:\n        ans.append(ones[num//1000000000000000000000000000000000])\n        ans.append(\"octodecillion\")\n        if num%1000000000000000000000000000000000!= 0:\n            ans.append(num_to_words(num%1000000000000000000000000000000000))\n    elif num < 100000000000000000000000000000000000:\n        ans.append(ones[num//1000000000000000000000000000000])\n        ans.append(\"novemdecillion\")\n        if num%1000000000000000000000000000000!= 0:\n            ans.append(num_to_words(num%1000000000000000000000000000000))\n    elif num < 100000000000000000000000000000000000:\n        ans.append(ones[num//10000000000000000000000000000000])\n        ans.append(\"vigintillion\")\n        if num%10000000000000000000000000000000!= 0:\n            ans.append(num_to_words(num%10000000000000000000000000000000))\n    ans = consecutive_duplicates(ans)\n    ans = \" \".join(ans)\n    return ans\ndef number_to_arabic(num):\n    '''\n    Write a function to convert a non-negative integer to its equivalent integer\n    number in Arabic numerals.\n    For example:\n    >>> number_to_arabic(0)\n    'zero'\n    >>> number_to_arabic(1)\n    'one'\n    >>> number_to_arabic(2)\n    'two'\n    >>> number_to_arabic(3)\n    'three'\n    >>> number_to_arabic(4)\n    'four'\n    >>> number_to_arabic(5)\n    'five'\n    >>> number_to_arabic(6)\n    'six'\n    >>> number_to_arabic(7)\n    'seven'\n    >>> number_to_arabic(8)\n    'eight'\n    >>> number_to_ara"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    previous_number = None\n    result = []\n    for number in nums:\n        if previous_number == number:\n            continue\n        result.append(number)\n        previous_number = number\n    return result\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    prev = None\n    for num in nums:\n        if num == prev:\n            continue\n        else:\n            prev = num\n            yield num\ndef consecutive_duplicates2(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    prev = None\n    for num in nums:\n        if num == prev:\n            yield num\n        else:\n            prev = num\n            yield num\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [next(g) for k, g in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for (k, g) in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    consecutives = []\n    nums_ = nums\n    if len(nums) < 2:\n        return nums\n    for i, num in enumerate(nums[:-1]):\n        if num == nums[i+1]:\n            consecutives.append(num)\n        else:\n            if len(consecutives) > 0:\n                consecutives = [consecutives[0]]\n            consecutives.append(num)\n    if len(consecutives) > 0:\n        consecutives = [consecutives[0]]\n    consecutives += nums[-1:]\n    return consecutives\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # This solution is based on the fact that python's list allows to have elements repeated multiple times,\n    # and if we wish to remove consecutive duplicates we will use a set.\n    return list(set(nums))\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    r=float(r)\n    h=float(h)\n    s=math.pi*(r**2)+(r**2)*math.asin((math.sqrt((r**2)-(h**2)))/r)\n    return s\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Area of base of cone\n    area = math.pi*r**2\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2+(math.pi*(r**2)-h**2)/2\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * (r ** 2) * (h / 3.0)\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    h/=2\n    basearea=math.pi*(r**2)\n    toparea=math.pi*(r**2)*(h)\n    return basearea+toparea\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    h/=2\n    basearea=math.pi*(r**2)\n    toparea=2*math.pi*r*h\n    return basearea+toparea\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    return 4*math.pi*(r**2)\ndef lateralsurface_parabola(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a parabola given base a, height h, and perpendicular b.\n    '''\n    return (a**2)/(4*b)\ndef lateralsurface_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given base a, height h, and perpendicular b.\n    '''\n    return (a+b)/2*h\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    h/=2\n    basearea=math.pi*(r**2)\n    toparea=math.pi*(r**2)*(h)\n    return basearea+toparea\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    h/=2\n    basearea=math.pi*(r**2)\n    toparea=2*math.pi*r*h\n    return basearea+toparea\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    return 4*math.pi*(r**2)\ndef lateralsurface_parabola(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a parabola given base a, height h, and perpendicular b.\n    '''\n    return (a**2)/(4*b)\ndef lateralsurface_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given base a, height h, and perpendicular b.\n    '''\n    return (a+b)/2*h\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    top = h * math.pi / 3.0\n    bottom = math.pi * r * r\n    surf = top + bottom\n    print(surf)\nlateralsurface_cone(5,15)\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    #get the area of the base\n    \n    barea=3.14159*r**2\n    \n    #get the area of the verticies\n    \n    avarea=3.14159*r*math.cos(math.radians(h))\n    \n    #get the area of the bottom of the cone\n    \n    conarea=0.5*barea-avarea\n    \n    #get the area of the top of the cone\n    \n    conarea+=2*avarea\n    \n    return conarea\n    \n    "
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    theta = math.pi*h/3\n    return 3.14*r*r*h/3-3.14*r*r*(r*r-3.14*r*r*math.cos(theta))/3\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    S=math.pi*(r**2)*h/3\n    return S\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = math.pi * math.sqrt(r**2 + h**2)\n    return 2 * s\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('[^a-zA-Z0-9\\s\\.]', '', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #mystr = text.replace(\" \",\":\").replace(\",\",\":\").replace(\".\",\":\")\n    mystr = text.replace(\" \",\":\").replace(\".\",\":\").replace(\"com\",\":\").replace(\"co.\",\":\").replace(\"co:\",\":\")\n    return mystr\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s',':',text)\n    text = re.sub(r'\\s',',',text)\n    text = re.sub(r'\\s','.',text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \",\":\")\n    text = text.replace(\",\",\":\")\n    text = text.replace(\".\",\":\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('\\s+', ':', text)\n    text = re.sub(',+', ',', text)\n    text = re.sub('\\.+', '.', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text=text.lower()\n    text=re.sub(r'[^A-Za-z0-9]+','',text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # new_text = re.sub(r'[ ]+', ':', text)\n    # new_text = re.sub(r'[,]+', ':', new_text)\n    # new_text = re.sub(r'[.]+', ':', new_text)\n    # return new_text\n    return re.sub(r'[^\\w\\s]+|[\\s]+', '', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # to replace with colons\n    # text = text.replace(\" \",\":\")\n    # text = text.replace(\",\",\":\")\n    # text = text.replace(\".\",\":\")\n    # print(text)\n    # text = text.replace(\"\\n\",\"\")\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text=text.replace(\".\",\":\")\n    text=text.replace(\" \",\":\")\n    text=text.replace(\",\",\":\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(\"[-,\\.\\s]\",\":\",text)\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    return binary_search(A, x, 0, len(A) - 1)\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    lo = 0\n    hi = len(A) - 1\n    while lo <= hi:\n        mid = lo + (hi-lo) // 2\n        if A[mid] == x:\n            lo = mid + 1\n            return mid\n        if A[mid] > x:\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    assert A is not None\n    if len(A) == 0:\n        return -1\n    left, right = 0, len(A)-1\n    while left <= right:\n        mid = left + (right - left) / 2\n        if A[mid] == x:\n            return mid\n        if A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = (start + end) / 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return None\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    def binary_search(A, x):\n        lo, hi = 0, len(A)\n        while lo < hi:\n            mid = lo + (hi - lo) // 2\n            if x < A[mid]:\n                hi = mid\n            elif x > A[mid]:\n                lo = mid + 1\n            else:\n                return mid\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start, end = 0, len(A) - 1\n    while start <= end:\n        mid = (start + end) / 2\n        if A[mid] < x:\n            start = mid + 1\n        elif A[mid] > x:\n            end = mid - 1\n        else:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                end = mid - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if not A: return -1\n    if A[0] == x: return 0\n    if A[0] > x: return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    lo = 0\n    hi = len(A) - 1\n    while lo <= hi:\n        mid = (hi + lo) / 2\n        if A[mid] < x:\n            lo = mid + 1\n        elif A[mid] > x:\n            hi = mid - 1\n        else:\n            hi = mid - 1\n    return lo\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    \n    low = 0\n    high = len(A) - 1\n    while low < high:\n        mid = (low + high) / 2\n        if A[mid] == x:\n            high = mid\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    if A[low] == x:\n        return low\n    else:\n        return -1\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    subArrProd = [1]\n    for i in xrange(1, len(arr)):\n        if arr[i] == 0:\n            subArrProd.append(0)\n        else:\n            subArrProd.append(subArrProd[-1] * arr[i])\n    # print subArrProd\n    tot = 0\n    for i in xrange(len(arr)):\n        tot += subArrProd[i]\n    return tot\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    arr_len = len(arr)\n    arr_lst = [[arr[i] for i in range(arr_len)]]\n    for i in range(1, arr_len):\n        arr_lst.append([])\n        for j in range(i):\n            arr_lst[i].append(arr_lst[i-1][j] * arr[i-1])\n        arr_lst[i].append(arr[i])\n    prod_lst = [1]\n    for i in range(arr_len):\n        prod_lst.append(prod_lst[i] * arr_lst[arr_len-i-1][i])\n    return prod_lst[arr_len]\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum_of_products = [1]\n    for i in range(1,len(arr)):\n        sum_of_products.append(arr[i-1]*sum_of_products[i-1])\n    #print(sum_of_products)\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    if not arr:\n        return None\n    \n    products = []\n    products.append(arr[0])\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    result = [0] * len(arr)\n    result[0] = arr[0]\n    for i in range(1,len(arr)):\n        result[i] = result[i - 1] * arr[i]\n    return result\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sublist = []\n    sublist_prod = []\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            sublist.append(arr[i:j+1])\n    for lst in sublist:\n        sublist_prod.append(reduce((lambda x, y: x * y), lst))\n    return sum(sublist_prod)\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    s = 0\n    for i in xrange(len(arr)):\n        for j in xrange(i+1, len(arr)+1):\n            # print arr[i:j]\n            s += prod(arr[i:j])\n    return s\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Base case\n    if len(arr) <= 1:\n        return 0\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    arr = [1, 2, 3, 4, 5]\n    summ = 1\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            # print(arr[i:j+1])\n            summ = summ * (arr[j] * arr[i:j+1])\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    subarr = [1]\n    for i in range(1, len(arr)+1):\n        for j in range(len(arr)+1-i):\n            # print(arr[j:j+i])\n            subarr.append(functools.reduce(lambda x,y: x*y, arr[j:j+i]))\n    return sum(subarr)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n ^ ((n & 1) << 1)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # Get the number of bits\n    no_of_bits = 0\n    while (n):\n        no_of_bits += 1\n        n = n >> 1\n    \n    # If no_of_bits is odd then don't toggle the last bit \n    # otherwise toggle the last bit\n    if (no_of_bits % 2 == 0):\n        return n\n    else:\n        return n ^ (1 << no_of_bits - 1)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return ((n & 0x55555555) << 1) | ((n & 0x55555555) >> 1)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n |= (n >> 1)  \n    n &= ~(1 << (BITS_NUM-1)) \n    n |= (n >> 1) \n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n ^ (n >> 1)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ (n >> 1)\n    n = n ^ (n >> 2)\n    n = n ^ (n >> 4)\n    n = n ^ (n >> 8)\n    n = n ^ (n >> 16)\n    return n \n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n^(1<<1)\n    n = n^(1<<2)\n    n = n^(1<<3)\n    n = n^(1<<4)\n    n = n^(1<<5)\n    n = n^(1<<6)\n    n = n^(1<<7)\n    n = n^(1<<8)\n    n = n^(1<<9)\n    n = n^(1<<10)\n    n = n^(1<<11)\n    n = n^(1<<12)\n    n = n^(1<<13)\n    n = n^(1<<14)\n    n = n^(1<<15)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ (n & 1)\n    n = n >> 1\n    n = n ^ (n & 1)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 2**(32-1)\n    n = n & ~mask\n    n = n | (2**32 - 1)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # Toggle bits\n    n = n ^ (n & (n-1))\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    a.insert(i, x)\n    return i\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_right(a, x)\n    a.insert(i, x)\n    return i\ndef partition(a, l, r, x):\n    '''\n    Given a list of numbers a, partition the list such that all elements < x are in the left partition and all elements >= x are in the right partition. Returns the two partitions. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = left_insertion(a, x)\n    a[i], a[r] = a[r], a[i]\n    return a[:i], a[i:r+1]\ndef kth_largest(a, l, r, k):\n    '''\n    Given a list of numbers a, find the kth largest element in the list. Returns the kth largest element. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pivot = a[l]\n    i = l\n    j = r+1\n    while True:\n        i += 1\n        while a[i] < pivot:\n            i += 1\n        j -= 1\n        while a[j] > pivot:\n            j -= 1\n        if i >= j:\n            return pivot\n        a[i], a[j] = a[j], a[i]\ndef kth_smallest(a, l, r, k):\n    '''\n    Given a list of numbers a, find the kth smallest element in the list. Returns the kth smallest element. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pivot = a[l]\n    i = l\n    j = r+1\n    while True:\n        i += 1\n        while a[i] > pivot:\n            i += 1\n        j -= 1\n        while a[j] < pivot:\n            j -= 1\n        if i >= j:\n            return pivot\n        a[i], a[j] = a[j], a[i]\ndef quicksort(a, l, r):\n    '''\n    Implement quicksort. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if l < r:\n        q = partition(a, l, r, a[r])\n        quicksort(a, l, q[0]-1)\n        quicksort(a, q[1]+1, r)\ndef partition_two_pivots(a, l, r, x):\n    '''\n    Given a list of numbers a, partition the list such that all elements < x are in the left partition and all elements >= x are in the right partition. Returns the two partitions. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = left_insertion(a, x)\n    j = left_insertion(a, r)\n    a[i], a[j] = a[j], a[i]\n    return a[:i], a[i:j+1], a[j+1:]\ndef kth_largest_two_pivots(a, l, r, k):\n    '''\n    Given a list of numbers a, find the kth largest element in the list. Returns the kth largest element. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pivot1 = a[l]\n    pivot2 = a[r]\n    i = l\n    j = r\n    while True:\n        i += 1\n        while a[i] < pivot1:\n            i += 1\n        j -= 1\n        while a[j] > pivot2:\n            j -= 1\n        if i >= j:\n            return pivot1\n        a[i], a[j] = a[j], a[i]\ndef kth_smallest_two_pivots(a, l, r, k):\n    '''\n    Given a list of numbers a, find the kth smallest element in the list. Returns the kth smallest element. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pivot1 = a[l]\n    pivot2 = a[r]\n    i = l\n    j = r\n    while True:\n        i += 1\n        while a[i] > pivot1:\n            i += 1\n        j -= 1\n        while a[j] < pivot2:\n            j -= 1\n        if i >= j:\n            return pivot1\n        a[i], a[j] = a[j], a[i]\ndef quick_select(a, l, r, k):\n    '''\n    Implement quick select. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if l == r:\n        return a[l]\n    pivot = a[r]\n    i = l\n    for j in range(l, r):\n        if a[j] < pivot:\n            a[i], a[j] = a[j], a[i]\n            i += 1\n    a[i], a[r] = a[r], a[i]\n    if k == i:\n        return a[i]\n    elif k < i:\n        return quick_select(a, l, i-1, k)\n    else:\n        return quick_select(a, i+1, r, k)\ndef radix_sort(a):\n    '''\n    Implement radix sort. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    maximum = max(a)\n    m = len(str(maximum))\n    for i in range(1, m+1):\n        buckets = [[] for _ in range(10)]\n        for j in a:\n            buckets[(j // (10**i % 10)) % 10].append(j)\n        a = []\n        for b in buckets:\n            a.extend(b)\ndef counting_sort(a, k):\n    '''\n    Implement counting sort. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    count = [0 for _ in range(k+1)]\n    for i in a:\n        count[i] += 1\n    a = []\n    for j in range(k+1):\n        a.extend([j]*count[j])\ndef pq_insert(pq, item):\n    '''\n    Inserts a new element into a priority queue, and rearranges the elements such that the smallest element is at the top of the queue. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(pq) == 0:\n    "
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # bisect.bisect_left returns the index of the insertion point of x in a\n    # sorted array a to the left of its current position.\n    i = bisect.bisect_left(a, x)\n    if i < len(a):\n        if a[i]!= x:\n            return i\n    return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a)==0:\n        a.append(x)\n    else:\n        if x > a[-1]:\n            a.append(x)\n        else:\n            idx = bisect.bisect_left(a, x)\n            a.insert(idx, x)\n    return a\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    \n    i = bisect.bisect_left(a, x)\n    return i\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #a = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    #x = 3\n    index = bisect.bisect_left(a, x)\n    return index\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return -1\n    \ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #i = bisect.bisect(a, x)\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return 0\n    else:\n        return index - 1\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if (re.match(regex, string)):\n        return True\n    else:\n        return False\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if (re.match(regex, string)):\n        return True\n    else:\n        return False\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if (re.match(regex, string)):\n        return True\n    else:\n        return False\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if (re.match(regex, string)):\n        return True\n    else:\n        return False\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if (re.match(regex, string)):\n        return True\n    else:\n        return False\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if (re.match(regex, string)):\n        return True\n    else:\n        return False\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if (re.match(regex, string)):\n        return True\n    else:\n        return False\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if (re.match(regex, string)):\n        return True\n    else:\n        return False\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if (re.match(regex, string)):\n        return True\n    else:\n        return False\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if (re.match(regex, string)):\n        return True\n    else:\n        return False\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if (re.match(regex, string)):\n        return True\n    else:\n        return False\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if (re.match(regex, string)):\n        return True\n    else:\n        return False\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if (re.match(regex, string)):\n        return True\n    else:\n        return False\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if (re.match(regex, string)):\n        return True\n    else:\n        return False\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if (re.match(regex, string)):\n        return True\n    else:\n        return False\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if (re.match(regex, string)):\n        return True\n    else:\n        return False\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if (re.match(regex, string)):\n        return True\n    else:\n        return False\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if (re.match(regex, string)):\n        return True\n    else:\n        return False\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if (re.match(regex, string)):\n        return True\n    else:\n        return False\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if (re.match(regex, string)):\n        return True\n    else:\n        return False\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if (re.match(regex, string)):\n        return True\n    else:\n        return False\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if (re.match(regex, string)):\n        return True\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    print re.match(regex,string)\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.search(regex, string) is not None\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    # return bool(re.match(regex,string))\n    return re.search(regex,string)\n    \nprint check_str('aaaa')\nprint check_str('vvv')\nprint check_str('aeiou')\nprint check_str('a')\nprint check_str('v')\nprint check_str('d')\nprint check_str('B')\nprint check_str('bl')\nprint check_str('g')\nprint check_str('z')\nprint check_str('b2')\nprint check_str('w')\nprint check_str('rr')\nprint check_str('u4')\nprint check_str('jt')\nprint check_str('a2')\nprint check_str('w2')\nprint check_str('cc')\nprint check_str('e1')\nprint check_str('e2')\nprint check_str('k2')\nprint check_str('v2')\nprint check_str('g2')\nprint check_str('g2')\nprint check_str('c2')\nprint check_str('v4')\nprint check_str('k2')\nprint check_str('b3')\nprint check_str('v5')\nprint check_str('r5')\nprint check_str('o1')\nprint check_str('a3')\nprint check_str('d3')\nprint check_str('w3')\nprint check_str('k3')\nprint check_str('v3')\nprint check_str('a3')\nprint check_str('l2')\nprint check_str('e3')\nprint check_str('l3')\nprint check_str('o3')\nprint check_str('r3')\nprint check_str('u3')\nprint check_str('w3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('b2')\nprint check_str('n2')\nprint check_str('n2')\nprint check_str('r2')\nprint check_str('r2')\nprint check_str('l3')\nprint check_str('o3')\nprint check_str('g3')\nprint check_str('b3')\nprint check_str('v3')\nprint check_str('b3')\nprint check_str('w3')\nprint check_str('g3')\nprint check_str('v3')\nprint check_str('e3')\nprint check_str('l3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('i3')\nprint check_str('o3')\nprint check_str('i3')\nprint check_str('a3')\nprint check_str('u3')\nprint check_str('e3')\nprint check_str('r3')\nprint check_str('u3')\nprint check_str('a3')\nprint check_str('o3')\nprint check_str('b3')\nprint check_str('i3')\nprint check_str('i3')\nprint check_str('a3')\nprint check_str('u3')\nprint check_str('o3')\nprint check_str('b3')\nprint check_str('b3')\nprint check_str('w3')\nprint check_str('b3')\nprint check_str('v3')\nprint check_str('b3')\nprint check_str('o3')\nprint check_str('e3')\nprint check_str('l3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('r3')\nprint check_str('r3')\nprint check_str('l3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('b3')\nprint check_str('b3')\nprint check_str('i3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('r3')\nprint check_str('r3')\nprint check_str('l3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('r3')\nprint check_str('r3')\nprint check_str('i3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('r3')\nprint check_str('r3')\nprint check_str('l3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('r3')\nprint check_str('r3')\nprint check_str('i3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('r3')\nprint check_str('r3')\nprint check_str('l3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('r3')\nprint check_str('r3')\nprint check_str('i3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('r3')\nprint check_str('r3')\nprint check_str('l3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('r3')\nprint check_str('r3')\nprint check_str('i3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('r3')\nprint check_str('r3')\nprint check_str('i3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('r3')\nprint check_str('r3')\nprint check_str('i3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('r3')\nprint check_str('r3')\nprint check_str('i3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('r3')\nprint check_str('r3')\nprint check_str('i3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('r3')\nprint check_str('r3')\nprint check_str('i3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('r3')\nprint check_str('r3')\nprint check_str('i3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('r3')\nprint check_str('r3')\nprint check_str('i3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('r3')\nprint check_str('r3')\nprint check_str('i3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('r3')\nprint check_str('r3')\nprint check_str('i3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('r3')\nprint check_str('r3')\nprint check_str('i3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('r3')\nprint check_str('r3')\nprint check_str('i3')\nprint check_str('o3')\nprint check_str('o3')\nprint check_str('o"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    reg = re.compile(regex)\n    if reg.match(string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex,string) is not None\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False\ndef check_str_2(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match('^[aeiouAEIOU]',string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    m = re.match(regex, string)\n    if m:\n        print \"String starting with a vowel\"\n    else:\n        print \"String starts with consonant\"\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    res = re.match(regex,string)\n    if res is not None:\n        print 'String {} starts with vowel'.format(string)\n    else:\n        print 'String {} doesnot starts with vowel'.format(string)\n        \ncheck_str('mixed')\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex) \n    result = pattern.match(string) \n    if result: \n        print \"String starts with a vowel\" \n    else: \n        print \"String does not starts with a vowel\" \ncheck_str(\"asd\") \ncheck_str(\"Arun\") \ncheck_str(\"fgh\") \ncheck_str(\"ghj\") \n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n < 2:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n*(n-1)*(n-2)*(n-3)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return (1/float(n))*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n * (n - 1) / 2\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return 1 + (1/n)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    m = int(n*(n+1)/2)\n    i = 1\n    while i < m:\n        i = i*(i+1)/2\n    return int(i-m)\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    result = ((9*(n*n+1))/2) + 1\n    return int(result)\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    import math\n    import numpy as np\n    if n > 4:\n        index_list = [i for i in range(0, n+1, 1)]\n        index_list.remove(0)\n        index_list.remove(1)\n        index_list.remove(2)\n        index_list.remove(3)\n        num_list = []\n        for i in index_list:\n            num_list.append(i*(i+1)/2)\n        return index_list[np.argmin(num_list)]\n    else:\n        return n\ndef get_digits(n):\n    '''\n    Write a python function to get the digits of a number\n    '''\n    if n == 0:\n        return 1\n    while n!= 0:\n        n = n // 10\n        return n\ndef is_power(a,b):\n    '''\n    Write a python function to check if a number is power of some number\n    '''\n    return a%b == 0\ndef get_factors(n):\n    '''\n    Write a python function to get the factors of a number\n    '''\n    factors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    factors = list(set(factors))\n    return factors\ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime\n    '''\n    if n == 1:\n        return False\n    factors = get_factors(n)\n    for i in factors:\n        if not is_power(i, n):\n            return False\n    return True\ndef is_power_of_2(n):\n    '''\n    Write a python function to check if a number is power of 2\n    '''\n    return is_power(n,2)\ndef get_factors_of_power(n):\n    '''\n    Write a python function to get the factors of a power of some number\n    '''\n    if is_power(n,2):\n        return get_factors(n)\n    else:\n        return []\ndef get_number_of_factors(n):\n    '''\n    Write a python function to get the number of factors of a number\n    '''\n    if is_power(n,2):\n        return int(math.sqrt(n))\n    else:\n        return len(get_factors(n))\ndef get_euler_number(n):\n    '''\n    Write a python function to get the Euler number of a number\n    '''\n    if is_power_of_2(n):\n        return 0\n    else:\n        return -1 * (get_number_of_factors(n) - 1)\ndef get_digit_sum(n):\n    '''\n    Write a python function to get the sum of the digits of a number\n    '''\n    sum = 0\n    while n!= 0:\n        sum += n % 10\n        n = n // 10\n    return sum\ndef get_digit_product(n):\n    '''\n    Write a python function to get the product of the digits of a number\n    '''\n    product = 1\n    while n!= 0:\n        product *= n % 10\n        n = n // 10\n    return product\ndef get_digit_square_sum(n):\n    '''\n    Write a python function to get the sum of the digits of a square number\n    '''\n    sum = 0\n    while n!= 0:\n        sum += n % 10 * n % 10\n        n = n // 10\n    return sum\ndef get_digit_square_product(n):\n    '''\n    Write a python function to get the product of the digits of a square number\n    '''\n    product = 1\n    while n!= 0:\n        product *= n % 10 * n % 10\n        n = n // 10\n    return product\ndef get_digit_sum_of_square_digits(n):\n    '''\n    Write a python function to get the sum of the digits of a square number\n    '''\n    sum = 0\n    while n!= 0:\n        sum += n % 10\n        n = n // 10\n    return sum\ndef is_super_prime(n):\n    '''\n    Write a python function to check if a number is super prime\n    '''\n    if is_prime(n):\n        if get_digit_square_sum(n) == get_digit_sum_of_square_digits(n):\n            return True\n    return False\ndef get_divisor_sum(n):\n    '''\n    Write a python function to get the sum of the divisors of a number\n    '''\n    return get_factors_of_power(n).__len__()\ndef is_perfect(n):\n    '''\n    Write a python function to check if a number is perfect\n    '''\n    divisor_sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisor_sum += i\n    return divisor_sum == n\ndef is_abundant(n):\n    '''\n    Write a python function to check if a number is abundant\n    '''\n    divisor_sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisor_sum += i\n    return divisor_sum > n\ndef is_triangular_number(n):\n    '''\n    Write a python function to check if a number is triangular number\n    '''\n    return (n*(n+1))/2\ndef is_pentagonal_number(n):\n    '''\n    Write a python function to check if a number is pentagonal number\n    '''\n    return (n*(3*n-1))/2\ndef is_hexagonal_number(n):\n    '''\n    Write a python function to check if a number is hexagonal number\n    '''\n    return (n*(2*n-1))\ndef is_heptagonal_number(n):\n    '''\n    Write a python function to check if a number is hexagonal number\n    '''\n    return (n*(5*n-3))/2\ndef is_octagonal_number(n):\n    '''\n    Write a python function to check if a number is octagonal number\n    '''\n    return (n*(3*n-2))\ndef is_neptagonal_number(n):\n    '''\n    Write a python function to check if a number is neptagonal number\n    '''\n    return (n*(2*n-1))\ndef is_decagonal_number(n):\n    '''\n    Write a python function to check if a number is decagonal number\n    '''\n    return (n*(n-1))\ndef is_indecagonal_number(n):\n    '''\n    Write a python function to check if a number is indecagonal number\n    '''\n    return (n*(n+1))\ndef is_lucas_number(n):\n    '''\n    Write a python function to check if a number is lucas number\n    '''\n    return is_prime(4*n+2) and is_prime(4*n+1)\ndef get_divisors_of_factor(n):\n    '''\n    Write a python function to get the divisors of a factor of a number\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * get_divisors_of_factor(n - 1)\ndef get_triangle_number_divisor_product(n):\n    '''\n    Write a python function to get the product of divisors of triangular number\n    '''\n    return get_factors_of_power(n).__len__()\ndef get_pentagonal_number_divisor_product(n):\n    '''\n    Write a python function to get the product of divisors of pentagonal number\n    '''\n    return get_factors_of_power(n).__len__()\ndef get_hexagonal_number_divisor_product(n):\n    '''\n    Write a python function to get the product o"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n < 1:\n        print('invalid number')\n    else:\n        if n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return (n - 1) + find_Index(n - 1)\ndef check_triangular_num(num):\n    '''\n    Write a python function to check whether a number is triangular or not.\n    '''\n    if num == 1:\n        return True\n    else:\n        if num % 2 == 0:\n            num = num / 2\n            if num == 1:\n                return True\n            else:\n                return check_triangular_num(num)\n        else:\n            temp = 3 * num + 1\n            if temp % 2 == 0:\n                temp = temp / 2\n                if temp == 1:\n                    return True\n                else:\n                    return check_triangular_num(temp)\n            else:\n                return False\ndef sieve(n):\n    '''\n    Write a python program to find the number of divisors for a given number. https://www.geeksforgeeks.org/number-of-divisors-of-number/\n    '''\n    if n == 1:\n        return 1\n    else:\n        s = 0\n        for i in range(1, n+1):\n            if n % i == 0:\n                s = s + 1\n        return s\ndef is_pandigital(n):\n    '''\n    Write a python program to check whether a number is pandigital or not. https://www.geeksforgeeks.org/check-whether-a-number-is-pandigital-or-not/\n    '''\n    if len(str(n))!= 9:\n        return False\n    else:\n        a = 0\n        for i in range(1, 10):\n            if str(i) in str(n):\n                a = a + 1\n        if a == 9:\n            return True\n        else:\n            return False\ndef num_Factors(n):\n    '''\n    Write a python program to find the number of factors of a given number. https://www.geeksforgeeks.org/number-of-factors-of-number/\n    '''\n    if n == 1:\n        return 1\n    else:\n        s = 0\n        for i in range(1, n+1):\n            if n % i == 0:\n                s = s + 1\n        return s\ndef triangle_number(n):\n    '''\n    Write a python program to find the nth triangular number. https://www.geeksforgeeks.org/nth-triangular-number/\n    '''\n    if n == 0:\n        return 0\n    else:\n        return int((n + 1) * n / 2)\ndef num_digit(n):\n    '''\n    Write a python program to find the number of digits in a number. https://www.geeksforgeeks.org/number-of-digits-of-number/\n    '''\n    if n == 0:\n        return 1\n    else:\n        return int(math.log10(n)) + 1\ndef num_Digits(n):\n    '''\n    Write a python program to find the number of digits in a given number. https://www.geeksforgeeks.org/number-of-digits-of-number/\n    '''\n    c = 0\n    if n < 0:\n        n = abs(n)\n        while n > 0:\n            c = c + 1\n            n = n / 10\n    else:\n        while n > 0:\n            c = c + 1\n            n = n / 10\n    return c\ndef find_power_digit(num, exp):\n    '''\n    Write a python function to find the power of the digit with number denoted by the given base and exponent. https://www.geeksforgeeks.org/find-power-of-digit-with-number-denoted-by-given-base-and-exponent/\n    '''\n    if num == 0:\n        return 0\n    else:\n        return int(num % 10**(exp-1)) * 10**(exp-1) + find_power_digit(num / 10**(exp-1), exp - 1)\ndef create_pyramid(n):\n    '''\n    Write a python program to create a pyramid pattern with the given number of rows. https://www.geeksforgeeks.org/pyramid-pattern-using-python/\n    '''\n    for i in range(n):\n        for j in range(i+1):\n            print(j+1, end ='')\n        print()\ndef print_subset(n):\n    '''\n    Write a python program to print all subsets with given number of elements. https://www.geeksforgeeks.org/print-all-subsets-with-given-number-of-elements/\n    '''\n    if n == 0:\n        return [[]]\n    elif n == 1:\n        return [[1], []]\n    else:\n        subset_list = []\n        for i in range(n+1):\n            subset_list.append([])\n            for j in range(i+1):\n                subset_list[i].append(1)\n            subset_list[i].append(0)\n        subset_list[n].append(1)\n        return subset_list\ndef print_permutations(n):\n    '''\n    Write a python program to print all permutations of given string. https://www.geeksforgeeks.org/print-all-permutations-of-given-string/\n    '''\n    if n == 0:\n        return [[]]\n    elif n == 1:\n        return [[\"1\"]]\n    else:\n        permutations_list = []\n        for i in range(n+1):\n            permutations_list.append([])\n            for j in range(n+1):\n                permutations_list[i].append(1)\n        permutations_list[0].append(1)\n        for i in range(1, n+1):\n            permutations_list[i][0] = 1\n        for i in range(n+1):\n            for j in range(1, n+1):\n                if i > j:\n                    permutations_list[i][j] = permutations_list[i-1][j]\n                else:\n                    permutations_list[i][j] = permutations_list[i-1][j] + permutations_list[i][j-1]\n        return permutations_list\ndef palindrome_check(n):\n    '''\n    Write a python program to check if a number is a palindrome or not. https://www.geeksforgeeks.org/check-if-a-number-is-palindrome-or-not/\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n < 0:\n        return False\n    else:\n        if n % 10 == 0:\n            return palindrome_check(n / 10)\n        else:\n            return False\ndef power(a, b):\n    '''\n    Write a python program to compute a power of a given number. https://www.geeksforgeeks.org/power-of-number-using-recursion/\n    '''\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    else:\n        return power(a, b-1) * a\ndef nCr(n, r):\n    '''\n    Write a python program to compute the value of n choose r. https://www.geeksforgeeks.org/n-choose-r/\n    '''\n    if r > n:\n        return 0\n    else:\n        return power(n, n-r) / math.factorial(r)\ndef reverse_digits(n):\n    '''\n    Write a python program to reverse digits of a number. https://www.geeksforgeeks.org/reverse-digits-of-a-number/\n    '''\n    if n == 0:\n        return 0\n    else:\n        return ((n % 10) * 10**(len(str(n))-1) + reverse_digits(int(n / 10)))\ndef power_digit(num, power):\n    ''"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #2^(n-1) * (n-1)\n    return int(math.ceil(n * (n+1) / 2))\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize result \n    result = 0\n    # Do following for every possible base number \n    for i in range(1, n): \n        # Use a simple formula to find triangular numbers \n        temp = int((i * (i + 1)) / 2)\n        # If the result is greater than n \n        if temp > n: \n            # Then return the current index\n            return i - 1\n        # Else update the result \n        else: \n            result = temp \n    # Return result \n    return result \ndef calculate_triangle_number(num): \n    '''\n    Write a python function to calculate the triangle number by given number num. https://www.geeksforgeeks.org/triangle-number/\n    '''\n    # Initialize result \n    result = 0\n    # Do following for every possible base number \n    for i in range(1, num + 1): \n        # Use a simple formula to find triangular numbers \n        result = result + i\n    # Return result \n    return result \ndef check_prime(n): \n    '''\n    Write a python function to check if the number is prime or not. https://www.geeksforgeeks.org/check-if-number-is-prime-or-not/\n    '''\n    # If n is greater than 1 \n    if n > 1: \n        # Iterate from 2 to n / 2 \n        for i in range(2, int(n / 2) + 1): \n            # If n is divisible by any number between \n            # 2 and n / 2, it is not prime \n            if (n % i) == 0: \n                return False\n        else: \n            return True\n    # If n is less than 2, it is not prime \n    else: \n        return False\ndef check_prime_non_recursive(n): \n    '''\n    Write a python function to check if the number is prime or not. https://www.geeksforgeeks.org/check-if-number-is-prime-or-not/\n    '''\n    # If n is greater than 1 \n    if n > 1: \n        # Iterate from 2 to n / 2 \n        for i in range(2, int(n / 2) + 1): \n            # If n is divisible by any number between \n            # 2 and n / 2, it is not prime \n            if (n % i) == 0: \n                return False\n        else: \n            return True\n    # If n is less than 2, it is not prime \n    else: \n        return False\ndef find_primes(n): \n    '''\n    Write a python function to find all the prime numbers up to n. https://www.geeksforgeeks.org/find-all-the-primes-up-to-n/\n    '''\n    # Initialize primes array \n    primes = []\n    # Loop from 1 to n \n    for i in range(1, n + 1): \n        # If the number is prime, then append it to the list \n        if check_prime_non_recursive(i): \n            primes.append(i)\n    # Return the list \n    return primes\ndef find_primes_up_to_n(n): \n    '''\n    Write a python function to find all the prime numbers up to n. https://www.geeksforgeeks.org/find-all-the-primes-up-to-n/\n    '''\n    # Initialize result \n    result = []\n    # Initialize a counter \n    i = 1\n    # Loop from 1 to n \n    while i <= n: \n        # If the number is prime, then append it to the list \n        if check_prime_non_recursive(i): \n            result.append(i)\n        # Increment the counter \n        i += 1\n    # Return the list \n    return result\ndef calculate_triangular_number(num): \n    '''\n    Write a python function to calculate the triangular number by given number num. https://www.geeksforgeeks.org/triangle-number/\n    '''\n    # Initialize result \n    result = 0\n    # Do following for every possible base number \n    for i in range(1, num + 1): \n        # Use a simple formula to find triangular numbers \n        result = result + i\n    # Return result \n    return result \ndef check_prime_triangular_number(num): \n    '''\n    Write a python function to check if the number is prime or not. https://www.geeksforgeeks.org/check-if-number-is-prime-or-not/\n    '''\n    # Initialize result \n    result = 0\n    # Do following for every possible base number \n    for i in range(1, num + 1): \n        # Use a simple formula to find triangular numbers \n        result = result + i\n    # If result is greater than num, then it is not prime \n    if result > num: \n        return False\n    else: \n        # Else, it is prime \n        return True\ndef get_next_prime(n): \n    '''\n    Write a python function to get the next prime number greater than the given number n. https://www.geeksforgeeks.org/find-next-prime-number-greater-than-n/\n    '''\n    # Initialize result \n    result = 0\n    # Do following for every possible base number \n    for i in range(n + 1, 1, -1): \n        # If the number is prime, then update the result \n        if check_prime_triangular_number(i): \n            result = i\n            break\n    # Return result \n    return result \ndef count_primes(n): \n    '''\n    Write a python function to count the number of prime numbers from 1 to n. https://www.geeksforgeeks.org/count-the-number-of-prime-numbers-from-1-to-n/\n    '''\n    # Initialize count \n    count = 0\n    # Do following for every possible base number \n    for i in range(1, n + 1): \n        # If the number is prime, then increment the count \n        if check_prime_triangular_number(i): \n            count += 1\n    # Return count \n    return count \ndef calculate_primes(n): \n    '''\n    Write a python function to calculate the number of prime numbers from 1 to n. https://www.geeksforgeeks.org/count-the-number-of-prime-numbers-from-1-to-n/\n    '''\n    # Initialize count \n    count = 0\n    # Do following for every possible base number \n    for i in range(1, n + 1): \n        # If the number is prime, then increment the count \n        if check_prime_triangular_number(i): \n            count += 1\n    # Return count \n    return count \ndef find_primes_in_range(a, b): \n    '''\n    Write a python function to find all the prime numbers from a to b. https://www.geeksforgeeks.org/find-all-the-primes-from-a-to-b/\n    '''\n    # Initialize result \n    result = []\n    # Initialize a counter \n    i = 1\n    # Loop from 1 to n \n    while i <= b: \n        # If the number is prime, then append it to the list \n        if check_prime_triangular_number(i): \n            result.append(i)\n        # Increment the counter \n        i += 1\n    # Return the list \n    return result\ndef find_smallest_triangular_number(num): \n    '''\n    Write a python function to find the smallest triangular number with n digits. https://www.geeksforgeeks.org/find-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize result \n    result = 0\n    # Do following for every possible base number \n    for i in range(1, num + 1): \n        # Use a simple formula to find triangular numbers \n        result = result + i\n    # Return result \n    return resul"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    res = int(math.pow(10, n))\n    return res\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    n = int(n) \n    for i in range(0, 1001): \n        s = str(i) \n        if(len(s) == n): \n            break\n    return i \n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==1:\n        return 0\n    else:\n        l=int(math.pow(10,n-1))\n        if n==2:\n            return int(l/3)\n        else:\n            return int((l*(l+1))/2)\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    k = int(math.ceil(math.log(n, 3)))\n    if (k == 1):\n        return (n - 1)\n    else:\n        if (k%2 == 0):\n            return ((3**(k - 1)) - (2**(k - 1)) - 1) + n - 1\n        else:\n            return ((3**(k - 1)) - (2**(k - 1)) - 1) + n - 1 + (2**(k - 2))\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key_val_dict = dict()\n    for index, element in enumerate(test_tup):\n        key_val_dict[element] = test_tup[index + 1]\n    return key_val_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # check the test case for tuple\n    if isinstance(test_tup, tuple):\n        # check if the length of the tuple is even or odd\n        if len(test_tup) % 2 == 0:\n            # create a new dictionary\n            test_dict = { test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup), 2) }\n            return test_dict\n        elif len(test_tup) % 2!= 0:\n            # create a new dictionary\n            test_dict = { test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup)-1, 2) }\n            return test_dict\n    else:\n        return None\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    res = {}\n    for i in range(0, len(test_tup), 2):\n        res[test_tup[i]] = test_tup[i+1]\n    return res\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # for i, j in zip(test_tup, range(len(test_tup))):\n    #     print(i, j)\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:]))\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[0]: test_tup[1]}\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # write your code here\n    res = {}\n    for i in range(0, len(test_tup)):\n        res[test_tup[i]] = test_tup[i+1]\n    return res\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for idx, val in enumerate(test_tup):\n        d[val] = test_tup[idx+1]\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    \n    test_dict = {}\n    for i,j in enumerate(test_tup):\n        test_dict[i] = j\n    return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup), 2)}\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1 :\n        return True\n    return False\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s = s.lower()\n    s = s.strip()\n    print(s)\n    temp = s[0]\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    cnt = {}\n    for i in s :\n        if i not in cnt :\n            cnt[i] = 1\n        else :\n            cnt[i] += 1\n    for i in cnt.values() :\n        if i == 1 :\n            return True\n        else :\n            return False\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in s:\n        if i!= s[0]:\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s) - 1) :\n        if s[i]!= s[i + 1] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)) :\n        if s[i]!= s[0] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0,len(s)) :\n        if s[i]!=s[0] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in s :\n        if s.count(i) > 1 :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) == 1\n    \n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3)*(3*(side**2))/4\ndef area_octahedron(side):\n    '''\n    Write a function to caluclate the area of a octahedron.\n    '''\n    return math.sqrt(3)*(3*(side**2))/4\ndef area_dodecahedron(side):\n    '''\n    Write a function to caluclate the area of a dodecahedron.\n    '''\n    return math.sqrt(3)*(5*(side**2))/12\ndef area_icosahedron(side):\n    '''\n    Write a function to caluclate the area of a icosahedron.\n    '''\n    return math.sqrt(3)*(5*(side**2))/12\ndef area_tetrahedron_test():\n    '''\n    Write a test for the above function.\n    '''\n    side = 3\n    assert(area_tetrahedron(side) == 6)\ndef area_octahedron_test():\n    '''\n    Write a test for the above function.\n    '''\n    side = 3\n    assert(area_octahedron(side) == 12)\ndef area_dodecahedron_test():\n    '''\n    Write a test for the above function.\n    '''\n    side = 3\n    assert(area_dodecahedron(side) == 30)\ndef area_icosahedron_test():\n    '''\n    Write a test for the above function.\n    '''\n    side = 3\n    assert(area_icosahedron(side) == 12)\ndef area_triangle(side1,side2):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    return 0.5*(side1*side2)\ndef area_triangle_test():\n    '''\n    Write a test for the above function.\n    '''\n    side1 = 3\n    side2 = 4\n    assert(area_triangle(side1,side2) == 6)\ndef area_triangle_test():\n    '''\n    Write a test for the above function.\n    '''\n    side1 = 4\n    side2 = 3\n    assert(area_triangle(side1,side2) == 4)\ndef area_triangle_test():\n    '''\n    Write a test for the above function.\n    '''\n    side1 = 4\n    side2 = 4\n    assert(area_triangle(side1,side2) == 8)\ndef area_triangle_test():\n    '''\n    Write a test for the above function.\n    '''\n    side1 = 4\n    side2 = 4\n    assert(area_triangle(side1,side2) == 8)\ndef area_triangle_test():\n    '''\n    Write a test for the above function.\n    '''\n    side1 = 4\n    side2 = 4\n    assert(area_triangle(side1,side2) == 8)\ndef area_triangle_test():\n    '''\n    Write a test for the above function.\n    '''\n    side1 = 4\n    side2 = 4\n    assert(area_triangle(side1,side2) == 8)\ndef area_triangle_test():\n    '''\n    Write a test for the above function.\n    '''\n    side1 = 4\n    side2 = 4\n    assert(area_triangle(side1,side2) == 8)\ndef area_triangle_test():\n    '''\n    Write a test for the above function.\n    '''\n    side1 = 4\n    side2 = 4\n    assert(area_triangle(side1,side2) == 8)\ndef area_triangle_test():\n    '''\n    Write a test for the above function.\n    '''\n    side1 = 4\n    side2 = 4\n    assert(area_triangle(side1,side2) == 8)\ndef area_triangle_test():\n    '''\n    Write a test for the above function.\n    '''\n    side1 = 4\n    side2 = 4\n    assert(area_triangle(side1,side2) == 8)\ndef area_triangle_test():\n    '''\n    Write a test for the above function.\n    '''\n    side1 = 4\n    side2 = 4\n    assert(area_triangle(side1,side2) == 8)\ndef area_triangle_test():\n    '''\n    Write a test for the above function.\n    '''\n    side1 = 4\n    side2 = 4\n    assert(area_triangle(side1,side2) == 8)\ndef area_triangle_test():\n    '''\n    Write a test for the above function.\n    '''\n    side1 = 4\n    side2 = 4\n    assert(area_triangle(side1,side2) == 8)\ndef area_triangle_test():\n    '''\n    Write a test for the above function.\n    '''\n    side1 = 4\n    side2 = 4\n    assert(area_triangle(side1,side2) == 8)\ndef area_triangle_test():\n    '''\n    Write a test for the above function.\n    '''\n    side1 = 4\n    side2 = 4\n    assert(area_triangle(side1,side2) == 8)\ndef area_triangle_test():\n    '''\n    Write a test for the above function.\n    '''\n    side1 = 4\n    side2 = 4\n    assert(area_triangle(side1,side2) == 8)\ndef area_triangle_test():\n    '''\n    Write a test for the above function.\n    '''\n    side1 = 4\n    side2 = 4\n    assert(area_triangle(side1,side2) == 8)\ndef area_triangle_test():\n    '''\n    Write a test for the above function.\n    '''\n    side1 = 4\n    side2 = 4\n    assert(area_triangle(side1,side2) == 8)\ndef area_triangle_test():\n    '''\n    Write a test for the above function.\n    '''\n    side1 = 4\n    side2 = 4\n    assert(area_triangle(side1,side2) == 8)\ndef area_triangle_test():\n    '''\n    Write a test for the above function.\n    '''\n    side1 = 4\n    side2 = 4\n    assert(area_triangle(side1,side2) == 8)\ndef area_triangle_test():\n    '''\n    Write a test for the above function.\n    '''\n    side1 = 4\n    side2 = 4\n    assert(area_triangle(side1,side2) == 8)\ndef area_triangle_test():\n    '''\n    Write a test for the above function.\n    '''\n    side1 = 4\n    side2 = 4\n    assert(area_triangle(side1,side2) == 8)\ndef area_triangle_test():\n    '''\n    Write a test for the above function.\n    '''\n    side1 = 4\n    side2 = 4\n    assert(area_triangle(side1,side2) == 8)\ndef area_triangle_test():\n    '''\n    Write a test for the above function.\n    '''\n    side1 = 4\n    side2 = 4\n    assert(area_triangle(side1,side2) == 8)\ndef area_triangle_test():\n    '''\n    Write a test for the above function.\n    '''\n    side1 = 4\n    side2 = 4\n    assert(area_triangle(side1,side2) == 8)\ndef area_triangle_test():\n    '''\n    Write a test for the above function.\n    '''\n    side1 = 4\n    side2 = 4\n    assert(area_triangle(side1,side2) == 8)\ndef area_triangle_test():\n    '''\n    Write a test for the above function.\n    '''\n    side1 = 4\n    side2 = 4\n    assert(area_triangle(side1,side2) == 8)\ndef area_triangle_test():\n    '''\n    Write a test for the above function"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (3*(side**2))/4\n    print(area)\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3)*side*side\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3*side**2)/4\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = ((3.0/4.0) * (math.sqrt(3.0)) * math.pow(side,2.0))\n    return area\ndef area_trapezoid(a, b, h):\n    '''\n    Write a function to caluclate the area of a trapezoid.\n    '''\n    area = (1.0/2.0) * (a + b) * h\n    return area\ndef area_isosceles_triangle(b, h):\n    '''\n    Write a function to caluclate the area of an isosceles triangle.\n    '''\n    area = (b * h) / 2.0\n    return area\ndef area_equilateral_triangle(a):\n    '''\n    Write a function to caluclate the area of an equilateral triangle.\n    '''\n    area = (1.0/4.0) * (3.0 * math.sqrt(3.0)) * math.pow(a,2.0)\n    return area\ndef area_square(a):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    area = (1.0/4.0) * math.pow(a,2.0)\n    return area\ndef area_rectangle(b, h):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    area = b * h\n    return area\ndef area_triangle(a, b, c):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    s = (a + b + c) / 2.0\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area\ndef area_hexagon(a):\n    '''\n    Write a function to caluclate the area of a hexagon.\n    '''\n    area = (3.0/2.0) * math.sqrt(3.0) * math.pow(a,2.0)\n    return area\ndef area_circle(r):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    area = math.pi * math.pow(r,2.0)\n    return area\ndef volume_tetrahedron(a, b, c, d):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    volume = (1.0/6.0) * math.pow(a,3.0) * math.pow(b,3.0) * math.pow(c,3.0) * math.pow(d,3.0)\n    return volume\ndef volume_cube(a):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    volume = math.pow(a,3.0)\n    return volume\ndef volume_cylinder(r, h):\n    '''\n    Write a function to caluclate the volume of a cylinder.\n    '''\n    volume = math.pi * math.pow(r,2.0) * h\n    return volume\ndef volume_sphere(r):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    volume = (4.0/3.0) * math.pi * math.pow(r,3.0)\n    return volume\ndef volume_cone(r, h):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    volume = (1.0/3.0) * math.pi * math.pow(r,2.0) * h\n    return volume\ndef volume_sphere_shell(r, h1, h2):\n    '''\n    Write a function to caluclate the volume of a sphere shell.\n    '''\n    volume = (4.0/3.0) * math.pi * math.pow(r,2.0) * (h1 + h2)\n    return volume\ndef volume_cone_shell(r, h1, h2):\n    '''\n    Write a function to caluclate the volume of a cone shell.\n    '''\n    volume = (1.0/3.0) * math.pi * math.pow(r,2.0) * (h1 + h2)\n    return volume\ndef volume_rectangular_prism(a, b, c):\n    '''\n    Write a function to caluclate the volume of a rectangular prism.\n    '''\n    volume = math.pow(a,3.0) * math.pow(b,3.0) * math.pow(c,3.0)\n    return volume\ndef volume_cuboid(a, b, c):\n    '''\n    Write a function to caluclate the volume of a cuboid.\n    '''\n    volume = math.pow(a,3.0) * math.pow(b,3.0) * math.pow(c,3.0)\n    return volume\ndef volume_pyramid(a, b, c):\n    '''\n    Write a function to caluclate the volume of a pyramid.\n    '''\n    volume = (1.0/3.0) * math.pow(a,3.0) * math.pow(b,3.0) * math.pow(c,3.0)\n    return volume\ndef volume_cone_pyramid(r, h):\n    '''\n    Write a function to caluclate the volume of a cone-pyramid.\n    '''\n    volume = (1.0/3.0) * math.pi * math.pow(r,2.0) * math.pow(h,2.0)\n    return volume\ndef volume_conical_shell(r, h1, h2):\n    '''\n    Write a function to caluclate the volume of a conical shell.\n    '''\n    volume = (1.0/3.0) * math.pi * math.pow(r,2.0) * (h1 + h2)\n    return volume\ndef volume_conical_prism(r, h1, h2):\n    '''\n    Write a function to caluclate the volume of a conical prism.\n    '''\n    volume = (1.0/3.0) * math.pi * math.pow(r,2.0) * (h1 + h2)\n    return volume\ndef volume_spherical_shell(r, h1, h2):\n    '''\n    Write a function to caluclate the volume of a spherical shell.\n    '''\n    volume = (4.0/3.0) * math.pi * math.pow(r,2.0) * (h1 + h2)\n    return volume\ndef volume_spherical_prism(r, h1, h2):\n    '''\n    Write a function to caluclate the volume of a spherical prism.\n    '''\n    volume = (4.0/3.0) * math.pi * math.pow(r,2.0) * (h1 + h2)\n    return volume\ndef volume_ellipsoid(a, b, c):\n    '''\n    Write a function to caluclate the volume of an ellipsoid.\n    '''\n    volume = (4.0/3.0) * math.pi * math.pow(a,3.0) * math.pow(b,3.0) * math.pow(c,3.0)\n    return volume\ndef volume_ellipsoid_shell(a, b, c, h1, h2):\n    '''\n    Write a function to caluclate the volume of an ellipsoid shell.\n    '''\n    volume = (4.0/3.0) * math.pi * math.pow(a,3.0) * math.pow(b,3.0) * math.pow(c,3.0) * (h1 + h2)\n    return volume\ndef volume_ellipsoid_prism(a, b, c, h1, h2):\n    '''\n    Write a function to caluclate the volume of an ellipsoid-prism.\n    ''"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 1.0/6 * math.sqrt(3) * (side * side)\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) / 4.0 * side**2\n    # return math.sqrt(3) / 4.0 * side**2\ndef area_triangle(base, height):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return (base * height) / 2.0\ndef area_parallelogram(base, height):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return base * height\ndef area_trapezoid(bottom, top, height):\n    '''\n    Write a function to calculate the area of a trapezoid.\n    '''\n    return (bottom + top) / 2.0 * height\ndef area_cube(side):\n    '''\n    Write a function to calculate the area of a cube.\n    '''\n    return side**3\ndef area_sphere(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    return 4 * math.pi * radius**2\ndef area_sphere_volume(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return 4.0/3.0 * math.pi * radius**3\ndef area_sphere_surface_area(radius):\n    '''\n    Write a function to calculate the surface area of a sphere.\n    '''\n    return 4.0 * math.pi * radius**2\ndef area_circle(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return math.pi * radius**2\ndef area_circle_area(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return math.pi * radius**2\ndef area_circle_volume(radius):\n    '''\n    Write a function to calculate the volume of a circle.\n    '''\n    return math.pi * radius**3 / 4.0\ndef area_circle_surface_area(radius):\n    '''\n    Write a function to calculate the surface area of a circle.\n    '''\n    return 2.0 * math.pi * radius\ndef area_circle_volume(radius):\n    '''\n    Write a function to calculate the volume of a circle.\n    '''\n    return math.pi * radius**3 / 4.0\ndef area_rectangular_prism(length, width, height):\n    '''\n    Write a function to calculate the area of a rectangular prism.\n    '''\n    return 2.0 * length * width + 2.0 * width * height + 2.0 * length * height\ndef area_rhombus(base, height):\n    '''\n    Write a function to calculate the area of a rhombus.\n    '''\n    return base * height / 2.0\ndef area_box(length, width, height):\n    '''\n    Write a function to calculate the area of a box.\n    '''\n    return length * width + width * height + height * length\ndef area_rhombus_area(base, height):\n    '''\n    Write a function to calculate the area of a rhombus.\n    '''\n    return base * height / 2.0\ndef area_dodecahedron(side):\n    '''\n    Write a function to calculate the area of a dodecahedron.\n    '''\n    return math.sqrt(10) / 12.0 * side**2\ndef area_dodecahedron_volume(side):\n    '''\n    Write a function to calculate the volume of a dodecahedron.\n    '''\n    return math.sqrt(10) / 12.0 * side**3\ndef area_dodecahedron_surface_area(side):\n    '''\n    Write a function to calculate the surface area of a dodecahedron.\n    '''\n    return 60.0 * side**2\ndef area_dodecahedron_volume(side):\n    '''\n    Write a function to calculate the volume of a dodecahedron.\n    '''\n    return 60.0 / 12.0 * side**3\ndef area_octahedron(side):\n    '''\n    Write a function to calculate the area of a octahedron.\n    '''\n    return math.sqrt(8) / 4.0 * side**2\ndef area_octahedron_surface_area(side):\n    '''\n    Write a function to calculate the surface area of a octahedron.\n    '''\n    return 12.0 * side**2\ndef area_octahedron_volume(side):\n    '''\n    Write a function to calculate the volume of a octahedron.\n    '''\n    return math.sqrt(8) / 4.0 * side**3\ndef area_icosahedron(side):\n    '''\n    Write a function to calculate the area of a icosahedron.\n    '''\n    return math.sqrt(12) / 4.0 * side**2\ndef area_icosahedron_volume(side):\n    '''\n    Write a function to calculate the volume of a icosahedron.\n    '''\n    return math.sqrt(12) / 4.0 * side**3\ndef area_icosahedron_surface_area(side):\n    '''\n    Write a function to calculate the surface area of a icosahedron.\n    '''\n    return 12.0 * side**2\ndef area_icosahedron_volume(side):\n    '''\n    Write a function to calculate the volume of a icosahedron.\n    '''\n    return 12.0 / 4.0 * side**3\ndef area_polyhedron(sides):\n    '''\n    Write a function to calculate the area of a polyhedron.\n    '''\n    return 1.0 / sides * math.sqrt(sides / (sides + 1))\ndef area_octahedron_volume(side):\n    '''\n    Write a function to calculate the volume of a octahedron.\n    '''\n    return 1.0 / 8.0 * side**3\ndef area_octahedron_surface_area(side):\n    '''\n    Write a function to calculate the surface area of a octahedron.\n    '''\n    return 1.0 / 2.0 * side**2\ndef area_octahedron_volume(side):\n    '''\n    Write a function to calculate the volume of a octahedron.\n    '''\n    return 1.0 / 8.0 * side**3\ndef area_tetrahedron(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    return math.sqrt(6) / 4.0 * side**2\ndef area_tetrahedron_surface_area(side):\n    '''\n    Write a function to calculate the surface area of a tetrahedron.\n    '''\n    return 6.0 * side**2\ndef area_tetrahedron_volume(side):\n    '''\n    Write a function to calculate the volume of a tetrahedron.\n    '''\n    return math.sqrt(6) / 4.0 * side**3\ndef area_triangle_area(base, height):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return base * height / 2.0\ndef area_triangle_surface_area(base, height):\n    '''\n    Write a function to calculate the surface area of a triangle.\n    '''\n    return base * height\ndef area_triangle_volume(base, height):\n    '''\n    Write a function to calculate the volume of a triangle.\n    '''\n    return (base * height) / 2.0\ndef area_triangle_area(base, height):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return base * height\ndef area_triangle_area(base, height):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return base * height\ndef area_triangle_area(base, height):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return base * height\ndef area_triangle_area(base, height):\n    '''\n    Write a function to calculate the area of a triangle.\n    '"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/4)*math.sqrt(5)*side**2\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3/4)*(math.sqrt(5))*(side**2)\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return side**2*6\ndef area_octahedron(side):\n    '''\n    Write a function to caluclate the area of an octahedron.\n    '''\n    return (3/4)*(math.sqrt(2))*(side**2)\ndef area_dodecahedron(side):\n    '''\n    Write a function to caluclate the area of a dodecahedron.\n    '''\n    return (3/8)*(math.sqrt(3))*(side**2)\ndef area_icosahedron(side):\n    '''\n    Write a function to caluclate the area of a icosahedron.\n    '''\n    return (5/12)*(math.sqrt(5))*(side**2)\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return (1/4)*(math.sqrt(5))*(side**3)\ndef volume_cube(side):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    return side**3*6\ndef volume_octahedron(side):\n    '''\n    Write a function to caluclate the volume of an octahedron.\n    '''\n    return (1/4)*(math.sqrt(2))*(side**3)\ndef volume_dodecahedron(side):\n    '''\n    Write a function to caluclate the volume of a dodecahedron.\n    '''\n    return (1/8)*(math.sqrt(3))*(side**3)\ndef volume_icosahedron(side):\n    '''\n    Write a function to caluclate the volume of a icosahedron.\n    '''\n    return (5/12)*(math.sqrt(5))*(side**3)\ndef main():\n    try:\n        side=int(input(\"Please enter the side of your shape: \"))\n        if(side<0):\n            print(\"The side must be greater than 0. Try again.\")\n            return main()\n        shape=input(\"Please enter the name of your shape: \")\n        if(shape!='tetrahedron' and shape!='cube' and shape!='octahedron' and shape!='dodecahedron' and shape!='icosahedron'):\n            print(\"Shape must be between tetrahedron, cube, octahedron, dodecahedron or icosahedron. Try again.\")\n            return main()\n    except:\n        print(\"Error: Enter an integer value. Try again.\")\n        return main()\n    if(shape=='tetrahedron'):\n        print(\"The area of your {} is {} units^2.\".format(shape,area_tetrahedron(side)))\n    elif(shape=='cube'):\n        print(\"The area of your {} is {} units^2.\".format(shape,area_cube(side)))\n    elif(shape=='octahedron'):\n        print(\"The area of your {} is {} units^2.\".format(shape,area_octahedron(side)))\n    elif(shape=='dodecahedron'):\n        print(\"The area of your {} is {} units^2.\".format(shape,area_dodecahedron(side)))\n    elif(shape=='icosahedron'):\n        print(\"The area of your {} is {} units^2.\".format(shape,area_icosahedron(side)))\n    print(\"The volume of your {} is {} units^3.\".format(shape,volume_tetrahedron(side)))\n    print(\"The volume of your {} is {} units^3.\".format(shape,volume_cube(side)))\n    print(\"The volume of your {} is {} units^3.\".format(shape,volume_octahedron(side)))\n    print(\"The volume of your {} is {} units^3.\".format(shape,volume_dodecahedron(side)))\n    print(\"The volume of your {} is {} units^3.\".format(shape,volume_icosahedron(side)))\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side * math.sqrt(3)) / 4\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m > 0:\n        return list[m:] + list[:m]\n    elif m < 0:\n        return list[m:] + list[:m]\n    else:\n        return list\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    l = len(list)\n    if m > l:\n        m = m % l\n    return list[-m:] + list[:-m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    length = len(list)\n    return list[(length - m):] + list[:(length - m)]\n    \ndef list_to_string(list):\n    '''\n    Write a function to turn a list into string\n    '''\n    return ''.join(list)\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # If the list is empty\n    if list == []:\n        return []\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    m = m % len(list)\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(0, m):\n        temp = list[len(list)-1]\n        for j in range(len(list)-1, -1, -1):\n            list[j] = list[j-1]\n        list[0] = temp\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # no need to do anything if number of items to be rotated is 0 or equal to the length of the list\n    if m == 0 or m == len(list):\n        return list\n    # make a new list of size n-m\n    new_list = [0] * (len(list) - m)\n    # reverse the new list\n    new_list.extend(list[len(list)-m:len(list)])\n    # reverse the original list\n    reverse_list = list[:len(list)-m]\n    reverse_list.reverse()\n    # add reversed list to the new list\n    new_list.extend(reverse_list)\n    # return the new list\n    return new_list\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return (0,1)[None in test_tup]\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return None in test_tup\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for tup in test_tup:\n        if tup == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return False\n    return True\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n    \ndef check_all_none(test_tup):\n    '''\n    Write a function to check if all the elements are none in the given tuple.\n    '''\n    if None in test_tup:\n        return False\n    return True\n    \ndef check_any_none(test_tup):\n    '''\n    Write a function to check if any of the elements are none in the given tuple.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n    \ndef is_in(element, sequence):\n    '''\n    Write a function to check if the given element is in the sequence or not.\n    '''\n    return element in sequence\n    \ndef find_first(sequence, predicate):\n    '''\n    Write a function to find the first element that satisfies the predicate\n    '''\n    for i in sequence:\n        if predicate(i):\n            return i\n    return None\n    \ndef find_last(sequence, predicate):\n    '''\n    Write a function to find the last element that satisfies the predicate\n    '''\n    for i in reversed(sequence):\n        if predicate(i):\n            return i\n    return None\n    \ndef check_first_last(sequence, predicate):\n    '''\n    Write a function to check if the first and last elements satisfies the predicate\n    '''\n    if predicate(sequence[0]) and predicate(sequence[-1]):\n        return True\n    return False\n    \ndef count(sequence, predicate):\n    '''\n    Write a function to count how many elements satisfies the predicate\n    '''\n    count = 0\n    for i in sequence:\n        if predicate(i):\n            count += 1\n    return count\n    \ndef max(sequence, predicate):\n    '''\n    Write a function to find the max element that satisfies the predicate\n    '''\n    max = sequence[0]\n    for i in sequence:\n        if predicate(i) and i > max:\n            max = i\n    return max\n    \ndef min(sequence, predicate):\n    '''\n    Write a function to find the min element that satisfies the predicate\n    '''\n    min = sequence[0]\n    for i in sequence:\n        if predicate(i) and i < min:\n            min = i\n    return min\n    \ndef first_last6(nums):\n    '''\n    Write a function to return the first and last element that satisfies\n    the condition of nums being divisible by 6.\n    '''\n    for i in nums:\n        if i % 6 == 0:\n            return i\n    return None\n    \ndef same_first_last(nums):\n    '''\n    Write a function to return whether the first and last element of the \n    list nums is the same or not.\n    '''\n    if nums[0] == nums[-1]:\n        return True\n    return False\n    \ndef common_end(a, b):\n    '''\n    Write a function to return whether the two lists have the same\n    element at the same position or not.\n    '''\n    for i in range(min(len(a), len(b))):\n        if a[i]!= b[i]:\n            return False\n    return True\n    \ndef middle(tup):\n    '''\n    Write a function to return the middle element of the given tuple\n    '''\n    return tup[1]\n    \ndef chop(tup):\n    '''\n    Write a function to remove the first and last elements of a tuple\n    '''\n    return tup[1:-1]\n    \ndef is_sorted(sequence):\n    '''\n    Write a function to check if the given sequence is sorted or not.\n    '''\n    return sequence == sorted(sequence)\n    \ndef is_anagram(str1, str2):\n    '''\n    Write a function to check if the two strings are anagrams or not\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    if len(str1)!= len(str2):\n        return False\n    str1 = list(str1)\n    str2 = list(str2)\n    str1.sort()\n    str2.sort()\n    return str1 == str2\n    \ndef has_duplicates(sequence):\n    '''\n    Write a function to check if the given sequence has duplicate values or not.\n    '''\n    for i in sequence:\n        if sequence.count(i) > 1:\n            return True\n    return False\n    \ndef histogram(sequence):\n    '''\n    Write a function to count the frequency of each item in the given sequence\n    '''\n    hist = {}\n    for i in sequence:\n        if i in hist:\n            hist[i] += 1\n        else:\n            hist[i] = 1\n    return hist\n    \ndef reverse_dict(d):\n    '''\n    Write a function to create a dictionary whose keys are the elements in \n    the given dictionary and whose values are the values in the given \n    dictionary.\n    '''\n    hist = {}\n    for i in d:\n        if d[i] in hist:\n            hist[d[i]].append(i)\n        else:\n            hist[d[i]] = [i]\n    return hist\n    \ndef is_abecedarian(word):\n    '''\n    Write a function to check whether a word is abecedarian or not.\n    '''\n    sorted_word = ''.join(sorted(list(word)))\n    if sorted_word == word:\n        return True\n    return False\n    \ndef is_abecedarian_order(word):\n    '''\n    Write a function to check whether the given word is abecedarian or not\n    using order.\n    '''\n    for i in range(1, len(word)):\n        if word[i-1] > word[i]:\n            return False\n    return True\n    \ndef is_abecedarian_order_no_built_in(word):\n    '''\n    Write a function to check whether the given word is abecedarian or not\n    using order without using built in function.\n    '''\n    p1 = 0\n    p2 = 1\n    while p2 < len(word):\n        if word[p2] < word[p1]:\n            return False\n        p1 += 1\n        p2 += 1\n    return True\n    \ndef is_abecedarian_no_built_in(word):\n    '''\n    Write a function to check whether the given word is abecedarian or not\n    using order without using built in function.\n    '''\n    for i in range(1, len(word)):\n        if word[i-1] > word[i]:\n            return False\n    return True\n    \ndef is_abecedarian_dict(word):\n    '''\n    Write a function to check whether the given word is abecedarian or not\n    using order without using built in function.\n    '''\n    hist = {}\n    for i in range(len(word)):\n        if word[i] in hist:\n            hist[word[i]] += 1\n        else:\n            hist[word[i]] = 1\n    for i in range(1, len(word)):\n        if hist[word[i]] > hist[word[i-1]]:\n            return False\n    return True\n    \ndef is_abecedarian_dict_rev(word):\n    '''\n    Write a function to check whether the given word is abecedarian or not\n    using order without using built in function.\n    '''\n    hist = {}\n    for i in reversed(word):\n        if i in hist:\n            hist[i] += 1\n        else:\n            hist[i] = 1\n    for i in range(1, len(word)):\n        if hist[word[i]] > hist[word[i-1]]:\n            return False\n    return True\n    \ndef is_abecedarian_dict_rev_no_built_in(word):\n    '''\n    Write a function to check whether the given word is abecedarian or not\n    using order without using built in function.\n    '''\n    p1 = 0\n    p2 = 1\n    while p2 < len(word):\n        if word["
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        print(\"Found None in the tuple\")\n    else:\n        print(\"No None values found in the tuple\")\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val == None:\n            return True\n    return False\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    output = []\n    for n in range(startnum, endnum+1):\n        if all(int(d)%n==0 for d in str(n)):\n            output.append(n)\n    return output\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return lambda startnum, endnum: [num for num in range(startnum, endnum+1) if all([num%int(str(digit)[0])==0 for digit in str(num)])]\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits2(num):\n        divisors = [int(x) for x in str(num)]\n        divisible_by = all([num % x == 0 for x in divisors])\n        return divisible_by\n    return [x for x in range(startnum, endnum) if divisible_by_digits2(x)]\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [num for num in range(startnum, endnum) if all([num%digit==0 for digit in str(num)])]\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [num for num in range(startnum, endnum + 1) if all(int(digit) % int(num) == 0 for digit in str(num))]\n    \n    \ndef find_leap_years(start_year, end_year):\n    '''\n    Write a function to find the leap years in a given range from start_year to end_year. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-25.php\n    '''\n    return [year for year in range(start_year, end_year + 1) if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0]\n    \n    \ndef is_anagram(s1, s2):\n    '''\n    Write a function to check whether the two strings are anagrams or not. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-27.php\n    '''\n    return sorted(s1) == sorted(s2)\n    \n    \ndef get_anagrams(string):\n    '''\n    Write a function to return a sorted list of anagrams of a given string. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-28.php\n    '''\n    return sorted([s for s in string if sorted(s) == sorted(string)])\n    \n    \ndef letter_frequency(s):\n    '''\n    Write a function to return the frequency of each letter in a given string. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-29.php\n    '''\n    return {letter:s.count(letter) for letter in s}\n    \n    \ndef palindrome_check(s):\n    '''\n    Write a function to check whether a given string is a palindrome or not. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-30.php\n    '''\n    return s == s[::-1]\n    \n    \ndef char_freq(string):\n    '''\n    Write a function to find the frequency of each character in a given string. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-31.php\n    '''\n    return {char: string.count(char) for char in string}\n    \n    \ndef unique_characters(string):\n    '''\n    Write a function to find the frequency of each unique character in a given string. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-32.php\n    '''\n    return set(string)\n    \n    \ndef char_map(string):\n    '''\n    Write a function to return a list of all characters in a given string whose indices are divisible by 2 or 5. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-33.php\n    '''\n    return [s for s in string if ord(s) % 2 == 0 or ord(s) % 5 == 0]\n    \n    \ndef rotate_string(s, count):\n    '''\n    Write a function to rotate a given string left and right by a given count. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-34.php\n    '''\n    return s[count:] + s[:count]\n    \n    \ndef replace_character(s, old_char, new_char):\n    '''\n    Write a function to replace a character in a given string with a new character. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-35.php\n    '''\n    return s.replace(old_char, new_char)\n    \n    \ndef substrings(string):\n    '''\n    Write a function to find the list of all substrings in a given string. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-36.php\n    '''\n    return [string[i:j] for i in range(len(string)) for j in range(i+1, len(string)+1)]\n    \n    \ndef reverse_vowels(string):\n    '''\n    Write a function to reverse vowels in a given string. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-37.php\n    '''\n    return ''.join(reversed(string))\n    \n    \ndef remove_vowels(string):\n    '''\n    Write a function to remove vowels from a given string. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-38.php\n    '''\n    return ''.join(s for s in string if s not in 'aeiouAEIOU')\n    \n    \ndef find_perfect_squares(start, end):\n    '''\n    Write a function to find all the perfect squares in a given range. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-39.php\n    '''\n    return [num ** 2 for num in range(start, end + 1) if num ** 2 == num]\n    \n    \ndef find_capitalized_words(string):\n    '''\n    Write a function to find the set of all words in a given string that are capitalized in the same order as they appear in the string. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-40.php\n    '''\n    return [word for word in string.split() if word == word.capitalize()]\n    \n    \ndef remove_double_letters(string):\n    '''\n    Write a function to remove all the double letters from a given string. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-41.php\n    '''\n    return ''.join(s for s in string if s.lower() not in 'abcd')\n    \n    \ndef test_divisible_by_digits():\n    assert divisible_by_digits(42, 45) == [42, 43, 44]\n    assert divisible_by_digits(123, 45) == []\n    assert divisible_by_digits(13, 13) == [13]\n    assert divisible_by_digits(123, 12) == [1, 2, 3]\n    assert divisible_by_digits(123, 12) == [1, 2, 3]\n    assert divisible_by_digits(123, 12) == [1, 2, 3]\n    assert divisible_by_digits(12, 3) == [1, 2]\n    \n    \ndef test_find_leap_years():\n    assert find_leap_years(1900, 2100) == [1900, 1908, 1912, 1916, 1920, 1924, 1928, 1932, 1936, 1940, 1944, 1948, 1952, 1956, 1960, 1964, 1968, 1972, 1976, 1980, 1984, 1988, 1992, 1996, 2000, 2004, 2008, 2012, 2016, 2020, 2024, 2028, 2032, 2036, 2040, 2044, 2048, 2052, 2056, 2060, 2064, 2068, 2072, 2076, 2080, 2084, 2088, 2092, 2096, 2100]\n    assert find_leap_years(1900, 1900) == []\n    assert find_leap_years(1900, 2101) == [2100]\n    assert find_leap_years(2101, 2100) == []\n    \n    \ndef test_is_anagram():\n    assert is_anagram('silent', 'listen') == True\n    assert is_anagram('apple', 'apl') == True\n    assert is_anagram('a', 'a') == True\n    assert is_anagram('', '') == True\n    assert is_anagram('', 'a') == False\n    assert is_anagram('dormitory', 'drtoirary') == True\n    assert is_anagram('dog', 'god') == Fals"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [n for n in range(startnum, endnum) if all(d % n for d in str(n))]\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    numlist = []\n    for i in range(startnum, endnum + 1):\n        if i % sum(int(d) for d in str(i)) == 0:\n            numlist.append(i)\n    return numlist\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [num for num in range(startnum, endnum) if all(num%i for i in [int(d) for d in str(num)])]\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    output = []\n    for num in range(startnum, endnum):\n        if num % 10 == 0:\n            output.append(num)\n    return output\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [i for i in range(startnum, endnum) if not (i%10) in [0,2,3,4,5,6,7,8,9]]\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    angle = math.radians(a)\n    if angle > 360:\n        return None\n    else:\n        return math.pi * r * r * (1 - math.cos(angle))\n    \ndef rectangle_area(b,h):\n    '''\n    Write a function that takes the length and breadth of a rectangle as inputs, and returns the area of the rectangle.\n    '''\n    return b * h\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r>0:\n        return 3.1415926535897932*r**2\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*r**2*(1-math.sin(a)/math.sin(math.pi*a/180))\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a = math.radians(a)\n    r = math.radians(r)\n    if a>360:\n        return None\n    else:\n        return a*r*r*math.pi/360\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360 or a<0:\n        return None\n    else:\n        return 3.14*r*r*a/360\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*r**2*(90-a/2)/360\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r*r*(1 - math.cos(math.radians(a)))\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a > 360:\n        return None\n    else:\n        return (r**2)*(math.pi)*(((math.pi*(a/360))*2)-(math.pi*(a/360)))\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        a = math.radians(a)\n        return math.pi * r * r * math.sin(a)\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return math.pi*r**2*(1-math.cos(a))\n    \ndef find_volume(r,a):\n    '''\n    Write a function to find the volume of a sphere with radius r and angle a. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (4/3)*math.pi*r**3*(1-math.cos(a))\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # base case\n    if len(X) == 0 or len(Y) == 0 or len(Z) == 0:\n        return 0\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    #table is of size nxm\n    table = [[[] for i in range(len(X) + 1)] for j in range(len(Y) + 1)]\n    #initilize table\n    for i in range(len(Y) + 1):\n        for j in range(len(X) + 1):\n            if i == 0 or j == 0:\n                table[i][j] = []\n            elif Y[i - 1] == X[j - 1]:\n                table[i][j] = table[i-1][j-1] + [Y[i-1]]\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1], key = len)\n    return table[-1][-1]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    lcs_matrix = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n    \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if i == 0 or j == 0 or k == 0: \n                    lcs_matrix[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    lcs_matrix[i][j][k] = lcs_matrix[i-1][j-1][k-1] + 1\n                else: \n                    lcs_matrix[i][j][k] = max(lcs_matrix[i-1][j][k], lcs_matrix[i][j-1][k], lcs_matrix[i][j][k-1])\n    \n    return lcs_matrix[m][n][o]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    LCS_SIZE = 3\n    Matrix = [[[0 for j in range(LCS_SIZE)] for i in range(len(X) + 1)] for i in range(len(Y) + 1)]\n    result = []\n    for i in range(LCS_SIZE):\n        result.append([0 for j in range(len(X) + 1)])\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            if X[i - 1] == Y[j - 1]:\n                Matrix[j][i][0] = 1 + Matrix[j - 1][i - 1][0]\n                result[0][i] = X[i - 1]\n            else:\n                Matrix[j][i][0] = max(Matrix[j - 1][i][0], Matrix[j][i - 1][0])\n                if Matrix[j][i][0] == Matrix[j - 1][i][0]:\n                    result[0][i] = X[i - 1]\n                else:\n                    result[0][i] = Y[j - 1]\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            for k in range(1, LCS_SIZE):\n                if X[i - 1] == Y[j - 1]:\n                    Matrix[j][i][k] = 1 + Matrix[j - 1][i - 1][k - 1]\n                    result[k][i] = X[i - 1]\n                else:\n                    Matrix[j][i][k] = max(Matrix[j - 1][i][k], Matrix[j][i - 1][k - 1])\n                    if Matrix[j][i][k] == Matrix[j - 1][i][k]:\n                        result[k][i] = X[i - 1]\n                    else:\n                        result[k][i] = Y[j - 1]\n    return result\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # base case\n    if len(X) == 0 or len(Y) == 0 or len(Z) == 0:\n        return 0\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X) \n    m = len(Y) \n    L = [[[None]*(m+1) for i in range(n+1)] for j in range(m+1)] \n    for i in range(n+1): \n        for j in range(m+1): \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n    return L[n][m] \n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    L = [[[0 for i in range(o + 1)] for j in range(n + 1)] for k in range(m + 1)] \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(o + 1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]: \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else: \n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]) \n    return L[m][n][o] \n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    '''\n    ## already implemented\n    '''\n    # Let the length of the strings be m, n and p\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    # To store the result (matrix) \n    L = [[[0 for i in range(p + 1)] for j in range(n + 1)] for k in range(m + 1)] \n    # Following steps build L[m + 1][n + 1][p + 1] in bottom up fashion \n    # Note: L[i][j][k] contains length of LCS of X[0..i-1], Y[0..j-1] and Z[0..k-1] \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(p + 1): \n                if (i == 0 or j == 0 or k == 0): \n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n    # Following code is to print LCS \n    index = L[m][n][p] \n    lcs = [\"\"] * (index + 1) \n    lcs[index] = \"\" \n    # Start from the right-most-bottom-most corner and \n    # one by one store characters in lcs[] \n    i = m \n    j = n \n    k = p \n    while i > 0 and j > 0 and k > 0: \n        if (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n            lcs[index-1] = X[i-1] \n            i -= 1\n            j -= 1\n            k -= 1\n            index -= 1\n        elif L[i-1][j][k] > L[i][j-1][k]: \n            i -= 1\n        elif L[i][j-1][k] > L[i][j][k-1]: \n            j -= 1\n        else: \n            k -= 1\n    # lcs[] contains the common characters of all strings \n    return lcs\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    x_len = len(X)\n    y_len = len(Y)\n    z_len = len(Z)\n    l = [[[0 for i in range(y_len+1)] for j in range(z_len+1)] for k in range(x_len+1)]\n    for i in range(x_len):\n        for j in range(y_len):\n            for k in range(z_len):\n                if X[i] == Y[j] == Z[k]:\n                    l[i+1][j+1][k+1] = l[i][j+1][k] + 1\n                else:\n                    l[i+1][j+1][k+1] = max(l[i+1][j][k], l[i][j+1][k], l[i][j][k+1])\n    return l[x_len][y_len][z_len]\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'[A-Z][^A-Z]*', str1)\n    words = [w.strip() for w in words]\n    return''.join(words)\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if(len(str1) == 0):\n        return\n    elif(str1[0].isupper()):\n        str1 +=''\n    return re.sub('([A-Z][a-z]+)','\\g<1>', str1)\n    # res = str1\n    # for i in range(1, len(str1)):\n    #     if(str1[i] =='' and str1[i-1].isupper()):\n    #         res = res[:i] +'' + res[i:]\n    # return res\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # find all the capital words in the string\n    capital_words = re.findall(r'\\b[A-Z][^A-Z]*\\b', str1)\n    # for each capital word, add space in between\n    for word in capital_words:\n        res = word[0].upper() + word[1:]\n        str1 = str1.replace(word, res)\n    # return result\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    #to make the space pattern\n    pattern='(^[a-zA-Z][a-zA-Z]{0,}[a-zA-Z0-9]$)'\n    #to replace the patterns\n    result=re.sub(pattern,' \\g<0>',str1)\n    return result\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    i=0\n    j=0\n    while i < len(str1):\n        if str1[i] >= 'A' and str1[i] <= 'Z':\n            j=i\n            while j < len(str1) and str1[j]!='':\n                j+=1\n            str1 = str1[:j] +'' + str1[j:]\n            i=j\n        i+=1\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.split()\n    result = []\n    for i in str1:\n        if i[0].isupper():\n            result.append(i[0].upper() + i[1:])\n        else:\n            result.append(i)\n    return''.join(result)\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    list1 = re.findall(r'[A-Z]{1}[a-z]+',str1)\n    print(list1)\n    new_string = ''\n    for word in list1:\n        new_string = new_string + word +''\n    print(new_string)\ncapital_words_spaces(\"Hello, welcome to my world\")\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    res = re.findall(r\"([A-Z][a-z]+)([\\s\\.,;]?)\", str1)\n    return \" \".join([word[0] + \" \" + word[1] for word in res])\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    p=re.compile(r'[A-Z][^A-Z]*')\n    l=p.findall(str1)\n    for i in l:\n        k=re.compile(r'[A-Z][^A-Z]+')\n        n=k.findall(i)\n        l1=list(n)\n        if len(l1)!=0:\n            l1.insert(0,' ')\n            l1.append(' ')\n            #print l1\n            f=''\n            for j in l1:\n                f=f+j\n            print f\n        else:\n            print i\n        \n    \ncapital_words_spaces('GeeksFeeks is a good Geeks')\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    str1 = str1.split()\n    res = \"\"\n    for ele in str1:\n        res = res + ele.title() + \" \"\n    return res\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for nums_str in nums_str:\n        nums.append(int(nums_str))\n    nums = sorted(nums)\n    nums_str = []\n    for num in nums:\n        nums_str.append(str(num))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(x) for x in nums_str]\n    nums.sort()\n    return''.join(str(x) for x in nums)\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_int = []\n    for n in nums_str:\n        nums_int.append(int(n))\n    nums_int.sort()\n    nums_str = []\n    for i in nums_int:\n        nums_str.append(str(i))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key = lambda x: [int(s) for s in x.split()])\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    def mycmp(x, y):\n        if x+y > y+x:\n            return -1\n        elif x+y < y+x:\n            return 1\n        else:\n            return 0\n    return sorted(nums_str, cmp=mycmp)\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # make a copy of the list in sorted order\n    sorted_list = sorted(nums_str)\n    # sort the list of strings in the same order\n    sorted_nums_str = sorted(nums_str, key=int)\n    return sorted_nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = sorted(nums_str, key=lambda nums_str: int(nums_str))\n    return nums\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    lst = [int(s) for s in nums_str]\n    lst.sort()\n    return [str(i) for i in lst]\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key = lambda x: [int(i) for i in x.split()])\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sorted_nums = sorted(nums_str, key=lambda x: int(x))\n    return sorted_nums\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_tup:\n        test_list.append(item)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return list(map(sum, zip(test_list, test_tup)))\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    \n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    #code here\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = (i - 1) // 2\n    right = (i + 1) // 2\n    left_is_smaller = arr[left] < arr[i]\n    right_is_smaller = arr[right] < arr[i]\n    return left_is_smaller and right_is_smaller\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if arr[i] < arr[i/2]:\n        return False\n    return check_min_heap_helper(arr, i/2)\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2*i + 1\n    right = 2*i + 2\n    if left < arrlen and arr[left] < arr[i]:\n        return False\n    if right < arrlen and arr[right] < arr[i]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > len(arr)-1:\n        return True\n    elif arr[i] > arr[i*2] or arr[i] > arr[i*2+1]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i*2) and check_min_heap_helper(arr, i*2+1)\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    elif arr[i] > arr[2*i + 1] or arr[i] > arr[2*i + 2]:\n        return False\n    return check_min_heap_helper(arr, 2*i + 1) and check_min_heap_helper(arr, 2*i + 2)\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    l = len(arr)\n    if l == 0:\n        return True\n    if l == 1:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    pass\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    parent = i // 2\n    if arr[i] < arr[parent]:\n        return False\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    a, b = 0, 1\n    for i in range(1, n):\n        a, b = b, (a + b) % 15746\n    return b\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    #First, we need to calculate the nth jacobsthal number\n    t1 = 1\n    t2 = 1\n    t3 = t1 + t2\n    for i in range(2, n):\n        t1, t2, t3 = t2, t3, t1 + t2\n    return t3\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    s, d, m = 0, 1, 1\n    while d < n:\n        s = s + d\n        d = (m * m) + 1\n        m = s\n    return s\n    \ndef jacobsthal_num_fast(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    s = 0\n    d = 1\n    m = 1\n    while d < n:\n        s = s + d\n        d = (m * m) + 1\n        m = s\n    return s\n    \ndef jacobsthal_num_fast2(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    s, d = 0, 1\n    while d < n:\n        s = s + d\n        d = (s * s) + 1\n    return s\n    \ndef jacobsthal_num_fast3(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    s, d = 0, 1\n    while d < n:\n        s = s + d\n        d = (s * s) + 1\n    return s\n    \ndef jacobsthal_num_fast4(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    s, d = 0, 1\n    while d < n:\n        s = s + d\n        d = (s * s) + 1\n    return s\n    \ndef jacobsthal_num_fast5(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    s, d = 0, 1\n    while d < n:\n        s = s + d\n        d = (s * s) + 1\n    return s\n    \ndef jacobsthal_num_fast6(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    s, d = 0, 1\n    while d < n:\n        s = s + d\n        d = (s * s) + 1\n    return s\n    \ndef jacobsthal_num_fast7(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    s, d = 0, 1\n    while d < n:\n        s = s + d\n        d = (s * s) + 1\n    return s\n    \ndef jacobsthal_num_fast8(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    s, d = 0, 1\n    while d < n:\n        s = s + d\n        d = (s * s) + 1\n    return s\n    \ndef jacobsthal_num_fast9(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    s, d = 0, 1\n    while d < n:\n        s = s + d\n        d = (s * s) + 1\n    return s\n    \ndef jacobsthal_num_fast10(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    s, d = 0, 1\n    while d < n:\n        s = s + d\n        d = (s * s) + 1\n    return s\n    \ndef jacobsthal_num_fast11(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    s, d = 0, 1\n    while d < n:\n        s = s + d\n        d = (s * s) + 1\n    return s\n    \ndef jacobsthal_num_fast12(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    s, d = 0, 1\n    while d < n:\n        s = s + d\n        d = (s * s) + 1\n    return s\n    \ndef jacobsthal_num_fast13(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    s, d = 0, 1\n    while d < n:\n        s = s + d\n        d = (s * s) + 1\n    return s\n    \ndef jacobsthal_num_fast14(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeek"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    def lucas_num(n):\n        # return n if n < 2 else lucas_num(n-2) + lucas_num(n-1)\n        if n < 0:\n            return None\n        elif n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return lucas_num(n-1) + lucas_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else:\n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    i = 1\n    first = 0\n    second = 1\n    third = 1\n    while i <= n:\n        i += 1\n        first, second, third = second, third, (first + second + third) % 1000000007\n    return second\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if not test_list:\n        return\n    if K > len(test_list):\n        return\n    # Sort the list and find the kth minimum element\n    temp = sorted(test_list)\n    return temp[K-1]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    min_dict = {}\n    \n    for i in range(K):\n        min_dict[i] = test_list[i]\n        \n    for i in range(K, len(test_list)):\n        if test_list[i][0] < min_dict[0][0]:\n            min_dict[0] = test_list[i]\n        elif test_list[i][0] < min_dict[1][0]:\n            min_dict[1] = test_list[i]\n        elif test_list[i][0] < min_dict[2][0]:\n            min_dict[2] = test_list[i]\n        elif test_list[i][0] < min_dict[3][0]:\n            min_dict[3] = test_list[i]\n        elif test_list[i][0] < min_dict[4][0]:\n            min_dict[4] = test_list[i]\n        else:\n            if test_list[i][1] < min_dict[5][1]:\n                min_dict[5] = test_list[i]\n            elif test_list[i][1] < min_dict[6][1]:\n                min_dict[6] = test_list[i]\n            elif test_list[i][1] < min_dict[7][1]:\n                min_dict[7] = test_list[i]\n            elif test_list[i][1] < min_dict[8][1]:\n                min_dict[8] = test_list[i]\n            elif test_list[i][1] < min_dict[9][1]:\n                min_dict[9] = test_list[i]\n            elif test_list[i][1] < min_dict[10][1]:\n                min_dict[10] = test_list[i]\n            else:\n                if test_list[i][2] < min_dict[11][2]:\n                    min_dict[11] = test_list[i]\n                elif test_list[i][2] < min_dict[12][2]:\n                    min_dict[12] = test_list[i]\n                elif test_list[i][2] < min_dict[13][2]:\n                    min_dict[13] = test_list[i]\n                elif test_list[i][2] < min_dict[14][2]:\n                    min_dict[14] = test_list[i]\n                else:\n                    if test_list[i][3] < min_dict[15][3]:\n                        min_dict[15] = test_list[i]\n                    elif test_list[i][3] < min_dict[16][3]:\n                        min_dict[16] = test_list[i]\n                    elif test_list[i][3] < min_dict[17][3]:\n                        min_dict[17] = test_list[i]\n                    elif test_list[i][3] < min_dict[18][3]:\n                        min_dict[18] = test_list[i]\n                    else:\n                        if test_list[i][4] < min_dict[19][4]:\n                            min_dict[19] = test_list[i]\n                        elif test_list[i][4] < min_dict[20][4]:\n                            min_dict[20] = test_list[i]\n                        elif test_list[i][4] < min_dict[21][4]:\n                            min_dict[21] = test_list[i]\n                        elif test_list[i][4] < min_dict[22][4]:\n                            min_dict[22] = test_list[i]\n                        else:\n                            if test_list[i][5] < min_dict[23][5]:\n                                min_dict[23] = test_list[i]\n                            elif test_list[i][5] < min_dict[24][5]:\n                                min_dict[24] = test_list[i]\n                            elif test_list[i][5] < min_dict[25][5]:\n                                min_dict[25] = test_list[i]\n                            elif test_list[i][5] < min_dict[26][5]:\n                                min_dict[26] = test_list[i]\n                            else:\n                                if test_list[i][6] < min_dict[27][6]:\n                                    min_dict[27] = test_list[i]\n                                elif test_list[i][6] < min_dict[28][6]:\n                                    min_dict[28] = test_list[i]\n                                elif test_list[i][6] < min_dict[29][6]:\n                                    min_dict[29] = test_list[i]\n                                elif test_list[i][6] < min_dict[30][6]:\n                                    min_dict[30] = test_list[i]\n                                else:\n                                    if test_list[i][7] < min_dict[31][7]:\n                                        min_dict[31] = test_list[i]\n                                    elif test_list[i][7] < min_dict[32][7]:\n                                        min_dict[32] = test_list[i]\n                                    elif test_list[i][7] < min_dict[33][7]:\n                                        min_dict[33] = test_list[i]\n                                    elif test_list[i][7] < min_dict[34][7]:\n                                        min_dict[34] = test_list[i]\n                                    else:\n                                        if test_list[i][8] < min_dict[35][8]:\n                                            min_dict[35] = test_list[i]\n                                        elif test_list[i][8] < min_dict[36][8]:\n                                            min_dict[36] = test_list[i]\n                                        elif test_list[i][8] < min_dict[37][8]:\n                                            min_dict[37] = test_list[i]\n                                        elif test_list[i][8] < min_dict[38][8]:\n                                            min_dict[38] = test_list[i]\n                                        else:\n                                            if test_list[i][9] < min_dict[39][9]:\n                                                min_dict[39] = test_list[i]\n                                            elif test_list[i][9] < min_dict[40][9]:\n                                                min_dict[40] = test_list[i]\n                                            elif test_list[i][9] < min_dict[41][9]:\n                                                min_dict[41] = test_list[i]\n                                            elif test_list[i][9] < min_dict[42][9]:\n                                                min_dict[42] = test_list[i]\n                                            else:\n                                                if test_list[i][10] < min_dict[43][10]:\n                                                    min_dict[43] = test_list[i]\n                                                elif test_list[i][10] < min_dict[44][10]:\n                                                    min_dict[44] = test_list[i]\n                                                elif test_list[i][10] < min_dict[45][10]:\n                                                    min_dict[45] = test_list[i]\n                                                elif test_list[i][10] < min_dict[46][10]:\n                                                    min_dict[46] = test_list[i]\n                                                else:\n                                                    if test_list[i][11] < min_dict[47][11]:\n                                                        min_dict[47] = test_list[i]\n                                                    elif test_list[i][11] < min_dict[48][11]:\n                                                        min_dict[48] = test_list[i]\n                                                    elif test_list[i][11] < min_dict[49][11]:\n                                                        min_dict[49] = test_list[i]\n                                                    elif test_list[i][11] < min_dict[50][11]:\n                                                        min_dict[50"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    for i in range(K):\n        min_list.append(min(test_list))\n        test_list.remove(min(test_list))\n    return min_list\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    print(test_list)\n    new_list = []\n    while len(test_list) > K:\n        new_list.append(min(test_list, key=lambda x: x[1]))\n        test_list.remove(min(test_list, key=lambda x: x[1]))\n    return new_list\n    \n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return sorted(test_list, key=lambda record: record[K])[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K>len(test_list):\n        print 'K is greater than length of list'\n        return None\n    min_k_list = []\n    for k in xrange(K):\n        min_k_list.append(test_list[k])\n    return min_k_list\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K == 1:\n        return test_list\n    if K == len(test_list):\n        return [tuple(t) for t in test_list]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) < K:\n        return 0\n    else:\n        return min(test_list, key=lambda x: x[1])[1]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if test_list == None or len(test_list) == 0:\n        return None\n    else:\n        if K > len(test_list):\n            return None\n        else:\n            if K == 0:\n                return None\n            else:\n                i = 0\n                j = 0\n                while i < len(test_list):\n                    if j < K:\n                        j += 1\n                    else:\n                        break\n                    i += 1\n                if j < K:\n                    return None\n                else:\n                    return test_list[i - K:i]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # if K is less than or equal to length of list\n    if K<=len(test_list):\n        # sort the list\n        test_list.sort()\n        return test_list[0:K]\n    else:\n        return False\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [i for i, j in zip(l1, l2) for x, y in zip(l2, l3) if i == x and y == y]\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    ret = []\n    l1_len = len(l1)\n    l2_len = len(l2)\n    l3_len = len(l3)\n    \n    if l1_len!= l2_len:\n        if l1_len > l2_len:\n            small_list = l2\n            large_list = l1\n            small_len = l2_len\n            large_len = l1_len\n        else:\n            small_list = l1\n            large_list = l2\n            small_len = l1_len\n            large_len = l2_len\n    else:\n        small_list = l1\n        large_list = l2\n        small_len = l1_len\n        large_len = l2_len\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    if l1 == None or l2 == None or l3 == None:\n        return []\n    l1 = l1.split(\" \")\n    l2 = l2.split(\" \")\n    l3 = l3.split(\" \")\n    d = {}\n    for i in range(len(l1)):\n        if l1[i] in d:\n            d[l1[i]].append(i)\n        else:\n            d[l1[i]] = [i]\n    result = []\n    for i in range(len(l2)):\n        if l2[i] in d:\n            if i in d[l2[i]]:\n                result.append(i)\n    for i in range(len(l3)):\n        if l3[i] in d:\n            if i in d[l3[i]]:\n                result.append(i)\n    return result\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            l.append(l1[i])\n    return l\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l = [l1[i] for i in range(len(l1)) if l1[i] in l2 and l1[i] in l3]\n    return l\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    indices1 = l1.index_list()\n    indices2 = l2.index_list()\n    indices3 = l3.index_list()\n    common_indices = [value for value in indices1 if value in indices2 and value in indices3]\n    return common_indices\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    return common_elements\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    ans = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            ans.append(l1[i])\n    return ans\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l4 = []\n    for i in range(0, len(l1)):\n        for j in range(0, len(l2)):\n            for k in range(0, len(l3)):\n                if (i == l2[j] and j == l3[k] and i == l4[k]):\n                    pass\n                else:\n                    l4.append(l1[i])\n    return l4\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    elif len(numbers) == 2:\n        return min(numbers)\n    else:\n        return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Use a two pointer approach to solve this problem\n    # Use a set to store the numbers, so we don't need to duplicate\n    # numbers in the list\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    first, second = float('inf'), float('inf')\n    for num in numbers:\n        if num < first:\n            second, first = first, num\n        elif num < second:\n            second = num\n    return second\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 1:\n        return numbers[0]\n    elif len(numbers) == 2:\n        return min(numbers)\n    else:\n        return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list\n    numbers.sort()\n    # Get the first element\n    smallest = numbers[0]\n    # Find the second smallest element in the list\n    for num in numbers:\n        if num!= smallest and num!= smallest:\n            return num\n        # Else, check if the smallest number is not in the list\n        elif num == smallest:\n            return None\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    try:\n        if not isinstance(numbers, list):\n            raise TypeError('Input is not a list')\n    except TypeError:\n        print('Input is not a list')\n    try:\n        if not all(isinstance(x, int) for x in numbers):\n            raise TypeError('List contains non-integer')\n    except TypeError:\n        print('List contains non-integer')\n    numbers = sorted(numbers)\n    try:\n        if len(numbers) > 1:\n            return numbers[-2]\n        else:\n            raise IndexError('List contains less than 2 elements')\n    except IndexError:\n        print('List contains less than 2 elements')\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'[ab]+', text)\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = re.sub(r'[^a]+','',text)\n    return bool(text)\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.match(r'^a\\s*b+$', text):\n        return 'Found a match'\n    else:\n        return 'Not a match'\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search(r'a*b', text)\n    return m is not None\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.search('(?i)^a(.*?)b',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    print(re.search(r'ab*', text))\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a+b')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r\"ab+\", text)\n    if match:\n        print(\"Found match at position\", match.start())\n        print(match.group())\n    else:\n        print(\"No match\")\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print(match.group())\n    else:\n        print(\"No match\")\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    # s = re.search(r'a(.*?)b', text)\n    # print(s.group(1))\n    \n    s = re.search(r'a(.+?)b', text)\n    if s is not None:\n        print(s.group(1))\n    else:\n        print('No match')\n    \n    return\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Sorting the string list first\n    test_list.sort()\n    total_pairs = 0\n    # looping over each string\n    for index in range(len(test_list)):\n        # second half of the string is the reverse of first half\n        # so they're equal at this stage\n        if test_list[index] == test_list[len(test_list) - 1 - index]:\n            total_pairs += 1\n    return total_pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    counter = 0\n    for i in range(0, len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_pairs = 0\n    for index, each in enumerate(test_list):\n        compare_with = test_list[index-1]\n        if each[::-1] == compare_with[::-1]:\n            reverse_pairs = reverse_pairs + 1\n    return reverse_pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in xrange(len(test_list)):\n        for j in xrange(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    cnt = 0\n    for item in test_list:\n        for item2 in test_list:\n            if item == item2[::-1]:\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    return sum([test_list.count(a+b) for a in test_list for b in test_list])\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pass\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for list in list1:\n        if tuple(list) in count:\n            count[tuple(list)] += 1\n        else:\n            count[tuple(list)] = 1\n    return count\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    mydict = {}\n    list1 = [list1]\n    for i in list1:\n        for j in i:\n            mydict[tuple(j)] = list1.count(i)\n    return mydict\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Your Code Here\n    return {\n    l: list1.count(l)\n    for l in list(set(map(tuple, list1)))\n    }\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # get distinct values from the list\n    list2 = list(set(list1))\n    # convert the list to a set so that we can use it as a key in a dictionary\n    dict1 = {e:list1.count(e) for e in list2}\n    # return the dictionary\n    return dict1\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for i in list1:\n        if isinstance(i, list):\n            t = tuple(i)\n            if t not in d:\n                d[t] = 1\n            else:\n                d[t] += 1\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = []\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            sublists.append(list1[i:j+1])\n    sublist_count = {}\n    for sublist in sublists:\n        sublist_count[tuple(sublist)] = sublists.count(sublist)\n    return sublist_count\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    final_list = []\n    if len(list1) == 1:\n        return {tuple(list1): 1}\n    for i in range(len(list1)):\n        if list1[i] not in final_list:\n            final_list.append(list1[i])\n            list1[i] = tuple(list1[i])\n    return {tuple(list1): len(final_list)}\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    if not list1:\n        return {}\n    dict_of_lists = {}\n    for item in list1:\n        if item not in dict_of_lists.keys():\n            dict_of_lists[item] = [list1.count(item)]\n        else:\n            dict_of_lists[item].append(list1.count(item))\n    return dict_of_lists\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dictionary = {}\n    for sublist in list1:\n        tup = tuple(sublist)\n        if tup in dictionary:\n            dictionary[tup] += 1\n        else:\n            dictionary[tup] = 1\n    return dictionary\n    "
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict1 = {}\n    for i in list1:\n        i = tuple(i)\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    return dict1\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n    \n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.startswith('-'):\n        num = num[1:]\n        negative = True\n    else:\n        negative = False\n    if num.endswith('.'):\n        num = num[:-1]\n        decimal = True\n    else:\n        decimal = False\n    if 'e' in num:\n        num, exp = num.split('e')\n    else:\n        exp = 0\n    num_dec = [str(int(x) * (2 ** (len(num) - (idx + 1)))) for idx, x in enumerate(num) if x!= '.']\n    num_dec.reverse()\n    num_dec = ''.join(num_dec)\n    if negative:\n        num_dec = '-' + num_dec\n    if decimal:\n        num_dec += '.'\n    return ''.join((num_dec, exp, '0'))\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if not isinstance(num,str):\n        return False\n    if len(num) == 0:\n        return False\n    if num[0] == '-' and len(num) > 1:\n        return False\n    if num[0] == '+':\n        num = num[1:]\n    if '.' not in num:\n        return False\n    if num[-1] == '.':\n        return False\n    if not num[0].isdigit() or not num[-1].isdigit():\n        return False\n    if num[0].isdigit() and num[-1].isdigit() and num[0].isdigit() and num[-1].isdigit():\n        return True\n    return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.count('.')!= 1:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return type(num) == float or type(num) == int and float(num)%1 == 0\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    return re.match(\"^[-+]?\\d*\\.\\d+$\", num)\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    decimal = True\n    if num[0] == '-' and num[1:].isdigit():\n        num = num[1:]\n        decimal = False\n    for c in num:\n        if not c.isdigit():\n            decimal = False\n            break\n    return decimal\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    def check(num):\n        if not num:\n            return False\n        if num[0] == '0':\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if type(num)!= type('1'):\n        return False\n    \n    if num == '':\n        return False\n    if len(num) > 2:\n        return False\n    if num[0] == '+' or num[0] == '-':\n        num = num[1:]\n    if num[-1] == '.':\n        num = num[:-1]\n    if num[0] == '0' and num[1]!= '.':\n        return False\n    \n    for i in range(1,len(num)):\n        if num[i] == '.' and (num[i-1] == '0' or num[i-1] == '.'):\n            return False\n        if num[i] == '.' and num[i-1]!= '0' and num[i-1]!= '.':\n            return False\n    \n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    counter = {}\n    for i in arr:\n        if i in counter:\n            return False\n        else:\n            counter[i] = 1\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    return False\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)==1:\n        return True\n    elif len(arr)==0:\n        return False\n    else:\n        i = 0\n        while i<len(arr):\n            k = i+1\n            while k<len(arr):\n                if arr[i]==arr[k]:\n                    return False\n                k+=1\n            i+=1\n        return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    arr_set = set(arr)\n    return len(arr) == len(arr_set)\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = len(arr) == len(set(arr))\n    return unique\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    for i in range(0, len(arr)):\n        if arr.count(arr[i]) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    dict = {}\n    for i in arr:\n        if i in dict:\n            return False\n        else:\n            dict[i] = 1\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr = sorted(arr)\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        print(\"It has 30 days\")\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print(\"It has 31 days\")\n    else:\n        print(\"It is a leap year\")\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 12:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    try:\n        monthnum3 = int(monthnum3)\n        if monthnum3 >= 1 and monthnum3 <= 12:\n            return True\n        else:\n            return False\n    except:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 2 or monthnum3 == 3 or monthnum3 == 4 or monthnum3 == 5 or monthnum3 == 6 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11:\n        if check_day_number(30) == True:\n            print(\"The month has 30 days\")\n        else:\n            print(\"The month does not have 30 days\")\n    else:\n        if check_day_number(31) == True:\n            print(\"The month has 31 days\")\n        else:\n            print(\"The month does not have 31 days\")\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3==1 or monthnum3==3 or monthnum3==5 or monthnum3==7 or monthnum3==8 or monthnum3==10 or monthnum3==12:\n        return 30\n    else:\n        return 31\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months_30 = [1,3,5,7,8,10,12]\n    if monthnum3 in months_30:\n        return True\n    else:\n        return False\n    \ndef check_daynumber_number(daynum3):\n    '''\n    Write a function to check whether the given day number contains 31 days or not. Days are given as number from 1 to 31.\n    '''\n    days_31 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]\n    if daynum3 in days_31:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    #day = 30\n    if (monthnum3 == 4) or (monthnum3 == 6) or (monthnum3 == 9) or (monthnum3 == 11):\n        print(\"%d is leap year\" %year)\n    elif (monthnum3 == 1) or (monthnum3 == 3) or (monthnum3 == 5) or (monthnum3 == 7) or (monthnum3 == 8) or (monthnum3 == 10) or (monthnum3 == 12):\n        print(\"%d is not a leap year\" %year)\n    else:\n        print(\"Enter a valid month number\")\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if(monthnum3 == 2):\n        return(True)\n    elif(monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11):\n        return(True)\n    else:\n        return(False)\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2 and (year%4==0 and year%100!=0 or year%400==0):\n        return 29\n    elif monthnum3 == 2:\n        return 28\n    else:\n        return 30\n    \n    \n    \n    \n    \n    \ndef find_leap_years():\n    '''\n    Write a function to calculate the leap years between the given start year and the end year.\n    '''\n    num = year2\n    while num >= year1:\n        if year%4==0 and (year%100!=0 or year%400==0):\n            print year\n        year = year -1\n        \n        \n        \n        \n        \ndef find_triangular_number():\n    '''\n    Write a function to calculate the triangular number.\n    '''\n    num = 0\n    for x in range(1,N+1):\n        num = num + x\n    return num\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if int(monthnum3) > 12 or int(monthnum3) < 1:\n        print \"Please enter valid month number\"\n    elif int(monthnum3) == 2 and int(year)%4 == 0:\n        if int(day) > 29:\n            print \"It is a leap year, February has 29 days\"\n        else:\n            print \"February has 28 days\"\n    elif int(day) > 30:\n        print \"Invalid date\"\n    elif int(day) < 1:\n        print \"Invalid date\"\n    else:\n        print \"This is a valid date\"\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    print arr\n    min_diff = arr[n-1] - arr[0]\n    for i in range(0,n-1):\n        min_diff = min(min_diff,arr[i+1] - arr[i])\n    print min_diff\n    \ndef find_min_diff2(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    print arr\n    min_diff = float('inf')\n    for i in range(0,n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    print min_diff\n    \ndef find_min_diff3(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    print arr\n    min_diff = float('inf')\n    diff = arr[n-1] - arr[0]\n    if diff < min_diff:\n        min_diff = diff\n    for i in range(0,n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    print min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() \n    min_diff = float('inf')\n    for i in range(n-1): \n        min_diff = min(min_diff, arr[i+1]-arr[i])\n    return min_diff \n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n == 1:\n        return arr[0]\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(0, n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    i=0\n    j=n-1\n    if n==0:\n        return \n    if n==1:\n        return arr[0]\n    if n==2:\n        return abs(arr[0]-arr[1])\n    arr.sort()\n    min_diff=arr[n-1]-arr[0]\n    while i<j:\n        min_diff=min(min_diff,abs(arr[i]-arr[j]))\n        if abs(arr[i]-arr[j])<=min_diff:\n            break\n        if arr[i]>arr[j]:\n            j-=1\n        else:\n            i+=1\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if arr is None or n==0:\n        return 0\n    if n == 1:\n        return arr[0]\n    arr.sort()\n    min_diff = arr[1]-arr[0]\n    for i in range(n-1):\n        curr_diff = arr[i+1]-arr[i]\n        if curr_diff < min_diff:\n            min_diff = curr_diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n<2:\n        return None\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n == 1:\n        return abs(arr[0] - arr[1])\n    # Find the minimum difference between any two elements in array\n    if n == 2:\n        return min(abs(arr[0] - arr[1]), abs(arr[1] - arr[0]))\n    # Let's find the minimum difference between\n    # first and second elements in the array\n    min_diff = abs(arr[0] - arr[1])\n    # Now find the minimum difference between two elements\n    # at index and their pair.\n    for i in range(0, n - 1):\n        min_diff = min(min_diff,\n        abs(arr[i] - arr[i + 1]))\n    # Now find the minimum difference between\n    # the last and second-last elements\n    min_diff = min(min_diff, abs(arr[n - 1] - arr[n - 2]))\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    #sort the array\n    arr.sort()\n    #take the first two elements\n    first = arr[0]\n    second = arr[1]\n    #find the difference\n    diff = second - first\n    #since the array is sorted\n    #it is possible that the difference between any two elements is same\n    #so we are searching for the largest value\n    #to make the iteration easier\n    max_val = arr[-1]\n    #loop from the last index to the first index\n    #since the array is sorted\n    #we can use the fact that max_val is greater than second\n    #and second is greater than first\n    #we can make the loop to iterate to max_val\n    #as if second is greater than max_val\n    #then second can become max_val\n    for i in range(n-2,-1,-1):\n        if arr[i] > max_val:\n            second = max_val\n            break\n        diff = min(diff,arr[i]-second)\n        max_val = max(max_val,arr[i])\n    return diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # arr1 is the sorted array\n    arr1 = sorted(arr)\n    # arr2 is the unsorted array\n    arr2 = list(arr)\n    # set to store the min differences\n    min_diff = 99999999999\n    # arr1 = arr1[1:]\n    # arr2 = arr2[:-1]\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    if len(str)==0:\n        return 0\n    elif len(str)>0 and str[0] in '0123456789':\n        return 1 + number_ctr(str[1:])\n    else:\n        return 0\n    \ndef count_digits(str1, str2):\n    '''\n    Write a python function to count number of digits in two given strings.\n    '''\n    if len(str1)==0 or len(str2)==0:\n        return 0\n    elif str1[0] in '0123456789' and str2[0] in '0123456789':\n        return 1 + count_digits(str1[1:], str2[1:])\n    else:\n        return 0\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    str = str.strip()\n    n = 0\n    for c in str:\n        if c.isdigit():\n            n += 1\n    return n\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in range(0,len(str)):\n        if str[i] in ['0','1','2','3','4','5','6','7','8','9']:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # return len(str)\n    return sum(1 for i in str if i.isdigit())\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # if len(str) == 0:\n    #     return 0\n    # elif len(str) == 1:\n    #     if str[0].isdigit():\n    #         return 1\n    #     else:\n    #         return 0\n    # else:\n    #     if str[0].isdigit():\n    #         return 1 + number_ctr(str[1:])\n    #     else:\n    #         return 0 + number_ctr(str[1:])\n    #         \n    #     return number_ctr(str[1:])\n    \n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n        else:\n            pass\n    return ctr\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return n + is_polite(n - 1) + is_polite(n - 2) + is_polite(n - 3)\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #polite_numbers = [0, 1]\n    polite_numbers = [0, 1]\n    index = 1\n    prime_list = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    polite_count = 0\n    while len(polite_numbers) < n:\n        # print(polite_numbers)\n        # print(index)\n        if index > len(prime_list):\n            for i in range(len(polite_numbers)):\n                if polite_numbers[i] < index:\n                    polite_numbers.append(index)\n                    break\n        else:\n            for num in prime_list:\n                if num > index:\n                    break\n                if index % num == 0:\n                    if num not in polite_numbers:\n                        polite_numbers.append(num)\n                        polite_numbers.append(index // num)\n        index += 1\n    return polite_numbers[n - 1]\ndef is_polite2(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #polite_numbers = [0, 1]\n    polite_numbers = [0, 1]\n    index = 1\n    prime_list = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    polite_count = 0\n    while len(polite_numbers) < n:\n        # print(polite_numbers)\n        # print(index)\n        if index > len(prime_list):\n            for i in range(len(polite_numbers)):\n                if polite_numbers[i] < index:\n                    polite_numbers.append(index)\n                    break\n        else:\n            for num in prime_list:\n                if num > index:\n                    break\n                if index % num == 0:\n                    if num not in polite_numbers:\n                        polite_numbers.append(num)\n                        polite_numbers.append(index // num)\n        index += 1\n    return polite_numbers[n - 1]\ndef is_polite3(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #polite_numbers = [0, 1]\n    polite_numbers = [0, 1]\n    index = 1\n    prime_list = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    polite_count = 0\n    while len(polite_numbers) < n:\n        # print(polite_numbers)\n        # print(index)\n        if index > len(prime_list):\n            for i in range(len(polite_numbers)):\n                if polite_numbers[i] < index:\n                    polite_numbers.append(index)\n                    break\n        else:\n            for num in prime_list:\n                if num > index:\n                    break\n                if index % num == 0:\n                    if num not in polite_numbers:\n                        polite_numbers.append(num)\n                        polite_numbers.append(index // num)\n        index += 1\n    return polite_numbers[n - 1"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    if n==0:\n        return 1\n    if n==1:\n        return 2\n    if n==2:\n        return 3\n    if n==3:\n        return 4\n    if n==4:\n        return 5\n    if n==5:\n        return 6\n    if n==6:\n        return 7\n    if n==7:\n        return 8\n    if n==8:\n        return 9\n    if n==9:\n        return 10\n    if n==10:\n        return 11\n    if n==11:\n        return 12\n    if n==12:\n        return 13\n    if n==13:\n        return 14\n    if n==14:\n        return 15\n    if n==15:\n        return 16\n    if n==16:\n        return 17\n    if n==17:\n        return 18\n    if n==18:\n        return 19\n    if n==19:\n        return 20\n    if n==20:\n        return 21\n    if n==21:\n        return 22\n    if n==22:\n        return 23\n    if n==23:\n        return 24\n    if n==24:\n        return 25\n    if n==25:\n        return 26\n    if n==26:\n        return 27\n    if n==27:\n        return 28\n    if n==28:\n        return 29\n    if n==29:\n        return 30\n    if n==30:\n        return 31\n    if n==31:\n        return 32\n    if n==32:\n        return 33\n    if n==33:\n        return 34\n    if n==34:\n        return 35\n    if n==35:\n        return 36\n    if n==36:\n        return 37\n    if n==37:\n        return 38\n    if n==38:\n        return 39\n    if n==39:\n        return 40\n    if n==40:\n        return 41\n    if n==41:\n        return 42\n    if n==42:\n        return 43\n    if n==43:\n        return 44\n    if n==44:\n        return 45\n    if n==45:\n        return 46\n    if n==46:\n        return 47\n    if n==47:\n        return 48\n    if n==48:\n        return 49\n    if n==49:\n        return 50\n    if n==50:\n        return 51\n    if n==51:\n        return 52\n    if n==52:\n        return 53\n    if n==53:\n        return 54\n    if n==54:\n        return 55\n    if n==55:\n        return 56\n    if n==56:\n        return 57\n    if n==57:\n        return 58\n    if n==58:\n        return 59\n    if n==59:\n        return 60\n    if n==60:\n        return 61\n    if n==61:\n        return 62\n    if n==62:\n        return 63\n    if n==63:\n        return 64\n    if n==64:\n        return 65\n    if n==65:\n        return 66\n    if n==66:\n        return 67\n    if n==67:\n        return 68\n    if n==68:\n        return 69\n    if n==69:\n        return 70\n    if n==70:\n        return 71\n    if n==71:\n        return 72\n    if n==72:\n        return 73\n    if n==73:\n        return 74\n    if n==74:\n        return 75\n    if n==75:\n        return 76\n    if n==76:\n        return 77\n    if n==77:\n        return 78\n    if n==78:\n        return 79\n    if n==79:\n        return 80\n    if n==80:\n        return 81\n    if n==81:\n        return 82\n    if n==82:\n        return 83\n    if n==83:\n        return 84\n    if n==84:\n        return 85\n    if n==85:\n        return 86\n    if n==86:\n        return 87\n    if n==87:\n        return 88\n    if n==88:\n        return 89\n    if n==89:\n        return 90\n    if n==90:\n        return 91\n    if n==91:\n        return 92\n    if n==92:\n        return 93\n    if n==93:\n        return 94\n    if n==94:\n        return 95\n    if n==95:\n        return 96\n    if n==96:\n        return 97\n    if n==97:\n        return 98\n    if n==98:\n        return 99\n    if n==99:\n        return 100\n    if n==100:\n        return 101\n    if n==101:\n        return 102\n    if n==102:\n        return 103\n    if n==103:\n        return 104\n    if n==104:\n        return 105\n    if n==105:\n        return 106\n    if n==106:\n        return 107\n    if n==107:\n        return 108\n    if n==108:\n        return 109\n    if n==109:\n        return 110\n    if n==110:\n        return 111\n    if n==111:\n        return 112\n    if n==112:\n        return 113\n    if n==113:\n        return 114\n    if n==114:\n        return 115\n    if n==115:\n        return 116\n    if n==116:\n        return 117\n    if n==117:\n        return 118\n    if n==118:\n        return 119\n    if n==119:\n        return 120\n    if n==120:\n        return 121\n    if n==121:\n        return 122\n    if n==122:\n        return 123\n    if n==123:\n        return 124\n    if n==124:\n        return 125\n    if n==125:\n        return 126\n    if n==126:\n        return 127\n    if n==127:\n        return 128\n    if n==128:\n        return 129\n    if n==129:\n        return 130\n    if n==130:\n        return 131\n    if n==131:\n        return 132\n    if n==132:\n        return 133\n    if n==133:\n        return 134\n    if n==134:\n        return 135\n    if n==135:\n        return 136\n    if n==136:\n        return 137\n    if n==137:\n        return 138\n    if n==138:\n        return 139\n    if n==139:\n        return 140\n    if n==140:\n        return 141\n    if n==141:\n        return 142\n    if n==142:\n        return 143\n    if n==143:\n        return 144\n    if n==144:\n        return 145\n    if n==145:\n        return 146\n    if n==146:\n        return 147\n    if n==147:\n        return 148\n    if n==148:\n        return 149\n    if n==149:\n        return 150\n    if n==150:\n        return 151\n    if n==151:\n        return 152\n    if n==152:\n        return 153\n    if n==153:\n        return 154\n    if n==154:\n        return 155\n    if n==155:\n        return 156\n    if n==156:\n        return 157\n    if n==157:\n        return 158\n    if n==158:\n        return 159\n    if n==159:\n        return 160\n    if n==160:\n        return 161\n    if n==161:\n        return 162\n    if n==162:\n        return 163\n    if n==163:\n        return 164\n    if n==164:\n        return 165\n    if n==165:\n        return 166\n    if n==166:\n        return 167\n    if n==167:\n        return 168\n    if n==168:\n        return 169\n    if n==169:\n        return 170\n    if n==170:\n        return 171\n    if n==171:\n        return 172\n    if n==172:\n        return 173\n    if n==173:\n        return 174\n    if n==174:\n        return 175\n    if n==175:\n        return 176\n    if n==176:\n        return 177\n    if n==177:\n        return 178\n    if n==178:\n        return 179\n    if n==179:\n        return 180\n    if n==180:\n        return 181\n    if n==18"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 0: \n        return -1\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize prime list\n    list_of_primes = []\n    n = 2\n    while len(list_of_primes) < n:\n        if is_prime(n):\n            list_of_primes.append(n)\n        n = n + 1\n    return list_of_primes[n - 1]\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return is_polite(n - 1) + is_polite(n - 2) + is_polite(n - 3)\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    nthPoliteNum = 1\n    prime_num = []\n    polite_num = []\n    for i in range(2, int(math.sqrt(n))+1): \n        while n % i == 0: \n            n = n // i \n            prime_num.append(i)\n    if n > 1: \n        prime_num.append(n)\n    for j in prime_num:\n        while nthPoliteNum % j!= 0:\n            nthPoliteNum = nthPoliteNum + 1\n        if nthPoliteNum % j == 0:\n            polite_num.append(nthPoliteNum)\n            nthPoliteNum = 1\n    if nthPoliteNum!= 1:\n        polite_num.append(nthPoliteNum)\n    print(polite_num)\n    return polite_num[len(polite_num)-1]\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return 1+math.sqrt(2*n)%1==0\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #base case\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    #factorial\n    f=1\n    while n>1:\n        f=f*n\n        n=n-1\n    #polite number\n    s=0\n    while f>0:\n        s=s+(f%10)**10\n        f=f/10\n    return s\ndef gcd(a,b):\n    '''\n    Write a function to find greatest common divisor of two numbers.\n    '''\n    while a!=b:\n        if a>b:\n            a=a-b\n        else:\n            b=b-a\n    return a\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==0: \n        return 1\n    if n==1: \n        return 2\n    if n==2: \n        return 3\n    return is_polite(n-1) + 2*is_polite(n-2)\ndef prime_sieve(n): \n    '''\n    Write a function to find prime number upto nth (inclusive)\n    '''\n    if n<=1: \n        return []\n    \n    sieve=[True]*n\n    sieve[0]=sieve[1]=False\n    for i in range(2,int(math.sqrt(n))+1): \n        if sieve[i]:\n            for j in range(i*i,n,i):\n                sieve[j]=False\n    return [i for i in range(n) if sieve[i]]\ndef find_fibonacci_numbers(n): \n    '''\n    Write a function to find nth fibonacci number\n    '''\n    if n==0: \n        return 0\n    if n==1: \n        return 1\n    return find_fibonacci_numbers(n-1) + find_fibonacci_numbers(n-2)\ndef pythagorean_triple(m,n):\n    '''\n    Write a function to find mth pythagorean triple.  pythagorean_triple.geeksforgeeks.org/nth-pythagorean-triple/\n    '''\n    if m==0: \n        return 0\n    if m==1: \n        return 1\n    if n==1: \n        return 1\n    if n==0: \n        return 0\n    return pythagorean_triple(m-1,n) + pythagorean_triple(m-1,n-1)\ndef fibonacci(n): \n    '''\n    Write a function to find nth fibonacci number.  fibonacci.geeksforgeeks.org/nth-fibonacci-number/\n    '''\n    if n==0: \n        return 0\n    if n==1: \n        return 1\n    return fibonacci(n-1) + fibonacci(n-2)\ndef pythagorean_triple_iter(m): \n    '''\n    Write a function to find mth pythagorean triple.  pythagorean_triple.geeksforgeeks.org/nth-pythagorean-triple/\n    '''\n    if m==0: \n        return 0\n    if m==1: \n        return 1\n    s1=s2=s3=1\n    i=2\n    while True: \n        s1,s2,s3 = s2,s3,s1+s2+s3\n        if s3==m: \n            return s1\n        i+=1\ndef pythagorean_triple_rec(m): \n    '''\n    Write a function to find mth pythagorean triple.  pythagorean_triple.geeksforgeeks.org/nth-pythagorean-triple/\n    '''\n    if m==0: \n        return 0\n    if m==1: \n        return 1\n    return pythagorean_triple_rec(m-1) + pythagorean_triple_rec(m-2)\ndef sum_of_square_of_digits(n): \n    '''\n    Write a function to find sum of square of digits of a number\n    '''\n    if n==0: \n        return 0\n    return n%10*sum_of_square_of_digits(n/10) + sum_of_square_of_digits(n/10)\ndef sum_of_digits(n): \n    '''\n    Write a function to find sum of digits of a number\n    '''\n    if n==0: \n        return 0\n    return n%10 + sum_of_digits(n/10)\ndef is_leap(year): \n    '''\n    Write a function to find whether a year is a leap year.  leap_year.geeksforgeeks.org/leap-year/\n    '''\n    if year%4==0: \n        if year%100==0: \n            if year%400==0: \n                return True\n            else: \n                return False\n        else: \n            return True\n    else: \n        return False\ndef find_sum_of_factors(n): \n    '''\n    Write a function to find sum of factors of n.  factors.geeksforgeeks.org/sum-of-factors-of-n/\n    '''\n    i=1\n    s=0\n    while i*i<=n: \n        if n%i==0: \n            if i*i!=n: \n                s+=i\n                s+=n/i\n            else: \n                s+=i\n        i+=1\n    if i*i>n: \n        s+=n\n    return s\ndef find_sum_of_factors_rec(n): \n    '''\n    Write a function to find sum of factors of n.  factors.geeksforgeeks.org/sum-of-factors-of-n/\n    '''\n    if n==0: \n        return 0\n    if n==1: \n        return 1\n    return find_sum_of_factors_rec(n-1) + n*find_sum_of_factors_rec(n-2)\ndef prime_factors(n): \n    '''\n    Write a function to find prime factors of n.  prime_factors.geeksforgeeks.org/prime-factors-of-n/\n    '''\n    if n==0: \n        return []\n    if n==1: \n        return []\n    if n==2: \n        return [2]\n    i=2\n    prime_factors=[]\n    while i*i<=n: \n        if n%i==0: \n            if i*i!=n: \n                prime_factors.append(i)\n                prime_factors.append(n/i)\n            else: \n                prime_factors.append(i)\n        i+=1\n    if i*i>n: \n        prime_factors.append(n)\n    return prime_factors\ndef prime_factors_rec(n): \n    '''\n    Write a function to find prime factors of n.  prime_factors.geeksforgeeks.org/prime-factors-of-n/\n    '''\n    if n==0: \n        return []\n    if n==1: \n        return []\n    if n==2: \n        return [2]\n    i=2\n    prime_factors=[]\n    while i*i<=n: \n        if n%i==0: \n            if i*i!=n: \n                prime_factors.append(i)\n                prime_factors.append(n/i)\n            else: \n                prime_factors.append(i)\n        i+=1\n    if i*i>n: \n        prime_factors.append(n)\n    return prime_factors\ndef count_prime_factors(n): \n    '''\n    Write a function to find count of prime factors of n.  count_prime_factors.geeksforgeeks.org/count-of-prime-factors-of-n/\n    '''\n    if n==0: \n        return 0\n    if n==1: \n        return 0\n    if n==2: \n        return 1\n    if n==3: \n        return 2\n    i=2\n    count=0\n    while i*i<=n: \n        if n%i==0: \n            if i*i!=n: \n                count+=2\n            else: \n                count+=1\n        i+=1\n    if i*i>n: \n        count+=1\n    return count\ndef count_prime_factors_rec(n): \n    '''\n    Write a function to find count of prime factors of n.  count_prime_factors.geeksforgeeks.or"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    for i in range(0,len(l1)-1):\n        yield (l1[i],l1[i+1])\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) == 1:\n        return [[l1[0], l1[0]+1]]\n    else:\n        return [[l1[0], l1[1]]] + pair_wise(l1[1:])\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1)<2:\n        return None\n    return [ (l1[i], l1[i+1]) for i in range(0,len(l1)-1) ]\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) == 0:\n        return []\n    elif len(l1) == 1:\n        return [(l1[0], l1[0])]\n    else:\n        return [(l1[0], l1[1]), (l1[1], l1[2]), (l1[2], l1[3]), (l1[3], l1[4])]\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    out = []\n    for i in range(len(l1)-1):\n        out.append([l1[i], l1[i+1]])\n    return out\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i],l1[i+1]) for i in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    ans = []\n    for i in xrange(len(l1)):\n        if i == len(l1) - 1:\n            break\n        ans.append([l1[i], l1[i+1]])\n    return ans\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    s = []\n    i = 0\n    while i < len(l1):\n        j = i + 1\n        while j < len(l1):\n            s.append((l1[i], l1[j]))\n            j += 1\n        i += 1\n    return s\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    return [(l1[i], l1[i+1]) for i in range(0, len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    s = []\n    for i in range(len(l1)-1):\n        s.append(l1[i]+l1[i+1])\n    return s\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in arr:\n        if sum - i in arr:\n            pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    n = len(arr)\n    pairCount = 0\n    # TODO: Complete the above recursive function\n    return pairCount\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    #sort the list of numbers\n    arr.sort()\n    pairs = 0\n    i = 0\n    j = 1\n    n = len(arr)\n    while i < n-1:\n        j = i + 1\n        while j < n:\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n            j += 1\n        i += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    counter = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                counter += 1\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    if(len(li1)==len(li2)):\n        li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n        return li_dif\n    else:\n        print(\"Lists do not have the same length.\")\n        return None\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1)-set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1) - set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return(list(set(li1)-set(li2)))\n    \ndef Intersect(li1,li2):\n    '''\n    Write a python function to get the intersection between two lists.\n    '''\n    return(list(set(li1) & set(li2)))\n    \ndef Union(li1,li2):\n    '''\n    Write a python function to get the union between two lists.\n    '''\n    return(list(set(li1) | set(li2)))\n    \ndef MinLen(li):\n    '''\n    Write a python function to get the minimum length of a list.\n    '''\n    return(min(li))\n    \ndef MaxLen(li):\n    '''\n    Write a python function to get the maximum length of a list.\n    '''\n    return(max(li))\n    \ndef Mean(li):\n    '''\n    Write a python function to get the mean of a list.\n    '''\n    return(sum(li)/len(li))\n    \ndef Median(li):\n    '''\n    Write a python function to get the median of a list.\n    '''\n    if len(li)%2 == 0:\n        return((li[(len(li)/2) - 1] + li[len(li)/2])/2)\n    else:\n        return(li[(len(li)/2)])\n    \ndef Mode(li):\n    '''\n    Write a python function to get the mode of a list.\n    '''\n    li = list(li)\n    temp = {}\n    for i in li:\n        temp[i] = li.count(i)\n    #find the key with the max value\n    return(max(temp,key=temp.get))\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\ndef main():\n    li1 = [1,2,3,4,5,6,7,8,9]\n    li2 = [5,6,7,8,9,10]\n    print(Diff(li1,li2))\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n < 0 : \n        return None\n    if n == 0 : \n        return 0\n    return n + odd_num_sum(n-1)\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 0 : \n        return 0 \n    if n == 1 :\n        return 1 \n    elif n == 2 : \n        return 5 \n    elif n == 3 :\n        return 22 \n    else : \n        return n * (n + 1) * (n + 2) * (n + 3)\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Step 1 : Make a generator to generate first n odd natural numbers\n    g = (x for x in range(1,n+1,2) )\n    # Step 2 : Create a list to store 4 ** first n odd numbers\n    l = []\n    # Step 3 : Loop through generator object to generate 4 ** first n odd numbers\n    for x in g :\n        l.append(x ** 4)\n    # Step 4 : Return sum of 4 ** first n odd numbers\n    return sum(l)\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 0 :\n        return 0\n    if n == 1 :\n        return 1\n    return n**4 + odd_num_sum(n-1)\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n < 1:\n        return -1\n    else:\n        return n**4 + odd_num_sum(n-1)\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    #n = int(raw_input(\"Enter the value of n:\"))\n    #if n%2 == 0:\n    #    n = n + 1\n    #num = 1\n    #sum = 0\n    #while num < n:\n    #    num = num + 2\n    #    sum = sum + (num ** 4)\n    #return sum\n    return n ** 4 + (n-1) ** 4\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if (n<0) : \n        print \"Invalid input\"\n        return\n    else : \n        s = 0 \n        for i in range(n+1) : \n            if (i%2!= 0) : \n                s += (i**4)\n        return s\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        if i%2!=0 :\n            total = total + (i**4)\n    return total\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 0 :\n        return 0\n    elif n == 1 :\n        return 1\n    else :\n        return (n**4) + odd_num_sum(n-1)\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n<0 :\n        return None\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 3\n    else:\n        return (n*(n+1)*(2*n+1))/6\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    s = []\n    for i in exp:\n        if i == '(':\n            s.append(i)\n        elif i == ')':\n            if len(s) == 0:\n                return False\n            else:\n                s.pop()\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    opening = {\n        '(': ')',\n        '{': '}',\n        '[': ']'\n    }\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp)==1:\n        return True\n    s=set(exp)\n    if s.issubset(set(\"+*-/()\")):\n        return True\n    return False\ndef convert_to_postfix(exp):\n    '''\n    Write a function to convert infix expression to postfix expression. https://www.geeksforgeeks.org/convert-infix-expression-to-postfix-expression/\n    '''\n    stack=deque()\n    exp=exp.split()\n    result=[]\n    operators=set([\"+\",\"-\",\"*\",\"/\"])\n    for i in exp:\n        if i.isdigit():\n            result.append(i)\n        elif i==\"+\" or i==\"-\" or i==\"*\" or i==\"/\":\n            while len(stack)!=0 and i in operators and stack[-1] in operators:\n                result.append(stack.pop())\n            stack.append(i)\n        elif i==\"(\":\n            stack.append(i)\n        elif i==\")\":\n            while stack[-1]!=\"(\":\n                result.append(stack.pop())\n            stack.pop()\n    while len(stack)!=0:\n        result.append(stack.pop())\n    return \" \".join(result)\ndef postfix(exp):\n    '''\n    Write a function to convert infix expression to postfix expression. https://www.geeksforgeeks.org/convert-infix-expression-to-postfix-expression/\n    '''\n    stack=deque()\n    operators=set([\"+\",\"-\",\"*\",\"/\"])\n    exp=exp.split()\n    result=[]\n    for i in exp:\n        if i.isdigit():\n            result.append(i)\n        elif i==\"+\" or i==\"-\" or i==\"*\" or i==\"/\":\n            while len(stack)!=0 and i in operators and stack[-1] in operators:\n                result.append(stack.pop())\n            stack.append(i)\n        elif i==\"(\":\n            stack.append(i)\n        elif i==\")\":\n            while stack[-1]!=\"(\":\n                result.append(stack.pop())\n            stack.pop()\n    while len(stack)!=0:\n        result.append(stack.pop())\n    return \" \".join(result)\ndef evaluate_postfix(exp):\n    '''\n    Write a function to evaluate postfix expression. https://www.geeksforgeeks.org/evaluate-postfix-expression-set-2/\n    '''\n    stack=deque()\n    operators=set([\"+\",\"-\",\"*\",\"/\"])\n    exp=exp.split()\n    for i in exp:\n        if i.isdigit():\n            stack.append(int(i))\n        else:\n            val2=stack.pop()\n            val1=stack.pop()\n            if i==\"+\":\n                stack.append(val1+val2)\n            elif i==\"-\":\n                stack.append(val1-val2)\n            elif i==\"*\":\n                stack.append(val1*val2)\n            elif i==\"/\":\n                stack.append(val1/val2)\n    return stack.pop()\ndef evaluate_postfix(exp):\n    '''\n    Write a function to evaluate postfix expression. https://www.geeksforgeeks.org/evaluate-postfix-expression-set-2/\n    '''\n    stack=deque()\n    operators=set([\"+\",\"-\",\"*\",\"/\"])\n    exp=exp.split()\n    for i in exp:\n        if i.isdigit():\n            stack.append(int(i))\n        else:\n            val2=stack.pop()\n            val1=stack.pop()\n            if i==\"+\":\n                stack.append(val1+val2)\n            elif i==\"-\":\n                stack.append(val1-val2)\n            elif i==\"*\":\n                stack.append(val1*val2)\n            elif i==\"/\":\n                stack.append(val1/val2)\n    return stack.pop()\ndef evaluate_postfix(exp):\n    '''\n    Write a function to evaluate postfix expression. https://www.geeksforgeeks.org/evaluate-postfix-expression-set-2/\n    '''\n    stack=deque()\n    operators=set([\"+\",\"-\",\"*\",\"/\"])\n    exp=exp.split()\n    for i in exp:\n        if i.isdigit():\n            stack.append(int(i))\n        else:\n            val2=stack.pop()\n            val1=stack.pop()\n            if i==\"+\":\n                stack.append(val1+val2)\n            elif i==\"-\":\n                stack.append(val1-val2)\n            elif i==\"*\":\n                stack.append(val1*val2)\n            elif i==\"/\":\n                stack.append(val1/val2)\n    return stack.pop()\ndef postfix(exp):\n    '''\n    Write a function to convert infix expression to postfix expression. https://www.geeksforgeeks.org/convert-infix-expression-to-postfix-expression/\n    '''\n    stack=deque()\n    operators=set([\"+\",\"-\",\"*\",\"/\"])\n    exp=exp.split()\n    result=[]\n    for i in exp:\n        if i.isdigit():\n            result.append(i)\n        elif i==\"+\" or i==\"-\" or i==\"*\" or i==\"/\":\n            while len(stack)!=0 and i in operators and stack[-1] in operators:\n                result.append(stack.pop())\n            stack.append(i)\n        elif i==\"(\":\n            stack.append(i)\n        elif i==\")\":\n            while stack[-1]!=\"(\":\n                result.append(stack.pop())\n            stack.pop()\n    while len(stack)!=0:\n        result.append(stack.pop())\n    return \" \".join(result)\ndef postfix(exp):\n    '''\n    Write a function to convert infix expression to postfix expression. https://www.geeksforgeeks.org/convert-infix-expression-to-postfix-expression/\n    '''\n    stack=deque()\n    operators=set([\"+\",\"-\",\"*\",\"/\"])\n    exp=exp.split()\n    result=[]\n    for i in exp:\n        if i.isdigit():\n            result.append(i)\n        elif i==\"+\" or i==\"-\" or i==\"*\" or i==\"/\":\n            while len(stack)!=0 and i in operators and stack[-1] in operators:\n                result.append(stack.pop())\n            stack.append(i)\n        elif i==\"(\":\n            stack.append(i)\n        elif i==\")\":\n            while stack[-1]!=\"(\":\n                result.append(stack.pop())\n            stack.pop()\n    while len(stack)!=0:\n        result.append(stack.pop())\n    return \" \".join(result)\ndef infix_to_postfix(exp):\n    '''\n    Write a function to convert infix expression to postfix expression. https://www.geeksforgeeks.org/convert-infix-expression-to-postfix-expression/\n    '''\n    stack=deque()\n    operators=set([\"+\",\"-\",\"*\",\"/\"])\n    exp=exp.split()\n    result=[]\n    for i in exp:\n        if i.isdigit():\n            result.append(i)\n        elif i==\"+\" or i==\"-\" or i==\"*\" or i==\"/\":\n            while len(stack)!=0 and i in operators and stack[-1] in operators:\n                result.append(stack.pop())\n            stack.append(i)\n        elif i==\"(\":\n            stack.append(i)\n        elif i==\")\":\n            while stack[-1"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for ch in exp:\n        if ch=='(' or ch=='{' or ch=='[':\n            stack.append(ch)\n        elif ch==')':\n            if len(stack)==0 or stack.pop()!='(':\n                return False\n        elif ch=='}':\n            if len(stack)==0 or stack.pop()!='{':\n                return False\n        elif ch==']':\n            if len(stack)==0 or stack.pop()!='[':\n                return False\n    if len(stack)==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for c in exp:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) == 0 or stack[-1]!= '(':\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    openers = [\"(\", \"{\", \"[\"]\n    closers = [\")\", \"}\", \"]\"]\n    check = []\n    for i in exp:\n        if i in openers:\n            check.append(i)\n        elif i in closers:\n            if len(check) == 0:\n                return False\n            else:\n                if openers.index(check[-1])!= closers.index(i):\n                    return False\n                else:\n                    check.pop()\n    if len(check) == 0:\n        return True\n    else:\n        return False\ndef check_if_balanced(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for char in exp:\n        if char == \"(\" or char == \"[\" or char == \"{\":\n            stack.append(char)\n        elif char == \")\" or char == \"]\" or char == \"}\":\n            if len(stack) == 0:\n                return False\n            else:\n                if char == \")\" and stack[-1] == \"(\":\n                    stack.pop()\n                elif char == \"]\" and stack[-1] == \"[\":\n                    stack.pop()\n                elif char == \"}\" and stack[-1] == \"{\":\n                    stack.pop()\n                else:\n                    return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\ndef insert_into_table(table, column_number, key, value):\n    '''\n    https://www.geeksforgeeks.org/printing-a-singly-linked-list/\n    '''\n    node = Node(key, value)\n    node.next = None\n    if len(table) == 0:\n        table.append(node)\n    else:\n        temp = table.head\n        while temp.next:\n            temp = temp.next\n        temp.next = node\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i in ['(','{','[']:\n            stack.append(i)\n        elif i in [')',']','}']:\n            if not stack:\n                return False\n            if i == ')' and stack[-1]!= '(':\n                return False\n            elif i == ']' and stack[-1]!= '[':\n                return False\n            elif i == '}' and stack[-1]!= '{':\n                return False\n            stack.pop()\n    if not stack:\n        return True\n    return False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # Stacks to push and pop elements of string on either side of operator\n    stack_operators = deque()\n    stack_operators.append('(')\n    stack_operators.append(')')\n    \n    for ch in exp:\n        if ch in '{[(':\n            stack_operators.append(ch)\n        elif ch in '}]':\n            if len(stack_operators) == 0:\n                return False\n            else:\n                x = stack_operators.pop()\n                if ch == '}' and x!= '{' or ch == ']' and x!= '[' or ch == ')' and x!= '(':\n                    return False\n    \n    return len(stack_operators) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for letter in exp:\n        if letter == '(':\n            stack.append(letter)\n        elif letter == ')':\n            if not stack:\n                return False\n            stack.pop()\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    def is_balanced(expr):\n        for i in expr:\n            if i in '(':\n                stack.append(i)\n            elif i in ')':\n                if not stack:\n                    return False\n                if stack.pop()!=i:\n                    return False\n        if not stack:\n            return True\n        else:\n            return False\n    if is_balanced(exp):\n        print \"Expression is balanced\"\n    else:\n        print \"Expression is not balanced\"\n    print\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if not test_str:\n        return\n    if K == 0:\n        print test_str\n        return\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    return''.join([word for word in words if len(word)!= K])\n    \nprint remove_length('The quick brown fox jumps over the lazy dog', 4)\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if test_str == '' or len(test_str) <= K:\n        return test_str\n    return''.join(test_str.split(' ')[K:])\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split(' ')\n    # print(words)\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    new_words.sort()\n    new_str =''.join(new_words)\n    return new_str\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # print test_str\n    words = test_str.split()\n    words_without_length = []\n    for i in range(len(words)):\n        if len(words[i])!= K:\n            words_without_length.append(words[i])\n    # print''.join(words_without_length)\n    return''.join(words_without_length)\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return''.join(x for x in test_str.split() if len(x)!= K)\n    \nassert remove_length('I love apples, I love cats', 2) == 'I love apples I love cats'\nassert remove_length('I love apples, I love cats', 1) == 'I love apples I cats'\nassert remove_length('I love apples, I love cats', 3) == 'I love apples I love cats'\nassert remove_length('I love apples, I love cats', 4) == 'I love apples I cats'\nassert remove_length('I love apples, I love cats', 10) == 'I love apples I cats'\nassert remove_length('I love apples, I love cats', 1000) == 'I love apples I cats'\nassert remove_length('', 2) == ''\nassert remove_length('I love apples, I love cats', 0) == 'I love apples, I love cats'\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if not isinstance(K, int):\n        raise TypeError('K must be an int')\n    if not isinstance(test_str, str):\n        raise TypeError('test_str must be a string')\n    if K <= 0:\n        raise ValueError('K must be a positive int')\n    if K > len(test_str):\n        raise ValueError('K cannot be greater than the length of the string')\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_list = []\n    for word in words:\n        if len(word) == K:\n            continue\n        else:\n            filtered_list.append(word)\n    return''.join(filtered_list)\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    res = []\n    curr_str = ''\n    for i in test_str:\n        if i!='':\n            curr_str += i\n        else:\n            if curr_str not in res and len(curr_str) == K:\n                res.append(curr_str)\n            curr_str = ''\n    return res\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Remove any number of spaces from the start and end of the string\n    test_str = test_str.strip()\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance = re.finditer(r\"\\b\"+pattern+r\"\\b\",text)\n    if occurance:\n        return [(match.start(),match.end(),match.group(0)) for match in occurance]\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurances=[]\n    ind=0\n    matches=re.finditer(pattern,text)\n    for match in matches:\n        occurances.append((match.start(),match.end(),match.group(0)))\n        ind+=1\n    if len(occurances)==0:\n        return None\n    return occurances\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    print(text.find(pattern))\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    return [i for i,j in enumerate(text) if j == pattern]\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if text is None or pattern is None:\n        return None\n    if len(pattern) == 0:\n        return 0\n    if len(pattern) == 1:\n        if text.find(pattern) == 0:\n            return 1\n        else:\n            return 0\n    occurance = 0\n    if len(text) < len(pattern):\n        return occurance\n    for i in xrange(len(text) - len(pattern)+1):\n        if text[i:i+len(pattern)] == pattern:\n            occurance += 1\n    return occurance\ndef occurance_string(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if text is None or pattern is None:\n        return None\n    if len(pattern) == 0:\n        return 0\n    if len(pattern) == 1:\n        if text.find(pattern) == 0:\n            return 1\n        else:\n            return 0\n    occurance = 0\n    for i in xrange(len(text) - len(pattern)+1):\n        if text[i:i+len(pattern)] == pattern:\n            occurance += 1\n    return occurance\ndef find_string(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if text is None or pattern is None:\n        return None\n    if len(pattern) == 0:\n        return 0\n    if len(pattern) == 1:\n        if text.find(pattern) == 0:\n            return 1\n        else:\n            return 0\n    occurance = 0\n    for i in xrange(len(text) - len(pattern)+1):\n        if text[i:i+len(pattern)] == pattern:\n            occurance += 1\n    return occurance\ndef string_position(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if text is None or pattern is None:\n        return None\n    if len(pattern) == 0:\n        return 0\n    if len(pattern) == 1:\n        if text.find(pattern) == 0:\n            return 1\n        else:\n            return 0\n    occurance = 0\n    for i in xrange(len(text) - len(pattern)+1):\n        if text[i:i+len(pattern)] == pattern:\n            occurance += 1\n    return occurance\ndef occurance_regex(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if text is None or pattern is None:\n        return None\n    if len(pattern) == 0:\n        return 0\n    if len(pattern) == 1:\n        if text.find(pattern) == 0:\n            return 1\n        else:\n            return 0\n    occurance = 0\n    for match in re.finditer(r'{}'.format(pattern),text):\n        occurance += 1\n    return occurance\ndef find_regex(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if text is None or pattern is None:\n        return None\n    if len(pattern) == 0:\n        return 0\n    if len(pattern) == 1:\n        if text.find(pattern) == 0:\n            return 1\n        else:\n            return 0\n    occurance = 0\n    for match in re.finditer(r'{}'.format(pattern),text):\n        occurance += 1\n    return occurance\ndef regex_position(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if text is None or pattern is None:\n        return None\n    if len(pattern) == 0:\n        return 0\n    if len(pattern) == 1:\n        if text.find(pattern) == 0:\n            return 1\n        else:\n            return 0\n    occurance = 0\n    for match in re.finditer(r'{}'.format(pattern),text):\n        occurance += 1\n    return occurance\ndef occurance_regex_pattern(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if text is None or pattern is None:\n        return None\n    if len(pattern) == 0:\n        return 0\n    if len(pattern) == 1:\n        if text.find(pattern) == 0:\n            return 1\n        else:\n            return 0\n    occurance = 0\n    for match in re.finditer(r'{}'.format(pattern),text):\n        occurance += 1\n    return occurance\ndef find_regex_pattern(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if text is None or pattern is None:\n        return None\n    if len(pattern) == 0:\n        return 0\n    if len(pattern) == 1:\n        if text.find(pattern) == 0:\n            return 1\n        else:\n            return 0\n    occurance = 0\n    for match in re.finditer(r'{}'.format(pattern),text):\n        occurance += 1\n    return occurance\ndef regex_pattern_position(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if text is None or pattern is None:\n        return None\n    if len(pattern) == 0:\n        return 0\n    if len(pattern) == 1:\n        if text.find(pattern) == 0:\n            return 1\n        else:\n            return 0\n    occurance = 0\n    for match in re.finditer(r'{}'.format(pattern),text):\n        occurance += 1\n    return occurance\ndef pattern_occurance(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if text is None or pattern is None:\n        return None\n    if len(pattern) == 0:\n        return 0\n    if len(pattern) == 1:\n        if text.find(pattern) == 0:\n            return 1\n        else:\n            return 0\n    occurance = 0\n    for i in xrange(len(text) - len(pattern)+1):\n        if text[i:i+len(pattern)] == pattern:\n            occurance += 1\n    return occurance\ndef pattern_occurance_regex(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if text is None or pattern is None:\n        return None\n    if len(pattern) == 0:\n        return 0\n    if len(pattern) == 1:\n        if text.find(pattern) == 0:\n            return 1\n        else:\n            return 0\n    occurance = 0\n    for match in re.finditer(r'{}'.format(pattern),text):\n        occurance += 1\n    return occurance\ndef pattern_position(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if text is None or pattern is None:\n        return None\n    if len(pattern) == 0:\n        return 0\n    if len(pattern) == 1:\n        if text.find(pattern) == 0:\n            return 1\n        else:\n            return 0\n    occurance = 0\n    for i in xrange(len(text) - len(pattern)+1):\n        if text[i:i+len(pattern)] == pattern:\n            occurance += 1\n    return occurance\ndef pattern_string(text,pattern):\n    '''\n    Write a function to find the occurrence and position of th"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if not pattern:\n        return text\n    return re.sub(r'(?<=\\w)' + pattern +r'(?=\\b)', text, pattern, flags = re.I)\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m=len(pattern)\n    n=len(text)\n    occurance={}\n    for i in range(0,n-m+1):\n        if re.search(pattern,text[i:i+m]):\n            if text[i:i+m] not in occurance:\n                occurance[text[i:i+m]]=1\n            else:\n                occurance[text[i:i+m]]+=1\n    return occurance\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    i = 0\n    while True:\n        i = text.find(pattern,i)\n        if i == -1:\n            return None\n        else:\n            print '%s is at position %d' %(pattern,i)\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        res = re.search(pattern,text)\n        if res is None:\n            return None\n        return res.start(),res.end()\n    except Exception as e:\n        print e\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    index_start=0\n    while True:\n        index_start=text.find(pattern,index_start)\n        if index_start==-1:\n            break\n        print('Found at index '+str(index_start))\n        index_start+=1\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2 == 1:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(num%2==1 for num in nums)\n    #return all([num%2==1 for num in nums])\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return [nums[i] if i%2!=0 else nums[i-1] for i in range(len(nums))]\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    assert len(nums) > 0, 'Size of list should not be zero'\n    for i in range(1, len(nums), 2):\n        assert nums[i] % 2 == 1, 'Odd number not found at index: %s' % i\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    for i in range(len(nums)):\n        if (i + 1) % 2!= 0:\n            if nums[i] % 2!= 0:\n                return True\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all([num%2 == 1 for num in nums])\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i]%2==0:\n            return False\n    return True\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    counter = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] == 'a' and test_str[i+1] in 'aeiou':\n            counter += 1\n    \n    return counter\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return sum([1 for char in test_str if char in vowels])\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (test_str[i-1] in vowels or i == 0):\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a','e','i','o','u'])\n    s = test_str\n    vowel_count = 0\n    for i in range(1, len(s)-1):\n        if s[i] in vowels and s[i-1] not in vowels:\n            vowel_count += 1\n    return vowel_count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_count = 0\n    for i in range(1, len(test_str)):\n        if test_str[i] in \"aeiou\":\n            if test_str[i-1] in \"aeiou\":\n                vowel_count += 1\n    return vowel_count\n    \nprint count_vowels(\"we have to do something very unique\")\nprint count_vowels(\"I like music\")\nprint count_vowels(\"we\""
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in xrange(len(test_str)):\n        if test_str[i] in 'aeiou':\n            if i>0 and test_str[i-1] in 'aeiou':\n                continue\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    result = {}\n    for index, char in enumerate(test_str):\n        if char in result:\n            result[char] += 1\n        elif index < len(test_str) - 1:\n            if test_str[index + 1] in 'aeiou':\n                result[char] = 1\n    return result\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # # solution 1\n    # vowels = 0\n    # for i in range(len(test_str) - 1):\n    #     if test_str[i] in 'aeiou':\n    #         if test_str[i + 1] in 'aeiou':\n    #             vowels += 1\n    # return vowels\n    # # solution 2\n    # vowels = 0\n    # for i in range(len(test_str)):\n    #     if test_str[i] in 'aeiou':\n    #         try:\n    #             if test_str[i + 1] in 'aeiou':\n    #                 vowels += 1\n    #         except IndexError:\n    #             pass\n    # return vowels\n    # solution 3\n    vowels = 0\n    for i in range(len(test_str)):\n        if i < len(test_str) - 1:\n            if test_str[i] in 'aeiou' and test_str[i + 1] in 'aeiou':\n                vowels += 1\n            elif test_str[i] in 'aeiou' and test_str[i + 1] not in 'aeiou':\n                vowels += 1\n        else:\n            if test_str[i] in 'aeiou':\n                vowels += 1\n    return vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    i = 0\n    count = 0\n    while i < len(test_str)-1:\n        if test_str[i] == 'a' or test_str[i] == 'e' or test_str[i] == 'i' or test_str[i] == 'o' or test_str[i] == 'u':\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    string_length = len(test_str)\n    vowels_count = 0\n    for i in range(string_length):\n        if (test_str[i-1] in vowels) and (test_str[i] in vowels):\n            vowels_count += 1\n    return vowels_count\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if arr.count(i)==1:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr_copy = arr[:]\n    arr_copy.sort()\n    \n    if len(arr) == 1:\n        return arr_copy[0]\n    \n    arr_copy = arr[:]\n    arr_copy.sort()\n    \n    if len(arr_copy) == 1:\n        return arr_copy[0]\n    \n    res = []\n    \n    for i in xrange(len(arr) - 1):\n        if arr[i] + arr[i + 1]!= arr_copy[i] + arr_copy[i + 1]:\n            res.append(arr[i] + arr[i + 1])\n    \n    res.append(arr[len(arr) - 1])\n    \n    return sum(res)\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    l = len(arr)\n    arr = sorted(arr)\n    if l == 0:\n        return 0\n    if l == 1:\n        return arr[0]\n    else:\n        if arr[0] == arr[1]:\n            return 0\n        else:\n            return arr[0] + arr[1]\n            \ndef unique_list(arr):\n    '''\n    Write a python function to return a list of unique elements from given list.\n    '''\n    \n    l = len(arr)\n    if l == 0:\n        return []\n    arr = sorted(arr)\n    if l == 1:\n        return [arr[0]]\n    else:\n        if arr[0] == arr[1]:\n            return arr[:2]\n        else:\n            return arr[:2] + arr[2:]\n        \ndef reverse_list(arr):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    \n    l = len(arr)\n    if l == 0:\n        return []\n    if l == 1:\n        return [arr[0]]\n    else:\n        return arr[-1:] + arr[:-1]\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    i = 0\n    sum = 0\n    while i < len(arr):\n        if arr.count(arr[i]) == 1:\n            sum += arr[i]\n        i += 1\n    return sum\n    \n    \ndef find_non_repeated(arr): \n    '''\n    Write a python function to find the non repeated elements of a given list\n    '''\n    i = 0\n    while i < len(arr):\n        if arr.count(arr[i]) > 1:\n            arr.pop(i)\n        i += 1\n    return arr\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n    \ndef test_find_sum():\n    assert sum([1,2,3,4,4]) == 6\n    assert sum([2,1,2,2,2]) == 8\n    assert sum([2,1,2,4]) == 4\n    assert sum([1,2,3,4,5,6]) == 0\n    assert sum([1,2,2,3,4,5,6]) == 22\n    \ndef count_unique_characters(arr):\n    '''\n    Write a python function to find the number of unique characters in a given string.\n    '''\n    return len(set(arr))\n    \ndef test_count_unique_characters():\n    assert count_unique_characters('Hello') == 5\n    assert count_unique_characters('hello') == 3\n    assert count_unique_characters('Hello') == 5\n    assert count_unique_characters('abcdefghijklmnopqrstuvwxyz') == 26\n    assert count_unique_characters('abcdefghijklmnopqrstuvwxyz'.upper()) == 26\n    assert count_unique_characters('abcdefghijklmnopqrstuvwxyz'.lower()) == 26\n    assert count_unique_characters('abcdefghijklmnopqrstuvwxyz'.replace('a','@')) == 25\n    \ndef find_max_occurrence(arr):\n    '''\n    Write a python function to find the maximum number of occurrences of an element in a given array.\n    '''\n    max_occurrence = 0\n    for i in range(len(arr)):\n        occurrence = arr.count(arr[i])\n        if occurrence > max_occurrence:\n            max_occurrence = occurrence\n    return max_occurrence\n    \ndef test_find_max_occurrence():\n    assert find_max_occurrence([1,1,1,1,1,1,1,1,1,1]) == 3\n    assert find_max_occurrence([1,2,3,4,5]) == 1\n    assert find_max_occurrence([1,2,3,4,5,1,1,1,1,1,1,1,1,1]) == 6\n    assert find_max_occurrence([1,2,3,4,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 6\n    assert find_max_occurrence([1,2,3,4,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 6\n    assert find_max_occurrence([1,2,3,4,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 6\n    \ndef print_vowel_count(arr):\n    '''\n    Write a python function to count the number of vowels and consonants in a given string.\n    '''\n    vowel_count = 0\n    consonant_count = 0\n    for i in range(len(arr)):\n        if arr[i] in 'aeiou':\n            vowel_count += 1\n        else:\n            consonant_count += 1\n    print('%d vowels and %d consonants' % (vowel_count, consonant_count))\n    \ndef test_print_vowel_count():\n    assert print_vowel_count('Hello') == 3\n    assert print_vowel_count('hello') == 4\n    assert print_vowel_count('Hello') == 3\n    assert print_vowel_count('abcdefghijklmnopqrstuvwxyz') == 36\n    assert print_vowel_count('abcdefghijklmnopqrstuvwxyz'.upper()) == 36\n    assert print_vowel_count('abcdefghijklmnopqrstuvwxyz'.lower()) == 36\n    assert print_vowel_count('abcdefghijklmnopqrstuvwxyz'.replace('a','@')) == 35\n    \ndef find_most_common(arr):\n    '''\n    Write a python function to find the most common character in a given string.\n    '''\n    count = 0\n    most_common = ''\n    for i in range(len(arr)):\n        if arr[i] > count:\n            count = arr[i]\n            most_common = arr[i]\n    return most_common\n    \ndef test_find_most_common():\n    assert find_most_common('Hello') == 'e'\n    assert find_most_common('hello') == 'e'\n    assert find_most_common('Hello') == 'e'\n    assert find_most_common('abcdefghijklmnopqrstuvwxyz') == 'z'\n    assert find_most_common('abcdefghijklmnopqrstuvwxyz'.upper()) == 'Z'\n    assert find_most_common('abcdefghijklmnopqrstuvwxyz'.lower()) == 'z'\n    assert find_most_common('abcdefghijklmnopqrstuvwxyz'.replace('a','@')) == '@'\n    \ndef find_largest_smallest(arr):\n    '''\n    Write a python function to find the largest and smallest elements in a given array.\n    '''\n    largest = -1\n    smallest = -1\n    for i in range(len(arr)):\n        if arr[i] > largest:\n            largest = arr[i]\n        if arr[i] < smallest:\n            smallest = arr[i]\n    return (largest, smallest)\n    \ndef test_find_largest_smallest():\n    assert find_largest_smallest([1,2,3,4,5,6,7,8]) == (8,1)\n    assert find_largest_smallest([-1,-2,-3,-4,-5,-6,-7,-8]) == (-8, -1)\n    assert find_largest_smallest([-9,-8,-7,-6,-5,-4,-3,-2,-1]) == (-1, 9)\n    assert find_largest_smallest([1,2,3,4,5,6,7,8,9]) == (9,1)\n    assert find_largest_smallest([-1,2,3,4,5,6,7,8,9]) == (9,1)\n    assert find_largest_smallest([-1,-2,-3,-4,-5,-6,-7,-8,-9]) == (-9, -1)\n    assert find_largest_smallest([-9,-8,-7,-6,-5,-4,-3,-2,-1]) == (-1, 9)\n    assert find_largest_smallest([-1,-2,3,4,5,6,7,8,9]) == (9,1)\n    \ndef reverse_string(arr):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return arr[::-1]\n    \ndef test_reverse_string():\n    assert reverse_string('Hello') == 'olleH'\n    assert reverse_string('hello') == 'olleh'\n    assert reverse_string('Hello') == 'olleH'\n    assert reverse_string('abcdefghijklmnopqrstuvwxyz') == 'zyxwvutsrqponmlkjihgfedcba'\n    assert reverse_string('abcdefghijklmnopqrstuvwxyz'.upper()) == 'ZYXWVUTSRQPONMLKJIHGFEDCBA'\n    assert reverse_string('abcdefghijklmnopqrstuvwxyz'.lower()) == 'zyxwvutsrqponmlkjihgfedcba'\n    assert reverse_string('abcdefghijklmnopqrstuvwxyz'.replace('a','@')) == '@cdbf@dgjb"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    #number of elements in the array\n    length = len(arr) \n    #sum of the elements in the array\n    sum = 0\n    #for each element in the array\n    for i in range(length):\n        #add the element to the sum\n        sum += arr[i]\n    return sum\n    \ndef duplicate_elements(arr): \n    '''\n    Write a python function to find the duplicates elements in a given list.\n    '''\n    #number of elements in the array\n    length = len(arr) \n    #sum of the elements in the array\n    sum = 0\n    #for each element in the array\n    for i in range(length):\n        #add the element to the sum\n        sum += arr[i]\n    #subtract the sum from the elements in the array\n    for i in range(length):\n        arr[i] -= sum\n    #create an empty set\n    duplicates = set()\n    #for each element in the array\n    for i in range(length):\n        #check if the element is in the set\n        if arr[i] < 0:\n            #add the element to the set\n            duplicates.add(abs(arr[i]))\n    return duplicates\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum([x for x in arr if arr.count(x) == 1])\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    output = []\n    for key, group in groupby(list1):\n        output.append(list(group))\n    return output\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = []\n    list3 = []\n    for key, group in groupby(list1):\n        list2.append(list(group))\n    for index, item in enumerate(list2):\n        list3.append(len(item))\n        list3.append(item[0])\n    return list3\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = []\n    for k, g in groupby(list1):\n        list2.append(list(g))\n    return list2\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(j) for i, j in groupby(list1)]\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    new_list = [k for k, g in groupby(sorted(list1))]\n    return new_list\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    res = []\n    for k, g in groupby(list1):\n        res.append(list(g))\n    return res\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    new_list = []\n    for key, group in groupby(list1):\n        new_list.append(list(group))\n    return new_list\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = []\n    for k, g in groupby(list1):\n        grouped_list.append(list(g))\n    return grouped_list\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    g = groupby(list1)\n    return [[k, sum(1 for i in g)] for k, g in g]\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    temp = [list(j) for i, j in groupby(list1)]\n    return temp\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in list1:\n        t = tuple(i)\n        if t in count:\n            count[t] += 1\n        else:\n            count[t] = 1\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    result_dict = {}\n    for item in list1:\n        if item not in result_dict:\n            result_dict[item] = 1\n        else:\n            result_dict[item] += 1\n    return result_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d = {}\n    for l in list1:\n        l = tuple(l)\n        d.setdefault(l,0)\n        d[l] += 1\n    return d\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    counts = {}\n    for i in range(len(list1)):\n        list1[i] = tuple(list1[i])\n    for i in range(len(list1)):\n        if list1[i] in counts:\n            counts[list1[i]] += 1\n        else:\n            counts[list1[i]] = 1\n    return counts\n    \ndef unique_sublists2(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    counts = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = tuple(list1[i][j])\n    for i in range(len(list1)):\n        if list1[i] in counts:\n            counts[list1[i]] += 1\n        else:\n            counts[list1[i]] = 1\n    return counts\n    \n    \ndef unique_sublists3(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    counts = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = tuple(list1[i][j])\n    for i in range(len(list1)):\n        if list1[i] in counts:\n            counts[list1[i]] += 1\n        else:\n            counts[list1[i]] = 1\n    return counts\n    \ndef unique_sublists4(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    counts = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = tuple(list1[i][j])\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in counts:\n                counts[list1[i][j]] += 1\n            else:\n                counts[list1[i][j]] = 1\n    return counts\n    \ndef unique_sublists5(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    counts = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = tuple(list1[i][j])\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in counts:\n                counts[list1[i][j]] += 1\n            else:\n                counts[list1[i][j]] = 1\n    return counts\n    \ndef unique_sublists6(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    counts = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = tuple(list1[i][j])\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in counts:\n                counts[list1[i][j]] += 1\n            else:\n                counts[list1[i][j]] = 1\n    return counts\n    \n    \ndef unique_sublists7(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    counts = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = tuple(list1[i][j])\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in counts:\n                counts[list1[i][j]] += 1\n            else:\n                counts[list1[i][j]] = 1\n    return counts\n    \ndef unique_sublists8(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    counts = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = tuple(list1[i][j])\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in counts:\n                counts[list1[i][j]] += 1\n            else:\n                counts[list1[i][j]] = 1\n    return counts\n    \ndef unique_sublists9(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    counts = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = tuple(list1[i][j])\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in counts:\n                counts[list1[i][j]] += 1\n            else:\n                counts[list1[i][j]] = 1\n    return counts\n    \ndef unique_sublists10(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    counts = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = tuple(list1[i][j])\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in counts:\n                counts[list1[i][j]] += 1\n            else:\n                counts[list1[i][j]] = 1\n    return counts\n    \ndef unique_sublists11(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    counts = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = tuple(list1[i][j])\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in count"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict = {}\n    for i in range(len(list1)):\n        if list1[i] not in dict:\n            dict[tuple(list1[i])] = 1\n        else:\n            dict[tuple(list1[i])] += 1\n    return dict\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    if len(list1) == 1:\n        return {list1:1}\n    else:\n        return {tuple(list1):1}\n        \n    \n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for i in list1:\n        if type(i) == list:\n            sublists[tuple(i)] = 1 + sublists.get(tuple(i), 0)\n    return sublists\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dic = {}\n    for x in list1:\n        if type(x) == list:\n            tup = tuple(x)\n            if tup in dic:\n                dic[tup] += 1\n            else:\n                dic[tup] = 1\n    return dic\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for i in range(len(list1)):\n        try:\n            counts[list1[i]] += 1\n        except:\n            counts[list1[i]] = 1\n        #unique_list.append(list1[i])\n    return counts\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dic = {}\n    for l in list1:\n        if l in dic:\n            dic[l] += 1\n        else:\n            dic[l] = 1\n    return dic\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    res = []\n    for i in range(1,len(test_list)+1):\n        res += list(combinations(test_list, i))\n    return res\ndef unique_combination(list1, list2):\n    '''\n    Given two lists, find all the unique combinations of the given two lists.\n    For example if list1 = [1,2,3,4], list2 = [2,3,4,5] and unique_combination(list1,list2) is given then the output should be \n    [[1,2],[1,3],[1,4],[1,5],[2,3],[2,4],[2,5],[3,4],[3,5],[4,5]]\n    '''\n    res = []\n    for i in list1:\n        for j in list2:\n            if i not in res:\n                res.append(i)\n    for i in list2:\n        for j in list1:\n            if i not in res:\n                res.append(i)\n    return res\ndef test_unique_combination():\n    assert unique_combination([1,2,3,4], [2,3,4,5]) == [[1,2],[1,3],[1,4],[1,5],[2,3],[2,4],[2,5],[3,4],[3,5],[4,5]]\n    assert unique_combination([1,2,3,4], [2,3,4,5,6]) == [[1,2,3,4],[1,2,3,5],[1,2,3,6],[1,2,4,5],[1,2,4,6],[1,2,5,6],[1,3,4,5],[1,3,4,6],[1,3,5,6],[1,4,5,6],[2,3,4,5],[2,3,4,6],[2,3,5,6],[2,4,5,6],[2,4,6,7],[2,5,6,7],[3,4,5,6],[3,4,6,7],[3,5,6,7],[4,5,6,7]]\n    assert unique_combination([1,2,3,4], [2,3,4,5,6,7]) == [[1,2,3,4],[1,2,3,5],[1,2,3,6],[1,2,4,5],[1,2,4,6],[1,2,5,6],[1,3,4,5],[1,3,4,6],[1,3,5,6],[1,4,5,6],[2,3,4,5],[2,3,4,6],[2,3,5,6],[2,4,5,6],[2,4,6,7],[2,5,6,7],[3,4,5,6],[3,4,6,7],[3,5,6,7],[4,5,6,7]]\n    assert unique_combination([1,2,3,4], [1,2,3,4,5,6,7]) == [[1,2,3,4],[1,2,3,5],[1,2,3,6],[1,2,4,5],[1,2,4,6],[1,2,5,6],[1,3,4,5],[1,3,4,6],[1,3,5,6],[1,4,5,6],[2,3,4,5],[2,3,4,6],[2,3,5,6],[2,4,5,6],[2,4,6,7],[2,5,6,7],[3,4,5,6],[3,4,6,7],[3,5,6,7],[4,5,6,7]]\n    assert unique_combination([1,2,3,4], [1,2,3,4,5,6,7,8]) == [[1,2,3,4],[1,2,3,5],[1,2,3,6],[1,2,4,5],[1,2,4,6],[1,2,5,6],[1,3,4,5],[1,3,4,6],[1,3,5,6],[1,4,5,6],[2,3,4,5],[2,3,4,6],[2,3,5,6],[2,4,5,6],[2,4,6,7],[2,5,6,7],[3,4,5,6],[3,4,6,7],[3,5,6,7],[4,5,6,7],[4,5,7,8],[4,6,7,8],[5,6,7,8]]\n    assert unique_combination([1,2,3,4], [1,2,3,4,5,6,7,8,9,10]) == [[1,2,3,4],[1,2,3,5],[1,2,3,6],[1,2,4,5],[1,2,4,6],[1,2,5,6],[1,3,4,5],[1,3,4,6],[1,3,5,6],[1,4,5,6],[2,3,4,5],[2,3,4,6],[2,3,5,6],[2,4,5,6],[2,4,6,7],[2,5,6,7],[3,4,5,6],[3,4,6,7],[3,5,6,7],[4,5,6,7],[4,5,7,8],[4,6,7,8],[5,6,7,8],[5,7,8,9],[6,7,8,9],[6,7,9,10],[6,8,9,10],[6,9,10,11],[6,10,11,12],[7,8,9,10],[7,8,9,11],[7,9,10,11],[8,9,10,11],[8,9,11,12],[8,10,11,12],[8,10,12,13],[8,11,12,13],[9,10,11,12],[9,10,12,13],[9,11,12,13],[9,11,13,14],[9,12,13,14],[9,12,14,15],[9,13,14,15],[10,11,12,13],[10,11,13,14],[10,12,13,14],[10,12,14,15],[10,13,14,15],[10,13,15,16],[10,14,15,16],[10,14,16,17],[10,15,16,17],[11,12,13,14],[11,12,14,15],[11,13,14,15],[11,13,15,16],[11,14,15,16],[11,14,16,17],[11,15,16,17],[11,15,17,18],[11,16,17,18],[11,16,18,19],[11,17,18,19],[12,13,14,15],[12,13,15,16],[12,14,15,16],[12,14,16,17],[12,15,16,17],[12,15,17,18],[12,16,17,18],[12,16,18,19],[12,17,18,19],[13,14,15,16],[13,14,16,17],[13,15,16,17],[13,15,17,18],[13,16,17,18],[13,16,18,19],[13,17,18,19],[14,15,16,17],[14,15,17,18],[14,16,17,18],[14,16,18,19],[14,17,18,19],[14,17,19,20],[14,18,19,20],[14,18,20,21],[14,19,20,21],[15,16,17,18],[15,16,18,19],[15,17,18,19],[15,17,19,20],[15,18,19,20],[15,18,20,21],[15,19,20,21],[15,19,21,22],[15,20,21,22],[15,20,22,23],[15,21,22,23],[15,21,23,24],[15,22,23,24],[1"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1,len(test_list)):\n        if len(test_list[0]) > 1:\n            tmp = list(combinations(test_list[0],i))\n            for item in tmp:\n                result.append(list(item))\n        else:\n            result.append(test_list[0])\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = list(combinations(test_list,2))\n    return combinations_list\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    ans = []\n    for i in range(1,len(test_list)+1):\n        for t in combinations(test_list,i):\n            if sum(t)==100:\n                ans.append(t)\n    return ans\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combs = []\n    for i in range(1, len(test_list)):\n        combs += list(combinations(test_list, i))\n    return combs\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # combinations, combinations_with_replacement = itertools.combinations(l, 2)\n    # for ele in combinations:\n    #     print ele\n    # for ele in combinations_with_replacement:\n    #     print ele\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if len(test_list) == 0:\n        return []\n    else:\n        if len(test_list) == 1:\n            return [test_list]\n        else:\n            comb_list = []\n            for i in range(len(test_list)):\n                current_ele = test_list[i]\n                #print(\"current element\", current_ele)\n                comb_list.extend([com for com in find_combinations(test_list[i+1:]) if sum(com) + current_ele == len(test_list)])\n                #print(comb_list)\n            return comb_list\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    n = len(test_list)\n    for i in range(1, n+1):\n        result.extend(combinations(test_list, i))\n    return result\n    \n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    tuple_list = [('Alice', 'Bob'), ('Bob', 'Charlie'), ('Charlie', 'Alice'), ('Alice', 'Eve'), ('Eve', 'Bob'), ('Bob', 'Eve'), ('Eve', 'Alice')]\n    combs = []\n    for c in combinations(tuple_list, 2):\n        combs.append(sum(c))\n    print combs\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for i in range(1,len(test_list)+1):\n        combinations_list.extend(list(combinations(test_list,i)))\n    return combinations_list\n    \n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1,n+1) :\n        if n%i==0 :\n            divisors+=1\n    return divisors%2\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisors += 1\n    if divisors % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n<2:\n        return True\n    else:\n        sqrt = int(math.sqrt(n))\n        for i in range(2,sqrt+1):\n            if n%i==0:\n                return False\n        return True\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 0 :\n        return False\n    elif n == 0 or n == 1 :\n        return True\n    else :\n        cnt = 1\n        for i in range(2, n) :\n            if (n % i) == 0 :\n                cnt += 1\n        if cnt % 2 == 0 :\n            return True\n        else :\n            return False\ndef nth_digit(n, d) :\n    '''\n    Write a python function to get the nth digit of an integer. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    if n == 0 :\n        return 0\n    else :\n        cnt = 0\n        while n > 0 :\n            n //= 10\n            cnt += 1\n        s = d - 1\n        n *= 10\n        while cnt > 0 :\n            n //= 10\n            s += 1\n            cnt -= 1\n        return n % 10\ndef nth_digit_odd_count(n, d) :\n    '''\n    Write a python function to get the nth digit of an integer. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    if n == 0 :\n        return 0\n    else :\n        cnt = 0\n        while n > 0 :\n            n //= 10\n            cnt += 1\n        if (cnt % 2 == 1) and (d > 0) :\n            n *= 10\n            s = d - 1\n            while cnt > 0 :\n                n //= 10\n                s += 1\n                cnt -= 1\n            return n % 10\n        elif (cnt % 2 == 0) and (d == 0) :\n            return 0\n        else :\n            return nth_digit(n, d)\ndef perfect_squares(n) :\n    '''\n    Write a python function to find all the perfect squares less than n. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    squares = []\n    i = 1\n    while i * i <= n :\n        if (i * i == n) :\n            squares.append(i)\n        i += 1\n    return squares\ndef prime_factors(n) :\n    '''\n    Write a python function to get the prime factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    cnt = 0\n    if n < 0 :\n        return False\n    elif n == 0 or n == 1 :\n        return False\n    else :\n        while n % 2 == 0 :\n            n //= 2\n            cnt += 1\n        while n % 3 == 0 :\n            n //= 3\n            cnt += 1\n        while n % 5 == 0 :\n            n //= 5\n            cnt += 1\n        return cnt\ndef sum_of_divisors(n) :\n    '''\n    Write a python function to get the sum of divisors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    s = 1\n    if n < 0 :\n        return False\n    elif n == 0 or n == 1 :\n        return False\n    else :\n        for i in range(2, n) :\n            if (n % i) == 0 :\n                s += i\n        return s\ndef sum_of_divisors_odd_count(n) :\n    '''\n    Write a python function to get the sum of divisors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    if n < 0 :\n        return False\n    elif n == 0 or n == 1 :\n        return False\n    else :\n        cnt = 0\n        while n > 1 :\n            n //= 10\n            cnt += 1\n        s = 1\n        n *= 10\n        while cnt > 0 :\n            n //= 10\n            s += n\n            cnt -= 1\n        return s\ndef add_digits(n) :\n    '''\n    Write a python function to get the sum of the digits of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    s = 0\n    while n > 0 :\n        s += n % 10\n        n //= 10\n    return s\ndef get_digit(n, d) :\n    '''\n    Write a python function to get the nth digit of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    cnt = 0\n    while n > 0 :\n        n //= 10\n        cnt += 1\n    if d == 0 :\n        n *= 10\n        s = n // 10\n        return n % 10\n    elif d > cnt :\n        return 0\n    else :\n        s = 0\n        while cnt > 0 :\n            n //= 10\n            s += n % 10\n            cnt -= 1\n        return s\ndef get_digit_odd_count(n, d) :\n    '''\n    Write a python function to get the nth digit of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    if n < 0 :\n        return False\n    elif n == 0 or n == 1 :\n        return False\n    else :\n        cnt = 0\n        while n > 0 :\n            n //= 10\n            cnt += 1\n        if (cnt % 2 == 1) and (d > 0) :\n            n *= 10\n            s = n // 10\n            while cnt > 0 :\n                n //= 10\n                s += n % 10\n                cnt -= 1\n            return n % 10\n        elif (cnt % 2 == 0) and (d == 0) :\n            return 0\n        else :\n            return get_digit(n, d)\ndef is_leap_year(n) :\n    '''\n    Write a python function to check whether a year is leap year. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    if n % 400 == 0 :\n        return True\n    elif n % 100 == 0 :\n        return False\n    elif n % 4 == 0 :\n        return True\n    else :\n        return False\ndef square_numbers(n) :\n    '''\n    Write a python function to get the square of all the numbers from 1 to n. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    for i in range(1, n+1) :\n        print(i * i)\ndef square_digit_numbers(n) :\n    '''\n    Write a python function to get the square of all the numbers from 1 to n. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    if n < 0 :\n        return False\n    else :\n        cnt = 0\n        while n > 0 :\n            n //= 10\n            cnt += 1\n        s = 0\n        n *= 10\n        while cnt > 0 :\n            n //= 10\n            s += n\n            cnt -= 1\n        return s * s\ndef prime_factors(n) :\n    '''\n    Write a python function to get the prime factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-35.php\n    '''\n    factors = []\n    if n < 0 :\n        return False\n    elif n == 0 or n == 1 :\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # Enter your code here\n    # divisors_count = 0\n    divisors_count = 0\n    for x in range(1, int(math.sqrt(n)+1)):\n        if n%x==0:\n            divisors_count+=1\n    return divisors_count%2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count=0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1 : \n        return 1\n    divisors = [1]\n    for i in range(2, int(math.sqrt(n)) + 1) : \n        if n % i == 0 : \n            divisors.append(i)\n            divisors.append(n / i)\n    return len(divisors) \ndef count_divisors_else(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1 : \n        return 1\n    divisors = [1]\n    for i in range(2, n) : \n        if n % i == 0 : \n            divisors.append(i)\n    return len(divisors) \ndef first_n_digit(n) : \n    '''\n    Write a python function to find the last n digits of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    result = n % 10\n    if n == 1 : \n        return result\n    return result + first_n_digit(n / 10) \ndef digit_count(n) : \n    '''\n    Write a python function to find the count of digits in a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    if n == 0 : \n        return 1\n    return 1 + digit_count(n // 10) \ndef are_equal(a, b) : \n    '''\n    Write a python function to check whether two numbers are equal. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    return a == b \ndef gcd(a, b) : \n    '''\n    Write a python function to find the greatest common divisor of two numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    if b == 0 : \n        return a \n    return gcd(b, a % b) \ndef gcd_else(a, b) : \n    '''\n    Write a python function to find the greatest common divisor of two numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    if b == 0 : \n        return a \n    return gcd_else(b, a % b) \ndef gcd_while(a, b) : \n    '''\n    Write a python function to find the greatest common divisor of two numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    while b > 0 : \n        a, b = b, a % b\n    return a \ndef gcd_for(a, b) : \n    '''\n    Write a python function to find the greatest common divisor of two numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    while b > 0 : \n        a, b = b, a % b\n    return a \ndef factorial_iter(n) : \n    '''\n    Write a python function to calculate the factorial of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if n == 0 : \n        return 1\n    result = 1\n    while n > 0 : \n        result *= n \n        n -= 1\n    return result \ndef factorial_else(n) : \n    '''\n    Write a python function to calculate the factorial of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if n == 0 : \n        return 1\n    result = 1\n    for i in range(1, n + 1) : \n        result *= i \n    return result \ndef factorial_rec(n) : \n    '''\n    Write a python function to calculate the factorial of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if n == 0 : \n        return 1\n    if n == 1 : \n        return 1\n    return n * factorial_rec(n - 1) \ndef reverse_iter(str) : \n    '''\n    Write a python function to reverse a string. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    if len(str) == 1 : \n        return str\n    return reverse_iter(str[1:]) + str[0] \ndef reverse_else(str) : \n    '''\n    Write a python function to reverse a string. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    if len(str) == 1 : \n        return str\n    return str[len(str) - 1] + reverse_else(str[:len(str) - 1]) \ndef reverse_rec(str) : \n    '''\n    Write a python function to reverse a string. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    if len(str) == 1 : \n        return str\n    return str[len(str) - 1] + reverse_rec(str[:len(str) - 1]) \ndef is_palindrome(str) : \n    '''\n    Write a python function to check whether a string is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    if len(str) == 1 : \n        return True\n    if str[0]!= str[len(str) - 1] : \n        return False\n    return is_palindrome(str[1:len(str) - 1]) \ndef is_palindrome_else(str) : \n    '''\n    Write a python function to check whether a string is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    if len(str) == 1 : \n        return True\n    if str[0]!= str[len(str) - 1] : \n        return False\n    return is_palindrome_else(str[1:len(str) - 1]) \ndef is_palindrome_while(str) : \n    '''\n    Write a python function to check whether a string is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    if len(str) == 1 : \n        return True\n    if str[0]!= str[len(str) - 1] : \n        return False\n    return is_palindrome_while(str[1:len(str) - 1]) \ndef is_palindrome_for(str) : \n    '''\n    Write a python function to check whether a string is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    if len(str) == 1 : \n        return True\n    if str[0]!= str[len(str) - 1] : \n        return False\n    return is_palindrome"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisor = 2\n    count = 0\n    while n > 1:\n        while n % divisor == 0:\n            count += 1\n            n /= divisor\n        divisor += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n    \ndef check_prime(n) :\n    '''\n    Write a python function to check whether the number is prime or not\n    '''\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # Remove pass and write your logic here\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            count += 2\n        i += 1\n    if count % 2 == 0:\n        return True\n    else :\n        return False\ndef count_factors(n) : \n    '''\n    Write a python function to calculate the count of factors in an integer. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    if n > 1 :\n        i = 2\n        count = 0\n        while i <= math.sqrt(n) :\n            if n % i == 0 :\n                count += 1\n                while n % i == 0 :\n                    n /= i\n            i += 1\n        if n > 1 :\n            count += 1\n    else :\n        count = 0\n    return count\ndef get_fibonacci_number(n) :\n    '''\n    Write a python function to calculate the nth number of the fibonacci series. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else :\n        return get_fibonacci_number(n-1) + get_fibonacci_number(n-2)\ndef calculate_digit(n,digit) : \n    '''\n    Write a python function to calculate the number of times a digit occurs in a integer. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    count = 0\n    i = 1\n    while i <= n :\n        if n % i == 0 :\n            index = int(n/i)\n            if index > 9 :\n                index = str(index)\n            if int(index) == digit :\n                count += 1\n        i += 1\n    return count\ndef count_digits(n) : \n    '''\n    Write a python function to calculate the sum of digits of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    if n > 9 :\n        sum = 0\n        while n > 9 :\n            sum += calculate_digit(n,n % 10)\n            n = int(n/10)\n        sum += calculate_digit(n,n)\n    else :\n        sum = n\n    return sum\ndef factorial_digit(n) : \n    '''\n    Write a python function to calculate the factorial of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    i = 2\n    sum = 1\n    while i <= n :\n        sum *= i\n        i += 1\n    return sum\ndef factorial(n) : \n    '''\n    Write a python function to calculate the factorial of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if n > 0 :\n        if n == 1 :\n            return 1\n        else :\n            return n * factorial(n-1)\n    else :\n        return 1\ndef is_perfect_number(n) : \n    '''\n    Write a python function to check whether a number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    if n == factorial(n) :\n        return True\n    else :\n        return False\ndef count_prime_factors(n) : \n    '''\n    Write a python function to check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    if n > 1 :\n        i = 2\n        count = 0\n        while i < n :\n            if n % i == 0 :\n                count += 1\n            i += 1\n        if count == 0 :\n            return True\n        else :\n            return False\n    else :\n        return False\ndef get_prime_factors(n) : \n    '''\n    Write a python function to get the prime factorization of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    if count_prime_factors(n) :\n        i = 2\n        factors = []\n        while i <= n :\n            if n % i == 0 :\n                n /= i\n                factors.append(i)\n            i += 1\n        factors.append(n)\n        return factors\n    else :\n        return False\ndef get_perfect_factors(n) : \n    '''\n    Write a python function to get the perfect factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    if n > 1 :\n        factors = []\n        i = 2\n        while i <= n :\n            if n % i == 0 :\n                n /= i\n                factors.append(i)\n            i += 1\n        if n > 1 :\n            factors.append(n)\n        return factors\n    else :\n        return False\ndef get_perfect_number(n) : \n    '''\n    Write a python function to check whether a number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    if n == get_prime_factors(n) :\n        return True\n    else :\n        return False\ndef get_perfect_number(n) : \n    '''\n    Write a python function to check whether a number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    if n > 1 :\n        factors = get_prime_factors(n)\n        sum = 0\n        for factor in factors :\n            sum += count_factors(factor)\n        if sum == count_factors(n) :\n            return True\n        else :\n            return False\n    else :\n        return False\ndef get_perfect_number(n) : \n    '''\n    Write a python function to check whether a number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    if n > 1 :\n        factors = get_prime_factors(n)\n        sum = 0\n        for factor in factors :\n            sum += factorial(count_factors(factor))\n        if sum == factorial(count_factors(n)) :\n            return True\n        else :\n            return False\n    else :\n        return False\ndef is_perfect_number(n) : \n    '''\n    Write a python function to check whether a number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    if n == get_prime_factors(n) :\n        return True\n    else :\n        return False\ndef is_perfect_number(n) : \n    '''\n    Write a python function to check whether a number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    if n > 1 :\n        factors = get_prime_factors(n)\n        sum = 0\n        for factor in factors :\n            sum += factorial(count_factors(factor))\n        if sum == factorial(count_factors(n)) :\n            return True\n        else :\n            return False\n    else :\n        return False\ndef is_perfect_numbe"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    odd_length_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if (j-i)%2 == 1:\n                odd_length_sum += sum(arr[i:j])\n    return odd_length_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n    n = len(arr)\n    for i in xrange(n):\n        for j in xrange(i, n, 2):\n            result += sum(arr[i:j+1])\n    return result\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    temp_arr = arr[:]\n    n = len(arr)\n    total_sum = 0\n    for i in range(1,n,2):\n        for j in range(i, n):\n            total_sum += sum(temp_arr[j-i:j+1])\n        temp_arr = arr[:]\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        for j in range(i+1,n+1):\n            if j-i == 1:\n                result += arr[i]\n            else:\n                result += sum(arr[i:j])\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    sum_of_all_odd_length_subarrays = 0\n    \n    for i in range(len(arr)):\n        for j in range(0, len(arr) - i, 2):\n            sum_of_all_odd_length_subarrays += sum(arr[j:j+i+1])\n            \n    return sum_of_all_odd_length_subarrays\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum([(arr[i-1]+arr[i]+arr[i+1]) for i in range(1,len(arr)-1)])\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    pass\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if len(arr) % 2!= 0:\n            sum += sum(arr[i:])\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    res = 0\n    for i in xrange(1,len(arr)):\n        if i%2==1:\n            res += sum(arr[i-1:i+1])\n    return res\n    \n    \n    "
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    R = r/255.0\n    G = g/255.0\n    B = b/255.0\n    Cmax = max(R,G,B)\n    Cmin = min(R,G,B)\n    delta = Cmax - Cmin\n    if delta == 0:\n        H = 0\n    elif Cmax == R:\n        H = (60*(((G-B)/delta)%6))%360\n    elif Cmax == G:\n        H = (60*(((B-R)/delta)+2))%360\n    elif Cmax == B:\n        H = (60*(((R-G)/delta)+4))%360\n    if Cmax == 0:\n        S = 0\n    else:\n        S = delta/Cmax\n    V = Cmax\n    return H, S, V\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # calculate r, g, b\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    # color hue\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    diff = cmax - cmin\n    if cmax == cmin:\n        h = 0\n    elif cmax == r:\n        h = (g - b) / diff\n    elif cmax == g:\n        h = 2 + (b - r) / diff\n    else:\n        h = 4 + (r - g) / diff\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r > g:\n        if r > b:\n            maximum = r\n            minimum = b\n        else:\n            maximum = b\n            minimum = r\n    else:\n        if g > b:\n            maximum = g\n            minimum = b\n        else:\n            maximum = b\n            minimum = g\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return (h,s,v)\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255\n    g = g / 255\n    b = b / 255\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_color = max(r,g,b)\n    min_color = min(r,g,b)\n    if (max_color == min_color):\n        hue = 0\n    elif (r == max_color):\n        hue = 60 * (((g - b)/(max_color - min_color)) % 6)\n    elif (g == max_color):\n        hue = 60 * (((b - r)/(max_color - min_color)) + 2)\n    elif (b == max_color):\n        hue = 60 * (((r - g)/(max_color - min_color)) + 4)\n    if (max_color == r):\n        hue = hue + 0\n    elif (max_color == g):\n        hue = hue + 120\n    elif (max_color == b):\n        hue = hue + 240\n    return hue, max_color, min_color\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    d = maxc - minc\n    if d == 0:\n        h = 0\n    elif maxc == r:\n        h = (g - b) / d\n    elif maxc == g:\n        h = 2 + (b - r) / d\n    elif maxc == b:\n        h = 4 + (r - g) / d\n    if minc == 0:\n        s = 0\n    else:\n        s = d / maxc\n    v = maxc\n    h *= 60\n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    diff = max_val - min_val\n    v = max_val\n    if max_val == 0:\n        return 0, 0, 0\n    if max_val!= min_val:\n        s = diff / max_val\n    else:\n        s = 0\n    if max_val == r:\n        h = 60 * ((g - b) / diff)\n    elif max_val == g:\n        h = 60 * ((b - r) / diff) + 120\n    else:\n        h = 60 * ((r - g) / diff) + 240\n    return h / 360, s, v / max_val\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if list1 is None or len(list1) == 0:\n        raise ValueError(\"Empty list\")\n    even_product = 1\n    odd_product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n    return even_product, odd_product\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = 1\n    for item in list1:\n        if item % 2 == 0:\n            result = result * item\n    return result\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    for num in list1:\n        if num%2 == 0:\n            even = num\n        else:\n            odd = num\n    print '{} {}'.format(even, odd)\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    for x in list1:\n        if x%2 == 0:\n            even = even * x\n        else:\n            odd = odd * x\n    return even, odd\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    for i in list1:\n        if i % 2 == 0:\n            even = even * i\n        else:\n            odd = odd * i\n    return even,odd\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            even_sum += list1[i]\n        else:\n            odd_sum += list1[i]\n    return (even_sum * odd_sum)\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if not list1:\n        return 0\n    count = 0\n    for i in list1:\n        if (i%2) == 0:\n            count += i\n    return count\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = 1\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            result = result * list1[i]\n        else:\n            result = result * list1[i] * -1\n    return result\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    output = 1\n    for i in range(len(list1)):\n        if list1[i]%2 == 0:\n            output *= list1[i]\n        else:\n            output *= list1[i]*2\n    return output\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str[1:-1]\n    return tuple(map(int, test_str[1:-1].split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    lst = list(map(int, test_str.replace('(', '').replace(')', '').split(',')))\n    return tuple(lst)\n    \ndef tuple_int_str(test_int):\n    '''\n    Write a function to convert integer tuple to string tuple.\n    '''\n    return str(test_int).replace('(', '').replace(')', '').replace(',', '')\n    \nif __name__ == '__main__':\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n    assert tuple_str_int('(1,2,3)') == (1,2,3)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # your code goes here\n    numbers = []\n    t_str = test_str.replace('(','').replace(')','').split()\n    for item in t_str:\n        numbers.append(int(item))\n    return tuple(numbers)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if not isinstance(test_str,str):\n        return None\n    else:\n        return tuple(int(x) for x in test_str.strip('()').split(','))\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    import re\n    return tuple(map(int, re.findall(r'\\d+', test_str)))\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    for x in test_str:\n        if not x in ['(','[','{','*',']','}',',',' ']:\n            raise ValueError('non-valid string,should only contains these characters: (,),[],{*,},, ')\n    test_str = test_str.replace('[','(')\n    test_str = test_str.replace(']',')')\n    test_str = test_str.replace('{','(')\n    test_str = test_str.replace('}',')')\n    test_str = test_str.replace('(','{')\n    test_str = test_str.replace(')', '}')\n    test_str = test_str.replace('*','{*}')\n    # print test_str\n    test_str = test_str.split('{*}')\n    # print test_str\n    test_int = []\n    for i in test_str:\n        if not i =='':\n            if i[0] == ',':\n                i = i[1:]\n            test_int.append(int(i))\n    return tuple(test_int)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int,test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(s) for s in test_str.split(','))\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.strip('()').split(', ')))\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    temp_list = test_str.split(',')\n    temp_list = list(map(int, temp_list))\n    return tuple(temp_list)\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a)==0 or a[-1]>=x:\n        a.append(x)\n        return a\n    for i in xrange(len(a),0,-1):\n        if a[i-1]>=x:\n            a.insert(i,x)\n            return a\n    a.append(x)\n    return a\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    if len(a)==0 or a[0]<=x:\n        a.insert(0,x)\n        return a\n    for i in xrange(1,len(a)):\n        if a[i-1]<=x:\n            a.insert(i,x)\n            return a\n    a.insert(0,x)\n    return a\ndef find_x(a,x):\n    if x in a:\n        return a.index(x)\n    else:\n        return -1\ndef binary_search(a,x):\n    '''\n    Write a function that implements a binary search.\n    '''\n    if len(a)==0:\n        return False\n    mid = len(a)/2\n    if a[mid]==x:\n        return True\n    elif x<a[mid]:\n        return binary_search(a[:mid],x)\n    else:\n        return binary_search(a[mid+1:],x)\ndef find_x_in_sorted(a,x):\n    '''\n    Write a function that implements a binary search in a sorted array.\n    '''\n    if len(a)==0:\n        return False\n    mid = len(a)/2\n    if x==a[mid]:\n        return True\n    elif x<a[mid]:\n        return find_x_in_sorted(a[:mid],x)\n    else:\n        return find_x_in_sorted(a[mid+1:],x)\ndef find_x_in_sorted_iterative(a,x):\n    '''\n    Write a function that implements a binary search in a sorted array.\n    '''\n    if len(a)==0:\n        return False\n    low=0\n    high=len(a)-1\n    while low<=high:\n        mid=(low+high)/2\n        if x==a[mid]:\n            return True\n        elif x<a[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return False\ndef find_x_in_sorted_recursive(a,x):\n    '''\n    Write a function that implements a binary search in a sorted array.\n    '''\n    if len(a)==0:\n        return False\n    if len(a)==1:\n        if a[0]==x:\n            return True\n        else:\n            return False\n    mid = len(a)/2\n    if x==a[mid]:\n        return True\n    elif x<a[mid]:\n        return find_x_in_sorted_recursive(a[:mid],x)\n    else:\n        return find_x_in_sorted_recursive(a[mid+1:],x)\ndef find_x_in_sorted_recursive_2(a,x):\n    '''\n    Write a function that implements a binary search in a sorted array.\n    '''\n    if len(a)==0:\n        return False\n    if len(a)==1:\n        if a[0]==x:\n            return True\n        else:\n            return False\n    mid = len(a)/2\n    if x==a[mid]:\n        return True\n    elif x<a[mid]:\n        return find_x_in_sorted_recursive_2(a[:mid],x)\n    else:\n        return find_x_in_sorted_recursive_2(a[mid+1:],x)\ndef find_x_in_sorted_binary_search_iterative(a,x):\n    '''\n    Write a function that implements a binary search in a sorted array.\n    '''\n    low=0\n    high=len(a)-1\n    while low<=high:\n        mid = (low+high)/2\n        if x==a[mid]:\n            return True\n        elif x<a[mid]:\n            high = mid-1\n        else:\n            low = mid + 1\n    return False\ndef find_x_in_sorted_binary_search_recursive(a,x):\n    '''\n    Write a function that implements a binary search in a sorted array.\n    '''\n    if len(a)==0:\n        return False\n    if len(a)==1:\n        if a[0]==x:\n            return True\n        else:\n            return False\n    mid = len(a)/2\n    if x==a[mid]:\n        return True\n    elif x<a[mid]:\n        return find_x_in_sorted_binary_search_recursive(a[:mid],x)\n    else:\n        return find_x_in_sorted_binary_search_recursive(a[mid+1:],x)\ndef find_x_in_sorted_binary_search_iterative(a,x):\n    low=0\n    high=len(a)-1\n    while low<=high:\n        mid = (low+high)/2\n        if x==a[mid]:\n            return True\n        elif x<a[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return False\ndef find_x_in_sorted_binary_search_recursive(a,x):\n    if len(a)==0:\n        return False\n    if len(a)==1:\n        if a[0]==x:\n            return True\n        else:\n            return False\n    mid = len(a)/2\n    if x==a[mid]:\n        return True\n    elif x<a[mid]:\n        return find_x_in_sorted_binary_search_recursive(a[:mid],x)\n    else:\n        return find_x_in_sorted_binary_search_recursive(a[mid+1:],x)\ndef find_x_in_sorted_binary_search_iterative(a,x):\n    low=0\n    high=len(a)-1\n    while low<=high:\n        mid = (low+high)/2\n        if x==a[mid]:\n            return True\n        elif x<a[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return False\ndef find_x_in_sorted_binary_search_recursive(a,x):\n    if len(a)==0:\n        return False\n    if len(a)==1:\n        if a[0]==x:\n            return True\n        else:\n            return False\n    mid = len(a)/2\n    if x==a[mid]:\n        return True\n    elif x<a[mid]:\n        return find_x_in_sorted_binary_search_recursive(a[:mid],x)\n    else:\n        return find_x_in_sorted_binary_search_recursive(a[mid+1:],x)\ndef find_x_in_sorted_linear_search(a,x):\n    '''\n    Write a function that implements a linear search in a sorted array.\n    '''\n    if len(a)==0:\n        return False\n    for i in xrange(len(a)):\n        if x==a[i]:\n            return True\n    return False\ndef find_x_in_sorted_linear_search_2(a,x):\n    '''\n    Write a function that implements a linear search in a sorted array.\n    '''\n    if len(a)==0:\n        return False\n    for i in xrange(len(a)):\n        if x==a[i]:\n            return True\n        elif x<a[i]:\n            break\n    return False\ndef find_x_in_sorted_linear_search_iterative(a,x):\n    '''\n    Write a function that implements a linear search in a sorted array.\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i + 1\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_left(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0 or a[-1] <= x:\n        return len(a)\n    # find insertion point by binary search\n    pos = bisect.bisect_left(a, x)\n    if pos == len(a) or a[pos] > x:\n        return pos\n    else:\n        return pos + 1\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    ind = bisect.bisect_right(a, x)\n    if ind == 0:\n        return 0\n    if a[ind-1] == x:\n        return ind\n    if a[ind] < x:\n        return ind\n    if a[ind-1] > x:\n        return ind-1\n    else:\n        raise ValueError(\"the value is already present in the list\")\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect(a, x)\n    if i == len(a):\n        a.append(x)\n    else:\n        if a[i] == x:\n            return i\n        if a[i] > x:\n            a.insert(i, x)\n        else:\n            a.insert(i+1, x)\n    return i\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        a.append(x)\n    else:\n        if a[i] == x:\n            return i\n        if a[i] > x:\n            a.insert(i, x)\n        else:\n            a.insert(i+1, x)\n    return i\ndef right_insertion_bisect(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect(a, x)\n    if i == len(a):\n        a.append(x)\n    else:\n        if a[i] == x:\n            return i\n        if a[i] > x:\n            a.insert(i, x)\n        else:\n            a.insert(i+1, x)\n    return i\ndef left_insertion_bisect(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        a.append(x)\n    else:\n        if a[i] == x:\n            return i\n        if a[i] > x:\n            a.insert(i, x)\n        else:\n            a.insert(i+1, x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left_idx = bisect.bisect_left(a, x)\n    if left_idx == len(a):\n        return len(a)\n    if a[left_idx] == x:\n        return left_idx\n    else:\n        return left_idx + 1\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        a.append(x)\n    else:\n        if a[i] == x:\n            return i\n        else:\n            a.insert(i, x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0:\n        return 0\n    i = bisect.bisect_right(a,x)\n    if a[i-1]!= x:\n        return i\n    else:\n        return i-1\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a)==0:\n        return 0\n    if a[-1]>=x:\n        return len(a)\n    l=0\n    r=len(a)\n    while l<r:\n        mid=(l+r)/2\n        if x<a[mid]:\n            r=mid\n        else:\n            l=mid+1\n    return l\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    if len(a)==0:\n        return 0\n    if a[0]>=x:\n        return 0\n    l=0\n    r=len(a)\n    while l<r:\n        mid=(l+r)/2\n        if x<a[mid]:\n            r=mid\n        else:\n            l=mid+1\n    return l\ndef binary_search(a, x):\n    '''\n    Given a sorted array of numbers, and a number x, the function will find the first index at which x occurs in the array.\n    '''\n    if len(a)==0:\n        return -1\n    l=0\n    r=len(a)-1\n    while l<r:\n        mid=(l+r)/2\n        if a[mid]==x:\n            return mid\n        elif a[mid]<x:\n            l=mid+1\n        else:\n            r=mid-1\n    if a[l]==x:\n        return l\n    return -1\ndef binary_search_rec(a, x):\n    '''\n    Given a sorted array of numbers, and a number x, the function will find the first index at which x occurs in the array.\n    '''\n    if len(a)==0:\n        return -1\n    l=0\n    r=len(a)-1\n    while l<r:\n        mid=(l+r)/2\n        if a[mid]==x:\n            return mid\n        elif a[mid]<x:\n            l=mid+1\n        else:\n            r=mid-1\n    if a[l]==x:\n        return l\n    return -1\ndef count_of_zeros(a):\n    '''\n    Given a sorted array of integers, count the number of zeros present in the array.\n    '''\n    if len(a)==0:\n        return 0\n    count=0\n    for i in range(len(a)):\n        if a[i]==0:\n            count+=1\n        else:\n            break\n    return count\ndef next_greater_element(a, x):\n    '''\n    Given a sorted array of integers, find the element in the array that is next to the given number x in the sorted array.\n    '''\n    if len(a)==0:\n        return -1\n    for i in range(len(a)):\n        if a[i]==x:\n            return a[i+1]\n        if a[i]>x:\n            return a[i]\n    return -1\ndef next_greater_element_rec(a, x):\n    '''\n    Given a sorted array of integers, find the element in the array that is next to the given number x in the sorted array.\n    '''\n    if len(a)==0:\n        return -1\n    if len(a)==1:\n        return -1\n    if a[-1]>x:\n        return -1\n    l=0\n    r=len(a)-1\n    while l<r:\n        mid=(l+r)/2\n        if a[mid]>x:\n            r=mid\n        else:\n            l=mid+1\n    return a[l]\ndef next_greater_element_rec2(a, x, f):\n    '''\n    Given a sorted array of integers, find the element in the array that is next to the given number x in the sorted array.\n    '''\n    if len(a)==0:\n        return -1\n    if len(a)==1:\n        return -1\n    if a[-1]>x:\n        return -1\n    l=0\n    r=len(a)-1\n    while l<r:\n        mid=(l+r)/2\n        if a[mid]>x:\n            r=mid\n        else:\n            l=mid+1\n    if l==len(a)-1:\n        return f[a[l]]\n    else:\n        return a[l]\ndef next_greater_element_rec3(a, x, f):\n    '''\n    Given a sorted array of integers, find the element in the array that is next to the given number x in the sorted array.\n    '''\n    if len(a)==0:\n        return -1\n    if len(a)==1:\n        return -1\n    if a[-1]>x:\n        return -1\n    l=0\n    r=len(a)-1\n    while l<r:\n        mid=(l+r)/2\n        if a[mid]>x:\n            r=mid\n        else:\n            l=mid+1\n    if l==len(a)-1:\n        return f[a[l]]\n    else:\n        return a[l]\ndef next_greater_element_rec4(a, x, f):\n    '''\n    Given a sorted array of integers, find the element in the array that is next to the given number x in the sorted array.\n    '''\n    if len(a)==0:\n        return -1\n    if len(a)==1:\n        return -1\n    if a[-1]>x:\n        return -1\n    l=0\n    r=len(a)-1\n    while l<r:\n        mid=(l+r)/2\n        if a[mid]>x:\n            r=mid\n        else:\n            l=mid+1\n    if l==len(a)-1:\n        return f[a[l]]\n    else:\n        return a[l]\ndef next_greater_element_rec5(a, x, f):\n    '''\n    Given a sorted array of integers, find the element in the array that is next to the given number x in the sorted array.\n    '''\n    if len(a)==0:\n        return -1\n    if len(a)==1:\n        return -1\n    if a[-1]>x:\n        return -1\n    l=0\n    r=len(a)-1\n    while l<r:\n        mid=(l+r)/2\n        if a[mid]>x:\n            r=mid\n        else:\n            l=mid+1\n    if l==len(a)-1:\n        return f[a[l]]\n    else:\n        return a[l]\ndef max_product(a):\n    '''\n    Given an array of integers, return the maximum product of three elements in the array.\n    '''\n    if len(a)==0:\n        return 0\n    prod=a[0]*a[1]*a[len(a)-1]\n    if len(a)==1:\n        return a[0]\n    if len(a)==2:\n        return max(a[0]*a[1], a[1]*a[0])\n    return max(prod, a[0]*a[1]*a[len(a)-1], a[len(a)-1]*a[len(a)-2]*a[len(a)-3])\ndef max_product_rec(a):\n    '''\n    Given an array of integers, return the maximum product of three elements in the array.\n    '''\n    if len(a)==0:\n        return 0\n    if len(a)==1:\n        return a[0]\n    if len(a)==2:\n        return max(a[0]*a[1], a[1]*a[0])\n    return max(max_product_rec(a[0:len(a)-2]), a[-1]*a[len(a)-2]*a[len(a)-3])\ndef length_of_longest_substring(a):\n    '''\n    Given a string, find the length of the longest substring without repeating characters.\n    '''"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    p = re.compile(r'a.*?b{3}',re.I)\n    if p.search(text):\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r\"ab{3}\", text)\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    m = re.match(r'a(.*)b{3}', text)\n    if m:\n        return m.group(1)\n    else:\n        return None\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'.*[ab]{3}.*')\n    if re.match(pattern, text):\n        print 'Match!'\n    else:\n        print 'No match'\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'.*[ab]{3}.*')\n    if re.match(pattern, text):\n        print 'Match!'\n    else:\n        print 'No match'\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'.*[ab]{3}.*')\n    if re.match(pattern, text):\n        print 'Match!'\n    else:\n        print 'No match'\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'.*[ab]{3}.*')\n    if re.match(pattern, text):\n        print 'Match!'\n    else:\n        print 'No match'\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'.*[ab]{3}.*')\n    if re.match(pattern, text):\n        print 'Match!'\n    else:\n        print 'No match'\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'.*[ab]{3}.*')\n    if re.match(pattern, text):\n        print 'Match!'\n    else:\n        print 'No match'\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'.*[ab]{3}.*')\n    if re.match(pattern, text):\n        print 'Match!'\n    else:\n        print 'No match'\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'.*[ab]{3}.*')\n    if re.match(pattern, text):\n        print 'Match!'\n    else:\n        print 'No match'\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'.*[ab]{3}.*')\n    if re.match(pattern, text):\n        print 'Match!'\n    else:\n        print 'No match'\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'.*[ab]{3}.*')\n    if re.match(pattern, text):\n        print 'Match!'\n    else:\n        print 'No match'\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'.*[ab]{3}.*')\n    if re.match(pattern, text):\n        print 'Match!'\n    else:\n        print 'No match'\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'.*[ab]{3}.*')\n    if re.match(pattern, text):\n        print 'Match!'\n    else:\n        print 'No match'\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'.*[ab]{3}.*')\n    if re.match(pattern, text):\n        print 'Match!'\n    else:\n        print 'No match'\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'.*[ab]{3}.*')\n    if re.match(pattern, text):\n        print 'Match!'\n    else:\n        print 'No match'\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'.*[ab]{3}.*')\n    if re.match(pattern, text):\n        print 'Match!'\n    else:\n        print 'No match'\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'.*[ab]{3}.*')\n    if re.match(pattern, text):\n        print 'Match!'\n    else:\n        print 'No match'\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'.*[ab]{3}.*')\n    if re.match(pattern, text):\n        print 'Match!'\n    else:\n        print 'No match'\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'.*[ab]{3}.*')\n    if re.match(pattern, text):\n        print 'Match!'\n    else:\n        print 'No match'\ndef text_match_twentyone(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'.*[ab]{3}.*')\n    if re.match(pattern, text):\n        print 'Match!'\n    else:\n        print 'No match'\ndef text_match_twentytwo(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'.*[ab]{3}.*')\n    if re.match(pattern, text):\n        print 'Match!'\n    else:\n        print 'No match'\ndef text_match_twentythree(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'.*[ab]{3}.*')\n    if re.match(pattern, text):\n        print 'Match!'\n    else:\n        print 'No match'\ndef text_match_twentyfour(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'.*[ab]{3}.*')\n    if re.match(pattern, text):\n        print 'Match!'\n    else:\n        print 'No match'\ndef text_match_twentyfive(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'.*[ab]{3}.*')\n    if re.match(pattern, text):\n        print 'Match!'\n    else:\n        print 'No match'\ndef text_match_twentysix(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'.*[ab]{3}.*')\n    if re.match(pattern, tex"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3}',text)\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"(.)a{3}(.)b\")\n    return pattern.match(text)\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_zero_or_more(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    pattern = re.compile(r'ab*')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_one_or_more_no_greedy(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b' not greedy.\n    '''\n    pattern = re.compile(r'ab{1,}')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_zero_or_one(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or one 'b'.\n    '''\n    pattern = re.compile(r'ab{0,1}')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_at_end(text):\n    '''\n    Write a function that matches a string that has an 'a' at the end.\n    '''\n    pattern = re.compile(r'^a$')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_not_at_end(text):\n    '''\n    Write a function that matches a string that has an 'a' at the end.\n    '''\n    pattern = re.compile(r'a$')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_ending_with(text):\n    '''\n    Write a function that matches a string that has an 'a' at the end.\n    '''\n    pattern = re.compile(r'a$')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_any_ending_with(text):\n    '''\n    Write a function that matches a string that has any 'a' at the end.\n    '''\n    pattern = re.compile(r'a$')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_zero_or_more_ending_with(text):\n    '''\n    Write a function that matches a string that has any 'a' at the end.\n    '''\n    pattern = re.compile(r'a*$')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_one_or_more_ending_with(text):\n    '''\n    Write a function that matches a string that has any 'a' at the end.\n    '''\n    pattern = re.compile(r'a*$')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_zero_or_one_ending_with(text):\n    '''\n    Write a function that matches a string that has any 'a' at the end.\n    '''\n    pattern = re.compile(r'a{1}$')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_zero_or_more_ending_with(text):\n    '''\n    Write a function that matches a string that has any 'a' at the end.\n    '''\n    pattern = re.compile(r'a{1,}$')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_at_beginning(text):\n    '''\n    Write a function that matches a string that has an 'a' at the beginning.\n    '''\n    pattern = re.compile(r'^a')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_not_at_beginning(text):\n    '''\n    Write a function that matches a string that has an 'a' at the beginning.\n    '''\n    pattern = re.compile(r'^a')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_any_ending_with(text):\n    '''\n    Write a function that matches a string that has any 'a' at the beginning.\n    '''\n    pattern = re.compile(r'a$')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_zero_or_more_ending_with(text):\n    '''\n    Write a function that matches a string that has any 'a' at the beginning.\n    '''\n    pattern = re.compile(r'a*$')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_one_or_more_ending_with(text):\n    '''\n    Write a function that matches a string that has any 'a' at the beginning.\n    '''\n    pattern = re.compile(r'a*$')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_zero_or_one_ending_with(text):\n    '''\n    Write a function that matches a string that has any 'a' at the beginning.\n    '''\n    pattern = re.compile(r'a{1}$')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_one_or_more_ending_with(text):\n    '''\n    Write a function that matches a string that has any 'a' at the beginning.\n    '''\n    pattern = re.compile(r'a{1,}$')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_ending_with_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b'.\n    '''\n    pattern = re.compile(r'a+b')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_ending_with_two_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by two or more 'b'.\n    '''\n    pattern = re.compile(r'a{2,}b')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_ending_with_three_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by three or more 'b'.\n    '''\n    pattern = re.compile(r'a{3,}b')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_starting_with(text):\n    '''\n    Write a function that matches a string that has an 'a' at the beginning.\n    '''\n    pattern = re.compile(r'^a')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_ending_with_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b'.\n    '''\n    pattern = re.compile(r'a+b')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef text_match_ending_with_two_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followe"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search('ab{3}', text)\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.search(r'ab{3}', text)\n    return match\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.search(r'ab{3}', text)\n    if match:\n        print(match.group())\n    else:\n        print('no match')\ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print(match.group())\n    else:\n        print('no match')\ndef text_match_zero_or_more(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    match = re.search(r'ab*', text)\n    if match:\n        print(match.group())\n    else:\n        print('no match')\ndef text_match_one_or_more_1(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    match = re.search(r'ab{1,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('no match')\ndef text_match_zero_or_more_1(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    match = re.search(r'ab{0,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('no match')\ndef text_match_one_or_more_2(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    match = re.search(r'ab+', text)\n    if match:\n        print(match.group())\n    else:\n        print('no match')\ndef text_match_zero_or_more_2(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    match = re.search(r'ab{0,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('no match')\ndef text_match_one_or_more_3(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    match = re.search(r'ab{1,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('no match')\ndef text_match_zero_or_more_3(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    match = re.search(r'ab{0,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('no match')\ndef text_match_one_or_more_4(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    match = re.search(r'ab{1,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('no match')\ndef text_match_zero_or_more_4(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    match = re.search(r'ab{0,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('no match')\ndef text_match_one_or_more_5(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    match = re.search(r'ab{1,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('no match')\ndef text_match_zero_or_more_5(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    match = re.search(r'ab{0,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('no match')\ndef text_match_one_or_more_6(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    match = re.search(r'ab{1,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('no match')\ndef text_match_zero_or_more_6(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    match = re.search(r'ab{0,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('no match')\ndef text_match_one_or_more_7(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    match = re.search(r'ab{1,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('no match')\ndef text_match_zero_or_more_7(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    match = re.search(r'ab{0,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('no match')\ndef text_match_one_or_more_8(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    match = re.search(r'ab{1,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('no match')\ndef text_match_zero_or_more_8(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    match = re.search(r'ab{0,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('no match')\ndef text_match_one_or_more_9(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    match = re.search(r'ab{1,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('no match')\ndef text_match_zero_or_more_9(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    match = re.search(r'ab{0,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('no match')\ndef text_match_one_or_more_10(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    match = re.search(r'ab{1,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('no match')\ndef text_match_zero_or_more_10(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more 'b'.\n    '''\n    match = re.search(r'ab{0,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('no match')\ndef text_match_one_or_more_11(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more 'b'.\n    '''\n    match = re.search(r'ab{1,}', text)\n    if matc"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = test_list + [test_str]\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if len(test_str) == 0:\n        return []\n    else:\n        first = test_str[0]\n        if first == ')':\n            return new_tuple(test_list, test_str[1:])\n        elif first == '(':\n            return new_tuple(test_list, test_str[1:])\n        else:\n            return [first] + new_tuple(test_list, test_str[1:])\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple = [test_str, test_list]\n    return tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + [test_str])\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + [test_str])\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list), tuple(test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    for letter in test_str:\n        test_list += letter\n    return tuple(test_list)\n    \n    \ndef new_tuple_with_list(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    for letter in test_str:\n        test_list.append(letter)\n    return tuple(test_list)\n    \n    \ndef new_tuple_with_list_and_range(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    for i in range(0, len(test_str)):\n        test_list.append(test_str[i])\n    return tuple(test_list)\n    \n    \ndef new_tuple_with_list_and_range_and_split(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    for i in range(0, len(test_str)):\n        test_list += test_str[i]\n    return tuple(test_list)\n    \n    \ndef new_tuple_with_list_and_split(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    for letter in test_str:\n        test_list.append(letter)\n    return tuple(test_list)\n    \n    \ndef new_tuple_with_list_and_string(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    for letter in test_str:\n        test_list += letter\n    return tuple(test_list)\n    \n    \ndef new_tuple_with_list_and_string_and_split(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    for i in range(0, len(test_str)):\n        test_list.append(test_str[i])\n    return tuple(test_list)\n    \n    \ndef new_tuple_with_list_and_string_and_split_and_join(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    for i in range(0, len(test_str)):\n        test_list += test_str[i]\n    return ''.join(test_list)\n    \n    \ndef new_tuple_with_list_and_string_and_split_and_join_with_spaces(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    for i in range(0, len(test_str)):\n        test_list += test_str[i]\n    return''.join(test_list)\n    \n    \ndef new_tuple_with_list_and_string_and_split_and_join_with_spaces_and_reverse(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    for i in range(0, len(test_str)):\n        test_list += test_str[i]\n    return''.join(reversed(test_list))\n    \n    \ndef new_tuple_with_list_and_string_and_split_and_join_with_spaces_and_reverse_and_join_with_spaces(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    for i in range(0, len(test_str)):\n        test_list += test_str[i]\n    return''.join(reversed(test_list))\n    \n    \ndef new_tuple_with_list_and_string_and_reverse(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    for letter in test_str:\n        test_list.append(letter)\n    return tuple(reversed(test_list))\n    \n    \ndef new_tuple_with_list_and_string_and_reverse_and_join(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    for letter in test_str:\n        test_list.append(letter)\n    return ''.join(reversed(test_list))\n    \n    \ndef new_tuple_with_list_and_string_and_reverse_and_join_with_spaces(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    for letter in test_str:\n        test_list.append(letter)\n    return''.join(reversed(test_list))\n    \n    \ndef new_tuple_with_list_and_string_and_reverse_and_join_with_spaces_and_reverse(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    for letter in test_str:\n        test_list.append(letter)\n    return''.join(reversed(test_list))\n    \n    \ndef new_tuple_with_list_and_string_and_reverse_and_join_with_spaces_and_reverse_and_join(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    for letter in test_str:\n        test_list.append(letter)\n    return''.join(reversed(test_list))\n    \n    \ndef new_tuple_with_list_and_string_and_reverse_and_join_with_spaces_and_reverse_and_join_with_spaces(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    for letter in test_str:\n        test_list.append(letter)\n    return''.join(reversed(test_list))\n    \n    \ndef new_tuple_with_list_and_string_and_reverse_and_join_with_spaces_and_reverse_and_join_with_spaces_and_reverse(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    for letter in test_str:\n        test_list.append(letter)\n    return''.join(reversed(test_list))\n    \n    \ndef new_tuple_with_list_and_string_and_reverse_and_join_with_spaces_and_reverse_and_join_with_spaces_and_reverse_and_join(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    for letter in test_str:\n        test_list.append(letter)\n    return''.join(reversed(test_list))\n    \n    \ndef new_tuple_with_list_and_string_and_reverse_and_join_with_spaces_and_reverse_and_join_with_spaces_and_reverse_and_join_with_spaces(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    for letter in test_str:\n        test_list.append(letter)\n    return''.join(reversed(test_list))\n    \n    \ndef new_tuple_with_list_and_string_and_reverse_and_join_with_spaces_and_reverse_and_join_with_spaces_and_reverse_and_join_with_spaces_and_reverse(test_list, test_str):\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    for s in test_str:\n        if s in test_list:\n            return s\n    return None\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + tuple(test_str)\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in xrange(0,len(nums),2):\n        if not nums[i] % 2:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    flag = True\n    for i in range(0, len(nums), 2):\n        if (nums[i] % 2!= 0):\n            flag = False\n            break\n    return flag\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if nums == []:\n        return True\n    else:\n        return (nums[0] % 2 == 0 and even_position(nums[1:])) or (nums[0] % 2!= 0 and not even_position(nums[1:]))\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i]%2!=0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(num%2==0 for num in nums)\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if not nums[i]%2==0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums) == 0:\n        return False\n    elif len(nums) == 1:\n        return True\n    elif len(nums) % 2 == 0:\n        for i in range(len(nums)):\n            if nums[i] % 2!= 0:\n                return False\n        return True\n    else:\n        for i in range(len(nums)):\n            if nums[i] % 2!= 0:\n                return False\n        return True\n    \ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums) == 0:\n        return False\n    elif len(nums) == 1:\n        return True\n    elif len(nums) % 2 == 1:\n        for i in range(len(nums)):\n            if nums[i] % 2!= 1:\n                return False\n        return True\n    else:\n        for i in range(len(nums)):\n            if nums[i] % 2!= 1:\n                return False\n        return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for num in nums:\n        if num % 2 == 0:\n            if nums.index(num, count) % 2 == 0:\n                count += 1\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i]%2!=0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(nums[i] % 2 == 0 for i in range(0, len(nums), 2))\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    to_remove = []\n    for i in test_tup:\n        if isinstance(i, tuple):\n            to_remove.append(i)\n    return tuple(set(test_tup)-set(to_remove))\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for i in range(len(test_tup)):\n        if isinstance(test_tup[i], tuple):\n            test_tup[i] = remove_nested(test_tup[i])\n    return tuple(test_tup)\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    lst = []\n    for tup in test_tup:\n        if isinstance(tup, tuple):\n            lst.extend(remove_nested(tup))\n        else:\n            lst.append(tup)\n    return tuple(lst)\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # base case\n    if len(test_tup) == 1:\n        return test_tup[0]\n    # divide and conquer\n    else:\n        return (test_tup[0], remove_nested(test_tup[1:]))\n    \ndef find_max(test_tup):\n    '''\n    Write a function that finds the maximum value in a tuple.\n    '''\n    # base case\n    if len(test_tup) == 1:\n        return test_tup[0]\n    # divide and conquer\n    else:\n        return max(test_tup[0], find_max(test_tup[1:]))\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if len(test_tup) == 2:\n        return test_tup[1]\n    else:\n        return test_tup[1:len(test_tup)-1]\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup += (remove_nested(item),)\n        else:\n            new_tup += (item,)\n    return new_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for sub_tuple in test_tup:\n        if isinstance(sub_tuple, tuple):\n            new_list.append(remove_nested(sub_tuple))\n        else:\n            new_list.append(sub_tuple)\n    return tuple(new_list)\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return (remove_nested(tup) for tup in test_tup)\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for el in test_tup:\n        if isinstance(el, tuple):\n            remove_nested(el)\n        else:\n            return test_tup\n    return tuple([el for el in test_tup if not isinstance(el, tuple)])\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        for i in test_tup:\n            remove_nested(i)\n    else:\n        return\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if input_list==[]:\n        return 0\n    else:\n        return 1+count_list(input_list[1:])\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return sum(isinstance(input_list, list) for input_list in input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) is list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for item in input_list:\n        if type(item) is list:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if input_list == [[]]:\n        return 0\n    return 1 + count_list(input_list[1:])\n    \n    "
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if type(input_list) is not list:\n        raise ValueError('Input is not a list')\n    elif len(input_list) == 0:\n        return 0\n    else:\n        return 1 + count_list(input_list[0])\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    num_list = len(input_list)\n    return num_list\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0 \n    for input_list in input_list:\n        count = count + 1\n    return count\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    left,right = 0,n-1\n    while left <= right:\n        mid = (left+right)//2\n        if arr[mid] == x and (mid == n-1 or arr[mid+1] < x):\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l=len(arr)-1\n    for i in range(len(arr)-1):\n        if arr[i]<x and arr[i+1]>=x:\n            return l\n        l=l-1\n    return l\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    def binary_search(arr,x,first,last):\n        mid = (first+last)/2\n        if first>last:\n            return -1\n        if arr[mid] == x:\n            return mid\n        if arr[mid] > x:\n            return binary_search(arr,x,first,mid-1)\n        else:\n            return binary_search(arr,x,mid+1,last)\n    return binary_search(arr,x,0,len(arr)-1)\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low,high = 0,len(arr)-1\n    while low<=high:\n        mid = (low+high)/2\n        if arr[mid]>=x:\n            high = mid-1\n        else:\n            low = mid+1\n    return high\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return -1\n    low = 0\n    high = n-1\n    mid = int((low+high)/2)\n    while low <= high:\n        mid = int((low+high)/2)\n        if mid == n-1:\n            if arr[mid] == x:\n                return mid\n            else:\n                return -1\n        elif arr[mid] >= x:\n            if mid == 0 or arr[mid-1]!= x:\n                return mid\n            else:\n                high = mid-1\n        elif arr[mid] < x:\n            if mid == n-1 or arr[mid+1]!= x:\n                return mid+1\n            else:\n                low = mid+1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr==[]:\n        return -1\n    elif len(arr)==1:\n        if arr[0]==x:\n            return 0\n        else:\n            return -1\n    elif arr[0]==x:\n        return 0\n    else:\n        return last(arr[1:],x)\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return arr.index(x) if x in arr else -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return len(arr)-bisect_right(arr, x)\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr)-1\n    last = 0\n    while low<=high:\n        mid = (low+high)/2\n        if arr[mid]<x:\n            low = mid + 1\n        elif arr[mid]>x:\n            high = mid - 1\n        else:\n            last = mid\n            break\n    return last\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return len(arr)-arr[::-1].index(x)-1\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"^[ab]*$\"\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab+')\n    res = pattern.match(text)\n    if res:\n        print('The text matches the pattern')\n    else:\n        print('The text does not match the pattern')\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'(^|\\s)(a.*b)$')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r'^(.*)a.*b$', text)\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    start_text = text[0]\n    if start_text == 'a':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pat = re.compile(r'a.*b$')\n    print(pat.match(text))\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    p = re.compile(r'^a(.+)?b$')\n    return bool(p.match(text))\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'ab'\n    return re.findall(pattern,text)\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    if len(dict) == 0:\n        return 0\n    else:\n        return dict[list(dict.keys())[0]]\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for k, v in dict.iteritems():\n        total += v\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict:\n        total += dict[item]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_items = 0\n    for key, value in dict.items():\n        sum_of_items += value\n    return sum_of_items\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for k, v in dict.items():\n        total = total + v\n    return total\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if l%2==0 or r%2==0:\n        return 0\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n == 0:\n        return 0\n    elif n % 2 == 1:\n        return n + sum_odd(n-1)\n    else:\n        return sum_odd(n-1)\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    while l <= r:\n        if l%2 == 1:\n            s += l\n        l += 1\n    return s\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n<=1:\n        return 0\n    if n%2==1:\n        return n+sum_odd(n-1)\n    else:\n        return sum_odd(n-1)\n    \n    \ndef fibonacci(n):\n    '''\n    Write a python function to compute the nth fibonacci number.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s=0\n    if(n<1):\n        return 0\n    else:\n        if(n%2==0):\n            return sum_odd(n-1)+sum_odd(n-2)\n        else:\n            return sum_odd(n-1)\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n > 1:\n        return n + sum_odd(n - 2)\n    else:\n        return n\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(n):\n        if i % 2 == 1:\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    result = 0\n    l,r = map(int,input().strip().split())\n    for i in range(l,r+1):\n        if i%2!=0:\n            result = result+i\n    return result\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(range(l,r+1,2))\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    n = int(n)\n    if n < 1:\n        return None\n    return (n*(n+1))/2\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for element in arr:\n        total += element\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for x in arr:\n        total += x\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return reduce(lambda x,y:x+y, arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total = total + i\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if not arr:\n        return 0\n    return arr[0] + _sum(arr[1:])\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    print \"left rotate:\",n,d\n    n = bin(n)[2:]\n    if len(n) < 32:\n        n = ('0'*(32-len(n))) + n\n    n = n[d:] + n[:d]\n    print n\n    return int(n,2)\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n<<d)|(n>>(32-d))\n    \ndef left_rotate_n(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n<<d)&0xFFFFFFFF)|((n<<(32-d))&0xFFFFFFFF)\n    \ndef right_rotate(n,d):   \n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n>>d)|(n<<(32-d))\n    \ndef right_rotate_n(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n>>d)&0xFFFFFFFF)|((n<<(32-d))&0xFFFFFFFF)\n    \ndef sbox(val):\n    '''\n    Write a function to that return the sbox for a given value.\n    '''\n    if val>=0 and val<=15:\n        return sbox_1[val]\n    elif val>=16 and val<=31:\n        return sbox_2[val-16]\n    else:\n        return None\n        \ndef sbox_inv(val):\n    '''\n    Write a function to that return the inverse sbox for a given value.\n    '''\n    if val>=0 and val<=15:\n        return inverse_sbox_1[val]\n    elif val>=16 and val<=31:\n        return inverse_sbox_2[val-16]\n    else:\n        return None\n        \ndef rotate_row(val,x):\n    '''\n    Write a function to that rotate the bit of a given value in a given row.\n    '''\n    return ((val<<x)&0xFFFFFFFF)|((val>>(32-x))&0xFFFFFFFF)\n    \ndef rotate_row_n(val,x):\n    '''\n    Write a function to that rotate the bit of a given value in a given row.\n    '''\n    return ((val<<x)&0xFFFFFFFF)|((val>>(32-x))&0xFFFFFFFF)\n    \ndef rotate_col(val,x):\n    '''\n    Write a function to that rotate the bit of a given value in a given column.\n    '''\n    return ((val<<x)&0xFFFFFFFF)|((val>>(32-x))&0xFFFFFFFF)\n    \ndef rotate_col_n(val,x):\n    '''\n    Write a function to that rotate the bit of a given value in a given column.\n    '''\n    return ((val<<x)&0xFFFFFFFF)|((val>>(32-x))&0xFFFFFFFF)\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d)|(n >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    assert n>=0 and n<=2**32-1\n    return (n<<d)|(n>>(32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    mask = mask >> d\n    mask = mask << (32 - d)\n    n = n ^ mask\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n<<d)|(n>>(32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n<<d)|(n>>(32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    s = (n << d) | (n >> (32-d)) \n    return s\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # text = text.replace(' ','')\n    # text = text.replace('  ','')\n    text = re.sub(r'\\s+', '', text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # re.sub(pattern,repl,string)\n    # re.sub(pattern,repl,string,count=0)\n    # re.sub(pattern,repl,string,count=0,flags=0)\n    # re.sub(pattern,repl,string,count=0,flags=0,re.DOTALL)\n    # re.sub(pattern,repl,string,count=0,flags=0,re.DOTALL,re.VERBOSE)\n    # re.sub(pattern,repl,string,count=0,flags=0,re.DOTALL,re.VERBOSE,re.I)\n    # re.sub(pattern,repl,string,count=0,flags=0,re.DOTALL,re.VERBOSE,re.I,re.MULTILINE)\n    # re.sub(pattern,repl,string,count=0,flags=0,re.DOTALL,re.VERBOSE,re.I,re.MULTILINE,re.S)\n    # re.sub(pattern,repl,string,count=0,flags=0,re.DOTALL,re.VERBOSE,re.I,re.MULTILINE,re.S,re.IGNORECASE)\n    # re.sub(pattern,repl,string,count=0,flags=0,re.DOTALL,re.VERBOSE,re.I,re.MULTILINE,re.S,re.IGNORECASE,re.MULTILINE)\n    # re.sub(pattern,repl,string,count=0,flags=0,re.DOTALL,re.VERBOSE,re.I,re.MULTILINE,re.S,re.IGNORECASE,re.MULTILINE,re.VERBOSE)\n    # re.sub(pattern,repl,string,count=0,flags=0,re.DOTALL,re.VERBOSE,re.I,re.MULTILINE,re.S,re.IGNORECASE,re.MULTILINE,re.VERBOSE,re.I)\n    return re.sub(r'\\s+','',text)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return ''.join(text.split())\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('[\\s]+','',text)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub('\\s+', '', text)\n    return text\ndef remove_empty_strings(text):\n    '''\n    Write a function to remove all empty strings from a list of strings.\n    '''\n    text = [s for s in text if s]\n    return text\ndef remove_all_punctuations(text):\n    '''\n    Write a function to remove all punctuations from a string.\n    '''\n    text = re.sub('[^\\w\\s]', '', text)\n    return text\ndef replace_all_empty_strings(text, replacement_string):\n    '''\n    Write a function to replace all empty strings in a list of strings with a given replacement string.\n    '''\n    text = [replacement_string if s=='' else s for s in text]\n    return text\ndef replace_all_punctuations(text, replacement_string):\n    '''\n    Write a function to replace all punctuations in a string with a given replacement string.\n    '''\n    text = re.sub('[^\\w\\s]', replacement_string, text)\n    return text\ndef get_lines(text):\n    '''\n    Write a function to return a list of lines in a text file.\n    '''\n    return text.split('\\n')\ndef get_line_num(text, line):\n    '''\n    Write a function to return the line number of a given line in a text file.\n    '''\n    return text.split('\\n').index(line)+1\ndef get_line(text, line_num):\n    '''\n    Write a function to return a line of a given text file.\n    '''\n    return text.split('\\n')[line_num-1]\ndef get_line_split(text, line_num):\n    '''\n    Write a function to return a list of strings in a line of a text file.\n    '''\n    return text.split('\\n')[line_num-1].split(' ')\ndef get_line_as_list(text, line_num):\n    '''\n    Write a function to return a list of words in a line of a text file.\n    '''\n    return text.split('\\n')[line_num-1].split(' ')\ndef get_line_as_string(text, line_num):\n    '''\n    Write a function to return a string of words in a line of a text file.\n    '''\n    return''.join(text.split('\\n')[line_num-1].split(' '))\ndef get_last_line_as_list(text):\n    '''\n    Write a function to return a list of words in the last line of a text file.\n    '''\n    return text.split('\\n')[-1].split(' ')\ndef get_last_line_as_string(text):\n    '''\n    Write a function to return a string of words in the last line of a text file.\n    '''\n    return''.join(text.split('\\n')[-1].split(' '))\ndef get_last_line_num(text):\n    '''\n    Write a function to return the line number of the last line of a text file.\n    '''\n    return len(text.split('\\n'))\ndef get_first_line_num(text):\n    '''\n    Write a function to return the line number of the first line of a text file.\n    '''\n    return 1\ndef get_first_line(text):\n    '''\n    Write a function to return the first line of a text file.\n    '''\n    return text.split('\\n')[0]\ndef count_non_alphanumeric_characters(text):\n    '''\n    Write a function to return the number of non-alphanumeric characters in a string.\n    '''\n    return len(re.sub('[\\w\\d]', '', text))\ndef count_alphanumeric_characters(text):\n    '''\n    Write a function to return the number of alphanumeric characters in a string.\n    '''\n    return len(re.sub('[^\\w\\d]', '', text))\ndef count_string_length(text):\n    '''\n    Write a function to return the length of a string.\n    '''\n    return len(text)\ndef count_words(text):\n    '''\n    Write a function to return the number of words in a string.\n    '''\n    return len(text.split(' '))\ndef count_sentences(text):\n    '''\n    Write a function to return the number of sentences in a string.\n    '''\n    return len(text.split('.'))\ndef count_capital_words(text):\n    '''\n    Write a function to return the number of capital words in a string.\n    '''\n    return len([w for w in text.split(' ') if w.isupper()])\ndef count_uppercase_words(text):\n    '''\n    Write a function to return the number of uppercase words in a string.\n    '''\n    return len([w for w in text.split(' ') if w.isupper()])\ndef count_lowercase_words(text):\n    '''\n    Write a function to return the number of lowercase words in a string.\n    '''\n    return len([w for w in text.split(' ') if w.islower()])\ndef count_titlecase_words(text):\n    '''\n    Write a function to return the number of titlecase words in a string.\n    '''\n    return len([w for w in text.split(' ') if w.istitle()])\ndef count_digits(text):\n    '''\n    Write a function to return the number of digits in a string.\n    '''\n    return len([w for w in text.split(' ') if w.isdigit()])\ndef count_spaces(text):\n    '''\n    Write a function to return the number of spaces in a string.\n    '''\n    return len([w for w in text.split(' ') if w==' '])\ndef count_lines(text):\n    '''\n    Write a function to return the number of lines in a string.\n    '''\n    return len(text.split('\\n'))\ndef count_punctuations(text):\n    '''\n    Write a function to return the number of punctuations in a string.\n    '''\n    return len([w for w in text.split(' ') if w in string.punctuation])\ndef count_non_ascii_characters(text):\n    '''\n    Write a function to return the number of non-ascii characters in a string.\n    '''\n    return len([w for w in text.split(' ') if ord(w) > 127])\ndef count_unpaired_brackets(text):\n    '''\n    Write a function to return the number of unpaired brackets in a string.\n    '''\n    return len([w for w in text.split(' ') if w=='(' or w==')'])\ndef count_balanced_brackets(text):\n    '''\n    Write a function to return the number of balanced brackets in a string.\n    '''\n    return len([w for w in text.split(' ') if w=='{' or w=='}'])\ndef count_unpaired_d_brackets(text):\n    '''\n    Write a function to return the number of unpaired d brackets in a string.\n    '''\n    return len([w for w in text.split(' ') if w=='[' or w==']'])\ndef count_unpaired_h_brackets(text):\n    '''\n    Write a function to return the number of unpaired h brackets in a string.\n    '''\n    return len([w for w in text.split(' ') if w=='(' or w==')'])\ndef count_balanced_d_brackets(text):\n    '''\n    Write a function to return the number of balanced d brackets in a string.\n    '''\n    return len([w for w in text.split(' ') if w=='{' or w=='}'])\ndef count_balanced_h_brackets(text):\n    '''\n    Write a function to return the number of balanced h brackets in a string.\n    '''\n    return len([w for w in text.split(' ') if w=='("
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    no_space_text = ''\n    for char in text:\n        if char!='':\n            no_space_text += char\n    return no_space_text\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +',' ', text)\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        return 3\n    elif x==y or x==z or y==z:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(x,y,z)\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count = count+1\n    elif x == y or y == z or x == z:\n        count = count+1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert x == y == z\n    return True\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return (x==y) and (y==z)\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        return 3\n    elif x==y or y==z or x==z:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    if x == y or x == z or y == z:\n        return 2\n    return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return (x==y and x==z)\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    len_arr = len(arr)\n    if arr == sorted(arr):\n        return 0\n    for i in range(len_arr):\n        if arr[i] < arr[i+1]:\n            break\n    return i+1\n    \n    \nprint count_rotation([4,5,6,7,0,1,2])\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    if n == 0 or n == 1:\n        return 0\n    if arr[0] > arr[n-1]:\n        return 0\n    \n    start, end = 0, n-1\n    while start <= end:\n        mid = start + (end-start)//2\n        \n        if arr[mid] > arr[0]:\n            start = mid+1\n        else:\n            if arr[mid] < arr[end]:\n                end = mid\n    return end\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) == 1:\n        return 0\n    \n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            break\n    if i == n-2:\n        return 0\n    \n    count = 1\n    for j in range(i+1,n):\n        if arr[j] < arr[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    #find how many rotations are required for an array\n    rotations = 0\n    for i in range(len(arr)):\n        if arr[i] < arr[i-1]:\n            rotations += 1\n    return rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    c=0\n    for i in range(1,len(arr)):\n        if arr[i-1]>arr[i]:\n            c+=1\n    return c\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    def count_rotations(arr,n):\n        if n<=1:\n            return 0\n        for i in range(n):\n            if arr[i]>arr[i+1]:\n                return i+1\n        return n\n    def count_rotations_2(arr,n):\n        j = 0\n        for i in range(n):\n            if arr[i]<arr[i+1]:\n                j += 1\n        return j\n    n = len(arr)\n    return count_rotations(arr,n) if n>1 else 0\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n=len(arr)\n    for i in range(n):\n        if arr[(i+1)%n]<arr[i]:\n            return i\n    return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    for i in range(1,len(arr)):\n        if arr[i-1] > arr[i]:\n            return i\n    return 0\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 :\n        return True\n    if n == 1 or n == 2 :\n        return True\n    if n == 3 :\n        return False\n    if n % 2 == 0 :\n        return is_perfect_square(n / 2)\n    if n % 3 == 0 :\n        return is_perfect_square(n / 3)\n    if n % 5 == 0 :\n        return is_perfect_square(n / 5)\n    if (n ** (1 / 2)) % 1 == 0 :\n        return True\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n==0 or n==1 :\n        return True\n    if n<0:\n        return False\n    return (n**0.5)%1==0\n    \ndef square_root(n) :\n    '''\n    Write a function to compute the square root of a number. https://www.geeksforgeeks.org/program-to-compute-square-root-of-a-number-using-newton-raphson-method/\n    '''\n    x=n\n    y=0\n    while(True):\n        y=(x+(n/x))/2\n        if y==x:\n            break\n        x=y\n    return y\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n==1 :\n        return True\n    if n==0 :\n        return False\n    if n>0 :\n        if n%2 ==0 and is_perfect_square(n/2) :\n            return True\n        if n%2!=0 and is_perfect_square((n+1)/2) :\n            return True\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt = n**(1/2)\n    return sqrt*sqrt == n\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return (n == int(math.sqrt(n))**2)\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n <= 0) :\n        return False\n    low = 1\n    high = n\n    while (low <= high) :\n        mid = (low + high) // 2\n        if (mid * mid == n) :\n            return True\n        elif (mid * mid < n) :\n            low = mid + 1\n        else :\n            high = mid - 1\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return -1\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    else:\n        # 2 * x * x = n\n        # x * x = n / 2\n        # n / 2 = x * x\n        # n = x * x\n        # x * x = n / 2\n        # x = (n / 2) ** 0.5\n        return int((n / 2) ** 0.5)\n    \n    \ndef get_perfect_squares(n) :\n    '''\n    Write a function to get the first n perfect square numbers. http://www.geeksforgeeks.org/get-nth-perfect-square-number/\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        n -= 1\n        x = n / 2\n        perfect_squares = [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n        return perfect_squares[n]\n    \n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    \n    x = n/2\n    if (x*x == n) :\n        return True\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = int(math.sqrt(n))\n    return x * x == n\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt = n\n    if sqrt % 1 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    ans = 1\n    for i in arr:\n        ans = ans * i\n    if ans % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return len([i for i in arr if i%2==0]) == len(arr)\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    even_num = 1\n    for i in arr:\n        even_num *= i\n    return even_num%2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # if the sum of the elements is even or if the product of the elements is even\n    return sum(arr)%2 == 0 or prod(arr)%2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return reduce(lambda a, b: a*b, arr) % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for n in arr:\n        product *= n\n    return product % 2 == 0\n    \n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return False\n    product = 1\n    for i in arr:\n        product *= i\n    return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    arr.sort()\n    return all(arr[i]*arr[i+1]%2==0 for i in range(len(arr)-1))\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # a = [[1,2,3],[4,5,6],[7,8,9]]\n    # b = [1,2,3,4,5,6,7,8,9]\n    #       ^\n    #       0\n    #     / \\\n    #     1  2\n    #      |\n    #     3\n    #      \\\n    #      4\n    #       \\\n    #       5\n    #       |\n    #       6\n    #       |\n    #       7\n    #       |\n    #       8\n    #       |\n    #       9\n    #      /\n    #     10\n    #       |\n    #       11\n    #       |\n    #       12\n    #       |\n    #       13\n    #       |\n    #       14\n    #       |\n    #       15\n    #      /\n    #     16\n    #       |\n    #       17\n    #       |\n    #       18\n    #       |\n    #       19\n    #      /\n    #     20\n    #       |\n    #       21\n    #       |\n    #       22\n    #      /\n    #     23\n    #       |\n    #       24\n    #      /\n    #     25\n    #       |\n    #       26\n    #       |\n    #       27\n    #      /\n    #     28\n    #       |\n    #       29\n    #      /\n    #     30\n    #       |\n    #       31\n    #       |\n    #       32\n    #       |\n    #       33\n    #      /\n    #     34\n    #       |\n    #       35\n    #      /\n    #     36\n    #       |\n    #       37\n    #      /\n    #     38\n    #       |\n    #       39\n    #      /\n    #     40\n    #       |\n    #       41\n    #       |\n    #       42\n    #      /\n    #     43\n    #       |\n    #       44\n    #       |\n    #       45\n    #      /\n    #     46\n    #       |\n    #       47\n    #       |\n    #       48\n    #      /\n    #     49\n    #       |\n    #       50\n    #       |\n    #       51\n    #      /\n    #     52\n    #       |\n    #       53\n    #      /\n    #     54\n    #       |\n    #       55\n    #       |\n    #       56\n    #      /\n    #     57\n    #       |\n    #       58\n    #       |\n    #       59\n    #      /\n    #     60\n    #       |\n    #       61\n    #       |\n    #       62\n    #      /\n    #     63\n    #       |\n    #       64\n    #       |\n    #       65\n    #      /\n    #     66\n    #       |\n    #       67\n    #       |\n    #       68\n    #       |\n    #       69\n    #      /\n    #     70\n    #       |\n    #       71\n    #       |\n    #       72\n    #       |\n    #       73\n    #       |\n    #       74\n    #       |\n    #       75\n    #      /\n    #     76\n    #       |\n    #       77\n    #       |\n    #       78\n    #       |\n    #       79\n    #       |\n    #       80\n    #       |\n    #       81\n    #       |\n    #       82\n    #       |\n    #       83\n    #       |\n    #       84\n    #      /\n    #     85\n    #       |\n    #       86\n    #       |\n    #       87\n    #       |\n    #       88\n    #       |\n    #       89\n    #      /\n    #     90\n    #       |\n    #       91\n    #       |\n    #       92\n    #       |\n    #       93\n    #       |\n    #       94\n    #      /\n    #     95\n    #       |\n    #       96\n    #       |\n    #       97\n    #       |\n    #       98\n    #       |\n    #       99\n    #      /\n    #     100\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_index = -1\n    for i in range(len(lists)):\n        if sum(lists[i]) > max_sum:\n            max_sum = sum(lists[i])\n            max_index = i\n    return lists[max_index]\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    list_of_max_sum = []\n    for num_of_lists in range(len(lists)):\n        if sum(lists[num_of_lists]) > max_sum:\n            max_sum = sum(lists[num_of_lists])\n            list_of_max_sum = lists[num_of_lists]\n    return list_of_max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # find the sum of each row and then find the max of the sums\n    # return the list with the highest sum\n    \n    sums = [sum(x) for x in lists]\n    return lists[sums.index(max(sums))]\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in lists:\n        if sum(i) > max_sum:\n            max_sum = sum(i)\n            max_list = i\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 1:\n        return lists[0]\n    elif len(lists) == 0:\n        return 0\n    else:\n        max_sum = lists[0]\n        for i in lists[1:]:\n            if sum(i) > sum(max_sum):\n                max_sum = i\n        return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_sum_list = []\n    for i in lists:\n        if sum(i) > max_sum:\n            max_sum = sum(i)\n            max_sum_list = i\n    return max_sum_list\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    index_max = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if sum(lists[i][:j+1]) > max_sum:\n                max_sum = sum(lists[i][:j+1])\n                index_max = [i,j]\n    return lists[index_max[0]][:index_max[1]+1]\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    sums = []\n    for list in lists:\n        sums.append(sum(list))\n    return sums.index(max(sums))\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # here we need to find the max sum of each element\n    # thus we need to iterate the list and calculate the sum of each sublist\n    max_sum_list = []\n    for ele in lists:\n        max_sum_list.append(sum(ele))\n    # we now have all the sums as a list\n    # now we want to find out which sublist has the max sum\n    # so we need to iterate the list again and find the highest sum\n    max_sum = max(max_sum_list)\n    # now we need to find out which sublist is the max sum\n    # so we iterate the list again and find the index of highest sum\n    max_sum_index = max_sum_list.index(max_sum)\n    # we now have the index of the max sum\n    # we now need to return the sublist from the list of lists that has the highest sum\n    # so we call the sublist method with the index\n    return lists[max_sum_index]\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    dict_str = {}\n    for letter in test_str:\n        if letter.isupper():\n            if letter in dict_str:\n                dict_str[letter] += 1\n            else:\n                dict_str[letter] = 1\n    max_uppercase = max(dict_str.values())\n    return max_uppercase\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    result_str = ''\n    tmp_str = ''\n    for i in test_str:\n        if i.isupper():\n            tmp_str += i\n        else:\n            if len(tmp_str) > len(result_str):\n                result_str = tmp_str\n            tmp_str = ''\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            max_run = max(max_run, count)\n            count = 0\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    return max(max_run, current_run)\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for i in xrange(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    return max(max_run, current_run)\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_uppercase = 0\n    index = 0\n    while index < len(test_str):\n        i = index\n        while i < len(test_str) and test_str[i].isupper():\n            i += 1\n        max_uppercase = max(max_uppercase, i-index)\n        index = i\n    return max_uppercase\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    for i in range(len(test_str)):\n        count = 1\n        if test_str[i].isupper():\n            for j in range(i+1, len(test_str)):\n                if test_str[j].isupper():\n                    count += 1\n                else:\n                    break\n            max_count = max(max_count, count)\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for i in test_str:\n        if i.isupper():\n            current_run += 1\n        else:\n            current_run = 0\n        max_run = max(current_run, max_run)\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    max_count = 1\n    for i in range(len(test_str) - 1):\n        if test_str[i].isupper() and test_str[i+1].isupper():\n            count += 1\n            max_count = max(max_count, count)\n        else:\n            count = 1\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    #return len(max(re.findall(r'[A-Z]{2,}', test_str)))\n    max_run = 0\n    current_run = 0\n    for c in test_str:\n        if c.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    return max_run\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n            break\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2 == 1:\n            return i\n    return 0\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    \n    for i in nums:\n        if i % 2 == 1:\n            return i\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!=0:\n            return i\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!= 0:\n            return i\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(0, len(nums)):\n        if nums[i]%2!= 0:\n            return nums[i]\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for n in nums:\n        if n%2!=0:\n            return n\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for n in nums:\n        if n%2!=0:\n            return n\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K == 1:\n        return True\n    elif K > 1:\n        return len(set(test_tup)) == K\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    pass\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    key = test_tup[K]\n    return key in test_tup\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return test_tup[K]=='K'\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(K):\n        if test_tup[i] == None:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # convert tuples to dictionary\n    d = {}\n    for tup in test_tup:\n        if tup[0] in d:\n            d[tup[0]].append(tup[1])\n        else:\n            d[tup[0]] = [tup[1]]\n    for tup in test_tup:\n        if len(d[tup[0]]) < K:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return (test_tup[0] in K) or (test_tup[1] in K)\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(K):\n        if (test_tup[i]!= None):\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    new_tup = ()\n    for i in test_tup:\n        new_tup = new_tup + (i,)\n    if new_tup[K] in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    tup1 = test_tup1[0]\n    tup2 = test_tup2[0]\n    for i in range(len(tup2)):\n        if tup1[i] <= tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i, t1 in enumerate(test_tup1):\n        for t2 in test_tup2:\n            if t1 > t2:\n                return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] > test_tup1[i]:\n            print 'False'\n            return False\n    print 'True'\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return tuple([test_tup1[i] < test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return test_tup1[0] > test_tup2[0] and test_tup1[1] > test_tup2[1]\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # compare each element\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = []\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        if tup1 < tup2:\n            result.append(True)\n        else:\n            result.append(False)\n    return result\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return (test_tup1[0] > test_tup2[0]) or (test_tup1[1] > test_tup2[1])\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    res = []\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            res.append(True)\n        else:\n            res.append(False)\n    return res\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    }
]