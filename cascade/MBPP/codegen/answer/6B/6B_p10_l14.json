[
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if not test_tup1 or not test_tup2:\n        return []\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result_list = []\n    for item in test_tup1:\n        if item in test_tup2:\n            result_list.append(item)\n    return result_list\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # zip together\n    zipped = zip(test_tup1, test_tup2)\n    # pair each element in the list\n    pairs = [(x,y) for (x,y) in zipped if x == y]\n    # set the pairs\n    shared = set(pairs)\n    return shared\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple):\n        if len(test_tup1) == len(test_tup2):\n            return [(x,y) for x, y in zip(test_tup1, test_tup2) if x == y]\n        else:\n            return []\n    else:\n        return []\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    return set(test_tup1).intersection(test_tup2)\n    \ndef valid_dates(date_list):\n    '''\n    Write a function to find if the date in the given list is valid or not.\n    A valid date is given in the format DD/MM/YYYY.\n    '''\n    \n    valid_dates = []\n    \n    for date in date_list:\n        try:\n            datetime.datetime.strptime(date, '%d/%m/%Y')\n            valid_dates.append(date)\n        except ValueError:\n            pass\n            \n    return valid_dates\n    \ndef max_freq_elem(n):\n    '''\n    Write a function to find the maximum occurring element from the given list.\n    The elements in the list can be numbers and/or strings.\n    '''\n    \n    return max(n, key=n.count)\n    \ndef valid_entries(entry_list):\n    '''\n    Write a function to find if the given entries are valid or not.\n    An entry is valid if it is a word or a string of words.\n    '''\n    \n    return [entry for entry in entry_list if entry.isalpha() or entry.isdigit()]\n    \ndef dup_digits(n):\n    '''\n    Write a function to find if the given number is a duplicate or not.\n    A duplicate number is a number whose digits are rearranged to form a different number.\n    '''\n    \n    return len(set(str(n))) < len(str(n))\n    \ndef longest_palindrome(s):\n    '''\n    Write a function to find the longest palindromic substring in the given string.\n    '''\n    \n    #using dynamic programming\n    \n    n = len(s)\n    palindrome_matrix = [[0 for _ in xrange(n)] for _ in xrange(n)]\n    for i in xrange(n):\n        palindrome_matrix[i][i] = 1\n    for L in xrange(2, n + 1):\n        for i in xrange(n - L + 1):\n            j = i + L - 1\n            if s[i] == s[j] and L == 2:\n                palindrome_matrix[i][j] = 1\n            elif s[i] == s[j]:\n                palindrome_matrix[i][j] = 2 + palindrome_matrix[i + 1][j - 1]\n            else:\n                palindrome_matrix[i][j] = max(palindrome_matrix[i][j - 1], palindrome_matrix[i + 1][j])\n    return palindrome_matrix\n    \ndef count_triplets(arr, r):\n    '''\n    Write a function to find the count of triplets whose sum is less than the given number.\n    '''\n    \n    arr.sort()\n    count = 0\n    for i in xrange(len(arr) - 2):\n        j = i + 1\n        k = len(arr) - 1\n        while j < k:\n            if arr[i] + arr[j] + arr[k] < r:\n                count += k - j\n                j += 1\n            else:\n                k -= 1\n    return count\n    \ndef min_cost(costs):\n    '''\n    Write a function to find the minimum cost to reach the end of the array.\n    The costs is given as an array where the costs[i] represents the cost of reaching the ith index starting from 0.\n    '''\n    \n    n = len(costs)\n    \n    costs.insert(0, 0)\n    \n    return min(costs[i] + costs[i - 1] for i in xrange(1, n + 1))\n    \ndef remove_duplicates(arr):\n    '''\n    Write a function to remove duplicates from the array.\n    Use this in the problem below.\n    '''\n    \n    return [a for a in arr if a not in arr[1:]]\n    \ndef perfect_squares(n):\n    '''\n    Write a function to find all the perfect squares less than the given number.\n    A perfect square is a number that is equal to the square of an integer.\n    '''\n    \n    #using binary search\n    \n    if n < 1:\n        return []\n    \n    squares = [0]\n    \n    start = 0\n    end = 1\n    \n    while start * start <= n:\n        squares.append(start * start)\n        start += 1\n    \n    while start * start < n:\n        squares.append(n)\n        break\n    \n    while end * end <= n:\n        start = 0\n        end *= 2\n    \n    while end > 0:\n        if start * start <= n:\n            squares.append(start * start)\n            start += 1\n        \n        if end * end <= n:\n            squares.append(end * end)\n            end //= 2\n    \n    return squares\n    \ndef highest_product_of_3(arr):\n    '''\n    Write a function to find the highest product of three elements in an array.\n    '''\n    \n    arr.sort()\n    return max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1])\n    \ndef palindrome_permutation(s):\n    '''\n    Write a function to find if the given string is a permutation of a palindrome.\n    A palindrome is a word or a string that is the same forwards and backwards.\n    A permutation is a rearrangement of letters.\n    '''\n    \n    char_dict = {}\n    \n    for char in s:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    \n    odd_count = 0\n    for value in char_dict.values():\n        if value % 2!= 0:\n            odd_count += 1\n        \n    return odd_count <= 1\n    \ndef random_hash(n):\n    '''\n    Write a function to find a random hash of the given size.\n    '''\n    \n    return hashlib.md5(str(n)).hexdigest()\n    \ndef has_digit(n):\n    '''\n    Write a function to find if the given number is a power of 2 or not.\n    A power of 2 is a number that is equal to 2 ** n where n is a non-negative integer.\n    '''\n    \n    return n == 0 or n & (n - 1) == 0\n    \ndef is_pandigital(n, k):\n    '''\n    Write a function to find if the given number is a permutation of a pandigital number or not.\n    A pandigital number is a number that is made up of the letters in the numbers 1 to n in the order they appear in the number.\n    '''\n    \n    #using sieve of eratosthenes\n    \n    if len(n)!= k:\n        return False\n    \n    n = sorted(n)\n    \n    for i in xrange(1, 10):\n        if str(i) not in n:\n            return False\n    \n    return True\n    \ndef test_palindrome_permutation():\n    '''\n    Write a function to test if a given string is a permutation of a palindrome.\n    '''\n    \n    for i in xrange(1, 1000):\n        if not palindrome_permutation(i):\n            return False\n        if not palindrome_permutation(str(i)[::-1]):\n            return False\n    \n    return True\n    \ndef test_perfect_squares():\n    '''\n    Write a function to test if the given number is a perfect square or not.\n    '''\n    \n    for i in xrange(1, 1000):\n        if perfect_squares(i)!= i * i:\n            return False\n    \n    return True\n    \ndef test_highest_product_of_3():\n    '''\n    Write a function to test if the given array is a subarray of a certain number.\n    '''\n    \n    arr = [1, 2, 3, 4, 5, 6, 7]\n    n = 10\n    \n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [elem for elem in test_tup1 if elem in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared.append(element)\n    return shared\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return len(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared = set1 & set2\n    return list(shared)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    elif n == 1:\n        return True\n    elif n % 2 == 0:\n        return True\n    else:\n        for i in xrange(3,int(math.sqrt(n))+1,2):\n            if n % i == 0:\n                return True\n        return False\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 2:\n        return True\n    elif n == 1:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in xrange(3,int(math.sqrt(n))+1,2):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n)+1)):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if is_not_prime(n):\n        return False\n    else:\n        return True\ndef sum_of_primes(n):\n    '''\n    Write a python function to return the sum of all the prime numbers upto n.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            sum = sum + i\n    return sum\ndef sum_of_n_primes(n):\n    '''\n    Write a python function to return the sum of all the prime numbers upto n.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            sum = sum + i\n    return sum\ndef sum_of_n_primes_upto_n(n):\n    '''\n    Write a python function to return the sum of all the prime numbers upto n.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            sum = sum + i\n    return sum\ndef sum_of_n_primes_upto_n(n):\n    '''\n    Write a python function to return the sum of all the prime numbers upto n.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            sum = sum + i\n    return sum\ndef fact(n):\n    '''\n    Write a python function to return the factorial of n.\n    '''\n    factorial = 1\n    for i in range(2, n+1):\n        factorial = factorial * i\n    return factorial\ndef factorial(n):\n    '''\n    Write a python function to return the factorial of n.\n    '''\n    factorial = 1\n    for i in range(2, n+1):\n        factorial = factorial * i\n    return factorial\ndef factorial_recursive(n):\n    '''\n    Write a python function to return the factorial of n.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * factorial_recursive(n-1)\ndef fibonacci(n):\n    '''\n    Write a python function to return the nth fibonacci number.\n    '''\n    fib1 = 1\n    fib2 = 1\n    for i in range(2, n+1):\n        fib1, fib2 = fib2, fib1+fib2\n    return fib2\ndef fibonacci_recursive(n):\n    '''\n    Write a python function to return the nth fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)\ndef fibonacci_iterative(n):\n    '''\n    Write a python function to return the nth fibonacci number.\n    '''\n    a, b = 0, 1\n    for i in range(2, n+1):\n        a, b = b, a+b\n    return b\ndef is_palindrome(n):\n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    return str(n) == str(n)[::-1]\ndef is_palindrome_reverse(n):\n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    return str(n) == str(n)[::-1]\ndef sum_of_digits(n):\n    '''\n    Write a python function to calculate the sum of digits of a number.\n    '''\n    sum = 0\n    while n:\n        sum = sum + (n % 10)\n        n = n // 10\n    return sum\ndef sum_of_digits_recursive(n):\n    '''\n    Write a python function to calculate the sum of digits of a number.\n    '''\n    sum = 0\n    if n < 10:\n        return n\n    return n % 10 + sum_of_digits(n // 10)\ndef sum_of_digits_iterative(n):\n    '''\n    Write a python function to calculate the sum of digits of a number.\n    '''\n    sum = 0\n    while n:\n        sum = sum + (n % 10)\n        n = n // 10\n    return sum\ndef count_digits(n):\n    '''\n    Write a python function to calculate the number of digits in a number.\n    '''\n    count = 0\n    while n:\n        count = count + 1\n        n = n // 10\n    return count\ndef count_digits_recursive(n):\n    '''\n    Write a python function to calculate the number of digits in a number.\n    '''\n    count = 0\n    if n < 10:\n        return 1\n    return 1 + count_digits(n // 10)\ndef count_digits_iterative(n):\n    '''\n    Write a python function to calculate the number of digits in a number.\n    '''\n    count = 0\n    while n:\n        count = count + 1\n        n = n // 10\n    return count\ndef largest_prime_factor(n):\n    '''\n    Write a python function to return the largest prime factor of a number.\n    '''\n    prime_factor = 0\n    for i in range(2, n+1):\n        if is_prime(i) and n % i == 0:\n            prime_factor = i\n    return prime_factor\ndef largest_prime_factor_recursive(n):\n    '''\n    Write a python function to return the largest prime factor of a number.\n    '''\n    prime_factor = 0\n    for i in range(2, n+1):\n        if is_prime(i) and n % i == 0:\n            prime_factor = i\n    return prime_factor\ndef largest_prime_factor_iterative(n):\n    '''\n    Write a python function to return the largest prime factor of a number.\n    '''\n    prime_factor = 0\n    for i in range(2, n+1):\n        if is_prime(i) and n % i == 0:\n            prime_factor = i\n    return prime_factor\ndef smallest_prime_factor(n):\n    '''\n    Write a python function to return the smallest prime factor of a number.\n    '''\n    prime_factor = 0\n    for i in range(2, n+1):\n        if is_prime(i) and n % i == 0:\n            prime_factor = i\n    return prime_factor\ndef smallest_prime_factor_recursive(n):\n    '''\n    Write a python function to return the smallest prime factor of a number.\n    '''\n    prime_factor = 0\n    for i in range(2, n+1):\n        if is_prime(i) and n % i == 0:\n            prime_factor = i\n    return prime_factor\ndef smallest_prime_factor_iterative(n):\n    '''\n    Write a python function to return the smallest prime factor of a number.\n    '''\n    prime_factor = 0\n    for i in range(2, n+1):\n        if is_prime(i) and n % i == 0:\n            prime_factor = i\n    return prime_factor\ndef sum_of_digits_by_recursion(n):\n    '''\n    Write a python function to calculate the sum of digits of a number.\n    '''\n    if n < 10:\n        return n\n    return n % 10 + sum_of_digits(n // 10)\ndef sum_of_digits_by_iteration(n):\n    '''\n    Write a python function to calculate the sum of digits of a number.\n    '''\n    sum = 0\n    while n:\n        sum = sum + (n % 10)\n        n = n // 10\n    return sum\ndef sum_of_digits_by_recursion(n):\n    '''\n    Writ"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\ndef prime_factors(n):\n    '''\n    Write a python function to find prime factors of a number.\n    '''\n    factors = []\n    if n == 1:\n        return factors\n    if is_not_prime(n):\n        return factors\n    while n % 2 == 0:\n        factors.append(2)\n        n /= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n /= i\n    if n > 2:\n        factors.append(n)\n    return factors\ndef gcd(a, b):\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    if a == 0:\n        return b\n    else:\n        return gcd(b % a, a)\ndef lcm(a, b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    return a * b / gcd(a, b)\ndef permutations(l, r):\n    '''\n    Write a python function to find the permutations of a list.\n    '''\n    if r == 0:\n        return 1\n    else:\n        return r * permutations(l, r - 1)\ndef combinations(n, r):\n    '''\n    Write a python function to find the combinations of a list.\n    '''\n    if r == 0:\n        return 1\n    else:\n        return combinations(n - 1, r - 1) + combinations(n - 1, r)\ndef factors(n):\n    '''\n    Write a python function to find the factors of a number.\n    '''\n    f = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            f.append(i)\n    return f\ndef sum_of_factors(n):\n    '''\n    Write a python function to find the sum of the factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n    return sum\ndef sum_of_divisors(n):\n    '''\n    Write a python function to find the sum of the divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum + n\ndef pythagorean_triplet(a, b, c):\n    '''\n    Write a python function to find a pythagorean triplet that satisfies the\n    condition of a + b + c = 1000.\n    '''\n    if a + b + c == 1000:\n        if a**2 + b**2 == c**2:\n            return True\n    return False\ndef abc(n):\n    '''\n    Write a python function to find the first 3 abc numbers, where a + b + c = n.\n    '''\n    for i in range(1, n):\n        for j in range(1, i):\n            k = n - i - j\n            if i + j + k == n and i**2 + j**2 == k**2:\n                return True\n    return False\ndef min_max_digits(a, b):\n    '''\n    Write a python function to find the smallest and largest digits of two numbers.\n    '''\n    if a > b:\n        small = b\n        large = a\n    else:\n        small = a\n        large = b\n    while small > 0:\n        small /= 10\n    while large > 0:\n        large /= 10\n    return small, large\ndef digit_count(a):\n    '''\n    Write a python function to find the number of digits of a number.\n    '''\n    count = 0\n    while a > 0:\n        a /= 10\n        count += 1\n    return count\ndef main():\n    print prime_factors(7)\n    print gcd(10, 5)\n    print lcm(10, 5)\n    print permutations(3, 4)\n    print combinations(5, 4)\n    print factors(10)\n    print sum_of_factors(10)\n    print sum_of_divisors(10)\n    print pythagorean_triplet(3, 4, 5)\n    print abc(1000)\n    print min_max_digits(100, 25)\n    print digit_count(25)\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)+1)):\n        if n%i==0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef test_is_not_prime():\n    assert is_not_prime(4) == False\n    assert is_not_prime(5) == True\ndef is_power_of_two(n):\n    '''\n    Write a python function to determine whether a number is a power of two.\n    '''\n    if n == 0:\n        return False\n    while n!= 1:\n        if n % 2!= 0:\n            return False\n        n /= 2\n    return True\ndef test_is_power_of_two():\n    assert is_power_of_two(0) == False\n    assert is_power_of_two(1) == True\n    assert is_power_of_two(4) == False\n    assert is_power_of_two(8) == True\ndef is_palindrome(n):\n    '''\n    Write a python function to determine whether a number is a palindrome\n    '''\n    if n == 0:\n        return True\n    rev = 0\n    while n:\n        rev = rev * 10 + n % 10\n        n /= 10\n    return rev == n\ndef test_is_palindrome():\n    assert is_palindrome(0) == True\n    assert is_palindrome(1) == True\n    assert is_palindrome(123) == False\n    assert is_palindrome(1234) == True\n    assert is_palindrome(345345) == True\ndef is_prime_number(n):\n    '''\n    Write a python function to determine whether a number is a prime number.\n    '''\n    if n == 1 or n == 0:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef test_is_prime_number():\n    assert is_prime_number(0) == False\n    assert is_prime_number(1) == False\n    assert is_prime_number(2) == True\n    assert is_prime_number(3) == True\n    assert is_prime_number(4) == False\n    assert is_prime_number(5) == True\ndef is_perfect_number(n):\n    '''\n    Write a python function to determine whether a number is a perfect number.\n    '''\n    if n == 0:\n        return False\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum == n\ndef test_is_perfect_number():\n    assert is_perfect_number(6) == False\n    assert is_perfect_number(8) == True\n    assert is_perfect_number(4) == False\n    assert is_perfect_number(29) == True\ndef is_pythagorean_triple(a, b, c):\n    '''\n    Write a python function to determine whether a pythagorean triple exists.\n    '''\n    if a == 0 and b == 0 and c == 0:\n        return True\n    if a == b == c:\n        return True\n    if a == b or a == c or b == c:\n        return False\n    for i in range(2, int(math.sqrt(a)) + 1):\n        if a % i == 0 and b % i == 0 and c % i == 0:\n            return False\n    return True\ndef test_is_pythagorean_triple():\n    assert is_pythagorean_triple(3, 4, 5) == True\n    assert is_pythagorean_triple(5, 8, 13) == True\n    assert is_pythagorean_triple(2, 2, 3) == False\n    assert is_pythagorean_triple(3, 3, 4) == True\n    assert is_pythagorean_triple(3, 4, 5) == True\n    assert is_pythagorean_triple(5, 5, 5) == False\n    assert is_pythagorean_triple(3, 4, 6) == False\ndef is_super_prime(n):\n    '''\n    Write a python function to determine whether a number is a super prime.\n    '''\n    if n == 1:\n        return False\n    if is_prime_number(n):\n        return True\n    for i in range(2, n):\n        if n % i == 0 and is_prime_number(i):\n            return False\n    return True\ndef test_is_super_prime():\n    assert is_super_prime(3) == True\n    assert is_super_prime(17) == False\n    assert is_super_prime(2) == False\n    assert is_super_prime(5) == True\n    assert is_super_prime(1) == False\n    assert is_super_prime(4) == False\ndef is_palindrome_number(n):\n    '''\n    Write a python function to determine whether a number is a palindrome number.\n    '''\n    return str(n) == str(n)[::-1]\ndef test_is_palindrome_number():\n    assert is_palindrome_number(2222) == True\n    assert is_palindrome_number(8888) == True\n    assert is_palindrome_number(1234) == False\n    assert is_palindrome_number(2345) == False\n    assert is_palindrome_number(1112) == True\n    assert is_palindrome_number(112) == True\ndef is_triangle_number(n):\n    '''\n    Write a python function to determine whether a number is a triangle number.\n    '''\n    if n == 0:\n        return True\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef test_is_triangle_number():\n    assert is_triangle_number(0) == True\n    assert is_triangle_number(1) == True\n    assert is_triangle_number(2) == True\n    assert is_triangle_number(3) == False\n    assert is_triangle_number(4) == True\n    assert is_triangle_number(5) == True\n    assert is_triangle_number(6) == True\n    assert is_triangle_number(7) == True\n    assert is_triangle_number(8) == True\n    assert is_triangle_number(9) == False\n    assert is_triangle_number(10) == True\n    assert is_triangle_number(11) == True\n    assert is_triangle_number(12) == True\n    assert is_triangle_number(13) == True\n    assert is_triangle_number(14) == True\n    assert is_triangle_number(15) == True\n    assert is_triangle_number(16) == True\n    assert is_triangle_number(17) == True\n    assert is_triangle_number(18) == True\n    assert is_triangle_number(19) == True\n    assert is_triangle_number(20) == True\n    assert is_triangle_number(21) == True\n    assert is_triangle_number(22) == True\n    assert is_triangle_number(23) == True\n    assert is_triangle_number(24) == True\n    assert is_triangle_number(25) == True\n    assert is_triangle_number(26) == True\n    assert is_triangle_number(27) == True\n    assert is_triangle_number(28) == True\n    assert is_triangle_number(29) == True\n    assert is_triangle_number(30) == True\ndef is_triangle_number(n):\n    '''\n    Write a python function to determine whether a number is a triangle number.\n    '''\n    if n == 0:\n        return True\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_binomial_number(n, k):\n    '''"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return True\n    if n%2 == 0 and n>2:\n        return False\n    return all(n%i for i in range(3,int(math.sqrt(n))+1,2))\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 2:\n        return True\n    if n%2 == 0 and n>2:\n        return False\n    return all(n%i for i in range(3,int(math.sqrt(n))+1,2))\ndef fib(n):\n    '''\n    Write a python function to compute the nth value of fibbonacci sequence.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)\ndef is_palindrome(n):\n    '''\n    Write a python function to identify palindrome numbers.\n    '''\n    if n < 10:\n        return True\n    if n%10 == n/10%10:\n        return is_palindrome(n//10)\n    return False\ndef find_max(n):\n    '''\n    Write a python function to find the maximum number of digits in a number.\n    '''\n    if n < 10:\n        return 1\n    return 1 + max(find_max(n//10), find_max(n//100))\ndef is_factor(n, m):\n    '''\n    Write a python function to identify whether m is a factor of n.\n    '''\n    if m == 1:\n        return True\n    if n%m == 0:\n        return True\n    return is_factor(n, m-1)\ndef get_factors(n):\n    '''\n    Write a python function to find all the factors of a number.\n    '''\n    factors = []\n    for i in range(1, n+1):\n        if n%i == 0:\n            factors.append(i)\n    return factors\ndef factorial(n):\n    '''\n    Write a python function to compute the factorial of a number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    return n*factorial(n-1)\ndef is_balanced(str):\n    '''\n    Write a python function to identify whether a string is balanced or not.\n    '''\n    stack = []\n    for ch in str:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    if len(stack) == 0:\n        return True\n    return False\ndef is_perfect(n):\n    '''\n    Write a python function to identify whether a number is perfect or not.\n    '''\n    if n == 1:\n        return True\n    if n == 2:\n        return False\n    s = 0\n    for i in range(1,n):\n        if n%i == 0:\n            s = s + i\n    if s == n:\n        return True\n    return False\ndef is_arithmetic(n):\n    '''\n    Write a python function to identify whether a number is arithmetic or not.\n    '''\n    if n == 1:\n        return True\n    if n == 2:\n        return False\n    d = n%10\n    s = 0\n    while n > 0:\n        d = n%10\n        n = n//10\n        s = s + d\n    if s == n:\n        return True\n    return False\ndef find_digit(n, d):\n    '''\n    Write a python function to find the nth digit of a number.\n    '''\n    if n == 0:\n        return 0\n    if n%10 == d:\n        return 0\n    return 1 + find_digit(n//10, d)\ndef is_palindrome(n):\n    '''\n    Write a python function to identify whether a number is palindrome or not.\n    '''\n    if n < 10:\n        return True\n    if n%10 == n/10%10:\n        return is_palindrome(n//10)\n    return False\ndef get_pandigital(n):\n    '''\n    Write a python function to get the pandigital of a number.\n    '''\n    if n < 10:\n        return True\n    s = ''\n    while n > 0:\n        s = str(n%10) + s\n        n = n//10\n    if len(s) == 9:\n        return True\n    return False\ndef get_lcm(n, m):\n    '''\n    Write a python function to compute the least common multiple of two numbers.\n    '''\n    if n > m:\n        greater = n\n    else:\n        greater = m\n    while True:\n        if greater%n == 0 and greater%m == 0:\n            lcm = greater\n            break\n        greater += 1\n    return lcm\ndef is_palindrome_permutation(n):\n    '''\n    Write a python function to identify whether a number is palindrome permutation or not.\n    '''\n    s = str(n)\n    if s == s[::-1]:\n        return True\n    return False\ndef is_perfect_square(n):\n    '''\n    Write a python function to identify whether a number is perfect square or not.\n    '''\n    if n == 1:\n        return True\n    if n < 1:\n        return False\n    if (n**(1/2))%1 == 0:\n        return True\n    return False\ndef is_hexagonal(n):\n    '''\n    Write a python function to identify whether a number is hexagonal or not.\n    '''\n    if is_perfect_square(n**(1/2)) and (n**(1/2))%1 == 0:\n        return True\n    return False\ndef is_power(n, m):\n    '''\n    Write a python function to determine whether a number is a power of m or not.\n    '''\n    if n == m:\n        return True\n    if n < m:\n        return False\n    while n > m:\n        if n%m == 0:\n            return True\n        n = n//m\n    return False\ndef is_abundant(n):\n    '''\n    Write a python function to identify whether a number is abundant or not.\n    '''\n    if n < 12:\n        return False\n    s = 0\n    for i in range(1,n):\n        if n%i == 0:\n            s = s + i\n    if s > n:\n        return True\n    return False\ndef is_abundant_sum(n, m):\n    '''\n    Write a python function to find whether a number is an abundant sum of two other numbers.\n    '''\n    if is_abundant(m):\n        return True\n    if is_abundant(n-m):\n        return True\n    return False\ndef is_abundant_triplet(n):\n    '''\n    Write a python function to find whether a number is an abundant triplet of three other numbers.\n    '''\n    for i in range(1,n):\n        for j in range(1,n):\n            k = n - i - j\n            if i+j+k == n and is_abundant_sum(i,j) and is_abundant_sum(j,k) and is_abundant_sum(i,k):\n                return True\n    return False\ndef is_abundant_product(n):\n    '''\n    Write a python function to find whether a number is an abundant product of two other numbers.\n    '''\n    for i in range(1,n):\n        if is_abundant(n-i) and is_abundant(i):\n            return True\n    return False\ndef is_strong_number(n):\n    '''\n    Write a python function to identify whether a number is strong or not.\n    '''\n    s = 0\n    for i in range(1,n):\n        if n%i == 0:\n            s += i\n    if n == s:\n        return True\n    return False\ndef is_strong_permutation(n):\n    '''\n    Write a python function to identify whether a number is strong permutation or not"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==2:\n        return False\n    elif n%2==0:\n        return True\n    else:\n        x=3\n        while x*x<=n:\n            if n%x==0:\n                return True\n            x+=2\n        return False\n    \ndef mod_pow(x,y,n):\n    '''\n    Write a python function to find mod power of two numbers\n    '''\n    if y==0:\n        return 1\n    else:\n        if y%2==1:\n            return (mod_pow(x,y//2,n)*x)%n\n        else:\n            return (mod_pow(x,y//2,n)*mod_pow(x,y//2,n))%n\n        \ndef binary_search(li, item):\n    '''\n    Write a python function to find element in sorted list using binary search.\n    '''\n    mid=(len(li)-1)//2\n    if li[mid]==item:\n        return True\n    elif item>li[mid]:\n        return binary_search(li[mid+1:],item)\n    else:\n        return binary_search(li[:mid],item)\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1 or n == 2:\n        return False\n    if n > 2 and n % 2 == 0:\n        return False\n    max = math.floor(math.sqrt(n)) + 1\n    for i in range(3, max, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq = []\n    hq = nums[0:n]\n    hq.sort(reverse = True)\n    return hq\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq = []\n    hq = nums[0:n]\n    hq.sort()\n    return hq\ndef heap_min_heap_push(nums,n):\n    '''\n    Write a function to push an element to a heap.\n    '''\n    hq = []\n    hq.append(n)\n    return hq\ndef heap_min_heap_pop(nums):\n    '''\n    Write a function to remove and return the smallest element from a heap.\n    '''\n    hq = []\n    hq.pop(0)\n    return hq\ndef heap_max_heap_push(nums,n):\n    '''\n    Write a function to push an element to a heap.\n    '''\n    hq = []\n    hq.append(n)\n    return hq\ndef heap_max_heap_pop(nums):\n    '''\n    Write a function to remove and return the largest element from a heap.\n    '''\n    hq = []\n    hq.pop(0)\n    return hq\ndef heap_extract_max(nums):\n    '''\n    Write a function to remove and return the largest element from a heap.\n    '''\n    heapq._heappop_max(nums)\n    return nums\ndef heap_extract_min(nums):\n    '''\n    Write a function to remove and return the smallest element from a heap.\n    '''\n    heapq._heappop_max(nums)\n    return nums\ndef heapsort(nums):\n    '''\n    Write a function to sort an array of numbers.\n    '''\n    hq = []\n    for i in range(0,len(nums)):\n        hq.append(nums[i])\n    hq.sort(reverse = True)\n    return hq\ndef heapsort_smallest(nums):\n    '''\n    Write a function to sort an array of numbers.\n    '''\n    hq = []\n    for i in range(0,len(nums)):\n        hq.append(nums[i])\n    hq.sort()\n    return hq\ndef heapsort_largest(nums):\n    '''\n    Write a function to sort an array of numbers.\n    '''\n    hq = []\n    for i in range(0,len(nums)):\n        hq.append(nums[i])\n    hq.sort(reverse = True)\n    return hq\ndef heap_min_heap_increase_key(nums,i,key):\n    '''\n    Write a function to increase the value of a key in the heap.\n    '''\n    hq = []\n    hq = nums[0:i+1]\n    hq.append(key)\n    return hq\ndef heap_max_heap_increase_key(nums,i,key):\n    '''\n    Write a function to increase the value of a key in the heap.\n    '''\n    hq = []\n    hq = nums[0:i+1]\n    hq.append(key)\n    return hq\ndef heap_min_heap_decrease_key(nums,i,key):\n    '''\n    Write a function to decrease the value of a key in the heap.\n    '''\n    hq = []\n    hq = nums[0:i+1]\n    hq.append(key)\n    return hq\ndef heap_max_heap_decrease_key(nums,i,key):\n    '''\n    Write a function to decrease the value of a key in the heap.\n    '''\n    hq = []\n    hq = nums[0:i+1]\n    hq.append(key)\n    return hq\ndef heap_del_max(nums,i):\n    '''\n    Write a function to delete and return the maximum value of a heap.\n    '''\n    heapq._heappop_max(nums)\n    return nums\ndef heap_del_min(nums,i):\n    '''\n    Write a function to delete and return the minimum value of a heap.\n    '''\n    heapq._heappop_max(nums)\n    return nums\ndef merge(nums1,m,nums2,n):\n    '''\n    Write a function to merge two sorted arrays into a new array.\n    '''\n    i = m - 1\n    j = n - 1\n    k = m + n - 1\n    while (i >= 0 and j >= 0):\n        if (nums1[i] > nums2[j]):\n            nums1[k] = nums1[i]\n            i = i - 1\n        else:\n            nums1[k] = nums2[j]\n            j = j - 1\n        k = k - 1\n    while (j >= 0):\n        nums1[k] = nums2[j]\n        k = k - 1\n        j = j - 1\n    return nums1\ndef mergesort(nums):\n    '''\n    Write a function to sort an array of numbers.\n    '''\n    if len(nums) == 1:\n        return nums\n    if len(nums) == 2:\n        if nums[0] > nums[1]:\n            nums[0],nums[1] = nums[1],nums[0]\n        return nums\n    if len(nums) == 3:\n        if nums[0] > nums[1] and nums[0] > nums[2]:\n            nums[0],nums[1] = nums[1],nums[0]\n        if nums[1] > nums[0] and nums[1] > nums[2]:\n            nums[1],nums[2] = nums[2],nums[1]\n        if nums[2] > nums[0] and nums[2] > nums[1]:\n            nums[2],nums[0] = nums[0],nums[2]\n        return nums\n    if len(nums) > 3:\n        return merge(mergesort(nums[0:len(nums)/2]),len(nums)/2,mergesort(nums[len(nums)/2:len(nums)]),len(nums)/2)\ndef merge_sort(nums):\n    '''\n    Write a function to sort an array of numbers.\n    '''\n    if len(nums) == 1:\n        return nums\n    if len(nums) == 2:\n        if nums[0] > nums[1]:\n            nums[0],nums[1] = nums[1],nums[0]\n        return nums\n    if len(nums) == 3:\n        if nums[0] > nums[1] and nums[0] > nums[2]:\n            nums[0],nums[1] = nums[1],nums[0]\n        if nums[1] > nums[0] and nums[1] > nums[2]:\n            nums[1],nums[2] = nums[2],nums[1]\n        if nums[2] > nums[0] and nums[2] > nums[1]:\n            nums[2],nums[0] = nums[0],nums[2]\n        return nums\n    if len(nums) > 3:\n        return merge(mergesort(nums[0:len(nums)/2]),len(nums)/2,mergesort(nums[len(nums)/2:len(nums)]),len(nums)/2)\ndef partition(nums,pivot):\n    '''\n    Write a function to partition a list into two sub-lists.\n    '''\n    "
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h=[]\n    for i in nums:\n        hq.heappush(h,-i)\n    res=[]\n    while n>0:\n        res.append(-hq.heappop(h))\n        n-=1\n    return res\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    res=[]\n    for i in range(n):\n        res.append(hq.heappop(nums))\n    return res\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    res=[]\n    for i in range(n):\n        res.append(hq.heappop(nums))\n    return res\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    res=[]\n    for i in range(n):\n        res.append(hq.heappop(nums))\n    return res\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    for i in range(n):\n        hq.heappush(heap,-nums[i])\n    for i in range(n):\n        print(hq.heappop(heap))\n        \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap=[]\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    for i in range(n):\n        print(hq.heappop(heap))\n        \ndef heap_sort(nums):\n    '''\n    Write a function to sort a list of integers using the heap sort algorithm.\n    '''\n    heap=[]\n    for i in range(len(nums)):\n        hq.heappush(heap,nums[i])\n    for i in range(len(nums)):\n        nums[i]=hq.heappop(heap)\n    return nums\n    \ndef merge_sort(nums):\n    '''\n    Write a function to sort a list of integers using the merge sort algorithm.\n    '''\n    if len(nums)>1:\n        mid=len(nums)//2\n        left=nums[:mid]\n        right=nums[mid:]\n        merge_sort(left)\n        merge_sort(right)\n        i=j=k=0\n        while i<len(left) and j<len(right):\n            if left[i]<right[j]:\n                nums[k]=left[i]\n                i+=1\n            else:\n                nums[k]=right[j]\n                j+=1\n            k+=1\n        while i<len(left):\n            nums[k]=left[i]\n            i+=1\n            k+=1\n        while j<len(right):\n            nums[k]=right[j]\n            j+=1\n            k+=1\n    return nums\n    \ndef merge_sort_recursive(nums):\n    if len(nums)>1:\n        mid=len(nums)//2\n        left=nums[:mid]\n        right=nums[mid:]\n        merge_sort_recursive(left)\n        merge_sort_recursive(right)\n        i=j=k=0\n        while i<len(left) and j<len(right):\n            if left[i]<right[j]:\n                nums[k]=left[i]\n                i+=1\n            else:\n                nums[k]=right[j]\n                j+=1\n            k+=1\n        while i<len(left):\n            nums[k]=left[i]\n            i+=1\n            k+=1\n        while j<len(right):\n            nums[k]=right[j]\n            j+=1\n            k+=1\n    return nums\n    \ndef radix_sort(nums):\n    '''\n    Write a function to sort a list of integers using the radix sort algorithm.\n    '''\n    maximum_val=max(nums)\n    max_digits=len(str(maximum_val))\n    buckets
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #print nums\n    largest_numbers = []\n    for x in range(n):\n        hq.heappush(largest_numbers,nums[x])\n    for x in range(n,len(nums)):\n        if nums[x]>largest_numbers[0]:\n            hq.heappushpop(largest_numbers,nums[x])\n    return largest_numbers\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    #print nums\n    smallest_numbers = []\n    for x in range(n):\n        hq.heappush(smallest_numbers,nums[x])\n    for x in range(n,len(nums)):\n        if nums[x]<smallest_numbers[0]:\n            hq.heappushpop(smallest_numbers,nums[x])\n    return smallest_numbers\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n < 0:\n        print('Invalid input')\n        return\n    if not nums:\n        return\n    h = []\n    for i in range(len(nums)):\n        hq.heappush(h,-nums[i])\n    for j in range(n):\n        print(-hq.heappop(h))\n    return\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if n < 0:\n        print('Invalid input')\n        return\n    if not nums:\n        return\n    h = []\n    for i in range(len(nums)):\n        hq.heappush(h,nums[i])\n    for j in range(n):\n        print(hq.heappop(h))\n    return\ndef insert(hq,n):\n    '''\n    Write a function to insert an integer into a Min Heap. The function should return the value of the parent node.\n    '''\n    if not hq or n < 0:\n        print('Invalid input')\n        return\n    hq.append(n)\n    while n < hq[0]:\n        hq[0] = n\n        hq.heapify(0)\n    return hq[0]\ndef delete(hq,n):\n    '''\n    Write a function to delete an element in the Min Heap. The function should return the value of the parent node.\n    '''\n    if not hq or n < 0:\n        print('Invalid input')\n        return\n    if n not in hq:\n        return\n    hq.remove(n)\n    while hq[0]!= n:\n        hq[0] = n\n        hq.heapify(0)\n    return hq[0]\ndef max_heapify(hq,i):\n    '''\n    Heapify the subtree starting from node i in the heap. \n    '''\n    l = i*2 + 1\n    r = i*2 + 2\n    if l <= len(hq) - 1 and hq[l] > hq[i]:\n        largest = l\n    else:\n        largest = i\n    if r <= len(hq) - 1 and hq[r] > hq[largest]:\n        largest = r\n    if largest!= i:\n        hq[i],hq[largest] = hq[largest],hq[i]\n        max_heapify(hq,largest)\n    return\ndef min_heapify(hq,i):\n    '''\n    Heapify the subtree starting from node i in the heap. \n    '''\n    l = i*2 + 1\n    r = i*2 + 2\n    if l <= len(hq) - 1 and hq[l] < hq[i]:\n        smallest = l\n    else:\n        smallest = i\n    if r <= len(hq) - 1 and hq[r] < hq[smallest]:\n        smallest = r\n    if smallest!= i:\n        hq[i],hq[smallest] = hq[smallest],hq[i]\n        min_heapify(hq,smallest)\n    return\ndef heap_sort(hq):\n    '''\n    Write a function to sort the given array using a min-heap.\n    '''\n    for i in range(len(hq)-1,-1,-1):\n        hq[0],hq[i] = hq[i],hq[0]\n        hq.pop()\n        max_heapify(hq,0)\n    return\ndef heap_sort_max(hq):\n    '''\n    Write a function to sort the given array using a max-heap.\n    '''\n    for i in range(len(hq)-1,-1,-1):\n        hq[0],hq[i] = hq[i],hq[0]\n        hq.pop()\n        min_heapify(hq,0)\n    return\ndef heap_sort_max_heap(hq):\n    '''\n    Write a function to sort the given array using a max-heap.\n    '''\n    for i in range(len(hq)-1,-1,-1):\n        hq[0],hq[i] = hq[i],hq[0]\n        hq.pop()\n        hq.heapify(0)\n    return\ndef heap_sort_min(hq):\n    '''\n    Write a function to sort the given array using a min-heap.\n    '''\n    for i in range(len(hq)-1,-1,-1):\n        hq[0],hq[i] = hq[i],hq[0]\n        hq.pop()\n        hq.heapify(0)\n    return\ndef heap_sort_min_heap(hq):\n    '''\n    Write a function to sort the given array using a min-heap.\n    '''\n    for i in range(len(hq)-1,-1,-1):\n        hq[0],hq[i] = hq[i],hq[0]\n        hq.pop()\n        hq.heapify(0)\n    return\ndef heap_sort_max_heap_recursive(hq):\n    '''\n    Write a function to sort the given array using a max-heap.\n    '''\n    hq.sort(reverse = True)\n    return\ndef heap_sort_min_heap_recursive(hq):\n    '''\n    Write a function to sort the given array using a min-heap.\n    '''\n    hq.sort()\n    return\ndef merge_sort(l1,l2):\n    '''\n    Write a function to merge two sorted lists into a new sorted list.\n    '''\n    l3 = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] < l2[j]:\n            l3.append(l1[i])\n            i += 1\n        else:\n            l3.append(l2[j])\n            j += 1\n    while i < len(l1):\n        l3.append(l1[i])\n        i += 1\n    while j < len(l2):\n        l3.append(l2[j])\n        j += 1\n    return l3\ndef merge_sort_recursive(l1,l2,l3 = []):\n    '''\n    Write a function to merge two sorted lists into a new sorted list.\n    '''\n    if not l1 or not l2:\n        return l1 + l2\n    if l1[0] < l2[0]:\n        l3.append(l1[0])\n        l1 = l1[1:]\n    else:\n        l3.append(l2[0])\n        l2 = l2[1:]\n    return merge_sort_recursive(l1,l2,l3)\ndef swap(l1,l2):\n    '''\n    Write a function to swap the first and last elements in a list.\n    '''\n    l1[0],l1[-1] = l1[-1],l1[0]\n    return\ndef reverse(l):\n    '''\n    Write a function to reverse a list.\n    '''\n    l.reverse()\n    return\ndef reverse_recursive(l):\n    '''\n    Write a function to reverse a list.\n    '''\n    if l == []:\n        return []\n    return [l[-1]] + reverse_recursive(l[:-1])\ndef is_sublist(s,t):\n    '''\n    Write a function to determine whether a list is a sublist of another list.\n    '''\n    if len(s) > len(t):\n        return False\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            break\n    if i == len(s) - 1:\n        return True\n    else:\n        return False\ndef is_sublist_recursive(s,"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h =[]\n    for i in nums:\n        hq.heappush(h,i)\n    res = []\n    for i in range(n):\n        res.append(hq.heappop(h))\n    return res\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    h =[]\n    for i in nums:\n        hq.heappush(h,i)\n    res = []\n    for i in range(n):\n        res.append(hq.heappop(h))\n    return res\ndef smallest_k(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    h =[]\n    for i in nums:\n        hq.heappush(h,i)\n    res = []\n    for i in range(n):\n        res.append(hq.heappop(h))\n    return res\ndef smallest_k_heap(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    h =[]\n    for i in nums:\n        hq.heappush(h,i)\n    res = []\n    for i in range(n):\n        res.append(hq.heappop(h))\n    return res\ndef top_k(nums,k):\n    '''\n    Write a function to find the k largest integers from a given list of numbers, returned in descending order.\n    '''\n    h =[]\n    for i in nums:\n        hq.heappush(h,i)\n    res = []\n    for i in range(k):\n        res.append(hq.heappop(h))\n    return res\ndef top_k_heap(nums,k):\n    '''\n    Write a function to find the k largest integers from a given list of numbers, returned in descending order.\n    '''\n    h =[]\n    for i in nums:\n        hq.heappush(h,i)\n    res = []\n    for i in range(k):\n        res.append(hq.heappop(h))\n    return res\ndef partition_in_place(nums,start,end,pivot_index):\n    '''\n    Write a function to partition a list of integers in place around a pivot value and return the new start and end index.\n    '''\n    nums[pivot_index],nums[end] = nums[end],nums[pivot_index]\n    i = start\n    for j in range(start,end):\n        if nums[j]<nums[end]:\n            nums[i],nums[j] = nums[j],nums[i]\n            i+=1\n    nums[i],nums[end] = nums[end],nums[i]\n    return i,end\ndef partition_in_place_max(nums,start,end,pivot_index):\n    '''\n    Write a function to partition a list of integers in place around a pivot value and return the new start and end index.\n    '''\n    nums[pivot_index],nums[end] = nums[end],nums[pivot_index]\n    i = start\n    for j in range(start,end):\n        if nums[j]>nums[end]:\n            nums[i],nums[j] = nums[j],nums[i]\n            i+=1\n    nums[i],nums[end] = nums[end],nums[i]\n    return i,end\ndef k_smallest_pairs(nums1,nums2,k):\n    '''\n    Write a function to find the k smallest pairs (a1,a2) and (b1,b2) from two arrays such that sum of elements of both arrays are less than or equal to a given number.\n    '''\n    n1 = len(nums1)\n    n2 = len(nums2)\n    res = []\n    for i in range(min(n1,n2)):\n        for j in range(min(n1,n2)):\n            if nums1[i]+nums2[j]<=k:\n                res.append([nums1[i],nums2[j]])\n    return res\ndef k_smallest_pairs_heap(nums1,nums2,k):\n    '''\n    Write a function to find the k smallest pairs (a1,a2) and (b1,b2) from two arrays such that sum of elements of both arrays are less than or equal to a given number.\n    '''\n    n1 = len(nums1)\n    n2 = len(nums2)\n    h = []\n    for i in range(min(n1,n2)):\n        hq.heappush(h,(nums1[i]+nums2[i],i,j))\n    res = []\n    for i in range(k):\n        val,ind1,ind2 = hq.heappop(h)\n        res.append([nums1[ind1],nums2[ind2]])\n    return res\ndef k_largest_pairs(nums1,nums2,k):\n    '''\n    Write a function to find the k largest pairs (a1,a2) and (b1,b2) from two arrays such that sum of elements of both arrays are less than or equal to a given number.\n    '''\n    n1 = len(nums1)\n    n2 = len(nums2)\n    res = []\n    for i in range(min(n1,n2)):\n        for j in range(min(n1,n2)):\n            if nums1[i]+nums2[j]>=k:\n                res.append([nums1[i],nums2[j]])\n    return res\ndef k_largest_pairs_heap(nums1,nums2,k):\n    '''\n    Write a function to find the k largest pairs (a1,a2) and (b1,b2) from two arrays such that sum of elements of both arrays are less than or equal to a given number.\n    '''\n    n1 = len(nums1)\n    n2 = len(nums2)\n    h = []\n    for i in range(min(n1,n2)):\n        hq.heappush(h,(-nums1[i]-nums2[i],i,j))\n    res = []\n    for i in range(k):\n        val,ind1,ind2 = hq.heappop(h)\n        res.append([nums1[ind1],nums2[ind2]])\n    return res\ndef find_closest_elements(nums1,nums2,k,target):\n    '''\n    Write a function to find the k closest elements (a1,a2) and (b1,b2) from two arrays such that sum of elements of both arrays are less than or equal to a given number.\n    '''\n    n1 = len(nums1)\n    n2 = len(nums2)\n    h = []\n    for i in range(min(n1,n2)):\n        hq.heappush(h,(abs(nums1[i]+nums2[i]-target),i,j))\n    res = []\n    for i in range(k):\n        val,ind1,ind2 = hq.heappop(h)\n        res.append([nums1[ind1],nums2[ind2]])\n    return res\ndef find_closest_elements_heap(nums1,nums2,k,target):\n    '''\n    Write a function to find the k closest elements (a1,a2) and (b1,b2) from two arrays such that sum of elements of both arrays are less than or equal to a given number.\n    '''\n    n1 = len(nums1)\n    n2 = len(nums2)\n    h = ["
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums:\n        return None\n    max_heap=[]\n    for i in range(n):\n        hq.heappush(max_heap,-nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]>max_heap[0]:\n            hq.heappop(max_heap)\n            hq.heappush(max_heap,-nums[i])\n    return [-x for x in max_heap]\ndef heap_queue_largest2(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums:\n        return None\n    max_heap=[]\n    for i in range(n):\n        hq.heappush(max_heap,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]>max_heap[0]:\n            hq.heappop(max_heap)\n            hq.heappush(max_heap,nums[i])\n    return [x for x in max_heap]\ndef heap_queue_largest3(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums:\n        return None\n    max_heap=[]\n    for i in range(n):\n        hq.heappush(max_heap,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]>max_heap[0]:\n            hq.heappop(max_heap)\n            hq.heappush(max_heap,nums[i])\n    return [x for x in max_heap]\ndef heap_queue_largest4(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums:\n        return None\n    max_heap=[]\n    for i in range(n):\n        hq.heappush(max_heap,(-nums[i],nums[i]))\n    for i in range(n,len(nums)):\n        if nums[i]>max_heap[0][1]:\n            hq.heappop(max_heap)\n            hq.heappush(max_heap,(-nums[i],nums[i]))\n    return [x[1] for x in max_heap]\ndef heap_queue_largest5(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums:\n        return None\n    max_heap=[]\n    for i in range(n):\n        hq.heappush(max_heap,(-nums[i],nums[i]))\n    for i in range(n,len(nums)):\n        if nums[i]>max_heap[0][1]:\n            hq.heappop(max_heap)\n            hq.heappush(max_heap,(-nums[i],nums[i]))\n    return [x[1] for x in max_heap]\ndef heap_queue_largest6(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums:\n        return None\n    max_heap=[]\n    for i in range(n):\n        hq.heappush(max_heap,(-nums[i],nums[i]))\n    for i in range(n,len(nums)):\n        if nums[i]>max_heap[0][1]:\n            hq.heappop(max_heap)\n            hq.heappush(max_heap,(-nums[i],nums[i]))\n    return [x[1] for x in max_heap]\ndef heap_queue_largest7(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums:\n        return None\n    max_heap=[]\n    for i in range(n):\n        hq.heappush(max_heap,(-nums[i],nums[i]))\n    for i in range(n,len(nums)):\n        if nums[i]>max_heap[0][1]:\n            hq.heappop(max_heap)\n            hq.heappush(max_heap,(-nums[i],nums[i]))\n    return [x[1] for x in max_heap]\ndef heap_queue_largest8(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums:\n        return None\n    max_heap=[]\n    for i in range(n):\n        hq.heappush(max_heap,(-nums[i],nums[i]))\n    for i in range(n,len(nums)):\n        if nums[i]>max_heap[0][1]:\n            hq.heappop(max_heap)\n            hq.heappush(max_heap,(-nums[i],nums[i]))\n    return [x[1] for x in max_heap]\ndef heap_queue_largest9(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums:\n        return None\n    max_heap=[]\n    for i in range(n):\n        hq.heappush(max_heap,(-nums[i],nums[i]))\n    for i in range(n,len(nums)):\n        if nums[i]>max_heap[0][1]:\n            hq.heappop(max_heap)\n            hq.heappush(max_heap,(-nums[i],nums[i]))\n    return [x[1] for x in max_heap]\ndef heap_queue_largest10(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums:\n        return None\n    max_heap=[]\n    for i in range(n):\n        hq.heappush(max_heap,(-nums[i],nums[i]))\n    for i in range(n,len(nums)):\n        if nums[i]>max_heap[0][1]:\n            hq.heappop(max_heap)\n            hq.heappush(max_heap,(-nums[i],nums[i]))\n    return [x[1] for x in max_heap]\ndef heap_queue_largest11(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums:\n        return None\n    max_heap=[]\n    for i in range(n):\n        hq.heappush(max_heap,(-nums[i],nums[i]))\n    for i in range(n,len(nums)):\n        if nums[i]>max_heap[0][1]:\n            hq.heappop(max_heap)\n            hq.heappush(max_heap,(-nums[i],nums[i]))\n    return [x[1] for x in max_heap]\ndef heap_queue_largest12(nums,n):\n    '''\n    Write a function to find the n largest integers from a give"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    res = []\n    for i in range(n):\n        res.append(hq.heappop(nums))\n    return res[::-1]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 0: \n        if x & (x - 1): \n            return False\n        else: \n            return True\n    else:\n        return False\n    \nprint (is_Power_Of_Two (5))\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x&(x-1) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return ((x & (x - 1)) == 0)\n    \ndef test_is_Power_Of_Two():\n    assert is_Power_Of_Two(0) == True\n    assert is_Power_Of_Two(1) == True\n    assert is_Power_Of_Two(2) == False\n    assert is_Power_Of_Two(4) == False\n    assert is_Power_Of_Two(7) == False\n    assert is_Power_Of_Two(8) == False\n    assert is_Power_Of_Two(9) == True\n    assert is_Power_Of_Two(0x10) == False\n    assert is_Power_Of_Two(0x11) == True\n    assert is_Power_Of_Two(0x12) == True\n    assert is_Power_Of_Two(0x13) == False\n    \ndef Bit_Reverse (x,n):\n    '''\n    Write a python function to reverse bits of an integer.\n    '''\n    return ((x & (2**n -1)) >> n)\n    \ndef test_Bit_Reverse():\n    assert Bit_Reverse(0,0) == 0\n    assert Bit_Reverse(1,0) == 1\n    assert Bit_Reverse(0x10,2) == 0x10\n    assert Bit_Reverse(0x0011,2) == 0x0011\n    assert Bit_Reverse(0x1023,8) == 0x0011\n    assert Bit_Reverse(0x0123,8) == 0x0011\n    assert Bit_Reverse(0x50000001,32) == 0x0011\n    assert Bit_Reverse(0x0123,8) == 0x0011\n    assert Bit_Reverse(0x50000001,32) == 0x0011\n    assert Bit_Reverse(0x0123,8) == 0x0011\n    assert Bit_Reverse(0x1234,4) == 0x4321\n    assert Bit_Reverse(0x2345,4) == 0x4534\n    assert Bit_Reverse(0x1234,8) == 0x4321\n    assert Bit_Reverse(0x2345,8) == 0x4534\n    \ndef Bit_Reverse_1 (x):\n    '''\n    Write a python function to reverse bits of an integer.\n    '''\n    result = 0\n    for i in range (32):\n        result = result | (Bit_Reverse(x,i) << i)\n    return result\n    \ndef test_Bit_Reverse_1():\n    assert Bit_Reverse_1(0) == 0\n    assert Bit_Reverse_1(1) == 1\n    assert Bit_Reverse_1(2) == 4\n    assert Bit_Reverse_1(3) == 8\n    assert Bit_Reverse_1(4) == 16\n    assert Bit_Reverse_1(5) == 32\n    assert Bit_Reverse_1(6) == 64\n    assert Bit_Reverse_1(7) == 128\n    assert Bit_Reverse_1(8) == 256\n    assert Bit_Reverse_1(9) == 512\n    assert Bit_Reverse_1(10) == 1024\n    assert Bit_Reverse_1(11) == 2048\n    assert Bit_Reverse_1(12) == 4096\n    assert Bit_Reverse_1(13) == 8192\n    assert Bit_Reverse_1(14) == 16384\n    assert Bit_Reverse_1(15) == 32768\n    assert Bit_Reverse_1(16) == 65536\n    assert Bit_Reverse_1(17) == 131072\n    assert Bit_Reverse_1(18) == 262144\n    assert Bit_Reverse_1(19) == 524288\n    assert Bit_Reverse_1(20) == 1048576\n    assert Bit_Reverse_1(21) == 2097152\n    assert Bit_Reverse_1(22) == 4194304\n    assert Bit_Reverse_1(23) == 8388608\n    assert Bit_Reverse_1(24) == 16777216\n    assert Bit_Reverse_1(25) == 33554432\n    assert Bit_Reverse_1(26) == 67108864\n    assert Bit_Reverse_1(27) == 134217728\n    assert Bit_Reverse_1(28) == 268435456\n    assert Bit_Reverse_1(29) == 536870912\n    assert Bit_Reverse_1(30) == 1073741824\n    assert Bit_Reverse_1(31) == 2147483648\n    assert Bit_Reverse_1(32) == 4294967296\n    assert Bit_Reverse_1(33) == 8589934592\n    assert Bit_Reverse_1(34) == 17179869184\n    assert Bit_Reverse_1(35) == 34359738368\n    assert Bit_Reverse_1(36) == 68719476736\n    assert Bit_Reverse_1(37) == 137438953472\n    assert Bit_Reverse_1(38) == 274877906944\n    assert Bit_Reverse_1(39) == 549755813888\n    assert Bit_Reverse_1(40) == 1099511627776\n    assert Bit_Reverse_1(41) == 21990232555544\n    assert Bit_Reverse_1(42) == 4398046511104\n    assert Bit_Reverse_1(43) == 8796093022208\n    assert Bit_Reverse_1(44) == 17592186044416\n    assert Bit_Reverse_1(45) == 35184372088832\n    assert Bit_Reverse_1(46) == 61407769691232\n    assert Bit_Reverse_1(47) == 134217728000\n    assert Bit_Reverse_1(48) == 268435455200\n    assert Bit_Reverse_1(49) == 53687091020016\n    assert Bit_Reverse_1(50) == 1073741824000\n    assert Bit_Reverse_1(51) == 2147483552000\n    assert Bit_Reverse_1(52) == 4294967295000\n    assert Bit_Reverse_1(53) == 858993467295\n    assert Bit_Reverse_1(54) == 17179869087952\n    assert Bit_Reverse_1(55) == 343597383680000\n    assert Bit_Reverse_1(56) == 687194767368000\n    assert Bit_Reverse_1(57) == 137438953472000\n    assert Bit_Reverse_1(58) == 2748779069480000\n    assert Bit_Reverse_1(59) == 54975581388000\n    assert Bit_Reverse_1(60) == 1099511627776000\n    assert Bit_Reverse_1(61) == 21990232555544000\n    assert Bit_Reverse_1(62) == 43980465111040\n    assert Bit_Reverse_1(63) == 879609302220800\n    assert Bit_Reverse_1(64) == 17592186044416000\n    assert Bit_Reverse_1(65) == 35184372088832000\n    assert Bit_Reverse_1(66) == 6140776969123200\n    assert Bit_Reverse_1(67) == 134217728000\n    assert Bit_Reverse_1(68) == 268435455200000\n    assert Bit_Reverse_1(69) == 53687091020000\n    assert Bit_Reverse_1(70) == 1073741824000\n    assert Bit_Reverse_1(71) == 2147483552000\n    assert Bit_Reverse_1(72) == 4294967295000\n    assert Bit_Reverse_1(73) == 858993467295000\n    assert Bit_Reverse_1"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x-1) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x: \n        x &= x - 1\n        return x == 0\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x - 1) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    a = bin(x)\n    b = bin(x+1)\n    \n    if len(a) < len(b):\n        a = a[1:]\n    else:\n        b = b[1:]\n    \n    count = 0\n    \n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            count = count + 1\n    \n    if count == 1:\n        return True\n    else:\n        return False\n    \n    \n    \ndef test_is_Power_Of_Two ():\n    print(is_Power_Of_Two(5))\n    print(is_Power_Of_Two(8))\n    print(is_Power_Of_Two(11))\n    print(is_Power_Of_Two(16))\n    print(is_Power_Of_Two(17))\n    print(is_Power_Of_Two(18))\n    print(is_Power_Of_Two(19))\n    print(is_Power_Of_Two(20))\n    print(is_Power_Of_Two(21))\n    print(is_Power_Of_Two(22))\n    print(is_Power_Of_Two(23))\n    print(is_Power_Of_Two(24))\n    \n    "
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0\ndef to_binary (num):\n    '''\n    Write a python function to convert an integer into its binary representation.\n    '''\n    return \"\".join([str((num >> y) & 1) for y in range(0, 32)])\ndef to_decimal (num):\n    '''\n    Write a python function to convert a binary representation to its decimal representation.\n    '''\n    num = list(num)\n    n = len(num)\n    num = [int(i) for i in num]\n    s = 0\n    for i in range(n):\n        s = s + num[n-i-1]*2**i\n    return s\ndef base_to_convert (num, base):\n    '''\n    Write a python function to convert an integer to any base using the provided base.\n    '''\n    if num < 0:\n        return '-' + base_to_convert(-num, base)\n    elif num == 0:\n        return '0'\n    arr = []\n    while num:\n        arr.append(str(num%base))\n        num = num/base\n    arr.reverse()\n    return \"\".join(arr)\ndef base_to_convert_alt (num, base):\n    '''\n    Write a python function to convert an integer to any base using the provided base.\n    '''\n    if num < 0:\n        return '-' + base_to_convert_alt(-num, base)\n    elif num == 0:\n        return '0'\n    arr = []\n    while num:\n        arr.append(str(num%base))\n        num = num/base\n    arr.reverse()\n    return \"\".join(arr)\ndef base_to_convert_math (num, base):\n    '''\n    Write a python function to convert an integer to any base using the provided base.\n    '''\n    if num < 0:\n        return '-' + base_to_convert_math(-num, base)\n    elif num == 0:\n        return '0'\n    arr = []\n    while num:\n        arr.append(str(num%base))\n        num = num/base\n    arr.reverse()\n    return \"\".join(arr)\ndef base_to_convert_math (num, base):\n    '''\n    Write a python function to convert an integer to any base using the provided base.\n    '''\n    if num < 0:\n        return '-' + base_to_convert_math(-num, base)\n    elif num == 0:\n        return '0'\n    arr = []\n    while num:\n        arr.append(str(num%base))\n        num = num/base\n    arr.reverse()\n    return \"\".join(arr)\ndef base_to_convert_alt (num, base):\n    '''\n    Write a python function to convert an integer to any base using the provided base.\n    '''\n    if num < 0:\n        return '-' + base_to_convert_alt(-num, base)\n    elif num == 0:\n        return '0'\n    arr = []\n    while num:\n        arr.append(str(num%base))\n        num = num/base\n    arr.reverse()\n    return \"\".join(arr)\ndef is_palindrome (num):\n    '''\n    Write a python function to check whether the number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\ndef is_palindrome (num):\n    '''\n    Write a python function to check whether the number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\ndef is_palindrome (num):\n    '''\n    Write a python function to check whether the number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\ndef is_palindrome (num):\n    '''\n    Write a python function to check whether the number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\ndef is_palindrome (num):\n    '''\n    Write a python function to check whether the number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\ndef is_palindrome (num):\n    '''\n    Write a python function to check whether the number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\ndef is_palindrome (num):\n    '''\n    Write a python function to check whether the number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\ndef is_palindrome (num):\n    '''\n    Write a python function to check whether the number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\ndef is_palindrome (num):\n    '''\n    Write a python function to check whether the number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\ndef is_palindrome (num):\n    '''\n    Write a python function to check whether the number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\ndef is_palindrome (num):\n    '''\n    Write a python function to check whether the number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\ndef is_palindrome (num):\n    '''\n    Write a python function to check whether the number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\ndef is_palindrome (num):\n    '''\n    Write a python function to check whether the number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\ndef is_palindrome (num):\n    '''\n    Write a python function to check whether the number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\ndef is_palindrome (num):\n    '''\n    Write a python function to check whether the number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\ndef is_palindrome (num):\n    '''\n    Write a python function to check whether the number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\ndef is_palindrome (num):\n    '''\n    Write a python function to check whether the number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\ndef is_palindrome (num):\n    '''\n    Write a python function to check whether the number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\ndef is_palindrome (num):\n    '''\n    Write a python function to check whether the number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\ndef is_palindrome (num):\n    '''\n    Write a python function to check whether the number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\ndef is_palindrome (num):\n    '''\n    Write a python function to check whether the number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\ndef is_palindrome (num):\n    '''\n    Write a python function to check whether the number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\ndef is_palindrome (num):\n    '''\n    Write a python function to check whether the number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\ndef is_palindrome (num):\n    '''\n    Write a python function to check whether the number is a palindrome.\n    '''\n    return str(num) == st"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text) < 4:\n        return []\n    text = text.split(' ')\n    new_text = []\n    for word in text:\n        if len(word) >= 4:\n            new_text.append(word)\n    return new_text\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    res = re.findall(r'\\b[a-zA-Z]+\\b', text)\n    return res\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    import re\n    pattern = re.compile(r'[a-z]+')\n    \n    lst = pattern.findall(text)\n    \n    lst1 = []\n    \n    for word in lst:\n        if len(word) > 3:\n            lst1.append(word)\n    \n    return lst1\n    \ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at least 4 characters short in a string.\n    '''\n    import re\n    pattern = re.compile(r'[a-z]+')\n    \n    lst = pattern.findall(text)\n    \n    lst1 = []\n    \n    for word in lst:\n        if len(word) < 4:\n            lst1.append(word)\n    \n    return lst1\n    \ndef find_char_only_short(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and at least 4 characters short in a string.\n    '''\n    import re\n    pattern = re.compile(r'[a-z]+')\n    \n    lst = pattern.findall(text)\n    \n    lst1 = []\n    \n    for word in lst:\n        if (len(word) > 3) and (len(word) < 4):\n            lst1.append(word)\n    \n    return lst1\n    \ndef find_char_only_short(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and at least 4 characters short in a string.\n    '''\n    import re\n    pattern = re.compile(r'[a-z]+')\n    \n    lst = pattern.findall(text)\n    \n    lst1 = []\n    \n    for word in lst:\n        if (len(word) > 3) and (len(word) < 4):\n            lst1.append(word)\n    \n    return lst1\n    \ndef find_char_long_short(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and at least 4 characters short in a string.\n    '''\n    import re\n    pattern = re.compile(r'[a-z]+')\n    \n    lst = pattern.findall(text)\n    \n    lst1 = []\n    \n    for word in lst:\n        if (len(word) > 3) and (len(word) < 4):\n            lst1.append(word)\n    \n    return lst1\n    \ndef find_char_long_short(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and at least 4 characters short in a string.\n    '''\n    import re\n    pattern = re.compile(r'[a-z]+')\n    \n    lst = pattern.findall(text)\n    \n    lst1 = []\n    \n    for word in lst:\n        if (len(word) > 3) and (len(word) < 4):\n            lst1.append(word)\n    \n    return lst1\n    \ndef find_all_words(text):\n    '''\n    Write a function to find all words in a string\n    '''\n    import re\n    pattern = re.compile(r'[a-z]+')\n    \n    lst = pattern.findall(text)\n    \n    return lst\n    \ndef find_char_long_short_cap(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and at least 4 characters short in a string.\n    '''\n    import re\n    pattern = re.compile(r'[A-Z]+')\n    \n    lst = pattern.findall(text)\n    \n    lst1 = []\n    \n    for word in lst:\n        if (len(word) > 3) and (len(word) < 4):\n            lst1.append(word)\n    \n    return lst1\n    \ndef find_char_long_short_cap(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and at least 4 characters short in a string.\n    '''\n    import re\n    pattern = re.compile(r'[A-Z]+')\n    \n    lst = pattern.findall(text)\n    \n    lst1 = []\n    \n    for word in lst:\n        if (len(word) > 3) and (len(word) < 4):\n            lst1.append(word)\n    \n    return lst1\n    \ndef find_char_long_short_cap(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and at least 4 characters short in a string.\n    '''\n    import re\n    pattern = re.compile(r'[A-Z]+')\n    \n    lst = pattern.findall(text)\n    \n    lst1 = []\n    \n    for word in lst:\n        if (len(word) > 3) and (len(word) < 4):\n            lst1.append(word)\n    \n    return lst1\n    \ndef find_char_long_short_cap(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and at least 4 characters short in a string.\n    '''\n    import re\n    pattern = re.compile(r'[A-Z]+')\n    \n    lst = pattern.findall(text)\n    \n    lst1 = []\n    \n    for word in lst:\n        if (len(word) > 3) and (len(word) < 4):\n            lst1.append(word)\n    \n    return lst1\n    \ndef find_char_long_short_cap(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and at least 4 characters short in a string.\n    '''\n    import re\n    pattern = re.compile(r'[A-Z]+')\n    \n    lst = pattern.findall(text)\n    \n    lst1 = []\n    \n    for word in lst:\n        if (len(word) > 3) and (len(word) < 4):\n            lst1.append(word)\n    \n    return lst1\n    \ndef find_char_long_short_cap(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and at least 4 characters short in a string.\n    '''\n    import re\n    pattern = re.compile(r'[A-Z]+')\n    \n    lst = pattern.findall(text)\n    \n    lst1 = []\n    \n    for word in lst:\n        if (len(word) > 3) and (len(word) < 4):\n            lst1.append(word)\n    \n    return lst1\n    \ndef find_char_long_short_cap(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and at least 4 characters short in a string.\n    '''\n    import re\n    pattern = re.compile(r'[A-Z]+')\n    \n    lst = pattern.findall(text)\n    \n    lst1 = []\n    \n    for word in lst:\n        if (len(word) > 3) and (len(word) < 4):\n            lst1.append(word)\n    \n    return lst1\n    \ndef find_char_long_short_cap(text):\n    '''\n    Write a function to find all words which are at least 4 characters long and at least 4 characters short in a string.\n    '''\n    import re\n    pattern = re.compile(r'[A-Z]+')\n    \n    lst = pattern.findall(text)\n    \n    lst1 = []\n    \n    for word in lst:\n        if (len(word) > 3) and (len(word) < 4):\n            lst1.append(word)\n    \n    return lst1\n    \ndef find_char_long_short_cap(text):\n    '''\n    Write a function to find all words which are at least "
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile('\\w{4,}')\n    for word in pattern.findall(text):\n        print(word)\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    word_list = []\n    for word in re.findall(r'\\w{4,}', text):\n        word_list.append(word)\n    return word_list\n    \ndef find_char_long_2(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return [word for word in re.findall(r'\\w{4,}', text) if len(word)>4]\n    \ndef test_find_char_long():\n    assert find_char_long_2('This is a test!') == ['is', 'a', 'test']\n    \ndef find_char_long_3(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return [word for word in re.findall(r'\\w{4,}', text) if len(word)>4]\n    \ndef test_find_char_long_3():\n    assert find_char_long_3('This is a test!') == ['is', 'a', 'test']\n    \ndef find_char_long_4(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return [word for word in re.findall(r'\\w{4,}', text) if len(word)>4]\n    \ndef test_find_char_long_4():\n    assert find_char_long_4('This is a test!') == ['is', 'a', 'test']\n    \ndef find_char_long_5(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return [word for word in re.findall(r'\\w{4,}', text) if len(word)>4]\n    \ndef test_find_char_long_5():\n    assert find_char_long_5('This is a test!') == ['is', 'a', 'test']\n    \ndef find_char_long_6(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return [word for word in re.findall(r'\\w{4,}', text) if len(word)>4]\n    \ndef test_find_char_long_6():\n    assert find_char_long_6('This is a test!') == ['is', 'a', 'test']\n    \ndef find_char_long_7(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return [word for word in re.findall(r'\\w{4,}', text) if len(word)>4]\n    \ndef test_find_char_long_7():\n    assert find_char_long_7('This is a test!') == ['is', 'a', 'test']\n    \ndef find_char_long_8(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return [word for word in re.findall(r'\\w{4,}', text) if len(word)>4]\n    \ndef test_find_char_long_8():\n    assert find_char_long_8('This is a test!') == ['is', 'a', 'test']\n    \ndef find_char_long_9(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return [word for word in re.findall(r'\\w{4,}', text) if len(word)>4]\n    \ndef test_find_char_long_9():\n    assert find_char_long_9('This is a test!') == ['is', 'a', 'test']\n    \ndef find_char_long_10(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return [word for word in re.findall(r'\\w{4,}', text) if len(word)>4]\n    \ndef test_find_char_long_10():\n    assert find_char_long_10('This is a test!') == ['is', 'a', 'test']\n    \ndef find_char_long_11(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return [word for word in re.findall(r'\\w{4,}', text) if len(word)>4]\n    \ndef test_find_char_long_11():\n    assert find_char_long_11('This is a test!') == ['is', 'a', 'test']\n    \ndef find_char_long_12(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return [word for word in re.findall(r'\\w{4,}', text) if len(word)>4]\n    \ndef test_find_char_long_12():\n    assert find_char_long_12('This is a test!') == ['is', 'a', 'test']\n    \ndef find_char_long_13(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return [word for word in re.findall(r'\\w{4,}', text) if len(word)>4]\n    \ndef test_find_char_long_13():\n    assert find_char_long_13('This is a test!') == ['is', 'a', 'test']\n    \ndef find_char_long_14(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return [word for word in re.findall(r'\\w{4,}', text) if len(word)>4]\n    \ndef test_find_char_long_14():\n    assert find_char_long_14('This is a test!') == ['is', 'a', 'test']\n    \ndef find_char_long_15(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return [word for word in re.findall(r'\\w{4,}', text) if len(word)>4]\n    \ndef test_find_char_long_15():\n    assert find_char_long_15('This is a test!') == ['is', 'a', 'test']\n    \ndef find_char_long_16(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return [word for word in re.findall(r'\\w{4,}', text) if len(word)>4]\n    \ndef test_find_char_long_16():\n    assert find_char_long_16('This is a test!') == ['is', 'a', 'test']\n    \ndef find_char_long_17(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return [word for word in re.findall(r'\\w{4,}', text) if len(word)>4]\n    \ndef test_find_char_long_17():\n    assert find_char_long_17('This is a test!') == ['is', 'a', 'test']\n    \ndef find_char_long_18(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return [word for word in re.findall(r'\\w{4,}', text) if len(word)>4]\n    \ndef test_find_char_long_18():\n    assert find_char_long_18('This is a test!') == ['is', 'a', 'test']\n    \ndef find_char_long_1"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    def find_words(text):\n        if not text:\n            return []\n        else:\n            #find all word in a text\n            word_list = re.findall('[a-zA-Z]+', text)\n            #print word_list\n            #print map(lambda x:x.lower(), word_list)\n            #remove all duplicate word\n            res = []\n            for word in word_list:\n                if word not in res:\n                    res.append(word.lower())\n            return res\n    words = find_words(text)\n    res = []\n    for word in words:\n        if len(word)>=4:\n            res.append(word)\n    return res\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text = text.split()\n    return [word for word in text if len(word)>3]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    wordlist = re.findall(r'\\w+', text)\n    return [word for word in wordlist if len(word) >= 4]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    res = []\n    for i in text.split(' '):\n        if len(i) > 3:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    for word in text.split():\n        if len(word) >= 4:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x*x for x in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] * nums[i]\n    return nums\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str)==0:\n        return 0\n    else:\n        for i in range(len(str)):\n            if str[i:]==str[i:][::-1]:\n                return 1+find_Rotations(str[i:])\n        return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    for i in range(len(str)): \n        if str[i:] == str[i:][::-1]: \n            return len(str) - i \n    return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    for i in range(0,len(str)-1):\n        if str[i:] == str[i:][::-1]:\n            rotations += 1\n            break\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    if len(str) <= 1:\n        return rotations\n    for i in range(0, len(str)):\n        if str[0:i] == str[i:len(str)]:\n            rotations = rotations + 1\n            if len(str[i:]) == 1:\n                return rotations\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    length = len(str)\n    for i in range(length):\n        new_str = str[i:]+str[:i]\n        if new_str == str:\n            return 0\n        \n        else:\n            continue\n    return 1\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def find_Rotations_2(str):\n        rotations = 0\n        strlen = len(str)\n        # Base Case\n        if (strlen == 0):\n            return 0\n        # If the string has only one character, there is no rotation\n        if (strlen == 1):\n            return 0\n        # Find the index of the first and last characters of the string\n        first_char = str[0]\n        last_char = str[strlen - 1]\n        # If the first and last characters are the same, there is no rotation\n        if (first_char == last_char):\n            return 0\n        # If the first character and the last character are not same, we have at least one rotation\n        # Move forward one element in the string\n        i = 1\n        while (i < strlen):\n            # If the next element in the string is the first element of the original string, \n            # then we have a rotation\n            if (str[i] == first_char):\n                rotations += 1\n            # Move forward one element in the string\n            i += 1\n        return rotations\n    \n    def find_Rotations_3(str):\n        rotations = 0\n        strlen = len(str)\n        # Base Case\n        if (strlen == 0):\n            return 0\n        # If the string has only one character, there is no rotation\n        if (strlen == 1):\n            return 0\n        # Find the index of the first and last characters of the string\n        first_char = str[0]\n        last_char = str[strlen - 1]\n        # If the first and last characters are the same, there is no rotation\n        if (first_char == last_char):\n            return 0\n        # If the first character and the last character are not same, we have at least one rotation\n        # Move forward one element in the string\n        i = 1\n        while (i < strlen):\n            # If the next element in the string is the first element of the original string, \n            # then we have a rotation\n            if (str[i] == first_char):\n                rotations += 1\n            # Move forward one element in the string\n            i += 1\n        return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    for i in range(len(str)):\n        if str[i:] == str[i:][::-1]:\n            return i\n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if not str:\n        return 0\n    \n    rotations = 0\n    i = 0\n    while i < len(str):\n        if str[i:] == str[i:][::-1]:\n            rotations += 1\n            i += 1\n        else:\n            return rotations\n    return rotations\n    \n    \ndef find_minRotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if not str:\n        return 0\n    \n    rotations = 0\n    i = len(str)-1\n    while i >= 0:\n        if str[i:] == str[i:][::-1]:\n            rotations += 1\n            i -= 1\n        else:\n            return rotations\n    return rotations\n    \n    \ndef find_Rotations_2(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if not str:\n        return 0\n    \n    rotations = 0\n    i = len(str)-1\n    while i >= 0:\n        if str[i:] == str[i:][::-1]:\n            rotations += 1\n            i -= 1\n        else:\n            return rotations\n    return rotations\n    \n    \ndef find_Rotations_3(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if not str:\n        return 0\n    \n    rotations = 0\n    i = len(str)-1\n    while i >= 0:\n        if str[i:] == str[i:][::-1]:\n            rotations += 1\n            i -= 1\n        else:\n            return rotations\n    return rotations\n    \n    \ndef find_Rotations_4(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if not str:\n        return 0\n    \n    rotations = 0\n    i = 0\n    while i < len(str)-1:\n        if str[i:] == str[i:][::-1]:\n            rotations += 1\n            i += 1\n        else:\n            return rotations\n    return rotations\n    \n    \ndef find_Rotations_5(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if not str:\n        return 0\n    \n    rotations = 0\n    i = 0\n    while i < len(str)-1:\n        if str[i:] == str[i:][::-1]:\n            rotations += 1\n            i += 1\n        else:\n            return rotations\n    return rotations\n    \n    \ndef find_Rotations_6(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if not str:\n        return 0\n    \n    rotations = 0\n    i = 0\n    while i < len(str)-1:\n        if str[i:] == str[i:][::-1]:\n            rotations += 1\n            i += 1\n        else:\n            return rotations\n    return rotations\n    \n    \ndef find_Rotations_7(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if not str:\n        return 0\n    \n    rotations = 0\n    i = 0\n    while i < len(str)-1:\n        if str[i:] == str[i:][::-1]:\n            rotations += 1\n            i += 1\n        else:\n            return rotations\n    return rotations\n    \n    \ndef find_Rotations_8(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if not str:\n        return 0\n    \n    rotations = 0\n    i = 0\n    while i < len(str)-1:\n        if str[i:] == str[i:][::-1]:\n            rotations += 1\n            i += 1\n        else:\n            return rotations\n    return rotations\n    \n    \ndef find_Rotations_9(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if not str:\n        return 0\n    \n    rotations = 0\n    i = 0\n    while i < len(str)-1:\n        if str[i:] == str[i:][::-1]:\n            rotations += 1\n            i += 1\n        else:\n            return rotations\n    return rotations\n    \n    \ndef find_Rotations_10(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if not str:\n        return 0\n    \n    rotations = 0\n    i = 0\n    while i < len(str)-1:\n        if str[i:] == str[i:][::-1]:\n            rotations += 1\n            i += 1\n        else:\n            return rotations\n    return rotations\n    \n    \ndef find_Rotations_11(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if not str:\n        return 0\n    \n    rotations = 0\n    i = 0\n    while i < len(str)-1:\n        if str[i:] == str[i:][::-1]:\n            rotations += 1\n            i += 1\n        else:\n            return rotations\n    return rotations\n    \n    \ndef find_Rotations_12(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if not str:\n        return 0\n    \n    rotations = 0\n    i = 0\n    while i < len(str)-1:\n        if str[i:] == str[i:][::-1]:\n            rotations += 1\n            i += 1\n        else:\n            return rotations\n    return rotations\n    \n    \ndef find_Rotations_13(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if not str:\n        return 0\n    \n    rotations = 0\n    i = 0\n    while i < len(str)-1:\n        if str[i:] == str[i:][::-1]:\n            rotations += 1\n            i += 1\n        else:\n            return rotations\n    return rotations\n    \n    \ndef find_Rotations_14(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if not str:\n        return 0\n    \n    rotations = 0\n    i = 0\n    while i < len(str)-1:\n        if str[i:] == str[i:][::-1]:\n            rotations += 1\n            i += 1\n        else:\n            return rotations\n    return rotations\n    \n    \ndef find_Rotations_15(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if not str:\n        return 0\n    \n    rotations = 0\n    i = 0\n    while i < len(str)-1:\n        if str[i:] == str[i:][::-1]:\n            rotations += 1\n            i += 1\n        else:\n            return rotations\n    return rotations\n    \n    \ndef find_Rotations_16(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required t"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    str_len = len(str)\n    for i in range(str_len):\n        if str[i:] == str[i:][::-1]:\n            rotations += 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    \n    # if string length is 0, return 0\n    if(n == 0):\n        return 0\n    \n    # if string length is 1, return 1\n    if(n == 1):\n        return 1\n    \n    # if string length is 2, return 0 if aab and aba are same or 1 if not same\n    if(n == 2):\n        if(str[0] == str[1]):\n            return 0\n        else:\n            return 1\n    \n    # if string length is 3, return 0 if aab, aa, or ab are same or 1 if not same\n    if(n == 3):\n        if(str[0] == str[2] and str[1] == str[0]):\n            return 0\n        elif(str[1] == str[2] and str[0] == str[1]):\n            return 0\n        elif(str[2] == str[1] and str[0] == str[2]):\n            return 0\n        else:\n            return 1\n    \n    # if string length is 4, return 0 if aaba, aa, a, or ab are same or 1 if not same\n    if(n == 4):\n        if(str[0] == str[3] and str[1] == str[0] and str[2] == str[1]):\n            return 0\n        elif(str[1] == str[3] and str[0] == str[1] and str[2] == str[0]):\n            return 0\n        elif(str[2] == str[3] and str[0] == str[2] and str[1] == str[0]):\n            return 0\n        else:\n            return 1\n    \n    # if string length is 5, return 0 if aabb, aa, a, ab, or aba are same or 1 if not same\n    if(n == 5):\n        if(str[0] == str[4] and str[1] == str[0] and str[2] == str[1] and str[3] == str[2]):\n            return 0\n        elif(str[1] == str[4] and str[0] == str[1] and str[2] == str[0] and str[3] == str[2]):\n            return 0\n        elif(str[2] == str[4] and str[0] == str[2] and str[1] == str[0] and str[3] == str[1]):\n            return 0\n        elif(str[3] == str[4] and str[0] == str[3] and str[1] == str[0] and str[2] == str[1]):\n            return 0\n        else:\n            return 1\n    \n    # if string length is 6, return 0 if aabbb, aa, a, ab, aba, or abba are same or 1 if not same\n    if(n == 6):\n        if(str[0] == str[5] and str[1] == str[0] and str[2] == str[1] and str[3] == str[2] and str[4] == str[3]):\n            return 0\n        elif(str[1] == str[5] and str[0] == str[1] and str[2] == str[0] and str[3] == str[2] and str[4] == str[3]):\n            return 0\n        elif(str[2] == str[5] and str[0] == str[2] and str[1] == str[0] and str[3] == str[1] and str[4] == str[2]):\n            return 0\n        elif(str[3] == str[5] and str[0] == str[3] and str[1] == str[0] and str[2] == str[1] and str[4] == str[2]):\n            return 0\n        elif(str[4] == str[5] and str[0] == str[4] and str[1] == str[0] and str[2] == str[1] and str[3] == str[2]):\n            return 0\n        else:\n            return 1\n    \n    # if string length is 7, return 0 if aabbbba, aa, a, ab, aba, abb, or abbaa are same or 1 if not same\n    if(n == 7):\n        if(str[0] == str[6] and str[1] == str[0] and str[2] == str[1] and str[3] == str[2] and str[4] == str[3] and str[5] == str[4]):\n            return 0\n        elif(str[1] == str[6] and str[0] == str[1] and str[2] == str[0] and str[3] == str[2] and str[4] == str[3] and str[5] == str[4]):\n            return 0\n        elif(str[2] == str[6] and str[0] == str[2] and str[1] == str[0] and str[3] == str[1] and str[4] == str[2] and str[5] == str[3]):\n            return 0\n        elif(str[3] == str[6] and str[0] == str[3] and str[1] == str[0] and str[2] == str[1] and str[4] == str[2] and str[5] == str[4]):\n            return 0\n        elif(str[4] == str[6] and str[0] == str[4] and str[1] == str[0] and str[2] == str[1] and str[3] == str[2] and str[5] == str[3]):\n            return 0\n        elif(str[5] == str[6] and str[0] == str[5] and str[1] == str[0] and str[2] == str[1] and str[3] == str[2] and str[4] == str[3]):\n            return 0\n        else:\n            return 1\n    \n    # if string length is 8, return 0 if aabbbbaa, aa, a, ab, aba, abb, or abbaab are same or 1 if not same\n    if(n == 8):\n        if(str[0] == str[7] and str[1] == str[0] and str[2] == str[1] and str[3] == str[2] and str[4] == str[3] and str[5] == str[4] and str[6] == str[5]):\n            return 0\n        elif(str[1] == str[7] and str[0] == str[1] and str[2] == str[0] and str[3] == str[2] and str[4] == str[3] and str[5] == str[4] and str[6] == str[5]):\n            return 0\n        elif(str[2] == str[7] and str[0] == str[2] and str[1] == str[0] and str[3] == str[1] and str[4] == str[2] and str[5] == str[3] and str[6] == str[4]):\n            return 0\n        elif(str[3] == str[7] and str[0] == str[3] and str[1] == str[0] and str[2] == str[1] and str[4] == str[2] and str[5] == str[4] and str[6] == str[5]):\n            return 0\n        elif(str[4] == str[7] and str[0] == str[4] and str[1] == str[0] and str[2] == str[1] and str[3] == str[2] and str[5] == str[3] and str[6] == str[5]):\n            return 0\n        elif(str[5] == str[7] and str[0] == str[5] and str[1] == str[0] and str[2] == str[1] and str[3] == str[2] and str[4] == str[3] and str[6] == str[4]):\n            return 0\n    "
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\",1).replace(ch,\"\",1)\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s[0] == ch:\n        return s[1:]\n    if s[-1] == ch:\n        return s[:-1]\n    else:\n        return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\",1).replace(ch,\"\",1)\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    new_s = s[:ch] + s[ch+1:]\n    return new_s\n    \ndef remove_AllOcc(s,ch): \n    '''\n    Write a python function to remove all occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')\n    \ndef find_FirstOcc(s,ch): \n    '''\n    Write a python function to find first occurrence of a given character from the string.\n    '''\n    return s.find(ch)\n    \ndef find_LastOcc(s,ch): \n    '''\n    Write a python function to find last occurrence of a given character from the string.\n    '''\n    return s.rfind(ch)\n    \ndef cut(s,ch,ind): \n    '''\n    Write a python function to cut out all characters before and after a given character.\n    '''\n    return s[s.find(ch)+1:s.rfind(ch)]\n    \ndef count_Ch(s,ch): \n    '''\n    Write a python function to count the number of occurrences of a given character in a string.\n    '''\n    return s.count(ch)\n    \ndef replace_Ch(s,ch,new_ch): \n    '''\n    Write a python function to replace a given character with a new character in a string.\n    '''\n    return s.replace(ch,new_ch)\n    \ndef replace_Ch_All(s,ch,new_ch): \n    '''\n    Write a python function to replace all occurrences of a given character with a new character in a string.\n    '''\n    return s.replace(ch,new_ch)\n    \ndef replace_Ch_FirstOcc(s,ch,new_ch): \n    '''\n    Write a python function to replace first occurrence of a given character with a new character in a string.\n    '''\n    return s[:s.find(ch)+1] + new_ch + s[s.rfind(ch)+1:]\n    \ndef replace_Ch_LastOcc(s,ch,new_ch): \n    '''\n    Write a python function to replace last occurrence of a given character with a new character in a string.\n    '''\n    return s[:s.rfind(ch)] + new_ch + s[s.find(ch)+1:]\n    \ndef cut_All(s,ch): \n    '''\n    Write a python function to cut out all characters in a given string.\n    '''\n    return s[s.find(ch)+1:s.rfind(ch)]\n    \ndef count_Ch_All(s,ch): \n    '''\n    Write a python function to count the number of occurrences of a given character in a string.\n    '''\n    return s.count(ch)\n    \ndef swap_Ch(s,ch1,ch2): \n    '''\n    Write a python function to swap the first and last occurrence of two characters in a string.\n    '''\n    return s[:s.find(ch1)] + ch2 + s[s.rfind(ch2):]\n    \ndef swap_Ch_All(s,ch1,ch2): \n    '''\n    Write a python function to swap all occurrences of two characters in a string.\n    '''\n    return s[:s.find(ch1)] + ch2 + s[s.rfind(ch2):]\n    \ndef reverse_Ch(s,ch1,ch2): \n    '''\n    Write a python function to reverse a substring in a string.\n    '''\n    return s[:s.find(ch1)] + s[s.rfind(ch1):s.find(ch2)] + s[s.find(ch2)+1:s.rfind(ch2)] + s[s.rfind(ch2)+1:]\n    \ndef reverse_Ch_All(s,ch1,ch2): \n    '''\n    Write a python function to reverse all occurrences of a substring in a string.\n    '''\n    return s[:s.find(ch1)] + s[s.rfind(ch1):s.find(ch2)] + s[s.find(ch2)+1:s.rfind(ch2)] + s[s.rfind(ch2)+1:]\n    \ndef sort_Ch(s,ch1,ch2): \n    '''\n    Write a python function to sort a substring in a string.\n    '''\n    return ''.join(sorted(s[s.find(ch1):s.find(ch2)],reverse=True)) + s[s.rfind(ch2):]\n    \ndef sort_Ch_All(s,ch1,ch2): \n    '''\n    Write a python function to sort all occurrences of a substring in a string.\n    '''\n    return ''.join(sorted(s[s.find(ch1):s.find(ch2)],reverse=True)) + s[s.rfind(ch2):]\n    \ndef sort_Ch_All_Reversed(s,ch1,ch2): \n    '''\n    Write a python function to sort all occurrences of a substring in a string.\n    '''\n    return ''.join(sorted(s[s.find(ch1):s.find(ch2)],reverse=False)) + s[s.rfind(ch2):]\n    \ndef is_Perm(s1,s2): \n    '''\n    Write a python function to check if a string is a permutation of another string.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        s1_ch = {}\n        s2_ch = {}\n        for i in range(len(s1)):\n            if s1[i] not in s1_ch:\n                s1_ch[s1[i]] = 0\n            s1_ch[s1[i]] += 1\n        for i in range(len(s2)):\n            if s2[i] not in s2_ch:\n                s2_ch[s2[i]] = 0\n            s2_ch[s2[i]] += 1\n        return s1_ch == s2_ch\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.replace(ch,'')\n    s=s.replace(ch,'')\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # n = len(s)\n    # if ch not in s: \n    #     return s \n    # else:\n    #     s = s.replace(ch,'')\n    #     n = len(s)\n    # return s[:n-1]+s[-1]\n    return s.replace(ch,'',1)\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i = s.find(ch)\n    return s[:i]+s[i+1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i = s.find(ch)\n    if i!= -1:\n        s = s[:i] + s[i+1:]\n    else:\n        print(\"Error\")\n    i = s.rfind(ch)\n    if i!= -1:\n        s = s[:i] + s[i+1:]\n    else:\n        print(\"Error\")\n    return s\n    \ndef common_char(s1,s2): \n    '''\n    Write a python function to find the common characters in two strings and return them in a list.\n    '''\n    c = set(s1) & set(s2)\n    l = list(c)\n    return l\n    \ndef word_length(s):\n    '''\n    Write a python function to find the length of words in a string.\n    '''\n    return len(s.split())\n    \ndef remove_char(s,ch):\n    '''\n    Write a python function to remove given character from the string.\n    '''\n    s = s.replace(ch,'')\n    return s\n    \ndef multiply_string(s):\n    '''\n    Write a python function to find the number of times a substring occurs in a string.\n    '''\n    return s.count(s)\n    \ndef capitalize_string(s):\n    '''\n    Write a python function to capitalize the first letter of each word in a string.\n    '''\n    return s.title()\n    \ndef reverse_string(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef sort_string(s):\n    '''\n    Write a python function to sort the words in a string.\n    '''\n    return''.join(sorted(s.split()))\n    \ndef smallest_string(s):\n    '''\n    Write a python function to find the smallest word in a string.\n    '''\n    l = s.split()\n    return min(l,key=len)\n    \ndef count_vowels(s):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    v = ['a','e','i','o','u']\n    c = 0\n    for ch in s:\n        if ch in v:\n            c += 1\n    return c\n    \ndef swap_char(s,i,j):\n    '''\n    Write a python function to swap characters at two given indices in a string.\n    '''\n    t = s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]\n    return t\n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef word_count(s):\n    '''\n    Write a python function to count the number of words in a string.\n    '''\n    return len(s.split())\n    \ndef replace_space(s):\n    '''\n    Write a python function to replace spaces in a string with another character.\n    '''\n    return s.replace(' ','@')\n    \ndef unique_char(s):\n    '''\n    Write a python function to find the number of unique characters in a string.\n    '''\n    c = list(set(s))\n    return len(c)\n    \ndef word_count_dict(s):\n    '''\n    Write a python function to count the number of times each word occurs in a string.\n    '''\n    d = {}\n    for w in s.split():\n        if w in d:\n            d[w] += 1\n        else:\n            d[w] = 1\n    return d\n    \ndef find_index(s,c):\n    '''\n    Write a python function to find the first index of a character in a string.\n    '''\n    i = 0\n    for ch in s:\n        if ch == c:\n            return i\n        i += 1\n    return -1\n    \ndef replace_char(s,c,r):\n    '''\n    Write a python function to replace a character with another in a string.\n    '''\n    return s.replace(c,r)\n    \ndef word_break(s,l):\n    '''\n    Write a python function to check if a string can be segmented into a set of words such that each word is a valid word in a dictionary.\n    '''\n    i = 0\n    j = 0\n    while i < len(s):\n        if s[i:j+1] in l:\n            i = j+1\n            j = i\n        else:\n            j += 1\n        if j == len(s):\n            return True\n    return False\n    \ndef split_word(s):\n    '''\n    Write a python function to split a string into words.\n    '''\n    return s.split()\n    \ndef is_substring(s,t):\n    '''\n    Write a python function to check if a string is a substring of another string.\n    '''\n    return s in t\n    \ndef find_alphabet(s):\n    '''\n    Write a python function to find the alphabetical order of a character.\n    '''\n    l = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    for i in range(len(l)):\n        if l[i] == s:\n            return i\n    return -1\n    \ndef find_anagram(s,t):\n    '''\n    Write a python function to find if two strings are anagrams or not.\n    '''\n    s = s.lower()\n    t = t.lower()\n    if len(s)!= len(t):\n        return False\n    return sorted(s) == sorted(t)\n    \ndef find_triplets(s):\n    '''\n    Write a python function to find all triplets in a string.\n    '''\n    n = len(s)\n    if n < 3:\n        return []\n    c = [0] * n\n    for i in range(1,n-1):\n        if s[i] > s[i-1]:\n            c[i] = c[i-1] + 1\n        else:\n            c[i] = 0\n    l = []\n    for i in range(n-2):\n        if s[i+1] > s[i]:\n            l.append((s[i],s[i+1]))\n    l.sort()\n    for i in range(len(l)):\n        p = i + 1\n        q = len(l) - 1\n        while p < q:\n            if (l[p][1],l[q][0]) == (s[i],s[i+1]):\n                l.pop(q)\n                q -= 1\n            p += 1\n            q -= 1\n    return l\n    \ndef find_duplicate_triplets(s):\n    '''\n    Write a python function to find all duplicate triplets in a string.\n    '''\n    n = len(s)\n    if n < 3:\n        return []\n    c = [0] * n\n    for i in range(1,n-1):\n        if s[i] > s[i-1]:\n            c[i] = c[i-1] + 1\n        else:\n            c[i] = 0\n    l = []\n    for i in range(n-2):\n        if s[i+1] > s[i]:\n            l.append((s[i],s[i+1]))\n    l.sort()\n    for i in range(len(l)):\n        p = i + 1\n        q = len(l) - 1\n        while p < q:\n            if (l[p][1],l[q][0]) == (s[i],s[i+1]):\n                l.pop(q)\n                q -= 1\n            p += 1\n            q -= 1\n    return l\n    \ndef find_anagram_pairs(s,t):\n    '''\n    Write a python function to find the anagram pairs in a strin"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    str = s\n    return str.replace(ch, \"\",1)\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1).replace(ch, '', 1)\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Solution 1\n    m, n = len(M), len(M[0])\n    for i in range(m):\n        for j in range(m):\n            if j == 0:\n                M[i][j] = M[i][j]\n            else:\n                M[i][j] = M[i][j] + M[i][j-1]\n    for i in range(m):\n        for j in range(m):\n            if j == m-1:\n                M[i][j] = M[i][j]\n            else:\n                M[i][j] = M[i][j] + M[i][j+1]\n    for i in range(m):\n        for j in range(n):\n            if j == n-1:\n                M[i][j] = M[i][j]\n            else:\n                M[i][j] = M[i][j] + M[i][j+1]\n    for i in range(m):\n        for j in range(n):\n            if j == n-1:\n                M[i][j] = M[i][j]\n            else:\n                M[i][j] = M[i][j] + M[i][j+1]\n    for i in range(m):\n        for j in range(n):\n            if j == n-1:\n                M[i][j] = M[i][j]\n            else:\n                M[i][j] = M[i][j] + M[i+1][j]\n    for i in range(m):\n        for j in range(n):\n            if j == n-1:\n                M[i][j] = M[i][j]\n            else:\n                M[i][j] = M[i][j] + M[i+1][j]\n    for i in range(m):\n        for j in range(n):\n            if j == n-1:\n                M[i][j] = M[i][j]\n            else:\n                M[i][j] = M[i][j] + M[i][j+1]\n    # Solution 2\n    # m, n = len(M), len(M[0])\n    # for i in range(m):\n    #     for j in range(n):\n    #         if j == 0:\n    #             M[i][j] = M[i][j]\n    #         else:\n    #             M[i][j] = M[i][j] + M[i][j-1]\n    # for i in range(m):\n    #     for j in range(n):\n    #         if j == n-1:\n    #             M[i][j] = M[i][j]\n    #         else:\n    #             M[i][j] = M[i][j] + M[i][j+1]\n    # for i in range(m):\n    #     for j in range(n):\n    #         if j == n-1:\n    #             M[i][j] = M[i][j]\n    #         else:\n    #             M[i][j] = M[i][j] + M[i+1][j]\n    # for i in range(m):\n    #     for j in range(n):\n    #         if j == n-1:\n    #             M[i][j] = M[i][j]\n    #         else:\n    #             M[i][j] = M[i][j] + M[i+1][j]\n    # for i in range(m):\n    #     for j in range(n):\n    #         if j == n-1:\n    #             M[i][j] = M[i][j]\n    #         else:\n    #             M[i][j] = M[i][j] + M[i][j+1]\n    # for i in range(m):\n    #     for j in range(n):\n    #         if j == n-1:\n    #             M[i][j] = M[i][j]\n    #         else:\n    #             M[i][j] = M[i][j] + M[i+1][j]\n    # for i in range(m):\n    #     for j in range(n):\n    #         if j == n-1:\n    #             M[i][j] = M[i][j]\n    #         else:\n    #             M[i][j] = M[i][j] + M[i][j+1]\n    # for i in range(m):\n    #     for j in range(n):\n    #         if j == n-1:\n    #             M[i][j] = M[i][j]\n    #         else:\n    #             M[i][j] = M[i][j] + M[i+1][j]\n    # for i in range(m):\n    #     for j in range(n):\n    #         if j == n-1:\n    #             M[i][j] = M[i][j]\n    #         else:\n    #             M[i][j] = M[i][j] + M[i+1][j]\n    # for i in range(m):\n    #     for j in range(n):\n    #         if j == n-1:\n    #             M[i][j] = M[i][j]\n    #         else:\n    #             M[i][j] = M[i][j] + M[i][j+1]\n    # for i in range(m):\n    #     for j in range(n):\n    #         if j == n-1:\n    #             M[i][j] = M[i][j]\n    #         else:\n    #             M[i][j] = M[i][j] + M[i][j+1]\n    # for i in range(m):\n    #     for j in range(n):\n    #         if j == n-1:\n    #             M[i][j] = M[i][j]\n    #         else:\n    #             M[i][j] = M[i][j] + M[i+1][j]\n    # for i in range(m):\n    #     for j in range(n):\n    #         if j == n-1:\n    #             M[i][j] = M[i][j]\n    #         else:\n    #             M[i][j] = M[i][j] + M[i+1][j]\n    # for i in range(m):\n    #     for j in range(n):\n    #         if j == n-1:\n    #             M[i][j] = M[i][j]\n    #         else:\n    #             M[i][j] = M[i][j] + M[i+1][j]\n    # for i in range(m):\n    #     for j in range(n):\n    #         if j == n-1:\n    #             M[i][j] = M[i][j]\n    #         else:\n    #             M[i][j] = M[i][j] + M[i][j+1]\n    # for i in range(m):\n    #     for j in range(n):\n    #         if j == n-1:\n    #             M[i][j] = M[i][j]\n    #         else:\n    #             M[i][j] = M[i][j] + M[i][j+1]\n    # for i in range(m):\n    #     for j in range(n):\n    #         if j == n-1:\n    #             M[i][j] = M[i][j]\n    #         else:\n    #             M[i][j] = M[i][j] + M[i+1][j]\n    # for i in range(m):\n    #     for j in range"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    N = len(M)\n    if N == 1:\n        return M\n    l = []\n    for i in range(N):\n        l.append([sum(M[i]),i])\n    l.sort()\n    l.reverse()\n    for i in range(len(l)):\n        l[i][1] = i\n    for i in range(N):\n        for j in range(N):\n            M[i][j] = M[l[i][1]][j]\n    return M\n    "
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row = len(M)\n    col = len(M[0])\n    \n    for i in range(row):\n        current = []\n        for j in range(col):\n            current.append(M[i][j])\n        current.sort(reverse=True)\n        for j in range(col):\n            M[i][j] = current[j]\n    \n    return M\n    \ndef sum_matrix(M):\n    '''\n    Write a function to compute the sum of a given matrix.\n    '''\n    row = len(M)\n    col = len(M[0])\n    \n    for i in range(row):\n        for j in range(col):\n            if i == j:\n                M[i][j] = M[i][j] * 2\n            else:\n                M[i][j] = M[i][j] + M[j][i]\n    \n    return M\n    \ndef transpose(M):\n    '''\n    Write a function to compute the transpose of a given matrix.\n    '''\n    row = len(M)\n    col = len(M[0])\n    \n    for i in range(row):\n        for j in range(col):\n            if i == j:\n                M[i][j] = M[i][j] * 2\n            else:\n                M[i][j] = M[i][j] + M[j][i]\n    \n    return M\n    \ndef max_matrix(M):\n    '''\n    Write a function to compute the maximum sum of a given matrix.\n    '''\n    row = len(M)\n    col = len(M[0])\n    \n    max = 0\n    for i in range(row):\n        sum = 0\n        for j in range(col):\n            sum = sum + M[i][j]\n        if sum > max:\n            max = sum\n    \n    return max\n    \ndef find_max_path_in_matrix(M):\n    '''\n    Write a function to compute the maximum sum of a path in a given matrix.\n    '''\n    row = len(M)\n    col = len(M[0])\n    \n    path = []\n    \n    for i in range(row):\n        for j in range(col):\n            if i == j == 0:\n                M[i][j] = M[i][j]\n                path.append([i,j])\n            elif i == j == row - 1:\n                M[i][j] = M[i][j]\n                path.append([i,j])\n            elif i == 0:\n                M[i][j] = M[i][j] + M[i][j-1]\n                path.append([i,j])\n            elif j == 0:\n                M[i][j] = M[i][j] + M[i-1][j]\n                path.append([i,j])\n            elif i == row - 1:\n                M[i][j] = M[i][j] + M[i-1][j]\n                path.append([i,j])\n            elif j == col - 1:\n                M[i][j] = M[i][j] + M[i-1][j]\n                path.append([i,j])\n            else:\n                M[i][j] = M[i][j] + max(M[i-1][j], M[i][j-1])\n                path.append([i,j])\n    \n    max = 0\n    for i in range(row):\n        for j in range(col):\n            if max < M[i][j]:\n                max = M[i][j]\n    \n    return max, path\n    \ndef matrix_chain_multiply(p):\n    '''\n    Write a function to compute the minimum cost of multiplying two matrices.\n    '''\n    n = len(p) - 1\n    m = [[0 for x in range(n + 1)] for x in range(n + 1)]\n    s = [[0 for x in range(n + 1)] for x in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        m[i][i] = 0\n    \n    for l in range(2, n + 1):\n        for i in range(1, n - l + 2):\n            j = i + l - 1\n            m[i][j] = float('inf')\n            for k in range(i, j):\n                cost = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j]\n                if cost < m[i][j]:\n                    m[i][j] = cost\n                    s[i][j] = k\n    \n    return m, s\n    \ndef floyd_warshall(M):\n    '''\n    Write a function to compute the shortest path distance between all pairs of vertices in a given graph.\n    '''\n    row = len(M)\n    col = len(M[0])\n    \n    for k in range(row):\n        for i in range(row):\n            for j in range(col):\n                if M[i][j] > M[i][k] + M[k][j]:\n                    M[i][j] = M[i][k] + M[k][j]\n    \n    return M\n    \ndef largest_palindrome(n):\n    '''\n    Write a function to compute the nth palindromic number.\n    '''\n    s = str(n)\n    l = len(s)\n    \n    if l % 2 == 0:\n        return int(s[0:l/2] + s[0:l/2][::-1])\n    else:\n        return int(s[0:l/2] + s[0:l/2][::-1]) * int(s[l/2])\n    \ndef longest_common_substring(s1, s2):\n    '''\n    Write a function to compute the length of the longest common substring in two given strings.\n    '''\n    row = len(s1)\n    col = len(s2)\n    \n    T = [[0 for x in range(col + 1)] for x in range(row + 1)]\n    \n    for i in range(1, row + 1):\n        for j in range(1, col + 1):\n            if s1[i - 1] == s2[j - 1]:\n                T[i][j] = T[i - 1][j - 1] + 1\n            else:\n                T[i][j] = max(T[i - 1][j], T[i][j - 1])\n    \n    return T[row][col]\n    \ndef min_cost_climbing_stairs(n):\n    '''\n    Write a function to compute the minimum cost of climbing n stairs.\n    '''\n    return n if n == 1 else min_cost_climbing_stairs(n - 1) + min_cost_climbing_stairs(n - 2)\n    \ndef jumping_on_clouds(c):\n    '''\n    Write a function to compute the minimum cost of jumping over a cloud in a given array.\n    '''\n    n = len(c)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return c[0]\n    \n    cost = 0\n    current = 0\n    while current + 1 < n:\n        if c[current + 1] == 1:\n            cost += 1\n            current += 2\n        else:\n            cost += 1\n            current += 1\n    \n    if current == n - 1:\n        cost += 1\n    else:\n        cost += 1 + c[current]\n    \n    return cost\n    \ndef min_swaps_to_sort(s):\n    '''\n    Write a function to compute the minimum number of swaps required to sort a given string.\n    '''\n    char_map = {}\n    for i in range(len(s)):\n        if s[i] not in char_map:\n            char_map[s[i]] = i\n        else:\n            if char_map[s[i]]!= i:\n                return -1\n    \n    char_map = sorted(char_map.items(), key=lambda x: x[1])\n    \n    swaps = 0\n    for i in range"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # M[0] = [5,2,1,2,3,4,4,5,5,6,8]\n    # M[1] = [1,3,2,1,1,3,2,4,4,5,8]\n    # M[2] = [2,4,3,2,1,3,5,4,1,2,2]\n    # M[3] = [2,3,5,3,2,1,2,3,3,1,1]\n    # M[4] = [3,5,1,4,3,3,5,1,1,1,3]\n    # M[5] = [4,4,3,5,3,5,1,3,3,3,2]\n    # M[6] = [5,4,3,5,3,1,2,2,4,2,2]\n    # M[7] = [6,8,5,5,4,1,3,1,2,2,3]\n    # M[8] = [8,6,5,1,2,1,2,2,4,3,2]\n    # M[9] = [1,2,2,3,5,3,2,2,2,4,5]\n    # M[10] = [2,3,1,1,3,2,2,4,4,5,6]\n    # M[11] = [3,1,2,2,4,3,3,5,5,5,6]\n    # M[12] = [4,2,3,4,2,1,1,4,5,5,6]\n    # M[13] = [5,5,4,5,1,1,2,3,3,3,2]\n    # M[14] = [6,3,5,5,3,3,1,2,2,2,1]\n    # M[15] = [7,1,6,1,3,1,4,1,1,1,3]\n    # M[16] = [8,1,6,2,2,1,4,2,2,1,1]\n    # M[17] = [9,1,6,3,3,2,3,3,3,1,2]\n    # M[18] = [10,2,6,4,5,3,3,4,3,2,1]\n    # M[19] = [11,2,6,5,4,5,3,4,5,3,2]\n    # M[20] = [12,2,6,5,4,5,3,5,5,3,3]\n    # M[21] = [13,2,6,5,5,5,3,5,5,5,3]\n    # M[22] = [14,3,6,5,5,5,3,5,5,5,4]\n    # M[23] = [15,3,6,5,5,5,3,5,5,5,4]\n    # M[24] = [16,3,6,5,5,5,3,5,5,5,5]\n    # M[25] = [17,4,6,1,2,2,4,5,5,5,6]\n    # M[26] = [18,5,6,2,3,3,5,5,5,6,8]\n    # M[27] = [19,5,6,3,4,5,5,5,5,6,8]\n    # M[28] = [20,5,6,5,4,5,5,6,5,6,8]\n    # M[29] = [21,5,6,5,5,5,5,5,6,6,8]\n    # M[30] = [22,5,6,5,5,5,5,5,6,6,8]\n    # M[31] = [23,5,6,5,5,5,5,5,6,6,8]\n    # M[32] = [24,5,6,5,5,5,5,5,6,7,8]\n    # M[33] = [25,5,6,5,5,5,5,5,6,7,8]\n    # M[34] = [26,5,6,5,5,5,5,5,6,7,8]\n    # M[35] = [27,5,6,5,5,5,5,5,6,7,8]\n    # M[36] = [28,5,6,5,5,5,5,5,6,7,8]\n    # M[37] = [29,5,6,5,5,5,5,5,6,7,8]\n    # M[38] = [30,5,6,5,5,5,5,5,6,7,8]\n    # M[39] = [31,5,6,5,5,5,5,5,6,7,8]\n    # M[40] = [32,5,6,5,5,5,5,5,6,7,8]\n    # M[41] = [33,5,6,5,5,5,5,5,6,7,8]\n    # M[42] = [34,5,6,5,5,5,5,5,6,7,8]\n    # M[43] = [35,5,6,5,5,5,5,5,6,7,8]\n    # M[44] = [36,5,6,5,5,5,5,5,6,7,8]\n    # M[45] = [37,5,6,5,5,5,5,5,6,7,8]\n    # M[46] = [38,5,6,5,5,5,5,5,6,7,8]\n    # M[47] = [39,5,6,5,5,5,5,5,6,7,8]\n    # M[48] = [40,5,6,5,5,5,5,5,6,7,8]\n    # M[49] = [41,5,6,5,5,5,5,5,6,7,8]\n    # M[50] = [42,5,6,5,5,5,5,5,6,7,8]\n    # M[51] = [43,5,6,5,5,5,5,5,6,7,8]\n    # M[52] = [44,5,6,5,5,5,5,5,6,7,8]\n    # M[53] = [45,5,6,5,5,5,5,5,6,7,8]\n    # M[54] = [46,5,6,5,5,5,5,5,6,7,8]\n    # M[55] = [47,5,6,5,5,5,5,5,6,7,8]\n    # M[56] = [48,5,6,5,5,5,5,5,6,7,8]\n    # M[57] = [49,5,6,5,5,5,5,5,6,7,8]\n    # M[58] = [50,5,6,5,5,5,5,5,6,7,8]\n    # M[59] = [51,5,6,5,5,5,5,5,6,7,8]\n    # M[60] = [52,5,6,5,5,5,5,5,6,7,8]\n    # M[61] = [53,5,6,5,5,5,5,5,6,7,8]\n    # M[62] = [54,5,6,5,5,5,5,5,6,7,8]\n    # M[63] = [55,5,6,5,5,5,5,5,6,7,8]\n    # M[64] = [56,5,6,5,5,5,5,5,6"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    def sum_rows(M):\n        '''\n        Given a matrix, find the sum of each row in that matrix.\n        '''\n        rows = len(M)\n        sums = []\n        for i in range(rows):\n            sums.append(sum(M[i]))\n        return sums\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(1, len(M)):\n        if sum(M[i]) > sum(M[i-1]):\n            j = i\n            while j > 0 and sum(M[j]) > sum(M[j-1]):\n                temp = M[j-1]\n                M[j-1] = M[j]\n                M[j] = temp\n                j -= 1\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row = len(M)\n    col = len(M[0])\n    \n    for i in range(row):\n        for j in range(i+1, row):\n            if M[i][j] < M[j][i]:\n                M[i][j], M[j][i] = M[j][i], M[i][j]\n    \n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_rows = []\n    for row in M:\n        sorted_rows.append(sum(row))\n    return sorted(sorted_rows)\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # List[List[int]]\n    # def sum_of_rows(M):\n    #     result = [0] * len(M[0])\n    #     for row in M:\n    #         for i in range(len(row)):\n    #             result[i] += row[i]\n    #     return result\n    # def sort_matrix(M):\n    #     rows = []\n    #     for row in M:\n    #         rows.append(sum_of_rows(row))\n    #     return sorted(M, key = lambda x: sum(x))\n    # return sort_matrix(M)\n    \n    # matrix = []\n    # def sort_matrix(M):\n    #     for row in M:\n    #         rows.append(sum(row))\n    #     return sorted(rows)\n    # return sort_matrix(M)\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/6.0\n    \n    \n    \ndef find_Area(a,b,h) : \n    '''\n    Write a python function to find the area of a triangular prism.\n    '''\n    return (a*b)/2.0\n    \n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/3\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l = float(l)\n    b = float(b)\n    h = float(h)\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return 1/6.0 * b * h\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # volume of triangular prism\n    # formula = (1/2) * base * height\n    return (l * b * h) / float(2)\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume=0.5*b*h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h/3.0\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/3\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (b*h/3)\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (b*h)/3\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('[a-z]+_+[a-z]+', text, re.IGNORECASE)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # for c in text:\n    #     if c.islower():\n    #         return True\n    # return False\n    return re.search(r'[a-z]+_+[a-z]+', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return True if re.search(\"[a-z]\\_[a-z]\",text) else False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.match(r'.*[a-z]+_[a-z]+.*',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return True if re.search('[a-z]+_[a-z]+',text) else False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text=str(text)\n    for x in text:\n        if x.islower()==True:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if(text == None):\n        return None\n    str = re.sub(r'[^a-zA-Z]+', '', text)\n    if(str == \"\"):\n        return True\n    return False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #re.search(r'[a-z]+_[a-z]+', text)\n    return re.search(r'[a-z]+_[a-z]+', text)\n    #return re.match(r'[a-z]+_[a-z]+', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.match(r'^[a-z]{1,}_*[a-z]+[a-z]*$', text)!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return True if re.search('[a-z]+_[a-z]+',text) else False\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = []\n    for i in string:\n        if i not in list:\n            list.append(i)\n    return list\ndef new_string(list,string):\n    newstring = ''\n    for i in list:\n        newstring = newstring + string[i]\n    return newstring\ndef freq_chars(string):\n    dictionary = {}\n    for i in string:\n        if i in dictionary:\n            dictionary[i] = dictionary[i] + 1\n        else:\n            dictionary[i] = 1\n    return dictionary\ndef count_chars(string):\n    dictionary = {}\n    for i in string:\n        if i in dictionary:\n            dictionary[i] = dictionary[i] + 1\n        else:\n            dictionary[i] = 1\n    return dictionary\ndef count_unqiue_chars(string):\n    dictionary = {}\n    for i in string:\n        if i in dictionary:\n            dictionary[i] = dictionary[i] + 1\n        else:\n            dictionary[i] = 1\n    return len(dictionary)\ndef find_first_diff(string1,string2):\n    if len(string1) > len(string2):\n        for i in range(0,len(string2)):\n            if string1[i]!= string2[i]:\n                return i\n        return len(string2)\n    else:\n        for i in range(0,len(string1)):\n            if string1[i]!= string2[i]:\n                return i\n        return len(string1)\ndef find_string_rotation(string1,string2):\n    list1 = string1[0:len(string1)/2]\n    list2 = string1[len(string1)/2:]\n    list2 = list2[::-1]\n    if list1 == list2:\n        return True\n    else:\n        return False\ndef find_string_rotation_2(string1,string2):\n    if len(string1)!= len(string2):\n        return False\n    newstring = new_string(string1,string2)\n    if newstring == string2:\n        return True\n    else:\n        return False\ndef find_string_rotation_3(string1,string2):\n    if len(string1)!= len(string2):\n        return False\n    for i in range(0,len(string1)):\n        if string1[i:] == string2[:len(string1)-i]:\n            return True\n    return False\ndef check_permutation(string1,string2):\n    if len(string1)!= len(string2):\n        return False\n    list1 = []\n    list2 = []\n    for i in string1:\n        list1.append(i)\n    for i in string2:\n        list2.append(i)\n    list1.sort()\n    list2.sort()\n    if list1 == list2:\n        return True\n    else:\n        return False\ndef check_permutation_2(string1,string2):\n    if len(string1)!= len(string2):\n        return False\n    string1 = string1.lower()\n    string2 = string2.lower()\n    if string1 == string2:\n        return True\n    else:\n        return False\ndef check_permutation_3(string1,string2):\n    if len(string1)!= len(string2):\n        return False\n    string1 = string1.lower()\n    string2 = string2.lower()\n    if string1 == string2:\n        return True\n    else:\n        return False\ndef check_permutation_4(string1,string2):\n    if len(string1)!= len(string2):\n        return False\n    dictionary1 = count_chars(string1)\n    dictionary2 = count_chars(string2)\n    for i in dictionary1:\n        if i not in dictionary2:\n            return False\n        else:\n            if dictionary1[i]!= dictionary2[i]:\n                return False\n    for i in dictionary2:\n        if i not in dictionary1:\n            return False\n    return True\ndef reverse_string(string):\n    newstring = ''\n    for i in range(len(string)-1,-1,-1):\n        newstring = newstring + string[i]\n    return newstring\ndef reverse_string_2(string):\n    return string[::-1]\ndef count_substring(string,string2):\n    count = 0\n    for i in range(0,len(string)):\n        for j in range(0,len(string2)):\n            if string[i:j+1] == string2:\n                count = count + 1\n    return count\ndef count_substring_2(string,string2):\n    if len(string) < len(string2):\n        return 0\n    count = 0\n    for i in range(0,len(string)):\n        if string[i:len(string2)+1] == string2:\n            count = count + 1\n    return count\ndef remove_duplicates(string):\n    list = []\n    for i in string:\n        if i not in list:\n            list.append(i)\n    return new_string(list,string)\ndef remove_duplicates_2(string):\n    list = []\n    for i in string:\n        if i not in list:\n            list.append(i)\n    return list\ndef remove_duplicates_3(string):\n    list = []\n    for i in string:\n        if i not in list:\n            list.append(i)\n    return list\ndef remove_duplicates_4(string):\n    list = []\n    for i in string:\n        if i not in list:\n            list.append(i)\n    return list\ndef remove_duplicates_5(string):\n    if len(string) <= 1:\n        return string\n    list = []\n    for i in string:\n        if i not in list:\n            list.append(i)\n    return new_string(list,string)\ndef remove_duplicates_6(string):\n    list = []\n    for i in string:\n        if i not in list:\n            list.append(i)\n    return list\ndef remove_duplicates_7(string):\n    if len(string) <= 1:\n        return string\n    list = []\n    for i in string:\n        if i not in list:\n            list.append(i)\n    return new_string(list,string)\ndef remove_duplicates_8(string):\n    if len(string) <= 1:\n        return string\n    list = []\n    for i in string:\n        if i not in list:\n            list.append(i)\n    return list\ndef remove_duplicates_9(string):\n    list = []\n    for i in string:\n        if i not in list:\n            list.append(i)\n    return list\ndef remove_duplicates_10(string):\n    list = []\n    for i in string:\n        if i not in list:\n            list.append(i)\n    return list\ndef remove_duplicates_11(string):\n    if len(string) <= 1:\n        return string\n    list = []\n    for i in string:\n        if i not in list:\n            list.append(i)\n    return new_string(list,string)\ndef remove_duplicates_12(string):\n    if len(string) <= 1:\n        return string\n    list = []\n    for i in string:\n        if i not in list:\n            list.append(i)\n    return list\ndef remove_duplicates_13(string):\n    if len(string) <= 1:\n        return string\n    list = []\n    for i in string:\n        if i not in list:\n            list.append(i)\n    return new_string(list,string)\ndef remove_duplicates_14(string):\n    if len(string) <= 1:\n        return string\n    list = []\n    for i in string:\n        if i not in list:\n            list.append(i)\n    return list\ndef remove_duplicates_15(string):\n    list = []\n    for i in string:\n        if i not in list:\n            list.append(i)\n    retur"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    pass\n    #pass\n    #return ''.join(string)\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = list(string)\n    for i in range(len(string)):\n        if string_list[i] in string_list[i+1:]:\n            string_list.pop(i)\n    return string_list\ndef get_hash_table(string):\n    hash_table = []\n    for i in range(256):\n        hash_table.append(0)\n    for i in range(len(string)):\n        hash_table[ord(string[i])] += 1\n    return hash_table\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    for i in range(len(string)):\n        for j in range(len(string)):\n            if i!= j and string[i] == string[j]:\n                break\n        else:\n            list1.append(string[i])\n    return list1\n    \ndef unique_words(string1, string2):\n    '''\n    Write a function to find the number of unique words in string2 which are present in string1\n    '''\n    unique_words = 0\n    list1 = str_to_list(string1)\n    list2 = str_to_list(string2)\n    for i in list1:\n        for j in list2:\n            if i == j:\n                list2.remove(i)\n                break\n        else:\n            unique_words += 1\n    return unique_words\n    \ndef calculate_jaccard_coefficient(string1, string2):\n    '''\n    Write a function to calculate the Jaccard coefficient of two strings\n    '''\n    unique_words = unique_words(string1, string2)\n    union_words = len(str_to_list(string1) + str_to_list(string2))\n    return float(unique_words) / union_words\n    \ndef calculate_winkler_similarity(string1, string2, similarity_level):\n    '''\n    Write a function to calculate the Winkler similarity of two strings\n    '''\n    len1 = len(string1)\n    len2 = len(string2)\n    if len1 > len2:\n        string1, string2 = string2, string1\n        len1, len2 = len2, len1\n    unique_words = unique_words(string1, string2)\n    winkler_similarity = 0.0\n    for i in range(len1-len2+1):\n        substr = string1[i:i+len2]\n        winkler_similarity += float(unique_words) / float(len2 + unique_words - calculate_unique_characters(substr))\n    winkler_similarity /= float(len1 - len2 + 1)\n    return winkler_similarity <= similarity_level\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    s1 = string\n    s2 = ''.join(sorted(string))\n    indices = []\n    for i in range(len(s1)):\n        if s2[i] not in s1:\n            indices.append(i)\n    new_string = ''.join([s1[i] for i in range(len(s1)) if i not in indices])\n    return new_string\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1=[]\n    list2=[]\n    for i in range(0,len(string)):\n        list1.append(string[i])\n    for i in range(0,len(string)):\n        list2.append(string[i])\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            if list1[i]==list2[j]:\n                list1[i]=''\n                break\n    for i in range(0,len(list1)):\n        if list1[i]=='':\n            list1[i]=None\n    return list1\n    \ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1=[]\n    list2=[]\n    for i in range(0,len(string)):\n        list1.append(string[i])\n    for i in range(0,len(string)):\n        list2.append(string[i])\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            if list1[i]==list2[j]:\n                list1[i]=''\n                break\n    for i in range(0,len(list1)):\n        if list1[i]=='':\n            list1[i]=None\n    return list1\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1=[]\n    list2=[]\n    for i in range(0,len(string)):\n        list1.append(string[i])\n    for i in range(0,len(string)):\n        list2.append(string[i])\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            if list1[i]==list2[j]:\n                list1[i]=''\n                break\n    for i in range(0,len(list1)):\n        if list1[i]=='':\n            list1[i]=None\n    return list1\n    \ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1=[]\n    list2=[]\n    for i in range(0,len(string)):\n        list1.append(string[i])\n    for i in range(0,len(string)):\n        list2.append(string[i])\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            if list1[i]==list2[j]:\n                list1[i]=''\n                break\n    for i in range(0,len(list1)):\n        if list1[i]=='':\n            list1[i]=None\n    return list1\n    \ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1=[]\n    list2=[]\n    for i in range(0,len(string)):\n        list1.append(string[i])\n    for i in range(0,len(string)):\n        list2.append(string[i])\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            if list1[i]==list2[j]:\n                list1[i]=''\n                break\n    for i in range(0,len(list1)):\n        if list1[i]=='':\n            list1[i]=None\n    return list1\n    \ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1=[]\n    list2=[]\n    for i in range(0,len(string)):\n        list1.append(string[i])\n    for i in range(0,len(string)):\n        list2.append(string[i])\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            if list1[i]==list2[j]:\n                list1[i]=''\n                break\n    for i in range(0,len(list1)):\n        if list1[i]=='':\n            list1[i]=None\n    return list1\n    \ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1=[]\n    list2=[]\n    for i in range(0,len(string)):\n        list1.append(string[i])\n    for i in range(0,len(string)):\n        list2.append(string[i])\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            if list1[i]==list2[j]:\n                list1[i]=''\n                break\n    for i in range(0,len(list1)):\n        if list1[i]=='':\n            list1[i]=None\n    return list1\n    \ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1=[]\n    list2=[]\n    for i in range(0,len(string)):\n        list1.append(string[i])\n    for i in range(0,len(string)):\n        list2.append(string[i])\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            if list1[i]==list2[j]:\n                list1[i]=''\n                break\n    for i in range(0,len(list1)):\n        if list1[i]=='':\n            list1[i]=None\n    return list1\n    \ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1=[]\n    list2=[]\n    for i in range(0,len(string)):\n        list1.append(string[i])\n    for i in range(0,len(string)):\n        list2.append(string[i])\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            if list1[i]==list2[j]:\n                list1[i]=''\n                break\n    for i in range(0,len(list1)):\n        if list1[i]=='':\n            list1[i]=None\n    return list1\n    \ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1=[]\n    list2=[]\n    for i in range(0,len(string)):\n        list1.append(string[i])\n    for i in range(0,len(string)):\n        list2.append(string[i])\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            if list1[i]==list2[j]:\n                list1[i]=''\n                break\n    for i in range(0,len(list1)):\n        if list1[i]=='':\n            list1[i]=None\n    return list1\n    \ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1=[]\n    list2=[]\n    for i in range(0,len(string)):\n        list1.append"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_str = []\n    for ch in string:\n        if ch not in list_str:\n            list_str.append(ch)\n    return list_str\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    s1 = list(string)\n    s2 = []\n    for i in s1:\n        if i in s2:\n            s1.remove(i)\n    return s1\n    \ndef remove_duplicate_and_sort(string):\n    '''\n    Write a function to remove duplicates from a string and sort it.\n    '''\n    string = ''.join(set(string))\n    string = sorted(string)\n    return string\n    \ndef reverse_string(string):\n    '''\n    Write a function to reverse the order of a string.\n    '''\n    l = list(string)\n    l.reverse()\n    return ''.join(l)\n    \ndef is_vowel(string):\n    '''\n    Write a function to check if a given character is vowel or not.\n    '''\n    return string.lower() in ['a','e','i','o','u']\n    \ndef split_string(string,k):\n    '''\n    Write a function to split a string into chunks of given size.\n    '''\n    if not isinstance(k,int):\n        print('invalid')\n        return\n    l = list(string)\n    chunks = []\n    for i in range(0,len(string),k):\n        chunks.append(''.join(l[i:i+k]))\n    return chunks\n    \ndef string_is_rotated(string1,string2):\n    '''\n    Write a function to check if two strings are a rotation of each other.\n    '''\n    return sorted(string1) == sorted(string2)\n    \ndef string_rotation(string1,string2):\n    '''\n    Write a function to check if a given string is a rotation of another given string.\n    '''\n    if not isinstance(string1,str) and not isinstance(string2,str):\n        print('invalid')\n        return\n    if len(string1)!= len(string2):\n        print('not same length')\n        return\n    return sorted(string1) == sorted(string2)[len(string1):] + sorted(string2)[:len(string1)]\n    \ndef get_max_product(array):\n    '''\n    Write a function to find the maximum product of three numbers from an array.\n    '''\n    if not isinstance(array,list):\n        print('invalid')\n        return\n    array = sorted(array)\n    if len(array) < 3:\n        print('invalid')\n        return\n    max_product = array[-1] * array[-2] * array[-3]\n    return max_product\n    \ndef is_pangram(string):\n    '''\n    Write a function to check whether a string is pangram or not.\n    '''\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    if not isinstance(string,str):\n        print('invalid')\n        return\n    if len(string) < 26:\n        print('invalid')\n        return\n    for i in string:\n        if i not in alpha:\n            print('not pangram')\n            return\n    print('pangram')\n    \ndef get_rotated_string(string,k):\n    '''\n    Write a function to check whether a string is a rotated string or not.\n    '''\n    if not isinstance(string,str) or not isinstance(k,int):\n        print('invalid')\n        return\n    if len(string) < 2:\n        print('invalid')\n        return\n    if len(string) == 2:\n        return string\n    k = k % len(string)\n    chunks = split_string(string,k)\n    for i in range(k,len(string)):\n        if string[i-k:i] in chunks:\n            return string[i-k:i]\n    return string[0:len(string)-k]\n    \ndef factorial(n):\n    '''\n    Write a function to compute the factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n    \ndef fibonacci(n):\n    '''\n    Write a function to compute the nth Fibonacci number.\n    '''\n    if not isinstance(n,int):\n        print('invalid')\n        return\n    if n < 0:\n        print('invalid')\n        return\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibonacci(n-1) + fibonacci(n-2)\n    \ndef merge_list(list1,list2):\n    '''\n    Write a function to merge two lists and sort it.\n    '''\n    if not isinstance(list1,list) or not isinstance(list2,list):\n        print('invalid')\n        return\n    if len(list1) == 0 and len(list2) == 0:\n        return []\n    l = list1 + list2\n    l.sort()\n    return l\n    \ndef find_nth_number(array,n):\n    '''\n    Write a function to find nth number from the start of the array.\n    '''\n    if not isinstance(array,list) or not isinstance(n,int):\n        print('invalid')\n        return\n    if len(array) < n:\n        print('invalid')\n        return\n    return array[n-1]\n    \ndef find_max_non_consecutive_number(array):\n    '''\n    Write a function to find maximum non-consecutive number in an array.\n    '''\n    if not isinstance(array,list):\n        print('invalid')\n        return\n    count = 1\n    max_count = 1\n    for i in range(1,len(array)):\n        if array[i] - array[i-1] == 1:\n            count += 1\n        else:\n            count = 1\n        if count > max_count:\n            max_count = count\n    return max_count\n    \ndef find_unique_elements(array):\n    '''\n    Write a function to find the unique elements of an array.\n    '''\n    if not isinstance(array,list):\n        print('invalid')\n        return\n    return set(array)\n    \ndef is_valid_parentheses(string):\n    '''\n    Write a function to check whether a string is valid parentheses or not.\n    '''\n    if not isinstance(string,str):\n        print('invalid')\n        return\n    if len(string) < 2:\n        return True\n    chars = {'(':')','[':']','{':'}'}\n    stack = []\n    for i in range(len(string)):\n        if string[i] in chars:\n            stack.append(string[i])\n        elif len(stack) == 0:\n            return False\n        else:\n            if string[i]!= chars[stack.pop()]:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n    \ndef is_palindrome(string):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    if not isinstance(string,str):\n        print('invalid')\n        return\n    if len(string) < 2:\n        return True\n    if string[0] == string[-1]:\n        return is_palindrome(string[1:-1])\n    else:\n        return False\n    \ndef get_duplicate_number(array):\n    '''\n    Write a function to find duplicate number in an array.\n    '''\n    if not isinstance(array,list):\n        print('invalid')\n        return\n    s = set()\n    for i in array:\n        if i in s:\n            return i\n        s.add(i)\n    return\n    \ndef find_unique_word(string):\n    '''\n    Write a function to find the unique words in a string.\n    '''\n    if not isinstance(string,str):\n        print('invalid')\n        return\n    l = string.split()\n    d = {}\n    for "
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = [char for char in string]\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    #first = list(string)\n    #second = list(string2)\n    #print(first)\n    #print(second)\n    #first.remove(second[0])\n    #print(first)\n    #print(second)\n    #first.remove(second[1])\n    #print(first)\n    #print(second)\n    #first.remove(second[2])\n    #print(first)\n    #print(second)\n    #first.remove(second[3])\n    #print(first)\n    #print(second)\n    #first.remove(second[4])\n    #print(first)\n    #print(second)\n    #first.remove(second[5])\n    #print(first)\n    #print(second)\n    #first.remove(second[6])\n    #print(first)\n    #print(second)\n    #first.remove(second[7])\n    #print(first)\n    #print(second)\n    #first.remove(second[8])\n    #print(first)\n    #print(second)\n    #first.remove(second[9])\n    #print(first)\n    #print(second)\n    #first.remove(second[10])\n    #print(first)\n    #print(second)\n    #first.remove(second[11])\n    #print(first)\n    #print(second)\n    #first.remove(second[12])\n    #print(first)\n    #print(second)\n    #first.remove(second[13])\n    #print(first)\n    #print(second)\n    #first.remove(second[14])\n    #print(first)\n    #print(second)\n    #first.remove(second[15])\n    #print(first)\n    #print(second)\n    #first.remove(second[16])\n    #print(first)\n    #print(second)\n    #first.remove(second[17])\n    #print(first)\n    #print(second)\n    #first.remove(second[18])\n    #print(first)\n    #print(second)\n    #first.remove(second[19])\n    #print(first)\n    #print(second)\n    #first.remove(second[20])\n    #print(first)\n    #print(second)\n    #first.remove(second[21])\n    #print(first)\n    #print(second)\n    #first.remove(second[22])\n    #print(first)\n    #print(second)\n    #first.remove(second[23])\n    #print(first)\n    #print(second)\n    #first.remove(second[24])\n    #print(first)\n    #print(second)\n    #first.remove(second[25])\n    #print(first)\n    #print(second)\n    #first.remove(second[26])\n    #print(first)\n    #print(second)\n    #first.remove(second[27])\n    #print(first)\n    #print(second)\n    #first.remove(second[28])\n    #print(first)\n    #print(second)\n    #first.remove(second[29])\n    #print(first)\n    #print(second)\n    #first.remove(second[30])\n    #print(first)\n    #print(second)\n    #first.remove(second[31])\n    #print(first)\n    #print(second)\n    #first.remove(second[32])\n    #print(first)\n    #print(second)\n    #first.remove(second[33])\n    #print(first)\n    #print(second)\n    #first.remove(second[34])\n    #print(first)\n    #print(second)\n    #first.remove(second[35])\n    #print(first)\n    #print(second)\n    #first.remove(second[36])\n    #print(first)\n    #print(second)\n    #first.remove(second[37])\n    #print(first)\n    #print(second)\n    #first.remove(second[38])\n    #print(first)\n    #print(second)\n    #first.remove(second[39])\n    #print(first)\n    #print(second)\n    #first.remove(second[40])\n    #print(first)\n    #print(second)\n    #first.remove(second[41])\n    #print(first)\n    #print(second)\n    #first.remove(second[42])\n    #print(first)\n    #print(second)\n    #first.remove(second[43])\n    #print(first)\n    #print(second)\n    #first.remove(second[44])\n    #print(first)\n    #print(second)\n    #first.remove(second[45])\n    #print(first)\n    #print(second)\n    #first.remove(second[46])\n    #print(first)\n    #print(second)\n    #first.remove(second[47])\n    #print(first)\n    #print(second)\n    #first.remove(second[48])\n    #print(first)\n    #print(second)\n    #first.remove(second[49])\n    #print(first)\n    #print(second)\n    #first.remove(second[50])\n    #print(first)\n    #print(second)\n    #first.remove(second[51])\n    #print(first)\n    #print(second)\n    #first.remove(second[52])\n    #print(first)\n    #print(second)\n    #first.remove(second[53])\n    #print(first)\n    #print(second)\n    #first.remove(second[54])\n    #print(first)\n    #print(second)\n    #first.remove(second[55])\n    #print(first)\n    #print(second)\n    #first.remove(second[56])\n    #print(first)\n    #print(second)\n    #first.remove(second[57])\n    #print(first)\n    #print(second)\n    #first.remove(second[58])\n    #print(first)\n    #print(second)\n    #first.remove(second[59])\n    #print(first)\n    #print(second)\n    #first.remove(second[60])\n    #print(first)\n    #print(second)\n    #first.remove(second[61])\n    #print(first)\n    #print(second)\n    #first.remove(second[62])\n    #print(first)\n    #print(second)\n    #first.remove(second[63])\n    #print(first)\n    #print(second)\n    #first.remove(second[64])\n    #print(first)\n    #print(second)\n    #first.remove(second[65])\n    #print(first)\n    #print(second)\n    #first.remove(second[66])\n    #print(first)\n    #print(second)\n    #first.remove(second[67])\n    #print(first)\n    #print(second)\n    #first.remove(second[68])\n    #print(first)\n    #print(second)\n    #first.remove(second[69])\n    #print(first)\n    #print(second)\n    #first.remove(second[70])\n    #print(first)\n    #print(second)\n    #first.remove(second[71])\n    #print(first)\n    #print(second)\n    #first.remove(second[72])\n    #print(first)\n    #print(second)\n    #first.remove(second[73])\n    #print(first)\n    #print(second)\n    #first.remove(second[74])\n    #print(first)\n    #print(second)\n    #first.remove(second[75])\n    #print(first)\n    #print(second)\n    #first.remove(second[76])\n    #print(first)\n    #print(second)\n    #first.remove(second[77])\n    #print(first)\n    #print(second)\n    #first.remove(second[78])\n    #print(first"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    nums = [0]*len(arraynums)\n    for i in range(len(arraynums)):\n        if nums[arraynums[i]-1] == 1:\n            return True\n        else:\n            nums[arraynums[i]-1] = 1\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) < 2:\n        return False\n    if len(arraynums) == 2:\n        return arraynums[0] == arraynums[1]\n    if arraynums[0] == arraynums[1]:\n        return test_duplicate(arraynums[1:])\n    return arraynums[0]!= test_duplicate(arraynums[1:])\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    d = {}\n    for num in arraynums:\n        if num in d:\n            return True\n        else:\n            d[num] = 1\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    import numpy as np\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    nums = []\n    for i in arraynums:\n        if i in nums:\n            return True\n        else:\n            nums.append(i)\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    result = False\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                result = True\n                break\n        if result == True:\n            break\n    return result\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arr = arraynums\n    print 'arr:', arr\n    for i in arr:\n        if arr.count(i) > 1:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    s = set(arraynums)\n    return len(arraynums)!= len(s)\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    hash = {}\n    for num in arraynums:\n        if num in hash:\n            return True\n        else:\n            hash[num] = True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    nums = arraynums\n    if len(nums) == 1:\n        return False\n    else:\n        for i in range(len(nums)):\n            if nums[i] in nums[i+1:]:\n                return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if type(x) is int:\n        if x < 0:\n            raise ValueError('invalid number')\n        elif x > 9:\n            raise ValueError('invalid number')\n        else:\n            return (x%2 == 0)\n    else:\n        raise TypeError('invalid number')\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 'ace':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x.isdigit(): \n        x = int(x)\n        if x % 2 == 0: \n            return False \n        elif x % 10 == 4: \n            return True\n        else:\n            return False \n    else:\n        return False \n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 0 or x > 10000:\n        print(\"Please enter a number between 0 and 10000.\")\n        return\n    if x % 11!= 0:\n        print(\"Please enter a number divisible by 11.\")\n        return\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x.startswith('w') or x.startswith('W'):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (len(str(x)) == 6) and (str(x)[0] <= '6') and (str(x)[1] <= '9') and (str(x)[2] <= '9') and (str(x)[3] <= '9') and (str(x)[4] <= '9') and (str(x)[5] <= '9'):\n        return True\n    else:\n        return False\n    \ndef woodall_input(x):\n    if is_woodall(x):\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    total = 0\n    for c in str(x):\n        if c == '6':\n            total += 1\n        elif c == '9':\n            total += 2\n        elif c == '0':\n            total += 3\n        elif c == '1':\n            total += 4\n        elif c == '8':\n            total += 5\n        elif c == '7':\n            total += 6\n        elif c == '2':\n            total += 7\n        elif c == '3':\n            total += 8\n        elif c == '4':\n            total += 9\n        elif c == '5':\n            total += 10\n    return total\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if(x%5==0 and x%2==0): \n        return True \n    else: \n        return False \n    \ndef is_palindrome(x):\n    '''\n    Write a function to check if the given number is palindrome or not.\n    '''\n    if(str(x)[::-1]==str(x)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if len(str(x)) == 1:\n        return True\n    if len(str(x)) == 2:\n        if str(x)[0] == '2' and str(x)[1] == '4' or str(x)[1] == '9':\n            return True\n        else:\n            return False\n    if len(str(x)) == 3:\n        if str(x)[0] == '2' and str(x)[1] == '4' and str(x)[2] == '8':\n            return True\n        else:\n            return False\n    if len(str(x)) == 4:\n        if str(x)[0] == '2' and str(x)[1] == '4' and str(x)[2] == '8' and str(x)[3] == '0':\n            return True\n        else:\n            return False\n    if len(str(x)) == 5:\n        if str(x)[0] == '2' and str(x)[1] == '4' and str(x)[2] == '8' and str(x)[3] == '0' and str(x)[4] == '0':\n            return True\n        else:\n            return False\n    if len(str(x)) == 6:\n        if str(x)[0] == '2' and str(x)[1] == '4' and str(x)[2] == '8' and str(x)[3] == '0' and str(x)[4] == '0' and str(x)[5] == '0':\n            return True\n        else:\n            return False\n    if len(str(x)) == 7:\n        if str(x)[0] == '2' and str(x)[1] == '4' and str(x)[2] == '8' and str(x)[3] == '0' and str(x)[4] == '0' and str(x)[5] == '0' and str(x)[6] == '0':\n            return True\n        else:\n            return False\n    if len(str(x)) == 8:\n        if str(x)[0] == '2' and str(x)[1] == '4' and str(x)[2] == '8' and str(x)[3] == '0' and str(x)[4] == '0' and str(x)[5] == '0' and str(x)[6] == '0' and str(x)[7] == '0':\n            return True\n        else:\n            return False\n    if len(str(x)) == 9:\n        if str(x)[0] == '2' and str(x)[1] == '4' and str(x)[2] == '8' and str(x)[3] == '0' and str(x)[4] == '0' and str(x)[5] == '0' and str(x)[6] == '0' and str(x)[7] == '0' and str(x)[8] == '0':\n            return True\n        else:\n            return False\n    if len(str(x)) == 10:\n        if str(x)[0] == '2' and str(x)[1] == '4' and str(x)[2] == '8' and str(x)[3] == '0' and str(x)[4] == '0' and str(x)[5] == '0' and str(x)[6] == '0' and str(x)[7] == '0' and str(x)[8] == '0' and str(x)[9] == '0':\n            return True\n        else:\n            return False\n    if len(str(x)) == 11:\n        if str(x)[0] == '2' and str(x)[1] == '4' and str(x)[2] == '8' and str(x)[3] == '0' and str(x)[4] == '0' and str(x)[5] == '0' and str(x)[6] == '0' and str(x)[7] == '0' and str(x)[8] == '0' and str(x)[9] == '0' and str(x)[10] == '0':\n            return True\n        else:\n            return False\n    if len(str(x)) == 12:\n        if str(x)[0] == '2' and str(x)[1] == '4' and str(x)[2] == '8' and str(x)[3] == '0' and str(x)[4] == '0' and str(x)[5] == '0' and str(x)[6] == '0' and str(x)[7] == '0' and str(x)[8] == '0' and str(x)[9] == '0' and str(x)[10] == '0' and str(x)[11] == '0':\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 2:\n        return True\n    else:\n        for i in range(3,x):\n            if x % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == int(str(num)[::-1]) - 1:\n        return 1\n    else:\n        return 0\n    \ndef palindrome(num):\n    '''\n    Write a python function to check if a given number is a palindrome. \n    '''\n    if num == int(str(num)[::-1]):\n        return 1\n    else:\n        return 0\n    \ndef factorial(num):\n    '''\n    Write a python function to compute the factorial of a given number. \n    '''\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num - 1)\n    \ndef fibonacci(num):\n    '''\n    Write a python function to compute the value of nth term in Fibonacci series\n    '''\n    if num == 1:\n        return 0\n    elif num == 2:\n        return 1\n    else:\n        return fibonacci(num - 1) + fibonacci(num - 2)\n    \ndef factorial_binomial(num, k):\n    '''\n    Write a python function to compute the value of Binomial coefficient of n and k.\n    '''\n    factorial_n = factorial(num)\n    factorial_k = factorial(k)\n    factorial_n_k = factorial_n / (factorial_k * factorial(num - k))\n    return factorial_n_k\n    \ndef is_prime(num):\n    '''\n    Write a python function to check if a given number is prime. \n    '''\n    if num > 1:\n        if (num % 2 == 0) or (num % 3 == 0) or (num % 4 == 0) or (num % 6 == 0) or (num % 7 == 0) or (num % 8 == 0) or (num % 9 == 0) or (num % 11 == 0):\n            return 0\n        else:\n            return 1\n    else:\n        return 0\n    \ndef count_divisors(num):\n    '''\n    Write a python function to compute the value of the number of divisors of a given number. \n    '''\n    counter = 0\n    if num > 1:\n        for i in range(1, num + 1):\n            if num % i == 0:\n                counter += 1\n        return counter\n    else:\n        return 1\n    \ndef sum_divisors(num):\n    '''\n    Write a python function to compute the sum of all divisors of a given number. \n    '''\n    divisors = []\n    if num > 1:\n        for i in range(1, num + 1):\n            if num % i == 0:\n                divisors.append(i)\n        return sum(divisors)\n    else:\n        return 1\n    \ndef is_perfect(num):\n    '''\n    Write a python function to check if a given number is a perfect number. \n    '''\n    divisors = []\n    if num > 1:\n        for i in range(1, num):\n            if num % i == 0:\n                divisors.append(i)\n        if sum(divisors) == num:\n            return 1\n        else:\n            return 0\n    else:\n        return 0\n    \ndef is_abundant(num):\n    '''\n    Write a python function to check if a given number is an abundant number. \n    '''\n    divisors = []\n    if num > 1:\n        for i in range(1, num):\n            if num % i == 0:\n                divisors.append(i)\n        if sum(divisors) > num:\n            return 1\n        else:\n            return 0\n    else:\n        return 0\n    \ndef is_abundant_pair(num):\n    '''\n    Write a python function to check if a given number is an abundant number. \n    '''\n    divisors = []\n    if num > 1:\n        for i in range(1, num):\n            if num % i == 0:\n                divisors.append(i)\n        if sum(divisors) > num:\n            return 1\n        else:\n            return 0\n    else:\n        return 0\n    \ndef is_abundant_triple(num):\n    '''\n    Write a python function to check if a given number is an abundant number. \n    '''\n    divisors = []\n    if num > 1:\n        for i in range(1, num):\n            if num % i == 0:\n                divisors.append(i)\n        if sum(divisors) > num:\n            return 1\n        else:\n            return 0\n    else:\n        return 0\n    \ndef is_abundant_triple_pair(num):\n    '''\n    Write a python function to check if a given number is an abundant number. \n    '''\n    divisors = []\n    if num > 1:\n        for i in range(1, num):\n            if num % i == 0:\n                divisors.append(i)\n        if sum(divisors) > num:\n            return 1\n        else:\n            return 0\n    else:\n        return 0\n    \ndef is_abundant_quadruple(num):\n    '''\n    Write a python function to check if a given number is an abundant number. \n    '''\n    divisors = []\n    if num > 1:\n        for i in range(1, num):\n            if num % i == 0:\n                divisors.append(i)\n        if sum(divisors) > num:\n            return 1\n        else:\n            return 0\n    else:\n        return 0\n    \ndef is_abundant_quadruple_pair(num):\n    '''\n    Write a python function to check if a given number is an abundant number. \n    '''\n    divisors = []\n    if num > 1:\n        for i in range(1, num):\n            if num % i == 0:\n                divisors.append(i)\n        if sum(divisors) > num:\n            return 1\n        else:\n            return 0\n    else:\n        return 0\n    \ndef is_abundant_hexa(num):\n    '''\n    Write a python function to check if a given number is an abundant number. \n    '''\n    divisors = []\n    if num > 1:\n        for i in range(1, num):\n            if num % i == 0:\n                divisors.append(i)\n        if sum(divisors) > num:\n            return 1\n        else:\n            return 0\n    else:\n        return 0\n    \ndef is_abundant_hexa_pair(num):\n    '''\n    Write a python function to check if a given number is an abundant number. \n    '''\n    divisors = []\n    if num > 1:\n        for i in range(1, num):\n            if num % i == 0:\n                divisors.append(i)\n        if sum(divisors) > num:\n            return 1\n        else:\n            return 0\n    else:\n        return 0\n    \ndef is_abundant_hexa_triple(num):\n    '''\n    Write a python function to check if a given number is an abundant number. \n    '''\n    divisors = []\n    if num > 1:\n        for i in range(1, num):\n            if num % i == 0:\n                divisors.append(i)\n        if sum(divisors) > num:\n            return 1\n        else:\n            return 0\n    else:\n        return 0\n    \ndef is_abundant_hexa_triple_pair(num):\n    '''\n    Write a python function to check if a given number is an abundant number. \n    '''\n    divisors = []\n    if num > 1:\n        for i in range(1, num):\n            if num % i == 0:\n                divisors.append(i)\n        if sum(divisors) > num:\n            return 1\n        else:\n            return 0\n    else:\n        return 0\n    \ndef is_abundant_hexa_quadruple(num):\n    '''\n    Write a python function to check if a given number is an abundant number. \n    '''\n    divisors = []\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num==2*(num-1)\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num = num / 10\n    if rev_num == 2 * (num + 1):\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num = num // 10\n    if (rev - num) // 2 == num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if (num == (2*num) - 1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num /= 10\n    if reverse == (2 * num):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return 0\n    rev_num = 0\n    while num > 0:\n        rem = num % 10\n        rev_num = (rev_num * 10) + rem\n        num = num // 10\n    if rev_num == 2*num -1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num<0:\n        return -rev(-num)\n    else:\n        num=str(num)\n        return int(num[::-1])-1==num\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    rev = 0\n    while (num > 0):\n        temp = num % 10\n        rev = (rev * 10) + temp\n        num = num // 10\n    \n    if (rev == (2*num) - 1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    n = num\n    rev = 0\n    while n > 0:\n        rev = rev * 10 + n % 10\n        n = n // 10\n    if num == rev:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = arr[0]\n    for num in arr : \n        if num > max_num :\n            max_num = num\n    return max_num\n    \ndef find_Max_digit(num) : \n    '''\n    Write a python function to find the largest digit that can be formed with the given number.\n    '''\n    max_digit = num%10\n    return max_digit\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num = 0\n    for i in arr:\n        if i > num:\n            num = i\n    return num\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max_Num = 0\n    for i in range(len(arr)) : \n        for j in range(i+1, len(arr)) : \n            if arr[i] > arr[j] : \n                arr[i], arr[j] = arr[j], arr[i]\n    print \"Arr = \", arr\n    for i in range(len(arr)) : \n        for j in range(i+1, len(arr)) : \n            if arr[i] + arr[j] > Max_Num : \n                Max_Num = arr[i] + arr[j]\n    print \"Max_Num = \", Max_Num\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num = 0\n    for i in range(len(arr)) :\n        if arr[i] > num :\n            num = arr[i]\n    return num\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    s = \"\"\n    for i in arr : \n        s += str(i)\n    return int(s)\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    global m\n    m = 0\n    for i in range(10) : \n        if arr[i]>=m : \n            m = arr[i]\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    length = len(arr)\n    Max_num = 0\n    for i in range(0,length) : \n        Max_num = Max_num + arr[i]*10**(length-i-1)\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # traverse the array, to find the first element that is greater than the previous element, if not found, return the \n    # current element itself\n    return max(arr)\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    temp_arr = [0] * len(arr)\n    for i in range(len(arr)) : \n        temp_arr[i] = (arr[i] * 100) + (arr[i] // 10) + (arr[i] % 10)\n    return max(temp_arr)\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = arr[0]\n    for i in arr : \n        if i > max_num : \n            max_num = i\n    return max_num \n    \ndef get_Sum(num) : \n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    num_arr = [int(x) for x in str(num)]\n    total = 0\n    for i in num_arr : \n        total = total + i\n    return total \n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x*y<0\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0: \n        return True\n    elif x < 0 and y > 0: \n        return True\n    elif x < 0 and y < 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0:\n        print('%d and %d have opposite signs' % (x,y))\n    elif x < 0 and y > 0:\n        print('%d and %d have opposite signs' % (x,y))\n    else:\n        print('%d and %d do not have opposite signs' % (x,y))\ndef conjugate(x,y):\n    '''\n    Write a python function to compute the value of x\u2019y where x and y are both 3-digit integers.\n    '''\n    if (x>=100 and x<=999) and (y>=100 and y<=999):\n        print('The conjugate of %d and %d is %d' % (x,y,x*y))\n    else:\n        print('The conjugate of %d and %d is %d' % (x,y,x-10*y))\ndef is_Palindrome(x):\n    '''\n    Write a python function to check whether the given integer is a palindrome or not.\n    '''\n    rev = 0\n    temp = x\n    while temp > 0:\n        rem = temp % 10\n        rev = rev * 10 + rem\n        temp = temp // 10\n    if rev == x:\n        print('%d is a Palindrome' % x)\n    else:\n        print('%d is not a Palindrome' % x)\ndef is_Pentagonal(x):\n    '''\n    Write a python function to check whether the given integer is a pentagonal number or not.\n    '''\n    if (((24*x+1)**0.5)+1)/6 == int(((24*x+1)**0.5)+1)/6:\n        print('%d is a Pentagonal number' % x)\n    else:\n        print('%d is not a Pentagonal number' % x)\ndef is_Hexagonal(x):\n    '''\n    Write a python function to check whether the given integer is a hexagonal number or not.\n    '''\n    if (((8*x+1)**0.5)+1)/4 == int(((8*x+1)**0.5)+1)/4:\n        print('%d is a Hexagonal number' % x)\n    else:\n        print('%d is not a Hexagonal number' % x)\ndef is_Heptagonal(x):\n    '''\n    Write a python function to check whether the given integer is a heptagonal number or not.\n    '''\n    if (((7*x+1)**0.5)+1)/4 == int(((7*x+1)**0.5)+1)/4:\n        print('%d is a Heptagonal number' % x)\n    else:\n        print('%d is not a Heptagonal number' % x)\ndef is_Octagonal(x):\n    '''\n    Write a python function to check whether the given integer is a octagonal number or not.\n    '''\n    if (((6*x+1)**0.5)+1)/4 == int(((6*x+1)**0.5)+1)/4:\n        print('%d is a Octagonal number' % x)\n    else:\n        print('%d is not a Octagonal number' % x)\ndef is_Nonagonal(x):\n    '''\n    Write a python function to check whether the given integer is a nonagonal number or not.\n    '''\n    if (((5*x+1)**0.5)+1)/4 == int(((5*x+1)**0.5)+1)/4:\n        print('%d is a Nonagonal number' % x)\n    else:\n        print('%d is not a Nonagonal number' % x)\ndef is_RightAngled(x):\n    '''\n    Write a python function to check whether the given integer is a right angle number or not.\n    '''\n    if (x**0.5) % 1 == 0:\n        print('%d is a Right Angled number' % x)\n    else:\n        print('%d is not a Right Angled number' % x)\ndef is_Square(x):\n    '''\n    Write a python function to check whether the given integer is a square number or not.\n    '''\n    if x == (x**0.5) ** 2:\n        print('%d is a Square number' % x)\n    else:\n        print('%d is not a Square number' % x)\ndef is_Cube(x):\n    '''\n    Write a python function to check whether the given integer is a cube number or not.\n    '''\n    if x == (x**(1/3)) ** 3:\n        print('%d is a Cube number' % x)\n    else:\n        print('%d is not a Cube number' % x)\ndef is_Biprime(x):\n    '''\n    Write a python function to check whether the given integer is a prime number or not.\n    '''\n    if x > 1:\n        for i in range(2,int(x**0.5)+1):\n            if (x % i) == 0:\n                print('%d is not a prime number' % x)\n                break\n        else:\n            print('%d is a prime number' % x)\n    else:\n        print('%d is not a prime number' % x)\ndef is_TruncatablePrime(x):\n    '''\n    Write a python function to check whether the given integer is a Truncatable Prime number or not.\n    '''\n    if x > 1:\n        if x < 10:\n            print('%d is a Truncatable Prime number' % x)\n        else:\n            for i in range(2,10):\n                if str(x)[:i] == str(x)[i:]:\n                    print('%d is not a Truncatable Prime number' % x)\n                    break\n            else:\n                print('%d is a Truncatable Prime number' % x)\n    else:\n        print('%d is not a Truncatable Prime number' % x)\ndef is_KaprekarNumber(x):\n    '''\n    Write a python function to check whether the given integer is a Kaprekar Number or not.\n    '''\n    if (x**2 + x) == (x**2 - x):\n        print('%d is a Kaprekar Number' % x)\n    else:\n        print('%d is not a Kaprekar Number' % x)\ndef is_KaprekarDigit(x):\n    '''\n    Write a python function to check whether the given integer is a Kaprekar digit or not.\n    '''\n    if (x**2 + x) % 11 == 0:\n        print('%d is a Kaprekar digit' % x)\n    else:\n        print('%d is not a Kaprekar digit' % x)\ndef is_QuadraticPrime(x):\n    '''\n    Write a python function to check whether the given integer is a quadratic prime number or not.\n    '''\n    if (x**0.5) % 1 == 0:\n        print('%d is a Quadratic Prime number' % x)\n    else:\n        print('%d is not a Quadratic Prime number' % x)\ndef is_QuadraticDigit(x):\n    '''\n    Write a python function to check whether the given integer is a quadratic digit or not.\n    '''\n    if (x**0.5) % 1 == 0:\n        print('%d is a Quadratic digit' % x)\n    else:\n        print('%d is not a Quadratic digit' % x)\ndef is_TriangularPrime(x):\n    '''\n    Write a python function to check whether the given integer is a triangular prime number or not.\n    '''\n    if x > 1:\n        for i in range(2,int(x**0.5)+1):\n            if (x % i) == 0:\n                print('%d is not a triangular prime number' % x)\n                break\n        else:\n            print('%d is a triangular prime number' % x)\n    else:\n        print('%d is not a triangular prime number' % x)\ndef is_BinomialPrime(x):\n    '''\n    Write a python function to check whether the given integer is a binomial prime number or not.\n    '''\n    i"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>0 and y<0) or (x<0 and y>0):\n        return True\n    return False\ndef Sum_Digits(x):\n    '''\n    Write a python function to return the sum of the digits of the given integer.\n    '''\n    if x<0:\n        x*=-1\n    sum = 0\n    while x>0:\n        sum+=x%10\n        x//=10\n    return sum\ndef Is_Palindrome(x):\n    '''\n    Write a python function to check whether the given integer is palindrome or not.\n    '''\n    if x<0:\n        return False\n    reversed_x = 0\n    original_x = x\n    while x>0:\n        reversed_x = (reversed_x*10)+x%10\n        x//=10\n    if reversed_x == original_x:\n        return True\n    return False\ndef Is_Kaprekar(x):\n    '''\n    Write a python function to check whether the given integer is Kaprekar number or not.\n    '''\n    if x<0:\n        return False\n    sqr_of_x = x**2\n    sum_of_digits = Sum_Digits(sqr_of_x)\n    return sum_of_digits == x\ndef Is_Armstrong(x):\n    '''\n    Write a python function to check whether the given integer is Armstrong number or not.\n    '''\n    if x<0:\n        return False\n    sum_of_digits = Sum_Digits(x)\n    temp = x\n    while temp>0:\n        sum_of_digits+=Sum_Digits(temp%10)**3\n        temp//=10\n    return sum_of_digits == x\ndef Is_Palindrome_2(x):\n    '''\n    Write a python function to check whether the given integer is Palindrome number or not.\n    '''\n    if x<0:\n        return False\n    reversed_x = 0\n    original_x = x\n    while x>0:\n        reversed_x = (reversed_x*10)+x%10\n        x//=10\n    if reversed_x == original_x:\n        return True\n    return False\ndef Is_Kaprekar_2(x):\n    '''\n    Write a python function to check whether the given integer is Kaprekar number or not.\n    '''\n    if x<0:\n        return False\n    sqr_of_x = x**2\n    sum_of_digits = Sum_Digits(sqr_of_x)\n    return sum_of_digits == x\ndef Is_Armstrong_2(x):\n    '''\n    Write a python function to check whether the given integer is Armstrong number or not.\n    '''\n    if x<0:\n        return False\n    sum_of_digits = Sum_Digits(x)\n    temp = x\n    while temp>0:\n        sum_of_digits+=Sum_Digits(temp%10)**3\n        temp//=10\n    return sum_of_digits == x\ndef Largest_Prime_Factor(x):\n    '''\n    Write a python function to find the largest prime factor of the given integer.\n    '''\n    if x<0:\n        return -1\n    i = 2\n    while i*i<=x:\n        if x%i==0:\n            return i\n        i+=1\n    return x\ndef Largest_Prime_Factor_2(x):\n    '''\n    Write a python function to find the largest prime factor of the given integer.\n    '''\n    if x<0:\n        return -1\n    i = 2\n    while i*i<=x:\n        if x%i==0:\n            return x//i\n        i+=1\n    return x\ndef Largest_Prime_Factor_3(x):\n    '''\n    Write a python function to find the largest prime factor of the given integer.\n    '''\n    if x<0:\n        return -1\n    i = 2\n    while i*i<=x:\n        if x%i==0:\n            return i\n        i+=1\n    return x\ndef Largest_Prime_Factor_4(x):\n    '''\n    Write a python function to find the largest prime factor of the given integer.\n    '''\n    if x<0:\n        return -1\n    i = 2\n    while i*i<=x:\n        if x%i==0:\n            return x//i\n        i+=1\n    return x\ndef Largest_Prime_Factor_5(x):\n    '''\n    Write a python function to find the largest prime factor of the given integer.\n    '''\n    if x<0:\n        return -1\n    i = 2\n    while i*i<=x:\n        if x%i==0:\n            return i\n        i+=1\n    return x\ndef Largest_Prime_Factor_6(x):\n    '''\n    Write a python function to find the largest prime factor of the given integer.\n    '''\n    if x<0:\n        return -1\n    i = 2\n    while i*i<=x:\n        if x%i==0:\n            return x//i\n        i+=1\n    return x\ndef Largest_Prime_Factor_7(x):\n    '''\n    Write a python function to find the largest prime factor of the given integer.\n    '''\n    if x<0:\n        return -1\n    i = 2\n    while i*i<=x:\n        if x%i==0:\n            return i\n        i+=1\n    return x\ndef Largest_Prime_Factor_8(x):\n    '''\n    Write a python function to find the largest prime factor of the given integer.\n    '''\n    if x<0:\n        return -1\n    i = 2\n    while i*i<=x:\n        if x%i==0:\n            return x//i\n        i+=1\n    return x\ndef Largest_Prime_Factor_9(x):\n    '''\n    Write a python function to find the largest prime factor of the given integer.\n    '''\n    if x<0:\n        return -1\n    i = 2\n    while i*i<=x:\n        if x%i==0:\n            return i\n        i+=1\n    return x\ndef Largest_Prime_Factor_10(x):\n    '''\n    Write a python function to find the largest prime factor of the given integer.\n    '''\n    if x<0:\n        return -1\n    i = 2\n    while i*i<=x:\n        if x%i==0:\n            return x//i\n        i+=1\n    return x\ndef Largest_Prime_Factor_11(x):\n    '''\n    Write a python function to find the largest prime factor of the given integer.\n    '''\n    if x<0:\n        return -1\n    i = 2\n    while i*i<=x:\n        if x%i==0:\n            return i\n        i+=1\n    return x\ndef Largest_Prime_Factor_12(x):\n    '''\n    Write a python function to find the largest prime factor of the given integer.\n    '''\n    if x<0:\n        return -1\n    i = 2\n    while i*i<=x:\n        if x%i==0:\n            return x//i\n        i+=1\n    return x\ndef Largest_Prime_Factor_13(x):\n    '''\n    Write a python function to find the largest prime factor of the given integer.\n    '''\n    if x<0:\n        return -1\n    i = 2\n    while i*i<=x:\n        if x%i==0:\n            return i\n        i+=1\n    return x\ndef Largest_Prime_Factor_14(x):\n    '''\n    Write a python function to find the largest prime factor of the given integer.\n    '''\n    if x<0:\n        return -1\n    i = 2\n    while i*i<=x:\n        if x%i==0:\n            return x//i\n        i+=1\n    return x\ndef Largest_Prime_Factor_1"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0:\n        return True\n    elif x<0 and y>0:\n        return True\n    else:\n        return False\n    \ndef Test_OppositeSigns():\n    assert opposite_Signs(12,-12)==True\n    assert opposite_Signs(-12,-12)==True\n    assert opposite_Signs(1,1)==False\n    assert opposite_Signs(-1,-1)==False\n    assert opposite_Signs(0,-12)==False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0:\n        return True\n    elif x>0 and y>0:\n        return True\n    else:\n        return False\n    \ndef One(a): \n    '''\n    Write a python function to check whether the given integer is One or not.\n    '''\n    if a==1:\n        return True\n    else:\n        return False\n    \ndef Function_2(a,b): \n    '''\n    Write a python function to check whether the given two integers are Positive or not.\n    '''\n    if a>0 and b>0:\n        return True\n    else:\n        return False\n    \ndef Function_3(a,b,c): \n    '''\n    Write a python function to check whether the given three integers are Positive or not.\n    '''\n    if a>0 and b>0 and c>0:\n        return True\n    else:\n        return False\n    \ndef Function_4(a,b): \n    '''\n    Write a python function to check whether the given two integers are Positive or not.\n    '''\n    if a>0 and b>0:\n        return True\n    else:\n        return False\n    \ndef Function_5(a,b): \n    '''\n    Write a python function to check whether the given two integers are Positive or not.\n    '''\n    if a>0 or b>0:\n        return True\n    else:\n        return False\n    \ndef Function_6(a): \n    '''\n    Write a python function to check whether the given integer is Positive or not.\n    '''\n    if a>0:\n        return True\n    else:\n        return False\n    \ndef Function_7(a): \n    '''\n    Write a python function to check whether the given integer is Negative or not.\n    '''\n    if a<0:\n        return True\n    else:\n        return False\n    \ndef Function_8(a): \n    '''\n    Write a python function to check whether the given integer is Negative or not.\n    '''\n    if a<0:\n        return True\n    else:\n        return False\n    \ndef Function_9(a,b): \n    '''\n    Write a python function to check whether the given two integers are Negative or not.\n    '''\n    if a<0 and b<0:\n        return True\n    else:\n        return False\n    \ndef Function_10(a,b): \n    '''\n    Write a python function to check whether the given two integers are Negative or not.\n    '''\n    if a<0 and b<0:\n        return True\n    else:\n        return False\n    \ndef Function_11(a,b): \n    '''\n    Write a python function to check whether the given two integers are Negative or not.\n    '''\n    if a<0 or b<0:\n        return True\n    else:\n        return False\n    \ndef Function_12(a,b): \n    '''\n    Write a python function to check whether the given two integers are Negative or not.\n    '''\n    if a<0 or b<0:\n        return True\n    else:\n        return False\n    \ndef Function_13(a,b): \n    '''\n    Write a python function to check whether the given two integers are Negative or not.\n    '''\n    if a<0 or b<0:\n        return True\n    else:\n        return False\n    \ndef Function_14(a,b): \n    '''\n    Write a python function to check whether the given two integers are Negative or not.\n    '''\n    if a<0 or b<0:\n        return True\n    else:\n        return False\n    \ndef Function_15(a,b): \n    '''\n    Write a python function to check whether the given two integers are Negative or not.\n    '''\n    if a<0 or b<0:\n        return True\n    else:\n        return False\n    \ndef Function_16(a,b): \n    '''\n    Write a python function to check whether the given two integers are Negative or not.\n    '''\n    if a<0 or b<0:\n        return True\n    else:\n        return False\n    \ndef Function_17(a,b): \n    '''\n    Write a python function to check whether the given two integers are Negative or not.\n    '''\n    if a<0 or b<0:\n        return True\n    else:\n        return False\n    \ndef Function_18(a,b): \n    '''\n    Write a python function to check whether the given two integers are Negative or not.\n    '''\n    if a<0 or b<0:\n        return True\n    else:\n        return False\n    \ndef Function_19(a,b): \n    '''\n    Write a python function to check whether the given two integers are Negative or not.\n    '''\n    if a<0 or b<0:\n        return True\n    else:\n        return False\n    \ndef Function_20(a,b): \n    '''\n    Write a python function to check whether the given two integers are Negative or not.\n    '''\n    if a<0 or b<0:\n        return True\n    else:\n        return False\n    \ndef Function_21(a,b): \n    '''\n    Write a python function to check whether the given two integers are Negative or not.\n    '''\n    if a<0 or b<0:\n        return True\n    else:\n        return False\n    \ndef Function_22(a,b): \n    '''\n    Write a python function to check whether the given two integers are Negative or not.\n    '''\n    if a<0 or b<0:\n        return True\n    else:\n        return False\n    \ndef Function_23(a,b): \n    '''\n    Write a python function to check whether the given two integers are Negative or not.\n    '''\n    if a<0 or b<0:\n        return True\n    else:\n        return False\n    \ndef Function_24(a,b): \n    '''\n    Write a python function to check whether the given two integers are Negative or not.\n    '''\n    if a<0 or b<0:\n        return True\n    else:\n        return False\n    \ndef Function_25(a,b): \n    '''\n    Write a python function to check whether the given two integers are Negative or not.\n    '''\n    if a<0 or b<0:\n        return True\n    else:\n        return False\n    \ndef Function_26(a,b): \n    '''\n    Write a python function to check whether the given two integers are Negative or not.\n    '''\n    if a<0 or b<0:\n        return True\n    else:\n        return False\n    \ndef Function_27(a,b): \n    '''\n    Write a python function to check whether the given two integers are Negative or not.\n    '''\n    if a<0 or b<0:\n        return True\n    else:\n        return False\n    \ndef Function_28(a,b): \n    '''\n    Write a python function to check whether the given two integers are Negative or not.\n    '''\n    if a<0 or b<0:\n        return True\n    else:\n        return False\n    \ndef Function_29(a,b): \n    '''\n    Write a python function to check whether the given two integers are Negative or not.\n    '''\n    if a<0 or b<0:\n        return True\n    else:\n        return False\n    \ndef Function_30(a,b): \n    '''\n    Write a python function to check whether the given two integers are Negative or not.\n    '''\n    if a<0 or b<0:\n        return True\n    else:\n        return False\n    \ndef Function_31(a,b): \n    '''\n    Write a python function to check whether the given two integers are Negative or not.\n    '''\n    if a<0 or b<0:\n        return True\n    else:\n        return False\n    \ndef Function_32(a,b): \n    '''\n    Write a python function to check whether the given two integers are Negative or not.\n    '''\n    if a<0 or b<0:\n        return True\n    else:\n        return False\n    \ndef Function_33(a,"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0:\n        print \"x and y are opposite signs\"\n    elif x>0 and y<0:\n        print \"x and y are opposite signs\"\n    else:\n        print \"x and y are not opposite signs\"\nopposite_Signs(1,-2)\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return ((x < 0 and y > 0) or (x > 0 and y < 0))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x>0 and y<0) or (x<0 and y>0)\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x*y < 0\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Initialize starting numbers\n    start_n = 1\n    start_n_2 = 3\n    start_n_3 = 9\n    start_n_4 = 27\n    start_n_5 = 81\n    start_n_6 = 243\n    start_n_7 = 729\n    start_n_8 = 2187\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n == 0 or (n*(3*n-1))/2 == n * (n-1)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (((8*n)**0.5) / 2.0 + 0.5) == int(((8*n)**0.5) / 2.0 + 0.5)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    result = 0\n    num = 1\n    n -= 1\n    while n > 0:\n        result += num\n        num += 8\n        n -= 1\n    return result\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1) // 2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal = 1\n    count = 0\n    while count < n:\n        octagonal += 1\n        for i in range(1, 8):\n            if i * (i + 1) // 2 == octagonal:\n                count += 1\n                if count == n:\n                    return octagonal\n    \n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n * (3 * n - 1)) / 2 == n\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n*(3*n - 1))/2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n==1:\n        return 1\n    elif n%2==0:\n        return (n+1)/3\n    else:\n        return n/3\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_number = 1\n    for i in range(n):\n        octagonal_number += 1\n        octagonal_number *= 7\n    return octagonal_number\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_sums = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i,len(s)+1):\n            sub_sums[j-i] += 1\n    return sub_sums\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    k = len(s)\n    if k == 0:\n        return 0\n    elif k == 1:\n        return 1\n    else:\n        count = 0\n        for i in range(len(s)):\n            for j in range(i,len(s)):\n                if sum([int(x) for x in s[i:j+1]]) == j-i+1:\n                    count += 1\n        return count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    for i in xrange(len(s)):\n        for j in xrange(i,len(s)):\n            if sum(map(int,s[i:j+1]))==len(s[i:j+1]):\n                count+=1\n    return count\ndef change_string(s):\n    '''\n    Write a python function to convert a string to a string that has same number of 'a's and 'b's. \n    The input string may contain '?', '*', or characters other than 'a', 'b' or '?'\n    '''\n    s=s.replace('?','a')\n    s=s.replace('*', 'b')\n    return s\ndef permutations(s):\n    '''\n    Write a python function to count the number of permutations of a string having unique characters\n    '''\n    s=list(s)\n    if len(s)==0:\n        return 1\n    else:\n        return len(set(s))*permutations(''.join(s))\ndef rotate(s,n):\n    '''\n    Write a python function to rotate a string with n times\n    '''\n    if len(s)==0:\n        return s\n    else:\n        return s[n:]+s[:n]\ndef valid(s):\n    '''\n    Write a python function to check if a string is a valid password\n    '''\n    if len(s)<8:\n        return False\n    else:\n        a=s.isdigit()\n        b=s.isalpha()\n        c=s.isalnum()\n        if a and b and c:\n            return True\n        else:\n            return False\ndef is_anagram(s1,s2):\n    '''\n    Write a python function to check if two strings are anagram of each other\n    '''\n    dic1,dic2={},{}\n    for i in s1:\n        if i in dic1:\n            dic1[i]+=1\n        else:\n            dic1[i]=1\n    for i in s2:\n        if i in dic2:\n            dic2[i]+=1\n        else:\n            dic2[i]=1\n    if dic1==dic2:\n        return True\n    else:\n        return False\ndef rotate_string(s,n):\n    '''\n    Write a python function to rotate a string n times\n    '''\n    if len(s)==0:\n        return s\n    else:\n        return rotate(s,n%len(s))\ndef is_anagram_1(s1,s2):\n    '''\n    Write a python function to check if two strings are anagram of each other\n    '''\n    if len(s1)!=len(s2):\n        return False\n    dic1,dic2={},{}\n    for i in s1:\n        if i in dic1:\n            dic1[i]+=1\n        else:\n            dic1[i]=1\n    for i in s2:\n        if i in dic2:\n            dic2[i]+=1\n        else:\n            dic2[i]=1\n    if dic1==dic2:\n        return True\n    else:\n        return False\ndef get_power_set(s):\n    '''\n    Write a python function to get all the power set of a set of elements\n    '''\n    res=[set([])]\n    for i in s:\n        n=len(res)\n        for j in range(n):\n            res.append(res[j].union(set([i])))\n    return res\ndef is_anagram_2(s1,s2):\n    '''\n    Write a python function to check if two strings are anagram of each other\n    '''\n    if len(s1)!=len(s2):\n        return False\n    dic1,dic2={},{}\n    for i in s1:\n        if i in dic1:\n            dic1[i]+=1\n        else:\n            dic1[i]=1\n    for i in s2:\n        if i in dic2:\n            dic2[i]+=1\n        else:\n            dic2[i]=1\n    if dic1==dic2:\n        return True\n    else:\n        return False\ndef is_substring(s1,s2):\n    '''\n    Write a python function to check if a string is a substring of another string\n    '''\n    if len(s1)>len(s2):\n        return False\n    else:\n        for i in xrange(len(s1)):\n            if s1[i]!=s2[i]:\n                return False\n        return True\ndef is_substring_1(s1,s2):\n    '''\n    Write a python function to check if a string is a substring of another string\n    '''\n    if len(s1)>len(s2):\n        return False\n    else:\n        for i in xrange(len(s2)):\n            if s1[i]!=s2[i]:\n                return False\n        return True\ndef is_substring_2(s1,s2):\n    '''\n    Write a python function to check if a string is a substring of another string\n    '''\n    if len(s1)>len(s2):\n        return False\n    else:\n        for i in xrange(len(s1)):\n            if s1[i]!=s2[i]:\n                return False\n        return True\ndef is_substring_3(s1,s2):\n    '''\n    Write a python function to check if a string is a substring of another string\n    '''\n    if len(s1)>len(s2):\n        return False\n    else:\n        for i in xrange(len(s1)):\n            if s1[i]!=s2[i]:\n                return False\n        return True\ndef is_substring_4(s1,s2):\n    '''\n    Write a python function to check if a string is a substring of another string\n    '''\n    if len(s1)>len(s2):\n        return False\n    else:\n        for i in xrange(len(s1)):\n            if s1[i]!=s2[i]:\n                return False\n        return True\ndef is_rotated(s1,s2):\n    '''\n    Write a python function to check if a string is a rotated version of another string\n    '''\n    if len(s1)>len(s2):\n        return False\n    else:\n        rotated_string=rotate_string(s1,len(s2))\n        if rotated_string==s2:\n            return True\n        else:\n            return False\ndef is_rotated_1(s1,s2):\n    '''\n    Write a python function to check if a string is a rotated version of another string\n    '''\n    if len(s1)>len(s2):\n        return False\n    else:\n        rotated_string=rotate_string(s2,len(s1))\n        if rotated_string==s1:\n            return True\n        else:\n            return False\ndef is_rotated_2(s1,s2):\n    '''\n    Write a python function to check if a string is a rotated version of another string\n    '''\n    if len(s1)>len(s2):\n        return False\n    else:\n        if s1[0:len(s2)]==s2:\n            return True\n        else:\n            return False\ndef is_rotated_3(s1,s2):\n    '''\n    Write a python function to check if a string is a rotated version of another string\n    '''\n    if len(s1)>len(s2):\n        return False\n    else:\n        if s1[len(s2):len(s1)]==s2:\n            return True\n        else:\n            return False\ndef is_rotated_4(s1,s2):\n    '''\n    Write a python function to check if a string is a rotated version of another string\n    '''\n    if len(s1)>len("
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # all substrings with the sum of digits equal to the length of the substring\n    # e.g. '2222' is a substring with the sum of digits equal to the length of substring\n    # '2222' is a substring with the sum of digits equal to the length of substring\n    # '22222' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '12345' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n    # '1234' is a substring with the sum of digits equal to the length of substring\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings[s[i:j]] += 1\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def getDigit(s):\n        r = 0\n        for c in s:\n            r = 10*r + (ord(c) - ord('0'))\n        return r\n    substr = defaultdict(int)\n    for i in xrange(len(s)):\n        for j in xrange(i,len(s)+1):\n            substr[getDigit(s[i:j])] += 1\n    return sum(substr[len(s) - len(s) % 10] for s in substr if len(s) % 10 == len(s))\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    ans = 0\n    for i in range(n):\n        ans += count_Substrings_help(s, i, i, 0, defaultdict(int))\n        ans += count_Substrings_help(s, i, i, 1, defaultdict(int))\n    return ans\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            d[s[j] - s[i]] += 1\n    for i in d:\n        count += d[i] * (d[i] - 1) / 2\n    print count\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #return sum([1 for i in range(len(s)) if sum([int(s[i]) for i in range(len(s))]) == len(s)])\n    return sum([1 for i in range(len(s)) for j in range(i+1,len(s)+1) if sum([int(s[i:j]) for i in range(len(s))]) == len(s)])\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(lambda:0)\n    start = 0\n    for i in range(len(s)):\n        d[s[i]] += 1\n        while start<len(s) and d[s[i]+s[start]]>0:\n            d[s[i]+s[start]] -= 1\n            start += 1\n    return sum(d.values())\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n    \ndef all_unique(xs):\n    '''\n    Write a python function to check whether all elements in a list are unique.\n    '''\n    return len(set(xs)) == len(xs)\n    \ndef is_palindrome(xs):\n    '''\n    Write a python function to check whether a given word is a palindrome.\n    '''\n    return xs == xs[::-1]\n    \ndef is_anagram(xs, ys):\n    '''\n    Write a python function to check whether two given strings are anagrams or not.\n    '''\n    return sorted(xs) == sorted(ys)\n    \ndef count_letter_occurrences(word, letter):\n    '''\n    Write a python function to return the number of times a given letter occurs in a given string.\n    '''\n    return word.count(letter)\n    \ndef is_in_alphabet(letter):\n    '''\n    Write a python function to check whether a given letter is in alphabet or not.\n    '''\n    return letter.isalpha()\n    \ndef is_palindrome_permutation(word):\n    '''\n    Write a python function to check whether a word is a permutation of a palindrome or not.\n    '''\n    char_counts = {}\n    for char in word:\n        char_counts[char] = char_counts.get(char, 0) + 1\n    \n    odd_count = 0\n    for count in char_counts.values():\n        if count % 2!= 0:\n            odd_count += 1\n        if odd_count > 1:\n            return False\n    return True\n    \ndef is_valid_password(password):\n    '''\n    Write a python function to check whether a given password is valid or not.\n    '''\n    return is_palindrome(password) and is_palindrome_permutation(password)\n    \ndef move_zeros(xs):\n    '''\n    Write a python function to move all 0s to the end of a list.\n    '''\n    return [x for x in xs if x!= 0] + [0] * xs.count(0)\n    \ndef smallest_range(xs):\n    '''\n    Write a python function to find the smallest range in a list of non-negative integers.\n    '''\n    xs.sort()\n    smallest, biggest = xs[0], xs[-1]\n    smallest_range, biggest_range = 0, 0\n    \n    for i in range(1, len(xs)):\n        if xs[i] > xs[i-1]:\n            smallest_range = xs[i-1] + 1\n            biggest_range = xs[i] - 1\n            break\n        \n    return smallest_range, biggest_range\n    \ndef top_2_words(words):\n    '''\n    Write a python function to find the top 2 most frequent words in a given list.\n    '''\n    word_counts = {}\n    \n    for word in words:\n        word_counts[word] = word_counts.get(word, 0) + 1\n        \n    top_2 = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)[:2]\n    \n    return top_2\n    \ndef convert_to_binary(n):\n    '''\n    Write a python function to convert a given integer to its binary representation.\n    '''\n    if n == 0:\n        return [0]\n    \n    bin_digits = []\n    while n > 0:\n        bin_digits.append(str(n % 2))\n        n //= 2\n        \n    return list(reversed(bin_digits))\n    \ndef convert_to_base_ten(n, base):\n    '''\n    Write a python function to convert a given string to its base 10 representation.\n    '''\n    if base == 10:\n        return n\n    \n    return int(n, base)\n    \ndef find_factors(n):\n    '''\n    Write a python function to find all the factors of a given number n.\n    '''\n    factors = [n]\n    \n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            \n    return factors\n    \ndef is_permutation(xs, ys):\n    '''\n    Write a python function to check whether two given lists are permutations or not.\n    '''\n    if len(xs)!= len(ys):\n        return False\n    \n    counts = {}\n    for x in xs:\n        counts[x] = counts.get(x, 0) + 1\n    \n    for y in ys:\n        if y not in counts:\n            return False\n        \n        counts[y] -= 1\n        if counts[y] < 0:\n            return False\n        \n    return True\n    \ndef is_kaprekar_number(n):\n    '''\n    Write a python function to check whether a given number is a kaprekar number or not.\n    '''\n    sq = n ** 2\n    if sq == n:\n        return True\n    elif sq > n:\n        return False\n    \n    digits = convert_to_binary(sq)\n    digits_reversed = list(reversed(digits))\n    \n    if digits == digits_reversed:\n        return True\n    \n    return False\n    \ndef reverse_list(xs):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    return list(reversed(xs))\n    \ndef reverse_words_in_a_sentence(sentence):\n    '''\n    Write a python function to reverse each word in a sentence.\n    '''\n    return''.join(reversed(sentence.split(' ')))\n    \ndef is_digit(n):\n    '''\n    Write a python function to check whether a given number is a digit or not.\n    '''\n    return n.isdigit()\n    \ndef is_pandigital(n):\n    '''\n    Write a python function to check whether a given number is pandigital or not.\n    '''\n    return len(set(str(n))) == 10\n    \ndef is_pandigital_permutation(n):\n    '''\n    Write a python function to check whether a given number is a pandigital permutation or not.\n    '''\n    digits = set(str(n))\n    \n    if len(digits)!= 10:\n        return False\n    \n    return sorted(digits) == [str(i) for i in range(1, 10)]\n    \ndef is_pandigital_product(n):\n    '''\n    Write a python function to check whether a given number is a pandigital product or not.\n    '''\n    return is_pandigital(n) and is_pandigital_permutation(n)\n    \ndef is_prime(n):\n    '''\n    Write a python function to check whether a given number is a prime or not.\n    '''\n    if n < 2:\n        return False\n    \n    for i in range(2, int(n**.5)+1):\n        if n % i == 0:\n            return False\n            \n    return True\n    \ndef get_digits(n):\n    '''\n    Write a python function to get all the digits of a given number n.\n    '''\n    return [int(d) for d in str(n)]\n    \ndef is_antipalindrome(n):\n    '''\n    Write a python function to check whether a given number is an antipalindrome or not.\n    '''\n    return n == n[::-1]\n    \ndef is_power_of_2(n):\n    '''\n    Write a python function to check whether a given number is a power of 2 or not.\n    '''\n    return n & (n - 1) == 0\n    \ndef is_power_of_2_bits(n):\n    '''\n    Write a python function to check whether a given number is a power of 2 in bits or not.\n    '''\n    return n == 0b
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n    \ndef largest_num(xs):\n    '''\n    Write a python function to find largest number in a list.\n    '''\n    return max(xs)\n    \ndef num_odd(xs):\n    '''\n    Write a python function to find the number of odd numbers in a list.\n    '''\n    count = 0\n    for num in xs:\n        if (num % 2)!= 0:\n            count += 1\n    return count\n    \ndef num_even(xs):\n    '''\n    Write a python function to find the number of even numbers in a list.\n    '''\n    count = 0\n    for num in xs:\n        if (num % 2) == 0:\n            count += 1\n    return count\n    \ndef num_pos(xs):\n    '''\n    Write a python function to find the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in xs:\n        if num > 0:\n            count += 1\n    return count\n    \ndef num_neg(xs):\n    '''\n    Write a python function to find the number of negative numbers in a list.\n    '''\n    count = 0\n    for num in xs:\n        if num < 0:\n            count += 1\n    return count\n    \ndef num_div_by_3(xs):\n    '''\n    Write a python function to find the number of numbers divisible by 3 in a list.\n    '''\n    count = 0\n    for num in xs:\n        if (num % 3) == 0:\n            count += 1\n    return count\n    \ndef num_div_by_7(xs):\n    '''\n    Write a python function to find the number of numbers divisible by 7 in a list.\n    '''\n    count = 0\n    for num in xs:\n        if (num % 7) == 0:\n            count += 1\n    return count\n    \ndef is_prime(x):\n    '''\n    Write a python function to determine whether a number is prime or not.\n    '''\n    if x == 1:\n        return False\n    for num in range(2,x):\n        if x % num == 0:\n            return False\n    return True\n    \ndef num_pal(xs):\n    '''\n    Write a python function to find the number of palindrome numbers in a list.\n    '''\n    count = 0\n    for num in xs:\n        temp = str(num)\n        if temp == temp[::-1]:\n            count += 1\n    return count\n    \ndef pal_str_to_int(s):\n    '''\n    Write a python function to convert a string to a palindrome integer.\n    '''\n    return int(s)\n    \ndef int_to_pal_str(num):\n    '''\n    Write a python function to convert an integer to a palindrome string.\n    '''\n    return str(num)\n    \ndef square_num(xs):\n    '''\n    Write a python function to return the square of a number.\n    '''\n    return num * num\n    \ndef sum_square(xs):\n    '''\n    Write a python function to return the sum of the squares of a list of numbers.\n    '''\n    sum = 0\n    for num in xs:\n        sum += square_num(num)\n    return sum\n    \ndef count_odd(xs):\n    '''\n    Write a python function to return the number of odd numbers in a list.\n    '''\n    count = 0\n    for num in xs:\n        if num % 2!= 0:\n            count += 1\n    return count\n    \ndef count_even(xs):\n    '''\n    Write a python function to return the number of even numbers in a list.\n    '''\n    count = 0\n    for num in xs:\n        if num % 2 == 0:\n            count += 1\n    return count\n    \ndef count_pos(xs):\n    '''\n    Write a python function to return the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in xs:\n        if num > 0:\n            count += 1\n    return count\n    \ndef count_neg(xs):\n    '''\n    Write a python function to return the number of negative numbers in a list.\n    '''\n    count = 0\n    for num in xs:\n        if num < 0:\n            count += 1\n    return count\n    \ndef sum_neg(xs):\n    '''\n    Write a python function to return the sum of negative numbers in a list.\n    '''\n    sum = 0\n    for num in xs:\n        if num < 0:\n            sum += num\n    return sum\n    \ndef sum_pos(xs):\n    '''\n    Write a python function to return the sum of positive numbers in a list.\n    '''\n    sum = 0\n    for num in xs:\n        if num > 0:\n            sum += num\n    return sum\n    \ndef nth_power(base, n):\n    '''\n    Write a python function to return the nth power of a number.\n    '''\n    return base ** n\n    \ndef nth_power_list(xs, n):\n    '''\n    Write a python function to return a list of nth power of a number in a list.\n    '''\n    result = []\n    for num in xs:\n        result.append(nth_power(num, n))\n    return result\n    \ndef max_num(xs):\n    '''\n    Write a python function to return the maximum number in a list.\n    '''\n    return max(xs)\n    \ndef mean_num(xs):\n    '''\n    Write a python function to return the mean of a list of numbers.\n    '''\n    return sum(xs) / len(xs)\n    \ndef median_num(xs):\n    '''\n    Write a python function to return the median of a list of numbers.\n    '''\n    n = len(xs)\n    if n % 2 == 1:\n        return sorted(xs)[n//2]\n    else:\n        return sum(sorted(xs)[n//2 - 1:n//2 + 1]) / 2\n    \ndef var_num(xs):\n    '''\n    Write a python function to return the variance of a list of numbers.\n    '''\n    mean = mean_num(xs)\n    sum_of_sqrs = 0\n    for num in xs:\n        sum_of_sqrs += (num - mean) ** 2\n    return sum_of_sqrs / len(xs)\n    \ndef std_dev(xs):\n    '''\n    Write a python function to return the standard deviation of a list of numbers.\n    '''\n    return var_num(xs) ** 0.5\n    \ndef same_num(xs):\n    '''\n    Write a python function to return the number of same numbers in a list.\n    '''\n    count = 0\n    for num in xs:\n        if xs.count(num) > 1:\n            count += 1\n    return count\n    \ndef same_num_dict(xs):\n    '''\n    Write a python function to return a dictionary of same numbers in a list.\n    '''\n    dic = {}\n    for num in xs:\n        if num in dic:\n            dic[num] += 1\n        else:\n            dic[num] = 1\n    return dic\n    \ndef is_same_num_list(xs):\n    '''\n    Write a python function to return a list of numbers in a list that are the same as a list of numbers in another list.\n    '''\n    result = []\n    for num in xs:\n        if xs.count(num) > 1:\n            result.append(num)\n    return result\n    \ndef first_and_last(xs):\n    '''\n    Write a python function to return a list of the first and last number in a list.\n    '''\n    return [xs[0], xs[-1]]\n    \ndef even_num_dict(xs):\n    '''\n    Write a python function to return a dictionary of even numbers in a list.\n    '''\n    dic = {}\n    for num in xs:\n        if (num % 2) == 0:\n            dic[num] = True\n    return dic\n    \ndef odd_num_dict(xs):\n    '''"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    elif len(xs) == 1:\n        return xs[0]\n    else:\n        # this is a bit tricky, you don't want to make a copy of xs.\n        # you want to sort it, then return the first item.\n        return sorted(xs)[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # YOUR CODE HERE\n    min_num = xs[0]\n    for num in xs:\n        if num < min_num:\n            min_num = num\n    return min_num\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = xs[0]\n    for i in xs:\n        if i < min_num:\n            min_num = i\n    return min_num\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # initialize the return value\n    ret_val = -1\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    ans = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            ans = max(ans, abs(test_list[i] - test_list[j]))\n    return ans\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max([abs(a - b) for a in test_list for b in test_list if a!= b])\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) <= 2:\n        return 0\n    max_dif = 0\n    for i in range(0, len(test_list)):\n        for j in range(0, len(test_list)):\n            if i!= j:\n                max_dif = max(max_dif, abs(test_list[i] - test_list[j]))\n    return max_dif\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff_list = []\n    for i in range(0, len(test_list) - 1):\n        diff_list.append(abs(test_list[i] - test_list[i+1]))\n    return max(diff_list)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list)<2:\n        return -1\n    elif len(test_list)==2:\n        return abs(test_list[0]-test_list[1])\n    else:\n        return max(abs(test_list[i]-test_list[i+1]) for i in range(len(test_list)-1))\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max([abs(a-b) for a in test_list for b in test_list])\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n    max_diff = 0\n    for i in xrange(len(test_list)):\n        for j in xrange(i+1, len(test_list)):\n            if abs(test_list[i]-test_list[j]) > max_diff:\n                max_diff = abs(test_list[i]-test_list[j])\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max(abs(x-y) for x,y in itertools.combinations(test_list,2))\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return 0\n    list1 = []\n    for i in test_list:\n        if test_list.count(i) > 1:\n            list1.append(i)\n    sorted_list = sorted(list1)\n    if len(sorted_list) % 2!= 0:\n        return sorted_list[len(sorted_list) - 1] - sorted_list[len(sorted_list) - 2]\n    else:\n        return sorted_list[len(sorted_list) - 1] - sorted_list[len(sorted_list) - 2] + sorted_list[len(sorted_list) - 3]\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    import operator\n    return sorted(subjectmarks,key=operator.itemgetter(1))\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # d = {}\n    # for x,y in subjectmarks:\n    #     d[x] = y\n    # return sorted(d, key=d.get)\n    return sorted(subjectmarks, key=operator.itemgetter(1))\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=operator.itemgetter(1), reverse=True)\n    return sorted_list\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=operator.itemgetter(1))\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda tup: tup[1])\n    \ndef subject_marks_descending(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda tup: tup[1], reverse=True)\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key = lambda x:x[1])\n    return sorted_list\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subject_marks.sort(key=lambda x: x[1])\n    return subject_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    list_marks = []\n    for sub in subjectmarks:\n        list_marks.append((sub[0], sub[1]))\n    list_marks.sort(key=lambda x: x[1], reverse=True)\n    for i in list_marks:\n        print(i)\n    return list_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key = lambda x: x[1])\n    return sorted_list\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    if isinstance(data_list[0], int):\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    else:\n        return recursive_list_sum(data_list[1:]) + recursive_list_sum(data_list[0:1])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum_data = 0\n    for sublist in data_list:\n        if isinstance(sublist, int):\n            sum_data += sublist\n        elif isinstance(sublist, list):\n            sum_data += recursive_list_sum(sublist)\n        else:\n            continue\n    return sum_data\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        return sum(recursive_list_sum(data_list[0:len(data_list)]))\n    else:\n        return data_list\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for i in list if i > 0)\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_list = []\n    for i in list:\n        if i > 0:\n            pos_list.append(i)\n    return pos_list\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    cnt = 0\n    for i in list:\n        if i > 0:\n            cnt = cnt + 1\n    return cnt\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    num_pos=0\n    for i in list:\n        if i>0:\n            num_pos+=1\n    return num_pos\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for i in list:\n        if i > 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for x in list:\n        if x >= 0:\n            count += 1\n    return count\n    \ndef pos_count_two(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for x in list:\n        if x > 0:\n            count += 1\n    return count\n    \ndef pos_count_three(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len([x for x in list if x > 0])\n    \ndef pos_count_four(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    \ndef pos_count_five(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x >= 0])\n    \ndef pos_count_six(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    \ndef pos_count_seven(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    \ndef pos_count_eight(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    \ndef pos_count_nine(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    \ndef pos_count_ten(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    \ndef pos_count_eleven(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    \ndef pos_count_twelve(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    \ndef pos_count_thirteen(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    \ndef pos_count_fourteen(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    \ndef pos_count_fifteen(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    \ndef pos_count_sixteen(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    \ndef pos_count_seventeen(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    \ndef pos_count_eighteen(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    \ndef pos_count_nineteen(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    \ndef pos_count_twenty(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    \ndef pos_count_twentyone(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    \ndef pos_count_twentytwo(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    \ndef pos_count_twentythree(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    \ndef pos_count_twentyfour(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    \ndef pos_count_twentyfive(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    \ndef pos_count_twentysix(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    \ndef pos_count_twentyseven(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    \ndef pos_count_twentyeight(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    \ndef pos_count_twentynine(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    \ndef pos_count_thirty(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    \ndef pos_count_thirtyone(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    \ndef pos_count_thirtytwo(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    \ndef pos_count_thirtythree(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    \ndef pos_count_thirtyfour(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    \ndef pos_count_thirtyfive(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    \ndef pos_count_thirtysix(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    \ndef pos_count_thirtyseven(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    \ndef pos_count_thirtyeight(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n    "
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for x in list:\n        if x>0:\n            count +=1\n    return count\ndef neg_count(list):\n    '''\n    Write a python function to count the number of negative numbers in a list.\n    '''\n    count=0\n    for x in list:\n        if x<0:\n            count +=1\n    return count\ndef find_max_min(list):\n    '''\n    Write a python function to find the maximum and minimum elements of a list.\n    '''\n    min=None\n    max=None\n    for x in list:\n        if min is None or x<min:\n            min=x\n        if max is None or x>max:\n            max=x\n    return (max,min)\ndef remove_duplicates(list):\n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    list2=[]\n    for x in list:\n        if x not in list2:\n            list2.append(x)\n    return list2\ndef unique_list(list):\n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    list2=[]\n    for x in list:\n        if x not in list2:\n            list2.append(x)\n    return list2\ndef even_list(list):\n    '''\n    Write a python function to return a list of even numbers from a given list.\n    '''\n    list2=[]\n    for x in list:\n        if x%2==0:\n            list2.append(x)\n    return list2\ndef odd_list(list):\n    '''\n    Write a python function to return a list of odd numbers from a given list.\n    '''\n    list2=[]\n    for x in list:\n        if x%2!=0:\n            list2.append(x)\n    return list2\ndef reverse_list(list):\n    '''\n    Write a python function to return a reverse of a given list.\n    '''\n    list2=[]\n    for x in range(len(list),0,-1):\n        list2.append(list[x-1])\n    return list2\ndef div_by_two(list):\n    '''\n    Write a python function to return a list of divisors of a given list.\n    '''\n    list2=[]\n    for x in list:\n        if x%2==0:\n            list2.append(x)\n    return list2\ndef not_div_by_three(list):\n    '''\n    Write a python function to return a list of non-divisors of a given list.\n    '''\n    list2=[]\n    for x in list:\n        if x%3!=0:\n            list2.append(x)\n    return list2\ndef find_second_maximum_number(list):\n    '''\n    Write a python function to find the second maximum number in a given list.\n    '''\n    max_number=None\n    second_max=None\n    for x in list:\n        if max_number is None or x>max_number:\n            second_max=max_number\n            max_number=x\n        elif second_max is None or x>second_max:\n            second_max=x\n    return second_max\ndef find_second_minimum_number(list):\n    '''\n    Write a python function to find the second minimum number in a given list.\n    '''\n    min_number=None\n    second_min=None\n    for x in list:\n        if min_number is None or x<min_number:\n            second_min=min_number\n            min_number=x\n        elif second_min is None or x<second_min:\n            second_min=x\n    return second_min\ndef get_number_of_items(list):\n    '''\n    Write a python function to return the number of items in a given list.\n    '''\n    count=0\n    for x in list:\n        count +=1\n    return count\ndef remove_item_by_value(list,item):\n    '''\n    Write a python function to remove an item from a given list.\n    '''\n    for x in list:\n        if x==item:\n            list.remove(x)\n    return list\ndef remove_item_by_index(list,index):\n    '''\n    Write a python function to remove an item from a given list.\n    '''\n    list.pop(index)\n    return list\ndef get_unique_values(list):\n    '''\n    Write a python function to get unique values from a given list.\n    '''\n    list2=[]\n    for x in list:\n        if x not in list2:\n            list2.append(x)\n    return list2\ndef get_unique_values_with_duplicates(list):\n    '''\n    Write a python function to get unique values from a given list.\n    '''\n    list2=[]\n    for x in list:\n        if x not in list2:\n            list2.append(x)\n    return list2\ndef get_reverse_of_list(list):\n    '''\n    Write a python function to get reverse of a given list.\n    '''\n    list2=[]\n    for x in range(len(list),0,-1):\n        list2.append(list[x-1])\n    return list2\ndef swap_list_items(list,index1,index2):\n    '''\n    Write a python function to swap two items in a given list.\n    '''\n    temp=list[index1]\n    list[index1]=list[index2]\n    list[index2]=temp\n    return list\ndef get_total_number_of_items(list):\n    '''\n    Write a python function to return the total number of items in a given list.\n    '''\n    count=0\n    for x in list:\n        count +=1\n    return count\ndef get_total_number_of_strings(list):\n    '''\n    Write a python function to return the total number of strings in a given list.\n    '''\n    count=0\n    for x in list:\n        if isinstance(x,str):\n            count +=1\n    return count\ndef get_total_number_of_numbers(list):\n    '''\n    Write a python function to return the total number of numbers in a given list.\n    '''\n    count=0\n    for x in list:\n        if isinstance(x,int) or isinstance(x,float):\n            count +=1\n    return count\ndef get_total_number_of_integers(list):\n    '''\n    Write a python function to return the total number of integers in a given list.\n    '''\n    count=0\n    for x in list:\n        if isinstance(x,int):\n            count +=1\n    return count\ndef get_total_number_of_floats(list):\n    '''\n    Write a python function to return the total number of floats in a given list.\n    '''\n    count=0\n    for x in list:\n        if isinstance(x,float):\n            count +=1\n    return count\ndef get_total_number_of_booleans(list):\n    '''\n    Write a python function to return the total number of booleans in a given list.\n    '''\n    count=0\n    for x in list:\n        if isinstance(x,bool):\n            count +=1\n    return count\ndef get_total_number_of_dictionaries(list):\n    '''\n    Write a python function to return the total number of dictionaries in a given list.\n    '''\n    count=0\n    for x in list:\n        if isinstance(x,dict):\n            count +=1\n    return count\ndef get_total_number_of_lists(list):\n    '''\n    Write a python function to return the total number of lists in a given list.\n    '''\n    count=0\n    for x in list:\n        if isinstance(x,list):\n            count +=1\n    return count\ndef get_total_number_of_tuples(list):\n    '''\n    Write a python function to return the total number of tuples in a given list.\n    '''\n    count=0\n    for x in list:\n        if isinstance(x,tuple):\n            coun"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for i in list:\n        if i > 0:\n            pos_count = pos_count + 1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for number in list:\n        if number > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [0 for i in xrange(n+1)]\n    bell[0] = 1\n    bell[1] = 1\n    for i in xrange(2,n+1):\n        bell[i] = bell[i-1] + bell[i-2]\n    return bell[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n > 1:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def num_ways(n,m):\n        if m == 0: return 1\n        if n == m: return 1\n        return num_ways(n-1,m-1) + num_ways(n-1,m)\n    \n    bell_number = [num_ways(i,i) for i in range(n)]\n    return bell_number[n-1]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return bell(n)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    global dp\n    dp = [0 for i in range(n+1)]\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n+1):\n        for j in range(1, i):\n            dp[i] += dp[j-1] * dp[i-j-1]\n    return dp[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 0:\n        return 1\n    elif n < 3:\n        return n\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    ways = [1]\n    for i in xrange(1, n):\n        ways.append(sum(ways[:i]))\n    return ways[-1]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    res = [1]\n    while n > len(res):\n        res += [sum(res[-i:] for i in range(1, len(res) + 1))]\n    return res[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_num = [1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 89178, 108826, 177139, 587863670]\n    return bell_num[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    cache = [0]*(n+1)\n    cache[0] = 1\n    cache[1] = 1\n    for i in range(2, n+1):\n        cache[i] = cache[i-1] + cache[i-2]\n    return cache[n]\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    pass\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 3:\n        return True\n    \n    # monotonic means that A[i] <= A[i+1] >= A[i+2]\n    for i in range(0, len(A)-2):\n        if A[i] >= A[i+1] or A[i] <= A[i+2]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 2:\n        return True\n    else:\n        for i in range(len(A)-1):\n            if A[i] > A[i+1]:\n                return False\n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    if A[0] < A[1]:\n        for i in xrange(1,len(A)):\n            if A[i] < A[i-1]:\n                return False\n    else:\n        for i in xrange(1,len(A)):\n            if A[i] > A[i-1]:\n                return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    if len(A) == 1:\n        return True\n    \n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            return True\n    \n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # for i in range(1, len(A)):\n    #     if A[i] < A[i-1]:\n    #         return False\n    # return True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return A == sorted(A) or A == sorted(A, reverse=True)\ndef is_Palindrome(A):\n    '''\n    Write a python function to check whether the given array is a palindrome or not.\n    '''\n    return A == A[::-1]\ndef is_Panagram(A):\n    '''\n    Write a python function to check whether the given string is a panagram or not.\n    '''\n    return len(set(A.lower())) == 26\ndef is_Palidrome(A):\n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    return A == A[::-1]\ndef is_Palindrome(A):\n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    return A == A[::-1]\ndef is_Palidrome(A):\n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    return A == A[::-1]\ndef is_Palidrome(A):\n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    return A == A[::-1]\ndef is_Palindrome(A):\n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    return A == A[::-1]\ndef is_Palidrome(A):\n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    return A == A[::-1]\ndef is_Panagram(A):\n    '''\n    Write a python function to check whether the given string is a panagram or not.\n    '''\n    return len(set(A.lower())) == 26\ndef is_Panagram(A):\n    '''\n    Write a python function to check whether the given string is a panagram or not.\n    '''\n    return len(set(A.lower())) == 26\ndef is_Panagram(A):\n    '''\n    Write a python function to check whether the given string is a panagram or not.\n    '''\n    return len(set(A.lower())) == 26\ndef is_Panagram(A):\n    '''\n    Write a python function to check whether the given string is a panagram or not.\n    '''\n    return len(set(A.lower())) == 26\ndef is_Panagram(A):\n    '''\n    Write a python function to check whether the given string is a panagram or not.\n    '''\n    return len(set(A.lower())) == 26\ndef is_Panagram(A):\n    '''\n    Write a python function to check whether the given string is a panagram or not.\n    '''\n    return len(set(A.lower())) == 26\ndef is_Panagram(A):\n    '''\n    Write a python function to check whether the given string is a panagram or not.\n    '''\n    return len(set(A.lower())) == 26\ndef is_Panagram(A):\n    '''\n    Write a python function to check whether the given string is a panagram or not.\n    '''\n    return len(set(A.lower())) == 26\ndef is_Panagram(A):\n    '''\n    Write a python function to check whether the given string is a panagram or not.\n    '''\n    return len(set(A.lower())) == 26\ndef is_Panagram(A):\n    '''\n    Write a python function to check whether the given string is a panagram or not.\n    '''\n    return len(set(A.lower())) == 26\ndef is_Panagram(A):\n    '''\n    Write a python function to check whether the given string is a panagram or not.\n    '''\n    return len(set(A.lower())) == 26\ndef is_Panagram(A):\n    '''\n    Write a python function to check whether the given string is a panagram or not.\n    '''\n    return len(set(A.lower())) == 26\ndef is_Panagram(A):\n    '''\n    Write a python function to check whether the given string is a panagram or not.\n    '''\n    return len(set(A.lower())) == 26\ndef is_Panagram(A):\n    '''\n    Write a python function to check whether the given string is a panagram or not.\n    '''\n    return len(set(A.lower())) == 26\ndef is_Panagram(A):\n    '''\n    Write a python function to check whether the given string is a panagram or not.\n    '''\n    return len(set(A.lower())) == 26\ndef is_Panagram(A):\n    '''\n    Write a python function to check whether the given string is a panagram or not.\n    '''\n    return len(set(A.lower())) == 26\ndef is_Panagram(A):\n    '''\n    Write a python function to check whether the given string is a panagram or not.\n    '''\n    return len(set(A.lower())) == 26\ndef is_Panagram(A):\n    '''\n    Write a python function to check whether the given string is a panagram or not.\n    '''\n    return len(set(A.lower())) == 26\ndef is_Panagram(A):\n    '''\n    Write a python function to check whether the given string is a panagram or not.\n    '''\n    return len(set(A.lower())) == 26\ndef is_Panagram(A):\n    '''\n    Write a python function to check whether the given string is a panagram or not.\n    '''\n    return len(set(A.lower())) == 26\ndef is_Panagram(A):\n    '''\n    Write a python function to check whether the given string is a panagram or not.\n    '''\n    return len(set(A.lower())) == 26\ndef is_Panagram(A):\n    '''\n    Write a python function to check whether the given string is a panagram or not.\n    '''\n    return len(set(A.lower())) == 26\ndef is_Panagram(A):\n    '''\n    Write a python function to check whether the given string is a panagram or not.\n    '''\n    return len(set(A.lower())) == 26\ndef is_Panagram(A):\n    '''\n    Write a python function to check whether the given string is a panagram or not.\n    '''\n    return len(set(A.lower())) == 26\ndef is_Panagram(A):\n    '''\n    Write a python function to check whether the given string is a panagram or not.\n    '''\n    return len(set(A.lower())) == 26\ndef is_Panagram(A):\n    '''\n    Write a python function to check whether the given string is a panagram or not.\n    '''\n    return len(set(A.lower())) == 26\ndef is_Panagram(A):\n    '''\n    Write a python function to check whether the given string is a panagram or not.\n    '''\n    return len(set(A.lower())) == 26\ndef is_Panagram(A):\n    '''\n    Write a python function to check whether the given string is a panagram or not.\n    '''\n    return len(set(A.lower())) == 26\ndef is_Panagram(A):\n    '''\n    Write a python function to check whether the given string is a panagram or not.\n    '''\n    return len(set(A.lower())) == 26\ndef is_Panagram(A):\n    '''\n    Write a python function to check whether the given string is a panagram or not.\n    '''\n    return len(set(A.lower())) == 26\ndef is_Panagram(A):\n    '''\n    Write a python function to check whether the given string is a panagram or not.\n    '''\n    return len(set(A.lower())) == 26\ndef is_Panagram(A):\n    '''\n    Write a python function to check whether the given string is a panagram or not.\n    '''\n    return len(set(A.lower())"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    if len(A)<=3:\n        return True\n    \n    if A[0]<=A[1] and A[1]<=A[2]:\n        for i in range(2,len(A)):\n            if A[i-2]<=A[i]<=A[i-1]:\n                pass\n            else:\n                return False\n            \n    elif A[0]>=A[1] and A[1]>=A[2]:\n        for i in range(2,len(A)):\n            if A[i-2]>=A[i]>=A[i-1]:\n                pass\n            else:\n                return False\n            \n    else:\n        return False\n    \n    return True\n    \n    \nif __name__==\"__main__\":\n    A=[1,2,3,4,5,6,7,8]\n    print(is_Monotonic(A))\n    \n    B=[1,1,1,1]\n    print(is_Monotonic(B))"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    i = 0\n    j = 1\n    while(j < len(A)):\n        if(A[i] <= A[j]):\n            i = j\n            j += 1\n        elif(A[i] > A[j]):\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s in l:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == []:\n        return False\n    if l[0:len(s)] == s:\n        return True\n    else:\n        return is_sublist(l[1:], s)\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l_length = len(l)\n    s_length = len(s)\n    if l_length < s_length:\n        return False\n    if l_length == s_length:\n        return l == s\n    for i in xrange(0, s_length):\n        if l[i]!= s[i]:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    if l == s:\n        return True\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l[1:], s)\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not l:\n        return False\n    elif not s:\n        return True\n    elif l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []: return True\n    if len(l) < len(s): return False\n    return l[:len(s)] == s\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        for j in range(len(s)):\n            if l[i + j]!= s[j]:\n                break\n        if j == len(s) - 1:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    subl = [s[0]]\n    for i in range(1, len(s)):\n        if s[i]!= subl[-1]:\n            subl.append(s[i])\n    return subl == l\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    result = False\n    if len(s) > len(l):\n        return result\n    else:\n        for i in range(len(l) - len(s) + 1):\n            if l[i:i+len(s)] == s:\n                result = True\n    return result\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tup_list = []\n    for tup in Input:\n        tup_list.append(tup[0])\n    if len(set(tup_list)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    arr=list(Input)\n    elements=len(arr)\n    if elements < 1:\n        return True\n    dict = {}\n    for i in range(elements):\n        if arr[i][0] not in dict:\n            dict[arr[i][0]]=0\n        else:\n            dict[arr[i][0]]+=1\n    for key,value in dict.items():\n        if value > 1:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return True if len(set([len(x) for x in Input])) == 1 else False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    list_all = []\n    for i in Input:\n        list_all.append(len(i))\n    if len(set(list_all)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) <= 1:\n        return True\n    if len(Input[0])!= len(Input[1]):\n        return False\n    return find_equal_tuple(Input[1:])\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Output = []\n    for each in Input:\n        if len(each) == len(Input[0]):\n            Output.append(True)\n        else:\n            Output.append(False)\n    return Output\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    result = True\n    for each_tuple in Input:\n        if len(each_tuple)!= len(Input[0]):\n            result = False\n            break\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    dict_tuple={}\n    length_list=[]\n    for item in Input:\n        if len(item) not in length_list:\n            length_list.append(len(item))\n            dict_tuple[len(item)]=[item]\n        else:\n            dict_tuple[len(item)].append(item)\n    for item in length_list:\n        if len(dict_tuple[item])>1:\n            return False\n    return True\n    \n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length=len(Input[0])\n    for i in range(1,len(Input)):\n        if len(Input[i])!=length:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return all(len(t) == len(Input[0]) for t in Input)\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        swapped = False\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        for i in range(0, n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    start = 0\n    end = n - 1\n    while (swapped):\n        swapped = False\n        for i in range(start, end):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n        if swapped:\n            swapped = False\n            end -= 1\n        for i in range(end-1, start-1, -1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n        if swapped:\n            swapped = False\n            start += 1\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    '''\n    Input:\n        nums: an array of integers\n    Output:\n        The array of integers sorted in ascending order\n    '''\n    if len(nums) == 1:\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(1, len(nums)):\n        curr = nums[i]\n        prev = i-1\n        while prev>=0 and nums[prev] > curr:\n            nums[prev+1] = nums[prev]\n            prev -= 1\n        nums[prev+1] = curr\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums) - 1):\n        j = i + 1\n        while j > 0:\n            if nums[j] < nums[j - 1]:\n                nums[j], nums[j - 1] = nums[j - 1], nums[j]\n                j -= 1\n            else:\n                break\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap!= 1 or swapped:\n        gap = max(1, int(gap / 1.25))\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Get length of list\n    length = len(nums)\n    # Get number of elements to combine\n    num_to_combine = 1\n    while num_to_combine < length/3:\n        num_to_combine *= 3\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n    swapped = True\n    for i in range(1, len(nums)):\n        if not swapped:\n            continue\n        swapped = False\n        for j in range(len(nums) - i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n**0.5)%1==0 and (n-n**0.5)%1==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a=1\n    b=2\n    while b<n:\n        if (b**2)-(a**2) == n:\n            return True\n        a+=1\n        b+=1\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    sq = [1,4,9,16,25,36,49,64,81]\n    sq1 = [4,9,16,25,36,49,64,81,100]\n    for i in sq:\n        if n == i:\n            return True\n        elif n == i+1:\n            return True\n        elif n == i-1:\n            return True\n    for i in sq1:\n        if n == i:\n            return True\n        elif n == i+1:\n            return True\n        elif n == i-1:\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        print(\"Not possible\")\n    elif n == 0:\n        print(\"Possible\")\n    else:\n        x = n//2\n        if x*x == n:\n            print(\"Possible\")\n        elif x*x > n:\n            print(\"Not possible\")\n        else:\n            print(\"Possible\")\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    cnt = 0\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            if i**2 - j**2 == n:\n                cnt = cnt + 1\n    print(cnt)\ndef common_digits(a,b):\n    '''\n    Write a python function to find the count of common digits between the two numbers.\n    '''\n    cnt = 0\n    for i in a:\n        for j in b:\n            if i == j:\n                cnt = cnt + 1\n    print(cnt)\ndef largest_square(n):\n    '''\n    Write a python function to find the largest square number less than the given number.\n    '''\n    n = int(n)\n    cnt = 0\n    while cnt < n:\n        cnt = cnt + 1\n        if cnt**2 < n:\n            cnt = cnt + 1\n    print(cnt**2)\ndef sum_of_digits(n):\n    '''\n    Write a python function to find the sum of digits in the given number.\n    '''\n    s = 0\n    while n:\n        s = s + n%10\n        n = n//10\n    print(s)\ndef first_digits(n):\n    '''\n    Write a python function to find the first digits of the given number.\n    '''\n    while n:\n        a = n%10\n        n = n//10\n        print(a)\ndef even_or_odd(n):\n    '''\n    Write a python function to check whether the given number is even or odd or not.\n    '''\n    if n%2 == 0:\n        print('Even')\n    else:\n        print('Odd')\ndef sum_of_digits(n):\n    '''\n    Write a python function to find the sum of digits of the given number.\n    '''\n    s = 0\n    while n:\n        s = s + n%10\n        n = n//10\n    print(s)\ndef palindrome(n):\n    '''\n    Write a python function to check whether the given number is a palindrome or not.\n    '''\n    n = str(n)\n    n = n.replace(\" \",\"\")\n    if n == n[::-1]:\n        print('Yes')\n    else:\n        print('No')\ndef is_perfect(n):\n    '''\n    Write a python function to check whether the given number is a perfect number or not.\n    '''\n    cnt = 0\n    for i in range(1,n):\n        if n%i == 0:\n            cnt = cnt + i\n    if cnt == n:\n        print('Yes')\n    else:\n        print('No')\ndef is_palindrome(n):\n    '''\n    Write a python function to check whether the given number is a palindrome or not.\n    '''\n    n = str(n)\n    n = n.replace(\" \",\"\")\n    if n == n[::-1]:\n        print('Yes')\n    else:\n        print('No')\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of the given number.\n    '''\n    cnt = 1\n    for i in range(1,n+1):\n        cnt = cnt * i\n    print(cnt)\ndef sum_of_digits(n):\n    '''\n    Write a python function to find the sum of digits of the given number.\n    '''\n    s = 0\n    while n:\n        s = s + n%10\n        n = n//10\n    print(s)\ndef find_largest(n):\n    '''\n    Write a python function to find the largest among the given numbers.\n    '''\n    a = n[0]\n    for i in range(1,n):\n        if a < n[i]:\n            a = n[i]\n    print(a)\ndef sines(a,b):\n    '''\n    Write a python function to find the sine of the given angle.\n    '''\n    cnt = 0\n    for i in range(1,a):\n        if i*b%a == 0:\n            cnt = cnt + 1\n    print(cnt)\ndef sum_of_digits(n):\n    '''\n    Write a python function to find the sum of digits of the given number.\n    '''\n    s = 0\n    while n:\n        s = s + n%10\n        n = n//10\n    print(s)\ndef first_digits(n):\n    '''\n    Write a python function to find the first digits of the given number.\n    '''\n    while n:\n        a = n%10\n        n = n//10\n        print(a)\ndef palindrome(n):\n    '''\n    Write a python function to check whether the given number is a palindrome or not.\n    '''\n    n = str(n)\n    n = n.replace(\" \",\"\")\n    if n == n[::-1]:\n        print('Yes')\n    else:\n        print('No')\ndef is_perfect(n):\n    '''\n    Write a python function to check whether the given number is a perfect number or not.\n    '''\n    cnt = 0\n    for i in range(1,n):\n        if n%i == 0:\n            cnt = cnt + i\n    if cnt == n:\n        print('Yes')\n    else:\n        print('No')\ndef is_palindrome(n):\n    '''\n    Write a python function to check whether the given number is a palindrome or not.\n    '''\n    n = str(n)\n    n = n.replace(\" \",\"\")\n    if n == n[::-1]:\n        print('Yes')\n    else:\n        print('No')\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of the given number.\n    '''\n    cnt = 1\n    for i in range(1,n+1):\n        cnt = cnt * i\n    print(cnt)\ndef sum_of_digits(n):\n    '''\n    Write a python function to find the sum of digits of the given number.\n    '''\n    s = 0\n    while n:\n        s = s + n%10\n        n = n//10\n    print(s)\ndef find_largest(n):\n    '''\n    Write a python function to find the largest among the given numbers.\n    '''\n    a = n[0]\n    for i in range(1,n):\n        if a < n[i]:\n            a = n[i]\n    print(a)\ndef sines(a,b):\n    '''\n    Write a python function to find the sine of the given angle.\n    '''\n    cnt = 0\n    for i in range(1,a):\n        if i*b%a == 0:\n            cnt = cnt + 1\n    print(cnt)\ndef sum_of_digits(n):\n    '''\n    Write a python function to find the sum of digits of the given number.\n    '''\n    s = 0\n    while n:\n        s = s + n%10\n        n = n//10\n    print(s)\ndef first_digits(n):\n    '''\n    Write a python function to find the first digits of the given number.\n    '''\n    while n:\n        a = n%10\n        n = n//10\n        print(a)\ndef palindrome(n):\n    '''\n    Write a python function to check whether the given number is a palindrome or not.\n    '''\n    n = str(n)\n    n = n.replace(\" \",\"\")\n    if n == n[::-1]:\n        print('Yes')\n    else:\n        print('No')\ndef is_perfect(n):\n    '''\n    Write a python function to check whether the given number is a perfect number or not.\n    '''\n    cnt = 0\n    for i in range(1,n):\n        if n%i == 0:\n            cnt = cnt + i\n    if cnt == n:\n        print('Yes')\n    else:\n        print('No'"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    #x = 0\n    #while x < int(n):\n    #    print(x)\n    #    if (n - x)**2 == x**2:\n    #        return \"yes\"\n    #    x += 1\n    #return \"no\"\n    return str(((n**2 - (n - 1)**2)**0.5)**2)\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # sq = 1\n    # while(sq*sq<n):\n    #     sq = sq + 1\n    # diff = sq*sq - n\n    # if diff == 0 or diff == sq:\n    #     return True\n    # else:\n    #     return False\n    x = int(n**0.5)\n    return n == x*x or n-x*x == 0 or n-x*x == x*x\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = int(math.sqrt(n))\n    b = int(math.sqrt(n))\n    if n==a**2+b**2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for x in range(1,int(n**0.5)): \n        if (n - x**2) % (x**2) == 0: \n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n = abs(n)\n    sq = int(sqrt(n))\n    for i in range(sq, 0, -1):\n        if i*i == n:\n            return True\n        elif i*i < n:\n            return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(colors)):\n        if not is_same(colors[i], patterns[i]):\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return all(i == j for i, j in zip(colors, patterns))\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if (len(colors) == len(patterns)):\n        return patterns[0] == colors[0] and is_samepatterns(colors[1:], patterns[1:])\n    else:\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) < len(patterns):\n        return False\n    for i in range(len(patterns)):\n        if not is_samecolor(colors[i], patterns[i]):\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(0, len(patterns)):\n        if patterns[i] == 'R':\n            colors[0] = 'Y'\n            for j in range(0, len(colors) - 1):\n                if colors[j] == 'Y' and colors[j + 1] == 'G':\n                    colors[j + 1] = 'B'\n                elif colors[j] == 'G' and colors[j + 1] == 'B':\n                    colors[j + 1] = 'R'\n        elif patterns[i] == 'G':\n            colors[1] = 'Y'\n            for j in range(0, len(colors) - 1):\n                if colors[j] == 'Y' and colors[j + 1] == 'R':\n                    colors[j + 1] = 'B'\n                elif colors[j] == 'R' and colors[j + 1] == 'B':\n                    colors[j + 1] = 'G'\n        elif patterns[i] == 'B':\n            colors[2] = 'Y'\n            for j in range(0, len(colors) - 1):\n                if colors[j] == 'Y' and colors[j + 1] == 'G':\n                    colors[j + 1] = 'R'\n                elif colors[j] == 'R' and colors[j + 1] == 'G':\n                    colors[j + 1] = 'B'\n    for i in colors:\n        if i!= 'Y':\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if colors.count('') > 0:\n        return False\n    else:\n        for pattern in patterns:\n            if pattern[0] in colors:\n                colors = colors[colors.index(pattern[0]) + 1:]\n                if not(len(pattern) == len(colors)):\n                    return False\n                elif len(pattern) == 1:\n                    return True\n                else:\n                    return is_samepatterns(colors,pattern[1:])\n            else:\n                return False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) == 0:\n        return True\n    elif patterns[0] == 'R':\n        return is_samepatterns(colors[1:], patterns[1:])\n    else:\n        return is_samepatterns(colors[1:], patterns[1:])\n    \nprint(is_samepatterns(['B', 'R', 'G', 'B', 'R', 'G'], ['B', 'B', 'G', 'R', 'R', 'B']))\nprint(is_samepatterns(['B', 'R', 'G', 'B', 'R', 'G'], ['B', 'B', 'R', 'R', 'B', 'G']))\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    def check(i, colors, patterns):\n        if i >= len(patterns):\n            return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    last_color = None\n    for i in range(len(colors)):\n        if patterns[i] == 'r':\n            last_color = colors[i]\n        elif patterns[i] == 'b' and colors[i]!= last_color:\n            return False\n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    def divisible(tuple, k):\n        for i in range(len(tuple)):\n            if tuple[i]%k!= 0:\n                return False\n        return True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    output_list = []\n    for tup in test_list:\n        if all(i%K==0 for i in tup):\n            output_list.append(tup)\n    return output_list\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    output = []\n    for i in range(len(test_list)):\n        x = test_list[i]\n        if x[0] % K == 0 and x[1] % K == 0:\n            output.append(x)\n    return output\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    solution_list = []\n    for tup in test_list:\n        if tup[0] % K == 0 and tup[1] % K == 0 and tup[2] % K == 0:\n            solution_list.append(tup)\n    return solution_list\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    new_list = []\n    for tup in test_list:\n        if all([num % K == 0 for num in tup]):\n            new_list.append(tup)\n    return new_list\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # in the list, a tuple can be split into two tuples, a tuple of size K and another of size not K.\n    # I think this is possible, so we can brute force and try all possible combinations\n    # in the form of (size_K, size_not_K)\n    result = []\n    for i in range(len(test_list) - K + 1):\n        result.append(test_list[i:i+K])\n        result.append(test_list[i+K:i+2*K])\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [tuple for tuple in test_list if all(i%K==0 for i in tuple)]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    temp_list = []\n    for i in test_list:\n        if i[0] % K == 0 and i[1] % K == 0:\n            temp_list.append(i)\n    print temp_list\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    return [(x,y) for x, y in test_list if all([x % k == 0 for k in range(K)])]\n    \n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for tup in test_list:\n        div = True\n        for elem in tup:\n            if elem % K!= 0:\n                div = False\n                break\n        if div:\n            divisible_tuples.append(tup)\n    return divisible_tuples\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n    \ndef is_divisible_by_13(n): \n    '''\n    Write a python function to find whether a number is divisible by 13.\n    '''\n    if n % 13 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    \n    if n % 11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11) == 0: \n        return True\n    else: \n        return False\n    \ndef is_M(n): \n    '''\n    Write a python function to find whether a number is divisible by 17.\n    '''\n    if (n % 17) == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    return False\n    \ndef is_Pentagonal(n):\n    '''\n    Write a python function to find whether a number is a pentagonal number.\n    '''\n    if (math.sqrt(24*n + 1) + 1) / 6 == int((math.sqrt(24*n + 1) + 1) / 6):\n        return True\n    return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        print \"Even\"\n    else:\n        print \"Odd\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print \"This word is even\"\n    else:\n        print \"This word is odd\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return (len(s)%2==1)\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2!=0\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2!=0\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        print(\"The word is even\")\n    else:\n        print(\"The word is odd\")\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = [1]\n    for i in range(n-1):\n        t.append(t[i] + len(t))\n    return t[-1]\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 4\n    else:\n        return tetrahedral_number(n-1) + 4*tetrahedral_number(n-2) + 4*tetrahedral_number(n-3)\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) * (n + 3) / 4\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n + 1) * (n + 2) * (n + 3) * (n + 4) // 24\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int((n*(n+1)*(n+2))/6)\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)*(n+3) // 24\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return sum(range(n+1))\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return tetrahedral_number(n-1) + (n-1)*(n-1)*(n-1)/6\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = [0,1,2,3,4,5]\n    for i in range(6,n+1):\n        t.append(sum(t[:4]))\n        t.remove(0)\n    return t[-1]\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 * math.pi * r**3 / 3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0) * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    v = (4/3)*pi*(r**3)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 / 3 * math.pi * r ** 3\ndef diameter(r):\n    return 2 * r\ndef surface_area_sphere(r):\n    return 4 * math.pi * r ** 2\ndef volume_cylinder(r, h):\n    return h * r ** 2 * math.pi\ndef surface_area_cylinder(r, h):\n    return 2 * math.pi * r * (r + h)\ndef volume_cone(r, h):\n    return 1 / 3 * math.pi * r ** 2 * h\ndef surface_area_cone(r, h):\n    return math.pi * r * (r + h)\ndef volume_torus(r, h):\n    return 2 * math.pi * r * h * math.pi\ndef surface_area_torus(r, h):\n    return 2 * math.pi * r * (r + h)\ndef volume_cone_shell(r, h):\n    return 1 / 3 * math.pi * r ** 2 * h\ndef surface_area_cone_shell(r, h):\n    return math.pi * r * (r + h)\ndef volume_cube(a):\n    return a ** 3\ndef surface_area_cube(a):\n    return 6 * a ** 2\ndef volume_box(a, b, c):\n    return a * b * c\ndef surface_area_box(a, b, c):\n    return 2 * (a * b + a * c + b * c)\ndef volume_parallelepiped(a, b, c):\n    return a * b * c\ndef surface_area_parallelepiped(a, b, c):\n    return 6 * a * b + 6 * a * c + 6 * b * c\ndef volume_rectangle(a, b):\n    return a * b\ndef surface_area_rectangle(a, b):\n    return 2 * (a * b)\ndef volume_triangle(a, b, c):\n    return (a + b + c) / 2 * a\ndef surface_area_triangle(a, b, c):\n    return (a + b + c) / 2\ndef volume_trapezium(a, b, c, d):\n    return (a + b + c + d) / 2 * (a + b)\ndef surface_area_trapezium(a, b, c, d):\n    return (a + b + c + d) / 2 * (a + b + c)\ndef volume_square(a):\n    return a ** 2\ndef surface_area_square(a):\n    return 4 * a\ndef volume_rectangular_prism(a, b, c):\n    return a * b * c\ndef surface_area_rectangular_prism(a, b, c):\n    return 2 * (a * b + a * c + b * c)\ndef volume_prism(a, b, c):\n    return a * b * c\ndef surface_area_prism(a, b, c):\n    return 4 * a * b + 4 * a * c + 4 * b * c\ndef volume_hexagonal_prism(a, b, c):\n    return a * b * c\ndef surface_area_hexagonal_prism(a, b, c):\n    return 4 * a * b + 4 * b * c + 4 * a * c\ndef volume_rhombus(a, b):\n    return a * b / 2\ndef surface_area_rhombus(a, b):\n    return a * b / 2\ndef volume_parallelepiped_shell(a, b, c, h):\n    return a * b * c + 1 / 3 * math.pi * h ** 2 * a\ndef surface_area_parallelepiped_shell(a, b, c, h):\n    return a * b * c + 1 / 3 * math.pi * h ** 2 * a\ndef volume_cone_shell(a, b, h):\n    return a * b * h / 3\ndef surface_area_cone_shell(a, b, h):\n    return a * b * h / 3\ndef volume_conical_prism(a, b, c, r):\n    return a * b * r ** 2 / 3\ndef surface_area_conical_prism(a, b, c, r):\n    return a * b * r ** 2 / 3\ndef volume_cone(a, b, h):\n    return a * b * h / 3\ndef surface_area_cone(a, b, h):\n    return a * b * h / 3\ndef volume_sphere_shell(a, b, h):\n    return a * b * h ** 2 / 3\ndef surface_area_sphere_shell(a, b, h):\n    return a * b * h ** 2 / 3\ndef volume_conical_shell(a, b, h, r):\n    return a * b * r ** 2 / 3\ndef surface_area_conical_shell(a, b, h, r):\n    return a * b * r ** 2 / 3\ndef volume_cone_shell(a, b, h):\n    return a * b * h ** 2 / 3\ndef surface_area_cone_shell(a, b, h):\n    return a * b * h ** 2 / 3\ndef volume_sphere_shell(a, b, h):\n    return a * b * h ** 2 / 3\ndef surface_area_sphere_shell(a, b, h):\n    return a * b * h ** 2 / 3\ndef volume_cube_shell(a, b, h):\n    return a * b * h ** 2\ndef surface_area_cube_shell(a, b, h):\n    return a * b * h ** 2\ndef volume_dodecahedron(a):\n    return a ** 3\ndef surface_area_dodecahedron(a):\n    return 60 * a ** 2\ndef volume_tetrahedron(a):\n    return a ** 3 / 4\ndef surface_area_tetrahedron(a):\n    return 4 * a ** 2\ndef volume_icosahedron(a):\n    return a ** 3 / 5\ndef surface_area_icosahedron(a):\n    return 5 * a ** 2\ndef volume_octahedron(a):\n    return a ** 3 / 6\ndef surface_area_octahedron(a):\n    return 6 * a ** 2\ndef volume_dodecahedron_shell(a, h):\n    return a ** 3 / 5 + 1 / 10 * math.pi * h ** 3 * a\ndef surface_area_dodecahedron_shell(a, h):\n    return 5 * a ** 2 + 1 / 10 * math.pi * h ** 3 * a\ndef volume_tetrahedron_shell(a, h):\n    return a ** 3 / 4 + 1 / 6 * math.pi * h ** 3 * a\ndef surface_area_tetrahedron_shell(a, h):\n    return 4 * a ** 2 + 1 / 6 * math.pi * h ** 3 * a\ndef volume_icosahedron_shell(a, h):\n    return a ** 3 / 5 + 1 / 15 * math.pi * h ** 3 * a\ndef surface_area_icosahedron_shell(a, h):\n    return 5 * a ** 2 + 1 / 15 * math.pi * h ** 3 * a\ndef volume_octahedron_shell(a, h):\n    return a ** 3 / 6 + 1 / 8 * math.pi * h ** 3 * a\ndef surface_area_octahedron_shell(a, h):\n    return 6 * a ** 2 + 1 / 8 * math.pi * h ** 3 * a\ndef volume_tetrahedron_shell(a, h):\n    return a ** 3 / 4 + 1 / 12 * math.pi * h ** 3 * a\ndef surface_area_tetrahedron_shell(a, h):\n    return 4 * a ** 2 + 1 / 12 * math.pi * h ** 3 * a\ndef volume_dodecahedron_shell(a, h):\n    return a ** 3 / 5 + 1 / 20 * math.pi * h ** 3 * a\ndef surface_area_dodecahedron_shell(a, h):\n    return 5 * a ** 2 + 1 / 20 * math.pi * h ** 3 * a\ndef volume_cube_shell(a, b, h):\n    return a * b * h ** 2\ndef surface_area_cube_shell(a, b, h):\n    retur"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r**2*h/3\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r**2*h\ndef volume_sphere2(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\ndef volume_cone2(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r**2*h/3\ndef volume_cylinder2(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r**2*h\ndef sphere_face_area(r):\n    '''\n    Write a function to find the face area of a sphere.\n    '''\n    return 4*math.pi*r**2\ndef cone_face_area(r,h):\n    '''\n    Write a function to find the face area of a cone.\n    '''\n    return math.pi*r**2*h\ndef cylinder_face_area(r,h):\n    '''\n    Write a function to find the face area of a cylinder.\n    '''\n    return math.pi*r**2*2+math.pi*r*h\ndef sphere_area(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    return 4*math.pi*r**2\ndef cone_area(r,h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    return math.pi*r**2*h\ndef cylinder_area(r,h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    return math.pi*r**2+math.pi*r*h\ndef t_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\ndef t_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r**2*h/3\ndef t_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r**2*2+math.pi*r*h\ndef t_sphere2(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\ndef t_cone2(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r**2*h/3\ndef t_cylinder2(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r**2*2+math.pi*r*h\ndef b_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\ndef b_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r**2*h/3\ndef b_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r**2*2+math.pi*r*h\ndef b_sphere2(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\ndef b_cone2(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r**2*h/3\ndef b_cylinder2(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r**2*2+math.pi*r*h\ndef z_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\ndef z_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r**2*h/3\ndef z_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r**2*2+math.pi*r*h\ndef z_sphere2(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\ndef z_cone2(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r**2*h/3\ndef z_cylinder2(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r**2*2+math.pi*r*h\ndef p_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\ndef p_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r**2*h/3\ndef p_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r**2*2+math.pi*r*h\ndef p_sphere2(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\ndef p_cone2(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r**2*h/3\ndef p_cylinder2(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r**2*2+math.pi*r*h\ndef r_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\ndef r_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r**2*h/3\ndef r_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r**2*2+math.pi*r*h\ndef r_sphere2(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\ndef r_cone2(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r**2*h/3\ndef r_cylinder2(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r**2*2+math.pi*r*h\ndef l_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\ndef l_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    ''"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 * math.pi * r ** 3 / 3\ndef main():\n    print(volume_sphere(2))\n    print(volume_sphere(3))\n    print(volume_sphere(4))\n    print(volume_sphere(5))\n    print(volume_sphere(6))\n    print(volume_sphere(7))\n    print(volume_sphere(8))\n    print(volume_sphere(9))\n    print(volume_sphere(10))\n    print(volume_sphere(11))\n    print(volume_sphere(12))\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*(r**3)\n    return V\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r*r*r\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3)*math.pi*r**3\n    return vol\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum = sum + ord(i)\n    return chr(sum % 26 + ord('A'))\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #Note: The modulo operator % is a kind of a power operator, where it's result is the remainder after dividing the first operand by the second.\n    return chr(sum([ord(i) for i in strr])%26)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if (strr==' '):\n        return 26\n    else:\n        return (ord(strr) - 97) % 26\n        \ndef gen_matrix(strr):\n    '''\n    Write a python function to create a n*n matrix (2-D array) of zeros and ones such that the zeros are numbered in a spiral fashion starting from the upper left corner of the matrix.\n    '''\n    if (strr==''):\n        return []\n    else:\n        return [ [0]*len(strr) for i in xrange(len(strr)) ]\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    i=0\n    for s in strr:\n        i=i+ord(s)%26\n    return chr(i%26+ord('a'))\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr = strr.strip()\n    strr = list(strr)\n    if len(strr) == 0:\n        return 0\n    elif len(strr) == 1:\n        return ord(strr[0])\n    else:\n        return (ord(strr[0]) + get_Char(strr[1:]) + 26) % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    n = len(strr)\n    sum = 0\n    for i in range(n):\n        sum = sum + ord(strr[i])\n    return sum%26\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    lst=[]\n    for i in strr:\n        if ord(i)>=65 and ord(i)<=90:\n            lst.append(ord(i)-64)\n        elif ord(i)>=97 and ord(i)<=122:\n            lst.append(ord(i)-96)\n        elif ord(i)>=48 and ord(i)<=57:\n            lst.append(ord(i))\n    s=0\n    for i in lst:\n        s=s+i\n    return s%26\ndef get_Vigenere_Cipher(strr,key):\n    '''\n    Write a python function to find the Vigenere Cipher of the given string with the given key.\n    '''\n    lst=[]\n    for i in range(len(strr)):\n        if ord(strr[i])>=65 and ord(strr[i])<=90:\n            lst.append(ord(strr[i])-65+ord(key[i]))\n        elif ord(strr[i])>=97 and ord(strr[i])<=122:\n            lst.append(ord(strr[i])-97+ord(key[i]))\n        elif ord(strr[i])>=48 and ord(strr[i])<=57:\n            lst.append(ord(strr[i])-48+ord(key[i]))\n    s=0\n    for i in lst:\n        s=s+i\n    return chr(s%26+65)\ndef get_Vigenere_Decipher(strr,key):\n    '''\n    Write a python function to find the Vigenere Cipher of the given string with the given key.\n    '''\n    lst=[]\n    for i in range(len(strr)):\n        if ord(strr[i])>=65 and ord(strr[i])<=90:\n            lst.append(ord(strr[i])-65-ord(key[i]))\n        elif ord(strr[i])>=97 and ord(strr[i])<=122:\n            lst.append(ord(strr[i])-97-ord(key[i]))\n        elif ord(strr[i])>=48 and ord(strr[i])<=57:\n            lst.append(ord(strr[i])-48-ord(key[i]))\n    s=0\n    for i in lst:\n        s=s+i\n    return chr(s%26+65)\ndef get_Affine_Cipher(strr,a,b):\n    '''\n    Write a python function to find the Affine Cipher of the given string with the given key.\n    '''\n    lst=[]\n    for i in range(len(strr)):\n        if ord(strr[i])>=65 and ord(strr[i])<=90:\n            lst.append(ord(strr[i])-65+a*(ord(strr[i])-65)+b)\n        elif ord(strr[i])>=97 and ord(strr[i])<=122:\n            lst.append(ord(strr[i])-97+a*(ord(strr[i])-97)+b)\n        elif ord(strr[i])>=48 and ord(strr[i])<=57:\n            lst.append(ord(strr[i])-48+a*(ord(strr[i])-48)+b)\n    s=0\n    for i in lst:\n        s=s+i\n    return chr(s%26+65)\ndef get_Affine_Decipher(strr,a,b):\n    '''\n    Write a python function to find the Affine Cipher of the given string with the given key.\n    '''\n    lst=[]\n    for i in range(len(strr)):\n        if ord(strr[i])>=65 and ord(strr[i])<=90:\n            lst.append(ord(strr[i])-65-a*(ord(strr[i])-65)-b)\n        elif ord(strr[i])>=97 and ord(strr[i])<=122:\n            lst.append(ord(strr[i])-97-a*(ord(strr[i])-97)-b)\n        elif ord(strr[i])>=48 and ord(strr[i])<=57:\n            lst.append(ord(strr[i])-48-a*(ord(strr[i])-48)-b)\n    s=0\n    for i in lst:\n        s=s+i\n    return chr(s%26+65)\ndef get_ROT_Cipher(strr,n):\n    '''\n    Write a python function to find the ROT Cipher of the given string with the given key.\n    '''\n    lst=[]\n    for i in range(len(strr)):\n        if ord(strr[i])>=65 and ord(strr[i])<=90:\n            lst.append(ord(strr[i])-65+n)\n        elif ord(strr[i])>=97 and ord(strr[i])<=122:\n            lst.append(ord(strr[i])-97+n)\n        elif ord(strr[i])>=48 and ord(strr[i])<=57:\n            lst.append(ord(strr[i])-48+n)\n    s=0\n    for i in lst:\n        s=s+i\n    return chr(s%26+65)\ndef get_ROT_Decipher(strr,n):\n    '''\n    Write a python function to find the ROT Cipher of the given string with the given key.\n    '''\n    lst=[]\n    for i in range(len(strr)):\n        if ord(strr[i])>=65 and ord(strr[i])<=90:\n            lst.append(ord(strr[i])-65-n)\n        elif ord(strr[i])>=97 and ord(strr[i])<=122:\n            lst.append(ord(strr[i])-97-n)\n        elif ord(strr[i])>=48 and ord(strr[i])<=57:\n            lst.append(ord(strr[i])-48-n)\n    s=0\n    for i in lst:\n        s=s+i\n    return chr(s%26+65)\ndef get_Double_Cipher(strr):\n    '''\n    Write a python function to find the Double Cipher of the given string.\n    '''\n    lst=[]\n    for i in range(len(strr)):\n        if ord(strr[i])>=65 and ord(strr[i])<=90:\n            lst.append(ord(strr[i])+25)\n        elif ord(strr[i])>=97 and ord(strr[i])<=122:\n            lst.append(ord(strr[i])+25)\n        elif ord(strr[i])>=48 and ord(strr[i])<=57:\n            lst.append(ord(strr[i])+25)\n    s=0\n    for i in lst:\n        s=s+i\n    return chr(s%26+65)\ndef get_Double_Decipher(strr):\n    '''\n    Write a python function to find the Double Cipher of the given string.\n    '''\n    lst=[]\n    for i in range(len(strr)):\n        if ord(strr[i])>=65 and ord(strr[i])<=90:\n            lst.append(ord(strr[i])-25)\n        elif ord(strr[i])>=97 and ord(strr[i])<=122:\n            lst.append(ord(strr[i])-25)\n        elif ord(strr[i])>=48 and ord(strr[i]"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr = strr.lower()\n    char = ''\n    for i in strr:\n        char += chr((ord(i) + 5) % 26 + 97)\n    return char\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return chr(sum(ord(i) for i in strr) % 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = \"\"\n    for ch in strr:\n        result += chr(ord(ch)%26 + 97)\n    return result\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1:\n        print(\"Error: sequence cannot begin at 0 or less\")\n        return\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sequence(n - 1) + sequence(n - 2)\n    \ndef fibonacci(n):\n    '''\n    Write a function to find the nth fibonacci number.\n    '''\n    if n < 1:\n        print(\"Error: n cannot be less than 1\")\n        return\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    x = [1]\n    y = [0]\n    for i in xrange(1, n):\n        x.append(x[i-1]+2*y[i-1])\n        y.append(x[i-1]-y[i-1])\n    return x[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    nums = [1,0,1,1,0,0,1,1,0,1]\n    for _ in range(n):\n        new_nums = [0]*len(nums)\n        for i in range(1,len(nums)-1):\n            new_nums[i] = nums[i-1] + nums[i+1]\n        new_nums[0] = nums[-1]\n        new_nums[-1] = nums[0]\n        nums = new_nums\n    return nums[0]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    #determine size of sequence\n    N = pow(2, n)\n    #intialise array\n    a = [0] * N\n    # set first element in sequence to 1\n    a[0] = 1\n    #iterate over sequence\n    for i in xrange(1, N):\n        # get modulo to use in new sequence formula\n        mod = pow(2, i-1)\n        # add previous element to the next element\n        a[i] = (a[i-1] * mod) % mod\n    # return the sequence number\n    return a[N-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 2, 4, 8, 16, 32, 64, 128]\n    if n < len(sequence):\n        return sequence[n-1]\n    else:\n        return sequence[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [0,1,1]\n    for i in range(3, n+1):\n        seq.append(seq[i-1] + seq[i-2])\n    return seq[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def factorial(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        else:\n            return n * factorial(n-1)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    sequence = [0,1,2,3]\n    numbers = 0\n    for i in range(4,n):\n        \n        number = sequence[-1] + sequence[-2]\n        \n        sequence.append(number)\n        \n    return sequence[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    total = 1\n    for _ in range(n):\n        total = (total*(3*total-1))//2\n    return total\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    s = [0] * (n + 1) \n    s[0] = 1\n    s[1] = 1\n    i = 2\n    while i < n: \n        if s[i] == 0: \n            s[i] = s[i - 2] + s[i - 1] \n        i += 1\n    return s[n - 1]\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4.0*math.pi*r*r\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return sa\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\ndef surfacearea_sphere2(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\ndef surfacearea_cube(s):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6 * s ** 2\ndef surfacearea_cube2(s):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6 * s ** 2\ndef surfacearea_spheroid(a,b):\n    '''\n    Write a function to find the surface area of a spheroid.\n    '''\n    return math.pi * a * b + 4 * math.pi * (a ** 2 + b ** 2) ** 0.5\ndef surfacearea_spheroid2(a,b):\n    '''\n    Write a function to find the surface area of a spheroid.\n    '''\n    return math.pi * a * b + 4 * math.pi * (a ** 2 + b ** 2) ** 0.5\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * (r + h)\ndef surfacearea_cylinder2(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * (r + h)\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi * r * h + 2 * math.pi * (r ** 2 + h ** 2) ** 0.5\ndef surfacearea_cone2(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi * r * h + 2 * math.pi * (r ** 2 + h ** 2) ** 0.5\ndef surfacearea_torus(r,h):\n    '''\n    Write a function to find the surface area of a torus.\n    '''\n    return 2 * math.pi * r * (r + h) + 2 * math.pi * (r ** 2 + h ** 2) ** 0.5\ndef surfacearea_torus2(r,h):\n    '''\n    Write a function to find the surface area of a torus.\n    '''\n    return 2 * math.pi * r * (r + h) + 2 * math.pi * (r ** 2 + h ** 2) ** 0.5\ndef surfacearea_cone_sphere(r, h):\n    '''\n    Write a function to find the surface area of a cone and a sphere.\n    '''\n    return 2 * math.pi * r * (r + h) + 4 * math.pi * (r ** 2 + h ** 2) ** 0.5\ndef surfacearea_cone_sphere2(r, h):\n    '''\n    Write a function to find the surface area of a cone and a sphere.\n    '''\n    return 2 * math.pi * r * (r + h) + 4 * math.pi * (r ** 2 + h ** 2) ** 0.5\ndef surfacearea_sphere_cube(r,h):\n    '''\n    Write a function to find the surface area of a sphere, cube, and a cube.\n    '''\n    return 2 * math.pi * r * (r + h) + 4 * math.pi * (r ** 2 + h ** 2) ** 0.5 + 6 * h * r\ndef surfacearea_sphere_cube2(r,h):\n    '''\n    Write a function to find the surface area of a sphere, cube, and a cube.\n    '''\n    return 2 * math.pi * r * (r + h) + 4 * math.pi * (r ** 2 + h ** 2) ** 0.5 + 6 * h * r\ndef surfacearea_sphere_spheroid(r,h,a,b):\n    '''\n    Write a function to find the surface area of a sphere, spheroid, and a sphere.\n    '''\n    return 2 * math.pi * r * (r + h) + 4 * math.pi * (r ** 2 + h ** 2) ** 0.5 + 4 * math.pi * (a ** 2 + b ** 2) ** 0.5\ndef surfacearea_sphere_spheroid2(r,h,a,b):\n    '''\n    Write a function to find the surface area of a sphere, spheroid, and a sphere.\n    '''\n    return 2 * math.pi * r * (r + h) + 4 * math.pi * (r ** 2 + h ** 2) ** 0.5 + 4 * math.pi * (a ** 2 + b ** 2) ** 0.5\ndef surfacearea_sphere_cylinder(r,h,a,b):\n    '''\n    Write a function to find the surface area of a sphere, cylindrically symmetric, and a cylinder.\n    '''\n    return 2 * math.pi * r * (r + h) + 4 * math.pi * (r ** 2 + h ** 2) ** 0.5 + 2 * math.pi * (a ** 2 + b ** 2) ** 0.5\ndef surfacearea_sphere_cylinder2(r,h,a,b):\n    '''\n    Write a function to find the surface area of a sphere, cylindrically symmetric, and a cylinder.\n    '''\n    return 2 * math.pi * r * (r + h) + 4 * math.pi * (r ** 2 + h ** 2) ** 0.5 + 2 * math.pi * (a ** 2 + b ** 2) ** 0.5\ndef surfacearea_sphere_torus(r,h,a,b):\n    '''\n    Write a function to find the surface area of a sphere, torus, and a sphere.\n    '''\n    return 2 * math.pi * r * (r + h) + 4 * math.pi * (r ** 2 + h ** 2) ** 0.5 + 2 * math.pi * (a ** 2 + b ** 2) ** 0.5\ndef surfacearea_sphere_torus2(r,h,a,b):\n    '''\n    Write a function to find the surface area of a sphere, torus, and a sphere.\n    '''\n    return 2 * math.pi * r * (r + h) + 4 * math.pi * (r ** 2 + h ** 2) ** 0.5 + 2 * math.pi * (a ** 2 + b ** 2) ** 0.5\ndef surfacearea_sphere_cone_sphere(r,h,a,b):\n    '''\n    Write a function to find the surface area of a sphere, cone, and a sphere.\n    '''\n    return 2 * math.pi * r * (r + h) + 4 * math.pi * (r ** 2 + h ** 2) ** 0.5 + 2 * math.pi * (a ** 2 + b ** 2) ** 0.5\ndef surfacearea_sphere_cone_sphere2(r,h,a,b):\n    '''\n    Write a function to find the surface area of a sphere, cone, and a sphere.\n    '''\n    return 2 * math.pi * r * (r + h) + 4 * math.pi * (r ** 2 + h ** 2) ** 0.5 + 2 * math.pi * (a ** 2 + b ** 2) ** 0.5\ndef surfacearea_sphere_cone_spheroid(r,h,a,b,c,d):\n    '''\n    Write a function to find the surface area of a sphere, cone, and a spheroid.\n    '''\n    return 2 * math.pi * r * (r + h) + 4 * math.pi * (r ** 2 + h ** 2) ** 0.5 + 4 * math.pi * (a ** 2 + b ** 2) ** 0.5 + 4 * math.pi * (c ** 2 + d ** 2) ** 0.5\ndef surfacearea_sphere_cone_spheroid2(r,h,a,b,c,d):\n    '''\n    Write a function to find the surface area of a sphere, cone, and a spheroid.\n    '''\n    return 2 * math.pi * r * ("
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea = (4 * math.pi * r**2)\n    return surfacearea\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4 * math.pi * r * r\n    return a\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    b = 4 * math.pi * r * r * r\n    return b\ndef volume_spheroid(r, h):\n    '''\n    Write a function to find the volume of a spheroid.\n    '''\n    c = (4 / 3) * math.pi * r * r * r + (4 / 3) * math.pi * r * r * h\n    return c\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    d = 2 * math.pi * r * r + 2 * math.pi * r * h\n    return d\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    e = 6 * l * l\n    return e\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    f = math.pi * r * r + math.pi * r * h\n    return f\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    f = math.pi * r * r + math.pi * r * h\n    return f\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    f = math.pi * r * r + math.pi * r * h\n    return f\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    f = math.pi * r * r + math.pi * r * h\n    return f\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    f = math.pi * r * r + math.pi * r * h\n    return f\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    f = math.pi * r * r + math.pi * r * h\n    return f\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    f = math.pi * r * r + math.pi * r * h\n    return f\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    f = math.pi * r * r + math.pi * r * h\n    return f\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    f = math.pi * r * r + math.pi * r * h\n    return f\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    f = math.pi * r * r + math.pi * r * h\n    return f\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    f = math.pi * r * r + math.pi * r * h\n    return f\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    f = math.pi * r * r + math.pi * r * h\n    return f\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    f = math.pi * r * r + math.pi * r * h\n    return f\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    f = math.pi * r * r + math.pi * r * h\n    return f\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    f = math.pi * r * r + math.pi * r * h\n    return f\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    f =math.pi * r * r + math.pi * r * h\n    return f\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    f = math.pi * r * r + math.pi * r * h\n    return f\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    f = math.pi * r * r + math.pi * r * h\n    return f\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    f = math.pi * r * r + math.pi * r * h\n    return f\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    f = math.pi * r * r + math.pi * r * h\n    return f\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    f = math.pi * r * r + math.pi * r * h\n    return f\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    f = math.pi * r * r + math.pi * r * h\n    return f\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    f = math.pi * r * r + math.pi * r * h\n    return f\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    f = math.pi * r * r + math.pi * r * h\n    return f\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    f = math.pi * r * r + math.pi * r * h\n    return f\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    f = math.pi * r * r + math.pi * r * h\n    return f\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    f =math.pi * r * r + math.pi * r * h\n    return f\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    f = math.pi * r * r + math.pi * r * h\n    return f\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    f = math.pi * r * r + math.pi * r * h\n    return f\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    f =math.pi * r * r + math.pi * r * h\n    return f\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    f = math.pi * r * r + math.pi * r * h\n    return f\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    ''"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    r = float(r)\n    return (4*math.pi*r*r)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r = float(r)\n    return (4*math.pi*r*r*r)\n    \ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    l = float(l)\n    w = float(w)\n    h = float(h)\n    return (l*w*h)\n    \ndef surfacearea_cuboid(l,w,h):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    l = float(l)\n    w = float(w)\n    h = float(h)\n    return 2*(l*w+l*h+w*h)\n    \ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    l = float(l)\n    w = float(w)\n    h = float(h)\n    return l*w*h\n    \ndef volume_pyramid(a,b,c):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    return (a*b*c)/3\n    \ndef surfacearea_pyramid(a,b,c):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    return 2*((a*b*c)+(a*b)+(a*c)+(b*c))\n    \ndef volume_pyramid(a,b,c):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    return a*b*c/3\n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    r = float(r)\n    h = float(h)\n    return (1/3)*(math.pi)*(r*r)*h\n    \ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    r = float(r)\n    h = float(h)\n    return (1/2)*(math.pi)*(r*r)+(math.pi)*(r*r)*h\n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    r = float(r)\n    h = float(h)\n    return (1/3)*(math.pi)*(r*r)*h\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    return (1/3)*(math.pi)*(r*r)*h\n    \ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    return (2*math.pi)*(r*r)+(2*math.pi)*(r*r)*h\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    return (1/3)*(math.pi)*(r*r)*h\n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    r = float(r)\n    h = float(h)\n    return (1/3)*(math.pi)*(r*r)*h\n    \ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    r = float(r)\n    h = float(h)\n    return (1/2)*(math.pi)*(r*r)+(math.pi)*(r*r)*h\n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    r = float(r)\n    h = float(h)\n    return (1/3)*(math.pi)*(r*r)*h\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r = float(r)\n    return (4/3)*math.pi*(r*r*r)\n    \ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    r = float(r)\n    return (4*math.pi*r*r)\n    \ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    return 2*(math.pi)*(r*r)+(2*math.pi)*(r*r)*h\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    return (1/3)*(math.pi)*(r*r)*h\n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    r = float(r)\n    h = float(h)\n    return (1/3)*(math.pi)*(r*r)*h\n    \ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    r = float(r)\n    h = float(h)\n    return (2*math.pi)*(r*r)+(2*math.pi)*(r*r)*h\n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    r = float(r)\n    h = float(h)\n    return (1/3)*(math.pi)*(r*r)*h\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r = float(r)\n    return (4/3)*(math.pi)*(r*r*r)\n    \ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    r = float(r)\n    return (4*math.pi*r*r)\n    \ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    return 2*(math.pi)*(r*r)+(2*math.pi)*(r*r)*h\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    return (1/3)*(math.pi)*(r*r)*h\n    \ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    r = float(r)\n    h = float(h)\n    return (2*(math.pi)*(r*r))+(2*(math.pi)*(r*r)*h)\n    \ndef surfac"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if type(r) == type(1) or type(r) == type(1.0):\n        sr = 4 * math.pi * r ** 2\n        return sr\n    else:\n        return ValueError('Input must be an integer or a float')\ndef surfacearea_cuboid(l, w, h):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    if type(l) == type(1) or type(l) == type(1.0):\n        if type(w) == type(1) or type(w) == type(1.0):\n            if type(h) == type(1) or type(h) == type(1.0):\n                s = 2 * (l * w + w * h + h * l)\n                return s\n            else:\n                return ValueError('Input must be an integer or a float')\n        else:\n            return ValueError('Input must be an integer or a float')\n    else:\n        return ValueError('Input must be an integer or a float')\ndef surfacearea_prism(a, b, c):\n    '''\n    Write a function to find the surface area of a prism.\n    '''\n    if type(a) == type(1) or type(a) == type(1.0):\n        if type(b) == type(1) or type(b) == type(1.0):\n            if type(c) == type(1) or type(c) == type(1.0):\n                s = a * b + a * c + b * c\n                return s\n            else:\n                return ValueError('Input must be an integer or a float')\n        else:\n            return ValueError('Input must be an integer or a float')\n    else:\n        return ValueError('Input must be an integer or a float')\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    if type(r) == type(1) or type(r) == type(1.0):\n        if type(h) == type(1) or type(h) == type(1.0):\n            sr = 2 * math.pi * r * (r + h)\n            return sr\n        else:\n            return ValueError('Input must be an integer or a float')\n    else:\n        return ValueError('Input must be an integer or a float')\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    if type(r) == type(1) or type(r) == type(1.0):\n        sr = 4/3 * math.pi * r ** 3\n        return sr\n    else:\n        return ValueError('Input must be an integer or a float')\ndef volume_cuboid(l, w, h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    if type(l) == type(1) or type(l) == type(1.0):\n        if type(w) == type(1) or type(w) == type(1.0):\n            if type(h) == type(1) or type(h) == type(1.0):\n                v = l * w * h\n                return v\n            else:\n                return ValueError('Input must be an integer or a float')\n        else:\n            return ValueError('Input must be an integer or a float')\n    else:\n        return ValueError('Input must be an integer or a float')\ndef volume_prism(a, b, c):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    if type(a) == type(1) or type(a) == type(1.0):\n        if type(b) == type(1) or type(b) == type(1.0):\n            if type(c) == type(1) or type(c) == type(1.0):\n                v = a * b * c\n                return v\n            else:\n                return ValueError('Input must be an integer or a float')\n        else:\n            return ValueError('Input must be an integer or a float')\n    else:\n        return ValueError('Input must be an integer or a float')\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    if type(r) == type(1) or type(r) == type(1.0):\n        if type(h) == type(1) or type(h) == type(1.0):\n            v = math.pi * r ** 2 * h\n            return v\n        else:\n            return ValueError('Input must be an integer or a float')\n    else:\n        return ValueError('Input must be an integer or a float')\ndef xform_matrix(x, y, z, a, b, c):\n    '''\n    Write a function to find the change in coordinate of a point from a change in x, y, z and a change in a, b, c.\n    '''\n    if type(x) == type(1) or type(x) == type(1.0):\n        if type(y) == type(1) or type(y) == type(1.0):\n            if type(z) == type(1) or type(z) == type(1.0):\n                if type(a) == type(1) or type(a) == type(1.0):\n                    if type(b) == type(1) or type(b) == type(1.0):\n                        if type(c) == type(1) or type(c) == type(1.0):\n                            xm = x + a\n                            ym = y + b\n                            zm = z + c\n                            return [xm, ym, zm]\n                        else:\n                            return ValueError('Input must be an integer or a float')\n                    else:\n                        return ValueError('Input must be an integer or a float')\n                else:\n                    return ValueError('Input must be an integer or a float')\n            else:\n                return ValueError('Input must be an integer or a float')\n        else:\n            return ValueError('Input must be an integer or a float')\n    else:\n        return ValueError('Input must be an integer or a float')\ndef xform_point(x, y, z, a, b, c):\n    '''\n    Write a function to find the change in coordinate of a point from a change in x, y, z and a change in a, b, c.\n    '''\n    if type(x) == type(1) or type(x) == type(1.0):\n        if type(y) == type(1) or type(y) == type(1.0):\n            if type(z) == type(1) or type(z) == type(1.0):\n                if type(a) == type(1) or type(a) == type(1.0):\n                    if type(b) == type(1) or type(b) == type(1.0):\n                        if type(c) == type(1) or type(c) == type(1.0):\n                            xm = x + a\n                            ym = y + b\n                            zm = z + c\n                            return [xm, ym, zm]\n                        else:\n                            return ValueError('Input must be an integer or a float')\n                    else:\n                        return ValueError('Input must be an integer or a float')\n                else:\n                    return ValueError('Input must be an integer or a float')\n            else:\n                return ValueError('Input must be an integer or a float')\n        else:\n            return ValueError('Input must be an integer or a float')\n    else:\n        return ValueError('Input must be an integer or a float')\ndef rotation_matrix(x, y, z, angle):\n    '''\n    Write a function to find the change in coordinate of a point from a change in x, y, z and a change in angle.\n    '''\n    if type(x) == type(1) or type(x) == type(1.0):\n        if type(y) == type(1) or type(y) == type(1.0):\n            if type(z) == type(1) or type(z) == type(1.0):\n                if type(angle) == type(1) or type(angle) == type(1.0):"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int((n*(n+1))/2)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    #return 0.5*n*(3*n - 2)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2*n*(2*n - 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n*(2*n**2-1))/2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(n * (2 * n - 1) / 2)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return 2 * n * (2 * n + 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n**2 + n) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    elif n%2 == 0:\n        return 2*n -1\n    else:\n        return (2*n -1)*2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int((1 + (1 + 24 * n) ** 0.5) / 6)\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dictionary = {}\n    dictionary.update(dict1)\n    dictionary.update(dict2)\n    dictionary.update(dict3)\n    return dictionary\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dictionary = {}\n    dictionary.update(dict1)\n    dictionary.update(dict2)\n    return dictionary\ndef combine_multiple_dictionaries(*dictionaries):\n    '''\n    Write a function to combine multiple dictionaries into a single dictionary.\n    '''\n    dictionary = {}\n    for dict1 in dictionaries:\n        dictionary.update(dict1)\n    return dictionary\ndef merge_dictionaries_one(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dictionary = {}\n    dictionary.update(dict1)\n    dictionary.update(dict2)\n    return dictionary\ndef merge_dictionaries(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dictionary = {}\n    dictionary.update(dict1)\n    dictionary.update(dict2)\n    return dictionary\ndef merge_multiple_dictionaries(**dict_n):\n    '''\n    Write a function to merge multiple dictionaries into a single dictionary.\n    '''\n    dictionary = {}\n    for dict1 in dict_n:\n        dictionary.update(dict1)\n    return dictionary\ndef merge_dictionaries_in_place(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    return dict1\ndef count_occurence(dict1,value):\n    '''\n    Write a function to count the number of occurances of a value in a dictionary.\n    '''\n    return dict1.values().count(value)\ndef uniquify(iterable):\n    '''\n    Write a function to remove duplicates from an iterable.\n    '''\n    seen = set()\n    seen_add = seen.add\n    return [x for x in iterable if not (x in seen or seen_add(x))]\ndef reverse_items(dictionary):\n    '''\n    Write a function to reverse an item in a dictionary.\n    '''\n    dictionary = collections.OrderedDict(reversed(dictionary.items()))\n    return dictionary\ndef sort_list(list1,list2):\n    '''\n    Write a function to sort two lists in a single method.\n    '''\n    list1.sort()\n    list2.sort()\n    return list1,list2\ndef sort_list_in_place(list1,list2):\n    '''\n    Write a function to sort two lists in a single method.\n    '''\n    list1.sort()\n    list2.sort()\n    return list1,list2\ndef get_input_from_user(message):\n    '''\n    Write a function to get user input from the user.\n    '''\n    return raw_input(message)\ndef get_input_from_user_and_cast_to_int(message):\n    '''\n    Write a function to get user input from the user and return it as an int.\n    '''\n    return int(get_input_from_user(message))\ndef get_input_from_user_and_cast_to_int_list(message):\n    '''\n    Write a function to get user input from the user and return it as a list of ints.\n    '''\n    return [int(get_input_from_user(message))]\ndef get_input_from_user_and_cast_to_int_list_and_uniquify(message):\n    '''\n    Write a function to get user input from the user and return it as a list of ints.\n    '''\n    return uniquify(get_input_from_user_and_cast_to_int_list(message))\ndef get_input_from_user_and_cast_to_int_list_and_uniquify_or_print_if_none(message):\n    '''\n    Write a function to get user input from the user and return it as a list of ints.\n    '''\n    value = get_input_from_user_and_cast_to_int_list_and_uniquify(message)\n    if value is None:\n        print(\"None\")\n    else:\n        print(value)\n    return value\ndef get_input_from_user_and_cast_to_int_list_and_uniquify_or_print_if_none_and_quit_if_none(message):\n    '''\n    Write a function to get user input from the user and return it as a list of ints.\n    '''\n    value = get_input_from_user_and_cast_to_int_list_and_uniquify(message)\n    if value is None:\n        quit()\n    else:\n        print(value)\n    return value\ndef get_input_from_user_and_cast_to_int_list_and_uniquify_or_print_if_none_and_quit_if_none_and_raise_error_if_no_input(message):\n    '''\n    Write a function to get user input from the user and return it as a list of ints.\n    '''\n    value = get_input_from_user_and_cast_to_int_list_and_uniquify(message)\n    if value is None:\n        quit()\n    else:\n        print(value)\n    return value\ndef get_input_from_user_and_cast_to_int_list_and_uniquify_or_print_if_none_and_quit_if_none_and_raise_error_if_no_input_and_raise_error_if_no_input(message):\n    '''\n    Write a function to get user input from the user and return it as a list of ints.\n    '''\n    value = get_input_from_user_and_cast_to_int_list_and_uniquify(message)\n    if value is None:\n        quit()\n    else:\n        print(value)\n    return value\ndef get_input_from_user_and_cast_to_int_list_and_uniquify_or_print_if_none_and_quit_if_none_and_raise_error_if_no_input_and_raise_error_if_no_input_and_raise_error_if_no_input_and_raise_error_if_no_input(message):\n    '''\n    Write a function to get user input from the user and return it as a list of ints.\n    '''\n    value = get_input_from_user_and_cast_to_int_list_and_uniquify(message)\n    if value is None:\n        quit()\n    else:\n        print(value)\n    return value\ndef get_input_from_user_and_cast_to_int_list_and_uniquify_or_print_if_none_and_quit_if_none_and_raise_error_if_no_input_and_raise_error_if_no_input_and_raise_error_if_no_input_and_raise_error_if_no_input_and_raise_error_if_no_input_and_raise_error_if_no_input_and_raise_error_if_no_input(message):\n    '''\n    Write a function to get user input from the user and return it as a list of ints.\n    '''\n    value = get_input_from_user_and_cast_to_int_list_and_uniquify(message)\n    if value is None:\n        quit()\n    else:\n        print(value)\n    return value\ndef get_input_from_user_and_cast_to_int_list_and_uniquify_or_print_if_none_and_quit_if_none_and_raise_error_if_no_input_and_raise_error_if_no_input_and_raise_error_if_no_input"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if not (type(dict1) == type(dict2) == type(dict3) == type({})):\n        raise TypeError(\"Input must be dictionary\")\n    if len(dict1) <> len(dict2) or len(dict2) <> len(dict3):\n        raise ValueError(\"Input dictionary lengths do not match\")\n    \n    #if len(dict1) == len(dict2) == len(dict3):\n        #return merge_dictionaries_two(dict1,dict2)\n    \n    if len(dict1) > len(dict2) and len(dict2) > len(dict3):\n        return merge_dictionaries_three(dict2,dict3,dict1)\n    \n    elif len(dict1) > len(dict3) and len(dict3) > len(dict2):\n        return merge_dictionaries_three(dict3,dict2,dict1)\n    \n    elif len(dict2) > len(dict3) and len(dict3) > len(dict1):\n        return merge_dictionaries_three(dict3,dict1,dict2)\n    \n    else:\n        return merge_dictionaries_two(dict1,dict2)\n    \n    return merged_dict\n    \ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    if not (type(dict1) == type(dict2) == type({})):\n        raise TypeError(\"Input must be dictionary\")\n    if len(dict1) <> len(dict2):\n        raise ValueError(\"Input dictionary lengths do not match\")\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new = dict1.copy()\n    for key in dict2:\n        if key in new:\n            new[key] += dict2[key]\n        else:\n            new[key] = dict2[key]\n    for key in dict3:\n        if key in new:\n            new[key] += dict3[key]\n        else:\n            new[key] = dict3[key]\n    return new\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return merge_dictionaries_two(dict1,dict2)\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {k: [] for k in dict1.keys()}\n    for key in result.keys():\n        for dic in [dict1, dict2, dict3]:\n            try:\n                result[key].extend(dic[key])\n            except KeyError:\n                pass\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    dict4.update(dict1)\n    dict4.update(dict2)\n    dict4.update(dict3)\n    return dict4\ndef merge_dictionaries_three_alt(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2,**dict3}\ndef merge_dictionaries_four(dict1,dict2, dict3, dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2,**dict3,**dict4}\ndef merge_dictionaries_four_alt(dict1,dict2, dict3, dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2,**dict3,**dict4}\ndef merge_dictionaries_five(dict1,dict2, dict3, dict4, dict5):\n    '''\n    Write a function to merge five dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2,**dict3,**dict4,**dict5}\ndef merge_dictionaries_five_alt(dict1,dict2, dict3, dict4, dict5):\n    '''\n    Write a function to merge five dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2,**dict3,**dict4,**dict5}\ndef merge_dictionaries_six(dict1,dict2, dict3, dict4, dict5, dict6):\n    '''\n    Write a function to merge six dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2,**dict3,**dict4,**dict5,**dict6}\ndef merge_dictionaries_six_alt(dict1,dict2, dict3, dict4, dict5, dict6):\n    '''\n    Write a function to merge six dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2,**dict3,**dict4,**dict5,**dict6}\ndef merge_dictionaries_seven(dict1,dict2, dict3, dict4, dict5, dict6, dict7):\n    '''\n    Write a function to merge seven dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2,**dict3,**dict4,**dict5,**dict6,**dict7}\ndef merge_dictionaries_seven_alt(dict1,dict2, dict3, dict4, dict5, dict6, dict7):\n    '''\n    Write a function to merge seven dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2,**dict3,**dict4,**dict5,**dict6,**dict7}\ndef merge_dictionaries_eight(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8):\n    '''\n    Write a function to merge eight dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2,**dict3,**dict4,**dict5,**dict6,**dict7,**dict8}\ndef merge_dictionaries_eight_alt(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8):\n    '''\n    Write a function to merge eight dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2,**dict3,**dict4,**dict5,**dict6,**dict7,**dict8}\ndef merge_dictionaries_nine(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9):\n    '''\n    Write a function to merge nine dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2,**dict3,**dict4,**dict5,**dict6,**dict7,**dict8,**dict9}\ndef merge_dictionaries_nine_alt(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9):\n    '''\n    Write a function to merge nine dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2,**dict3,**dict4,**dict5,**dict6,**dict7,**dict8,**dict9}\ndef merge_dictionaries_ten(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10):\n    '''\n    Write a function to merge ten dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2,**dict3,**dict4,**dict5,**dict6,**dict7,**dict8,**dict9,**dict10}\ndef merge_dictionaries_ten_alt(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10):\n    '''\n    Write a function to merge ten dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2,**dict3,**dict4,**dict5,**dict6,**dict7,**dict8,**dict9,**dict10}\ndef merge_dictionaries_eleven(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11):\n    '''\n    Write a function to merge eleven dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2,**dict3,**dict4,**dict5,**dict6,**dict7,**dict8,**dict9,**dict10,**dict11}\ndef merge_dictionaries_eleven_alt(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11):\n    '''\n    Write a function to merge eleven dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2,**dict3,**dict4,**dict5,**dict6,**dict7,**dict8,**dict9,**dict10,**dict11}\ndef merge_dictionaries_twelve(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11, dict12):\n    '''\n    Write a function to merge twelve dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2,**dict3,**dict4,**dict5,**dict6,**dict7,**dict8,**dict9,**dict10,**dict11,**dict12}\ndef merge_dictionaries_twelve_alt(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11, dict12):\n    '''\n    Write a function to merge twelve dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2,**dict3,**dict4,**dict5,**dict6,**dict7,**dict8,**dict9,**dict10,**dict11,**dict12}\ndef merge_dictionaries_thirteen(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11, dict12, dict13):\n    '''\n    Write a function to merge thirteen dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2,**dict3,**dict4,**dict5,**dict6,**dict7,**dict8,**dict9,**dict10,**dict11,**dict12,**dict13}\ndef merge_dictionaries_thirteen_alt(dict1,dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11, dict12, dict13):\n    '''\n    Write a function to merge thirteen dictionaries into a single dictionary.\n    ''"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #Solution 1\n    # dict4 = {}\n    # for k,v in dict1.iteritems():\n    #     dict4[k] = v\n    # for k,v in dict2.iteritems():\n    #     dict4[k] = v\n    # for k,v in dict3.iteritems():\n    #     dict4[k] = v\n    # return dict4\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\n    \ndef merge_dictionaries(d1, d2, d3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d1.update(d2)\n    d1.update(d3)\n    return d1\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    for i in dict1:\n        if i in dict2:\n            for j in dict2[i]:\n                if j in dict3[i]:\n                    dict3[i][j].update(dict2[i][j])\n    return dict3\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    for i in dict1:\n        if i in dict2:\n            dict2[i].update(dict1[i])\n    return dict2\ndef convert_to_dictionary(l):\n    '''\n    Write a function to convert a list of lists into a dictionary.\n    '''\n    l_dict = {}\n    for i in range(0,len(l)):\n        l_dict[l[i][0]] = l[i][1:]\n    return l_dict\ndef invert_dict(d):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    invert_d = {}\n    for i in d:\n        invert_d[d[i]] = [i]\n    return invert_d\ndef convert_to_tuple_list(l):\n    '''\n    Write a function to convert a list of lists into a list of tuples.\n    '''\n    return [(l[i][0],l[i][1]) for i in range(0,len(l))]\ndef find_substring(str1, str2):\n    '''\n    Write a function to find the longest substring in str1 that is a substring in str2.\n    '''\n    max_len = 0\n    current_max = 0\n    for i in range(0,len(str1)):\n        for j in range(i,len(str1)):\n            if str2[i:j+1] in str1:\n                current_max = j+1\n                if current_max > max_len:\n                    max_len = current_max\n    return max_len\ndef generate_dictionary(l):\n    '''\n    Write a function to generate a dictionary with the keys as the characters in the list and the values as the frequencies of each character.\n    '''\n    d = {}\n    for i in l:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    return d\ndef remove_duplicates_from_list(l):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    return list(set(l))\ndef get_max_value(d):\n    '''\n    Write a function to return the maximum value in a dictionary.\n    '''\n    return max(d.values())\ndef get_max_key_list(d):\n    '''\n    Write a function to return a list of the keys that have the maximum value in a dictionary.\n    '''\n    return [key for key in d if d[key] == get_max_value(d)]\ndef get_max_key(d):\n    '''\n    Write a function to return the key that has the maximum value in a dictionary.\n    '''\n    return max(d.keys(), key=(lambda k: d[k]))\ndef get_min_value(d):\n    '''\n    Write a function to return the minimum value in a dictionary.\n    '''\n    return min(d.values())\ndef get_min_key_list(d):\n    '''\n    Write a function to return a list of the keys that have the minimum value in a dictionary.\n    '''\n    return [key for key in d if d[key] == get_min_value(d)]\ndef get_min_key(d):\n    '''\n    Write a function to return the key that has the minimum value in a dictionary.\n    '''\n    return min(d.keys(), key=(lambda k: d[k]))\ndef get_max_key_value_pair(d):\n    '''\n    Write a function to return the maximum value and the corresponding key from a dictionary.\n    '''\n    return max(d.iteritems(), key=lambda x: x[1])\ndef get_max_key_value_pair_list(d):\n    '''\n    Write a function to return a list of the maximum value and the corresponding keys from a dictionary.\n    '''\n    return [max(d.iteritems(), key=lambda x: x[1])]\ndef get_max_key_value_pair_list_sorted(d):\n    '''\n    Write a function to return a list of the maximum value and the corresponding keys from a dictionary. The list is sorted by the value, and if the values are the same, the keys are sorted.\n    '''\n    sorted_d = sorted(d.iteritems(), key=lambda x: x[1], reverse=True)\n    return [sorted_d[0]]\ndef get_min_key_value_pair(d):\n    '''\n    Write a function to return the minimum value and the corresponding key from a dictionary.\n    '''\n    return min(d.iteritems(), key=lambda x: x[1])\ndef get_min_key_value_pair_list(d):\n    '''\n    Write a function to return a list of the minimum value and the corresponding keys from a dictionary.\n    '''\n    return [min(d.iteritems(), key=lambda x: x[1])]\ndef get_min_key_value_pair_list_sorted(d):\n    '''\n    Write a function to return a list of the minimum value and the corresponding keys from a dictionary. The list is sorted by the value, and if the values are the same, the keys are sorted.\n    '''\n    sorted_d = sorted(d.iteritems(), key=lambda x: x[1])\n    return [sorted_d[0]]\ndef get_avg_length(l):\n    '''\n    Write a function to return the average length of a list.\n    '''\n    return float(sum(l))/float(len(l))\ndef get_avg_length_list(l):\n    '''\n    Write a function to return a list of the average length of each element of a list.\n    '''\n    return [float(sum(l))/float(len(l))]\ndef get_avg_length_list_sorted(l):\n    '''\n    Write a function to return a list of the average length of each element of a list. The list is sorted by the length, and if the lengths are the same, the keys are sorted.\n    '''\n    sorted_l = sorted(l, key=len)\n    return [float(sum(l))/float(len(l))]\ndef remove_dict_values(d, l):\n    '''\n    Write a function to remove a list of values from a dictionary.\n    '''\n    return dict([(key,value) for key,value in d.iteritems() if key not in l])\ndef get_subdictionary_one_key(d,k):\n    '''\n    Write a function to return the value of a key in a dictionary that only has a single value.\n    '''\n    return d[k]\ndef get_subdictionary_two_keys(d,k1,k2):\n    '''\n    Write a function to return the value of the key2 value from the dictionary that only has two values for the key1 value.\n    '''\n    return d[k1][k2]\ndef get_subdictionary_three_keys(d,k1,k2,k3):\n    '''\n    Write a function to return the value of the key3 value from the dictionary that only has three values for the key1 value.\n    '''\n    return d[k1][k2][k3]\ndef get_subdictionary_three_keys_two_values(d,k1,k2,k3,k4):\n    '''\n    Write a function to return the value of the key4 value from the dictionary that only has four values for the key1 value.\n    '''\n    return d[k1][k2][k3][k4]\ndef get_subdictionary_three_keys_three_values(d,k1,k2,k3,k4,k5):\n    '''\n    Write a function to return the value of the key5 value from the dictionary that only has five values for th"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    out_dict = {}\n    for key in dict1:\n        out_dict[key] = dict1[key]\n    for key in dict2:\n        out_dict[key] = dict2[key]\n    for key in dict3:\n        out_dict[key] = dict3[key]\n    return out_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = {}\n    for i in list1:\n        count[i] = count.get(i,0) + 1\n    return count\ndef test_freq_count():\n    l1 = ['a', 'b', 'b', 'b', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_list = collections.Counter(list1)\n    return count_list\n    \ndef freq_sort(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_list = collections.Counter(list1)\n    return collections.OrderedDict(sorted(count_list.items()))\n    \ndef freq_sorted(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_list = collections.Counter(list1)\n    return collections.OrderedDict(sorted(count_list.items()))\n    \ndef freq_sorted_list(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_list = collections.Counter(list1)\n    return [k for k in sorted(count_list.items())]\n    \ndef freq_sort_list(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_list = collections.Counter(list1)\n    return [k for k in sorted(count_list.items())]\n    \ndef freq_sort_tuple(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_list = collections.Counter(list1)\n    return [(k, v) for k, v in sorted(count_list.items())]\n    \ndef freq_sort_tuple_list(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_list = collections.Counter(list1)\n    return [(k, v) for k, v in sorted(count_list.items())]\n    \ndef freq_sorted_tuple(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_list = collections.Counter(list1)\n    return [(k, v) for k, v in sorted(count_list.items())]\n    \ndef freq_sorted_tuple_list(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_list = collections.Counter(list1)\n    return [(k, v) for k, v in sorted(count_list.items())]\n    \ndef freq_sorted_dict(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_list = collections.Counter(list1)\n    return {k: v for k, v in sorted(count_list.items())}\n    \ndef freq_sorted_dict_list(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_list = collections.Counter(list1)\n    return [(k, v) for k, v in sorted(count_list.items())]\n    \ndef freq_sorted_dict_tuple(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_list = collections.Counter(list1)\n    return {k: v for k, v in sorted(count_list.items())}\n    \ndef freq_sorted_dict_tuple_list(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_list = collections.Counter(list1)\n    return [(k, v) for k, v in sorted(count_list.items())]\n    \ndef freq_sorted_dict_tuple_list(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_list = collections.Counter(list1)\n    return [(k, v) for k, v in sorted(count_list.items())]\n    \ndef freq_sorted_dict_tuple_list(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_list = collections.Counter(list1)\n    return [(k, v) for k, v in sorted(count_list.items())]\n    \ndef freq_sorted_dict_tuple(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_list = collections.Counter(list1)\n    return {k: v for k, v in sorted(count_list.items())}\n    \ndef freq_sorted_dict_tuple_list(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_list = collections.Counter(list1)\n    return [(k, v) for k, v in sorted(count_list.items())]\n    \ndef freq_sorted_dict_tuple(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_list = collections.Counter(list1)\n    return {k: v for k, v in sorted(count_list.items())}\n    \ndef freq_sorted_dict_tuple(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_list = collections.Counter(list1)\n    return [(k, v) for k, v in sorted(count_list.items())]\n    \ndef freq_sorted_dict_tuple(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_list = collections.Counter(list1)\n    return {k: v for k, v in sorted(count_list.items())}\n    \ndef freq_sorted_dict_tuple(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_list = collections.Counter(list1)\n    return {k: v for k, v in sorted(count_list.items())}\n    \ndef freq_sorted_dict_tuple(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_list = collections.Counter(list1)\n    return {k: v for k, v in sorted(count_list.items())}\n    \ndef freq_sorted_dict_tuple(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_list = collections.Counter(list1)\n    return {k: v for k, v in sorted(count_list.items())}\n    \ndef freq_sorted_dict_tuple(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_list = collections.Counter(list1)\n    return {k: v for k, v in sorted(count_list.items())}\n    \ndef freq_sorted_dict_tuple(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_list = collections.Counter(list1)\n    return {k: v for k, v in sorted(count_list.items())}\n    \ndef freq_sorted_dict_tuple(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    my_dict = {}\n    for val in list1:\n        my_dict[val] = my_dict.get(val,0) + 1\n    return my_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for val in list1:\n        freq[val] = list1.count(val)\n    return freq\ndef get_freq_dist_of_column(df, colname):\n    '''\n    Write a function to get the frequency distribution of a given column in a DataFrame.\n    '''\n    freq_dist = freq_count(df[colname])\n    return freq_dist\ndef get_freq_dist_of_columns(df, colnames):\n    '''\n    Write a function to get the frequency distribution of a list of columns in a DataFrame.\n    '''\n    freq_dist = {}\n    for colname in colnames:\n        freq_dist[colname] = freq_count(df[colname])\n    return freq_dist\ndef get_freq_dist_of_columns_with_frequencies(df, colnames, freq_dist_func):\n    '''\n    Write a function to get the frequency distribution of a list of columns in a DataFrame.\n    '''\n    freq_dist = {}\n    for colname in colnames:\n        freq_dist[colname] = freq_dist_func(df[colname])\n    return freq_dist\ndef get_colname_df_and_column_dict(df, colnames):\n    '''\n    Write a function to get the frequency distribution of a list of columns in a DataFrame.\n    '''\n    colname_df = {}\n    for colname in colnames:\n        colname_df[colname] = df[colname]\n    colname_to_column = {}\n    for i, colname in enumerate(colnames):\n        colname_to_column[colname] = i\n    return colname_df, colname_to_column\ndef get_colname_df_and_column_dict_with_frequencies(df, colnames, freq_dist_func):\n    '''\n    Write a function to get the frequency distribution of a list of columns in a DataFrame.\n    '''\n    colname_df = {}\n    for colname in colnames:\n        colname_df[colname] = df[colname]\n    colname_to_column = {}\n    for i, colname in enumerate(colnames):\n        colname_to_column[colname] = i\n    freq_dist = {}\n    for colname in colnames:\n        freq_dist[colname] = freq_dist_func(colname_df[colname])\n    return colname_df, colname_to_column, freq_dist\ndef get_colname_df_and_column_dict_with_frequencies_and_name(df, colnames, freq_dist_func):\n    '''\n    Write a function to get the frequency distribution of a list of columns in a DataFrame.\n    '''\n    colname_df = {}\n    for colname in colnames:\n        colname_df[colname] = df[colname]\n    colname_to_column = {}\n    for i, colname in enumerate(colnames):\n        colname_to_column[colname] = i\n    freq_dist = {}\n    for colname in colnames:\n        freq_dist[colname] = freq_dist_func(colname_df[colname])\n    return colname_df, colname_to_column, freq_dist, colnames\ndef get_colname_df_and_column_dict_with_frequencies_and_name_and_freq(df, colnames, freq_dist_func):\n    '''\n    Write a function to get the frequency distribution of a list of columns in a DataFrame.\n    '''\n    colname_df = {}\n    for colname in colnames:\n        colname_df[colname] = df[colname]\n    colname_to_column = {}\n    for i, colname in enumerate(colnames):\n        colname_to_column[colname] = i\n    freq_dist = {}\n    for colname in colnames:\n        freq_dist[colname] = freq_dist_func(colname_df[colname])\n    return colname_df, colname_to_column, freq_dist, colnames, freq_dist\ndef get_colname_df_and_column_dict_with_frequencies_and_name_and_freq_and_name(df, colnames, freq_dist_func):\n    '''\n    Write a function to get the frequency distribution of a list of columns in a DataFrame.\n    '''\n    colname_df = {}\n    for colname in colnames:\n        colname_df[colname] = df[colname]\n    colname_to_column = {}\n    for i, colname in enumerate(colnames):\n        colname_to_column[colname] = i\n    freq_dist = {}\n    for colname in colnames:\n        freq_dist[colname] = freq_dist_func(colname_df[colname])\n    return colname_df, colname_to_column, freq_dist, colnames, freq_dist, colnames\ndef get_colname_df_and_column_dict_with_frequencies_and_name_and_freq_and_name_and_freq(df, colnames, freq_dist_func):\n    '''\n    Write a function to get the frequency distribution of a list of columns in a DataFrame.\n    '''\n    colname_df = {}\n    for colname in colnames:\n        colname_df[colname] = df[colname]\n    colname_to_column = {}\n    for i, colname in enumerate(colnames):\n        colname_to_column[colname] = i\n    freq_dist = {}\n    for colname in colnames:\n        freq_dist[colname] = freq_dist_func(colname_df[colname])\n    return colname_df, colname_to_column, freq_dist, colnames, freq_dist, colnames, freq_dist\ndef get_colname_df_and_column_dict_with_frequencies_and_name_and_freq_and_name_and_freq_and_name(df, colnames, freq_dist_func):\n    '''\n    Write a function to get the frequency distribution of a list of columns in a DataFrame.\n    '''\n    colname_df = {}\n    for colname in colnames:\n        colname_df[colname] = df[colname]\n    colname_to_column = {}\n    for i, colname in enumerate(colnames):\n        colname_to_column[colname] = i\n    freq_dist = {}\n    for colname in colnames:\n        freq_dist[colname] = freq_dist_func(colname_df[colname])\n    return colname_df, colname_to_column, freq_dist, colnames, freq_dist, colnames, freq_dist, colnames\ndef get_colname_df_and_column_dict_with_frequencies_and_name_and_freq_and_name_and_freq_and_name_and_freq(df, colnames, freq_dist_func):\n    '''\n    Write a function to get the frequency distribution of a list of columns in a DataFrame.\n    '''\n    colname_df = {}\n    for colname in colnames:\n        colname_df[colname] = df[colname]\n    colname_to_column = {}\n    for i, colname in enumerate(colnames):\n        colname_to_column[colname] = i\n    freq_dist = {}\n    for colname in colnames:\n        freq_dist[colname] = freq_dist_func(colname_df[colname])\n    return colname_df, colname_to_column, freq_dist, colnames, freq_dist, colnames, freq_dist, colnames, freq_dist\ndef get_colname_df_and_column_dict_with_frequencies_and_name_and_freq_and_name_and_freq"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n    \ndef inversion_count(list1):\n    '''\n    Write a function to return the number of inversions in a list of integers. Inversion is defined as an\n    element that is larger than the elements that are before it and smaller than the elements after it.\n    '''\n    inversions = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i] > list1[j]:\n                inversions += 1\n    return inversions\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for each in list1:\n        if each not in dict1:\n            dict1[each] = 1\n        else:\n            dict1[each] = dict1[each] + 1\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    my_dict = {}\n    for item in list1:\n        if item in my_dict.keys():\n            my_dict[item]+=1\n        else:\n            my_dict[item]=1\n    return my_dict\ndef find_max_occuring(list1):\n    '''\n    Find the maximum occuring element in a list.\n    '''\n    frequency_dict = freq_count(list1)\n    max_value = max(frequency_dict.values())\n    max_keys = [k for k,v in frequency_dict.iteritems() if v == max_value]\n    return max_keys\ndef find_min_occuring(list1):\n    '''\n    Find the minimum occuring element in a list.\n    '''\n    frequency_dict = freq_count(list1)\n    min_value = min(frequency_dict.values())\n    min_keys = [k for k,v in frequency_dict.iteritems() if v == min_value]\n    return min_keys\ndef f(input_file,output_file):\n    '''\n    Reads the input file and writes the same file with the word count of each word.\n    '''\n    f = open(input_file,'r')\n    output_file = open(output_file,'w')\n    for line in f:\n        words = line.split()\n        count = len(words)\n        output_file.write(str(count)+'\\n')\n    f.close()\n    output_file.close()\ndef get_words_from_file(input_file):\n    '''\n    Reads the input file and returns a list of words.\n    '''\n    f = open(input_file,'r')\n    words = f.read()\n    words = words.split()\n    return words\ndef is_number(s):\n    '''\n    Checks if the string is a number.\n    '''\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\ndef get_words_with_length(input_file,length):\n    '''\n    Reads the input file and returns a list of words of given length.\n    '''\n    words = get_words_from_file(input_file)\n    length_words = []\n    for word in words:\n        if len(word) == length:\n            length_words.append(word)\n    return length_words\ndef get_words_with_length_not_equal(input_file,length):\n    '''\n    Reads the input file and returns a list of words of given length.\n    '''\n    words = get_words_from_file(input_file)\n    length_words = []\n    for word in words:\n        if len(word)!= length:\n            length_words.append(word)\n    return length_words\ndef get_words_with_length_greater(input_file,length):\n    '''\n    Reads the input file and returns a list of words of given length.\n    '''\n    words = get_words_from_file(input_file)\n    length_words = []\n    for word in words:\n        if len(word) > length:\n            length_words.append(word)\n    return length_words\ndef get_words_with_length_greater_equal(input_file,length):\n    '''\n    Reads the input file and returns a list of words of given length.\n    '''\n    words = get_words_from_file(input_file)\n    length_words = []\n    for word in words:\n        if len(word) >= length:\n            length_words.append(word)\n    return length_words\ndef get_words_with_length_less(input_file,length):\n    '''\n    Reads the input file and returns a list of words of given length.\n    '''\n    words = get_words_from_file(input_file)\n    length_words = []\n    for word in words:\n        if len(word) < length:\n            length_words.append(word)\n    return length_words\ndef get_words_with_length_less_equal(input_file,length):\n    '''\n    Reads the input file and returns a list of words of given length.\n    '''\n    words = get_words_from_file(input_file)\n    length_words = []\n    for word in words:\n        if len(word) <= length:\n            length_words.append(word)\n    return length_words\ndef get_words_with_length_not_equal_and_not_greater(input_file,length):\n    '''\n    Reads the input file and returns a list of words of given length.\n    '''\n    words = get_words_from_file(input_file)\n    length_words = []\n    for word in words:\n        if len(word)!= length and word not in get_words_with_length_greater(input_file,length):\n            length_words.append(word)\n    return length_words\ndef get_words_with_length_not_equal_and_not_less(input_file,length):\n    '''\n    Reads the input file and returns a list of words of given length.\n    '''\n    words = get_words_from_file(input_file)\n    length_words = []\n    for word in words:\n        if len(word)!= length and word not in get_words_with_length_less(input_file,length):\n            length_words.append(word)\n    return length_words\ndef get_words_with_length_not_equal_and_not_equal_greater(input_file,length):\n    '''\n    Reads the input file and returns a list of words of given length.\n    '''\n    words = get_words_from_file(input_file)\n    length_words = []\n    for word in words:\n        if len(word)!= length and word not in get_words_with_length_not_equal_and_not_greater(input_file,length):\n            length_words.append(word)\n    return length_words\ndef get_words_with_length_not_equal_and_not_equal_less(input_file,length):\n    '''\n    Reads the input file and returns a list of words of given length.\n    '''\n    words = get_words_from_file(input_file)\n    length_words = []\n    for word in words:\n        if len(word)!= length and word not in get_words_with_length_not_equal_and_not_less(input_file,length):\n            length_words.append(word)\n    return length_words\ndef get_words_with_length_not_equal_and_greater_than(input_file,length):\n    '''\n    Reads the input file and returns a list of words of given length.\n    '''\n    words = get_words_from_file(input_file)\n    length_words = []\n    for word in words:\n        if len(word)!= length and word not in get_words_with_length_less_equal(input_file,length):\n            length_words.append(word)\n    return length_words\ndef get_words_with_length_not_equal_and_less_than(input_file,length):\n    '''\n    Reads the input file and returns a list of words of given length.\n    '''\n    words = get_words_from_file(input_file)\n    length_words = []\n    for word in words:\n        if len(word)!= length and word not in get_words_with_length_greater_equal(input_file,length):\n            length_words.append(word)\n    return length_words\ndef get_words_with_length_greater_than_or_equal(input_file,length):\n    '''\n    Reads the input file and returns a list of words of given length.\n    '''\n    words = get_words_from_file(input_file)\n    length_words = []\n    for word in words:\n        if len(word) >= length:\n            length_words.append(word)\n    return length_words\ndef get_words_with_length_less_than_or_equal(input_file,length):\n    '''\n    Reads the input fil"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq=collections.Counter(list1)\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict.keys():\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency = {}\n    for key in list1:\n        if key in frequency:\n            frequency[key] += 1\n        else:\n            frequency[key] = 1\n    return frequency\ndef get_uniques(list1):\n    '''\n    Write a function to get the unique elements in a list, returned as a list.\n    '''\n    unique_list = []\n    for key in list1:\n        if key not in unique_list:\n            unique_list.append(key)\n    return unique_list\ndef get_nums(list1):\n    '''\n    Write a function to get the numbers in a list, returned as a list.\n    '''\n    num_list = []\n    for key in list1:\n        if type(key) == int or type(key) == float:\n            num_list.append(key)\n    return num_list\ndef reverse_string(list1):\n    '''\n    Write a function to reverse a list of strings.\n    '''\n    return list1[::-1]\ndef append_space(list1):\n    '''\n    Write a function to append a space to every word in a list.\n    '''\n    return [\" \" + word for word in list1]\ndef order_chars(list1):\n    '''\n    Write a function to sort a list of chars.\n    '''\n    return sorted(list1)\ndef dict_word_freq(list1):\n    '''\n    Write a function to get the frequency of all the words in a list, returned as a dictionary.\n    '''\n    frequency = {}\n    for word in list1:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    return frequency\ndef find_words(list1, word):\n    '''\n    Write a function to get a list of words in a list that are equal to a given word.\n    '''\n    found_words = []\n    for word in list1:\n        if word == word:\n            found_words.append(word)\n    return found_words\ndef get_num_index(list1):\n    '''\n    Write a function to get the index of a number in a list.\n    '''\n    return list1.index(min(list1))\ndef get_num_index(list1):\n    '''\n    Write a function to get the index of a number in a list.\n    '''\n    return list1.index(max(list1))\ndef get_num_index(list1):\n    '''\n    Write a function to get the index of a number in a list.\n    '''\n    return list1.index(min(list1))\ndef get_num_index(list1):\n    '''\n    Write a function to get the index of a number in a list.\n    '''\n    return list1.index(max(list1))\ndef unique_lists(list1):\n    '''\n    Write a function to get the unique lists in a list.\n    '''\n    unique_lists = []\n    for list1 in list1:\n        if list1 not in unique_lists:\n            unique_lists.append(list1)\n    return unique_lists\ndef get_numbers(list1):\n    '''\n    Write a function to get the numbers in a list, returned as a list.\n    '''\n    num_list = []\n    for key in list1:\n        if type(key) == int or type(key) == float:\n            num_list.append(key)\n    return num_list\ndef get_integers(list1):\n    '''\n    Write a function to get the integers in a list, returned as a list.\n    '''\n    int_list = []\n    for key in list1:\n        if type(key) == int:\n            int_list.append(key)\n    return int_list\ndef get_floats(list1):\n    '''\n    Write a function to get the floats in a list, returned as a list.\n    '''\n    float_list = []\n    for key in list1:\n        if type(key) == float:\n            float_list.append(key)\n    return float_list\ndef get_upper_words(list1):\n    '''\n    Write a function to get the upper words in a list, returned as a list.\n    '''\n    upper_words = []\n    for word in list1:\n        if word[0].isupper():\n            upper_words.append(word)\n    return upper_words\ndef get_lower_words(list1):\n    '''\n    Write a function to get the lower words in a list, returned as a list.\n    '''\n    lower_words = []\n    for word in list1:\n        if word[0].islower():\n            lower_words.append(word)\n    return lower_words\ndef get_upper_words(list1):\n    '''\n    Write a function to get the upper words in a list, returned as a list.\n    '''\n    upper_words = []\n    for word in list1:\n        if word[0].isupper():\n            upper_words.append(word)\n    return upper_words\ndef get_lower_words(list1):\n    '''\n    Write a function to get the lower words in a list, returned as a list.\n    '''\n    lower_words = []\n    for word in list1:\n        if word[0].islower():\n            lower_words.append(word)\n    return lower_words\ndef get_lower_words(list1):\n    '''\n    Write a function to get the lower words in a list, returned as a list.\n    '''\n    lower_words = []\n    for word in list1:\n        if word[0].islower():\n            lower_words.append(word)\n    return lower_words\ndef get_upper_words(list1):\n    '''\n    Write a function to get the upper words in a list, returned as a list.\n    '''\n    upper_words = []\n    for word in list1:\n        if word[0].isupper():\n            upper_words.append(word)\n    return upper_words\ndef get_lower_words(list1):\n    '''\n    Write a function to get the lower words in a list, returned as a list.\n    '''\n    lower_words = []\n    for word in list1:\n        if word[0].islower():\n            lower_words.append(word)\n    return lower_words\ndef get_upper_words(list1):\n    '''\n    Write a function to get the upper words in a list, returned as a list.\n    '''\n    upper_words = []\n    for word in list1:\n        if word[0].isupper():\n            upper_words.append(word)\n    return upper_words\ndef get_lower_words(list1):\n    '''\n    Write a function to get the lower words in a list, returned as a list.\n    '''\n    lower_words = []\n    for word in list1:\n        if word[0].islower():\n            lower_words.append(word)\n    return lower_words\ndef get_upper_words(list1):\n    '''\n    Write a function to get the upper words in a list, returned as a list.\n    '''\n    upper_words = []\n    for word in list1:\n        if word[0].isupper():\n            upper_words.append(word)\n    return upper_words\ndef get_lower_words(list1):\n    '''\n    Write a function to get the lower words in a list, returned as a list.\n    '''\n    lower_words = []\n    for word in list1:\n        if word[0].islower():\n            lower_words.append(word)\n    return lower_words\ndef get_upper_words(list1):\n    '''\n    Write a function to get the upper words in a list, returned as a list.\n    '''\n    upper_words = []\n    for word in list1:\n        if word[0].isupper():\n            upper_words.append(word)\n    return upper_words\ndef get_lower_words(list1):\n    '''\n    Write a function to get the lower words in a list, returned as a list.\n    '''\n    lower_words = []\n    for word in list1:\n        if word["
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return N + N // (2**(len(str(N))-1))\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if n <= 0:\n        return -1\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    assert isinstance(N, int)\n    assert isinstance(N, float)\n    assert N >= 0\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Find the largest integer <= N\n    x = -1\n    while True:\n        x = x + 1\n        if x <= N:\n            break\n    # The largest integer <= N is x, so find the largest integer < N\n    # that is larger than x\n    # x is the smallest integer > N\n    y = x - 1\n    while True:\n        if y < 1:\n            break\n        if y > N:\n            y -= 1\n            break\n    # The smallest integer > N is y, so find the largest integer < N\n    # that is larger than y\n    # y is the smallest integer > N\n    return y\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    assert type(N) == int, \"Input must be an integer.\"\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    numbers = [i for i in range(1,N+1)]\n    for i in range(len(numbers)-1):\n        for j in range(i+1,len(numbers)):\n            if abs(numbers[i]-numbers[j]) < abs(numbers[i]-N):\n                temp = numbers[i]\n                numbers[i] = numbers[j]\n                numbers[j] = temp\n    return numbers[0]\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = float(N)\n    if n > 0:\n        lower = 0\n        upper = n\n        while upper - lower > 1:\n            test = (lower + upper) / 2\n            if test == n:\n                return test\n            if test > n:\n                upper = test\n            else:\n                lower = test\n        return lower\n    else:\n        return -1\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    import sys\n    def find_smallest(n, nums):\n        m = nums[0]\n        for i in nums:\n            if i < m:\n                m = i\n        return m\n    # if n is the smallest number, return -1\n    if n == 1:\n        return -1\n    # if n is the largest number, return n\n    if n == 100000000:\n        return 100000000\n    # if n is not the smallest and not the largest, loop through the range\n    for i in range(n, 1, -1):\n        if i > n:\n            return n\n        elif i < n:\n            return i\n    # return the closest smaller number\n    return find_smallest(n, range(n - 1, 1, -1))\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return min(map(lambda x: x-1, xrange(N, 0, -1)))\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if n == 0:\n        return 0\n    \n    nums = [n - i for i in range(n)]\n    nums.sort()\n    \n    return nums[0]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len_list=[]\n    for i in list1:\n        len_list.append(len(i))\n    return max(len_list)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    #to obtain the length of the list \n    return max(len(i) for i in list1)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for x in list1:\n        if len(x) > longest:\n            longest = len(x)\n    return longest\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for item in list1:\n        if len(item) > max_len:\n            max_len = len(item)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    from itertools import groupby\n    list2=list1\n    for k, g in groupby(sorted(list2), key=len):\n        print(k,list(g))\n    return len(max(list2,key=len))\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    dic = {}\n    for word in list1:\n        dic[word] = len(word)\n    max_len = max(dic.values())\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Your Code Here\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word = ''\n    for element in list1:\n        if len(element) > len(word):\n            word = element\n    print(\"The length of the longest word is: \" + str(len(word)))\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    print \"Length of the longest word is \", max_len\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    if sub_str in str1:\n        return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_len = len(sub_str)\n    for i in range(len(str1)-sub_str_len+1):\n        if str1[i:i+sub_str_len] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1 in sub_str:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) > len(str1):\n        return False\n    if sub_str in str1:\n        return True\n    else:\n        return False\n        \ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) > len(str1):\n        return False\n    if sub_str in str1:\n        return True\n    else:\n        return False\n        \ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) > len(str1):\n        return False\n    if sub_str in str1:\n        return True\n    else:\n        return False\n        \ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) > len(str1):\n        return False\n    if sub_str in str1:\n        return True\n    else:\n        return False\n        \ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) > len(str1):\n        return False\n    if sub_str in str1:\n        return True\n    else:\n        return False\n        \ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) > len(str1):\n        return False\n    if sub_str in str1:\n        return True\n    else:\n        return False\n        \ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) > len(str1):\n        return False\n    if sub_str in str1:\n        return True\n    else:\n        return False\n        \ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) > len(str1):\n        return False\n    if sub_str in str1:\n        return True\n    else:\n        return False\n        \ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) > len(str1):\n        return False\n    if sub_str in str1:\n        return True\n    else:\n        return False\n        \ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) > len(str1):\n        return False\n    if sub_str in str1:\n        return True\n    else:\n        return False\n        \ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) > len(str1):\n        return False\n    if sub_str in str1:\n        return True\n    else:\n        return False\n        \ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) > len(str1):\n        return False\n    if sub_str in str1:\n        return True\n    else:\n        return False\n        \ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) > len(str1):\n        return False\n    if sub_str in str1:\n        return True\n    else:\n        return False\n        \ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) > len(str1):\n        return False\n    if sub_str in str1:\n        return True\n    else:\n        return False\n        \ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) > len(str1):\n        return False\n    if sub_str in str1:\n        return True\n    else:\n        return False\n        \ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) > len(str1):\n        return False\n    if sub_str in str1:\n        return True\n    else:\n        return False\n        \ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) > len(str1):\n        return False\n    if sub_str in str1:\n        return True\n    else:\n        return False\n        \ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) > len(str1):\n        return False\n    if sub_str in str1:\n        return True\n    else:\n        return False\n        \ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) > len(str1):\n        return False\n    if sub_str in str1:\n        return True\n    else:\n        return False\n        \ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) > len(str1):\n        return False\n    if sub_str in str1:\n        return True\n    else:\n        return False\n        \ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) > len(str1):\n        return False\n    if sub_str in str1:\n        return True\n    else:\n        return False\n        \ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) > len(str1):\n        return False\n    if sub_str in str1:\n        return True\n    else:\n        return False\n        \ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) > len(str1):\n        return False\n    if sub_str in str1:\n        return True\n    else:\n        return False\n        \nde"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) == 0:\n        return True\n    elif len(str1) == 0:\n        return False\n    else:\n        sub_str_len = len(sub_str)\n        str1_len = len(str1)\n        for i in range(str1_len - sub_str_len + 1):\n            if str1[i:i+sub_str_len] == sub_str:\n                return True\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # If the length of str1 is greater than length of sub_str then the whole string is not a substring\n    if len(str1) < len(sub_str):\n        return False\n    # Iterate over all the possible substrings to find the one from the list that is equal to str1\n    for i in range(0,len(str1)):\n        if str1[i:len(sub_str)+i] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in value for value in str1)\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    count = 0\n    for sub in sub_str:\n        if sub in str1:\n            count += 1\n    return count\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    from math import sqrt\n    s = str(n)\n    for i in range(len(s)-1):\n        if int(s[i]) > int(s[i+1]):\n            return False\n        elif int(s[i]) < int(s[i+1]):\n            if int(s[i])*int(s[i+1]) > int(sqrt(int(s[i])*int(s[i+1]))):\n                return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 3:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_undulating_seq(n, start, end):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(start, end + 1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_primitive(n): \n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    if n < 3:\n        return False\n    if n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(n ** 0.5) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n    \ndef is_perfect(n):\n    '''\n    Write a function to check whether the given number is perfect or not.\n    A perfect number is a number which is equal to the sum of its proper positive divisors.\n    '''\n    if n < 3:\n        return False\n    if n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(n ** 0.5) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n    \ndef is_perfect_seq(n, start, end):\n    '''\n    Write a function to check whether the given number is perfect or not.\n    '''\n    for i in range(start, end + 1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_amicable(n):\n    '''\n    Write a function to check whether the given number is amicable or not.\n    '''\n    if n < 3:\n        return False\n    a, b = divmod(n, 2)\n    c, d = divmod(a, 2)\n    return b == d and n == a + b\n    \ndef is_amicable_seq(n, start, end):\n    '''\n    Write a function to check whether the given number is amicable or not.\n    '''\n    for i in range(start, end + 1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_palindromic(n):\n    '''\n    Write a function to check whether the given number is palindromic or not.\n    '''\n    if n < 10:\n        return True\n    if n < 100:\n        return n % 10 == n // 10\n    if n < 1000:\n        return n % 10 == n // 10 % 10\n    if n < 10000:\n        return n % 10 == n // 10 % 10 % 10\n    return False\n    \ndef is_palindromic_seq(n, start, end):\n    '''\n    Write a function to check whether the given number is palindromic or not.\n    '''\n    for i in range(start, end + 1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_pallindromic_seq(n, start, end):\n    '''\n    Write a function to check whether the given number is palindromic or not.\n    '''\n    for i in range(start, end + 1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_number_perfect_seq(n, start, end):\n    '''\n    Write a function to check whether the given number is perfect or not.\n    '''\n    for i in range(start, end + 1):\n        if n % i!= 0:\n            return False\n    return True\n    \ndef is_fibonacci(n):\n    '''\n    Write a function to check whether the given number is fibonacci or not.\n    '''\n    if n < 3:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    a, b = 0, 1\n    for i in range(4, n + 1, 2):\n        a, b = b, a + b\n    if b == n:\n        return True\n    return False\n    \ndef is_fibonacci_seq(n, start, end):\n    '''\n    Write a function to check whether the given number is fibonacci or not.\n    '''\n    for i in range(start, end + 1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_fibonacci_seq_2(n, start, end):\n    '''\n    Write a function to check whether the given number is fibonacci or not.\n    '''\n    for i in range(start, end + 1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_fibonacci_seq_3(n, start, end):\n    '''\n    Write a function to check whether the given number is fibonacci or not.\n    '''\n    for i in range(start, end + 1):\n        if n % i == 0:\n            return True\n    return False\n    \ndef is_fibonacci_seq_4(n, start, end):\n    '''\n    Write a function to check whether the given number is fibonacci or not.\n    '''\n    for i in range(start, end + 1):\n        if n % i == 0:\n            return True\n    return False\n    \ndef is_perfect_seq_2(n, start, end):\n    '''\n    Write a function to check whether the given number is perfect or not.\n    '''\n    for i in range(start, end + 1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_perfect_seq_3(n, start, end):\n    '''\n    Write a function to check whether the given number is perfect or not.\n    '''\n    for i in range(start, end + 1):\n        if n % i == 0:\n            return True\n    return False\n    \ndef is_perfect_seq_4(n, start, end):\n    '''\n    Write a function to check whether the given number is perfect or not.\n    '''\n    for i in range(start, end + 1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_perfect_seq_5(n, start, end):\n    '''\n    Write a function to check whether the given number is perfect or not.\n    '''\n    for i in range(start, end + 1):\n        if n % i == 0:\n            return True\n    return False\n    \ndef is_perfect_seq_6(n, start, end):\n    '''\n    Write a function to check whether the given number is perfect or not.\n    '''\n    for i in range(start, end + 1):\n        if n % i == 0:\n            return True\n    return False\n    \ndef is_perfect_seq_7(n, start, end):\n    '''\n    Write a function to check whether the given number is perfect or not.\n    '''\n    for i in range(start, end + 1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_perfect_seq_8(n, start, end):\n    '''\n    Write a function to check whether the given number is perfect or not.\n    '''\n    for i in range(start, end + 1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_perfect_seq_9(n, start, end):\n    '''\n    Write a function to check whether the given number is perfect or not.\n    '''\n    for i in range(start, end + 1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_perfect_seq_10(n, start, end):\n    '''\n    Write a function to check whether the given numbe"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(2, n-2):\n        if n%i == 0 and n/i!= i:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    str_n = str(n)\n    if len(str_n) > 2:\n        for i in range(len(str_n) - 1):\n            if int(str_n[i]) > int(str_n[i+1]):\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1:\n        return False\n    else:\n        return n % 2 == 0\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    count = 0\n    for i in range(len(str(n))):\n        if int(str(n)[i]) % int(str(n)[i+1]) == 0:\n            count += 1\n    if count == len(str(n)) - 1:\n        return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n = str(n)\n    return n == n[::-1]\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def compute_diff(s):\n        count = 0\n        for i in range(1, len(s)):\n            if s[i] > s[i-1]:\n                count += 1\n            elif s[i] < s[i-1]:\n                count -= 1\n        return count\n    s = str(n)\n    return compute_diff(s) == 0\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    N = len(n)\n    #print (N)\n    for i in range(1, N):\n        #print(i)\n        if abs(int(n[i]) - int(n[i-1])) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n > 2:\n        if n % 2 == 0:\n            return False\n        else:\n            for i in xrange(3, n/2+1, 2):\n                if n % i == 0:\n                    return False\n            return True\n    return False\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1/power(a,-b)\n    elif b == 1:\n        return a\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b < 0:\n        return 1/power(a,-b)\n    if b % 2 == 0:\n        return power(a*a,b//2)\n    else:\n        return power(a*a,b//2) * a\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    # if b is 0, return 1\n    if b == 0:\n        return 1\n    # if b is negative, raise to the power, then reverse the result\n    elif b < 0:\n        return 1/power(a,abs(b))\n    # else, recursively compute the power result\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b%2 == 0:\n        return power(a,b//2)**2\n    else:\n        return a*power(a,b//2)*power(a,b//2)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    \n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1/power(a,-b)\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    import math\n    return math.pow(a,b)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b%2 == 0:\n        return power(a*a,b/2)\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b == 2:\n        return a*a\n    return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b % 2 == 0:\n        return (power(a, b/2) * power(a, b/2))\n    else:\n        return (power(a, (b-1)/2) * power(a, (b-1)/2) * a)\n    \n    "
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1/power(a,abs(b))\n    elif b%2 == 0:\n        return power(a*a,b/2)\n    else:\n        return a * power(a,b-1)\n    \n    \ndef first_n_fibonacci(n):\n    '''\n    Write a function to compute the first n numbers of the Fibonacci sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return first_n_fibonacci(n-1) + first_n_fibonacci(n-2)\n        \ndef pascal_triangle(n):\n    '''\n    Write a function that takes a positive integer as input and returns the nth row of the Pascal's Triangle.\n    '''\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1,1]\n    else:\n        last_row = pascal_triangle(n-1)\n        new_row = []\n        for i in range(len(last_row)-1):\n            new_row.append(last_row[i] + last_row[i+1])\n        new_row.append(1)\n        return new_row\n        \ndef str_to_int(s):\n    '''\n    Write a function to convert a string to an integer.\n    '''\n    return int(s)\n    \ndef is_prime(n):\n    '''\n    Write a function that determines if a number is prime.\n    '''\n    if n <= 3:\n        return True\n    elif n % 2 == 0 and n!= 2:\n        return False\n    else:\n        for i in range(3,n,2):\n            if n%i == 0:\n                return False\n        return True\n        \ndef factorial(n):\n    '''\n    Write a function that computes the factorial of a number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n        \ndef sum_of_digit_squares(n):\n    '''\n    Write a function that computes the sum of the digit squares of a number.\n    '''\n    return sum([int(x)**2 for x in str(n)])\n        \ndef sieve_of_eratosthenes(n):\n    '''\n    Write a function that returns a list of all the prime numbers up to n.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return [2] + sieve_of_eratosthenes(n-1)\n    \ndef has_duplicates(l):\n    '''\n    Write a function that returns True if there are any duplicates in the given list and False otherwise.\n    '''\n    if len(l) <= 1:\n        return False\n    elif len(l) == 2:\n        return l[0]!= l[1]\n    else:\n        for i in range(len(l)):\n            if l[i] == l[i+1]:\n                return True\n        return False\n        \ndef has_duplicates_dict(l):\n    '''\n    Write a function that returns True if there are any duplicates in the given list and False otherwise.\n    '''\n    if len(l) <= 1:\n        return False\n    elif len(l) == 2:\n        return l[0]!= l[1]\n    else:\n        hash_table = {}\n        for i in l:\n            if i in hash_table:\n                return True\n            hash_table[i] = True\n        return False\n        \ndef is_palindrome(s):\n    '''\n    Write a function that returns True if the given string is a palindrome and False otherwise.\n    '''\n    if len(s) <= 1:\n        return True\n    elif s[0]!= s[-1]:\n        return False\n    else:\n        return is_palindrome(s[1:-1])\n    \ndef count_palindromes(s):\n    '''\n    Write a function that returns the number of palindromes in a string.\n    '''\n    if len(s) == 0:\n        return 0\n    elif len(s) == 1:\n        return 1\n    else:\n        return count_palindromes(s[:-1]) + count_palindromes(s[1:])\n        \ndef is_anagram(s1,s2):\n    '''\n    Write a function that returns True if the two strings are anagrams of each other and False otherwise.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        hash_table = {}\n        for c in s1:\n            if c in hash_table:\n                hash_table[c] += 1\n            else:\n                hash_table[c] = 1\n        for c in s2:\n            if c in hash_table:\n                hash_table[c] -= 1\n            else:\n                hash_table[c] = 1\n        for v in hash_table.values():\n            if v!= 0:\n                return False\n        return True\n        \ndef is_anagram_dict(s1,s2):\n    '''\n    Write a function that returns True if the two strings are anagrams of each other and False otherwise.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        hash_table = {}\n        for c in s1:\n            if c in hash_table:\n                hash_table[c] += 1\n            else:\n                hash_table[c] = 1\n        for c in s2:\n            if c in hash_table:\n                hash_table[c] -= 1\n            else:\n                hash_table[c] = 1\n        for v in hash_table.values():\n            if v!= 0:\n                return False\n        return True\n        \ndef is_anagram_list(s1,s2):\n    '''\n    Write a function that returns True if the two strings are anagrams of each other and False otherwise.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        s1 = [x for x in s1]\n        s2 = [x for x in s2]\n        s1.sort()\n        s2.sort()\n        return s1 == s2\n        \ndef is_anagram_sort(s1,s2):\n    '''\n    Write a function that returns True if the two strings are anagrams of each other and False otherwise.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        s1 = [x for x in s1]\n        s2 = [x for x in s2]\n        s1.sort()\n        s2.sort()\n        for i in range(len(s1)):\n            if s1[i]!= s2[i]:\n                return False\n        return True\n        \ndef is_anagram_hash(s1,s2):\n    '''\n    Write a function that returns True if the two strings are anagrams of each other and False otherwise.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        hash_table = {}\n        for c in s1:\n            if c in hash_table:\n                hash_table[c] += 1\n            else:\n                hash_table[c] = 1\n        for c in s2:\n            if c in hash_table:\n                hash_table[c] -= 1\n            else:\n                hash_table[c] = 1\n        for v in hash_table.values():\n            if v!= 0:\n                return False\n        return True\n        \ndef is_anagram_zip(s1,s2):\n    '''\n    Write a function that returns True if the two strings are anagrams of each other and False otherwise.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        zip_list = zip(s1,s2)\n        zip_list.sort()\n        s1,s2 = zip(*zip"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_list = min(test_list, key = itemgetter(1))\n    return min_list[0]\n    \n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    first_tuple = min(test_list, key=itemgetter(1))\n    return first_tuple[0]\n    "
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # test_list = [(1, 2), (2, 3), (5, 4), (2, 4), (1, 7), (5, 6), (4, 1)]\n    # print(index_minimum(test_list))\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Your code here\n    return min(test_list, key=itemgetter(1))[0]\ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    # Your code here\n    return max(test_list, key=itemgetter(1))[0]\ndef find_all(test_list, value):\n    '''\n    Write a function that returns all the indices of a given value in a list.\n    '''\n    # Your code here\n    return [i for i, j in enumerate(test_list) if j == value]\ndef find_all_indexes(test_list, value):\n    '''\n    Write a function that returns all the indices of a given value in a list.\n    '''\n    # Your code here\n    return [i for i, j in enumerate(test_list) if j == value]\ndef find_all_values(test_list, value):\n    '''\n    Write a function that returns all the values of a given value in a list.\n    '''\n    # Your code here\n    return [j for i, j in enumerate(test_list) if j == value]\ndef find_all_indexes_of_regex(test_list, regex):\n    '''\n    Write a function that returns all the indices of a given value in a list.\n    '''\n    # Your code here\n    return [i for i, j in enumerate(test_list) if regex.search(j)]\ndef find_all_values_of_regex(test_list, regex):\n    '''\n    Write a function that returns all the values of a given value in a list.\n    '''\n    # Your code here\n    return [j for i, j in enumerate(test_list) if regex.search(j)]\ndef find_all_indexes_of_regex(test_list, regex):\n    '''\n    Write a function that returns all the indices of a given value in a list.\n    '''\n    # Your code here\n    return [i for i, j in enumerate(test_list) if regex.search(j)]\ndef find_all_values_of_regex(test_list, regex):\n    '''\n    Write a function that returns all the values of a given value in a list.\n    '''\n    # Your code here\n    return [j for i, j in enumerate(test_list) if regex.search(j)]\ndef find_all_occurrences(test_list, value):\n    '''\n    Write a function that returns all the values of a given value in a list.\n    '''\n    # Your code here\n    return [j for i, j in enumerate(test_list) if j == value]\ndef find_all_occurrences_of_regex(test_list, regex):\n    '''\n    Write a function that returns all the values of a given value in a list.\n    '''\n    # Your code here\n    return [j for i, j in enumerate(test_list) if regex.search(j)]\ndef find_all_occurrences_of_regex(test_list, regex):\n    '''\n    Write a function that returns all the values of a given value in a list.\n    '''\n    # Your code here\n    return [j for i, j in enumerate(test_list) if regex.search(j)]\ndef find_all_occurrences_of_regex(test_list, regex):\n    '''\n    Write a function that returns all the values of a given value in a list.\n    '''\n    # Your code here\n    return [j for i, j in enumerate(test_list) if regex.search(j)]\ndef find_all_occurrences_of_regex(test_list, regex):\n    '''\n    Write a function that returns all the values of a given value in a list.\n    '''\n    # Your code here\n    return [j for i, j in enumerate(test_list) if regex.search(j)]\ndef find_all_occurrences_of_regex(test_list, regex):\n    '''\n    Write a function that returns all the values of a given value in a list.\n    '''\n    # Your code here\n    return [j for i, j in enumerate(test_list) if regex.search(j)]\ndef find_all_occurrences_of_regex(test_list, regex):\n    '''\n    Write a function that returns all the values of a given value in a list.\n    '''\n    # Your code here\n    return [j for i, j in enumerate(test_list) if regex.search(j)]\ndef find_all_occurrences_of_regex(test_list, regex):\n    '''\n    Write a function that returns all the values of a given value in a list.\n    '''\n    # Your code here\n    return [j for i, j in enumerate(test_list) if regex.search(j)]\ndef find_all_occurrences_of_regex(test_list, regex):\n    '''\n    Write a function that returns all the values of a given value in a list.\n    '''\n    # Your code here\n    return [j for i, j in enumerate(test_list) if regex.search(j)]\ndef find_all_occurrences_of_regex(test_list, regex):\n    '''\n    Write a function that returns all the values of a given value in a list.\n    '''\n    # Your code here\n    return [j for i, j in enumerate(test_list) if regex.search(j)]\ndef find_all_occurrences_of_regex(test_list, regex):\n    '''\n    Write a function that returns all the values of a given value in a list.\n    '''\n    # Your code here\n    return [j for i, j in enumerate(test_list) if regex.search(j)]\ndef find_all_occurrences_of_regex(test_list, regex):\n    '''\n    Write a function that returns all the values of a given value in a list.\n    '''\n    # Your code here\n    return [j for i, j in enumerate(test_list) if regex.search(j)]\ndef find_all_occurrences_of_regex(test_list, regex):\n    '''\n    Write a function that returns all the values of a given value in a list.\n    '''\n    # Your code here\n    return [j for i, j in enumerate(test_list) if regex.search(j)]\ndef find_all_occurrences_of_regex(test_list, regex):\n    '''\n    Write a function that returns all the values of a given value in a list.\n    '''\n    # Your code here\n    return [j for i, j in enumerate(test_list) if regex.search(j)]\ndef find_all_occurrences_of_regex(test_list, regex):\n    '''\n    Write a function that returns all the values of a given value in a list.\n    '''\n    # Your code here\n    return [j for i, j in enumerate(test_list) if regex.search(j)]\ndef find_all_occurrences_of_regex(test_list, regex):\n    '''\n    Write a function that returns all the values of a given value in a list.\n    '''\n    # Your code here\n    return [j for i, j in enumerate(test_list) if regex.search(j)]\ndef find_all_occurrences_of_regex(test_list, regex):\n    '''\n    Write a function that returns all the values of a given value in a list.\n    '''\n    # Your code here\n    return [j for i, j in enumerate(test_list) if regex.search(j)]\ndef find_all_occurrences_of_regex(test_list, regex):\n    '''\n    Write a function that returns all the values of a given value in a list.\n    '''\n    # Your code here\n    return [j for i, j in enumerate(test_list) if regex.search(j)]\ndef find_all_occurrences_of_regex(test"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list,key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_tuple = min(test_list, key = itemgetter(1))\n    return min_tuple[0]\n    \ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    max_tuple = max(test_list, key = itemgetter(1))\n    return max_tuple[0]\n    \ndef index_first_matches(lst, value):\n    '''\n    Given a list of tuples and a value, write a function that returns the index of the first tuple that contains the value as its first element.\n    '''\n    return next((idx for idx, x in enumerate(lst) if x[0] == value), None)\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    l = list(test_list)\n    l.sort(key=itemgetter(1))\n    return l[0][0]\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    mini=len(lst)\n    for x in lst:\n        if len(x)<mini:\n            mini=len(x)\n    return mini\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for item in lst:\n        if len(item) < min_length:\n            min_length = len(item)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    import copy\n    length = 1000\n    for i in range(len(lst)):\n        if(len(lst[i]) < length):\n            length = len(lst[i])\n    return length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    Min = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < Min:\n            Min = len(lst[i])\n    return Min\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for l in lst:\n        if len(l) < min_length:\n            min_length = len(l)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        min_length = 0\n        for l in lst:\n            if len(l) < min_length:\n                min_length = len(l)\n        return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_list = None\n    for l in lst:\n        if min_list == None:\n            min_list = l\n        elif len(min_list) > len(l):\n            min_list = l\n    return len(min_list)\n    \nlst = [[1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16]]\nprint(Find_Min_Length(lst))\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    min = 0\n    for i in range(len(lst)):\n        if len(lst[i]) < min:\n            min = len(lst[i])\n    return min\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    l = len(lst)\n    m = lst[0]\n    for i in range(1, l):\n        if len(lst[i]) < len(m):\n            m = lst[i]\n    return len(m)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    assert type(n) == int and n > 0\n    div = 1\n    for i in range(2, n):\n        if n % i == 0:\n            div += 1\n    return div\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors = divisors + 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = [1]\n    for x in range(2, int(math.sqrt(n)) + 1):\n        if n % x == 0:\n            divisors.extend([x, n // x])\n    divisors = set(divisors)\n    return len(divisors)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return divisor(n - 1) + divisor(n - 2) + 1\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n==1:\n        return 1\n    return sum([i for i in range(1, n//2 + 1) if n % i == 0]) + 1\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    import math\n    div = set()\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div.add(i)\n            div.add(n/i)\n    return sum(div)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    l = []\n    for i in range(1, int(n**.5)+1):\n        if n%i == 0:\n            if n/i == i:\n                l.append(i)\n            else:\n                l.append(i)\n                l.append(n/i)\n    return len(l)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    total_divisors = 1\n    divisor_list = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisor_list.append(i)\n            if i!= 1:\n                divisor_list.append(int(n / i))\n    divisor_list.sort()\n    for i in divisor_list:\n        total_divisors *= i\n    return total_divisors\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict1 = {}\n    for x in list1:\n        if x in dict1:\n            dict1[x] += 1\n        else:\n            dict1[x] = 1\n    return dict1\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for el in list1:\n        if el in freq_dict:\n            freq_dict[el] += 1\n        else:\n            freq_dict[el] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Frequency count of each element in list\n    freq = {}\n    for item in list1:\n        freq[item] = freq.get(item, 0) + 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for item in list1:\n        if item not in d:\n            d[item] = 1\n        else:\n            d[item] += 1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for item in list1:\n        if item not in d:\n            d[item] = 1\n        else:\n            d[item] = d[item] + 1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    return {element: list1.count(element) for element in list1}\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    l = []\n    for x in list1:\n        l.extend(x)\n    d = {}\n    for x in l:\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    #Define a function\n    def frequency_dict(list1):\n        '''\n        Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n        '''\n        #Initialise an empty dictionary\n        empty_dict = {}\n        #Loop through the list1, which is a flattened list of lists\n        for i in list1:\n            #Add i to the empty dictionary\n            empty_dict[i] = empty_dict.get(i, 0) + 1\n        return empty_dict\n    #Call the function and return the output\n    return frequency_dict(list1)\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for item in list1:\n        if item not in d:\n            d[item] = 1\n        else:\n            d[item] += 1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for item in list1:\n        if item in d:\n            d[item] += 1\n        else:\n            d[item] = 1\n    return d\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for n in numbers:\n        product *= n\n    return product/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    num = 1\n    for i in numbers:\n        num = num * i\n    return num\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda x, y: x * y, numbers) / len(numbers)\n    \nprint multiply_num([1, 2, 3, 4, 5])\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    length = len(numbers)\n    result = 1\n    for i in numbers:\n        result = result * i / length\n    print(result)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda x, y: x * y, numbers) / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    num = 1\n    for i in numbers:\n        num *= i\n    return num / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiplier = 1\n    for num in numbers:\n        multiplier *= num\n    return multiplier\n    \nprint multiply_num([2,3,4])\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for number in numbers:\n        product *= number\n    return product / len(numbers)\n    \ndef word_count(sentence):\n    '''\n    Write a function to count the number of words in a sentence.\n    '''\n    # if the sentence is empty return 0\n    if not sentence:\n        return 0\n    # split the sentence by words\n    words = sentence.split()\n    return len(words)\n    \ndef palindrome(sentence):\n    '''\n    Write a function that returns True if the string is a palindrome, False otherwise.\n    '''\n    if not sentence:\n        return True\n    for i in range(0, len(sentence)):\n        # if the sentence is a palindrome, break the loop and return True\n        if sentence[i] == sentence[len(sentence)-1-i]:\n            return True\n    return False\n    \ndef is_pangram(sentence):\n    '''\n    Write a function that returns True if the sentence is a pangram, False otherwise.\n    A pangram is a sentence where every letter of the alphabet is used at least once.\n    '''\n    if not sentence:\n        return True\n    # make a list of the alphabet in lowercase\n    alphabet = list(string.lowercase)\n    # check if all the letters in the sentence are in the alphabet list\n    for letter in sentence:\n        if letter not in alphabet:\n            return False\n    return True\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    bin_num = ''\n    if n == 0:\n        bin_num = '0'\n    else:\n        while n:\n            if n%2:\n                bin_num += '1'\n            else:\n                bin_num += '0'\n            n /= 2\n    return bin_num[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 2 + 10*decimal_to_binary(n//2)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # n = int(n)\n    res = []\n    while n > 0:\n        res.append(n % 2)\n        n = n // 2\n    return ''.join(str(e) for e in res[::-1])\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n < 2: \n        return str(n)\n    elif n%2 == 0:\n        return decimal_to_binary(n/2) + '0'\n    else:\n        return decimal_to_binary(n/2) + '1'\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # if n < 0:\n    #     n = n * -1\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # converting to int \n    i = int(n) \n    # check for sign bit \n    if i < 0: \n        isNegative = True\n        i = abs(i) \n    else: \n        isNegative = False\n    result = []\n    # computing the binary value \n    while i > 0: \n        result.append(i%2)\n        i = int(i/2)\n    # reversing the list for the output \n    result = result[::-1]\n    if isNegative:\n        result.insert(0, '-')\n    return ''.join(str(e) for e in result)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return str(bin(n).replace(\"0b\",\"\"))\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return decimal_to_binary(n // 2) + \"0\"\n    else:\n        return decimal_to_binary(n // 2) + \"1\"\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n > 1:\n        decimal_to_binary(n//2)\n    print(n % 2, end='')\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num += 1\n    if num > 999999999999999999:\n        return 0\n    temp = num\n    while not is_palindrome(temp):\n        temp += 1\n    return temp\ndef is_palindrome(num):\n    '''\n    A palindrome is a number that reads the same forward as it does backwards. For example, the number 5, reads as '5'. \n    The number 100 is not a palindrome as 100 is not read the same forward as 100. The number 91 is a palindrome as 91 is read the same forward as 91. \n    The number 0 is not a palindrome as 0 is not read the same forward as 0. \n    '''\n    temp = num\n    reverse = 0\n    while temp:\n        reverse = reverse * 10 + temp % 10\n        temp /= 10\n    return num == reverse\ndef test_next_smallest_palindrome():\n    assert next_smallest_palindrome(321) == 322\n    assert next_smallest_palindrome(123) == 122\n    assert next_smallest_palindrome(123) == 122\n    assert next_smallest_palindrome(11) == 10\n    assert next_smallest_palindrome(11) == 10\n    assert next_smallest_palindrome(123456789) == 123456789\n    assert next_smallest_palindrome(0) == 0\n    assert next_smallest_palindrome(1) == 0\n    assert next_smallest_palindrome(99999) == 99998\ndef rec_count_recursive(num):\n    '''\n    Write a function called rec_count_recursive(num) which takes a number as input parameter and returns a list of the digits of the number as a list. \n    Note that if the input number is negative, the function should return a list of the digits of the absolute value of the number as a list.\n    For example: rec_count_recursive(8975) will return [8,7,5,0,4] and rec_count_recursive(-2345) will return [-2,-3,-4,-5].\n    '''\n    if num == 0:\n        return [0]\n    if num == 1:\n        return [1]\n    if num % 10 == 0:\n        return [num/10] + rec_count_recursive(num/10)\n    else:\n        return [num%10] + rec_count_recursive(num/10)\ndef rec_count_iterative(num):\n    '''\n    Write a function called rec_count_iterative(num) which takes a number as input parameter and returns a list of the digits of the number as a list. \n    Note that if the input number is negative, the function should return a list of the digits of the absolute value of the number as a list.\n    For example: rec_count_iterative(8975) will return [8,7,5,0,4] and rec_count_iterative(-2345) will return [-2,-3,-4,-5].\n    '''\n    if num == 0:\n        return [0]\n    elif num == 1:\n        return [1]\n    else:\n        digit = num % 10\n        digit_list = []\n        digit_list.append(digit)\n        while num:\n            num /= 10\n            digit = num % 10\n            digit_list.append(digit)\n        return digit_list\ndef test_rec_count_iterative():\n    assert rec_count_iterative(8975) == [8,7,5,0,4]\n    assert rec_count_iterative(-2345) == [-2,-3,-4,-5]\n    assert rec_count_iterative(2345) == [2,3,4,5]\ndef rec_count_matrix(num):\n    '''\n    Write a function called rec_count_matrix(num) which takes a number as input parameter and returns a list of the digits of the number as a list. \n    Note that if the input number is negative, the function should return a list of the digits of the absolute value of the number as a list.\n    For example: rec_count_matrix(8975) will return [8,7,5,0,4] and rec_count_matrix(-2345) will return [-2,-3,-4,-5].\n    '''\n    if num == 0:\n        return [0]\n    elif num == 1:\n        return [1]\n    else:\n        if num % 10 == 0:\n            return [num/10] + rec_count_matrix(num/10)\n        else:\n            return [num%10] + rec_count_matrix(num/10)\ndef rec_count_iterative_matrix(num):\n    '''\n    Write a function called rec_count_matrix(num) which takes a number as input parameter and returns a list of the digits of the number as a list. \n    Note that if the input number is negative, the function should return a list of the digits of the absolute value of the number as a list.\n    For example: rec_count_iterative_matrix(8975) will return [8,7,5,0,4] and rec_count_iterative_matrix(-2345) will return [-2,-3,-4,-5].\n    '''\n    if num == 0:\n        return [0]\n    elif num == 1:\n        return [1]\n    else:\n        digit = num % 10\n        digit_list = []\n        digit_list.append(digit)\n        while num:\n            num /= 10\n            digit = num % 10\n            digit_list.append(digit)\n        return digit_list\ndef test_rec_count_iterative_matrix():\n    assert rec_count_iterative_matrix(8975) == [8,7,5,0,4]\n    assert rec_count_iterative_matrix(-2345) == [-2,-3,-4,-5]\n    assert rec_count_iterative_matrix(2345) == [2,3,4,5]\ndef rec_count_matrix_dictionary(num):\n    '''\n    Write a function called rec_count_matrix_dictionary(num) which takes a number as input parameter and returns a list of the digits of the number as a list. \n    Note that if the input number is negative, the function should return a list of the digits of the absolute value of the number as a list.\n    For example: rec_count_matrix_dictionary(8975) will return {8:2,7:1,5:2,0:1,4:1} and rec_count_matrix_dictionary(-2345) will return {-2:-3:-4:-5}.\n    '''\n    if num == 0:\n        return {0:1}\n    elif num == 1:\n        return {1:1}\n    else:\n        if num % 10 == 0:\n            return {num/10:1} + rec_count_matrix_dictionary(num/10)\n        else:\n            return {num%10:1} + rec_count_matrix_dictionary(num/10)\ndef rec_count_iterative_matrix_dictionary(num):\n    '''\n    Write a function called rec_count_matrix_dictionary(num) which takes a number as input parameter and returns a list of the digits of the number as a list. \n    Note that if the input number is negative, the function should return a list of the digits of the absolute value of the number as a list.\n    For example: rec_count_iterative_matrix_dictionary(8975) will return {8:2,7:1,5:2,0:1,4:1} and rec_count_iterative_matrix_dictionary(-2345) will return {-2:-3:-4:-5}.\n    '''\n    if num == 0:\n        return {0:1}\n    elif num == 1:\n        return {1:1}\n    else:\n        digit = num % 10\n        digit_list = []\n        digit_list.append(digit)\n        while num:\n            num /= 10\n            digit = num % 10\n            digit_list.append(digit)\n        return {digit:1} + rec_count_iterative_matrix_dictionary(num)\ndef test_rec_count_iterative_matrix_dictionary():\n    assert rec_count_iterativ"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)[::-1]\n    num = int(num)\n    while True:\n        if num < 9:\n            return num * 10 + 1\n        num = int(num) * 10 + 1\n        num = str(num)[::-1]\n        num = int(num)\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #a = str(num)\n    #n = len(a)\n    #for i in range(n-1,-1,-1):\n    #    if int(a[i]) == 9:\n    #        a = a[:i] + \"1\" + a[i+1:]\n    #    else:\n    #        break\n    #return int(a)\n    s = str(num)\n    n = len(s)\n    for i in range(n-1,-1,-1):\n        if s[i]!= \"9\":\n            break\n    if i == 0:\n        return int(s + \"1\")\n    for j in range(i-1,-1,-1):\n        if s[j] == \"9\":\n            s = s[:j] + \"0\" + s[j+1:]\n            break\n    return int(s + \"1\")\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    str_num = str(num)\n    str_num = str_num[::-1]\n    if str_num[0] == '9':\n        str_num = '0'+str_num[1:]\n        str_num = str_num[::-1]\n        str_num = str_num.replace('0','9')\n        str_num = str_num[::-1]\n        str_num = str_num.replace('0','')\n    else:\n        str_num = str_num.replace('0','')\n    return int(str_num)\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    rev_num = ''\n    for i in range(len(num) - 1, -1, -1):\n        rev_num += num[i]\n    if int(rev_num) > int(num):\n        return int(num)\n    else:\n        return int(rev_num)\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = num + 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    num_list = [int(i) for i in num]\n    length = len(num)\n    i = 0\n    while i < length:\n        if num_list[i] % 2 == 0:\n            num_list[i] += 1\n            break\n        else:\n            i += 1\n    while i < length:\n        if num_list[i]!= 9:\n            num_list[i] = 0\n        else:\n            num_list[i] = 1\n            break\n        i += 1\n    j = length - 1\n    while j > -1:\n        if num_list[j] == 0:\n            num_list[j] = 8\n        j -= 1\n    num = ''\n    for ele in num_list:\n        num += str(ele)\n    return int(num)\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 1:\n        return 9\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num+=1\n    while not is_palindrome(num):\n        num+=1\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = int(num)\n    if num < 10:\n        return int(str(num) + str(num)[::-1])\n    else:\n        while num%10 == 0:\n            num /= 10\n        rem = (num/10) * 10 + num % 10\n        if rem == num:\n            return int(str(num) + str(num)[::-1])\n        else:\n            return int(str(num) + str(rem)[::-1])\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    first = 0\n    last = len(arr) - 1\n    while True:\n        index = int((first + last) / 2)\n        if first == last:\n            return arr[first]\n        elif k == index + 1:\n            return arr[index]\n        elif k < index + 1:\n            last = index\n        else:\n            first = index\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return None\n    \n    low = 0\n    high = len(arr) - 1\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    first = 0\n    last = len(arr)-1\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    k -= 1\n    for i in range(len(arr)):\n        if i + 1 == k:\n            return arr[i]\n        elif i + 1 > k:\n            return arr[k]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if arr == []:\n        return None\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    \n    # split the string by dash\n    words = word.split('-')\n    # join the string by space\n    output =''.join(words)\n    # return the string\n    return output\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word == '':\n        return ''\n    elif word.isupper():\n        return word\n    else:\n        return word[0].upper() + word[1:].lower()\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(x.title() for x in words[1:])\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case_string = ''\n    last_word_start_index = 0\n    for index in range(len(word)):\n        if word[index].isupper():\n            camel_case_string += word[index].lower()\n        elif word[index] == '_':\n            camel_case_string += word[index].lower()\n            last_word_start_index = index+1\n        else:\n            for index_b in range(last_word_start_index,index):\n                camel_case_string += word[index_b]\n            camel_case_string += word[index].upper()\n            last_word_start_index = index+1\n    for index_b in range(last_word_start_index,len(word)):\n        camel_case_string += word[index_b]\n    return camel_case_string\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if not word:\n        return ''\n    if word[0].isupper():\n        return word\n    return word[0].lower() + word[1:].replace('_','')\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].upper() + word[1:].lower() if word else '' for word in word.split('_')])\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word_list = word.split('_')\n    for i in range(1, len(word_list)):\n        word_list[i] = word_list[i].title()\n    return ''.join(word_list)\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_')[1:])\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return \"\".join([word.capitalize() for word in words])\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    temp = word.split('_')\n    return temp[0].lower() + ''.join(x.title() for x in temp[1:])\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    res = 0\n    # Your Code\n    res = factorial(n) // (factorial(m) * factorial(n - m))\n    return res\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return 0\n    \n    return n + eulerian_num(n, m - 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    result = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i * j == n + m:\n                result += 1\n    return result\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    even = 0\n    odd = 0\n    for i in range(n):\n        if i%2 == 0:\n            even += 1\n    for i in range(m):\n        if i%2 == 1:\n            odd += 1\n    return (even*odd)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m > n:\n        return n + m - 2 * eulerian_num(n, m - n)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0: \n        return n\n    if m == 1: \n        return n * (n - 1)\n    return (n * (n - 1) + eulerian_num(n, m - 1))\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 1\n    if m == 0:\n        return 1\n    return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return m\n    if m == 1:\n        return n\n    return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    p = [0] * n\n    count = 0\n    while True:\n        p[count % n] += 1\n        count += 1\n        if p[count % n] == m:\n            count += 1\n        if count == n * m:\n            break\n    return count\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # If either n or m is even, then Eulerian number is zero.\n    if n%2 == 0 or m%2 == 0:\n        return 0\n    \n    # Make n and m even by adding one to the odd number\n    if n%2 == 1:\n        n += 1\n    if m%2 == 1:\n        m += 1\n    \n    # Create a 2D array of zeroes.\n    a = [[0] * m for i in range(n)]\n    \n    # Fill the array\n    a[0][0] = 1\n    \n    # Fill the array row wise\n    for i in range(n):\n        a[i][0] = 1\n        a[i][-1] = 1\n    \n    # Fill the array column wise\n    for j in range(m):\n        a[0][j] = 1\n        a[-1][j] = 1\n    \n    # Fill the array diagonally\n    for i in range(n):\n        for j in range(m):\n            if i == j == 0 or i == j == n-1:\n                a[i][j] = 1\n            else:\n                a[i][j] = 0\n    \n    # Count the number of ones in the array\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                count += 1\n    \n    return count"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for word_list in input_list:\n        result.append(sorted(word_list))\n    return result\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    '''\n    Do the same as above in the way of the exercise above.\n    \n    >>> a = [[\"F\", \"C\", \"K\", \"A\"], [\"G\", \"B\", \"D\", \"E\"], [\"I\", \"H\", \"M\", \"N\", \"O\"], [\"P\", \"Q\", \"R\", \"S\"]]\n    >>> sort_sublists(a)\n    >>> a\n    [['A', 'C', 'F', 'K', 'I', 'N', 'O', 'P', 'Q', 'S'], ['D', 'E', 'G', 'H', 'M', 'R', 'S', 'T', 'V', 'X'], ['B', 'J', 'Q', 'T', 'W', 'Z', 'Y']]\n    '''\n    \n    '''\n    Create a new list (sublist_sorted) and loop through the list of lists.\n    \n    Loop through the list of lists and create a new list (sublist_sorted)\n    Iterate through the list of lists again.\n    Set the current_list to the list that is being iterated over.\n    Create a new variable (sublist_sorted) to store the sorted list.\n    Iterate through the current list to append all items into the new sublist.\n    \n    After the loop, append the sublist_sorted to the final list.\n    '''\n    \n    \n    sublist_sorted = []\n    \n    for current_list in input_list:\n        sublist_sorted.append(sorted(current_list))\n    \n    return sublist_sorted\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_each_sublist(sublist):\n        sublist.sort()\n        return sublist\n    return [sort_each_sublist(sublist) for sublist in input_list]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    input_list_sorted = []\n    for i in range(len(input_list)):\n        input_list_sorted.append(sorted(input_list[i]))\n    return input_list_sorted\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Check that input is not None\n    if input_list == None:\n        return None\n    # Check if input is a list\n    if not isinstance(input_list, list):\n        return None\n    # Check that each sublist is a list\n    for each_list in input_list:\n        if not isinstance(each_list, list):\n            return None\n    # Check if each sublist is a string\n    for each_list in input_list:\n        if not isinstance(each_list, str):\n            return None\n    # Initialize variables\n    len_sublists = len(input_list)\n    sorted_sublists = []\n    # Sort each sublist\n    for each_list in input_list:\n        sorted_sublists.append(sorted(each_list))\n    return sorted_sublists\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return_list = []\n    for i in input_list:\n        i.sort()\n        return_list.append(i)\n    return return_list\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Define new output list\n    output_list = []\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Write a function that takes as input a list of lists and sorts each list of\n    # strings inside the list.\n    # For each list, we sort the strings inside it, then sort each string in the\n    # list of strings.\n    \n    # Base case:\n    if len(input_list) == 1:\n        # If the list is a single string, we can just sort it.\n        return sorted(input_list[0])\n    \n    # Recursive case:\n    else:\n        # Sort the first string in the list of strings.\n        first_string = sort_sublists(input_list[0])\n        # Take the first n - 1 strings in the list of strings and sort them.\n        n_minus_1_strings = sort_sublists(input_list[1:])\n        # Take the last string in the list of strings and sort it.\n        last_string = sort_sublists(input_list[-1])\n        # Sort the strings together.\n        sorted_strings = [first_string] + n_minus_1_strings + [last_string]\n        # Sort the strings.\n        return sorted(sorted_strings)\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i==True:\n            count+=1\n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # lst = [True, True, False]\n    return sum(x for x in lst if x)\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for x in lst:\n        if x:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n    \n    \ndef isPalindrome(s):   \n    '''\n    Write a python function to check whether the given string is palindrome.\n    '''\n    \n    # using a loop to iterate over the string\n    # and comparing the characters one by one\n    # when the iteration finishes check if the string is equal\n    # to the reverse of the string\n    \n    for i in range(len(s)//2):\n        if s[i]!= s[-1-i]:\n            return False\n    return True\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i:\n            count=count+1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    lst_bool = []\n    for element in lst:\n        if element:\n            lst_bool.append(True)\n        else:\n            lst_bool.append(False)\n    return lst_bool.count(True)\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count +=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for x in lst:\n        if x:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(bool(x) for x in lst)\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # python3 code here\n    new_list = []\n    for each_tup in test_tup:\n        new_list.append(each_tup + test_list)\n    return new_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the lists\n    for l in test_list:\n        if l not in test_tup:\n            test_tup.append(l)\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if type(test_list) == tuple:\n        return test_list + test_tup\n    else:\n        return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Empty list\n    if not test_list:\n        return test_tup\n    # tuples[0] is already a list\n    # Unpack and add to list\n    else:\n        return test_tup + test_list[0]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + list(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_tup:\n        test_list.append(i)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 == []:\n        return num2\n    if num2 == []:\n        return num1\n    if num3 == []:\n        return num1+num2\n    for i in range(len(num1)):\n        if num1[i] > num2[0]:\n            num2.insert(0,num1[i])\n            num1.remove(num1[i])\n    for j in range(len(num2)):\n        if num2[j] > num3[0]:\n            num3.insert(0,num2[j])\n            num2.remove(num2[j])\n    return num1+num2+num3\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # heappush will push the next element, heappop will pop the smallest element\n    res = []\n    heapq.heappush(res, num1)\n    heapq.heappush(res, num2)\n    heapq.heappush(res, num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Initialize merged list\n    merged_list = []\n    # Check for empty list\n    if num1 == [] and num2 == [] and num3 == []:\n        return merged_list\n    # Merge first list and second list\n    if num1!= []:\n        if num2!= []:\n            merged_list.extend(num1)\n            if num3!= []:\n                merged_list.extend(num2)\n                merged_list.extend(num3)\n            else:\n                merged_list.extend(num2)\n        else:\n            if num3!= []:\n                merged_list.extend(num1)\n                merged_list.extend(num3)\n            else:\n                merged_list.extend(num1)\n    else:\n        if num2!= []:\n            if num3!= []:\n                merged_list.extend(num2)\n                merged_list.extend(num3)\n            else:\n                merged_list.extend(num2)\n        else:\n            if num3!= []:\n                merged_list.extend(num3)\n            else:\n                return []\n    # Populate merged list\n    return merged_list\ndef find_biggest_diff(num1, num2):\n    '''\n    Write a function to find the biggest difference between two numbers in a list of integers.\n    '''\n    # Initialize difference\n    diff = 0\n    # Check for empty lists\n    if num1 == [] or num2 == []:\n        return diff\n    # Find difference\n    if num1 > num2:\n        diff = num1 - num2\n    else:\n        diff = num2 - num1\n    # Return difference\n    return diff\ndef find_biggest_diff_heapq(num1, num2):\n    '''\n    Write a function to find the biggest difference between two numbers in a list of integers using the heap queue algorithm.\n    '''\n    # Initialize heap\n    heap = []\n    # Check for empty lists\n    if num1 == [] or num2 == []:\n        return\n    # Add num1 to heap\n    heapq.heappush(heap, num1)\n    # Check for num1\n    if num1 == heap[0]:\n        return heap[0]\n    # Add num2 to heap\n    heapq.heappush(heap, num2)\n    # Check for num2\n    if num2 == heap[0]:\n        return heap[0]\n    # Pop from heap\n    while True:\n        if heap[0] == heap[1]:\n            return 0\n        else:\n            return heapq.heappop(heap)\ndef find_duplicates(arr):\n    '''\n    Write a function to find all the duplicates in an array of integers.\n    '''\n    # Initialize hash table\n    hash_table = {}\n    # Iterate over array\n    for item in arr:\n        # Check for duplicate\n        if item in hash_table:\n            hash_table[item] += 1\n        else:\n            hash_table[item] = 1\n    # Initialize duplicates\n    duplicates = []\n    # Iterate over hash table\n    for key,value in hash_table.items():\n        # Check for duplicate\n        if value > 1:\n            duplicates.append(key)\n    # Return duplicates\n    return duplicates\ndef merge_k_sorted_list(arr, k):\n    '''\n    Write a function to merge k sorted lists into a single sorted list.\n    '''\n    # Initialize merged list\n    merged_list = []\n    # Check for empty lists\n    if arr == []:\n        return merged_list\n    # Populate merged list\n    for item in arr:\n        merged_list.extend(item)\n    # Merge into list\n    heapq.heapify(merged_list)\n    # Populate merged list\n    merged_list = [heapq.heappop() for i in range(k)]\n    # Merge into list\n    heapq.heapify(merged_list)\n    # Populate merged list\n    while len(merged_list) > 0:\n        heapq.heappush(merged_list, heapq.heappop(merged_list))\n    # Return merged list\n    return merged_list\ndef merge_sort_list(arr):\n    '''\n    Write a function to sort a list of numbers using the merge sort algorithm.\n    '''\n    # Check for empty lists\n    if arr == []:\n        return arr\n    # Sort list\n    return merge_sort(arr, 0, len(arr) - 1)\ndef merge_sort(arr, l, r):\n    # Check for empty lists\n    if l >= r:\n        return arr\n    # Split list\n    m = (l + r) // 2\n    left = merge_sort(arr, l, m)\n    right = merge_sort(arr, m + 1, r)\n    return merge(left, right)\ndef merge(left, right):\n    # Initialize merged list\n    merged_list = []\n    # Check for empty lists\n    if left == [] or right == []:\n        return merged_list\n    # Compare left and right list\n    i = 0\n    j = 0\n    while i < len(left) and j < len(right):\n        # Compare left list\n        if left[i] < right[j]:\n            merged_list.append(left[i])\n            i += 1\n        # Compare right list\n        elif left[i] > right[j]:\n            merged_list.append(right[j])\n            j += 1\n        else:\n            merged_list.append(left[i])\n            merged_list.append(right[j])\n            i += 1\n            j += 1\n    # Check for left list\n    while i < len(left):\n        merged_list.append(left[i])\n        i += 1\n    # Check for right list\n    while j < len(right):\n        merged_list.append(right[j])\n        j += 1\n    # Return merged list\n    return merged_list\ndef longest_consecutive_subsequence(arr):\n    '''\n    Write a function to find the length of the longest consecutive subsequence in a list of integers.\n    '''\n    # Initialize hash table\n    hash_table = {}\n    # Iterate over array\n    for item in arr:\n        # Check for key\n        if item in hash_table:\n            # Check for value\n            if hash_table[item] == 1:\n                hash_table[item] = 1\n            else:\n                hash_table[item] += 1\n        else:\n            hash_table[item] = 1\n    # Initialize longest\n    longest = 0\n    # Iterate over hash table\n    for key,value in hash_table.items():\n        # Check for longest\n        if value > longest:\n            longest = value\n    # Return longest\n    return longest\ndef longest_consecutive_subsequence_heapq(arr):\n    '''\n    Write a function to find the length of the longest consecutive subsequence in a list of integers using the heap queue algorithm.\n    '''\n    # Initialize heap\n    heap = []\n    # Check for empty list\n    if arr == []:\n        return\n    # Populate heap\n    for item in arr:\n        heapq.heappush(heap, item)\n    # Initialize longest\n    longest = 0\n    # Iterate over heap\n    while len(heap) > 1:\n        # Check for longest\n        if heap[0] + 1 == heap[1]:\n            longest += 1\n            heapq.heappop(heap)\n            heapq.heappop(heap)\n        else:\n            return longest\n    # Return longest\n    return longest\ndef longest_consecutive_subsequence_heapq_sorted(arr):\n    '''\n    Write a function to find the length of the longest consecutive subsequence in a list of integers using the heap queue algorithm.\n    '''\n    # Initialize heap\n    heap = []\n    # Check for empty list\n    if arr == []:\n        return\n    # Populate heap\n    for item in arr:\n        heapq.heappush(heap, item"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list1 = sorted(num1)\n    list2 = sorted(num2)\n    list3 = sorted(num3)\n    merged_list = []\n    while(len(list1)!=0 or len(list2)!=0 or len(list3)!=0):\n        if(len(list1)==0):\n            merged_list.append(list2.pop(0))\n        elif(len(list2)==0):\n            merged_list.append(list1.pop(0))\n        elif(len(list3)==0):\n            merged_list.append(list1.pop(0))\n        elif(list1[0]<=list2[0] and list1[0]<=list3[0]):\n            merged_list.append(list1.pop(0))\n        elif(list2[0]<=list1[0] and list2[0]<=list3[0]):\n            merged_list.append(list2.pop(0))\n        elif(list3[0]<=list1[0] and list3[0]<=list2[0]):\n            merged_list.append(list3.pop(0))\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    final_list = []\n    list1 = [num1,num2]\n    list2 = [num3]\n    \n    heapq.heapify(list1)\n    heapq.heapify(list2)\n    \n    while list1:\n        if list2:\n            small_1 = heapq.heappop(list1)\n            small_2 = heapq.heappop(list2)\n            if small_1 <= small_2:\n                final_list.append(small_1)\n                heapq.heappush(list1,small_2)\n                heapq.heappush(list2,small_1)\n            else:\n                final_list.append(small_2)\n                heapq.heappush(list1,small_1)\n                heapq.heappush(list2,small_2)\n        else:\n            final_list.append(heapq.heappop(list1))\n    \n    return final_list\n    \ndef count_rotations(str1,str2):\n    '''\n    Write a function to count the number of rotations in a string.\n    '''\n    \n    num_rotations = 0\n    \n    for i in range(len(str1)):\n        if str1[i:]+str1[:i] == str2:\n            num_rotations += 1\n    \n    return num_rotations\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    merged_num = []\n    while num1 and num2 and num3:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            merged_num.append(num1[0])\n            heapq.heappop(num1)\n        elif num2[0] < num3[0]:\n            merged_num.append(num2[0])\n            heapq.heappop(num2)\n        else:\n            merged_num.append(num3[0])\n            heapq.heappop(num3)\n    return merged_num\ndef insertion_sort(num):\n    '''\n    Write a function to sort a list in ascending order using insertion sort.\n    '''\n    for i in range(1,len(num)):\n        j = i-1\n        while j>=0 and num[j] > num[j+1]:\n            num[j],num[j+1] = num[j+1],num[j]\n            j = j-1\n    return num\ndef bubble_sort(num):\n    '''\n    Write a function to sort a list in ascending order using bubble sort.\n    '''\n    for i in range(0,len(num)-1):\n        for j in range(0,len(num)-1-i):\n            if num[j]>num[j+1]:\n                num[j],num[j+1] = num[j+1],num[j]\n    return num\ndef selection_sort(num):\n    '''\n    Write a function to sort a list in ascending order using selection sort.\n    '''\n    for i in range(0,len(num)-1):\n        min_val = num[i]\n        for j in range(i+1,len(num)):\n            if num[j]<min_val:\n                min_val = num[j]\n                index = j\n        num[i],num[index] = num[index],num[i]\n    return num\ndef shell_sort(num):\n    '''\n    Write a function to sort a list in ascending order using shell sort.\n    '''\n    gap = len(num)//2\n    while gap>0:\n        for i in range(gap,len(num)):\n            j = i\n            while j>=0:\n                if num[j]<num[j-gap]:\n                    num[j],num[j-gap] = num[j-gap],num[j]\n                j = j-gap\n        gap = gap//2\n    return num\ndef merge_sort(num):\n    '''\n    Write a function to sort a list in ascending order using merge sort.\n    '''\n    if len(num) <= 1:\n        return num\n    mid = len(num)//2\n    left_list = merge_sort(num[:mid])\n    right_list = merge_sort(num[mid:])\n    return merge_sorted_list(left_list,right_list,num)\ndef quick_sort(num):\n    '''\n    Write a function to sort a list in ascending order using quick sort.\n    '''\n    if len(num) <= 1:\n        return num\n    pivot = num[0]\n    left_list = [i for i in num[1:] if i<pivot]\n    right_list = [i for i in num[1:] if i>pivot]\n    return quick_sort(left_list) + [pivot] + quick_sort(right_list)\ndef count_sort(num):\n    '''\n    Write a function to sort a list in ascending order using count sort.\n    '''\n    count = [0 for i in range(max(num)+1)]\n    for i in num:\n        count[i] = count[i]+1\n    result = [0 for i in range(len(num))]\n    for i in range(len(num)):\n        result[count[num[i]]-1] = num[i]\n        count[num[i]] = count[num[i]] -1\n    return result\ndef bucket_sort(num):\n    '''\n    Write a function to sort a list in ascending order using bucket sort.\n    '''\n    max_num = max(num)\n    size = max_num//len(num) + 1\n    buckets = [[] for i in range(size)]\n    for i in range(len(num)):\n        j = num[i]//size\n        if j!= size:\n            buckets[j].append(num[i])\n        else:\n            buckets[j].append(num[i])\n            for k in range(j,size):\n                buckets[k].append(None)\n    for i in range(size):\n        for j in range(len(buckets[i])):\n            if buckets[i][j]!= None:\n                num[i] = buckets[i][j]\n                buckets[i][j] = None\n    return num\ndef heap_sort(num):\n    '''\n    Write a function to sort a list in ascending order using heap sort.\n    '''\n    heap = []\n    for i in num:\n        heapq.heappush(heap,i)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result\ndef test_merge_sort():\n    num1 = [1,2,3,4,5,6]\n    num2 = [3,4,5,6,7,8]\n    num3 = [1,6,8,9,0]\n    num4 = [2,5,7,11,12]\n    assert merge_sorted_list(num1,num2,num3) == [0,1,2,3,4,5,6,7,8,9]\n    assert merge_sorted_list(num2,num3,num4) == [0,1,2,3,4,5,6,7,8,9]\n    assert merge_sorted_list([1,3,5,7,9],[2,4,6,8,10],[2,3,5,7,8,9]) == [1,2,2,3,4,5,5,6,7,7,8,9,9]\ndef test_insertion_sort():\n    num = [3,4,2,6,7,5]\n    assert insertion_sort(num) == [2,3,4,5,6,7]\n    num = [5,4,3,2,6,7,8,1]\n    assert insertion_sort(num) == [1,2,3,4,5,6,7,8]\ndef test_bubble_sort():\n    num = [3,4,2,6,7,5]\n    assert bubble_sort(num) == [2,3,4,5,6,7]\n    num = [5,4,3,2,6,7,8,1]\n    assert bubble_sort(num) == [1,2,3,4,5,6,7,8]\ndef test_selection_sort():\n    num = [3,4,2,6,7,5]\n    assert selection_sort(num) == [2,3,4,5,6,7]\n    num = [5,4,3,2,6,7,8,1]\n    assert selection_sort(num) == [1,2,3,4,5,6,7,8]\ndef test_shell_sort():\n    num = [3,4,2,6,7,5]\n    assert shell_sort(num) == [2,3,4,5,6,7]\n    num = [5,4,3,2,6,7,8,1]\n    assert shell_sort(num) == [1,2,3,4,5,6,7,8]\ndef test_merge_sort():\n    num = [3,4,2,6,7,5]\n    assert merge_sort(num) == [2,3,4,5,6,7]\n    num = [5,4,3,2,6"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if not num1:\n        return num2\n    if not num2:\n        return num3\n    if not num3:\n        return num1\n    ret=[]\n    i=j=k=0\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<num2[j] and num1[i]<num3[k]:\n            ret.append(num1[i])\n            i+=1\n        elif num2[j]<num1[i] and num2[j]<num3[k]:\n            ret.append(num2[j])\n            j+=1\n        else:\n            ret.append(num3[k])\n            k+=1\n    while i<len(num1):\n        ret.append(num1[i])\n        i+=1\n    while j<len(num2):\n        ret.append(num2[j])\n        j+=1\n    while k<len(num3):\n        ret.append(num3[k])\n        k+=1\n    return ret\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    sorted_list = []\n    num1_index = 0\n    num2_index = 0\n    num3_index = 0\n    \n    while num1_index < len(num1) and num2_index < len(num2) and num3_index < len(num3):\n        if num1[num1_index] < num2[num2_index]:\n            if num1[num1_index] < num3[num3_index]:\n                sorted_list.append(num1[num1_index])\n                num1_index += 1\n            else:\n                sorted_list.append(num3[num3_index])\n                num3_index += 1\n        else:\n            if num2[num2_index] < num3[num3_index]:\n                sorted_list.append(num2[num2_index])\n                num2_index += 1\n            else:\n                sorted_list.append(num3[num3_index])\n                num3_index += 1\n    if num1_index == len(num1):\n        sorted_list.extend(num2[num2_index:])\n        sorted_list.extend(num3[num3_index:])\n    elif num2_index == len(num2):\n        sorted_list.extend(num1[num1_index:])\n        sorted_list.extend(num3[num3_index:])\n    elif num3_index == len(num3):\n        sorted_list.extend(num1[num1_index:])\n        sorted_list.extend(num2[num2_index:])\n    \n    return sorted_list\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    def merge_list(list1,list2,list3):\n        if list1 == []:\n            return list2 + list3\n        elif list2 == []:\n            return list1 + list3\n        elif list3 == []:\n            return list1 + list2\n        else:\n            if list1[0] < list2[0]:\n                return [list1[0]] + merge_list(list1[1:],list2,list3)\n            else:\n                return [list2[0]] + merge_list(list1,list2[1:],list3)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    #heapq.merge() returns a new sorted list from data in the given iterables.\n    merged_list = heapq.merge(num1, num2, num3)\n    return merged_list\n    \n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # s = '011101100101001'\n    # n = 2\n    def string_rotate(s,n):\n        new_string = ''\n        for i in range(n):\n            for j in range(len(s)):\n                new_string += s[len(s)-1-j]\n        return new_string\n    # print(string_rotate(s,n))\n    count = 0\n    for i in range(len(s)):\n        if int(s[i]) % 2 == 1:\n            count += 1\n    return count\n    # if string_rotate(s,n) == string_rotate(string_rotate(s,n),n):\n    #     print(1)\n    # else:\n    #     print(0)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s=s.replace('0','z')\n    s=s.replace('1','x')\n    s=s.replace('z','0')\n    s=s.replace('x','1')\n    s=s.replace('2','y')\n    s=s.replace('3','w')\n    s=s.replace('4','v')\n    s=s.replace('5','u')\n    s=s.replace('6','t')\n    s=s.replace('7','s')\n    s=s.replace('8','r')\n    s=s.replace('9','q')\n    s=s.replace('a','p')\n    s=s.replace('b','m')\n    s=s.replace('c','l')\n    s=s.replace('d','k')\n    s=s.replace('e','j')\n    s=s.replace('f','i')\n    s=s.replace('g','h')\n    s=s.replace('h','g')\n    s=s.replace('i','f')\n    s=s.replace('j','e')\n    s=s.replace('k','d')\n    s=s.replace('l','c')\n    s=s.replace('m','b')\n    s=s.replace('n','a')\n    s=s.replace('o','n')\n    s=s.replace('p','o')\n    s=s.replace('q','u')\n    s=s.replace('r','t')\n    s=s.replace('s','r')\n    s=s.replace('t','s')\n    s=s.replace('u','q')\n    s=s.replace('v','w')\n    s=s.replace('w','v')\n    s=s.replace('x','u')\n    s=s.replace('y','t')\n    s=s.replace('z','x')\n    list1=list(s)\n    list1=list1[n:]+list1[:n]\n    s=''.join(list1)\n    count=0\n    for i in s:\n        if int(i)%2==1:\n            count+=1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    import math\n    count=0\n    for i in range(n):\n        l=len(s)\n        #print(l)\n        t=int(math.ceil(l/2))\n        #print(t)\n        for j in range(t):\n            #print(s[j],s[l-j-1])\n            if int(s[j])%2!=0 and int(s[l-j-1])%2!=0:\n                count+=1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    import collections\n    \n    #Convert the string into a list of integers\n    l = [int(i) for i in s]\n    \n    #Move the list in reverse order and assign to a new list\n    #This is to avoid circular shifts\n    l1 = l[::-1]\n    \n    #Define a counter\n    ctr = 0\n    \n    #Loop over the list of integers\n    for i in range(len(l1)):\n        #If the integer is odd\n        if l1[i]%2!= 0:\n            #Add one to the counter\n            ctr += 1\n        \n    #Return the result\n    return ctr\n    \ndef test_odd_Equivalent():\n    '''\n    Write a unit test for the function 'odd_Equivalent'\n    '''\n    print('\\nTesting odd_Equivalent():')\n    \n    #Test list 1\n    print('\\tTesting on list 1')\n    if (odd_Equivalent('00110',1) == 1) and (odd_Equivalent('00110',2) == 1) and (odd_Equivalent('00110',3) == 0) and (odd_Equivalent('00110',4) == 1):\n        print('\\t\\tPassed')\n    else:\n        print('\\t\\tFailed')\n    \n    #Test list 2\n    print('\\tTesting on list 2')\n    if (odd_Equivalent('01010',1) == 1) and (odd_Equivalent('01010',2) == 1) and (odd_Equivalent('01010',3) == 0) and (odd_Equivalent('01010',4) == 1):\n        print('\\t\\tPassed')\n    else:\n        print('\\t\\tFailed')\n    \n    #Test list 3\n    print('\\tTesting on list 3')\n    if (odd_Equivalent('11011',1) == 0) and (odd_Equivalent('11011',2) == 1) and (odd_Equivalent('11011',3) == 0) and (odd_Equivalent('11011',4) == 1):\n        print('\\t\\tPassed')\n    else:\n        print('\\t\\tFailed')\n    \n    #Test list 4\n    print('\\tTesting on list 4')\n    if (odd_Equivalent('10100',1) == 0) and (odd_Equivalent('10100',2) == 1) and (odd_Equivalent('10100',3) == 0) and (odd_Equivalent('10100',4) == 1):\n        print('\\t\\tPassed')\n    else:\n        print('\\t\\tFailed')\n    \n    #Test list 5\n    print('\\tTesting on list 5')\n    if (odd_Equivalent('00100',1) == 1) and (odd_Equivalent('00100',2) == 0) and (odd_Equivalent('00100',3) == 1) and (odd_Equivalent('00100',4) == 0):\n        print('\\t\\tPassed')\n    else:\n        print('\\t\\tFailed')\n    \n    #Test list 6\n    print('\\tTesting on list 6')\n    if (odd_Equivalent('10101',1) == 1) and (odd_Equivalent('10101',2) == 0) and (odd_Equivalent('10101',3) == 1) and (odd_Equivalent('10101',4) == 0):\n        print('\\t\\tPassed')\n    else:\n        print('\\t\\tFailed')\n    \n    #Test list 7\n    print('\\tTesting on list 7')\n    if (odd_Equivalent('01101',1) == 1) and (odd_Equivalent('01101',2) == 0) and (odd_Equivalent('01101',3) == 1) and (odd_Equivalent('01101',4) == 0):\n        print('\\t\\tPassed')\n    else:\n        print('\\t\\tFailed')\n    \n    #Test list 8\n    print('\\tTesting on list 8')\n    if (odd_Equivalent('11100',1) == 1) and (odd_Equivalent('11100',2) == 0) and (odd_Equivalent('11100',3) == 1) and (odd_Equivalent('11100',4) == 0):\n        print('\\t\\tPassed')\n    else:\n        print('\\t\\tFailed')\n    \n    #Test list 9\n    print('\\tTesting on list 9')\n    if (odd_Equivalent('01110',1) == 1) and (odd_Equivalent('01110',2) == 0) and (odd_Equivalent('01110',3) == 1) and (odd_Equivalent('01110',4) == 0):\n        print('\\t\\tPassed')\n    else:\n        print('\\t\\tFailed')\n    \n    #Test list 10\n    print('\\tTesting on list 10')\n    if (odd_Equivalent('11101',1) == 1) and (odd_Equivalent('11101',2) == 0) and (odd_Equivalent('11101',3) == 1) and (odd_Equivalent('11101',4) == 0):\n        print('\\t\\tPassed')\n    else:\n        print('\\t\\tFailed')\n    \n    #Test list 11\n    print('\\tTesting on list 11')\n    if (odd_Equivalent('10001',1) == 0) and (odd_Equivalent('10001',2) == 1) and (odd_Equivalent('10001',3) == 0) and (odd_Equivalent('10001',4) == 1):\n        print('\\t\\tPassed')\n    else:\n        print('\\t\\tFailed')\n    \n    #Test list 12\n    print('\\tTesting on list 12')\n    if (odd_Equivalent('01011',1) == 0) and (odd_Equivalent('01011',2) == 1) and (odd_Equivalent('01011',3) == 0) and (odd_Equivalent('01011',4) == 1):\n        print('\\t\\tPassed')\n    else:\n        print('\\t\\tFailed')\n    \n    #Test list 13\n    print('\\tTesting on list 13')\n    if (odd_Equivalent('00011',1) == 1) and (odd_Equivalent('00011',2) == 0) and (odd_Equivalent('00011',3) == 1) and (odd_Equivalent('00011',4) == 0):\n        print('\\t\\tPassed')\n    else:\n        print('\\t\\tFailed')\n    \n    #Test list 14\n    print('\\tTesting on list 14')\n    if (odd_Equivalent('01111',1) == 0) and (odd_Equivalent('01111',2) == 1) and (odd_Equivalent('01111',3) == 0) and (odd_Equivalent('01111',4) == 1):\n        print('\\t\\tPassed')\n    else:\n        print('\\t\\tFailed')\n    \n    #Test list 15\n    print('\\tTesting on list 15')\n    if (odd_Equivalent('1111',1) == 1) and (odd_Equivalent('1111',2) == 0) and (odd_Equivalent('1111',3) == 1) and (odd_Equivalent('1111',4) == 0):\n        print('\\t\\tPassed')\n    else:\n        print('\\t\\tFailed')\n    \n    #Test list 16\n    print('\\tTesting on list 16')\n    if (odd_Equivalent('11111',1) == 1) and (odd_Equivalent('11111',2) == 0) and (odd_Equivalent('11111',3) == 1) and (odd_Equivalent('11111',4) == 0):\n        print('\\t\\tPassed')\n    else:\n        print('\\t\\tFailed')\n    \n    #Test list 17\n    print('\\tTesting on list 17')\n    if (odd_Equivalent('0000',1) == 1) and (odd_Equivalent('0000',2) == 0) and (odd_Equivalent('0000',3) == 1) and (odd_Equivalent('0000',4) == 0):\n        print('\\t\\tPassed')\n    else:"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #we need a rotation function to work\n    def rotate(s, n): \n        return s[n:] + s[:n] \n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd_count = 0\n    for i in range(0,n):\n        temp = ''\n        for j in s:\n            temp = j + temp\n        if int(temp,2)%2 == 1:\n            odd_count += 1\n        s = temp\n    return odd_count\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if s=='':\n        return 0\n    if len(s)==1:\n        return 1\n    total=0\n    if n<0:\n        return 0\n    if n==0:\n        return 1\n    if n>0:\n        if n%2==0:\n            total+=odd_Equivalent(s[1:],n)\n        if n%2!=0:\n            total+=odd_Equivalent(s[1:],n-1)+odd_Equivalent(s[0]+s[1:],n)\n    return total\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return (int(s,base=2) >> n) & 1\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    if n > 0:\n        return (odd_Equivalent(s,n-1)*2)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    length=len(s)\n    lst=[]\n    res=''\n    if n>length:\n        n=n%length\n    for i in range(n):\n        lst.append(s[length-1])\n        length=length-1\n    for i in lst:\n        res=res+i\n    return res\ndef even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    length=len(s)\n    lst=[]\n    res=''\n    if n>length:\n        n=n%length\n    for i in range(n):\n        lst.append(s[length-1])\n        length=length-1\n    for i in lst:\n        res=res+i\n    return res\ndef odd_rotate(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    length=len(s)\n    lst=[]\n    res=''\n    if n>length:\n        n=n%length\n    for i in range(n):\n        lst.append(s[length-1])\n        length=length-1\n    for i in lst:\n        res=res+i\n    return res\ndef even_rotate(s,n):\n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    length=len(s)\n    lst=[]\n    res=''\n    if n>length:\n        n=n%length\n    for i in range(n):\n        lst.append(s[length-1])\n        length=length-1\n    for i in lst:\n        res=res+i\n    return res\ndef all_rotations(s): \n    '''\n    Write a python function to find all the possible rotations of a string.\n    '''\n    res=[]\n    length=len(s)\n    res.append(s)\n    lst=[]\n    for i in range(length):\n        lst.append(s[length-1])\n        length=length-1\n    for i in lst:\n        res.append(i)\n    return res\ndef count_rotations(s): \n    '''\n    Write a python function to find the number of times a string is rotated.\n    '''\n    res=[]\n    length=len(s)\n    res.append(s)\n    lst=[]\n    for i in range(length):\n        lst.append(s[length-1])\n        length=length-1\n    for i in lst:\n        res.append(i)\n    return len(res)\ndef count_rotations_2(s): \n    '''\n    Write a python function to find the number of times a string is rotated.\n    '''\n    res=[]\n    length=len(s)\n    res.append(s)\n    lst=[]\n    for i in range(length):\n        lst.append(s[length-1])\n        length=length-1\n    for i in lst:\n        res.append(i)\n    return len(res)\ndef even_rotate_2(s):\n    '''\n    Write a python function to find the number of times a string is rotated.\n    '''\n    res=[]\n    length=len(s)\n    res.append(s)\n    lst=[]\n    for i in range(length):\n        lst.append(s[length-1])\n        length=length-1\n    for i in lst:\n        res.append(i)\n    return len(res)\ndef count_rotations_3(s): \n    '''\n    Write a python function to find the number of times a string is rotated.\n    '''\n    res=[]\n    length=len(s)\n    res.append(s)\n    lst=[]\n    for i in range(length):\n        lst.append(s[length-1])\n        length=length-1\n    for i in lst:\n        res.append(i)\n    return len(res)\ndef count_rotations_4(s): \n    '''\n    Write a python function to find the number of times a string is rotated.\n    '''\n    res=[]\n    length=len(s)\n    res.append(s)\n    lst=[]\n    for i in range(length):\n        lst.append(s[length-1])\n        length=length-1\n    for i in lst:\n        res.append(i)\n    return len(res)\ndef no_of_rotations(s): \n    '''\n    Write a python function to find the number of times a string is rotated.\n    '''\n    res=[]\n    length=len(s)\n    res.append(s)\n    lst=[]\n    for i in range(length):\n        lst.append(s[length-1])\n        length=length-1\n    for i in lst:\n        res.append(i)\n    return len(res)\ndef palindrome(s):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    res=s\n    length=len(s)\n    res=res.lower()\n    lst=[]\n    for i in range(length):\n        lst.append(s[length-1])\n        length=length-1\n    for i in lst:\n        res=res+i\n    return res\ndef palindrome_2(s):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    res=s\n    length=len(s)\n    res=res.lower()\n    lst=[]\n    for i in range(length):\n        lst.append(s[length-1])\n        length=length-1\n    for i in lst:\n        res=res+i\n    return res\ndef no_of_rotations(s): \n    '''\n    Write a python function to find the number of times a string is rotated.\n    '''\n    res=[]\n    length=len(s)\n    res.append(s)\n    lst=[]\n    for i in range(length):\n        lst.append(s[length-1])\n        length=length-1\n    for i in lst:\n        res.append(i)\n    return len(res)\ndef no_of_rotations_2(s): \n    '''\n    Write a python function to find the number of times a string is rotated.\n    '''\n    res=[]\n    length=len(s)\n    res.append(s)\n    lst=[]\n    for i in range(length):\n        lst.append(s[length-1])\n        length=length-1\n    for i in lst:\n        res.append(i)\n    return len(res)\ndef find_rotations(s): \n    '''\n    Write a python function to find the number of times a string is rotated.\n    '''\n    res=[]\n    length=len(s)\n    res.append(s)\n    lst=[]\n    for i in range(length):\n        lst.append(s[length-1])\n        length=length-1\n    for i in lst:\n        res.append(i)\n    return len(res)\ndef palindrome_3(s):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    res=''\n    length=len(s)\n    for i in range(length):\n        res=res+s[length-1]\n        length=length-1\n    return res\ndef palindrome_4(s):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    res=''\n    length=len(s)\n    for i in range(length):\n        res=res+s[length-1]\n        length=length-1\n    return res\ndef word_searc"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return set(flatten(nestedlist))\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    counter = set()\n    for each in nestedlist:\n        for each2 in each:\n            if each2 in counter:\n                return each2\n            else:\n                counter.add(each2)\n    return None\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if len(nestedlist[i]) >= len(nestedlist[j]):\n                if set(nestedlist[j]) <= set(nestedlist[i]):\n                    result += nestedlist[j]\n            else:\n                if set(nestedlist[i]) <= set(nestedlist[j]):\n                    result += nestedlist[i]\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    flatlist = [item for sublist in nestedlist for item in sublist]\n    unique_items = set(flatlist)\n    return list(unique_items)\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # iterate through the nested lists\n    for each_nested_list in nestedlist:\n        # get the set of unique elements\n        unique_elements_set = set(each_nested_list)\n        # update the common_elements_set\n        common_elements_set.update(unique_elements_set)\n    # return the set\n    return common_elements_set\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    flat_list = []\n    for elem in nestedlist:\n        if type(elem) == type([]):\n            flat_list.extend(common_in_nested_lists(elem))\n        else:\n            flat_list.append(elem)\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    res = []\n    for el in nestedlist:\n        if isinstance(el, list):\n            res += common_in_nested_lists(el)\n        else:\n            res.append(el)\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elems = []\n    for item in nestedlist:\n        for elem in item:\n            if elem not in common_elems:\n                common_elems.append(elem)\n    return common_elems\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    for i in nestedlist:\n        for j in nestedlist:\n            if i == j:\n                continue\n            if i == j:\n                return i\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    flatlist = [item for sublist in nestedlist for item in sublist]\n    return list(set(flatlist))\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if re.match(r'^\\-?\\d+$', text):\n        return True\n    return False\n    \ndef check_float(text):\n    '''\n    Write a function to check if a string represents a float or not.\n    '''\n    if re.match(r'^\\-?\\d+\\.\\d+$', text):\n        return True\n    return False\n    \ndef check_string(text):\n    '''\n    Write a function to check if a string represents a string or not.\n    '''\n    if re.match(r'^\\\".*\\\"$', text):\n        return True\n    return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    return True\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    \n    try:\n        int(text)\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if all(not v for v in list1):\n        return True\n    return False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if(i):\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return all(dict=={} for dict in list1)\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if len(list1[i]) == 0:\n            return True\n    return False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if not list1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i) > 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    list2 = []\n    for dictionary in list1:\n        if(dictionary):\n            list2.append(True)\n        else:\n            list2.append(False)\n    if(all(list2)):\n        print 'All dictionaries in the list are empty'\n    else:\n        print 'There is at least one dictionary in the list which is not empty'\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if type(nums)!= tuple:\n        return None\n    if len(nums) == 0:\n        return None\n    res = 0\n    for n in nums:\n        res = res * 10 + n\n    return res\n    \n    \ndef test_tuple_to_int():\n    assert(tuple_to_int(()) == None)\n    assert(tuple_to_int((1,2,3)) == 123)\n    assert(tuple_to_int((9,9,9)) == 999)\n    assert(tuple_to_int((9,0,9)) == 990)\n    assert(tuple_to_int((9,9,0)) == 999)\n    assert(tuple_to_int((0,0,0)) == 0)\n    print(\"tests passed\")\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return reduce(lambda x,y: x*10+y, nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = nums[::-1]\n    ans = 0\n    for i in nums:\n        ans += i*(2**(i-1))\n    return ans\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in nums]))\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums_str = \"\"\n    for num in nums:\n        nums_str += str(num)\n    return int(nums_str)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return functools.reduce(lambda x, y: x * 10 + y, nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num_tuple = []\n    for num in nums:\n        num_tuple.append(int(num))\n    return num_tuple\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return reduce(lambda a,b: a*b, nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for i in range(len(row)):\n            if type(row[i]) in [int, float, complex, long]:\n                row[i] = float(row[i])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(i) for i in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for test_list in test_list:\n        for i in range(len(test_list)):\n            if type(test_list[i]) == int or type(test_list[i]) == float:\n                test_list[i] = float(test_list[i])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for row in test_list:\n        for ele in row:\n            try:\n                ele = float(ele)\n                new_list.append(ele)\n            except ValueError:\n                continue\n    return new_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for list_item in test_list:\n        if isinstance(list_item, list):\n            result.append(list_to_float(list_item))\n        elif isinstance(list_item, str) or isinstance(list_item, unicode):\n            result.append(float(list_item))\n        elif isinstance(list_item, int) or isinstance(list_item, float):\n            result.append(float(list_item))\n        elif isinstance(list_item, complex):\n            result.append(float(list_item.real))\n        elif isinstance(list_item, long):\n            result.append(float(list_item))\n        else:\n            result.append(list_item)\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for n, i in enumerate(test_list):\n        try:\n            test_list[n] = float(i)\n        except:\n            pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for element in test_list:\n        try:\n            float_list.append(float(element))\n        except:\n            pass\n    return float_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                continue\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [[float(val) for val in sublist] for sublist in test_list]\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    if not isinstance(string, str):\n        return None\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n    \ndef word_frequencies(word_list): \n    '''\n    Write a function to count the frequency of each word in a list of strings.\n    '''\n    word_freq = {}\n    for word in word_list:\n        if word in word_freq:\n            word_freq[word] = word_freq[word] + 1\n        else:\n            word_freq[word] = 1\n    return word_freq\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    newList = string.split()\n    return newList\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list = string.split(\" \")\n    return list\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in xrange(1,len(arr)):\n        if arr[i]!=arr[i-1]:\n            return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    def search_sub(arr):\n        if len(arr) == 1:\n            return arr[0]\n        if len(arr) == 2:\n            if arr[0]!= arr[1]:\n                return arr[0]\n            else:\n                return arr[1]\n        else:\n            mid = len(arr) // 2\n            if arr[mid] == arr[mid+1]:\n                return search_sub(arr[:mid])\n            elif arr[mid] == arr[mid-1]:\n                return search_sub(arr[mid+1:])\n            else:\n                return arr[mid]\n        \n    return search_sub(arr)\n    \n    \ndef zero_matrix(matrix):\n    '''\n    Write a function to check if the given matrix is zero matrix or not.\n    '''\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j]!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if not arr:\n        return None\n    return arr[0] if arr.count(arr[0]) == 1 else search(arr[1:])\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    #to find the element that appears only once in a sorted array\n    #we can use a sliding window concept\n    #start from the begining, move the left pointer by one step\n    #and check if arr[left] == arr[left+1]\n    #if it is the same, we can move the right pointer by one step\n    #if they are different, we can move the right pointer by two steps\n    #and then compare arr[left] and arr[right]\n    #if they are same, we know we found the element that only appears once\n    #else, we move the left pointer by two steps\n    #and check again\n    #the reason we move the left pointer by one step is because we\n    #want to make sure the index is valid\n    #if we move the right pointer by two steps, it will make the index invalid\n    #as the range of the index is 0, len(arr)-1\n    \n    #start the left pointer at 0, and the right pointer at the end of the array\n    left = 0\n    right = len(arr) - 1\n    \n    #if the two pointers are not equal, we know that there are more than one element that appears only once\n    #else, there is only one element that appears only once\n    while left!= right:\n        if arr[left] == arr[right]:\n            left += 1\n            right -= 1\n        else:\n            left += 1\n            right -= 2\n    \n    #return the element that appears only once\n    return arr[left]\n    \n    \nprint search([1,2,3,4,5,5])"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    temp = arr\n    prev = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i]!= prev:\n            temp.append(arr[i])\n            prev = arr[i]\n    return temp\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0]!= arr[1] else arr[1]\n    if len(arr) == 3:\n        return arr[0] if arr[0]!= arr[1] and arr[0]!= arr[2] else arr[1] or arr[2]\n    if len(arr) % 2 == 0:\n        return search([arr[i] for i in range(0, len(arr), 2)]) if search([arr[i] for i in range(1, len(arr), 2)]) == search(arr) else search([arr[i] for i in range(1, len(arr), 2)])\n    return search([arr[i] for i in range(len(arr)//2, len(arr), 1)]) if search([arr[i] for i in range(len(arr)//2, len(arr), 1)]) == search(arr[:len(arr)//2]) else search([arr[i] for i in range(len(arr)//2, len(arr), 1)])\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    return sum(arr[0:2]) - sum(arr[1:])\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    low=0\n    high=len(arr)-1\n    while low<high:\n        mid=(low+high)//2\n        if arr[mid]==arr[low]:\n            low+=1\n        elif arr[mid]==arr[high]:\n            high-=1\n        else:\n            return arr[mid]\n    return arr[low]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        return arr[0]\n    prev = arr[0]\n    count = 1\n    for i in range(1, len(arr)):\n        if arr[i]!= prev:\n            count = 1\n        else:\n            count += 1\n        prev = arr[i]\n    if count == 1:\n        return arr[i]\n    else:\n        return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    def binary_search(arr, num):\n        '''\n        Iterative binary search\n        '''\n        left = 0\n        right = len(arr) - 1\n        \n        while left <= right:\n            mid = left + (right - left) / 2\n            if arr[mid] == num:\n                return mid\n            elif arr[mid] > num:\n                right = mid - 1\n            else:\n                left = mid + 1\n            \n        return -1\n    \n    \n    #Sort the array\n    arr.sort()\n    \n    #Find the element that appears only once\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] == arr[i+1]:\n            i += 2\n        else:\n            break\n    return arr[i]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    return max([abs(i*j) for i,j in list1])\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    import operator\n    list1.sort(key=operator.itemgetter(0))\n    list2 = []\n    for i in list1:\n        list2.append(i[1])\n    return max(list2)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1)<2:\n        return list1\n    result = [(list1[0][0]*list1[1][0],list1[0][0]*list1[1][1]),(list1[0][0]*list1[1][1],list1[0][1]*list1[1][0])]\n    for i in range(len(list1)-2):\n        temp = [(list1[i][0]*list1[i+1][0],list1[i][0]*list1[i+1][1]),(list1[i][0]*list1[i+1][1],list1[i][1]*list1[i+1][0])]\n        if temp[0][0]>temp[1][0]:\n            temp1 = temp[0]\n        else:\n            temp1 = temp[1]\n        if (temp1[0]>temp1[1] and temp[0][0]>temp[1][0]) or (temp1[0]<temp1[1] and temp[0][0]<temp[1][0]):\n            result = temp\n    return result\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    d = {}\n    for i in list1:\n        for j in i:\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n    t = sorted(d.items(), key=lambda kv:kv[0])\n    print(t)\n    t = t[::-1]\n    print(t)\n    m = 0\n    for i in range(0,len(t)):\n        if t[i][1] > m:\n            m = t[i][1]\n    print(m)\n    m *= t[0][0]\n    print(m)\nmax_product_tuple([(1, 2), (-3, 4), (0, -1), (0, -5), (2, -4)])"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i < j:\n                list2.append(list1[i][0] * list1[j][1])\n    return max(list2)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    ans = 0\n    for i in range(len(list1)):\n        ans = max(ans, abs(list1[i][0]*list1[i][1]))\n    return ans\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return False\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    pass\n    #list1 = [(1,2),(3,4),(5,6),(7,8),(9,10)]\n    #list1 = [(1,5),(6,7),(8,9),(10,10)]\n    \n    #list1 = [(1,5),(6,7),(8,9)]\n    #list1 = [(1,5),(6,7),(8,9),(10,10)]\n    \n    #list1 = [(1,2),(3,4),(5,6),(7,8),(9,10)]\n    #list1 = [(1,5),(6,7),(8,9),(10,10)]\n    \n    #list1 = [(1,5),(6,7),(8,9),(10,11),(12,13)]\n    \n    #list1 = [(0,2),(3,4),(5,6),(7,8),(9,10)]\n    \n    #list1 = [(1,5),(6,7),(8,9),(10,11),(12,13),(14,15),(16,17),(18,19)]\n    \n    #list1 = [(0,2),(3,4),(5,6),(7,8),(9,10)]\n    \n    #list1 = [(0,2),(3,4),(5,6),(7,8),(9,10),(11,12),(13,14),(15,16),(17,18),(19,20)]\n    \n    #list1 = [(0,2),(3,4),(5,6),(7,8),(9,10),(11,12),(13,14),(15,16),(17,18),(19,20),(21,22),(23,24),(25,26)]\n    \n    #list1 = [(0,2),(3,4),(5,6),(7,8),(9,10),(11,12),(13,14),(15,16),(17,18),(19,20),(21,22),(23,24),(25,26),(27,28),(29,30),(31,32),(33,34)]\n    \n    #list1 = [(0,2),(3,4),(5,6),(7,8),(9,10),(11,12),(13,14),(15,16),(17,18),(19,20),(21,22),(23,24),(25,26),(27,28),(29,30),(31,32),(33,34),(35,36),(37,38),(39,40),(41,42),(43,44),(45,46),(47,48),(49,50)]\n    \n    #list1 = [(0,2),(3,4),(5,6),(7,8),(9,10),(11,12),(13,14),(15,16),(17,18),(19,20),(21,22),(23,24),(25,26),(27,28),(29,30),(31,32),(33,34),(35,36),(37,38),(39,40),(41,42),(43,44),(45,46),(47,48),(49,50),(51,52),(53,54),(55,56),(57,58),(59,60),(61,62),(63,64),(65,66),(67,68),(69,70),(71,72),(73,74),(75,76),(77,78),(79,80),(81,82),(83,84),(85,86),(87,88),(89,90),(91,92),(93,94),(95,96),(97,98),(99,100)]\n    \n    #list1 = [(0,2),(3,4),(5,6),(7,8),(9,10),(11,12),(13,14),(15,16),(17,18),(19,20),(21,22),(23,24),(25,26),(27,28),(29,30),(31,32),(33,34),(35,36),(37,38),(39,40),(41,42),(43,44),(45,46),(47,48),(49,50),(51,52),(53,54),(55,56),(57,58),(59,60),(61,62),(63,64),(65,66),(67,68),(69,70),(71,72),(73,74),(75,76),(77,78),(79,80),(81,82),(83,84),(85,86),(87,88),(89,90),(91,92),(93,94),(95,96),(97,98),(99,100),(101,102),(103,104),(105,106),(107,108),(109,110),(111,112),(113,114),(115,116),(117,118),(119,120),(121,122),(123,124),(125,126),(127,128),(129,130),(131,132),(133,134),(135,136),(137,138),(139,140),(141,142),(143,144),(145,146),(147,148),(149,150),(151,152),(153,154),(155,156),(157,158),(159,160),(161,162),(163,164),(165,166),(167,168),(169,170),(171,172),(173,174),(175,176),(177,178),(179,180),(181,182),(183,184),(185,186),(187,188),(189,190),(191,192),(193,194),(195,196),(197,198),(199,200),(201,202),(203,204),(205,206),(207,208),(209,210),(211,212),(213,214),(215,216),(217,218),(219,220),(221,222),(223,224),(225,226),(227,228),(229,230),(231,232),(233,234),(235,236),(237,238),(239,240),(241,242),(243,244),(245,246),(247,248),(249,250),(251,252),(253,254),(255,256),(257,258),(259,260),(261,262),(263,264),(265,266),(267,268),(269,270),(271,272),(273,274),(275,276),(277,278),(279,280),(281,282),(283,284),(285,286),(287,288),(289,290),(291,292),(293,294),(295,296),(297,298),(299,300)]\n    \n    #list1 = [(0,2),(3,4),(5,6),(7,8),(9,10),(11,12),(13,14),(15,16),(17,18),(19,20),(21,22),(23,24),(25,26),(27,28),(29,30),(31,32),(33,34),(35,36),(37,38),(39,40),(41,42),(43,44),(45,46),(47,48),(49,50),(51,52),(53,54),(55,56),(57,58),(59,60),(61,62),(63,64),(65,66),(67,68),(69,70),(71,72),(73,74),(75,76),(77,78),(79,80),(81,82),(83,84),(85,86),(87,88),(89,90),(91,92),(93,94),(95,96),(97,98),(99,100),(101,102),(103,104),(105,106),(107,108),(109,110),(111,112),(113,114),(115,116),(117,118),(119,120),(121,122),(123,124)"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    result = ()\n    list1.sort(reverse = True)\n    for i in range(0,len(list1),2):\n        if list1[i]*list1[i+1] > result[0]:\n            result = (list1[i]*list1[i+1],list1[i],list1[i+1])\n    return result\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    product=0\n    for i in range(0,len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i][0]*list1[j][1]>product:\n                product=list1[i][0]*list1[j][1]\n    return product\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_list = []\n    for x in range(1,limit):\n        first = 0\n        second = 0\n        first_total = 0\n        second_total = 0\n        for y in range(1,x):\n            if x%y == 0:\n                first += y\n                first_total += y\n        for z in range(1,first_total):\n            if first_total%z == 0:\n                second += z\n                second_total += z\n        if first_total == second_total and x!= first_total:\n            amicable_list.append(first_total)\n    return sum(amicable_list)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for i in range(1,limit):\n        amicable_numbers = []\n        for j in range(i, limit):\n            sum_of_factors = sum_of_factors_for_number(j)\n            if (j == sum_of_factors and j!= i) and sum_of_factors not in amicable_numbers:\n                amicable_numbers.append(j)\n        if sum_of_factors_for_number(i) == i:\n            total += sum(amicable_numbers)\n    return total\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum([k for k in range(limit) if sum(divisors(k)) == k and sum(divisors(sum(divisors(k)))) == k])\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        if is_amicable_number(i):\n            sum += i\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_nums = set()\n    for i in range(2, limit):\n        div, mod = divmod(i, 10)\n        if mod == 0:\n            continue\n        x = divmod(mod, 10)\n        if x == (i, mod):\n            amicable_nums.add(i)\n    sum = 0\n    for n in amicable_nums:\n        sum += n\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicables = set()\n    for n in range(1, limit + 1):\n        if n == sum(factors(n)) and n!= sum(factors(sum(factors(n)))):\n            amicables.add(n)\n    return sum(amicables)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicables = set()\n    for x in range(1, limit):\n        if x not in amicables:\n            y = sum(list(map(int, str(x))))\n            if y!= x and sum(list(map(int, str(y)))) == x:\n                amicables.add(x)\n                amicables.add(y)\n    return sum(amicables)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for x in range(1, limit):\n        divisor_sum = 0\n        for y in range(1, x):\n            if x % y == 0:\n                divisor_sum += y\n        \n        divisor_sum_2 = 0\n        for z in range(1, divisor_sum):\n            if divisor_sum % z == 0:\n                divisor_sum_2 += z\n        \n        if divisor_sum_2 == x and x!= divisor_sum:\n            amicable_sum += x\n        \n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum([x for x in range(1, limit) if is_amicable_pair(x)])\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum([sum(divisors(i)) for i in range(2, limit) if is_amicable(i)])\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a_complex = complex(a,b)\n    b_complex = complex(b,a)\n    angle_complex_ = cmath.phase(a_complex)\n    angle_complex__ = cmath.phase(b_complex)\n    if angle_complex_>angle_complex__:\n        return abs(angle_complex_-angle_complex__)\n    else:\n        return abs(angle_complex__-angle_complex_)\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c=a+b*1j\n    angle=cmath.phase(c)\n    print angle\n    return angle\ndef multiply_complex(a,b):\n    '''\n    Write a function to multiply two complex numbers\n    '''\n    x=a*b\n    print x\n    return x\ndef add_complex(a,b):\n    '''\n    Write a function to add two complex numbers.\n    '''\n    x=a+b\n    print x\n    return x\ndef mod_complex(a,b):\n    '''\n    Write a function to compute modulus of a complex number.\n    '''\n    x=abs(a+b*1j)\n    print x\n    return x\ndef create_complex(a,b):\n    '''\n    Write a function to create a complex number.\n    '''\n    x=a+b*1j\n    print x\n    return x\ndef polar_complex(a):\n    '''\n    Write a function to convert complex to polar coordinates.\n    '''\n    r=abs(a)\n    angle=cmath.phase(a)\n    print 'r=',r,'angle=',angle\n    return (r,angle)\ndef print_menu():\n    print '1.Complex Multiplication'\n    print '2.Complex Addition'\n    print '3.Complex Subtraction'\n    print '4.Complex Modulus'\n    print '5.Complex Polar'\n    print '6.Complex Create'\n    print '7.Polar Convert'\n    print '8.Quit'\ndef get_input():\n    return input('Enter choice:')\ndef main():\n    print '1.Complex Multiplication'\n    print '2.Complex Addition'\n    print '3.Complex Subtraction'\n    print '4.Complex Modulus'\n    print '5.Complex Polar'\n    print '6.Complex Create'\n    print '7.Polar Convert'\n    print '8.Quit'\n    while True:\n        choice=int(get_input())\n        if choice==1:\n            a=complex(raw_input('Enter a:'))\n            b=complex(raw_input('Enter b:'))\n            multiply_complex(a,b)\n            print_menu()\n        elif choice==2:\n            a=complex(raw_input('Enter a:'))\n            b=complex(raw_input('Enter b:'))\n            add_complex(a,b)\n            print_menu()\n        elif choice==3:\n            a=complex(raw_input('Enter a:'))\n            b=complex(raw_input('Enter b:'))\n            subtract_complex(a,b)\n            print_menu()\n        elif choice==4:\n            a=complex(raw_input('Enter a:'))\n            mod_complex(a)\n            print_menu()\n        elif choice==5:\n            a=complex(raw_input('Enter a:'))\n            polar_complex(a)\n            print_menu()\n        elif choice==6:\n            a=complex(raw_input('Enter a:'))\n            create_complex(a)\n            print_menu()\n        elif choice==7:\n            a=complex(raw_input('Enter a:'))\n            polar_complex(a)\n            print_menu()\n        elif choice==8:\n            break\n        else:\n            print 'Invalid Choice'\nif __name__=='__main__':\n    main()"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #theta=cmath.phase(complex(a,b))\n    #return theta\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a < 0 and b < 0:\n        angle = cmath.phase(complex(a,b))\n        if angle < 0:\n            angle += 2*math.pi\n    elif a < 0 and b >= 0:\n        angle = cmath.phase(complex(a,b))\n        if angle < 0:\n            angle += 2*math.pi\n    elif a >= 0 and b < 0:\n        angle = cmath.phase(complex(a,b))\n        if angle > 0:\n            angle -= 2*math.pi\n    else:\n        angle = cmath.phase(complex(a,b))\n    return angle\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(complex(a,b))\n    return ang\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(cmath.phase(complex(a,b)))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    result = cmath.phase(complex(a,b))\n    if result > math.pi:\n        return result - 2*math.pi\n    else:\n        return result\n    \n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #Your code here\n    a1=a.real\n    a2=a.imag\n    b1=b.real\n    b2=b.imag\n    if a2>=0 and b2>=0:\n        #print \"%.6f\"%cmath.degrees(cmath.atan(b1/a1))\n        return cmath.degrees(cmath.atan(b1/a1))\n    elif a2<0 and b2>=0:\n        #print \"%.6f\"%cmath.degrees(cmath.atan(b1/a1)+cmath.pi)\n        return cmath.degrees(cmath.atan(b1/a1)+cmath.pi)\n    elif a2<0 and b2<0:\n        #print \"%.6f\"%cmath.degrees(cmath.atan(b1/a1)+2*cmath.pi)\n        return cmath.degrees(cmath.atan(b1/a1)+2*cmath.pi)\n    elif a2>=0 and b2<0:\n        #print \"%.6f\"%cmath.degrees(cmath.atan(b1/a1)+cmath.pi)\n        return cmath.degrees(cmath.atan(b1/a1)+cmath.pi)\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\ndef area_square(side):\n    '''\n    Write a function to compute the area of a square.\n    '''\n    return side*side\ndef area_circle(radius):\n    '''\n    Write a function to compute the area of a circle.\n    '''\n    return math.pi*math.pow(radius,2)\ndef area_rectangle(side1,side2):\n    '''\n    Write a function to compute the area of a rectangle.\n    '''\n    return side1*side2\ndef area_triangle(base,height):\n    '''\n    Write a function to compute the area of a triangle.\n    '''\n    return 0.5*base*height\ndef area_trapezoid(base1,base2,height):\n    '''\n    Write a function to compute the area of a trapezoid.\n    '''\n    return (base1+base2)*height/2\ndef area_circle_small(radius):\n    '''\n    Write a function to compute the area of a circle.\n    '''\n    return math.pi*math.pow(radius,2)\ndef area_circle_big(radius):\n    '''\n    Write a function to compute the area of a circle.\n    '''\n    return math.pi*math.pow(radius,2)\ndef area_triangle_small(side1,side2,side3):\n    '''\n    Write a function to compute the area of a triangle.\n    '''\n    return 0.5*(side1+side2+side3)\ndef area_triangle_big(side1,side2,side3):\n    '''\n    Write a function to compute the area of a triangle.\n    '''\n    return 0.5*(side1+side2+side3)\ndef area_cuboid(side1,side2,side3):\n    '''\n    Write a function to compute the area of a cuboid.\n    '''\n    return side1*side2*side3\ndef area_cuboid_small(side1,side2):\n    '''\n    Write a function to compute the area of a cuboid.\n    '''\n    return side1*side2\ndef area_cuboid_big(side1,side2,side3):\n    '''\n    Write a function to compute the area of a cuboid.\n    '''\n    return side1*side2*side3\ndef area_cylinder(radius,height):\n    '''\n    Write a function to compute the area of a cylinder.\n    '''\n    return 2*math.pi*math.pow(radius,2)*height\ndef area_sphere(radius):\n    '''\n    Write a function to compute the area of a sphere.\n    '''\n    return 4*math.pi*math.pow(radius,2)\ndef volume_cuboid(side1,side2,side3):\n    '''\n    Write a function to compute the volume of a cuboid.\n    '''\n    return side1*side2*side3\ndef volume_cuboid_small(side1,side2):\n    '''\n    Write a function to compute the volume of a cuboid.\n    '''\n    return side1*side2\ndef volume_cuboid_big(side1,side2,side3):\n    '''\n    Write a function to compute the volume of a cuboid.\n    '''\n    return side1*side2*side3\ndef volume_sphere(radius):\n    '''\n    Write a function to compute the volume of a sphere.\n    '''\n    return 4/3*math.pi*math.pow(radius,3)\ndef volume_sphere_small(radius):\n    '''\n    Write a function to compute the volume of a sphere.\n    '''\n    return 4/3*math.pi*math.pow(radius,3)\ndef volume_sphere_big(radius):\n    '''\n    Write a function to compute the volume of a sphere.\n    '''\n    return 4/3*math.pi*math.pow(radius,3)\ndef volume_cylinder(radius,height):\n    '''\n    Write a function to compute the volume of a cylinder.\n    '''\n    return math.pi*math.pow(radius,2)*height\ndef volume_cone(radius,height):\n    '''\n    Write a function to compute the volume of a cone.\n    '''\n    return 1/3*math.pi*math.pow(radius,2)*height\ndef volume_cone_small(radius,height):\n    '''\n    Write a function to compute the volume of a cone.\n    '''\n    return 1/3*math.pi*math.pow(radius,2)*height\ndef volume_cone_big(radius,height):\n    '''\n    Write a function to compute the volume of a cone.\n    '''\n    return 1/3*math.pi*math.pow(radius,2)*height\ndef volume_cylinder_small(radius,height):\n    '''\n    Write a function to compute the volume of a cylinder.\n    '''\n    return math.pi*math.pow(radius,2)*height\ndef volume_cylinder_big(radius,height):\n    '''\n    Write a function to compute the volume of a cylinder.\n    '''\n    return math.pi*math.pow(radius,2)*height\ndef volume_cone_small(radius,height):\n    '''\n    Write a function to compute the volume of a cone.\n    '''\n    return 1/3*math.pi*math.pow(radius,2)*height\ndef volume_cone_big(radius,height):\n    '''\n    Write a function to compute the volume of a cone.\n    '''\n    return 1/3*math.pi*math.pow(radius,2)*height\ndef volume_cylinder_small(radius,height):\n    '''\n    Write a function to compute the volume of a cylinder.\n    '''\n    return math.pi*math.pow(radius,2)*height\ndef volume_cylinder_big(radius,height):\n    '''\n    Write a function to compute the volume of a cylinder.\n    '''\n    return math.pi*math.pow(radius,2)*height\ndef volume_sphere(radius):\n    '''\n    Write a function to compute the volume of a sphere.\n    '''\n    return 4/3*math.pi*math.pow(radius,3)\ndef volume_sphere_small(radius):\n    '''\n    Write a function to compute the volume of a sphere.\n    '''\n    return 4/3*math.pi*math.pow(radius,3)\ndef volume_sphere_big(radius):\n    '''\n    Write a function to compute the volume of a sphere.\n    '''\n    return 4/3*math.pi*math.pow(radius,3)\ndef volume_sphere_cylinder(radius,height):\n    '''\n    Write a function to compute the volume of a sphere.\n    '''\n    return math.pi*math.pow(radius,2)*height\ndef volume_sphere_cone(radius,height):\n    '''\n    Write a function to compute the volume of a cone.\n    '''\n    return 1/3*math.pi*math.pow(radius,2)*height\ndef volume_sphere_cylinder_small(radius,height):\n    '''\n    Write a function to compute the volume of a sphere.\n    '''\n    return math.pi*math.pow(radius,2)*height\ndef volume_sphere_cylinder_big(radius,height):\n    '''\n    Write a function to compute the volume of a sphere.\n    '''\n    return math.pi*math.pow(radius,2)*height\ndef volume_sphere_cone_small(radius,height):\n    '''\n    Write a function to compute the volume of a cone.\n    '''\n    return 1/3*math.pi*math.pow(radius,2)*height\ndef volume_sphere_cone_big(radius,height):\n    '''\n    Write a function to compute the volume of a cone.\n    '''\n    return 1/3*math.pi*math.pow(radius,2)*height\ndef volume_sphere_cylinder_small(radius,height):\n    '''\n    Write "
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    x = y = max_diff = 0\n    for i in range(n):\n        if string[i] == '0':\n            x += 1\n        else:\n            y += 1\n        max_diff = max(max_diff, x - y)\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_count = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            count += 1\n        else:\n            count = 0\n        if max_count < count:\n            max_count = count\n    return max_count\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    count = 0\n    max_len = 0\n    for i in range(n):\n        if string[i] == '0':\n            count += 1\n        else:\n            if count > max_len:\n                max_len = count\n            count = 0\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if not string:\n        return 0\n    else:\n        return max([min([string.count('0'),string.count('1')])-max([string.count('0'),string.count('1')])]+find_length(string[1:])\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    cnt_0 = 0\n    cnt_1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            cnt_0 += 1\n        else:\n            cnt_1 += 1\n        if cnt_0 > cnt_1:\n            max_len = cnt_0 - cnt_1\n        else:\n            max_len = cnt_1 - cnt_0\n    return max_len\n    \nif __name__ == '__main__':\n    print find_length('011000100')"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) < 1:\n        return 0\n    if len(string) == 1:\n        if string[0] == '0':\n            return 1\n        else:\n            return 0\n    max_zeros = 0\n    max_ones = 0\n    for i in range(1, len(string)):\n        if string[i] == '0':\n            max_zeros = max(max_zeros, 1 + find_length(string[i:]))\n        else:\n            max_ones = max(max_ones, 1 + find_length(string[i:]))\n    return max(max_zeros, max_ones)\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    #print string\n    num_0 = string.count('0')\n    num_1 = string.count('1')\n    #print num_0\n    #print num_1\n    #return 0\n    max_len = 0\n    #print 'num_0',num_0\n    #print 'num_1',num_1\n    for i in range(len(string)):\n        if i+num_1<=len(string):\n            if num_0==0:\n                if num_1>max_len:\n                    max_len = num_1-num_0\n                    #print max_len\n            else:\n                if num_1>max_len:\n                    max_len = num_1-num_0\n            num_0-=1\n            num_1+=1\n    #print max_len\n    return max_len\n    \n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # string = '10001'\n    n = len(string)\n    count = [0] * 2\n    for i in range(n):\n        if string[i] == '0':\n            count[0] += 1\n        else:\n            count[1] += 1\n    return max(count) - min(count)\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if string == \"\":\n        return 0\n    start = 0\n    max_length = 0\n    curr_length = 0\n    while start < len(string):\n        if string[start] == '0':\n            curr_length += 1\n        else:\n            max_length = max(curr_length, max_length)\n            curr_length = 0\n        start += 1\n    return max(max_length, curr_length)\n    \n    \ndef find_max_length_iterative(string):\n    if string == \"\":\n        return 0\n    max_length = 0\n    current_length = 0\n    for i in xrange(len(string)):\n        if string[i] == '1':\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    return max(max_length, current_length)\n    \ndef find_max_length_recursive(string):\n    if string == \"\":\n        return 0\n    if string[0] == '0':\n        return find_max_length_recursive(string[1:]) + 1\n    else:\n        return find_max_length_recursive(string[1:])\n    \n    \n    \ndef find_permutation(string1, string2):\n    '''\n    Write a function to check whether one word is a permutation of another word.\n    '''\n    if string1 == \"\" or string2 == \"\":\n        return False\n    hash_map = {}\n    for i in xrange(len(string1)):\n        if string1[i] not in hash_map:\n            hash_map[string1[i]] = 1\n        else:\n            hash_map[string1[i]] += 1\n    for j in xrange(len(string2)):\n        if string2[j] not in hash_map:\n            return False\n        else:\n            hash_map[string2[j]] -= 1\n    for k in hash_map:\n        if hash_map[k]!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    for i in xrange(len(string)):\n        for j in xrange(i+1, len(string)+1):\n            if string[i:j].count('1') > string[i:j].count('0'):\n                count += 1\n    return count\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    #print(a,b)\n    s=[]\n    for i in range(1,a):\n        if a%i==0 and b%i==0:\n            s.append(i)\n    #print(s)\n    return sum(s)\n    \ndef sum_of_divisors(n):\n    #print(n)\n    s=[]\n    for i in range(1,n):\n        if n%i==0:\n            s.append(i)\n    return sum(s)\n    \ndef factors(n):\n    s=[]\n    for i in range(1,n):\n        if n%i==0:\n            s.append(i)\n    return s\n    \ndef nth_prime(n):\n    l=[]\n    n+=1\n    for i in range(2,n):\n        if sum_of_divisors(i)==i:\n            l.append(i)\n    return l[n-1]\n        \ndef prime_factors(n):\n    l=[]\n    while n%2==0:\n        l.append(2)\n        n/=2\n    for i in range(3,int(n**0.5)+1,2):\n        while n%i==0:\n            l.append(i)\n            n/=i\n    if n>2:\n        l.append(n)\n    return l\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = [1]\n    for i in range(2, min(a, b)+1):\n        if (a % i == 0) and (b % i == 0):\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    ans = 0\n    for i in range(1, min(a,b) + 1):\n        if a%i == 0 and b%i == 0:\n            ans = ans + i\n    return ans\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if (b == 0):\n        return a\n    else:\n        return sum(a,b%a)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    ls = []\n    for i in range(1,a):\n        if a%i == 0 and b%i == 0:\n            ls.append(i)\n    return sum(ls)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    if a>b:\n        big=a\n    else:\n        big=b\n    \n    small=a if (a<b) else b\n    summation=0\n    for i in range(1,small+1):\n        if a%i==0 and b%i==0:\n            summation+=i\n    \n    return summation\n    \ndef ispalindrome(n): \n    '''\n    Write a python function to check whether a given number is palindrome or not.\n    '''\n    \n    temp=n\n    rev=0\n    while n>0:\n        dig=n%10\n        rev=rev*10+dig\n        n=n//10\n    \n    if temp==rev:\n        return True\n    else:\n        return False\n        \ndef isprime(n):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    \n    if n==1:\n        return False\n    elif n==2:\n        return True\n    else:\n        for i in range(2,n):\n            if n%i==0:\n                return False\n    return True\n    \ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    \n    fact=1\n    for i in range(1,n+1):\n        fact*=i\n    \n    return fact\n    \ndef fibonacci(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    \n    if n==0 or n==1:\n        return n\n    \n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\n    \ndef isperfect(n):\n    '''\n    Write a python function to check whether a given number is perfect or not.\n    '''\n    \n    sum=0\n    for i in range(1,n):\n        if n%i==0:\n            sum+=i\n    \n    return sum==n\n    \ndef sumofdigits(n):\n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    \n    sum=0\n    while n>0:\n        dig=n%10\n        sum+=dig\n        n=n//10\n    return sum\n    \ndef countdigits(n):\n    '''\n    Write a python function to count the number of digits in a given number.\n    '''\n    \n    count=0\n    while n>0:\n        dig=n%10\n        count+=1\n        n=n//10\n    return count\n    \ndef isarmstrong(n):\n    '''\n    Write a python function to check whether a given number is an armstrong number or not.\n    '''\n    \n    temp=n\n    sum=0\n    while temp>0:\n        dig=temp%10\n        sum+=dig**3\n        temp//=10\n    \n    if n==sum:\n        return True\n    else:\n        return False\n    \ndef fibo(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    \n    if n==0 or n==1:\n        return n\n    \n    else:\n        return fibo(n-1)+fibo(n-2)\n    \ndef ishappy(n):\n    '''\n    Write a python function to check whether a given number is happy or not.\n    '''\n    \n    sum=0\n    while n>0:\n        dig=n%10\n        sum+=dig**2\n        n=n//10\n    \n    if sum==1:\n        return True\n    else:\n        return False\n    \ndef rev(n):\n    '''\n    Write a python function to find the reverse of a given number.\n    '''\n    \n    rev=0\n    while n>0:\n        dig=n%10\n        rev=rev*10+dig\n        n=n//10\n    \n    return rev\n    \ndef isprimefact(n):\n    '''\n    Write a python function to find the prime factor of a given number.\n    '''\n    \n    for i in range(2,n):\n        if n%i==0:\n            return i\n    \n    return n\n    \ndef isperfectsqr(n):\n    '''\n    Write a python function to check whether a given number is a perfect square or not.\n    '''\n    \n    temp=n\n    i=1\n    while True:\n        if temp**i==n:\n            return True\n        else:\n            i+=1\n        \n    return False\n    \ndef isfibonacci(n):\n    '''\n    Write a python function to check whether a given number is a fibonacci number or not.\n    '''\n    \n    return fibonacci(n)==n\n    \ndef isprime(n):\n    '''\n    Write a python function to check whether a given number is a prime number or not.\n    '''\n    \n    if n==1:\n        return False\n    elif n==2:\n        return True\n    else:\n        for i in range(2,n):\n            if n%i==0:\n                return False\n    return True\n    \ndef issuperprime(n):\n    '''\n    Write a python function to check whether a given number is a super prime number or not.\n    '''\n    \n    if isprime(n):\n        return True\n    \n    elif n%2==0:\n        return False\n    \n    else:\n        for i in range(3,int(n**0.5)+1,2):\n            if n%i==0:\n                return False\n    return True\n    \ndef isdigit(n):\n    '''\n    Write a python function to check whether a given number is a digit or not.\n    '''\n    \n    if n>=0:\n        return True\n    else:\n        return False\n        \ndef isdecimal(n):\n    '''\n    Write a python function to check whether a given number is a decimal or not.\n    '''\n    \n    if n>=0 and n<10:\n        return True\n    else:\n        return False\n        \ndef ishex(n):\n    '''\n    Write a python function to check whether a given number is a hexadecimal number or not.\n    '''\n    \n    if n>=0 and n<=9:\n        return True\n    elif n>=10 and n<=15:\n        return True\n    else:\n        return False\n        \ndef isoctal(n):\n    '''\n    Write a python function to check whether a given number is a octal number or not.\n    '''\n    \n    if n>=0 and n<=7:\n        return True\n    else:\n        return False\n        \ndef isbinary(n):\n    '''\n    Write a python function to check whether a given number is a binary number or not.\n    '''\n    \n    if n>=0 and n<=1:\n        return True\n    else:\n        return False\n        \ndef isoctal(n):\n    '''\n    Write a python function to check whether a given number is a octal number or not.\n    '''\n    \n    if n>=0 and n<=7:\n        return True\n    else:\n        return False\n        \ndef isbinary(n):\n    '''\n    Write a python function to check whether a given number is a binary number or not.\n    '''\n    \n    if n>=0 and n<=1:\n        return True\n    else:\n        return False\n        \ndef ishex(n):\n    '''\n    Write a python function to check whether a given number is a hexadecimal number or not.\n    '''\n    \n    if n>=0 and n<=9:\n        return True\n    elif n>=10 and n<=15:\n        return True\n    else:\n        return False\n        \ndef isbin(n):\n    '''\n    Write a python function to check whether a given number is a binary number or not.\n    '''\n    \n    if n>=0 and n<=1:\n        return True\n    else:\n        return False\n        \ndef isoct(n):\n    '''\n    Write a python function to check whethe"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    i = 2\n    while i <= a:\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n        i += 1\n    return sum(divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    #return int((a * b) / gcd(a, b))\n    return a * b / gcd(a, b)\n    \ndef gcd(a,b): \n    '''\n    Write a python function to find the greatest common divisor of two given numbers.\n    '''\n    return gcd(b % a, a) if b else a\n    \ndef lcm(a,b): \n    '''\n    Write a python function to find the least common multiple of two given numbers.\n    '''\n    return a * b / gcd(a, b)\n    \ndef is_prime(num):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if num < 2: return False\n    elif num == 2: return True\n    elif num % 2 == 0: return False\n    for i in range(3, int(num**0.5) + 1, 2):\n        if num % i == 0: return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a*b/GCD(a,b)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    list_a = []\n    for x in range(1,a+1): \n        if a%x==0: list_a.append(x)\n    list_b = []\n    for y in range(1,b+1):\n        if b%y==0: list_b.append(y)\n    common = []\n    for z in list_a:\n        for w in list_b:\n            if z==w: common.append(z)\n    if len(common) == 0: return 0\n    else: return sum(common)\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    def multiply_int_helper(x, y, res):\n        if y == 0:\n            return res\n        if y == 1:\n            return res + x\n        else:\n            return multiply_int_helper(x, y - 1, res + x)\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x < 0 or y < 0:\n        return -multiply_int(abs(x), abs(y))\n    elif x > 0 and y > 0:\n        return x * y\n    elif x < 0 and y > 0:\n        return -(abs(x) * abs(y))\n    else:\n        return 0\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x == 0 or y == 0:\n        return 0\n    else:\n        return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split(' ')\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in str:\n        if len(word) > n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = [x for x in str if len(x) > n]\n    print(long_words)\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    output = []\n    str = str.split(\" \")\n    for word in str:\n        if len(word) > n:\n            output.append(word)\n    return output\nprint(long_words(5, 'The quick brown fox jumps over the lazy dog'))\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [x for x in str if len(x) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    list_of_words = [word for word in str.split()]\n    return [word for word in list_of_words if len(word) > n]\n    \ndef is_palindrome(str):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    str = str.lower()\n    return str == str[::-1]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [x for x in str if len(x)>n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [x for x in str if len(x) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    total = 0\n    for i in range(len(my_matrix)):\n        total += my_matrix[i][i]\n    if total!= len(my_matrix)**2:\n        return False\n    for i in range(len(my_matrix)):\n        total = 0\n        for j in range(len(my_matrix)):\n            total += my_matrix[j][i]\n        if total!= len(my_matrix)**2:\n            return False\n    for i in range(len(my_matrix)):\n        total = 0\n        for j in range(len(my_matrix)):\n            total += my_matrix[len(my_matrix)-1-j][i]\n        if total!= len(my_matrix)**2:\n            return False\n    for i in range(len(my_matrix)):\n        total = 0\n        for j in range(len(my_matrix)):\n            total += my_matrix[j][len(my_matrix)-1-i]\n        if total!= len(my_matrix)**2:\n            return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    def get_magic_square(my_matrix):\n        '''\n        Helper function to find magic square\n        '''\n        # Use another helper function to find the sum of each row, column and diagonal\n        sum_row = sum_column = sum_diagonal = 0\n        for row in my_matrix:\n            sum_row += sum(row)\n        for col in zip(*my_matrix):\n            sum_column += sum(col)\n        for i in range(len(my_matrix)):\n            sum_diagonal += my_matrix[i][i]\n        return sum_row == sum_column == sum_diagonal\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if my_matrix[i][j] == 0:\n                my_matrix[i][j] = 1\n                magic_square_test(my_matrix)\n    return my_matrix\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    return magic_square_helper(my_matrix)\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    sum = 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            sum += my_matrix[i][j]\n    if sum == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Special case: 1-row, 1-column, 3-diagonal\n    if len(my_matrix) == 1:\n        return True\n    if len(my_matrix) == 2:\n        return True\n    if len(my_matrix) == 3:\n        return True\n    if my_matrix[0][0]!= 0:\n        return False\n    sum_rows = []\n    sum_cols = []\n    diags = []\n    # Do row sums\n    for row_index in range(len(my_matrix)):\n        sum_rows.append(sum(my_matrix[row_index]))\n    # Do column sums\n    for col_index in range(len(my_matrix)):\n        sum_cols.append(sum([row[col_index] for row in my_matrix]))\n    # Do diagonals\n    for diag_index in range(len(my_matrix)):\n        diags.append(my_matrix[diag_index][diag_index])\n    diags.append(my_matrix[diag_index][-diag_index - 1])\n    # Check sums\n    if sum_rows!= sum_cols or sum_cols!= diags or sum_rows!= diags:\n        return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    square = True\n    for i in range(0, len(my_matrix)):\n        for j in range(0, len(my_matrix[0])):\n            if my_matrix[i][j]!= my_matrix[0][0]:\n                square = False\n                break\n        if square == False:\n            break\n    if square == False:\n        print \"The matrix is not a magic square.\"\n    else:\n        print \"The matrix is a magic square.\"\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Test 1\n    if (my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] == 15):\n        return True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    sum_of_rows = sum_of_columns = 0\n    sum_of_diagonals = 0\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # O(n^3)\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    if len(my_matrix) == 1:\n        return True\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = max(nums)\n    max_count_dict = defaultdict(int)\n    for num in nums:\n        max_count_dict[num] += 1\n        if max_count_dict[num] == max_count:\n            return num\n    return None\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    result = {}\n    for i in nums:\n        if i in result:\n            result[i] += 1\n        else:\n            result[i] = 1\n    return max(result, key=result.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    for key, val in freq.items():\n        if val == max_freq:\n            return key\n    return None\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # return max(set(nums), key=nums.count)\n    # another way\n    res = defaultdict(int)\n    for n in nums:\n        res[n] += 1\n    return res.key()\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_dict = defaultdict(int)\n    for num in nums:\n        max_dict[num] += 1\n    return max(max_dict.items(), key = lambda x : x[1])[0]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    max_occ = 0\n    max_item = None\n    for item in d:\n        if d[item] > max_occ:\n            max_occ = d[item]\n            max_item = item\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if not nums:\n        return None\n    if len(nums) == 1:\n        return nums[0]\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    max_count = max(counts.values())\n    return [x for x in counts if counts[x] == max_count][0]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = -1\n    max_item = None\n    count = defaultdict(int)\n    for i in range(len(nums)):\n        count[nums[i]] += 1\n        if count[nums[i]] > max_freq:\n            max_freq = count[nums[i]]\n            max_item = nums[i]\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    occur = defaultdict(int)\n    for i in nums:\n        occur[i] += 1\n    mx = -1\n    for i in occur:\n        if occur[i] > mx:\n            mx = occur[i]\n            mx_item = i\n    return mx_item\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for i in nums:\n        count[i] += 1\n    return max(count, key=count.get)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    \n    return ''.join(char if char not in vowels else ''.join(vowels[vowels.find(char)-1] for char in str1) + vowels[vowels.find(char)] if char not in vowels else char for char in str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiouAEIOU\")\n    result = ''\n    for c in str1:\n        if c in vowels:\n            result = c + result\n        else:\n            result = result + c\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    str2 = []\n    for l in str1:\n        if l not in vowels:\n            str2.append(l)\n    str3 = ''.join(str2)\n    return str3[::-1]\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str2 = []\n    for i in range(0, len(str1)):\n        if str1[i] in \"aeiouAEIOU\":\n            str2.insert(0, str1[i])\n        else:\n            str2.append(str1[i])\n    return \"\".join(str2)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    str2 = str1[::-1]\n    vowels_reversed = str2.translate(str.maketrans('', '', vowels))\n    return vowels_reversed\n    \nprint(reverse_vowels('The quick brown fox'))\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str2 = ''\n    vowels = 'aeiouAEIOU'\n    for i in str1:\n        if i in vowels:\n            str2 = str2 + i\n    str3 = str2[::-1]\n    return str3\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\",\"A\",\"E\",\"I\",\"O\",\"U\"]\n    str1 = list(str1)\n    vowel_pos = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_pos.append(i)\n    vowel_pos.reverse()\n    for i in vowel_pos:\n        str1[i] = \"\"\n    return \"\".join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1 = str1.lower()\n    vowels = ['a','e','i','o','u']\n    vowel_str = \"\"\n    for letter in str1:\n        if letter in vowels:\n            vowel_str = vowel_str + letter\n    vowel_str = vowel_str[::-1]\n    return vowel_str\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    s = list(str1)\n    i = 0\n    j = len(s)-1\n    while i < j:\n        while i < j and s[i] not in vowels:\n            i += 1\n        while i < j and s[j] not in vowels:\n            j -= 1\n        if i < j:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    string = list(str1)\n    vowel_index = [i for i in range(len(str1)) if str1[i] in vowels]\n    for i in vowel_index:\n        string[i] = str1[i] + str1[i+1]\n        string[i+1] = str1[i] + str1[i+1]\n    return ''.join(string)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    output = ''\n    for i in tup1:\n        output += str(i)\n    return output\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_string = ''\n    for x in tup1:\n        tup_string += str(x)\n    return tup_string\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_str = ''\n    for i in tup1:\n        tup_str = tup_str + str(i) +''\n    return tup_str\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Your code here\n    return \"\".join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    \n    str1 = ''\n    \n    for i in tup1:\n        str1 += str(i)\n    \n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''\n    str1 = str1.join(tup1)\n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''\n    for i in tup1:\n        str1 += str(i)\n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # your code here\n    tup2 = ''\n    for i in tup1:\n        tup2 += i\n    return tup2\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_string = ''\n    for i in tup1:\n        tup_string = tup_string + i\n    return tup_string\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(str(i) for i in tup1)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    res = 0\n    for num in nums:\n        if num < 0:\n            res += num\n    return res\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total\n    \n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if not nums:\n        return 0\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([n for n in nums if n<0])\n    \ndef sum_positivenum(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum([n for n in nums if n>0])\n    \ndef sum_positivenum_1(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum(filter(lambda x: x>0, nums))\n    \ndef sum_positivenum_2(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum(n for n in nums if n > 0)\n    \ndef sum_positivenum_3(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum(n > 0 for n in nums)\n    \ndef sum_positivenum_4(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum(n for n in nums if n > 0)\n    \ndef sum_positivenum_5(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum(n > 0 for n in nums)\n    \ndef sum_positivenum_6(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum(n > 0 for n in nums)\n    \ndef sum_positivenum_7(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum(n > 0 for n in nums)\n    \ndef sum_positivenum_8(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum(n > 0 for n in nums)\n    \ndef sum_positivenum_9(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum(n > 0 for n in nums)\n    \ndef sum_positivenum_10(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum(n > 0 for n in nums)\n    \ndef sum_positivenum_11(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum(n > 0 for n in nums)\n    \ndef sum_positivenum_12(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum(n > 0 for n in nums)\n    \ndef sum_positivenum_13(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum(n > 0 for n in nums)\n    \ndef sum_positivenum_14(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum(n > 0 for n in nums)\n    \ndef sum_positivenum_15(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum(n > 0 for n in nums)\n    \ndef sum_positivenum_16(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum(n > 0 for n in nums)\n    \ndef sum_positivenum_17(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum(n > 0 for n in nums)\n    \ndef sum_positivenum_18(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum(n > 0 for n in nums)\n    \ndef sum_positivenum_19(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum(n > 0 for n in nums)\n    \ndef sum_positivenum_20(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum(n > 0 for n in nums)\n    \ndef sum_positivenum_21(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum(n > 0 for n in nums)\n    \ndef sum_positivenum_22(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum(n > 0 for n in nums)\n    \ndef sum_positivenum_23(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum(n > 0 for n in nums)\n    \ndef sum_positivenum_24(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum(n > 0 for n in nums)\n    \ndef sum_positivenum_25(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum(n > 0 for n in nums)\n    \ndef sum_positivenum_26(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum(n > 0 for n in nums)\n    \ndef sum_positivenum_27(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum(n > 0 for n in nums)\n    \ndef sum_positivenum_28(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum(n > 0 for n in nums)\n    \ndef sum_positivenum_29(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum(n > 0 for n in nums)\n    \ndef sum_positivenum_30(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum(n > 0 for n in nums)\n    \ndef sum_positivenum_31(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum(n > 0 for n in nums)\n    \ndef sum_positivenum_32(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum(n > 0 for n in nums)\n    \ndef sum_positivenum_33(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    return sum(n > 0 for n in nums)\n    \ndef sum_positivenum_34("
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if not nums:\n        return 0\n    else:\n        return nums[0] + sum_negativenum(nums[1:])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)\n    # count = 0\n    # for num in nums:\n    #     if num < 0:\n    #         count += 1\n    # return count\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([-1 * x for x in nums])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(n for n in nums if n < 0)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n * (2 * n - 1) / 2)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(2*n-1))/2\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1) \n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        raise ValueError('hexagonal_num(): n must be greater than 0')\n    return n * (2 * n - 1)\n    \n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n+1)//2\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n - 1)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return sum(nums) - len(nums) * nums.count(0)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    \n    num_zero = 0\n    num_non_zero = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            num_zero += 1\n        else:\n            num_non_zero += 1\n    return num_zero / float(num_non_zero)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return (nums.count(0) / len(nums))\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # approach 2: O(n)\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if nums == None or len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return 1 if nums[0] == 0 else 0\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # 1st way:\n    return float(nums.count(0))/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeroes, num_non_zeroes = 0, 0\n    for num in nums:\n        if num == 0:\n            num_zeroes += 1\n        else:\n            num_non_zeroes += 1\n    return num_zeroes/float(num_non_zeroes)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return 1 if nums[0] == 0 else 0\n    # use xor to traverse array\n    # if there are multiple zero, it could be the case that zero counts are larger than non-zero count\n    # however, after that we will stop checking zero counts\n    n = len(nums)\n    xor = 0\n    for i in range(n):\n        xor = xor ^ nums[i]\n    if xor == 0:\n        return 0\n    # let the 0's be the indices, since we are only looking for the first zero\n    # the non-zero count can be used to traverse the array, as long as we know the zero position\n    # the case with 0 count >= 1 is when we are at the last non-zero index\n    # we should stop when we reach the first zero index\n    xor = 1\n    non_zero = 0\n    for i in range(n):\n        if nums[i] == 0:\n            non_zero += 1\n            if xor == i:\n                break\n        else:\n            xor = i\n    return 0 if non_zero == 0 else float(non_zero)/float(n)\ndef find_unique_int(nums):\n    '''\n    Write a function to find the number of unique integers in an array.\n    '''\n    if not nums:\n        return 0\n    # sort the array and check consecutive values\n    nums.sort()\n    if nums[0]!= 0:\n        return 1\n    result = 1\n    for i in range(1, len(nums)):\n        if nums[i]!= nums[i-1]:\n            result += 1\n    return result\ndef find_missing_int(nums):\n    '''\n    Write a function to find the missing element of an array of integers.\n    For example, if the array is [1, 3, 5, 6, 7, 9], then the missing element is 2.\n    '''\n    if not nums:\n        return 0\n    # sort the array and check consecutive values\n    nums.sort()\n    if nums[0]!= 0:\n        return 0\n    i = 1\n    while i < len(nums):\n        if nums[i]!= nums[i-1]:\n            return nums[i-1]\n        i += 1\n    return 0\ndef reverse_int(nums):\n    '''\n    Write a function that takes an integer as input, and returns the integer with reversed bits.\n    '''\n    # bit manipulation\n    n = len(nums)\n    result = 0\n    for i in range(n):\n        bit = nums[i] & 1\n        result = result | bit << (n-1-i)\n    return result\ndef reverse_bits(nums):\n    '''\n    Reverse bits of a given 32 bits unsigned integer.\n    '''\n    # bit manipulation\n    # the time complexity of this solution is O(32*lg(n))\n    # using xor to traverse nums\n    if not nums:\n        return 0\n    n = len(nums)\n    result = 0\n    for i in range(n):\n        bit = nums[i] & 1\n        result = result | bit << (n-1-i)\n    return result\ndef find_duplicate_int(nums):\n    '''\n    Write a function to find duplicate number in an array of integers.\n    For example, if the array is [1, 4, 4, 4, 2, 2], then there are two duplicates: 4 and 2.\n    '''\n    if not nums:\n        return 0\n    nums.sort()\n    i = 1\n    while i < len(nums):\n        if nums[i] == nums[i-1]:\n            return nums[i-1]\n        i += 1\n    return 0\ndef find_smallest_int(nums):\n    '''\n    Write a function to find the smallest integer in a list of unsorted integers.\n    For example, if the array is [2, 10, 22, 25, 2, 5], then the smallest integer is 2.\n    '''\n    if not nums:\n        return 0\n    n = len(nums)\n    result = nums[0]\n    for i in range(1, n):\n        if nums[i] < result:\n            result = nums[i]\n    return result\ndef remove_duplicates(nums):\n    '''\n    Write a function to remove duplicates from an unsorted integer array.\n    For example, if the array is [2, 5, 4, 5, 3, 4, 3, 6, 7], then after removing duplicates, \n    the array should be [2, 5, 4, 3, 6, 7].\n    '''\n    if not nums:\n        return 0\n    n = len(nums)\n    i = 0\n    while i < n-1:\n        if nums[i] == nums[i+1]:\n            nums[i] = 0\n        else:\n            i += 1\n    i = 0\n    while i < n:\n        if nums[i]!= 0:\n            nums[i] = i+1\n            i += 1\n    return i\ndef search_insert_int(nums, target):\n    '''\n    Write a function to search for target in a sorted array of integers. \n    If the array contains duplicate elements, then the function should return the index of the first occurrence of target.\n    If the array doesn't contain target, then return the index where it would be inserted in order.\n    '''\n    if not nums:\n        return 0\n    n = len(nums)\n    # binary search\n    # time complexity O(lg(n))\n    # nlogn\n    # for example, if the array is [1,3,5,6], the target is 2, then the index is 1\n    # after checking the first element, if the target is greater than the first element, \n    # then the first element should be inserted before the target\n    # if the target is smaller than the first element, then the first element should be inserted after the target\n    # the time complexity here is O(lg(n))\n    start = 0\n    end = n-1\n    while start <= end:\n        mid = (start+end)/2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] > target:\n            end = mid-1\n        else:\n            start = mid+1\n    return start\ndef search_insert_ordered_int(nums, target):\n    '''\n    Write a function to search for target in a sorted array of integers. \n    If the array contains duplicate elements, then the function should return the index of the first occurrence of target.\n    If the array doesn't contain target, then return the index where it would be inserted in order.\n    '''\n    if not nums:\n        return 0\n    n = len(nums)\n    # binary search\n    # time complexity O(lg(n))\n    # nlogn\n    # for example, if the array is [1,3,5,6], the target is 2, then the index is 1\n    # after checking the first element, if the target is greater than the first element, \n    # then the first element should be inserted before the target\n    # if the target is smaller than the first element, then the first element should be inserted after the target\n    # the time complexity here is O(lg(n))\n    start = 0\n    end = n-1\n    while start <= end:\n        mid = (start+end)/2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] > target:\n            end = mid-1\n        else:\n            start = mid+1\n    return start\ndef find_missing_int_2(nums):\n    '''\n    Write a function to find the missing element of an unsorted array.\n    For example, if the array is [2, 3, 4, 5, 6, 7, 8], then the missing element is 8.\n    '''\n    if not nums:\n        return 0\n    n = len(nums)\n    # bit manipulation\n    # the time complexity of this solution is O(32*lg(n))\n    # using xor to traverse nums\n    xor = 0\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeroes = 0\n    num_non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            num_zeroes += 1\n        else:\n            num_non_zeroes += 1\n    return float(num_zeroes) / num_non_zeroes\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeroes = 0\n    num_non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            num_zeroes += 1\n        else:\n            num_non_zeroes += 1\n    return num_zeroes / num_non_zeroes\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    i = 1\n    while i < n:\n        i *= 2\n    return n == i\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return n & (n-1) == 0 and n!= 0\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return True\n    elif n > 0: \n        while n > 0: \n            if n % 2 == 0: \n                n = n / 2\n            elif n == 1: \n                return True\n            else: \n                return False\n    else: \n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    s = str(n)\n    total = 0\n    for i in s:\n        total = total + int(i)**2\n    if total == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    s = str(n)\n    for i in range(len(s)):\n        if s[i]!='0':\n            break\n    else:\n        return False\n    flag = False\n    while(i<len(s)):\n        if s[i]!='0':\n            if int(s[i])!=2 and int(s[i])!=4 and int(s[i])!=8:\n                return False\n            if int(s[i])==4 and int(s[i+1])==0:\n                flag = True\n                break\n            if int(s[i])==8 and int(s[i+1])==0 and int(s[i+2])==0:\n                flag = True\n                break\n            if int(s[i])==8 and int(s[i+1])==0 and int(s[i+2])==2:\n                flag = True\n                break\n            if int(s[i])==4 and int(s[i+1])==0 and int(s[i+2])==2:\n                flag = True\n                break\n            if int(s[i])==2 and int(s[i+1])==0 and int(s[i+2])==0:\n                flag = True\n                break\n        i+=1\n    return flag\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    n = int(n)\n    i = 1\n    while i <= n:\n        i = 2 * i\n    if i == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return is_Power_Of_2(n) and is_Power_Of_2(int(log2(n)))\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    for i in range(32):\n        if (n & (1 << i)) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<1:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 1\n    if n%2==1:\n        return 0\n    if n%4==0:\n        return 1\n    return is_Sum_Of_Powers_Of_Two(n/2) + is_Sum_Of_Powers_Of_Two(n/4)\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    n = int(n)\n    \n    if n == 0:\n        return True\n    \n    while n % 2 == 0:\n        n = n / 2\n    \n    return n == 1\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.1416*r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return (2*math.pi)*r\n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # Calculate the area using the formula area = pi*r^2\n    return 3.14159265359 * r * r\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return sum(test_list, [])\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [x for sublist in test_list for x in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sub_list in test_list:\n        for item in sub_list:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    # base case\n    if type(test_list) == int:\n        return [test_list]\n    \n    # recursive case\n    else:\n        return flatten(test_list[0]) + extract_singly(test_list[1:])\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    flatten = []\n    for item in test_list:\n        flatten += item\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return list(chain.from_iterable(test_list))\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return_list = list(map(lambda x: x[0], test_list))\n    return return_list\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    result_list = []\n    for sublist in test_list:\n        result_list = result_list + sublist\n    return result_list\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # set max number of times to flip (if no flips)\n    max_flips = len(nums)-1\n    for i in xrange(len(nums)-1,0,-1):\n        # max number of flips can be equal to i-1 times\n        max_flips = min(max_flips, i)\n        # we want to find the minimum index that satisfies the condition\n        min_idx = 0\n        for j in xrange(1,max_flips+1):\n            # we can find the minimum index that satisfies the condition\n            # in this case, if the last element is greater than the current\n            # element, we can swap them and continue to find the minimum\n            if nums[len(nums)-j] < nums[len(nums)-1-j]:\n                min_idx = len(nums)-j\n        # now we can swap the smallest element with the last element\n        if min_idx!= 0:\n            nums[len(nums)-1-min_idx], nums[len(nums)-1] = nums[len(nums)-1], nums[len(nums)-1-min_idx]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums), 1, -1):\n        max_index = get_max_index(nums, i)\n        if max_index == -1:\n            break\n        else:\n            swap_elements(nums, i, max_index)\n            swap_elements(nums, 1, i - 1)\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(start, end, nums):\n        for i in range(start, end):\n            nums[i], nums[start] = nums[start], nums[i]\n    size = len(nums)\n    k = size - 1\n    while k > 0:\n        largest = 0\n        for i in range(k):\n            if nums[i] > nums[largest]:\n                largest = i\n        if largest!= k - 1:\n            flip(largest, k, nums)\n            flip(0, k, nums)\n        k -= 1\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # base case\n    if len(nums) <= 1:\n        return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    max_ind = len(nums)\n    curr_ind = max_ind\n    while curr_ind > 1:\n        # find max_ind\n        max_ind = 1\n        for i in range(curr_ind):\n            if nums[i] > nums[max_ind]:\n                max_ind = i\n        # sort the top half\n        nums[0:max_ind+1] = nums[0:max_ind+1][::-1]\n        # flip the top half back\n        nums[0:curr_ind] = nums[0:curr_ind][::-1]\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(nums, start, end):\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums) // 2, 0, -1):\n        count = 0\n        for j in range(i, len(nums)):\n            if nums[j] < nums[j-1]:\n                nums[j], nums[j-1] = nums[j-1], nums[j]\n                count += 1\n        if count == 0:\n            return\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    max_val = len(nums)\n    for i in range(max_val):\n        if i == max_val-1:\n            break\n        if nums[i] > nums[i+1]:\n            l, r = i, max_val-1\n            while l!= r:\n                nums[l], nums[r] = nums[r], nums[l]\n                l += 1\n                r -= 1\n            if i >= 1:\n                nums[:i] = nums[:i][::-1]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # The algorithm is as follows:\n    # 1) We keep a record of the position of each number in the original list.\n    # 2) We then iterate through the list, moving each number up to its correct position.\n    # 3) We then move the number down until it's in the correct position\n    # 4) We then reverse the list from the correct position to the end of the list.\n    #\n    # For example, say the list contains [1, 5, 3, 2, 4, 6] and the positions are [0, 2, 4, 1, 3, 5].\n    # The algorithm will then go through the list and perform the following:\n    # 1) 1) The number 1 is moved to the end of the list (position 4)\n    # 2) 3) 2) The number 3 is moved to the end of the list (position 5)\n    # 3) 5) 4) 4) The number 2 is moved to the end of the list (position 4)\n    # 4) 6) 6) The number 4 is moved to the end of the list (position 4)\n    #\n    # Once the list has been sorted, it will return [1, 2, 3, 4, 5, 6]\n    def pancake_sort_helper(nums, start, end):\n        '''\n        Helper function for pancake_sort that sorts the list from index start to index end - 1\n        '''\n        # initialize variables\n        i = end\n        j = start\n        pivot = nums[end]\n        # we iterate backwards until we find a number that is larger than the pivot\n        # this means that the number will be moved to the start of the list\n        while i > j:\n            # we check if the current number is larger than the pivot\n            if nums[i] > pivot:\n                # we swap the two numbers, since we know that the number at the end of the list is the largest number\n                nums[i], nums[j] = nums[j], nums[i]\n                # we move the index to the start of the list\n                j -= 1\n            # we increment the index we are looking at\n            i -= 1\n        # we want to reverse the list starting from the start to the end\n        # we want to reverse the list starting from the end to the start\n        nums[start:end+1] = nums[end:start:-1]\n        # we need to return the start, since this is the start of the list after we reverse it\n        return start\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(nums, start, end):\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list_len = len(list1)\n    if list_len!= len(list2) or list_len!= len(list3):\n        return 0\n    else:\n        counter = 0\n        for i in range(0,list_len):\n            if list1[i] == list2[i] and list1[i] == list3[i]:\n                counter += 1\n        return counter\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    counter = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            counter += 1\n    for i in range(len(list3)):\n        if list3[i] == list2[i]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    print 'list1',list1,list2,list3\n    #print [1,1,1]\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j] and list3[i] == list3[j]:\n                count = count + 1\n                #print count\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list1 = sorted(list1)\n    list2 = sorted(list2)\n    list3 = sorted(list3)\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return len([item for item in list1 if item == item in list2 and item == item in list3])\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    print(len(list1)==len(list2)==len(list3))\n    \ndef count_overlap(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    l1=len(list1)\n    l2=len(list2)\n    l3=len(list3)\n    \n    if l1<l2:\n        l1,l2=l2,l1\n    if l1<l3:\n        l1,l3=l3,l1\n    if l2<l3:\n        l2,l3=l3,l2\n    \n    res=0\n    for i in range(l1):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            res+=1\n    print(res)\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for item1 in list1:\n        for item2 in list2:\n            if item1 == item2:\n                count += 1\n    print(count)\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] and list1[i] == list3[k]:\n                    count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return sum([1 for i in range(len(list1)) if list1[i]==list2[i] and list2[i]==list3[i]])\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input) - Input.count(())\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    l = Input.count(tuple)\n    return l\ndef find_unique(Input):\n    '''\n    Write a function to find number of unique tuples present in the given list.\n    '''\n    m = len(set(Input))\n    return m\ndef find_unique_tuples(Input):\n    '''\n    Write a function to find number of unique tuples present in the given list of tuples.\n    '''\n    n = len(set(Input))\n    return n\ndef is_increasing(Input):\n    '''\n    Write a function to determine if the given list is increasing or not.\n    '''\n    o = sorted(Input)\n    return o == Input\ndef is_descending(Input):\n    '''\n    Write a function to determine if the given list is descending or not.\n    '''\n    u = sorted(Input, reverse=True)\n    return u == Input\ndef are_almost_equal(Input1, Input2):\n    '''\n    Write a function to determine if the given two lists are almost equal or not.\n    '''\n    if len(Input1)!= len(Input2):\n        return False\n    else:\n        for i in range(len(Input1)):\n            if Input1[i] == Input2[i]:\n                return True\n            else:\n                return False\ndef are_same_size(Input1, Input2):\n    '''\n    Write a function to determine if the given two lists have same size or not.\n    '''\n    if len(Input1)!= len(Input2):\n        return False\n    else:\n        return True\ndef are_almost_equal_dict(Input1, Input2):\n    '''\n    Write a function to determine if the given two lists are almost equal or not.\n    '''\n    if len(Input1)!= len(Input2):\n        return False\n    else:\n        for i in Input1:\n            if Input1[i] == Input2[i]:\n                return True\n            else:\n                return False\ndef find_min_diff_dict(Input):\n    '''\n    Write a function to find the smallest difference between any two elements of the given dictionary.\n    '''\n    d = sorted(Input)\n    return d[len(d)-1] - d[0]\ndef find_max_diff_dict(Input):\n    '''\n    Write a function to find the largest difference between any two elements of the given dictionary.\n    '''\n    d = sorted(Input)\n    return d[len(d)-1] - d[0]\ndef largest_to_smallest(Input):\n    '''\n    Write a function to return a list of numbers with all the odd numbers first and then all the even numbers.\n    '''\n    o = []\n    e = []\n    for i in Input:\n        if i % 2 == 0:\n            e.append(i)\n        else:\n            o.append(i)\n    o.extend(e)\n    return o\ndef smallest_to_largest(Input):\n    '''\n    Write a function to return a list of numbers with all the even numbers first and then all the odd numbers.\n    '''\n    o = []\n    e = []\n    for i in Input:\n        if i % 2 == 0:\n            e.append(i)\n        else:\n            o.append(i)\n    o.extend(e)\n    return o\ndef is_sublist(Input1, Input2):\n    '''\n    Write a function to determine if a given list is a sublist of another given list.\n    '''\n    if Input2 in Input1:\n        return True\n    else:\n        return False\ndef find_missing_number(Input):\n    '''\n    Write a function to find the missing number in a given list.\n    '''\n    a = set(Input)\n    b = set(range(1,len(Input)+1))\n    return list(b - a)\ndef find_missing_number_dict(Input):\n    '''\n    Write a function to find the missing number in a given dictionary.\n    '''\n    a = set(Input.values())\n    b = set(range(1,len(Input)+1))\n    return list(b - a)\ndef find_missing_number_tuple(Input):\n    '''\n    Write a function to find the missing number in a given tuple.\n    '''\n    a = set(Input)\n    b = set(range(1,len(Input)+1))\n    return list(b - a)\ndef find_missing_number_set(Input):\n    '''\n    Write a function to find the missing number in a given set.\n    '''\n    a = set(Input)\n    b = set(range(1,len(Input)+1))\n    return list(b - a)\ndef find_missing_number_str(Input):\n    '''\n    Write a function to find the missing number in a given string.\n    '''\n    a = set(Input)\n    b = set(range(1,len(Input)+1))\n    return list(b - a)\ndef find_missing_number_int(Input):\n    '''\n    Write a function to find the missing number in a given integer.\n    '''\n    a = set(Input)\n    b = set(range(1,len(Input)+1))\n    return list(b - a)\ndef is_string_rotated(Input1, Input2):\n    '''\n    Write a function to determine if a given string is a rotation of another given string.\n    '''\n    if Input2 in Input1 + Input1:\n        return True\n    else:\n        return False\ndef is_string_rotated_using_only_one_character(Input1, Input2):\n    '''\n    Write a function to determine if a given string is a rotation of another given string.\n    '''\n    if Input2 in Input1:\n        return True\n    else:\n        return False\ndef is_string_rotated_2_using_only_one_character(Input1, Input2):\n    '''\n    Write a function to determine if a given string is a rotation of another given string.\n    '''\n    if Input2 in Input1[1:] + Input1[0]:\n        return True\n    else:\n        return False\ndef is_string_rotated_2_using_mismatches(Input1, Input2):\n    '''\n    Write a function to determine if a given string is a rotation of another given string.\n    '''\n    if Input2 in Input1:\n        return True\n    else:\n        return False\ndef is_string_rotated_2_using_mismatches_dict(Input1, Input2):\n    '''\n    Write a function to determine if a given string is a rotation of another given string.\n    '''\n    if Input2 in Input1:\n        return True\n    else:\n        return False\ndef is_string_rotated_3_using_mismatches(Input1, Input2):\n    '''\n    Write a function to determine if a given string is a rotation of another given string.\n    '''\n    if Input2 in Input1:\n        return True\n    else:\n        return False\ndef is_string_rotated_4_using_mismatches(Input1, Input2):\n    '''\n    Write a function to determine if a given string is a rotation of another given string.\n    '''\n    if Input2 in Input1:\n        return True\n    else:\n        return False\ndef is_string_rotated_4_using_mismatches_dict(Input1, Input2):\n    '''\n    Write a function to determine if a given string is a rotation of another given string.\n    '''\n    if Input2 in Input1:\n        return True\n    else:\n        return False\ndef is_string_rotated_4_using_mismatches_set(Input1, Input2):\n    '''\n    Write a function to determine if a given string is a rotation of another given string.\n    '''\n    if Input2 in Input1:\n        return True\n    else:\n        return False\ndef are_string_rotated_using_only_one_character(Input1, Input2):\n    '''\n    Write a function to determine if a given string is a rotation of another given string.\n    '''\n    if Input2 in Input1[1:] + Input1[0]:\n        return True\n    else:\n        return False\ndef are_string_rotate"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == type(()):\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for x in Input:\n        if type(x) == list:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    List = []\n    count = 0\n    for item in Input:\n        if type(item) == type(List):\n            count += 1\n            List.append(item)\n        else:\n            List.append(item)\n    return count, List\n    \ndef find_tuples(Input): \n    '''\n    Write a function to find number of tuples present in the given tuple.\n    '''\n    Tuple = []\n    count = 0\n    for item in Input:\n        if type(item) == type(Tuple):\n            count += 1\n            Tuple.append(item)\n        else:\n            Tuple.append(item)\n    return count, Tuple\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists = 0\n    for i in Input:\n        if type(i) is list:\n            lists += 1\n    return lists\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return Input.count(\"(\") - Input.count(\")\")\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # Base Case: If the tuple is empty then no list is present\n    if Input == ():\n        return 0\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len([i for i in Input if isinstance(i, list)])\n    \nprint(find_lists((1, 2, [3, 4, [5, 6]], 7, 8, 9, 10)))"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for i in Input: \n        if type(i) is list: \n            count+=1\n    return count\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    for i in range(len(arr)): \n        for j in range(i+1,len(arr)):\n            if abs(arr[i]-arr[j])>diff: \n                diff=abs(arr[i]-arr[j])\n    return diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # 0) Check if the array is empty\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)-1):\n        abs_diff = abs(sorted_arr[i+1] - sorted_arr[i])\n        if abs_diff > max_diff:\n            max_diff = abs_diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1] - arr[0]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if abs(arr[i]-arr[j]) > max_diff:\n                max_diff = abs(arr[i]-arr[j])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr_len = len(arr)\n    max_diff = 0\n    for i in range(arr_len):\n        for j in range(i+1, arr_len):\n            max_diff = max(abs(arr[i] - arr[j]), max_diff)\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return arr[-1] - arr[0]\n    \n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr_max = abs(arr[0] - arr[1])\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > arr_max:\n                arr_max = diff\n    return arr_max\n    \ndef sort_Squares(arr):\n    '''\n    Write a python function to sort the array of integers according to the square of integers in ascending order.\n    '''\n    arr.sort(key=lambda x:x*x)\n    return arr\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    print arr[-1] - arr[0]\n    return\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    arr.reverse()\n    diff = arr[0] - arr[1]\n    for i in range(1, len(arr)):\n        diff = max(diff, arr[i] - arr[i-1])\n    return diff\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    s = (-b/a)\n    d = (-b/a) * a\n    x = s + d\n    y = (n - x) / a\n    if (x - y) == 0:\n        return (x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a > 0:\n        y = n / a\n        if y % 1 == 0:\n            return int(y), a\n        else:\n            return None\n    elif b > 0:\n        x = n / b\n        if x % 1 == 0:\n            return b, int(x)\n        else:\n            return None\n    else:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    return solve_equation(a, b, n)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # For this to be one of the solutions, we need b - a * n / x to be 0\n    x = (b - a * n / b) / (a - a * n / a)\n    y = a * x / b\n    if x == int(x) and y == int(y):\n        return x, y\n    else:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # base cases:\n    if n == 0:\n        return (0, 1)\n    if n < 0:\n        return None\n    if n % a == 0:\n        return (n / a, 0)\n    else:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return (b, n/b)\n    if b == 0:\n        return (n/a, 0)\n    else:\n        x = n/a\n        y = n/b\n        return (x, y)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n + 1):\n        y = (n - a * x) / b\n        if y == int(y):\n            return int(x), int(y)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return (0, 1)\n    if a == 0:\n        return (None, b*(n//b))\n    else:\n        gcd = math.gcd(a, b)\n        quotient = n//gcd\n        return (None, b*quotient) if b*quotient < a*quotient else (a*quotient, b*quotient)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        return (n / a, 0)\n    if n == 0:\n        return (0, n / b)\n    a_pow = a\n    b_pow = b\n    ab_pow = a * b\n    solution = find_solution(a_pow, b_pow, n - ab_pow)\n    if solution:\n        x = solution[0]\n        y = solution[1]\n        return (a * x + b * y, x)\n    else:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    i = 1\n    s = 0\n    while i*i <= n:\n        if n % i == 0:\n            p = i + n / i\n            if p > b and p < a:\n                return (i, int(n / i))\n        i += 1\n    return None\n    \n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1.clear()\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        if item in list1:\n            list1.remove(item)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for x in list2:\n        while x in list1:\n            list1.remove(x)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        if item in list1:\n            list1.remove(item)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list(set(list1) - set(list2))\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [i for i in list1 if i not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # pylint: disable=W0104\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1:\n        return n\n    return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n if n < 0 else n + sum_series(n - 2)\n    "
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n if n<=2 else (n-2) + sum_series(n-2)\n    "
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n < 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_series(n - 2)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * s * (l ** 2)) / tan(pi/l)\n    print area\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (l ** 2) / (4 * tan(pi / s))\ndef perimeter_polygon(s, l):\n    '''\n    Write a function to calculate the perimeter of a regular polygon given the length and number of its sides.\n    '''\n    return s * l\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given the radius.\n    '''\n    return pi * r ** 2\ndef perimeter_circle(r):\n    '''\n    Write a function to calculate the perimeter of a circle given the radius.\n    '''\n    return 2 * pi * r\ndef area_rectangle(w, l):\n    '''\n    Write a function to calculate the area of a rectangle given the width and length.\n    '''\n    return w * l\ndef perimeter_rectangle(w, l):\n    '''\n    Write a function to calculate the perimeter of a rectangle given the width and length.\n    '''\n    return 2 * (w + l)\ndef area_triangle(w, l):\n    '''\n    Write a function to calculate the area of a triangle given the width and length.\n    '''\n    return 0.5 * w * l\ndef perimeter_triangle(w, l):\n    '''\n    Write a function to calculate the perimeter of a triangle given the width and length.\n    '''\n    return w + l\ndef area_trapezium(w, l, t):\n    '''\n    Write a function to calculate the area of a trapezium given the width, length, and height.\n    '''\n    return 1.5 * area_triangle(w, l) + area_triangle(t, w)\ndef perimeter_trapezium(w, l, t):\n    '''\n    Write a function to calculate the perimeter of a triangle given the width, length, and height.\n    '''\n    return 2 * (area_triangle(w, l) + area_triangle(t, w))\ndef area_square(s):\n    '''\n    Write a function to calculate the area of a square given the length of its side.\n    '''\n    return s ** 2\ndef perimeter_square(s):\n    '''\n    Write a function to calculate the perimeter of a square given the length of its side.\n    '''\n    return 4 * s\ndef area_triangle_inequality(w, l):\n    '''\n    Write a function to calculate the area of a triangle given the width and length.\n    '''\n    return area_triangle(w, l) - area_triangle(l, w)\ndef perimeter_triangle_inequality(w, l):\n    '''\n    Write a function to calculate the perimeter of a triangle given the width and length.\n    '''\n    return 2 * (area_triangle(w, l) - area_triangle(w, l))\ndef area_square_inequality(s):\n    '''\n    Write a function to calculate the area of a square given the length of its side.\n    '''\n    return s ** 2 - s\ndef perimeter_square_inequality(s):\n    '''\n    Write a function to calculate the perimeter of a square given the length of its side.\n    '''\n    return 2 * s\ndef area_rectangle_inequality(w, l):\n    '''\n    Write a function to calculate the area of a rectangle given the width and length.\n    '''\n    return area_rectangle(w, l) - area_rectangle(l, w)\ndef perimeter_rectangle_inequality(w, l):\n    '''\n    Write a function to calculate the perimeter of a rectangle given the width and length.\n    '''\n    return 2 * (area_rectangle(w, l) - area_rectangle(w, l))\ndef area_triangle_inequality(w, l):\n    '''\n    Write a function to calculate the area of a triangle given the width and length.\n    '''\n    return area_triangle(w, l) - area_triangle(l, w)\ndef perimeter_triangle_inequality(w, l):\n    '''\n    Write a function to calculate the perimeter of a triangle given the width and length.\n    '''\n    return 2 * (area_triangle(w, l) - area_triangle(l, w))\ndef area_square_inequality(s):\n    '''\n    Write a function to calculate the area of a square given the length of its side.\n    '''\n    return s ** 2 - s\ndef perimeter_square_inequality(s):\n    '''\n    Write a function to calculate the perimeter of a square given the length of its side.\n    '''\n    return 2 * s\ndef is_triangle(a, b, c):\n    '''\n    Write a function to determine if three sides make a triangle.\n    '''\n    return a + b > c and a + c > b and b + c > a\ndef is_triangle_inequality(a, b, c):\n    '''\n    Write a function to determine if three sides make a triangle.\n    '''\n    return a + b < c or a + c < b or b + c < a\ndef is_triangle_inequality_2(a, b, c):\n    '''\n    Write a function to determine if three sides make a triangle.\n    '''\n    return a ** 2 + b ** 2 == c ** 2 or a ** 2 + c ** 2 == b ** 2 or c ** 2 + b ** 2 == a ** 2\ndef is_triangle_inequality_3(a, b, c):\n    '''\n    Write a function to determine if three sides make a triangle.\n    '''\n    return a + b > c and a + c > b and b + c > a\ndef is_triangle_inequality_4(a, b, c):\n    '''\n    Write a function to determine if three sides make a triangle.\n    '''\n    return a + b > c and a + c > b and b + c > a\ndef is_triangle_inequality_5(a, b, c):\n    '''\n    Write a function to determine if three sides make a triangle.\n    '''\n    return a ** 2 + b ** 2 == c ** 2 or a ** 2 + c ** 2 == b ** 2 or c ** 2 + b ** 2 == a ** 2\ndef is_triangle_inequality_6(a, b, c):\n    '''\n    Write a function to determine if three sides make a triangle.\n    '''\n    return a ** 2 + b ** 2 < c ** 2 or a ** 2 + c ** 2 < b ** 2 or c ** 2 + b ** 2 < a ** 2\ndef is_triangle_inequality_7(a, b, c):\n    '''\n    Write a function to determine if three sides make a triangle.\n    '''\n    return a ** 2 + b ** 2 < c ** 2 or a ** 2 + c ** 2 < b ** 2 or c ** 2 + b ** 2 < a ** 2\ndef is_triangle_inequality_8(a, b, c):\n    '''\n    Write a function to determine if three sides make a triangle.\n    '''\n    return a ** 2 + b ** 2 > c ** 2 or a ** 2 + c ** 2 > b ** 2 or c ** 2 + b ** 2 > a ** 2\ndef is_triangle_inequality_9(a, b, c):\n    '''\n    Write a function to determine if three sides make a triangle.\n    '''\n    return a ** 2 + b ** 2 > c ** 2 or a ** 2 + c ** 2 > b ** 2 or c ** 2 + b ** 2 > a ** 2\ndef is_triangle_inequality_10(a, b, c):\n    '''\n    Write a function to determine if three sides make a triangle.\n    '''\n    return a ** 2 + b ** 2 < c ** 2 or a ** 2 + c ** 2 < b ** 2 or c ** 2 + b ** 2 < a ** 2\ndef is_triangle_inequality_11(a, b, c):\n    '''\n    Write a function to determine if three sides make a triangle.\n    '''\n    return a ** 2 + b ** 2 > c ** 2 or a ** 2 + c ** 2 > b ** 2 or c ** 2 + b ** 2 > a ** 2\ndef is_triangle_inequality_12(a, b, c):\n    '''\n    Write a function to determine if three sides make a triangl"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * s**2) * (tan(pi/l))**2\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * s * l * tan(pi/l)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.25 * (s * s) * l\ndef area_polygon2(n, r):\n    '''\n    Write a function to calculate the area of a regular polygon given the number of its sides and the length of its side.\n    '''\n    return (n * r * r) / (4 * tan(pi / n))\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*(s+2*l)*(1/2))/tan(pi/l)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25 * (s * (s + 2 * l)) * tan(pi/s))\ndef perimeter_polygon(s, l):\n    '''\n    Write a function to calculate the perimeter of a regular polygon given the length and number of its sides.\n    '''\n    return (s * (s + 2 * l))\ndef perimeter_polygon_using_area(s, l):\n    '''\n    Write a function to calculate the perimeter of a regular polygon given the length and number of its sides.\n    '''\n    return (4 * (s + 2 * l))\ndef perimeter_polygon_using_perimeter(s, l):\n    '''\n    Write a function to calculate the perimeter of a regular polygon given the length and number of its sides.\n    '''\n    return (s * (s + 2 * l))\ndef is_right_triangle(a, b, c):\n    '''\n    Write a function that takes three arguments - the lengths of the sides of a right triangle - and returns True if the triangle is a right triangle, and False otherwise.\n    '''\n    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\ndef is_right_triangle_using_area(a, b, c):\n    '''\n    Write a function that takes three arguments - the lengths of the sides of a right triangle - and returns True if the triangle is a right triangle, and False otherwise.\n    '''\n    if a**2 + b**2 == c**2:\n        return True\n    elif a**2 + c**2 == b**2:\n        return True\n    elif b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\ndef is_right_triangle_using_perimeter(a, b, c):\n    '''\n    Write a function that takes three arguments - the lengths of the sides of a right triangle - and returns True if the triangle is a right triangle, and False otherwise.\n    '''\n    if a + b > c and b + c > a and a + c > b:\n        return True\n    else:\n        return False\ndef check_if_triangle(s1, s2, s3):\n    '''\n    Write a function to check if the three arguments are the lengths of the sides of a triangle. \n    '''\n    if s1 + s2 > s3 and s2 + s3 > s1 and s1 + s3 > s2:\n        return True\n    else:\n        return False\ndef get_sides(s1, s2, s3):\n    '''\n    Write a function to check if the three arguments are the lengths of the sides of a triangle. \n    '''\n    if s1 + s2 > s3 and s2 + s3 > s1 and s1 + s3 > s2:\n        return True\n    else:\n        return False\ndef get_sides_using_perimeter(s1, s2, s3):\n    '''\n    Write a function to check if the three arguments are the lengths of the sides of a triangle. \n    '''\n    if s1 + s2 > s3 and s2 + s3 > s1 and s1 + s3 > s2:\n        return True\n    elif s1 + s2 > s3 and s2 + s3 > s1 and s1 + s3 > s2:\n        return True\n    elif s1 + s2 > s3 and s2 + s3 > s1 and s1 + s3 > s2:\n        return True\n    else:\n        return False\ndef is_triangle(s1, s2, s3):\n    '''\n    Write a function to check if the three arguments are the lengths of the sides of a triangle. \n    '''\n    if s1 + s2 > s3 and s2 + s3 > s1 and s1 + s3 > s2:\n        return True\n    else:\n        return False\ndef get_perimeter(s1, s2, s3):\n    '''\n    Write a function to check if the three arguments are the lengths of the sides of a triangle. \n    '''\n    if s1 + s2 > s3 and s2 + s3 > s1 and s1 + s3 > s2:\n        return True\n    else:\n        return False\ndef get_perimeter_using_area(s1, s2, s3):\n    '''\n    Write a function to check if the three arguments are the lengths of the sides of a triangle. \n    '''\n    if s1 + s2 > s3 and s2 + s3 > s1 and s1 + s3 > s2:\n        return True\n    elif s1 + s2 > s3 and s2 + s3 > s1 and s1 + s3 > s2:\n        return True\n    elif s1 + s2 > s3 and s2 + s3 > s1 and s1 + s3 > s2:\n        return True\n    else:\n        return False\ndef get_perimeter_using_perimeter(s1, s2, s3):\n    '''\n    Write a function to check if the three arguments are the lengths of the sides of a triangle. \n    '''\n    if s1 + s2 > s3 and s2 + s3 > s1 and s1 + s3 > s2:\n        return True\n    elif s1 + s2 > s3 and s2 + s3 > s1 and s1 + s3 > s2:\n        return True\n    elif s1 + s2 > s3 and s2 + s3 > s1 and s1 + s3 > s2:\n        return True\n    else:\n        return False\ndef is_isosceles_triangle(s1, s2, s3):\n    '''\n    Write a function to check if the three arguments are the lengths of the sides of a triangle. \n    '''\n    if s1 == s2 or s1 == s3 or s2 == s3:\n        return True\n    else:\n        return False\ndef get_isosceles_triangle_using_perimeter(s1, s2, s3):\n    '''\n    Write a function to check if the three arguments are the lengths of the sides of a triangle. \n    '''\n    if s1 == s2 or s1 == s3 or s2 == s3:\n        return True\n    else:\n        return False\ndef get_isosceles_triangle_using_area(s1, s2, s3):\n    '''\n    Write a function to check if the three arguments are the lengths of the sides of a triangle. \n    '''\n    if s1 == s2 or s1 == s3 or s2 == s3:\n        return True\n    else:\n        return False\ndef is_isosceles_triangle_using_perimeter(s1, s2, s3):\n    '''\n    Write a function to check if the three arguments are the lengths of the sides of a triangle. \n    '''\n    if s1 == s2 or s1 == s3 or s2 == s3:\n        return True\n    else:\n        return False\ndef is_isosceles_triangle_using_area(s1, s2, s3):\n    '''\n    Write a function to check if the three arguments are the lengths of the sides of a triangle. \n    '''\n    if s1 == s2 or s1 == s3 or s2 == s3:\n        return True\n    else:\n        return False\ndef get_hypotenuse(a, b):\n    '''\n    Write a function to calculate the length of the hypotenuse of a right triangle given the lengths of the other two sides.\n    '''\n    return (a**2 + b**2)**0.5\ndef get_hypotenuse_using_perimeter(a, b):\n    '''\n    Write a function to calculate the length of the hypotenuse of a right triangle given the lengths of the other two sides.\n    '''\n    return (a**2 + b**2)**0.5\ndef get_hypotenuse_using_area(a, b):\n    '''\n    Write a function to calculate the length of the hypotenuse of a right triangle given the lengths of the other two sides.\n    '''\n    return (a**2 + b**2)**0.5\ndef is_right_triangle("
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25*l*s*tan(pi/s))\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25*l*s**2)/(tan(pi/s))\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divs = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divs.append(i)\n    return sum(divs)\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_of_divisors=0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i==0:\n            if n/i==i:\n                sum_of_divisors+=i\n            else:\n                sum_of_divisors+=i\n                sum_of_divisors+=n/i\n    if sum_of_divisors==n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    #return sum_divisors(n) == sum_divisors(2*n)\n    return sum_divisors(n) == sum_divisors(2*n)\n    \ndef sum_divisors(n): \n    '''\n    Return the sum of the divisors of n.\n    '''\n    if n == 0: \n        return 0\n    sqrt = math.sqrt(n)\n    if int(sqrt) == sqrt: \n        return 1 + sum_divisors(int(sqrt))\n    divisors = []\n    for i in range(1, int(sqrt) + 1): \n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n / i)\n    return sum(divisors)\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return False\n    else:\n        divisors = list(range(1, int(math.sqrt(n)) + 1))\n        for div in divisors:\n            if n % div == 0:\n                s1 = 0\n                s2 = 0\n                for i in range(1, div):\n                    if div * i <= n:\n                        s1 += i\n                for i in range(1, n // div):\n                    if n % i == 0:\n                        s2 += i\n                if s1 == s2:\n                    return True\n                else:\n                    continue\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s = 0\n    for i in range(1,n): \n        if n%i==0: \n            s = s + i\n    return s\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n<1:\n        return False\n    else:\n        divisors_1=[]\n        divisors_2=[]\n        for i in range(1,n):\n            if n%i==0:\n                divisors_1.append(i)\n        for j in divisors_1:\n            if j not in divisors_2:\n                divisors_2.append(j)\n        if sum(divisors_1)==sum(divisors_2):\n            return True\n        else:\n            return False\ndef div_sum2(n):\n    if n<1:\n        return False\n    else:\n        divisors_1=[1]\n        divisors_2=[1]\n        for i in range(2,n):\n            if n%i==0:\n                divisors_1.append(i)\n        for j in divisors_1:\n            if j not in divisors_2:\n                divisors_2.append(j)\n        if sum(divisors_1)==sum(divisors_2):\n            return True\n        else:\n            return False\ndef div_sum3(n):\n    if n<1:\n        return False\n    else:\n        divisors_1=set([1])\n        divisors_2=set([1])\n        for i in range(2,n):\n            if n%i==0:\n                divisors_1.add(i)\n        for j in divisors_1:\n            if j not in divisors_2:\n                divisors_2.add(j)\n        if sum(divisors_1)==sum(divisors_2):\n            return True\n        else:\n            return False\ndef div_sum4(n):\n    if n<1:\n        return False\n    else:\n        divisors_1=set([1])\n        divisors_2=set([1])\n        for i in range(2,n):\n            if n%i==0:\n                divisors_1.add(i)\n        for j in divisors_1:\n            if j not in divisors_2:\n                divisors_2.add(j)\n        if sum(divisors_1)==sum(divisors_2):\n            return True\n        else:\n            return False\ndef div_sum5(n):\n    if n<1:\n        return False\n    else:\n        divisors_1=set([1])\n        divisors_2=set([1])\n        for i in range(2,n):\n            if n%i==0:\n                divisors_1.add(i)\n        for j in divisors_1:\n            if j not in divisors_2:\n                divisors_2.add(j)\n        if sum(divisors_1)==sum(divisors_2):\n            return True\n        else:\n            return False\ndef div_sum6(n):\n    if n<1:\n        return False\n    else:\n        divisors_1=set([1])\n        divisors_2=set([1])\n        for i in range(2,n):\n            if n%i==0:\n                divisors_1.add(i)\n        for j in divisors_1:\n            if j not in divisors_2:\n                divisors_2.add(j)\n        if sum(divisors_1)==sum(divisors_2):\n            return True\n        else:\n            return False\ndef div_sum7(n):\n    if n<1:\n        return False\n    else:\n        divisors_1=set([1])\n        divisors_2=set([1])\n        for i in range(2,n):\n            if n%i==0:\n                divisors_1.add(i)\n        for j in divisors_1:\n            if j not in divisors_2:\n                divisors_2.add(j)\n        if sum(divisors_1)==sum(divisors_2):\n            return True\n        else:\n            return False\ndef div_sum8(n):\n    if n<1:\n        return False\n    else:\n        divisors_1=set([1])\n        divisors_2=set([1])\n        for i in range(2,n):\n            if n%i==0:\n                divisors_1.add(i)\n        for j in divisors_1:\n            if j not in divisors_2:\n                divisors_2.add(j)\n        if sum(divisors_1)==sum(divisors_2):\n            return True\n        else:\n            return False\ndef div_sum9(n):\n    if n<1:\n        return False\n    else:\n        divisors_1=set([1])\n        divisors_2=set([1])\n        for i in range(2,n):\n            if n%i==0:\n                divisors_1.add(i)\n        for j in divisors_1:\n            if j not in divisors_2:\n                divisors_2.add(j)\n        if sum(divisors_1)==sum(divisors_2):\n            return True\n        else:\n            return False\ndef div_sum10(n):\n    if n<1:\n        return False\n    else:\n        divisors_1=set([1])\n        divisors_2=set([1])\n        for i in range(2,n):\n            if n%i==0:\n                divisors_1.add(i)\n        for j in divisors_1:\n            if j not in divisors_2:\n                divisors_2.add(j)\n        if sum(divisors_1)==sum(divisors_2):\n            return True\n        else:\n            return False\ndef div_sum11(n):\n    if n<1:\n        return False\n    else:\n        divisors_1=set([1])\n        divisors_2=set([1])\n        for i in range(2,n):\n            if n%i==0:\n                divisors_1.add(i)\n        for j in divisors_1:\n            if j not in divisors_2:\n                divisors_2.add(j)\n        if sum(divisors_1)==sum(divisors_2):\n            return True\n        else:\n            return False\ndef div_sum12(n):\n    if n<1:\n        return False\n    else:\n        divisors_1=set([1])\n        divisors_2=set([1])\n        for i in range(2,n):\n            if n%i==0:\n                divisors_1.add(i)\n        for j in divisors_1:\n            if j not in divisors_2:\n                divisors_2.add(j)\n        if sum(divisors_1)==sum(divisors_2):\n            return True\n        else:\n            return False\ndef div_sum13(n):\n    if n<1:\n        return False\n    else:\n        divisors_1=set([1])\n        divisors_2=set([1])\n        for i in range(2,n):\n            if n%i==0:\n                divisors_1.add(i)\n        for j in divisors_1:\n            if j not in divisors_2:\n                divisors_2.add(j)\n        if sum(divisors_1)==sum(divisors_2):\n            return True\n        else:\n            return False\ndef div_sum14(n):\n    if n<1:\n        return False\n    else:\n        divisors_1=set([1])\n        divisors_2=set([1])\n        for i in range(2,n):\n            if n%i==0:\n                divisors_1.add(i)\n        for j in divisors_1:\n            if j not in divisors_2:\n                divisors_2.add("
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n % 2 == 0:\n        print('no')\n        return\n    else:\n        divisors = [1]\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                divisors.append(i)\n                if i!= n // i:\n                    divisors.append(n // i)\n        divisors = set(divisors)\n        if sum(divisors) == n:\n            print('yes')\n        else:\n            print('no')\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    #if n == 0 or n == 1: return True\n    #else:\n    #    for i in range(2,math.floor(math.sqrt(n))+1):\n    #        if n%i == 0:\n    #            if n/i == i:\n    #                return False\n    #            else:\n    #                if (n/i)+i == n:\n    #                    return False\n    #    return True\n    '''\n    Given two integers, write a function to check if they are amicable pairs.\n    '''\n    if n == 0 or n == 1: return False\n    else:\n        \n        #for i in range(2,math.floor(math.sqrt(n))+1):\n        #    if n%i == 0:\n        #        if (n/i) == i:\n        #            return False\n        #        else:\n        #            if (n/i)+i == n:\n        #                return False\n        #    return True\n        \n        #return True\n        \n        #if n == sum(i for i in range(1, math.floor(math.sqrt(n))+1) if n%i == 0):\n        #    if n/i == i:\n        #        return False\n        #    else:\n        #        if (n/i)+i == n:\n        #            return False\n        #    return True\n        #else:\n        #    return False\n        \n        return sum(i for i in range(1,math.floor(math.sqrt(n))+1) if n%i == 0) == n\n        \n    #return True\n    "
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 1\n    i = 1\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            sum += i\n            if i!= n/i:\n                sum += n/i\n        i += 1\n    return sum == n\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    #i=1\n    #result=[]\n    #while i<n:\n    #    if n%i==0:\n    #        result.append(i)\n    #    i+=1\n    #return result[0]+result[-1]==n\n    return sum([i for i in range(1, n) if n % i == 0]) == n\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    total = 0\n    count = {}\n    for i in str1:\n        if i.isalpha() and i.upper() in count:\n            total += 1\n            count[i.upper()] += 1\n        elif i.isalpha() and i.lower() in count:\n            total += 1\n            count[i.lower()] += 1\n    return total\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    letters = [char for char in alphabet]\n    dic = {}\n    for letter in letters:\n        dic[letter] = str1.count(letter)\n    return dic\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    str1 = str1.lower()\n    count = 0\n    for i in range(len(str1)):\n        if alphabet.index(str1[i]) == alphabet.index(str1[i-1]):\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Alphanumeric characters\n    alphanum = 'abcdefghijklmnopqrstuvwxyz0123456789'\n    \n    # Count the characters\n    num_char = [0]*26\n    for char in str1:\n        if char.lower() in alphanum:\n            num_char[alphanum.index(char.lower())] += 1\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    num_char = [0] * 26\n    for i in range(len(str1)):\n        num_char[ord(str1[i]) - 97] += 1\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6, 'g':7, 'h':8, 'i':9, 'j':10, 'k':11, 'l':12,'m':13, 'n':14, 'o':15, 'p':16, 'q':17, 'r':18,'s':19, 't':20, 'u':21, 'v':22, 'w':23, 'x':24, 'y':25, 'z':26}\n    \n    count = 0\n    for letter in str1.lower():\n        if letter in alphabet:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # init_dict = {}\n    # for i in range(len(str1)):\n    #     init_dict[i] = str1.count(str1[i])\n    # return init_dict\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    #will need to be case insensitive as 'a' is counted as position 1 in this function\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    counts = {}\n    for x in str1.lower():\n        if x in counts:\n            counts[x] += 1\n        else:\n            counts[x] = 1\n    return counts\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    letters = {}\n    for char in str1:\n        if char in letters:\n            letters[char] += 1\n        else:\n            letters[char] = 1\n    return letters\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    return len([x for x in A if x ^ int(bin(x).count(\"1\") % 2) == 0])\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    ans = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i] ^ A[j] & 1 == 0:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    total = 0\n    for i in range(0, len(A)-1):\n        for j in range(i+1, len(A)):\n            if A[i]^A[j]%2 == 0:\n                total += 1\n    return total\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    ans = 0\n    for i in xrange(len(A)):\n        for j in xrange(i+1,len(A)):\n            if (A[i] ^ A[j] == 0) and (A[i] % 2 == 0) and (A[j] % 2 == 0):\n                ans += 1\n    return ans\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    ans = 0\n    for i in xrange(0, len(A)-1):\n        for j in xrange(i+1, len(A)):\n            if (A[i] ^ A[j]) & 1 == 0:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in xrange(len(A)): \n        for j in xrange(i+1, len(A)): \n            if A[i] ^ A[j] == 0: \n                even_pairs += 1\n    return even_pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for x in A:\n        for y in A:\n            if x ^ y == 0:\n                if x ^ y % 2 == 0:\n                    even_count += 1\n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    res = 0\n    \n    for i in range(0, len(A)):\n        for j in range(i, len(A)):\n            if (A[i] ^ A[j] == 0):\n                res += 1\n    \n    return res\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #print(A)\n    pairs = 0\n    for i in A:\n        for j in A:\n            if i!= j and i^j == (2*i + 2*j):\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    from operator import xor\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if xor(A[i],A[j])%2==0:\n                count += 1\n    return count\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    x = 1\n    while(x <= n):\n        x = x * 2\n    return x\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1<<(n-1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    assert(n > 0)\n    while n & (n-1) == 0: \n        n = n >> 1\n    return n | (n-1)\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 1 << (n-1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    elif n < 0:\n        return -1\n    else:\n        return 1 << (n - 1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1<<(n-1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    for i in range(n): \n        if (2**i >= n): \n            return (2**i) \n    return (2**i-1) \n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = int(n)\n    assert n >= 0 and int(math.log(n,2)) == math.log(n,2),'n must be a power of 2'\n    return 1<<(int(math.log(n,2))+1)\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n -= 1\n    count = 0\n    while(n/2 >= 1):\n        count += 1\n        n /= 2\n    return 2**count\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    def get_next_power_of_2(n):\n        return 2 ** int(ceil(log(n, 2)))\n    \n    return get_next_power_of_2(n)\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return len([i for i in x if i == a])\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    i=0\n    for n in a:\n        if n==x:\n            i+=1\n    return i\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    counter = 0\n    for n in a:\n        if n == x:\n            counter += 1\n    return counter\n    \ndef f(a):\n    '''\n    Write a function to return the largest element in a given list.\n    '''\n    max = a[0]\n    for n in a:\n        if n > max:\n            max = n\n    return max\n    \ndef prime(x):\n    '''\n    Write a function to determine if a given number is prime or not.\n    '''\n    if x == 2 or x == 3:\n        return True\n    if x % 2 == 0 or x < 2:\n        return False\n    for n in range(3, int(x**0.5 + 1), 2):\n        if x % n == 0:\n            return False\n    return True\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a = [0]*10000\n    for i in range(len(x)):\n        a[x[i]] = a[x[i]] + 1\n    return a\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count = count+1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count +=1\n    return count\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])                                                                                                                                                                                                                        \n    \n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    list2 = []\n    for i in range(m, n+1):\n        list2.append(list1[i])\n    return sum(list2)\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0                                                                                                                                                                                        \n    for index in range(m, n):                                                                                                                                                                                        \n        sum = sum + list1[index]                                                                                                                                                                                    \n    return sum                                                                                                                                                                                    \n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_list = []\n    \n    for i in list1:\n        if i >= m and i <= n:\n            sum_list.append(i)\n    \n    return sum(sum_list)\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*(3*a+3*math.sqrt(3)*a) / 2\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #Input: length of each side of pentagon in cm.\n    #Output: Perimeter of pentagon in cm.\n    return (5*a**2)/2\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a<=5:\n        return a*10\n    else:\n        return ((5*a**2)/(4*math.tan(math.pi/5)))\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from its side lengths.\n    '''\n    return (5 * a ** 2) / (4 * math.sqrt(5))\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from its side lengths.\n    '''\n    return (6 * a ** 2) / (4 * math.sqrt(3))\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return a*7\ndef area_heptagon(a):\n    '''\n    Write a function to find the area of a regular heptagon from its side lengths.\n    '''\n    return (7 * a ** 2) / (4 * math.sqrt(7))\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*8\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from its side lengths.\n    '''\n    return (8 * a ** 2) / (4 * math.sqrt(2))\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*9\ndef area_nonagon(a):\n    '''\n    Write a function to find the area of a regular nonagon from its side lengths.\n    '''\n    return (9 * a ** 2) / (4 * math.sqrt(3))\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    return a*10\ndef area_decagon(a):\n    '''\n    Write a function to find the area of a regular decagon from its side lengths.\n    '''\n    return (10 * a ** 2) / (4 * math.sqrt(5))\ndef perimeter_undecagon(a):\n    '''\n    Write a function to find the perimeter of a regular undecagon from the length of its sides.\n    '''\n    return a*11\ndef area_undecagon(a):\n    '''\n    Write a function to find the area of a regular undecagon from its side lengths.\n    '''\n    return (11 * a ** 2) / (4 * math.sqrt(7))\ndef perimeter_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular dodecagon from the length of its sides.\n    '''\n    return a*12\ndef area_dodecagon(a):\n    '''\n    Write a function to find the area of a regular dodecagon from its side lengths.\n    '''\n    return (12 * a ** 2) / (4 * math.sqrt(2))\ndef perimeter_tredecagon(a):\n    '''\n    Write a function to find the perimeter of a regular tredecagon from the length of its sides.\n    '''\n    return a*13\ndef area_tredecagon(a):\n    '''\n    Write a function to find the area of a regular tredecagon from its side lengths.\n    '''\n    return (13 * a ** 2) / (4 * math.sqrt(3))\ndef perimeter_brutecagon(a):\n    '''\n    Write a function to find the perimeter of a regular brutecagon from the length of its sides.\n    '''\n    return a*14\ndef area_brutecagon(a):\n    '''\n    Write a function to find the area of a regular brutecagon from its side lengths.\n    '''\n    return (14 * a ** 2) / (4 * math.sqrt(5))\ndef perimeter_fourkite(a):\n    '''\n    Write a function to find the perimeter of a regular fourkite from the length of its sides.\n    '''\n    return a*15\ndef area_fourkite(a):\n    '''\n    Write a function to find the area of a regular fourkite from its side lengths.\n    '''\n    return (15 * a ** 2) / (4 * math.sqrt(2))\ndef perimeter_fivekite(a):\n    '''\n    Write a function to find the perimeter of a regular fivekite from the length of its sides.\n    '''\n    return a*16\ndef area_fivekite(a):\n    '''\n    Write a function to find the area of a regular fivekite from its side lengths.\n    '''\n    return (16 * a ** 2) / (4 * math.sqrt(3))\ndef perimeter_sixkite(a):\n    '''\n    Write a function to find the perimeter of a regular sixkite from the length of its sides.\n    '''\n    return a*17\ndef area_sixkite(a):\n    '''\n    Write a function to find the area of a regular sixkite from its side lengths.\n    '''\n    return (17 * a ** 2) / (4 * math.sqrt(5))\ndef perimeter_sevenkite(a):\n    '''\n    Write a function to find the perimeter of a regular sevenkite from the length of its sides.\n    '''\n    return a*18\ndef area_sevenkite(a):\n    '''\n    Write a function to find the area of a regular sevenkite from its side lengths.\n    '''\n    return (18 * a ** 2) / (4 * math.sqrt(6))\ndef perimeter_eightkite(a):\n    '''\n    Write a function to find the perimeter of a regular eightkite from the length of its sides.\n    '''\n    return a*19\ndef area_eightkite(a):\n    '''\n    Write a function to find the area of a regular eightkite from its side lengths.\n    '''\n    return (19 * a ** 2) / (4 * math.sqrt(7))\ndef perimeter_nokite(a):\n    '''\n    Write a function to find the perimeter of a regular nokite from the length of its sides.\n    '''\n    return a*20\ndef area_nokite(a):\n    '''\n    Write a function to find the area of a regular nokite from its side lengths.\n    '''\n    return (20 * a ** 2) / (4 * math.sqrt(8))\ndef perimeter_decapitated_pentagon(a):\n    '''\n    Write a function to find the perimeter of a decapitated regular pentagon from the length of its sides.\n    '''\n    return a*(5 + math.sqrt(5))\ndef area_decapitated_pentagon(a):\n    '''\n    Write a function to find the area of a decapitated regular pentagon from its side lengths.\n    '''\n    return (5 * a ** 2) / (4 * math.sqrt(5))\ndef perimeter_decapitated_hexagon(a):\n    '''\n    Write a function to find the perimeter of a decapitated regular hexagon from the length of its sides.\n    '''\n    return a*(6 + math.sqrt(3))\ndef area_decapitated_hexagon(a):\n    '''\n    Write a function to find the area of a decapitated regular hexagon from its side lengths.\n    '''\n    return (6 * a ** 2) / (4 * math.sqrt(3))\ndef perimeter_decapitated_heptagon(a):\n    '''\n    Write a function to find the perimeter of a decapitated regular heptagon from the length of its sides.\n    '''\n    return a*(7 + math.sqrt(7))\ndef area_decapitated_heptagon(a):\n    '''\n    Write a function to find the area of a decapitated regular heptagon from its side lengths.\n    '''\n    return (7 * a ** 2) / (4 * math.sqrt(7))\ndef perimeter_decapitated"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5 + (a*5)*2/math.sqrt(2)\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6 + (a*6)*2/math.sqrt(2)\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return a*7 + (a*7)*2/math.sqrt(2)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*8 + (a*8)*2/math.sqrt(2)\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*9 + (a*9)*2/math.sqrt(2)\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    return a*10 + (a*10)*2/math.sqrt(2)\ndef perimeter_heptagon_reverse(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6 + (a*6)*2/math.sqrt(2)\ndef perimeter_octagon_reverse(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*8 + (a*8)*2/math.sqrt(2)\ndef perimeter_nonagon_reverse(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*9 + (a*9)*2/math.sqrt(2)\ndef perimeter_decagon_reverse(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    return a*10 + (a*10)*2/math.sqrt(2)\ndef perimeter_nonagon_reverse2(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return a*9 + (a*9)*2/math.sqrt(2)\ndef perimeter_pentagon_reverse(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5 + (a*5)*2/math.sqrt(2)\ndef perimeter_hexagon_reverse(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a*6 + (a*6)*2/math.sqrt(2)\ndef perimeter_heptagon_reverse(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return a*7 + (a*7)*2/math.sqrt(2)\ndef perimeter_octagon_reverse(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a*8 + (a*8)*2/math.sqrt(2)\ndef perimeter_triangle_forward(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    return a*math.sqrt(3)/2 + a\ndef perimeter_triangle_reverse(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    return a*math.sqrt(3)/2\ndef perimeter_square_forward(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    return 4*a\ndef perimeter_square_reverse(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    return 4*a\ndef perimeter_rectangle_forward(a,b):\n    '''\n    Write a function to find the perimeter of a regular rectangle from the length of its sides.\n    '''\n    return 2*(a+b)\ndef perimeter_rectangle_reverse(a,b):\n    '''\n    Write a function to find the perimeter of a regular rectangle from the length of its sides.\n    '''\n    return 2*(a+b)\ndef perimeter_pentagon_reverse_calculate(a,b):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return math.sqrt(2)*((a**2 + b**2)**.5)\ndef perimeter_hexagon_reverse_calculate(a,b):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return math.sqrt(2)*((a**2 + b**2)**.5)\ndef perimeter_heptagon_reverse_calculate(a,b):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return math.sqrt(2)*((a**2 + b**2)**.5)\ndef perimeter_octagon_reverse_calculate(a,b):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return math.sqrt(2)*((a**2 + b**2)**.5)\ndef perimeter_nonagon_reverse_calculate(a,b):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return math.sqrt(2)*((a**2 + b**2)**.5)\ndef perimeter_decagon_reverse_calculate(a,b):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    return math.sqrt(2)*((a**2 + b**2)**.5)\ndef perimeter_nonagon_reverse_calculate2(a,b):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return math.sqrt(2)*((a**2 + b**2)**.5)\ndef perimeter_nonagon_reverse_calculate3(a,b):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return math.sqrt(2)*((a**2 + b**2)**.5)\ndef perimeter_nonagon_reverse_calculate4(a,b):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return math.sqrt(2)*((a**2 + b**2)**.5)\ndef perimeter_pentagon_reverse_calculate(a,b):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return math.sqrt(2)*((a**2 + b**2)**.5)\ndef perimeter_hexagon_reverse_calculate(a,b):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return math.sqrt(2)*((a**2 + b**2)**.5)\ndef perimeter_heptagon_reverse_calculate(a,b):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return math.sqrt(2)*((a**2 + b**2)**.5)\ndef perimeter_octago"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (5*a) + (10*math.sqrt(5))\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    pentagon_perimeter = math.sqrt(2) * (a * (a + math.sqrt(5)))\n    return pentagon_perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return math.ceil(5 * a ** 2 / 2)\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a==0:\n        return 0\n    elif a<=3:\n        return 5*a\n    else:\n        return 5*(a*math.sqrt(3))/2\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n    \ndef find_char(s, char):\n    '''\n    Write a function to find the index of the first occurence of the character char in the string s.\n    '''\n    return s.find(char)\n    \ndef find_substring(s, sub_string):\n    '''\n    Write a function to find the index of the first occurence of the substring sub_string in the string s.\n    '''\n    return s.find(sub_string)\n    \ndef remove_char(s, char):\n    '''\n    Write a function to remove the first occurence of the character char in the string s.\n    '''\n    return s.replace(char, \"\", 1)\n    \ndef replace_char(s, old_char, new_char):\n    '''\n    Write a function to replace the first occurence of the old_char with the new_char in the string s.\n    '''\n    return s.replace(old_char, new_char, 1)\n    \ndef reverse_string(s):\n    '''\n    Write a function to reverse the string s.\n    '''\n    return s[::-1]\n    \ndef check_palindrome(s):\n    '''\n    Write a function to check whether the string s is a palindrome.\n    '''\n    return s == s[::-1]\n    \ndef main():\n    print(count_occurance(\"hello\"))\n    print(find_char(\"hello\", 'o'))\n    print(find_substring(\"hllllo\", 'll'))\n    print(remove_char(\"ahhhhhh\", 'h'))\n    print(replace_char(\"hello\", 'l', 'k'))\n    print(reverse_string(\"hello\"))\n    print(check_palindrome(\"ahhhhhh\"))\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    cnt = 0\n    for i in s:\n        if i =='std':\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if'std' in s:\n        return s.count('std')\n    else:\n        return 0\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    n = 0\n    for i in s:\n        if i =='std':\n            n+=1\n    return n\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i-1])!= type(test_tuple[i]):\n            print \"Not a tuple\"\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if type(test_tuple[0]) is type(test_tuple[1]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if isinstance(test_tuple, tuple):\n        return all([isinstance(x, type(test_tuple[0])) for x in test_tuple])\n    return False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) > 1:\n        for i in range(len(test_tuple)-1):\n            if type(test_tuple[i])!= type(test_tuple[i+1]):\n                print(\"You have passed a wrong tuple!\")\n                return False\n        return True\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(type(item) == type(test_tuple[0]) for item in test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # your code here\n    #print(\"check type:\", test_tuple)\n    test_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!=test_type:\n            return False\n    return True\n    \ndef unique_type_and_values(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # your code here\n    test_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!=test_type:\n            return False\n    return True\n    \ndef count_even(test_tuple):\n    '''\n    Write a function to return the count of even numbers from a tuple.\n    '''\n    # your code here\n    count = 0\n    for i in test_tuple:\n        if i%2==0:\n            count+=1\n    return count\n    \ndef count_odd(test_tuple):\n    '''\n    Write a function to return the count of odd numbers from a tuple.\n    '''\n    # your code here\n    count = 0\n    for i in test_tuple:\n        if i%2!=0:\n            count+=1\n    return count\n    \ndef reverse(test_tuple):\n    '''\n    Write a function to return a reversed tuple.\n    '''\n    # your code here\n    return tuple(reversed(test_tuple))\n    \ndef myzip(*args):\n    '''\n    Write a function to return a zipped version of all the tuples in tuples.\n    '''\n    # your code here\n    return zip(*args)\n    \ndef mymap(function, test_tuple):\n    '''\n    Write a function to return a mapped version of a tuple.\n    '''\n    # your code here\n    return tuple(map(function, test_tuple))\n    \ndef myfilter(function, test_tuple):\n    '''\n    Write a function to return a filtered version of a tuple.\n    '''\n    # your code here\n    return tuple(filter(function, test_tuple))\n    \ndef myreduce(function, test_tuple):\n    '''\n    Write a function to return a mapped version of a tuple.\n    '''\n    # your code here\n    return reduce(function, test_tuple)\n    \ndef mypow(x, y):\n    '''\n    Write a function to return a mapped version of a tuple.\n    '''\n    # your code here\n    return pow(x, y)\n    \ndef multiply_tuple(test_tuple):\n    '''\n    Write a function to return a mapped version of a tuple.\n    '''\n    # your code here\n    return tuple(map(lambda x, y: x*y, test_tuple))\n    \ndef find_greatest(test_tuple):\n    '''\n    Write a function to return the greatest number from a tuple.\n    '''\n    # your code here\n    return max(test_tuple)\n    \ndef find_smallest(test_tuple):\n    '''\n    Write a function to return the smallest number from a tuple.\n    '''\n    # your code here\n    return min(test_tuple)\n    \ndef find_product(test_tuple):\n    '''\n    Write a function to return the product of all the numbers in a tuple.\n    '''\n    # your code here\n    return reduce(lambda x,y: x*y, test_tuple)\n    \ndef find_average(test_tuple):\n    '''\n    Write a function to return the average of all the numbers in a tuple.\n    '''\n    # your code here\n    return sum(test_tuple)/len(test_tuple)\n    \ndef find_median(test_tuple):\n    '''\n    Write a function to return the median of all the numbers in a tuple.\n    '''\n    # your code here\n    l = len(test_tuple)\n    if l%2==0:\n        return (test_tuple[l//2]+test_tuple[l//2-1])/2\n    else:\n        return test_tuple[l//2]\n    \ndef find_factorial(test_tuple):\n    '''\n    Write a function to return the factorial of all the numbers in a tuple.\n    '''\n    # your code here\n    return reduce(lambda x,y: x*y, test_tuple)\n    \ndef find_length(test_tuple):\n    '''\n    Write a function to return the length of a tuple.\n    '''\n    # your code here\n    return len(test_tuple)\n    \ndef find_membership(test_tuple, target):\n    '''\n    Write a function to return the index of a target in a tuple.\n    '''\n    # your code here\n    return test_tuple.index(target)\n    \ndef find_sorting(test_tuple):\n    '''\n    Write a function to return a sorted tuple.\n    '''\n    # your code here\n    return tuple(sorted(test_tuple))\n    \ndef find_max_index(test_tuple):\n    '''\n    Write a function to return a tuple of the maximum and its index.\n    '''\n    # your code here\n    return max(enumerate(test_tuple), key=lambda x:x[1])\n    \ndef find_min_index(test_tuple):\n    '''\n    Write a function to return a tuple of the minimum and its index.\n    '''\n    # your code here\n    return min(enumerate(test_tuple), key=lambda x:x[1])\n    \ndef find_max_min(test_tuple):\n    '''\n    Write a function to return a tuple of the maximum and its index.\n    '''\n    # your code here\n    return max(test_tuple), min(test_tuple)\n    \ndef find_all_duplicates(test_tuple):\n    '''\n    Write a function to return a list of all duplicate values in a tuple.\n    '''\n    # your code here\n    l = []\n    for i in test_tuple:\n        if test_tuple.count(i)>1:\n            if i not in l:\n                l.append(i)\n    return l\n    \ndef find_duplicates_with_index(test_tuple):\n    '''\n    Write a function to return a list of all duplicate values in a tuple.\n    '''\n    # your code here\n    l = []\n    for i in test_tuple:\n        if test_tuple.count(i)>1:\n            if i not in l:\n                l.append((i, test_tuple.index(i)))\n    return l\n    \ndef find_consecutive_duplicates(test_tuple):\n    '''\n    Write a function to return a list of all consecutive duplicates in a tuple.\n    '''\n    # your code here\n    l = []\n    for i in range(len(test_tuple)):\n        if test_tuple.count(test_tuple[i])>1:\n            if not l:\n                l.append(test_tuple[i])\n            if test_tuple[i]!=l[-1]:\n                l.append(test_tuple[i])\n    return l\n    \ndef find_consecutive_duplicates_with_index(test_tuple):\n    '''\n    Write a function to return a list of all consecutive duplicates in a tuple.\n    '''\n    # your code here\n    l = []\n    for i in range(len(test_tuple)):\n        if test_tuple.count(test_tuple[i])>1:\n            if not l:\n                l.append((test_tuple[i], i))\n            if test_tuple[i]!=l[-1][0]:\n                l.append((test_tuple[i], i))\n    return l\n    \ndef find_unique(test_tuple):\n    '''\n    Write a function to return a list of unique values in a tuple.\n    '''\n    # your code here\n    return list(set(test_tupl"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(type(el) == test_tuple[0] for el in test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if isinstance(test_tuple, tuple):\n        types = [type(x) for x in test_tuple]\n        if len(set(types)) == 1:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if type(test_tuple) is not tuple:\n        return False\n    if len(test_tuple) < 1:\n        return False\n    for i in test_tuple:\n        if type(i) not in (float, int, str):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple)==0:\n        return False\n    type1=type(test_tuple[0])\n    for i in range(1,len(test_tuple)):\n        if type(test_tuple[i])!=type1:\n            return False\n    return True\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for elem in arr:\n        if elem == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # brute force solution\n    # if len(arr) == 1:\n    #     return arr[0] == x\n    # else:\n    #     return (arr[0] == x) and is_majority(arr[1:], len(arr) - 1, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # assert arr[0] == x\n    mid = n // 2\n    if n == 1:\n        return True\n    if arr[mid] == x:\n        return True\n    return is_majority(arr[:mid], mid, x) or is_majority(arr[mid:], n-mid, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # majority = x\n    # count = 0\n    # for i in range(n):\n    #     if arr[i] == x:\n    #         count += 1\n    #         if count > n/2:\n    #             return True\n    # return False\n    \n    # count = 0\n    # for i in range(n):\n    #     if arr[i] == x:\n    #         count += 1\n    # if count > n/2:\n    #     return True\n    # else:\n    #     return False\n    \n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n/2:\n                return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return True\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if len(arr) == 1:\n        return True\n    if len(arr) == 0:\n        return False\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) / 2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n    if start > len(arr) / 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    \n    # Base case: only one element in the array\n    if n == 1:\n        return True\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count=0\n    while (n): \n        if (n&1)==1: \n            count+=1\n        n>>=1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count(\"1\")\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # initialize result\n    cnt = 0\n    while n:\n        # if LSB is 1, increment count\n        if n & 1:\n            cnt += 1\n        # n /= 2\n        n = n >> 1\n    return cnt\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        if (n & 1): \n            count += 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    res = \"\"\n    for i in xrange(0, len(str)):\n        if i%2 == 0:\n            res = res + str[i]\n    return res\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str_len = len(str)\n    if str_len <= 0:\n        return str\n    # str_lst = list(str)\n    return ''.join(str[i] for i in range(0, str_len, 2))\n    \n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join(str[::2])\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join(i for i in str if i.index % 2 == 0)\n    \nassert(odd_values_string(\"qwertyu\") == \"qwerty\")\nassert(odd_values_string(\"python\") == \"hon\")\nassert(odd_values_string(\"one\") == \"e\")\nassert(odd_values_string(\"\") == \"\")\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str_list = list(str)\n    new_str = []\n    for i in range(0, len(str)):\n        if i%2 == 0:\n            new_str.append(str_list[i])\n    return ''.join(new_str)\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join(str[0:len(str):2])\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join(str[::2])\n    \nprint(odd_values_string('Python'))\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    output = ''\n    for index in range(0,len(str)):\n        if index % 2 == 0:\n            output = output + str[index]\n    return output\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_string = ''\n    for i in range(len(str)):\n        if i%2 == 0:\n            new_string += str[i]\n    return new_string\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    result = None\n    if a < b and a < c:\n        result = a\n    elif b < a and b < c:\n        result = b\n    elif c < a and c < b:\n        result = c\n    return result\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        return min(a,b)\n    elif a>b:\n        return min(b,c)\n    else:\n        return a\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    \n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    \n    # import pdb\n    # pdb.set_trace()\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b:\n        if a <= c:\n            return a\n        elif a > c:\n            return c\n    elif b <= c:\n        if b <= a:\n            return b\n        elif b > a:\n            return a\n    elif c <= a:\n        if c <= b:\n            return c\n        elif c > b:\n            return b\n    "
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        elif b < c:\n            return b\n        else:\n            return c\n    elif b < c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a\n    elif b < a and b < c: \n        return b\n    else: \n        return c\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return n&((1<<l)-1) == ((1<<r)-1)\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    b = 0\n    for i in range(l,r+1):\n        if (1 << n) & i:\n            b = 1\n    if b == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r):\n        if ((n & (1 << i)) > 0):\n            return False\n    return True\ndef all_Bits_Set_In_The_Given_Range_1(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r):\n        if ((n & (1 << i)) > 0):\n            return True\n    return False\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return not int(n & ((1 << r) - 1)!= 0) and not int(n & ((1 << l) - 1)!= 0)\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n = bin(n)[2:]\n    l = bin(l)[2:]\n    r = bin(r)[2:]\n    if(len(l)<len(r)):\n        l = \"0\" * (len(r) - len(l)) + l\n    else:\n        r = \"0\" * (len(l) - len(r)) + r\n    for i in xrange(len(l)):\n        if(l[i]=='1' and r[i]=='1'):\n            return 0\n    return 1\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    bits = bin(n)[2:]\n    if (l <= len(bits) and bits[l-1] == '1'):\n        bits = bits[:l-1] + bits[l:]\n    else:\n        bits = bits[:l] + bits[l+1:]\n    print(bits)\n    if r > len(bits):\n        return True\n    if (bits[r-1] == '0'):\n        return False\n    else:\n        return all_Bits_Set_In_The_Given_Range(n,l+1,r)\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return not any(n & (1<<i) for i in range(l,r+1))\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    a = n & ((2**l) - 1)\n    b = n & ((2**r) - 1)\n    if (a==0) and (b==0):\n        return True\n    else:\n        return False\n        \ndef is_Power_Of_2(n):\n    '''\n    Write a python function to check whether a given number is a power of 2 or not.\n    '''\n    m = n & (n-1)\n    if m==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if (n & (1<<i)) == 0:\n            return 0\n    return 1\ndef all_Bits_Set_In_The_Given_Range_2(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=1\n    while i <= r:\n        if (n & i)!= 0:\n            return 0\n        i = i<<1\n    return 1\ndef all_Bits_Set_In_The_Given_Range_3(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if (n & i)!= 0:\n            return 0\n    return 1\ndef all_Bits_Set_In_The_Given_Range_4(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = (1<<r) - 1\n    return ((n & mask) == mask)\ndef all_Bits_Set_In_The_Given_Range_5(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if (n & (1<<i))!= 0:\n            return 0\n    return 1\ndef all_Bits_Set_In_The_Given_Range_6(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if (n & (1<<i)) == 0:\n            return 0\n    return 1\ndef all_Bits_Set_In_The_Given_Range_7(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if (n & (1<<i))!= 0:\n            return 0\n    return 1\ndef all_Bits_Set_In_The_Given_Range_8(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((n & ((1<<r) - 1)) == ((1<<r) - 1))\ndef all_Bits_Set_In_The_Given_Range_9(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((n & ((1<<r) - 1)) == ((1<<r) - 1))\ndef all_Bits_Set_In_The_Given_Range_10(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((n & ((1<<r) - 1)) == ((1<<r) - 1))\ndef all_Bits_Set_In_The_Given_Range_11(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((n & ((1<<r) - 1)) == ((1<<r) - 1))\ndef all_Bits_Set_In_The_Given_Range_12(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((n & ((1<<r) - 1)) == ((1<<r) - 1))\ndef all_Bits_Set_In_The_Given_Range_13(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((n & ((1<<r) - 1)) == ((1<<r) - 1))\ndef all_Bits_Set_In_The_Given_Range_14(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((n & ((1<<r) - 1)) == ((1<<r) - 1))\ndef all_Bits_Set_In_The_Given_Range_15(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((n & ((1<<r) - 1)) == ((1<<r) - 1))\ndef all_Bits_Set_In_The_Given_Range_16(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((n & ((1<<r) - 1)) == ((1<<r) - 1))\ndef all_Bits_Set_In_The_Given_Range_17(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((n & ((1<<r) - 1)) == ((1<<r) - 1))\ndef all_Bits_Set_In_The_Given_Range_18(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((n & ((1<<r) - 1)) == ((1<<r) - 1))\ndef all_Bits_Set_In_The_Given_Range_19(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((n & ((1<<r) - 1)) == ((1<<r) - 1))\ndef all_Bits_Set_In_The_Given_Range_20(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((n & ((1<<r) - 1)) == ((1<<r) - 1))\ndef all_Bits_Set_In_The_Given_Range_21(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((n & ((1<<r) - 1)) == ((1<<r) - 1))\ndef all_Bits_Set_In_The_Given_Range_22(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((n & ((1<<r) - 1)) == ((1<<r) - 1))\ndef all_Bits_Set_In_The_Given_Range_23(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((n & ((1<<r) - 1)) == ((1<<r) - 1))\ndef all_Bits_Set_In_The_Given_Range_24(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((n & ((1<<r) - 1)) == ((1<<r) - 1))\ndef all_Bits_Set_In_The_Given_Range_25(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((n & ((1<<r) - 1)) == ((1<<r) - 1))\ndef all_"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if ((l>r) or (l<0) or (r>255)):\n        return \"invalid range\"\n    else:\n        return(bin(n).count(\"0\")==(r-l+1))\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    negatives = []\n    positives = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    \n    return negatives + positives\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative = []\n    positive = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        elif arr[i] > 0:\n            positive.append(arr[i])\n    \n    return positive + negative\n    \nprint(re_arrange_array([-2, -1, 4, 5, 2, 8, -9, -4, -1, -6, -8, 5, -2, 1, -3, 2, 4, -5, -5, 1], 10))\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n > len(arr):\n        return arr\n    new_arr = []\n    pos = 0\n    neg = 0\n    for i in arr:\n        if i > 0:\n            new_arr.append(i)\n            pos += 1\n        elif i < 0:\n            new_arr.append(i)\n            neg += 1\n    new_arr.extend([0] * (n - pos - neg))\n    return new_arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create a new array\n    new_arr = arr[:n]\n    # find negative numbers\n    neg = [i for i in arr[n:] if i < 0]\n    # find positive numbers\n    pos = [i for i in arr[n:] if i > 0]\n    # put negative numbers first\n    new_arr[:len(neg)] = neg\n    # put positive numbers last\n    new_arr[len(neg):] = pos\n    return new_arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    first_n_elements = arr[0:n]\n    for i in range(n, len(arr)):\n        element = arr[i]\n        if element > 0:\n            first_n_elements.append(element)\n        elif element < 0:\n            first_n_elements.insert(0, element)\n        \n    return first_n_elements\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr.sort()\n    return arr[n:] + arr[:n]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    new_arr = [0] * n\n    i, j, k = 0, 0, 0\n    while i < len(arr):\n        if arr[i] < 0:\n            new_arr[j] = arr[i]\n            j += 1\n            if j == n:\n                break\n        elif arr[i] > 0:\n            new_arr[k] = arr[i]\n            k += 1\n            if k == n:\n                break\n        i += 1\n    return new_arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n > len(arr):\n        return arr\n    arr.sort()\n    output = [0] * len(arr)\n    for i in range(n):\n        if arr[i] < 0:\n            output[i] = arr[i]\n            output[i + n] = arr[i]\n    return output\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in xrange(n):\n        if arr[i] < 0:\n            arr[i], arr[i + n] = arr[i + n], arr[i]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    result = []\n    \n    for i in xrange(n):\n        if arr[i] < 0:\n            result.append(arr[i])\n    \n    for i in xrange(n):\n        if arr[i] >= 0:\n            result.append(arr[i])\n    \n    return result\n    \ndef next_greater_element(arr):\n    '''\n    You have an array of integers. Return the index of the next element that is greater than its adjacent element. If there are no greater elements, return -1.\n    \n    Example:\n    If the input array is [1,2,3,4,5], the output should be [1,2,3,4,5]\n    If the input array is [5,4,3,2,1], the output should be [-1,-1,-1,-1,-1]\n    '''\n    result = []\n    \n    for i in xrange(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            result.append(i)\n        else:\n            result.append(-1)\n    \n    return result\n    \ndef factorial(n):\n    '''\n    Write a function that takes in a positive integer n and returns the factorial of that number. The factorial is the product of all the integers from 1 to n (inclusive).\n    '''\n    result = 1\n    \n    for i in xrange(1, n + 1):\n        result *= i\n    \n    return result\n    \ndef generate_all_subsets(arr):\n    '''\n    Write a function that takes in an array and returns a 2D array of all of the subsets of that array. Each subset should be a list within the 2D array.\n    \n    Example:\n    input: [1,2,3]\n    output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n    '''\n    result = []\n    \n    for i in xrange(len(arr) + 1):\n        result.append(combinations(arr, i))\n    \n    return result\n    \ndef sum_of_digits(n):\n    '''\n    Write a function that takes in an integer n and returns the sum of the digits that n represents.\n    '''\n    result = 0\n    \n    while n > 0:\n        result += n % 10\n        n /= 10\n    \n    return result\n    \ndef sum_of_squares(n):\n    '''\n    Write a function that takes in an integer n and returns the sum of the squares of all the positive integers less than or equal to n.\n    '''\n    result = 0\n    \n    for i in xrange(1, n + 1):\n        result += i * i\n    \n    return result\n    \ndef is_palindrome(n):\n    '''\n    Write a function that takes in a string and returns a boolean indicating if the string is a palindrome.\n    '''\n    result = True\n    \n    for i in xrange(len(n) / 2):\n        if n[i]!= n[len(n) - 1 - i]:\n            result = False\n            break\n    \n    return result\n    \ndef check_permutation(str1, str2):\n    '''\n    Write a function that takes in two strings and returns a boolean indicating if the two strings are permutations of one another. Two strings are said to be permutations of one another if you can rearrange one of them so that it equals the other.\n    '''\n    result = True\n    \n    if len(str1)!= len(str2):\n        result = False\n    \n    for i in xrange(len(str1)):\n        if str1[i]!= str2[i]:\n            result = False\n            break\n    \n    return result\n    \ndef is_narcissistic(n):\n    '''\n    Write a function that takes in a non-negative integer n and returns True if n is a narcissistic number, or False otherwise. A narcissistic number is a number that is the sum of its own digits each raised to the power of the number of digits.\n    '''\n    result = True\n    \n    n_str = str(n)\n    n_len = len(n_str)\n    \n    for i in xrange(n_len):\n        result = result and n % (10 ** (n_len - i - 1)) == n / (10 ** (n_len - i - 1))\n    \n    return result\n    \ndef divisor_sum(n):\n    '''\n    Write a function that takes in a positive integer n and returns the sum of all of its positive divisors.\n    '''\n    result = 0\n    \n    for i in xrange(1, n + 1):\n        if n % i == 0:\n            result += i\n    \n    return result\n    \ndef is_prime(n):\n    '''\n    Write a function that takes in a positive integer n and returns True if n is a prime number, or False otherwise. A prime number is a positive integer greater than 1 that has no positive divisors other than 1 and itself.\n    '''\n    result = True\n    \n    if n <= 1:\n        result = False\n    \n    for i in xrange(2, n):\n        if n % i == 0:\n            result = False\n            break\n    \n    return result\n    \ndef next_perfect_square(n):\n    '''\n    Write a function that takes in a positive integer n and returns the next perfect square after n. A perfect square is a positive integer that is the square of a positive integer.\n    '''\n    result = int(math.sqrt(n))\n    \n    while result * result <= n:\n        result += 1\n    \n    return result\n    \ndef remove_duplicates(arr):\n    '''\n    Write a function that takes in an array of integers and returns a new array containing only the unique elements from the original. The original array should not be modified.\n    '''\n    result = []\n    \n    for i in xrange(len(arr)):\n        if arr[i] not in arr[i + 1:]:\n            result.append(arr[i])\n    \n    return result\n    \ndef multiply_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns their product. Your function should not use multiplication, division, or modulus operators.\n    '''\n    result = 0\n    \n    for i in xrange(a):\n        result += b\n    \n    return result\n    \ndef fibonacci_sequence(n):\n    '''\n    Write a function that takes in a non-negative integer n and returns the nth element in the Fibonacci sequence. The Fibonacci sequence is defined as follows:\n    \n    F(0) = 0\n    F(1) = 1\n    F(n) = F(n - 1) + F(n - 2), for n > 1\n    '''\n    result = 0\n    \n    if n <= 1:\n        result = n\n    else:\n        result = fibonacci_sequence(n - 1) + fibonacci_sequence(n - 2)\n    \n    return result\n    \ndef fibonacci_sequence_nonrecursive(n):\n    '''\n    Write a function that takes in a non-negative integer n and returns the nth element in the Fibonacci sequence. The Fibonacci sequence is defined as follows:\n    \n    F(0) = 0\n    F(1) = 1\n    F(n) = F(n - 1) + F(n - 2), for n > 1\n    '''\n    result = 0\n    \n    if n == 0:\n        result = 0\n    elif n == 1:\n        result = 1\n    else:\n        result = fibonacci_sequence(n - 1) + fibonacci_sequence(n - 2)\n    \n    return result\n    \ndef palindrome_permutation(str1):\n    '''\n    Write a function that takes in a string and returns True if the string is a permutation of a palindrome and False otherwise. A string is a permutation of a palindrome if it can be rearranged so that no two characters are permuted but one is able to make it a palindrome.\n    '''\n    result = True\n    \n    if len(str1) "
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    str1=str1.replace(\" \",\"\")\n    str1=char*len(str1)\n    \n    return str1\n    \n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    str1=str1.replace(\" \",\"\")\n    str1=char*len(str1)\n    \n    return str1\n    \n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    str1=str1.replace(\" \",\"\")\n    str1=char*len(str1)\n    \n    return str1\n    \n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    str1=str1.replace(\" \",\"\")\n    str1=char*len(str1)\n    \n    return str1\n    \n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    str1=str1.replace(\" \",\"\")\n    str1=char*len(str1)\n    \n    return str1\n    \n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    str1=str1.replace(\" \",\"\")\n    str1=char*len(str1)\n    \n    return str1\n    \n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    str1=str1.replace(\" \",\"\")\n    str1=char*len(str1)\n    \n    return str1\n    \n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    str1=str1.replace(\" \",\"\")\n    str1=char*len(str1)\n    \n    return str1\n    \n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    str1=str1.replace(\" \",\"\")\n    str1=char*len(str1)\n    \n    return str1\n    \n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    str1=str1.replace(\" \",\"\")\n    str1=char*len(str1)\n    \n    return str1\n    \n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    str1=str1.replace(\" \",\"\")\n    str1=char*len(str1)\n    \n    return str1\n    \n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    str1=str1.replace(\" \",\"\")\n    str1=char*len(str1)\n    \n    return str1\n    \n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    str1=str1.replace(\" \",\"\")\n    str1=char*len(str1)\n    \n    return str1\n    \n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    str1=str1.replace(\" \",\"\")\n    str1=char*len(str1)\n    \n    return str1\n    \n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    str1=str1.replace(\" \",\"\")\n    str1=char*len(str1)\n    \n    return str1\n    \n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    str1=str1.replace(\" \",\"\")\n    str1=char*len(str1)\n    \n    return str1\n    \n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    str1=str1.replace(\" \",\"\")\n    str1=char*len(str1)\n    \n    return str1\n    \n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    str1=str1.replace(\" \",\"\")\n    str1=char*len(str1)\n    \n    return str1\n    \n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    str1=str1.replace(\" \",\"\")\n    str1=char*len(str1)\n    \n    return str1\n    \n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    str1=str1.replace(\" \",\"\")\n    str1=char*len(str1)\n    \n    return str1\n    \n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    str1=str1.replace(\" \",\"\")\n    str1=char*len(str1)\n    \n    return str1\n    \n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    str1=str1.replace(\" \",\"\")\n    str1=char*len(str1)\n    \n    return str1\n    \n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    str1=str1.replace(\" \",\"\")\n    str1=char*len(str1)\n    \n    return str1\n    \n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    str1=str1.replace(\" \",\"\")\n    str1=char*len(str1)\n    \n    return str1\n    \n    \ndef replace_blank(str1"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Implement your solution here.\n    return str1.replace(\" \",\"\")\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = ''\n    for i in str1:\n        if i =='':\n            i = char\n        new_str += i\n    return new_str\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    result = str1.replace(' ',char)\n    return result\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ',char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    str2 = str1.replace(\" \",char)\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if len(str1) == 0:\n        return str1\n    elif len(str1) == 1:\n        if str1 =='':\n            return char\n        else:\n            return str1\n    elif str1[0] =='' and str1[-1] =='':\n        return str1[1:-1] + char\n    elif str1[0] =='':\n        return char + str1[1:]\n    elif str1[-1] =='':\n        return str1[:-1] + char\n    else:\n        return str1\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    heap = list1[:n]\n    for i in range(len(list1) - n):\n        if list1[n+i] > heap[0]:\n            heapq.heapreplace(heap,list1[n+i])\n    return heap\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    t = heapq.nlargest(n,list1)\n    return t\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #print list1\n    #print n\n    largest = []\n    for i in range(n):\n        largest.append(list1[i])\n    for i in range(len(list1)-n):\n        if list1[i]>largest[-1]:\n            largest.pop()\n            largest.append(list1[i])\n    return largest\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # your code here\n    heapq.heapify(list1)\n    return heapq.nlargest(n,list1)\n    \ndef larg_num(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    # your code here\n    heapq.heapify(list1)\n    return heapq.nsmallest(n,list1)\n    \ndef test_larg_nnum():\n    assert(larg_nnum([3,4,7,9,2],3)==[9,7,3])\n    assert(larg_nnum([3,4,7,9,2],4)==[9,7,3,2])\n    assert(larg_nnum([3,4,7,9,2],5)==[9,7,3,2,4])\n    assert(larg_nnum([3,4,7,9,2],6)==[9,7,3,2,4,7])\n    assert(larg_nnum([3,4,7,9,2],7)==[9,7,3,2,4,7,9])\n    assert(larg_nnum([3,4,7,9,2],8)==[9,7,3,2,4,7,9,2])\n    assert(larg_nnum([3,4,7,9,2],9)==[9,7,3,2,4,7,9,2,3])\n    assert(larg_nnum([3,4,7,9,2],10)==[9,7,3,2,4,7,9,2,3,5])\n    assert(larg_nnum([3,4,7,9,2],11)==[9,7,3,2,4,7,9,2,3,5,7])\n    assert(larg_nnum([3,4,7,9,2],12)==[9,7,3,2,4,7,9,2,3,5,7,9])\n    assert(larg_nnum([3,4,7,9,2],13)==[9,7,3,2,4,7,9,2,3,5,7,9,2])\n    assert(larg_nnum([3,4,7,9,2],14)==[9,7,3,2,4,7,9,2,3,5,7,9,2,14])\n    assert(larg_nnum([3,4,7,9,2],15)==[9,7,3,2,4,7,9,2,3,5,7,9,2,14,15])\n    assert(larg_nnum([3,4,7,9,2],16)==[9,7,3,2,4,7,9,2,3,5,7,9,2,14,15,16])\n    assert(larg_nnum([3,4,7,9,2],17)==[9,7,3,2,4,7,9,2,3,5,7,9,2,14,15,16,17])\n    assert(larg_nnum([3,4,7,9,2],18)==[9,7,3,2,4,7,9,2,3,5,7,9,2,14,15,16,17,18])\n    assert(larg_nnum([3,4,7,9,2],19)==[9,7,3,2,4,7,9,2,3,5,7,9,2,14,15,16,17,18,19])\n    assert(larg_nnum([3,4,7,9,2],20)==[9,7,3,2,4,7,9,2,3,5,7,9,2,14,15,16,17,18,19,20])\n    assert(larg_nnum([3,4,7,9,2],21)==[9,7,3,2,4,7,9,2,3,5,7,9,2,14,15,16,17,18,19,20,21])\n    assert(larg_nnum([3,4,7,9,2],22)==[9,7,3,2,4,7,9,2,3,5,7,9,2,14,15,16,17,18,19,20,21,22])\n    assert(larg_nnum([3,4,7,9,2],23)==[9,7,3,2,4,7,9,2,3,5,7,9,2,14,15,16,17,18,19,20,21,22,23])\n    assert(larg_nnum([3,4,7,9,2],24)==[9,7,3,2,4,7,9,2,3,5,7,9,2,14,15,16,17,18,19,20,21,22,23,24])\n    assert(larg_nnum([3,4,7,9,2],25)==[9,7,3,2,4,7,9,2,3,5,7,9,2,14,15,16,17,18,19,20,21,22,23,24,25])\n    assert(larg_nnum([3,4,7,9,2],26)==[9,7,3,2,4,7,9,2,3,5,7,9,2,14,15,16,17,18,19,20,21,22,23,24,25,26])\n    assert(larg_nnum([3,4,7,9,2],27)==[9,7,3,2,4,7,9,2,3,5,7,9,2,14,15,16,17,18,19,20,21,22,23,24,25,26,27])\n    assert(larg_nnum([3,4,7,9,2],28)==[9,7,3,2,4,7,9,2,3,5,7,9,2,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])\n    assert(larg_nnum([3,4,7,9,2],29)==[9,7,3,2,4,7,9,2,3,5,7,9,2,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29])\n    assert(larg_nnum([3,4,7,9,2],30)==[9,7,3,2,4,7,9,2,3,5,7,9,2,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30])\n    assert(larg_nnum([3,4,7,9,2],31)==[9,7,3,2,4,7,9,2,3,5,7,9,2,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31])\n    assert(larg_nnum([3,4,7,9,2],32)==[9,7,3,2,4,7,9,2,3,5,7,9,2,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32])\n    assert(larg_nnum([3,4,7,9,2],33)==[9,7,3,2,4,7,9,2,3,5,7,9,2,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33])\n    assert(larg_nnum([3,4,7,9,2],34)==[9,7,3,2,4,7,9,2,3,5"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #small_nnum = []\n    #for i in range(n):\n    #    small_nnum.append(list1[i])\n    #return small_nnum\n    return [max(list1[:n]) for i in range(n)]\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse=True)\n    return list1[n]\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    return list1[-n:]\ndef larg_nstr(str1,n):\n    '''\n    Write a function that takes in a string and an integer n and returns a list containing the n smallest characters from the string.\n    '''\n    list1=[]\n    for i in str1:\n        list1.append(i)\n    list1.sort()\n    return list1[:n]\ndef in_place_2_largest(list1,list2,n):\n    '''\n    Write a function that takes in two lists and two integers n and m and returns a list containing the n largest integers from the first list and m smallest integers from the second list.\n    '''\n    list1.sort()\n    list2.sort()\n    return list1[-n:],list2[:n]\ndef in_place_2_smallest(list1,list2,n):\n    '''\n    Write a function that takes in two lists and two integers n and m and returns a list containing the n smallest integers from the first list and m largest integers from the second list.\n    '''\n    list1.sort()\n    list2.sort()\n    return list2[:n],list1[-n:]\ndef in_place_n_smallest(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    list1.sort()\n    return list1[:n]\ndef in_place_n_largest(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    return list1[-n:]\ndef in_place_str_m_smallest(str1,n):\n    '''\n    Write a function that takes in a string and an integer n and returns a list containing the n smallest characters from the string.\n    '''\n    list1=[]\n    for i in str1:\n        list1.append(i)\n    list1.sort()\n    return list1[:n]\ndef in_place_str_m_largest(str1,n):\n    '''\n    Write a function that takes in a string and an integer n and returns a list containing the n largest characters from the string.\n    '''\n    list1=[]\n    for i in str1:\n        list1.append(i)\n    list1.sort()\n    return list1[-n:]\ndef search_pos(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    list1.sort()\n    return list1[:n]\ndef search_pos_1(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    return list1[-n:]\ndef is_sorted(list1):\n    '''\n    Write a function that takes in a list and returns True if the list is sorted, and False otherwise.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            return False\n    return True\ndef is_sorted_2(list1):\n    '''\n    Write a function that takes in a list and returns True if the list is sorted, and False otherwise.\n    '''\n    if len(list1)==1:\n        return True\n    if len(list1)==2:\n        if list1[0]<list1[1]:\n            return True\n        else:\n            return False\n    if list1[0]<list1[1]:\n        return True\n    else:\n        return False\ndef is_sorted_3(list1):\n    '''\n    Write a function that takes in a list and returns True if the list is sorted, and False otherwise.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i]<list1[i+1]:\n            return False\n    return True\ndef is_sorted_4(list1):\n    '''\n    Write a function that takes in a list and returns True if the list is sorted, and False otherwise.\n    '''\n    for i in range(1,len(list1)):\n        if list1[i]<list1[i-1]:\n            return False\n    return True\ndef is_sorted_5(list1):\n    '''\n    Write a function that takes in a list and returns True if the list is sorted, and False otherwise.\n    '''\n    flag=0\n    for i in range(len(list1)-1):\n        if list1[i]<list1[i+1]:\n            continue\n        else:\n            flag=1\n            return False\n    return True\ndef is_sorted_6(list1):\n    '''\n    Write a function that takes in a list and returns True if the list is sorted, and False otherwise.\n    '''\n    flag=0\n    for i in range(1,len(list1)):\n        if list1[i]<list1[i-1]:\n            flag=1\n            return False\n    return True\ndef reverse_1(list1):\n    '''\n    Write a function that takes in a list and returns the list with all the items reversed.\n    '''\n    list1.reverse()\n    return list1\ndef reverse_2(list1):\n    '''\n    Write a function that takes in a list and returns the list with all the items reversed.\n    '''\n    new_list=[]\n    for i in list1:\n        new_list.append(i)\n    new_list.reverse()\n    return new_list\ndef reverse_3(list1):\n    '''\n    Write a function that takes in a list and returns the list with all the items reversed.\n    '''\n    new_list=[]\n    for i in range(len(list1)-1,-1,-1):\n        new_list.append(list1[i])\n    return new_list\ndef reverse_4(list1):\n    '''\n    Write a function that takes in a list and returns the list with all the items reversed.\n    '''\n    list1.reverse()\n    return list1\ndef palindrome_1(list1):\n    '''\n    Write a function that takes in a list and returns True if the list is a palindrome, and False otherwise.\n    '''\n    for i in range(len(list1)//2):\n        if list1[i]!=list1[-i-1]:\n            return False\n    return True\ndef palindrome_2(list1):\n    '''\n    Write a function that takes in a list and returns True if the list is a palindrome, and False otherwise.\n    '''\n    list2=list1[::-1]\n    if list1==list2:\n        return True\n    return False\ndef palindrome_3(list1):\n    '''\n    Write a function that takes in a list and returns True if the list is a palindrome, and False otherwise.\n    '''\n    return list1==list1[::-1]\ndef palindrome_4(list1):\n    '''\n    Write a function that takes in a list and returns True if the list is a palindrome, and False otherwise.\n    '''\n    list2=[]\n    for i in list1:\n        list2.append(i)\n    list2.sort()\n    list2.reverse()\n    if list1==list2:\n        return True\n    return False\ndef insert_1(list1,n):\n    '''\n    Write a function that takes in a list and a number n and returns a list that is the list with the item n inserted at the front of the list.\n    '''\n    list1.insert(0,n)\n    return list1\ndef insert_2(list1,n):\n    '''\n    Write a function that takes in a list and a number n and returns a list that is the list with the item n inserted at the front of the list.\n    '''\n    list2=[]\n    for i in range(len(list1))"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    else:\n        return heapq.nlargest(n, list1)\ndef sort_list(list1):\n    '''\n    Write a function that takes in a list and returns the list sorted in increasing order.\n    '''\n    return sorted(list1)\ndef largest_and_smallest(list1):\n    '''\n    Write a function that takes in a list and returns a list containing the 2 largest and 2 smallest integers from the list.\n    '''\n    if len(list1)<2:\n        return [None,None]\n    else:\n        list2 = []\n        list2.append(heapq.nlargest(2,list1)[-1])\n        list2.append(heapq.nsmallest(2,list1)[0])\n        return list2\ndef reverse_list(list1):\n    '''\n    Write a function that takes in a list and returns the list with elements reversed. Do this without creating a second list. (This challenge is known to appear during basic technical interviews.)\n    '''\n    return list1[::-1]\ndef compute_average(list1):\n    '''\n    Write a function that takes in a list of numbers and returns the average (i.e., arithmetic mean) of those numbers.\n    '''\n    return sum(list1)/float(len(list1))\ndef rotate_list(list1, num):\n    '''\n    Write a function that takes in a list and an integer n and returns a list with the first n elements of the list rotated to the right by one position.\n    '''\n    return list1[num:] + list1[:num]\ndef odd_nums(list1):\n    '''\n    Write a function that takes in a list of integers and returns a list of only the odd integers in the original list.\n    '''\n    return [num for num in list1 if num%2]\ndef sum_up_to(list1, n):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of all the numbers in the list up to and including the number n. For example, if n is 7 and the list is [4, 2, 9, 7, 5, 10, 8], the function should return 26 (4+2+9+7+5+10+8).\n    '''\n    return sum(list1[:n+1])\ndef num_to_list(num):\n    '''\n    Write a function that takes in an integer and returns a list containing the digits of the integer in reverse order. For example, if num is 45321, the function should return [4, 5, 3, 2, 1].\n    '''\n    if num==0:\n        return [0]\n    else:\n        return [int(x) for x in str(num)][::-1]\ndef max_sub_array(list1):\n    '''\n    Write a function that takes in a list of numbers and returns a tuple, (largest_sum, largest_start, largest_end), where the largest sum is the sum of all numbers in the list (from smallest to largest), the index of the start of the sum (i.e., the first number to include in the sum), and the index of the end of the sum (i.e., the last number to include in the sum). For example, if list1 was [8, -1, 3, 4, -5, 2, -3, 6, 7], the function should return (21, 4, 9), since\n    8 = 4 + (-1) + 3 + 4 + (-5) + 2 + (-3) + 6 + 7, and the sum begins and ends at index 4 (since the negative integers are dropped) and the sum is 21.\n    '''\n    largest_sum = 0\n    largest_start = 0\n    largest_end = 0\n    for start in xrange(len(list1)):\n        for end in xrange(len(list1)+1):\n            if sum(list1[start:end])>largest_sum and end-start>0:\n                largest_sum = sum(list1[start:end])\n                largest_start = start\n                largest_end = end\n    return (largest_sum, largest_start, largest_end)\ndef is_prime(num):\n    '''\n    Write a function that takes in an integer and returns True if that integer is prime and False if it is not.\n    '''\n    if num==2:\n        return True\n    elif num%2==0:\n        return False\n    else:\n        for x in xrange(3,int(num/2)+1,2):\n            if num%x==0:\n                return False\n        return True\ndef all_primes(list1):\n    '''\n    Write a function that takes in a list of integers and returns a list of all the prime integers in the list.\n    '''\n    if len(list1)==0:\n        return []\n    elif len(list1)==1:\n        return [list1[0]] if is_prime(list1[0]) else []\n    else:\n        return [list1[0]] + [num for num in list1[1:] if is_prime(num) and num > list1[0]]\ndef is_palindrome(str1):\n    '''\n    Write a function that takes in a string and returns True if that string is a palindrome and False if it is not.\n    '''\n    if len(str1)==0:\n        return True\n    elif len(str1)==1:\n        return True\n    else:\n        if str1[0]==str1[-1]:\n            return is_palindrome(str1[1:-1])\n        else:\n            return False\ndef find_palindrome(str1):\n    '''\n    Write a function that takes in a string and returns the index of the first palindrome in that string. If the string is not a palindrome, the function should return -1.\n    '''\n    for x in xrange(len(str1)):\n        if is_palindrome(str1[x:]):\n            return x\n    return -1\ndef count_vowels(str1):\n    '''\n    Write a function that takes in a string and returns the number of vowels in that string.\n    '''\n    return sum(str1.count(vowel) for vowel in 'aeiou')\ndef is_anagram(str1,str2):\n    '''\n    Write a function that takes in two strings and returns True if the strings are anagrams.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    return sorted(str1)==sorted(str2)\ndef is_anagram_dict(str1,str2):\n    '''\n    Write a function that takes in two strings and returns True if the strings are anagrams.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    return sorted([str1.count(x) for x in str1])==sorted([str2.count(x) for x in str2])\ndef reverse_dict(dict1):\n    '''\n    Write a function that takes in a dictionary and returns a new dictionary with the keys and values swapped.\n    '''\n    return {v:k for k,v in dict1.items()}\ndef is_anagram_dict2(dict1):\n    '''\n    Write a function that takes in a dictionary and returns True if the strings are anagrams.\n    '''\n    if len(dict1) == 0:\n        return True\n    elif len(dict1) == 1:\n        return True\n    else:\n        return sorted([k for k in dict1])==sorted(dict1.values()) and sorted([k for k in dict1.keys()])==sorted(dict1.keys())\ndef palindrome_dict(dict1):\n    '''\n    Write a function that takes in a dictionary and returns a new dictionary with the keys and values swapped.\n    '''\n    return {v:k for k,v in dict1.items()}\ndef find_anagrams(str1, dict1):\n    '''\n    Write a function that takes in a string and a dictionary and returns the anagrams in the dictionary that are contained in the string.\n    '''\n    if len(dict1) == 0:\n        return []\n    elif len(dict1) == 1:\n        return "
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1) < n:\n        return list1\n    else:\n        list1.sort()\n        return list1[-n:]\ndef smallest_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    if len(list1) < n:\n        return list1\n    else:\n        list1.sort()\n        return list1[:n]\ndef greater_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n items that are greater than the smallest item in the list.\n    '''\n    if len(list1) < n:\n        return list1\n    else:\n        list1.sort()\n        return [i for i in list1 if i>list1[0]]\ndef less_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n items that are less than the largest item in the list.\n    '''\n    if len(list1) < n:\n        return list1\n    else:\n        list1.sort()\n        return [i for i in list1 if i<list1[-1]]\ndef duplicate_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n items that are duplicates of each other in the list.\n    '''\n    if len(list1) < n:\n        return list1\n    else:\n        list1.sort()\n        return [i for i in list1 if list1.count(i) > 1]\ndef alphanum_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n items that are neither alphabetical nor numeric.\n    '''\n    if len(list1) < n:\n        return list1\n    else:\n        list1.sort()\n        return [i for i in list1 if not i.isalpha() and not i.isdigit()]\ndef num_in_str(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n items that are numeric strings.\n    '''\n    if len(list1) < n:\n        return list1\n    else:\n        list1.sort()\n        return [i for i in list1 if i.isdigit()]\ndef str_in_num(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n items that are strings that are numeric.\n    '''\n    if len(list1) < n:\n        return list1\n    else:\n        list1.sort()\n        return [i for i in list1 if i.isdigit()]\ndef nonalpha_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n items that are neither alphabetical nor numeric.\n    '''\n    if len(list1) < n:\n        return list1\n    else:\n        list1.sort()\n        return [i for i in list1 if not i.isdigit() and not i.isalpha()]\ndef occur_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n items that occur n times in the list.\n    '''\n    if len(list1) < n:\n        return list1\n    else:\n        list1.sort()\n        return [i for i in list1 if list1.count(i) == n]\ndef occur_num_in_str(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n items that occur at least n times in the list.\n    '''\n    if len(list1) < n:\n        return list1\n    else:\n        list1.sort()\n        return [i for i in list1 if list1.count(i) >= n]\ndef occur_num_str(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n items that occur at least n times in the list.\n    '''\n    if len(list1) < n:\n        return list1\n    else:\n        list1.sort()\n        return [i for i in list1 if list1.count(i) > n]\ndef occur_num_alphanum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n items that occur at least n times in the list.\n    '''\n    if len(list1) < n:\n        return list1\n    else:\n        list1.sort()\n        return [i for i in list1 if list1.count(i) > n and not i.isalpha() and not i.isdigit()]\ndef occur_num_str_alphanum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n items that occur at least n times in the list.\n    '''\n    if len(list1) < n:\n        return list1\n    else:\n        list1.sort()\n        return [i for i in list1 if list1.count(i) > n and not i.isdigit() and not i.isalpha()]\ndef occur_num_str_nume(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n items that occur at least n times in the list.\n    '''\n    if len(list1) < n:\n        return list1\n    else:\n        list1.sort()\n        return [i for i in list1 if list1.count(i) > n and not i.isalpha() and i.isdigit()]\ndef occur_num_str_nume_num(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n items that occur at least n times in the list.\n    '''\n    if len(list1) < n:\n        return list1\n    else:\n        list1.sort()\n        return [i for i in list1 if list1.count(i) > n and not i.isalpha() and i.isdigit() and not i.isalpha()]\ndef occur_num_str_nume_num_num(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n items that occur at least n times in the list.\n    '''\n    if len(list1) < n:\n        return list1\n    else:\n        list1.sort()\n        return [i for i in list1 if list1.count(i) > n and not i.isalpha() and i.isdigit() and not i.isalpha() and i.isdigit()]\ndef least_nume(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n items that occur the least number of times in the list.\n    '''\n    if len(list1) < n:\n        return list1\n    else:\n        list1.sort()\n        return [i for i in list1 if list1.count(i) == 1]\ndef least_nume_num(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n items that occur the least number of times in the list.\n    '''\n    if len(list1) < n:\n        return list1\n    else:\n        list1.sort()\n        return [i for i in list1 if list1.count(i) == n]\ndef least_nume_num_num(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n items that occur the least number of times in the list.\n    '''\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return heapq.nlargest(n,list1)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return r**2*pi*(h+2)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    r = r + h/2\n    return pi*r**2 + 2*pi*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import numpy as np\n    \n    def lateralarea(r,h):\n        lateralarea=2*3.14*r*h\n        return lateralarea\n    \n    def lateralarea_cylinder(r,h):\n        area=np.array([lateralarea(r,h),lateralarea(r,h),lateralarea(r,h),lateralarea(r,h),lateralarea(r,h),lateralarea(r,h)])\n        return area\n    \n    def main(r,h):\n        return lateralarea_cylinder(r,h)\n    \n    return main(r,h)\n    \ndef lateralsuface_sphere(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    import numpy as np\n    \n    def lateralarea(r,h):\n        lateralarea=4*3.14*r*h\n        return lateralarea\n    \n    def lateralarea_sphere(r,h):\n        area=np.array([lateralarea(r,h),lateralarea(r,h),lateralarea(r,h),lateralarea(r,h),lateralarea(r,h),lateralarea(r,h)])\n        return area\n    \n    def main(r,h):\n        return lateralarea_sphere(r,h)\n    \n    return main(r,h)\n    \ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    import numpy as np\n    \n    def lateralarea(r,h):\n        lateralarea=2*3.14*r*(h/3)\n        return lateralarea\n    \n    def lateralarea_cone(r,h):\n        area=np.array([lateralarea(r,h),lateralarea(r,h),lateralarea(r,h),lateralarea(r,h),lateralarea(r,h),lateralarea(r,h)])\n        return area\n    \n    def main(r,h):\n        return lateralarea_cone(r,h)\n    \n    return main(r,h)\n    \ndef lateralsuface_plane(r,h):\n    '''\n    Write a function to find the lateral surface area of a plane.\n    '''\n    import numpy as np\n    \n    def lateralarea(r,h):\n        lateralarea=2*3.14*r*h\n        return lateralarea\n    \n    def lateralarea_plane(r,h):\n        area=np.array([lateralarea(r,h),lateralarea(r,h),lateralarea(r,h),lateralarea(r,h),lateralarea(r,h),lateralarea(r,h)])\n        return area\n    \n    def main(r,h):\n        return lateralarea_plane(r,h)\n    \n    return main(r,h)\n    \ndef lateralsuface_torus(r,h):\n    '''\n    Write a function to find the lateral surface area of a torus.\n    '''\n    import numpy as np\n    \n    def lateralarea(r,h):\n        lateralarea=2*3.14*r*(h/2)\n        return lateralarea\n    \n    def lateralarea_torus(r,h):\n        area=np.array([lateralarea(r,h),lateralarea(r,h),lateralarea(r,h),lateralarea(r,h),lateralarea(r,h),lateralarea(r,h)])\n        return area\n    \n    def main(r,h):\n        return lateralarea_torus(r,h)\n    \n    return main(r,h)\n    \ndef lateralsuface_conic(r,h):\n    '''\n    Write a function to find the lateral surface area of a conic.\n    '''\n    import numpy as np\n    \n    def lateralarea(r,h):\n        lateralarea=2*3.14*r*(h/2)\n        return lateralarea\n    \n    def lateralarea_conic(r,h):\n        area=np.array([lateralarea(r,h),lateralarea(r,h),lateralarea(r,h),lateralarea(r,h),lateralarea(r,h),lateralarea(r,h)])\n        return area\n    \n    def main(r,h):\n        return lateralarea_conic(r,h)\n    \n    return main(r,h)\n    \ndef lateralsuface_ellipse(r,h):\n    '''\n    Write a function to find the lateral surface area of an ellipse.\n    '''\n    import numpy as np\n    \n    def lateralarea(r,h):\n        lateralarea=4*3.14*r*h\n        return lateralarea\n    \n    def lateralarea_ellipse(r,h):\n        area=np.array([lateralarea(r,h),lateralarea(r,h),lateralarea(r,h),lateralarea(r,h),lateralarea(r,h),lateralarea(r,h)])\n        return area\n    \n    def main(r,h):\n        return lateralarea_ellipse(r,h)\n    \n    return main(r,h)\n    \ndef lateralsuface_hyperbola(r,h):\n    '''\n    Write a function to find the lateral surface area of a hyperbola.\n    '''\n    import numpy as np\n    \n    def lateralarea(r,h):\n        lateralarea=2*3.14*r*h\n        return lateralarea\n    \n    def lateralarea_hyperbola(r,h):\n        area=np.array([lateralarea(r,h),lateralarea(r,h),lateralarea(r,h),lateralarea(r,h),lateralarea(r,h),lateralarea(r,h)])\n        return area\n    \n    def main(r,h):\n        return lateralarea_hyperbola(r,h)\n    \n    return main(r,h)\n    \ndef lateralsuface_paraboloid(r,h):\n    '''\n    Write a function to find the lateral surface area of a paraboloid.\n    '''\n    import numpy as np\n    \n    def lateralarea(r,h):\n        lateralarea=2*3.14*r*(h/2)\n        return lateralarea\n    \n    def lateralarea_paraboloid(r,h):\n        area=np.array([lateralarea(r,h),lateralarea(r,h),lateralarea(r,h),lateralarea(r,h),lateralarea(r,h),lateralarea(r,h)])\n        return area\n    \n    def main(r,h):\n        return lateralarea_paraboloid(r,h)\n    \n    return main(r,h)\n    \ndef lateralsuface_trapezium(r,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid.\n    '''\n    import numpy as np\n    \n    def lateralarea(r,h):\n        lateralarea=2*3.14*r*h\n        return lateralarea\n    \n    def lateralarea_trapezium(r,h):\n        area=np.array([lateralarea(r,h),lateralarea(r,h),lateralarea(r,h),lateralarea(r,h),lateralarea(r,h),lateralarea(r,h)])\n        return area\n    \n    def main(r,h):\n        return lateralarea_trapezium(r,h)\n    \n    return main(r,h)\n    \ndef lateralsuface_rectangle(r,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle.\n    '''\n    import numpy as np\n    \n    def lateralarea(r,h):\n        lateralarea=2*3.14*r*h\n        return lateralarea\n    \n    def lateralarea_rectangle(r,h):\n        area=np.array([lateralarea(r,h),lateralarea(r,h),lateralarea(r,h),lateralarea"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    s = (math.pi * r ** 2) + (math.pi * (r + h) ** 2)\n    return s\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #assume a cylindrical surface\n    A = r*2*pi*h\n    #assume that the lateral surface is perpendicular to the main surface\n    side = 2*pi*r\n    return (A,side)\n    \ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    #assume a spherical surface\n    A = 4*pi*r**2\n    return A\n    \ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #assume a cylindrical surface\n    A = 2*pi*r*h\n    #assume that the lateral surface is perpendicular to the main surface\n    side = 2*pi*r\n    return (A,side)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (pi * r**2 * 2) + (pi * (r + h)**2)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 3.14*r*r + 2*3.14*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    pi = 3.14159265359\n    if r<=0 or h<=0:\n        return 0\n    if r>=1:\n        return pi*r*r\n    if h>=1:\n        return pi*r*r*h\n    return 2*pi*r*(r+h)\n    "
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    r=float(r)\n    h=float(h)\n    return 2*3.14*r*(r+h)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    from math import pi\n    return (r**2)*2*pi*h\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if l < 0:\n        raise ValueError(\"Must provide positive side length\")\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # convert to float to avoid decimal truncation\n    l = float(l)\n    return float(l ** 3)\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    import math\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    import math\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if l < 0:\n        raise ValueError(\"Volume of cube cannot be negative\")\n    elif l == 0:\n        return 0\n    else:\n        return l**3\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return (n & (n - 1))\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0x55555555\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xaaaaaaaa \n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n & 0x5555555555555555\n    n = n | (n >> 1)\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    print(bin(n))\n    print(bin(n & 0x5555555555555555))\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xAAAAAAAA\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n==0:\n        return 0\n    return (n-1)^n\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n-1)\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0x55555\nprint even_bit_set_number(24)\nprint even_bit_set_number(29)\nprint even_bit_set_number(78)\nprint even_bit_set_number(85)\nprint even_bit_set_number(100)\nprint even_bit_set_number(121)\nprint even_bit_set_number(149)\nprint even_bit_set_number(184)\nprint even_bit_set_number(223)\nprint even_bit_set_number(270)\nprint even_bit_set_number(313)\nprint even_bit_set_number(373)\nprint even_bit_set_number(424)\nprint even_bit_set_number(487)\nprint even_bit_set_number(530)\nprint even_bit_set_number(610)\nprint even_bit_set_number(649)\nprint even_bit_set_number(711)\nprint even_bit_set_number(770)\nprint even_bit_set_number(828)\nprint even_bit_set_number(879)\nprint even_bit_set_number(906)\nprint even_bit_set_number(955)\nprint even_bit_set_number(1008)\nprint even_bit_set_number(1054)\nprint even_bit_set_number(1110)\nprint even_bit_set_number(1153)\nprint even_bit_set_number(1209)\nprint even_bit_set_number(1266)\nprint even_bit_set_number(1322)\nprint even_bit_set_number(1388)\nprint even_bit_set_number(1443)\nprint even_bit_set_number(1514)\nprint even_bit_set_number(1577)\nprint even_bit_set_number(1652)\nprint even_bit_set_number(1727)\nprint even_bit_set_number(1791)\nprint even_bit_set_number(1866)\nprint even_bit_set_number(1941)\nprint even_bit_set_number(2026)\nprint even_bit_set_number(2090)\nprint even_bit_set_number(2136)\nprint even_bit_set_number(2191)\nprint even_bit_set_number(2266)\nprint even_bit_set_number(2341)\nprint even_bit_set_number(2426)\nprint even_bit_set_number(2491)\nprint even_bit_set_number(2566)\nprint even_bit_set_number(2651)\nprint even_bit_set_number(2736)\nprint even_bit_set_number(2799)\nprint even_bit_set_number(2874)\nprint even_bit_set_number(2949)\nprint even_bit_set_number(3034)\nprint even_bit_set_number(3117)\nprint even_bit_set_number(3182)\nprint even_bit_set_number(3255)\nprint even_bit_set_number(3338)\nprint even_bit_set_number(3423)\nprint even_bit_set_number(3500)\nprint even_bit_set_number(3577)\nprint even_bit_set_number(3652)\nprint even_bit_set_number(3737)\nprint even_bit_set_number(3822)\nprint even_bit_set_number(3897)\nprint even_bit_set_number(3972)\nprint even_bit_set_number(4057)\nprint even_bit_set_number(4132)\nprint even_bit_set_number(4207)\nprint even_bit_set_number(4272)\nprint even_bit_set_number(4347)\nprint even_bit_set_number(4402)\nprint even_bit_set_number(4467)\nprint even_bit_set_number(4542)\nprint even_bit_set_number(4597)\nprint even_bit_set_number(4662)\nprint even_bit_set_number(4737)\nprint even_bit_set_number(4812)\nprint even_bit_set_number(4887)\nprint even_bit_set_number(4962)\nprint even_bit_set_number(5047)\nprint even_bit_set_number(5122)\nprint even_bit_set_number(5197)\nprint even_bit_set_number(5260)\nprint even_bit_set_number(5337)\nprint even_bit_set_number(5422)\nprint even_bit_set_number(5499)\nprint even_bit_set_number(5576)\nprint even_bit_set_number(5655)\nprint even_bit_set_number(5642)\nprint even_bit_set_number(5707)\nprint even_bit_set_number(5772)\nprint even_bit_set_number(5747)\nprint even_bit_set_number(5808)\nprint even_bit_set_number(5873)\nprint even_bit_set_number(5848)\nprint even_bit_set_number(5933)\nprint even_bit_set_number(5988)\nprint even_bit_set_number(6063)\nprint even_bit_set_number(6150)\nprint even_bit_set_number(6226)\nprint even_bit_set_number(6291)\nprint even_bit_set_number(6356)\nprint even_bit_set_number(6341)\nprint even_bit_set_number(6406)\nprint even_bit_set_number(6471)\nprint even_bit_set_number(6546)\nprint even_bit_set_number(6631)\nprint even_bit_set_number(6696)\nprint even_bit_set_number(6771)\nprint even_bit_set_number(6856)\nprint even_bit_set_number(6941)\nprint even_bit_set_number(7016)\nprint even_bit_set_number(7089)\nprint even_bit_set_number(7166)\nprint even_bit_set_number(7241)\nprint even_bit_set_number(7306)\nprint even_bit_set_number(7381)\nprint even_bit_set_number(7456)\nprint even_bit_set_number(7441)\nprint even_bit_set_number(7426)\nprint even_bit_set_number(7491)\nprint even_bit_set_number(7566)\nprint even_bit_set_number(7643)\nprint even_bit_set_number(7708)\nprint even_bit_set_number(7773)\nprint even_bit_set_number(7748)\nprint even_bit_set_number(7833)\nprint even_bit_set_number(7898)\nprint even_bit_set_number(7973)\nprint even_bit_set_number(8008)\nprint even_bit_set_number(8173)\nprint even_bit_set_number(8248)\nprint even_bit_set_number(8303)\nprint even_bit_set_number(8368)\nprint even_bit_set_number(8443)\nprint even_bit_set_number(8418)\nprint even_bit_set_number(8501)\nprint even_bit_set_number(8574)\nprint even_bit_set_number(8639)\nprint even_bit_set_number(8724)\nprint even_bit_set_number(8793)\nprint even_bit_set_number(8868)\nprint even_bit_set_number(8843)\nprint even_bit_set_number(8928)\nprint even_bit_set_number(8993)\nprint even_bit_set_number(9068)\nprint even_bit_set_number(9143)\nprint even_bit_set_number(9208)\nprint even_bit_set_number(9273)\nprint even_bit_set_number(9348)\nprint even_bit_set_number(9423)\nprint even_bit_set_number(9498)\nprint even_bit_set_number(9573)\nprint even_bit_set_number(9638)\nprint even_bit"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    count = 0\n    if n == 0:\n        return 1\n    while n > 0:\n        n = n & (n-1)\n        count += 1\n    return count\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # counters = {}\n    # for i in test_list:\n    #     if i in counters:\n    #         counters[i] += 1\n    #     else:\n    #         counters[i] = 1\n    # return counters\n    # return {i:test_list.count(i) for i in test_list}\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    for element in test_list:\n        if element[0] not in test_dict:\n            test_dict[element[0]] = 1\n        else:\n            test_dict[element[0]] += 1\n    return test_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = Counter(test_list)\n    return result\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occur = Counter(test_list)\n    return occur\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    final_dict = {}\n    for tup in test_list:\n        if tup in final_dict.keys():\n            final_dict[tup]+=1\n        else:\n            final_dict[tup]=1\n    return final_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result_dict = {}\n    for (key, value) in test_list:\n        if key not in result_dict:\n            result_dict[key] = 1\n        else:\n            result_dict[key] += 1\n    return result_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = dict()\n    for test_tuple in test_list:\n        if test_tuple in result:\n            result[test_tuple] += 1\n        else:\n            result[test_tuple] = 1\n    return result\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # example_list = [(1, 'a'), (1, 'b'), (2, 'a'), (2, 'c'), (1, 'a'), (1, 'b'), (2, 'a'), (2, 'c'), (1, 'a'), (1, 'b'), (2, 'a'), (2, 'c')]\n    # expected_result = {(1, 'a'): 3, (2, 'c'): 2, (2, 'a'): 1, (1, 'b'): 2}\n    # result = check_occurences(example_list)\n    # assert result == expected_result\n    \n    '''\n    Write a function that takes in a list of numbers and returns a dictionary mapping each unique number to the number of times it occurs in the list.\n    '''\n    # example_list = [1, 3, 2, 2, 4, 4, 2, 4, 3]\n    # expected_result = {1: 1, 3: 2, 2: 3}\n    # result = check_occurences(example_list)\n    # assert result == expected_result\n    \n    '''\n    Write a function that takes in a list of numbers and returns a dictionary mapping each unique number to the average of the numbers.\n    '''\n    # example_list = [1, 1, 1, 2, 2, 2, 2, 3, 3, 3]\n    # expected_result = {1: 2, 2: 2, 3: 3}\n    # result = check_occurences(example_list)\n    # assert result == expected_result\n    \n    '''\n    Write a function that takes in a list of numbers and returns a dictionary mapping each unique number to the sum of the numbers.\n    '''\n    # example_list = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5]\n    # expected_result = {1: 1, 2: 3, 3: 9, 4: 10, 5: 15}\n    # result = check_occurences(example_list)\n    # assert result == expected_result\n    \n    '''\n    Write a function that takes in a list of numbers and returns a dictionary mapping each unique number to the minimum of the numbers.\n    '''\n    # example_list = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5]\n    # expected_result = {1: 1, 2: 2, 3: 3, 4: 4, 5: 5}\n    # result = check_occurences(example_list)\n    # assert result == expected_result\n    \n    '''\n    Write a function that takes in a list of numbers and returns a dictionary mapping each unique number to the maximum of the numbers.\n    '''\n    # example_list = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5]\n    # expected_result = {1: 5, 2: 5, 3: 5, 4: 5, 5: 5}\n    # result = check_occurences(example_list)\n    # assert result == expected_result\n    \n    '''\n    Write a function that takes in a list of numbers and returns a dictionary mapping each unique number to the median of the numbers.\n    '''\n    # example_list = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5]\n    # expected_result = {1: 3.5, 2: 3.5, 3: 3.5, 4: 4.0, 5: 4.5}\n    # result = check_occurences(example_list)\n    # assert result == expected_result\n    \n    '''\n    Write a function that takes in a list of numbers and returns a dictionary mapping each unique number to the mode of the numbers.\n    '''\n    # example_list = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5]\n    # expected_result = {1: 2, 2: 2, 3: 3, 4: 4, 5: 5}\n    # result = check_occurences(example_list)\n    # assert result == expected_result\n    \n    '''\n    Write a function that takes in a list of numbers and returns a dictionary mapping each unique number to the number of times it occurs in the list.\n    '''\n    # example_list = [1, 2, 2, 2, 4, 4, 2, 4, 3, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for tup in test_list:\n        if tup in result:\n            result[tup] += 1\n        else:\n            result[tup] = 1\n    return result\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # counter = Counter(test_list)\n    # return counter\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1].strip():\n                count+=1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    temp = \"\"\n    for i in str:\n        if i == \" \":\n            if len(temp) > 0:\n                count += 1\n                temp = \"\"\n        else:\n            temp += i\n    if len(temp) > 0:\n        count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    new_string = ''\n    for i in range(len(str)):\n        if str[i]!='':\n            new_string += str[i]\n        else:\n            new_string +=''\n    count = 0\n    for i in range(len(new_string)):\n        if new_string[i]!='':\n            count += 1\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    l = len(str)\n    count = 0\n    for i in range(l):\n        for j in range(i,l):\n            if str[i:j+1]!= '':\n                count += 1\n    return count\n    \n    \n    \ndef substring_lengths(str): \n    '''\n    Write a python function to find the length of the longest substring in a string.\n    '''\n    l = len(str)\n    substrings = {}\n    for i in range(l):\n        for j in range(i,l):\n            substrings[str[i:j+1]] = len(str[i:j+1])\n    return substrings\n    \n    \n    \ndef shuffle_string(str): \n    '''\n    Write a python function to shuffle a string and print the new string.\n    '''\n    l = len(str)\n    print(str)\n    for i in range(l):\n        r = randint(i,l-1)\n        str[i], str[r] = str[r], str[i]\n    return str\n    \n    \n    \ndef palindrome_permutation(str): \n    '''\n    Write a python function to find if a given string is a permutation of a palindrome.\n    '''\n    # count the occurance of each letter in the string\n    l = len(str)\n    letter_occurance = {}\n    for i in str:\n        if i in letter_occurance:\n            letter_occurance[i] += 1\n        else:\n            letter_occurance[i] = 1\n    \n    odd_occurance = 0\n    for i in letter_occurance:\n        if letter_occurance[i] % 2!= 0:\n            odd_occurance += 1\n    if odd_occurance > 1:\n        return False\n    else:\n        return True\n        \n        \ndef count_triple_strings(str): \n    '''\n    Write a python function to find the count of triples of three distinct letters in a given string.\n    '''\n    l = len(str)\n    triple_strings = 0\n    for i in range(l-2):\n        for j in range(i+1,l-1):\n            for k in range(j+1,l):\n                if str[i]+str[j]+str[k] == str[i:j+1] and str[i:j+1] == str[j:k+1] and str[i:k+1] == str[i:j+1]:\n                    triple_strings += 1\n    return triple_strings\n    \n    \n    \ndef delete_duplicates(str): \n    '''\n    Write a python function to delete all the duplicate characters in a given string.\n    '''\n    d = {}\n    for i in str:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    res = []\n    for i in d:\n        if d[i] == 1:\n            res.append(i)\n    return ''.join(res)\n    \n    \n    \ndef rotate_string(str, n): \n    '''\n    Write a python function to rotate a given string by n places.\n    '''\n    l = len(str)\n    for i in range(n):\n        if str:\n            str = str[1:] + str[0]\n        else:\n            return str\n    return str\n    \n    \n    \ndef add_space(str): \n    '''\n    Write a python function to add spaces between each two characters of a given string.\n    '''\n    l = len(str)\n    res = []\n    for i in range(l-1):\n        res.append(str[i])\n        res.append(' ')\n    res.append(str[l-1])\n    return ''.join(res)\n    \n    \n    \ndef find_maximum_bitwise(n): \n    '''\n    Write a python function to find the maximum bitwise of a given integer.\n    '''\n    i = 1\n    res = 0\n    while(i <= n):\n        res = i\n        i *= 2\n    return res\n    \n    \n    \ndef convert_base(str, base): \n    '''\n    Write a python function to convert a given base-10 integer to the given base.\n    '''\n    convert_table = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n    l = len(str)\n    res = 0\n    for i in range(l):\n        res = res * base + convert_table.find(str[i])\n    return res\n    \n    \n    \ndef generate_all_strings(length): \n    '''\n    Write a python function to generate all strings of a given length and print them.\n    '''\n    convert_table = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n    res = []\n    for i in range(length):\n        for j in range(len(convert_table)**i):\n            res.append(convert_table[j:j+i+1])\n    return res\n    \n    \n    \ndef count_pairs(n, m, k): \n    '''\n    Write a python function to find the count of pairs of a given difference with a given sum.\n    '''\n    count = 0\n    for i in range(n+1):\n        for j in range(m+1):\n            if i + j == k:\n                count += 1\n    return count\n    \n    \n    \ndef get_nth_row_pascal(n): \n    '''\n    Write a python function to print the nth row of a pascal triangle.\n    '''\n    res = [[1]]\n    for i in range(n-1):\n        res.append([1])\n        for j in range(len(res[i])):\n            res[i+1].append(res[i][j]+res[i][j+1])\n        res[i+1].append(1)\n    return res[n-1]\n    \n    \n    \ndef palindrome_permutation_without_strings(str): \n    '''\n    Write a python function to find if a given string is a permutation of a palindrome.\n    '''\n    l = len(str)\n    count = 0\n    for i in range(l):\n        if str[i]!= str[l-i-1]:\n            count += 1\n    if count > 1:\n        return False\n    else:\n        return True\n    \n    \n    \ndef check_permutation(str1, str2): \n    '''\n    Write a python function to check if a given string is a permutation of a palindrome.\n    '''\n    l1 = len(str1)\n    l2 = len(str2)\n    if l1!= l2:\n        return False\n    elif l1 == 0:\n        return True\n    else:\n        str1 = sorted(str1)\n        str2 = sorted(str2)\n        for i in range(l1):\n            if str1[i]!= str2[i]:\n                return False\n        return True\n    \n    \n    \ndef check_permutation_with_counting(str1, str2): \n    '''\n    Write a python function to check if a given string is a permutation of a palindrome.\n    '''\n    l1 = len(str1)\n    l2 = len(str2)\n    if l1!= l2:\n        return False\n    elif l1 == 0:\n        return True\n    else:\n        count = {}\n        for i in str1:\n            if i in count:\n                count[i] += 1\n            else:\n                count[i] = 1\n        for j in str2:\n            if j not in count:\n                return False\n            else:\n                count[j] -= 1\n        for k in count:\n            if count[k]!= 0:\n                return False\n        return True\n    \n    \n    \ndef find_max_consecutive_ones(n): \n    '''\n    Write a python function to find the maximu"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            if str[i:j+1]!= '':\n                result += 1\n    return result\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    #str = 'geeksforgeeks'\n    #count = 0\n    #for i in range(len(str)):\n    #    for j in range(i, len(str)):\n    #        count += 1\n    #        if len(str[i:j]) == 0:\n    #            break\n    #return count\n    return len([i for i in range(len(str)) if len(str[i:]) > 0])\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    total = 0 \n    for x in range(0, len(str)): \n        for y in range(x + 1, len(str) + 1): \n            if str[x:y]!= \"\": \n                total += 1 \n    return total\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0 \n    start = 0\n    while start < len(str):\n        end = start + 1 \n        while end < len(str) and str[end]!='':\n            end += 1\n        count += 1\n        start = end + 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    #make string lower case\n    str = str.lower()\n    \n    #find the last index of each word\n    last_indices = []\n    for word in str.split():\n        last_indices.append(str.rfind(word))\n    \n    #count the number of substrings\n    n = len(str)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return len(last_indices) - 1\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    print(\"Enter the string:\")\n    str = input()\n    l = len(str)\n    k = 0\n    for i in range(l):\n        for j in range(i,l):\n            if(str[i:j+1]!=\"\"):\n                k = k + 1\n    print(\"Number of non-empty substrings are:\",k)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total = 0\n    for i in range(m):\n        if i < n:\n            total += 1\n        elif i >= n*2:\n            total += 2\n    return total\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return m\n    elif m == n:\n        return m\n    else:\n        return m * get_total_number_of_sequences(m,n-1) + get_total_number_of_sequences(m-1,n)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    seq = [i for i in range(n)]\n    ans = 1\n    for i in range(1,n):\n        for j in range(i):\n            if seq[j] < seq[i] - 2*(j+1):\n                ans += 1\n    return ans\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n*factorial(n-1)\n    return factorial(n)/(factorial(n-m)*factorial(m))\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0:\n        return 1\n    return get_total_number_of_sequences(m,n-1) + get_total_number_of_sequences(m,n-2)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    result = m * (m+1) * n * (n+1) / 4\n    return int(result)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    total = 0\n    if n == 1:\n        total = m\n    elif n == 2:\n        total = m*(m+1)/2\n    else:\n        total = m*(m+1)*(2*m+1)/6\n    \n    return total\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < n:\n        return 0\n    elif m == n:\n        return 1\n    else:\n        return get_total_number_of_sequences(m,n-1) + get_total_number_of_sequences(m-1,n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #base case\n    if n == 0:\n        return 1\n    elif n == 1:\n        return m\n    else:\n        return get_total_number_of_sequences(m, n-1) + get_total_number_of_sequences(m, n-2)\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(1,m+1):\n        for j in range(1,i):\n            if i < j*2:\n                break\n            elif j*2 <= i <= m:\n                count += 1\n    return count\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(0,len(list1)-1):\n        list1[i] = list1[i]\n    for i in range(0,len(list2)):\n        list1[len(list1)-1] = list2[i]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1 = list1 + list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == 0:\n        return list2\n    else:\n        list1[-1] = list2\n        return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    \n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in list1:\n        if i == list1[-1]:\n            list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[len(list1)-1]=list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1]=list2\n    return list1\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    #count = 0\n    #for i in range(len(str1)):\n    #    count = count + 1\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n    \ndef reverse_string(str1):\n    '''\n    Write a function that takes a string as input and returns the reverse of the string.\n    '''\n    return str1[::-1]\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    lst_charac = []\n    for i in str1:\n        if i in lst_charac:\n            pass\n        else:\n            lst_charac.append(i)\n    return len(lst_charac)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    if not str1:\n        return 0\n    \n    count=0\n    for char in str1:\n        count+=1\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_chars = 0\n    for char in str1:\n        total_chars += 1\n    return total_chars\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n    \nprint count_charac('Hello')\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = math.ceil(math.sqrt(N))\n    return x*x\ndef is_prime(n):\n    '''\n    Write a python function to find out if a given number is prime or not.\n    '''\n    if (n < 2):\n        return False\n    if (n == 2):\n        return True\n    for i in range(2, n):\n        if (n % i == 0):\n            return False\n    return True\ndef Prime_Sum(n):\n    '''\n    Write a python function to find the sum of prime factors of a given number.\n    '''\n    sum = 0\n    if (is_prime(n)):\n        return n\n    while (n % 2 == 0):\n        sum = sum + 2\n        n = n/2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while (n % i == 0):\n            sum = sum + i\n            n = n/i\n    if (n > 2):\n        sum = sum + n\n    return sum\ndef Product_of_Primes(n):\n    '''\n    Write a python function to find the product of prime factors of a given number.\n    '''\n    p = 1\n    if (is_prime(n)):\n        return n\n    for i in range(2, n+1):\n        if (is_prime(i) and n % i == 0):\n            p = p*i\n    return p\ndef Alternating_Sum(n):\n    '''\n    Write a python function to find the alternating sum of a given number.\n    '''\n    sum = 0\n    x = 0\n    y = 0\n    while (n > 0):\n        if (x % 2 == 0):\n            sum = sum + n % 10\n        else:\n            sum = sum - n % 10\n        x = x + 1\n        n = n/10\n    return sum\ndef is_pandigital(n):\n    '''\n    Write a python function to check whether a given number is pandigital or not.\n    '''\n    string = str(n)\n    if (len(string) < 10):\n        return False\n    for i in range(1, 10):\n        if (i not in string):\n            return False\n    return True\ndef Pandigital_Product(n):\n    '''\n    Write a python function to find the product of pandigitals.\n    '''\n    p = 1\n    x = 0\n    y = 0\n    while (n > 0):\n        if (x % 2 == 0):\n            p = p * n % 10\n        else:\n            p = p / n % 10\n        x = x + 1\n        n = n/10\n    return p\ndef Find_Complement(n):\n    '''\n    Write a python function to find the complement of a given number.\n    '''\n    if (n == 0):\n        return 1\n    else:\n        return n*Find_Complement(n-1)\ndef Triangle_Number_Generator(n):\n    '''\n    Write a python function to find all the triangle numbers from 1 to n.\n    '''\n    if (n == 1):\n        return 1\n    else:\n        return n + Triangle_Number_Generator(n-1)\ndef Sum_of_Pentagonal_Numbers(n):\n    '''\n    Write a python function to find the sum of pentagonal numbers from 1 to n.\n    '''\n    if (n == 1):\n        return 1\n    else:\n        return n*(3*n - 1)/2\ndef Sum_of_Pentagonal_Numbers_Generator(n):\n    '''\n    Write a python generator to find the sum of pentagonal numbers from 1 to n.\n    '''\n    for i in range(1, n):\n        yield (i*(3*i - 1)/2)\ndef Sum_of_Hexagonal_Numbers(n):\n    '''\n    Write a python function to find the sum of hexagonal numbers from 1 to n.\n    '''\n    if (n == 1):\n        return 1\n    else:\n        return n*(2*n - 1)\ndef Sum_of_Hexagonal_Numbers_Generator(n):\n    '''\n    Write a python generator to find the sum of hexagonal numbers from 1 to n.\n    '''\n    for i in range(1, n):\n        yield (i*(2*i - 1))\ndef Sum_of_Hexagonal_Numbers_Generator(n):\n    '''\n    Write a python generator to find the sum of hexagonal numbers from 1 to n.\n    '''\n    for i in range(1, n):\n        yield (i*(2*i - 1))\ndef Triangle_Number_Generator(n):\n    '''\n    Write a python generator to find all the triangle numbers from 1 to n.\n    '''\n    for i in range(1, n):\n        yield (i*(i + 1)/2)\ndef Sum_of_Triangle_Numbers(n):\n    '''\n    Write a python function to find the sum of triangle numbers from 1 to n.\n    '''\n    if (n == 1):\n        return 1\n    else:\n        return n*(n + 1)/2\ndef Sum_of_Hollow_Triangle_Numbers(n):\n    '''\n    Write a python function to find the sum of hollow triangle numbers from 1 to n.\n    '''\n    if (n == 1):\n        return 1\n    else:\n        return (n*(n + 2)*(n + 3)/8)\ndef Sum_of_Hollow_Triangle_Numbers_Generator(n):\n    '''\n    Write a python generator to find the sum of hollow triangle numbers from 1 to n.\n    '''\n    for i in range(1, n):\n        yield (i*(i + 2)*(i + 3)/8)\ndef Sum_of_Hollow_Triangle_Numbers_Generator(n):\n    '''\n    Write a python generator to find the sum of hollow triangle numbers from 1 to n.\n    '''\n    for i in range(1, n):\n        yield (i*(i + 2)*(i + 3)/8)\ndef Sum_of_Square_Numbers(n):\n    '''\n    Write a python function to find the sum of square numbers from 1 to n.\n    '''\n    if (n == 1):\n        return 1\n    else:\n        return (n*(n + 1)*(2*n + 1)/6)\ndef Sum_of_Square_Numbers_Generator(n):\n    '''\n    Write a python generator to find the sum of square numbers from 1 to n.\n    '''\n    for i in range(1, n):\n        yield (i*(i + 1)*(2*i + 1)/6)\ndef Sum_of_Square_Numbers_Generator(n):\n    '''\n    Write a python generator to find the sum of square numbers from 1 to n.\n    '''\n    for i in range(1, n):\n        yield (i*(i + 1)*(2*i + 1)/6)\ndef Sum_of_Square_Numbers_Generator(n):\n    '''\n    Write a python generator to find the sum of square numbers from 1 to n.\n    '''\n    for i in range(1, n):\n        yield (i*(i + 1)*(2*i + 1)/6)\ndef Sum_of_Square_Numbers_Generator(n):\n    '''\n    Write a python generator to find the sum of square numbers from 1 to n.\n    '''\n    for i in range(1, n):\n        yield (i*(i + 1)*(2*i + 1)/6)\ndef Sum_of_Square_Numbers_Generator(n):\n    '''\n    Write a python generator to find the sum of square numbers from 1 to n.\n    '''\n    for i in range(1, n):\n        yield (i*(i + 1)*(2*i + 1)/6)\ndef Sum_of_Hollow_Square_Numbers(n):\n    '''\n    Write a python function to find the sum of hollow square numbers from 1 to n.\n    '''\n    if (n == 1):\n        return 1\n    else:\n        return (n*(n + 1)*(3*n + 1)/12)\ndef Sum_o"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return math.ceil(math.sqrt(N))  \n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (int(math.sqrt(N)) ** 2 == N):  \n        return (int(math.sqrt(N)) + 1) ** 2  \n    else:  \n        return (int(math.sqrt(N)) + 1) ** 2\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (int(math.sqrt(N)) ** 2 == N):  \n        return (int(math.sqrt(N)) + 1) ** 2  \n    else:  \n        return (int(math.sqrt(N)) + 1) ** 2\ndef perm(n,r):\n    '''\n    Write a python function to find the number of permutations of a given number of items and a given number of repetitions.\n    '''\n    return math.factorial(n)/math.factorial(n-r)\ndef perm(n,r):\n    '''\n    Write a python function to find the number of permutations of a given number of items and a given number of repetitions.\n    '''\n    return math.factorial(n)/math.factorial(n-r)\ndef perm(n,r):\n    '''\n    Write a python function to find the number of permutations of a given number of items and a given number of repetitions.\n    '''\n    return math.factorial(n)/math.factorial(n-r)\ndef perm(n,r):\n    '''\n    Write a python function to find the number of permutations of a given number of items and a given number of repetitions.\n    '''\n    return math.factorial(n)/math.factorial(n-r)\ndef perm(n,r):\n    '''\n    Write a python function to find the number of permutations of a given number of items and a given number of repetitions.\n    '''\n    return math.factorial(n)/math.factorial(n-r)\ndef perm(n,r):\n    '''\n    Write a python function to find the number of permutations of a given number of items and a given number of repetitions.\n    '''\n    return math.factorial(n)/math.factorial(n-r)\ndef perm(n,r):\n    '''\n    Write a python function to find the number of permutations of a given number of items and a given number of repetitions.\n    '''\n    return math.factorial(n)/math.factorial(n-r)\ndef perm(n,r):\n    '''\n    Write a python function to find the number of permutations of a given number of items and a given number of repetitions.\n    '''\n    return math.factorial(n)/math.factorial(n-r)\ndef perm(n,r):\n    '''\n    Write a python function to find the number of permutations of a given number of items and a given number of repetitions.\n    '''\n    return math.factorial(n)/math.factorial(n-r)\ndef perm(n,r):\n    '''\n    Write a python function to find the number of permutations of a given number of items and a given number of repetitions.\n    '''\n    return math.factorial(n)/math.factorial(n-r)\ndef perm(n,r):\n    '''\n    Write a python function to find the number of permutations of a given number of items and a given number of repetitions.\n    '''\n    return math.factorial(n)/math.factorial(n-r)\ndef perm(n,r):\n    '''\n    Write a python function to find the number of permutations of a given number of items and a given number of repetitions.\n    '''\n    return math.factorial(n)/math.factorial(n-r)\ndef perm(n,r):\n    '''\n    Write a python function to find the number of permutations of a given number of items and a given number of repetitions.\n    '''\n    return math.factorial(n)/math.factorial(n-r)\ndef perm(n,r):\n    '''\n    Write a python function to find the number of permutations of a given number of items and a given number of repetitions.\n    '''\n    return math.factorial(n)/math.factorial(n-r)\ndef perm(n,r):\n    '''\n    Write a python function to find the number of permutations of a given number of items and a given number of repetitions.\n    '''\n    return math.factorial(n)/math.factorial(n-r)\ndef perm(n,r):\n    '''\n    Write a python function to find the number of permutations of a given number of items and a given number of repetitions.\n    '''\n    return math.factorial(n)/math.factorial(n-r)\ndef perm(n,r):\n    '''\n    Write a python function to find the number of permutations of a given number of items and a given number of repetitions.\n    '''\n    return math.factorial(n)/math.factorial(n-r)\ndef perm(n,r):\n    '''\n    Write a python function to find the number of permutations of a given number of items and a given number of repetitions.\n    '''\n    return math.factorial(n)/math.factorial(n-r)\ndef perm(n,r):\n    '''\n    Write a python function to find the number of permutations of a given number of items and a given number of repetitions.\n    '''\n    return math.factorial(n)/math.factorial(n-r)\ndef perm(n,r):\n    '''\n    Write a python function to find the number of permutations of a given number of items and a given number of repetitions.\n    '''\n    return math.factorial(n)/math.factorial(n-r)\ndef perm(n,r):\n    '''\n    Write a python function to find the number of permutations of a given number of items and a given number of repetitions.\n    '''\n    return math.factorial(n)/math.factorial(n-r)\ndef perm(n,r):\n    '''\n    Write a python function to find the number of permutations of a given number of items and a given number of repetitions.\n    '''\n    return math.factorial(n)/math.factorial(n-r)\ndef perm(n,r):\n    '''\n    Write a python function to find the number of permutations of a given number of items and a given number of repetitions.\n    '''\n    return math.factorial(n)/math.factorial(n-r)\ndef perm(n,r):\n    '''\n    Write a python function to find the number of permutations of a given number of items and a given number of repetitions.\n    '''\n    return math.factorial(n)/math.factorial(n-r)\ndef perm(n,r):\n    '''\n    Write a python function to find the number of permutations of a given number of items and a given number of repetitions.\n    '''\n    return math.factorial(n)/math.factorial(n-r)\ndef perm(n,r):\n    '''\n    Write a python function to find the number of permutations of a given number of items and a given number of repetitions.\n    '''\n    return math.factorial(n)/math.factorial(n-r)\ndef perm(n,r):\n    '''\n    Write a python function to find the number of permutations of a given number of items and a given number of repetitions.\n    '''\n    return math.factorial(n)/math.factorial(n-r)\ndef perm(n,r):\n    '''\n    Write a python function to find the number of permutations of a given number of items and a given number of repetitions.\n    '''\n    return math.factorial(n)/math.factorial(n-r)\ndef perm(n,r):\n    '''\n    Write a python function to find the number of permutations of a given number of items and a given number of repetitions.\n    '''\n    return math.factorial(n)/math.factorial(n-r)\ndef perm(n,r):\n    '''\n    Write a python function to find the number of permutations of a given number of items and a given number of repetitions.\n    '''\n    return math.factorial("
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)) ** 2) \n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.floor(math.sqrt(N)))\ndef NumberOfPerfectSquarePairs(N): \n    '''\n    Write a python function to calculate the number of perfect square pairs of integers lower than a given number.\n    '''\n    #return ((N*(N+1)) / 4) * math.factorial(N)\n    '''\n    N = int(input(\"Enter the number\"))\n    N = N * N\n    count = 0\n    for i in range(1, N+1):\n        if i * i == N:\n            count += 1\n    return count\n    '''\n    count = 0\n    for i in range(1, N):\n        if i * i > N:\n            break\n        if (N - i * i) % 2 == 0:\n            count += 1\n    return count\n    '''\n    count = 0\n    # Initialize count value\n    for i in range(1, N):\n        # count += NumberOfPerfectSquarePairs(N - i * i)\n        count += NumberOfPerfectSquarePairs(N - i * i) * (NumberOfPerfectSquarePairs(i * i) + 1)\n    return count\n    '''\ndef NumberOfPerfectSquarePairs(N): \n    '''\n    Write a python function to calculate the number of perfect square pairs of integers lower than a given number.\n    '''\n    count = 0\n    # Initialize count value\n    for i in range(1, N):\n        # count += NumberOfPerfectSquarePairs(N - i * i)\n        count += NumberOfPerfectSquarePairs(N - i * i) * (NumberOfPerfectSquarePairs(i * i) + 1)\n    return count\n    '''\ndef SumOfAllPerfectSquarePairs(N): \n    '''\n    Write a python function to calculate the sum of all the perfect square pairs of integers lower than a given number.\n    '''\n    # Initialize count value\n    sum = 0\n    # N = int(input(\"Enter the number\"))\n    N = N * N\n    for i in range(1, N+1):\n        if i * i == N:\n            sum += i\n    return sum\n    '''\ndef SumOfAllPerfectSquarePairs(N): \n    '''\n    Write a python function to calculate the sum of all the perfect square pairs of integers lower than a given number.\n    '''\n    sum = 0\n    for i in range(1, N):\n        if i * i > N:\n            break\n        if (N - i * i) % 2 == 0:\n            sum += i * i\n    return sum\n    '''\ndef SumOfAllPerfectSquarePairs(N): \n    '''\n    Write a python function to calculate the sum of all the perfect square pairs of integers lower than a given number.\n    '''\n    sum = 0\n    # Initialize count value\n    for i in range(1, N):\n        # count += NumberOfPerfectSquarePairs(N - i * i)\n        sum += NumberOfPerfectSquarePairs(N - i * i) * (NumberOfPerfectSquarePairs(i * i) + 1)\n    return sum\n    '''\ndef SumOfAllPerfectSquarePairs(N): \n    '''\n    Write a python function to calculate the sum of all the perfect square pairs of integers lower than a given number.\n    '''\n    # Initialize count value\n    sum = 0\n    for i in range(1, N):\n        if i * i > N:\n            break\n        if (N - i * i) % 2 == 0:\n            sum += i * i\n    return sum\n    '''\ndef SumOfAllPerfectSquarePairs(N): \n    '''\n    Write a python function to calculate the sum of all the perfect square pairs of integers lower than a given number.\n    '''\n    # Initialize count value\n    sum = 0\n    for i in range(1, N):\n        if i * i > N:\n            break\n        if (N - i * i) % 2 == 0:\n            sum += i * i\n    return sum\n    '''\ndef SumOfAllPerfectSquarePairs(N): \n    '''\n    Write a python function to calculate the sum of all the perfect square pairs of integers lower than a given number.\n    '''\n    # Initialize count value\n    sum = 0\n    # N = int(input(\"Enter the number\"))\n    N = N * N\n    for i in range(1, N+1):\n        if i * i == N:\n            sum += i\n    return sum\n    '''\ndef SumOfAllPerfectSquarePairs(N): \n    '''\n    Write a python function to calculate the sum of all the perfect square pairs of integers lower than a given number.\n    '''\n    sum = 0\n    # Initialize count value\n    for i in range(1, N):\n        if i * i > N:\n            break\n        if (N - i * i) % 2 == 0:\n            sum += i * i\n    return sum\n    '''\ndef SumOfAllPerfectSquarePairs(N): \n    '''\n    Write a python function to calculate the sum of all the perfect square pairs of integers lower than a given number.\n    '''\n    sum = 0\n    # Initialize count value\n    for i in range(1, N):\n        if i * i > N:\n            break\n        if (N - i * i) % 2 == 0:\n            sum += i * i\n    return sum\n    '''\ndef SumOfAllPerfectSquarePairs(N): \n    '''\n    Write a python function to calculate the sum of all the perfect square pairs of integers lower than a given number.\n    '''\n    # Initialize count value\n    sum = 0\n    # N = int(input(\"Enter the number\"))\n    N = N * N\n    for i in range(1, N+1):\n        if i * i == N:\n            sum += i\n    return sum\n    '''\ndef SumOfAllPerfectSquarePairs(N): \n    '''\n    Write a python function to calculate the sum of all the perfect square pairs of integers lower than a given number.\n    '''\n    # Initialize count value\n    sum = 0\n    # N = int(input(\"Enter the number\"))\n    N = N * N\n    for i in range(1, N+1):\n        if i * i > N:\n            break\n        if (N - i * i) % 2 == 0:\n            sum += i * i\n    return sum\n    '''\ndef SumOfAllPerfectSquarePairs(N): \n    '''\n    Write a python function to calculate the sum of all the perfect square pairs of integers lower than a given number.\n    '''\n    # Initialize count value\n    sum = 0\n    # N = int(input(\"Enter the number\"))\n    N = N * N\n    for i in range(1, N+1):\n        if i * i == N:\n            sum += i\n    return sum\n    '''\ndef SumOfAllPerfectSquarePairs(N): \n    '''\n    Write a python function to calculate the sum of all the perfect square pairs of integers lower than a given number.\n    '''\n    # Initialize count value\n    sum = 0\n    # N = int(input(\"Enter the number\"))\n    N = N * N\n    for i in range(1, N+1):\n        if i * i > N:\n            break\n        if (N - i * i) % 2 == 0:\n            sum += i * i\n    return sum\n    '''\ndef SumOfAllPerfectSquarePairs(N): \n    '''\n    Write a python function to calculate the sum of all the perfect square pairs of integers lower than a given number.\n    '''\n    # Initialize count value\n    sum = 0\n    # N = int(input(\"Enter the number\"))\n    N = N * N\n    for i in range(1, N+1):\n        if i * i == N:\n            sum += i\n    return sum\n    '''\ndef SumOfAllPerfectSquarePairs(N): \n    '''\n    Write a python function to calculate the sum of all the perfect square pairs of integers lower than a given number.\n    '''\n    # Initialize count value\n    sum = 0\n    # N = int(input(\"Enter the number\"))\n    N = N * N\n    for i in range(1, N+1):\n        if i * i > N:\n            break\n        if (N "
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.ceil(math.sqrt(N)))\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    S = int(math.sqrt(N))\n    return S * S + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if int(math.sqrt(N))**2 == N:\n        return int(math.sqrt(N))+1\n    else:\n        return int(math.sqrt(N))**2\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    '''\n    This is a solution for this task. The idea is to use binary search\n    to find the nearest larger perfect square greater than the given number.\n    For example: if the number is 3, then the nearest larger square is 4 because\n    4 is the smallest number greater than 3, and 4^2 = 16 > 3.\n    '''\n    \n    i = int(math.ceil(math.sqrt(N)))\n    return i*i\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 2\n    elif N == 2:\n        return 3\n    else:\n        return int(math.ceil(math.sqrt(N)))**2\ndef String_compression(S):\n    '''\n    Write a python function to find the length of the longest substring which is repeated in the given string.\n    '''\n    N = len(S)\n    if N == 0:\n        return 0\n    if N == 1:\n        return 1\n    maximum = 1\n    i = 0\n    while i < N:\n        if S[i] == S[i+1]:\n            maximum = max(maximum, i+2)\n            i += 2\n        else:\n            i += 1\n    return maximum\ndef minimum_Swap_to_make_Alternate_Characters(S):\n    '''\n    Write a python function to find the minimum number of swaps to make alternate characters.\n    '''\n    N = len(S)\n    if N == 0:\n        return 0\n    if N == 1:\n        return 0\n    count_a = 0\n    count_b = 0\n    for i in range(N):\n        if i % 2 == 0:\n            if S[i] == 'a':\n                count_a += 1\n            else:\n                count_b += 1\n        else:\n            if S[i] == 'a':\n                count_b += 1\n            else:\n                count_a += 1\n    return min(count_a,count_b)\ndef longest_common_subsequence(S1, S2):\n    '''\n    Write a python function to find the longest common substring in two given strings.\n    '''\n    N = len(S1)\n    M = len(S2)\n    LCS_Matrix = [[0 for j in range(M)] for i in range(N)]\n    for i in range(N):\n        LCS_Matrix[i][0] = 0\n    for j in range(M):\n        LCS_Matrix[0][j] = 0\n    for i in range(1,N):\n        for j in range(1,M):\n            if S1[i] == S2[j]:\n                LCS_Matrix[i][j] = LCS_Matrix[i-1][j-1] + 1\n            else:\n                LCS_Matrix[i][j] = max(LCS_Matrix[i-1][j],LCS_Matrix[i][j-1])\n    return LCS_Matrix[N-1][M-1]\ndef find_Shortest_Word(A, B):\n    '''\n    Write a python function to find the shortest distance between two words in a dictionary.\n    '''\n    N = len(A)\n    M = len(B)\n    Distance = [[0 for j in range(M+1)] for i in range(N+1)]\n    for i in range(N+1):\n        Distance[i][0] = i\n    for j in range(M+1):\n        Distance[0][j] = j\n    for i in range(1,N+1):\n        for j in range(1,M+1):\n            if A[i-1] == B[j-1]:\n                Distance[i][j] = Distance[i-1][j-1]\n            else:\n                Distance[i][j] = 1 + min(Distance[i-1][j],Distance[i][j-1],Distance[i-1][j-1])\n    return Distance[N][M]\ndef Longest_Increasing_Subsequence(S):\n    '''\n    Write a python function to find the longest increasing sequence in a given sequence.\n    '''\n    N = len(S)\n    if N == 0:\n        return 0\n    if N == 1:\n        return 1\n    maximum = 1\n    i = 0\n    while i < N:\n        maximum = max(maximum, 1+Longest_Increasing_Subsequence(S[i+1:]))\n        i += 1\n    return maximum\ndef Spiral_Traversal(A):\n    '''\n    Write a python function to traverse a matrix in spiral order.\n    '''\n    N = len(A)\n    if N == 0:\n        return\n    M = len(A[0])\n    if M == 0:\n        return\n    total = (N+M-1)*2\n    print A\n    def spiral(m,n):\n        if m == 0 or n == 0:\n            return\n        for i in range(m,n+1):\n            print A[m][i],\n            print A[i][n],\n            print A[n][m],\n            print A[n-1][m]\n        spiral(m-1,n-1)\n    spiral(0,N-1)\n    spiral(N-1,0)\n    spiral(0,M-1)\n    spiral(M-1,0)\ndef Binary_Search(A, x):\n    '''\n    Write a python function to perform binary search on an array sorted in ascending order.\n    '''\n    N = len(A)\n    if N == 0:\n        return -1\n    if N == 1:\n        if x == A[0]:\n            return 0\n        else:\n            return -1\n    mid = N/2\n    if A[mid] == x:\n        return mid\n    elif x < A[mid]:\n        return Binary_Search(A[:mid],x)\n    else:\n        return Binary_Search(A[mid:],x)\ndef Substring_with_a_given_char(S,c):\n    '''\n    Write a python function to find the substrings of a string that start and end with a given character.\n    '''\n    N = len(S)\n    if N == 0:\n        return\n    if N == 1:\n        if S[0] == c:\n            return 1\n        else:\n            return 0\n    maximum = 0\n    i = 0\n    while i < N:\n        if S[i] == c:\n            maximum = max(maximum,1+Substring_with_a_given_char(S[i+1:],c))\n        i += 1\n    return maximum\ndef Substring_with_a_given_char_2(S,c):\n    '''\n    Write a python function to find the substrings of a string that start and end with a given character.\n    '''\n    N = len(S)\n    if N == 0:\n        return\n    if N == 1:\n        if S[0] == c:\n            return 1\n        else:\n            return 0\n    maximum = 0\n    i = 0\n    while i < N:\n        if S[i] == c:\n            maximum = max(maximum,1+Substring_with_a_given_char_2(S[i+1:],c))\n        i += 1\n    return maximum\ndef Substring_with_a_given_char_3(S,c):\n    '''\n    Write a python function to find the substrings of a string that start and end with a given character.\n    '''\n    N = len(S)\n    if N == 0:\n        return\n    if N == 1:\n        if S[0] == c:\n            return 1\n        else:\n            return 0\n    maximum = 0\n    i = 0\n    while i < N:\n        if S[i] == c:\n            maximum = max(maximum,1+Substring_with_a_given_char_3(S[i+1:],c))\n        i += 1\n    return maximum\ndef Substring_with_a_given_char_4(S,c):\n    '''\n    Write a python function to find the substrings of a string that start and end with a given character.\n    '''\n    N = len(S)\n    if N == 0:\n        return\n    if N == 1:\n        if S[0] == c:\n            return 1\n        else:\n            return 0\n    maximum = 0\n    i = 0\n    while i < N:\n        if S[i] == c:\n            maximum = max(maximum,1+Substring_with_a_given_char_4(S[i+1:],c))\n        i += 1\n    return maximum\ndef Longest_Substring(S):\n    '''\n    Write a python function to find the longest substring of a string which has at most one duplicate character.\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    for i in range(1,len(arr)):\n        max_ending_here = max(max_ending_here + arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def get_sum_for_bitonic_array(arr):\n        global_max = -1\n        local_max = 0\n        for i in range(len(arr)):\n            local_max = max(0, local_max + arr[i])\n            if global_max < local_max:\n                global_max = local_max\n        return global_max\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    for i in range(1,len(arr)):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def find_max_subseq(arr,start,end):\n        if start>end:\n            return 0\n        if start == end:\n            return arr[start]\n        mid = int((start+end)/2)\n        max_left = find_max_subseq(arr,start,mid)\n        max_right = find_max_subseq(arr,mid+1,end)\n        max_cross = find_max_cross(arr,start,mid,end)\n        return max(max_left,max_right,max_cross)\n    def find_max_cross(arr,start,mid,end):\n        left_sum = sum(arr[start:mid+1])\n        right_sum = sum(arr[mid+1:end+1])\n        max_left_right = arr[mid]\n        max_right_left = arr[mid]\n        max_left_left = arr[mid]\n        max_right_right = arr[mid]\n        max_cross_sum = arr[mid]\n        for i in range(mid-1,-1,-1):\n            left_sum += arr[i]\n            max_left_left = max(max_left_left,left_sum)\n        for i in range(mid+1,end+1):\n            right_sum += arr[i]\n            max_right_right = max(max_right_right,right_sum)\n        max_cross_sum = max(max_cross_sum,max_left_left+max_right_right)\n        return max(max_left_right,max_right_left,max_left_left,max_right_right)\n    if len(arr) == 0:\n        return 0\n    return find_max_subseq(arr,0,len(arr)-1)\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    N = len(arr)\n    max_sum_arr = [0] * N\n    max_sum_arr[N - 1] = arr[N - 1]\n    for i in range(N-2, -1, -1):\n        max_sum_arr[i] = max(arr[i], max_sum_arr[i+1])\n    \n    max_sum = 0\n    for i in range(N):\n        max_sum = max(max_sum, max_sum_arr[i] + arr[i])\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) <= 1: \n        return arr[0]\n    inc_sum = arr[0]\n    dec_sum = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]: \n            dec_sum = max(dec_sum, inc_sum + arr[i])\n            inc_sum = arr[i]\n        else: \n            dec_sum = max(dec_sum, arr[i])\n            inc_sum = arr[i]\n    return max(dec_sum, inc_sum)\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        if arr[start] < arr[end]:\n            end = end - 1\n        elif arr[start] > arr[end]:\n            start = start + 1\n        else:\n            start = start + 1\n            end = end - 1\n    return sum(arr[start:end+1])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_sum = arr[0]\n    max_ending_here = max_ending_here = arr[0]\n    for i in range(1,len(arr)):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_sum = max(max_ending_here, max_sum)\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = arr[0]\n    current_max = arr[0]\n    current_min = arr[0]\n    for i in range(1, len(arr)):\n        current_max = max(current_max + arr[i], arr[i])\n        current_min = min(current_min + arr[i], arr[i])\n        max_sum = max(max_sum, current_max)\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr)==0:\n        return 0\n    if len(arr)==1:\n        return arr[0]\n    max_sum = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i]<arr[i-1]:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = max_ending_here + arr[i]\n        max_sum = max(max_sum,max_ending_here)\n    return max_sum\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2.0\n    if (guess == number/2):\n        return guess\n    while(True):\n        if (guess*guess == number):\n            return guess\n        elif (guess*guess > number):\n            return (guess - 1)/2\n        else:\n            guess = (guess + number/guess)/2\n    \ndef monte_carlo_pi(trials):\n    '''\n    This function uses a Monte Carlo simulation to estimate the value of pi.\n    '''\n    in_circle = 0\n    for i in range(0,trials):\n        if (random.random()**2 + random.random()**2 <= 1):\n            in_circle += 1\n    return 4*(in_circle/float(trials))\n    \ndef monte_carlo_pi_for_range(lower_limit, upper_limit, num_trials):\n    '''\n    This function computes the average value of pi for a range of values of n using the Monte Carlo simulation.\n    '''\n    total = 0\n    for i in range(lower_limit, upper_limit):\n        total += monte_carlo_pi(i)\n    return 4*(total/float(num_trials))\n    \ndef main():\n    # compute the square root of 100\n    print'square root of 100:',babylonian_squareroot(100)\n    # compute the square root of 1000\n    print'square root of 1000:',babylonian_squareroot(1000)\n    # compute the square root of 10000\n    print'square root of 10000:',babylonian_squareroot(10000)\n    # compute the square root of 100000\n    print'square root of 100000:',babylonian_squareroot(100000)\n    # compute the square root of 1000000\n    print'square root of 1000000:',babylonian_squareroot(1000000)\n    # compute the square root of 10000000\n    print'square root of 10000000:',babylonian_squareroot(10000000)\n    # compute the square root of 100000000\n    print'square root of 100000000:',babylonian_squareroot(100000000)\n    # compute the square root of 1000000000\n    print'square root of 1000000000:',babylonian_squareroot(1000000000)\n    # compute the square root of 10000000000\n    print'square root of 10000000000:',babylonian_squareroot(10000000000)\n    # compute the square root of 10000000000000\n    print'square root of 10000000000000:',babylonian_squareroot(10000000000000000)\n    # compute the square root of 100000000000000\n    print'square root of 100000000000000:',babylonian_squareroot(1000000000000000)\n    # compute the square root of 1000000000000000\n    print'square root of 1000000000000000:',babylonian_squareroot(1000000000000000000)\n    # compute the square root of 10000000000000000\n    print'square root of 10000000000000000:',babylonian_squareroot(10000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(100000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(1000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(10000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(100000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(1000000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(100000000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(1000000000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(10000000000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(100000000000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(1000000000000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(10000000000000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(1000000000000000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(10000000000000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(1000000000000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(10000000000000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(1000000000000000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(10000000000000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(1000000000000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(10000000000000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(1000000000000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(10000000000000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(1000000000000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(10000000000000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(1000000000000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(10000000000000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(1000000000000000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(10000000000000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(1000000000000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(10000000000000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(1000000000000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(10000000000000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(1000000000000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(10000000000000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(1000000000000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot(10000000000000000000000000000000)\n    # compute the square root of 100000000000000000\n    print'square root of 100000000000000000:',babylonian_squareroot"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    eps =.001 # tiny error\n    tolerance =.05 # tolerance\n    if number < 0: # negative numbers\n        return None\n    elif number < 1: # below 1\n        return number\n    else:\n        low = 0\n        high = number\n        guess = (high + low)/2.0\n        if abs(guess**2 - number) < eps:\n            return guess\n        elif abs(guess**2 - number) < tolerance:\n            return guess\n        else:\n            if guess**2 < number:\n                return babylonian_squareroot(number, high, guess)\n            else:\n                return babylonian_squareroot(number, low, guess)\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return (number / 2) + 1\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = number\n    while 1/root!= root:\n        root = (root + number/root)/2\n    return root\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 0\n    while abs(guess ** 2 - number) > 0.001:\n        guess = 0.5 * (guess + number / guess)\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approx = 0\n    while abs(approx**2 - number) >= 0.001:\n        approx = (approx + number/approx)/2\n    return approx\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return ((1+ (1/number))**0.5).real\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon =.0000001\n    guess = number/2\n    while abs(guess**2 - number) >= epsilon:\n        guess = (guess + (number/guess))/2\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError('Cannot compute square root of negative number')\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    assert number > 0\n    \n    # This is where we compute the biggest interval for the Babylonian method.\n    # It's always a multiple of 4 because you need a multiple of 4 numbers for the\n    # Babylonian method. If your number is more than 4, you'll need to add 4 to it.\n    big_interval_multiple = (4 * number) // 5\n    \n    # The range for the interval is always a multiple of 4.\n    interval = big_interval_multiple // 4\n    \n    # We need to start at the bottom of the interval, so we need to start at the\n    # bottom of the interval.\n    guess = interval // 2\n    \n    # We are now going to start guessing and keep computing the square root until\n    # we have a different guess for the sqrt.\n    while True:\n        guess = interval // 2\n        \n        # We need to compute the square root of the number using the babylonian\n        # method, so we know that our guess is within the interval.\n        sqrt_of_number = (guess + number / guess) / 2\n        \n        # We want to know if the square root is equal to the guess. If it is, we\n        # know that we've found the sqrt of the number and we are done.\n        if sqrt_of_number == guess:\n            return sqrt_of_number\n        \n        # If it's not equal, we know that the square root is greater than the guess,\n        # so we need to increase the interval.\n        elif sqrt_of_number > guess:\n            interval = interval // 2\n        \n        # If it's not equal, we know that the square root is less than the guess,\n        # so we need to decrease the interval.\n        else:\n            interval = interval // 2\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    dp = [[0 for i in range(n+1)] for j in range(n+1)] \n    for i in range(1,n+1): \n        for j in range(1,n+1): \n            if str[i-1] == str[j-1]: \n                dp[i][j] = 1+dp[i-1][j-1] \n            else: \n                dp[i][j] = max(dp[i-1][j],dp[i][j-1]) \n    return dp[n][n]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    N = len(str) \n    M = [[0 for i in range(N)] for j in range(N)] \n    lps = [[0 for i in range(N)] for j in range(N)] \n    for i in range(N): \n        M[i][i] = 1 \n        lps[i][i] = 1\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    table = [[0 for x in range(n)] for x in range(n)] \n    subs = [[0 for x in range(n)] for x in range(n)] \n    for i in range(n): \n        table[i][i] = 1\n        subs[i][i] = str[i]\n    for i in range(n-1): \n        if (str[i] == str[i+1]): \n            table[i][i+1] = 2\n            subs[i][i+1] = str[i] + str[i+1]\n    for l in range(3,n+1): \n        for i in range(n-l+1): \n            j = i+l-1\n            if (str[i] == str[j] and table[i+1][j-1] >= l-2): \n                table[i][j] = table[i+1][j-1] + 2\n                subs[i][j] = subs[i][j-1] + subs[i+1][j-1] + str[i]\n            else: \n                table[i][j] = max(table[i][j-1], table[i+1][j]);\n                subs[i][j] = subs[i][j-1] + subs[i+1][j-1]\n    return table[0][n-1],subs[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 0:\n        return 0\n    if len(str) == 1:\n        return 1\n    n = len(str)\n    table = [[0 for x in range(n)] for x in range(n)]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for j in xrange(n)] for i in xrange(n)]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if str==str[::-1]:\n        return len(str)\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    max_lps = [0]\n    count = [1]\n    for i in range(1, len(str)): \n        max_lps.append(0)\n        count.append(0)\n        for j in range(i):\n            if str[i] == str[j] and (count[i] < count[j] + 1):\n                count[i] = count[j] + 1\n                max_lps[i] = max_lps[j]\n            elif count[i] == count[j] + 1:\n                max_lps[i] = max_lps[j] + 1\n    print(max_lps)\n    print(count)\n    print(max_lps[len(str) - 1])\n    return max_lps[len(str) - 1]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    T = [[0 for i in range(len(str))] for j in range(len(str))] \n    for i in range(len(str)): \n        T[i][i] = 1\n    maxLen = 1\n    start = 0\n    for L in range(2, len(str)+1): \n        for i in range(len(str)-L+1): \n            j = i+L-1\n            if str[i] == str[j] and L == 2: \n                T[i][j] = 2\n            elif str[i] == str[j]: \n                T[i][j] = T[i+1][j-1] + 2\n            else: \n                T[i][j] = max(T[i][j-1], T[i+1][j])\n            if T[i][j] > maxLen: \n                maxLen = T[i][j]\n                start = i\n    return str[start:start+maxLen]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Time complexity: O(n^2)\n    # Space complexity: O(n^2)\n    \n    n = len(str)\n    lps = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n): \n        lps[i][i] = 1\n    for i in range(n-1): \n        if str[i] == str[i+1]: \n            lps[i][i+1] = 2\n    for k in range(3,n+1): \n        for i in range(n-k+1): \n            j = i + k-1\n            if str[i] == str[j] and k > lps[i+1][j-1]: \n                lps[i][j] = k\n            else: \n                lps[i][j] = max(lps[i][j-1], lps[i+1][j])\n    return lps[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    maxLen = 1\n    dp = [[0 for x in range(n)] for x in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n        for j in range(i+1,n):\n            if (str[i] == str[j]):\n                if(i!=j):\n                    dp[i][j] = 2 + dp[i+1][j-1]\n                else:\n                    dp[i][j] = 2\n                maxLen = max(maxLen,dp[i][j])\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return 1 + (harmonic_sum(n-1))\n    \ndef geometric_sum(n,r=1):\n    '''\n    Write a function that takes in two positive integers and returns the sum of all the integers from 1 to n\n    using the geometric progression.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (1 * r) + geometric_sum(n-1, r)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1 / n + (harmonic_sum(n-1))\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + harmonic_sum(n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # print('Funciton Called')\n    # print(n)\n    if n == 1:\n        return 1\n    else:\n        return n / 1 + harmonic_sum(n - 1)\n    "
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n if n == 1 else 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    return 1/n + harmonic_sum(n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n if n == 1 else 1/n + harmonic_sum(n - 1)\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #if len(array_nums1) > len(array_nums2):\n    #    return intersection_array(array_nums2,array_nums1)\n    #else:\n    return [x for x in array_nums1 if x in array_nums2]\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    count = 0\n    for num1 in array_nums1:\n        for num2 in array_nums2:\n            if num1 == num2:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array1 = set(array_nums1)\n    array2 = set(array_nums2)\n    return list(array1 & array2)\n    \ndef intersection_list(list1,list2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return set(list1).intersection(list2)\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1) == 0 or len(array_nums2) == 0:\n        return []\n    # set1,set2 = set(array_nums1),set(array_nums2)\n    # return list(set1 & set2)\n    return list(set(array_nums1) & set(array_nums2))\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    output = []\n    for i in array_nums1:\n        if i in array_nums2:\n            output.append(i)\n    return output\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return [x for x in array_nums1 if x in array_nums2]\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_arr = []\n    i = 0\n    j = 0\n    if len(array_nums1) == len(array_nums2):\n        while i < len(array_nums1) and j < len(array_nums2):\n            if array_nums1[i] == array_nums2[j]:\n                intersection_arr.append(array_nums1[i])\n                i += 1\n                j += 1\n            elif array_nums1[i] > array_nums2[j]:\n                j += 1\n            else:\n                i += 1\n        return intersection_arr\n    else:\n        return False\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_list = list(set(array_nums1).intersection(set(array_nums2)))\n    return intersection_list\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return_array = []\n    for i in range(len(array_nums1)):\n        if array_nums1[i] in array_nums2:\n            return_array.append(array_nums1[i])\n    return return_array\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_1 = set(array_nums1)\n    array_2 = set(array_nums2)\n    intersection = []\n    for i in array_1:\n        if i in array_2:\n            intersection.append(i)\n    return intersection\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup_list = list(tup)\n    return tup_list.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    if tup.count(x) > 0: \n        return 1\n    else: \n        return 0\n    \ndef count_Y(tup, y): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    if tup.count(y) > 0: \n        return 1\n    else: \n        return 0\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for ele in tup:\n        if ele == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    \n    return tup.count(x)\n    \ndef max_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and returns the element that has the maximum occurence in the tuple.\n    '''\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n    \ndef count_all_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    x_count = 0\n    for t in tup:\n        if t == x:\n            x_count += 1\n    return x_count\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list[:0] + [element] + list[0:]\n    #return element + [element] + list[1:]\n    \ndef append_element(list,element):\n    '''\n    Write a function that takes in a list and an element and appends the element to the end of the list, and returns the resulting list.\n    '''\n    return list + [element]\n    \ndef remove_element(list,element):\n    '''\n    Write a function that takes in a list and an element and removes the first occurrence of the element in the list, and returns the resulting list.\n    '''\n    return list[1:]\n    #return list[:list.index(element)] + list[list.index(element)+1:]\n    \ndef reverse(list):\n    '''\n    Write a function that takes in a list and returns a new list that is the reverse of the original.\n    '''\n    return list[::-1]\n    \ndef remove_duplicates(list):\n    '''\n    Write a function that takes in a list and returns a new list that removes all duplicates from the original.\n    '''\n    return list(set(list))\n    \ndef sort(list):\n    '''\n    Write a function that takes in a list and returns a new list that is the sorted version of the original.\n    '''\n    return sorted(list)\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    insert_index = 0\n    while insert_index < len(list):\n        list.insert(insert_index,element)\n        insert_index +=1\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list=[]\n    i=0\n    while i<len(list):\n        new_list.append(list[i])\n        new_list.append(element)\n        i+=1\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if not list:\n        return [element]\n    else:\n        insert_element(list[1:],element)\n        return [list[0]] + insert_element(list[1:],element)\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element]+list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = {}\n    for number in numbers:\n        cnum = cmath.rect(number[0], number[1])\n        r = abs(cnum)\n        if cnum.real == 0 and cnum.imag == 0:\n            polar[r] = {'polar':'0'}\n        else:\n            theta = cmath.phase(cnum)\n            if theta > 0 and theta < cmath.pi:\n                polar[r] = {'polar':str(r)+','+str(theta)[:-5]+'rad'}\n            elif theta == 0:\n                polar[r] = {'polar':str(r)+','+'0'+'rad'}\n            else:\n                polar[r] = {'polar':str(r)+','+str(abs(theta))[:-5]+'rad'}\n    return polar\n    \ndef inver_com(com):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    inver = {}\n    for key,val in com.iteritems():\n        r = abs(val)\n        if val.real == 0 and val.imag == 0:\n            inver[r] = {'inver':'0'}\n        else:\n            theta = cmath.phase(val)\n            if theta > 0 and theta < cmath.pi:\n                inver[r] = {'inver':str(r)+','+str(theta)[:-5]+'rad'}\n            elif theta == 0:\n                inver[r] = {'inver':str(r)+','+'0'+'rad'}\n            else:\n                inver[r] = {'inver':str(r)+','+str(abs(theta))[:-5]+'rad'}\n    return inver\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_num = complex(numbers[0],numbers[1])\n    a = cmath.polar(complex_num)\n    #print(a)\n    return a[0],a[1]\n    #complex_num = complex(numbers[0],numbers[1])\n    #a = complex_num.polar()\n    #return a[0],a[1]\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    x=numbers[0]\n    y=numbers[1]\n    z=complex(x,y)\n    print(cmath.polar(z))\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    list1=[]\n    for i in numbers:\n        a = cmath.polar(i)\n        list1.append(a)\n    return list1    \n        \n        \nprint convert([complex(1,2),complex(-1,2),complex(3,1),complex(4,-2)])\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print(numbers,type(numbers))\n    magnitude= cmath.polar(numbers)\n    angle= cmath.phase(numbers)\n    print(magnitude,angle)\n    \n    \ndef convert_2(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    from cmath import polar,phase\n    print(numbers,type(numbers))\n    magnitude= polar(numbers)\n    angle= phase(numbers)\n    print(magnitude,angle)\n    \n    \ndef convert_3(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    print(numbers,type(numbers))\n    magnitude= cmath.polar(numbers)\n    angle= cmath.phase(numbers)\n    print(magnitude,angle)\n    \n    \ndef convert_4(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    from cmath import polar,phase\n    print(numbers,type(numbers))\n    magnitude= polar(numbers)\n    angle= phase(numbers)\n    print(magnitude,angle)\n    \ndef convert_5(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    from cmath import polar,phase\n    import cmath\n    print(numbers,type(numbers))\n    magnitude= cmath.polar(numbers)\n    angle= phase(numbers)\n    print(magnitude,angle)\n    \n    \n    \n    \n    "
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    '''\n    Given a list of complex numbers, return a list of polar coordinates\n    '''\n    convert =[]\n    for i in range(len(numbers)):\n        r = float(numbers[i].real)\n        i = float(numbers[i].imag)\n        if i<0:\n            i = -i\n            theta = cmath.phase(i)\n            r = r*(1 - abs(i))\n        else:\n            theta = cmath.phase(i)\n        \n        convert.append((r,theta))\n    return convert\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Complete the function\n    return [[num.real, num.imag, cmath.phase(num)] for num in numbers]\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print(cmath.polar(complex(numbers)))\n    \n    \ndef convert1(numbers):    \n    '''\n    Write a python function to convert polar coordinates to complex numbers.\n    '''\n    print(cmath.rect(complex(numbers)))\n    \ndef exp(numbers):    \n    '''\n    Write a python function to compute exponential of complex numbers.\n    '''\n    print(cmath.exp(complex(numbers)))\n    \ndef sqrt(numbers):    \n    '''\n    Write a python function to compute square root of complex numbers.\n    '''\n    print(cmath.sqrt(complex(numbers)))\n    \ndef phase(numbers):    \n    '''\n    Write a python function to compute phase of complex numbers.\n    '''\n    print(cmath.phase(complex(numbers)))\n    \ndef rect(numbers):    \n    '''\n    Write a python function to compute the rectangular part of complex numbers.\n    '''\n    print(cmath.rect(complex(numbers)))\n    \ndef polar(numbers):    \n    '''\n    Write a python function to compute the polar part of complex numbers.\n    '''\n    print(cmath.polar(complex(numbers)))\n    \ndef expm(numbers):    \n    '''\n    Write a python function to compute the exponential part of complex numbers.\n    '''\n    print(cmath.expm(complex(numbers)))\n    \ndef sqrtm(numbers):    \n    '''\n    Write a python function to compute the square root part of complex numbers.\n    '''\n    print(cmath.sqrtm(complex(numbers)))\n    \ndef phasem(numbers):    \n    '''\n    Write a python function to compute the phase part of complex numbers.\n    '''\n    print(cmath.phasem(complex(numbers)))\n    \ndef rectm(numbers):    \n    '''\n    Write a python function to compute the rectangular part of complex numbers.\n    '''\n    print(cmath.rectm(complex(numbers)))\n    \ndef polarm(numbers):    \n    '''\n    Write a python function to compute the polar part of complex numbers.\n    '''\n    print(cmath.polarm(complex(numbers)))\n    \ndef expmm(numbers):    \n    '''\n    Write a python function to compute the exponential part of complex numbers.\n    '''\n    print(cmath.expmm(complex(numbers)))\n    \ndef sqrtmm(numbers):    \n    '''\n    Write a python function to compute the square root part of complex numbers.\n    '''\n    print(cmath.sqrtmm(complex(numbers)))\n    \ndef phasemm(numbers):    \n    '''\n    Write a python function to compute the phase part of complex numbers.\n    '''\n    print(cmath.phasemm(complex(numbers)))\n    \ndef rectmm(numbers):    \n    '''\n    Write a python function to compute the rectangular part of complex numbers.\n    '''\n    print(cmath.rectmm(complex(numbers)))\n    \ndef polarmm(numbers):    \n    '''\n    Write a python function to compute the polar part of complex numbers.\n    '''\n    print(cmath.polarmm(complex(numbers)))\n    \ndef expmmm(numbers):    \n    '''\n    Write a python function to compute the exponential part of complex numbers.\n    '''\n    print(cmath.expmmm(complex(numbers)))\n    \ndef sqrtmmm(numbers):    \n    '''\n    Write a python function to compute the square root part of complex numbers.\n    '''\n    print(cmath.sqrtmmm(complex(numbers)))\n    \ndef phasemmm(numbers):    \n    '''\n    Write a python function to compute the phase part of complex numbers.\n    '''\n    print(cmath.phasemmm(complex(numbers)))\n    \ndef rectmmm(numbers):    \n    '''\n    Write a python function to compute the rectangular part of complex numbers.\n    '''\n    print(cmath.rectmmm(complex(numbers)))\n    \ndef polarmmm(numbers):    \n    '''\n    Write a python function to compute the polar part of complex numbers.\n    '''\n    print(cmath.polarmmm(complex(numbers)))\n    \ndef expmmm(numbers):    \n    '''\n    Write a python function to compute the exponential part of complex numbers.\n    '''\n    print(cmath.expmmmm(complex(numbers)))\n    \ndef sqrtmmm(numbers):    \n    '''\n    Write a python function to compute the square root part of complex numbers.\n    '''\n    print(cmath.sqrtmmm(complex(numbers)))\n    \ndef phasemmm(numbers):    \n    '''\n    Write a python function to compute the phase part of complex numbers.\n    '''\n    print(cmath.phasemmm(complex(numbers)))\n    \ndef rectmmm(numbers):    \n    '''\n    Write a python function to compute the rectangular part of complex numbers.\n    '''\n    print(cmath.rectmmm(complex(numbers)))\n    \ndef polarmmm(numbers):    \n    '''\n    Write a python function to compute the polar part of complex numbers.\n    '''\n    print(cmath.polarmmm(complex(numbers)))\n    \ndef expmmm(numbers):    \n    '''\n    Write a python function to compute the exponential part of complex numbers.\n    '''\n    print(cmath.expmmmm(complex(numbers)))\n    \ndef sqrtmmm(numbers):    \n    '''\n    Write a python function to compute the square root part of complex numbers.\n    '''\n    print(cmath.sqrtmmm(complex(numbers)))\n    \ndef phasemmm(numbers):    \n    '''\n    Write a python function to compute the phase part of complex numbers.\n    '''\n    print(cmath.phasemmm(complex(numbers)))\n    \ndef rectmmm(numbers):    \n    '''\n    Write a python function to compute the rectangular part of complex numbers.\n    '''\n    print(cmath.rectmmm(complex(numbers)))\n    \ndef polarmmm(numbers):    \n    '''\n    Write a python function to compute the polar part of complex numbers.\n    '''\n    print(cmath.polarmmm(complex(numbers)))\n    \ndef expmmm(numbers):    \n    '''\n    Write a python function to compute the exponential part of complex numbers.\n    '''\n    print(cmath.expmmm(complex(numbers)))\n    \ndef sqrtmmm(numbers):    \n    '''\n    Write a python function to compute the square root part of complex numbers.\n    '''\n    print(cmath.sqrtmmm(complex(numbers)))\n    \ndef phasemmm(numbers):    \n    '''\n    Write a python function to compute the phase part of complex numbers.\n    '''\n    print(cmath.phasemmm(complex(numbers)))\n    \ndef rectmmm(numbers):    \n    '''\n    Write a python function to compute the rectangular part of complex numbers.\n    '''\n    print(cmath.rectmmm(complex(numbers)))\n    \ndef polarmmm(numbers):    \n    '''\n    Write a python function to compute the polar part of complex numbers.\n    '''\n    print(cmath.polarmmm(complex(numbers)))\n    \ndef expmmm(numbers):    \n    '''\n    Write a python function to compute the exponential part of complex numbers.\n    '''\n    print(cmath.expmmmm(complex(numbers)))\n    \ndef sqrtmmm(numbers):    \n    '''\n    Write a python function to compute the square root part of complex numbers.\n    '''\n    print(cmath.sqrtmmm(complex(numbers)))\n    \ndef phasemmm(numbers):    \n    '''\n    Write a python function to compute the phase part of complex numbers.\n    '''\n    print(cmath.phasemmm(complex(numbers)))\n    \ndef rectmmm(numbers):    \n    '''\n    Write a python function to compute the rectangular part of complex numbers.\n    '''\n    print(cmath.rectmmm(complex(numbers)))\n    \ndef polarmmm(numbers):    \n    '''\n    Write a python functio"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex = []\n    for i in numbers:\n        complex.append(cmath.polar(i))\n    return complex    \n    \ndef convert_real(numbers):\n    complex = []\n    for i in numbers:\n        complex.append(cmath.polar(i)[0])\n    return complex\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    n=len(numbers)\n    for i in range(0,n):\n        numbers[i]=complex(numbers[i])\n    return numbers\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i)==int:\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    length = 0\n    for i in range(0, len(list1)):\n        if type(list1[i]) == int:\n            length += 1\n    return length\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    integer_counter = 0\n    for item in list1:\n        if isinstance(item, int):\n            integer_counter += 1\n    return integer_counter\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) is int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    result = 0\n    for i in list1:\n        if isinstance(i,int):\n            result += 1\n    return result\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([item for item in list1 if isinstance(item, int)])\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([x for x in list1 if isinstance(x,int)])\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(l) for l in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return_list = []\n    for i in range(len(l)):\n        for c in combinations_with_replacement(l[i], n):\n            return_list.append(c)\n    return return_list\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(i) for i in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(l) for i in range(n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(comb) for comb in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # a list with all combinations of length n\n    combs = list(combinations_with_replacement(l, n))\n    # a list for the final output\n    output = []\n    # loop through each combination in the list, and append the individual elements\n    for item in combs:\n        output.append(list(item))\n    # return the list of lists\n    return output\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [combi for combi in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    for i in range(n):\n        l.append(combinations_with_replacement(l,n))\n    return l\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    #assert type(n) == int\n    #assert n >= 0\n    if n <= 1:\n        return 0\n    isPrime = [True] * n\n    isPrime[0] = isPrime[1] = False\n    for i in range(2, int(n ** (1/2)) + 1):\n        if isPrime[i]:\n            for j in range(i ** 2, n, i):\n                isPrime[j] = False\n    return sum(isPrime)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = [True for _ in range(n+1)]\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5)+1):\n        if primes[i]:\n            for j in range(i**2, n+1, i):\n                primes[j] = False\n    return sum(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n<=0:\n        return 0\n    if n == 1:\n        return 0\n    return count_Primes_nums(n-1) + count_Primes_nums(n-2) + count_Primes_nums(n-3) + 1\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return count_Primes_nums(n-1) + count_Primes_nums(n-2) + count_Primes_nums(n-3)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Initialize the answer\n    n_is_prime = 1\n    # Start iterating from 2 until n\n    for i in xrange(2, n+1):\n        # If i is not a prime number, set n_is_prime to 0, and continue to the next iteration\n        if n_is_prime == 0:\n            break\n        # Iterate through all numbers from 2 to i-1\n        for j in xrange(2, i):\n            # If i is divisible by j, set n_is_prime to 0, and continue to the next iteration\n            if i % j == 0:\n                n_is_prime = 0\n                break\n        # If n_is_prime is still 1, then it is prime\n        if n_is_prime == 1:\n            print \"i is prime\"\n        \n    return n_is_prime\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    prime = [True]*(n+1)\n    i = 2\n    while i*i <= n:\n        if prime[i] == True:\n            for j in range(i*i, n+1, i):\n                prime[j] = False\n        i += 1\n    return sum(prime)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_Prime(n):\n        if n == 2:\n            return True\n        elif n % 2 == 0:\n            return False\n        elif n < 2:\n            return False\n        for i in range(2, int(n**(1/2)) + 1):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    return len([x for x in range(2, n) if is_prime(x)])\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    else:\n        if n % 2 == 0:\n            n = n + 1\n        else:\n            pass\n        primes = [2]\n        for i in range(3,n,2):\n            for j in primes:\n                if i % j == 0:\n                    break\n                else:\n                    pass\n            else:\n                primes.append(i)\n    return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    nums = list(range(2, n+1))\n    prime_nums = []\n    for i in nums:\n        if i not in prime_nums:\n            prime_nums.append(i)\n            for j in range(i, n+1, i):\n                if j in prime_nums:\n                    prime_nums.remove(j)\n    return len(prime_nums)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a = a\n    b = b\n    return (b,a)\n    pass\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n    \n    \ndef sum_list(l):\n    '''\n    Write a function that takes in a list and returns the sum of all the elements in the list.\n    '''\n    total = 0\n    for elem in l:\n        total += elem\n    return total\n    \n    \ndef sum_of_squares(l):\n    '''\n    Write a function that takes in a list of integers and returns the sum of all the elements squared.\n    '''\n    total = 0\n    for elem in l:\n        total += elem**2\n    return total\n    \n    \ndef reverse_list(l):\n    '''\n    Write a function that takes in a list and returns the list with the elements reversed.\n    '''\n    l.reverse()\n    return l\n    \n    \ndef biggest_num(nums):\n    '''\n    Write a function that takes in a list of integers and returns the largest integer in the list.\n    '''\n    biggest = nums[0]\n    for elem in nums:\n        if elem > biggest:\n            biggest = elem\n    return biggest\n    \n    \ndef unique_list(l):\n    '''\n    Write a function that takes in a list of integers and returns a new list with all duplicate values removed.\n    '''\n    return set(l)\n    \n    \ndef remove_duplicates(l):\n    '''\n    Write a function that takes in a list of integers and returns a new list with all duplicate values removed.\n    '''\n    new_list = []\n    for elem in l:\n        if elem not in new_list:\n            new_list.append(elem)\n    return new_list\n    \n    \ndef palindrome(s):\n    '''\n    Write a function that takes in a string and returns a boolean that indicates whether the string is a palindrome.\n    '''\n    if s == s[::-1]:\n        return True\n    return False\n    \n    \ndef multiply_by_2(l):\n    '''\n    Write a function that takes in a list of integers and returns a new list with each element multiplied by 2.\n    '''\n    new_l = []\n    for elem in l:\n        new_l.append(elem*2)\n    return new_l\n    \n    \ndef find_element_in_list(l,elem):\n    '''\n    Write a function that takes in a list and an integer and returns the index of the integer if it's in the list, otherwise return -1.\n    '''\n    for i, elem_ in enumerate(l):\n        if elem_ == elem:\n            return i\n    return -1\n    \n    \ndef get_pandigital(n):\n    '''\n    Write a function that takes in a positive integer and returns the largest integer whose number of digits is equal to the number of digits in n.\n    '''\n    if len(str(n))!= len(str(int(''.join(sorted(str(n)))))) or len(str(n)) == 0:\n        return 0\n    return int(''.join(sorted(str(n))))\n    \n    \ndef is_pandigital(n):\n    '''\n    Write a function that takes in a positive integer and returns True if the number has all the digits 1 through n, otherwise False.\n    '''\n    if len(str(n))!= len(str(int(''.join(sorted(str(n)))))) or len(str(n)) == 0:\n        return False\n    return True\n    \n    \ndef power_of_three(n):\n    '''\n    Write a function that takes in a positive integer and returns True if the number is a power of three, otherwise False.\n    '''\n    return (n!= 0) and (n % 3 == 0)\n    \n    \ndef is_prime(n):\n    '''\n    Write a function that takes in a positive integer and returns True if the number is prime, otherwise False.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\n    \n    \ndef is_decreasing(l):\n    '''\n    Write a function that takes in a list of integers and returns True if the list is sorted in decreasing order, otherwise False.\n    '''\n    for i in range(1,len(l)):\n        if l[i] < l[i-1]:\n            return False\n    return True\n    \n    \ndef binary_exponent(a,b):\n    '''\n    Write a function that takes in two integers and returns the result of the binary exponentiation operation.\n    '''\n    return a**b\n    \n    \ndef is_fibonacci(n):\n    '''\n    Write a function that takes in a positive integer and returns True if the number is a Fibonacci number, otherwise False.\n    '''\n    return is_prime(n) and (binary_exponent(5,n) + 4 == n)\n    \n    \ndef is_lucky_number(n):\n    '''\n    Write a function that takes in a positive integer and returns True if the number is a lucky number, otherwise False.\n    A lucky number is a number that is the sum of 4 divisors of the number, excluding the number itself.\n    '''\n    divisors = []\n    for i in range(1,n):\n        if n % i == 0:\n            divisors.append(i)\n    if sum(divisors) == n:\n        return True\n    return False\n    \n    \ndef is_bouncy(n):\n    '''\n    Write a function that takes in a positive integer and returns True if the number is a bouncy number, otherwise False.\n    A number is said to be bouncy if the absolute difference between the largest and smallest digits of the number is 1.\n    '''\n    if len(str(n)) == 1:\n        return False\n    return abs(n%10-n//10) == 1\n    \n    \ndef get_nth_pow_of_2(n):\n    '''\n    Write a function that takes in a positive integer n and returns the nth power of 2.\n    '''\n    return 2**n\n    \n    \ndef reverse_all_words(l):\n    '''\n    Write a function that takes in a list of strings and returns a new list with all the strings reversed.\n    '''\n    l.reverse()\n    for i,elem in enumerate(l):\n        l[i] = elem[::-1]\n    return l\n    \n    \ndef permute_all_strings(l):\n    '''\n    Write a function that takes in a list of strings and returns a new list with all strings permuted.\n    '''\n    permuted_list = []\n    for elem in l:\n        temp = list(elem)\n        temp.reverse()\n        permuted_list.append(''.join(temp))\n    return permuted_list\n    \n    \ndef is_valid_parenthesis(s):\n    '''\n    Write a function that takes in a string and returns True if the string is a valid parenthesis, otherwise False.\n    '''\n    open_symbols = []\n    for i,elem in enumerate(s):\n        if elem == '(':\n            open_symbols.append(i)\n        elif elem == ')':\n            if len(open_symbols) == 0:\n                return False\n            else:\n                open_symbols.pop()\n    if len(open_symbols) > 0:\n        return False\n    return True\n    \n    \ndef replace_elements(l,old_elem,new_elem):\n    '''\n    Write a function that takes in a list and replaces all the elements of the list with old_elem with new_elem.\n    '''\n    for i,elem in enumerate(l):\n        if elem == old_elem:\n            l[i] = new_elem\n    return l\n    \n    \ndef replace_character(s,old_char,new_char):\n    '''\n    Write a function that takes in a string and replaces all instances of old_char with new_char.\n    ''"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    t = a\n    a = b\n    b = t\n    return (a, b)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)>len(test_tup2):\n        max_tup=test_tup1\n        min_tup=test_tup2\n    else:\n        max_tup=test_tup2\n        min_tup=test_tup1\n    for i in xrange(len(min_tup)):\n        if min_tup[i]<max_tup[i]:\n            return max_tup\n    return min_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) == 1:\n        return test_tup1\n    if len(test_tup2) == 1:\n        return test_tup2\n    if len(test_tup1) == len(test_tup2):\n        return (max(test_tup1[0], test_tup2[0]), max(test_tup1[1], test_tup2[1]))\n    if len(test_tup1) == len(test_tup2) - 1:\n        return (max(test_tup1[0], test_tup2[0]), max(test_tup1[1], test_tup2[1]))\n    if len(test_tup1) > len(test_tup2):\n        return (max(test_tup1[0], test_tup2[0]), max(test_tup1[1], test_tup2[1]))\n    return (max(test_tup1[0], test_tup2[0]), max(test_tup1[1], test_tup2[1]))\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = (max(test_tup1[0], test_tup2[0]), max(test_tup1[1], test_tup2[1]))\n    return max_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    max_1 = (max(test_tup1[0], test_tup2[0]), max(test_tup1[1], test_tup2[1]))\n    max_2 = (max(test_tup1[0], test_tup2[1]), max(test_tup1[1], test_tup2[0]))\n    \n    return max_1 if max_1[0] >= max_1[1] else max_2\n    \n    \ndef swap(test_tup1, test_tup2):\n    '''\n    Write a function to swap the values of two tuples.\n    '''\n    \n    return (test_tup2[0], test_tup2[1], test_tup1[0], test_tup1[1])\n    \ndef is_permutation(test_tup1, test_tup2):\n    '''\n    Write a function to check if two tuples are permutations of each other.\n    '''\n    \n    return sorted(test_tup1) == sorted(test_tup2)\n    \ndef all_distinct(test_tup1, test_tup2):\n    '''\n    Write a function to check if the two tuples are all distinct.\n    '''\n    \n    return len(set(test_tup1)) == len(set(test_tup2))\n    \ndef get_common(test_tup1, test_tup2):\n    '''\n    Write a function to get the common elements of two tuples.\n    '''\n    \n    return len(set(test_tup1) & set(test_tup2))\n    \ndef square_nums(test_tup1, test_tup2):\n    '''\n    Write a function to return the tuple whose values are square of integers.\n    '''\n    \n    return (\n        n * n for n in test_tup1\n        if isinstance(n, int) and n * n >= 0\n    )\n    \ndef sum_of_squares(test_tup1, test_tup2):\n    '''\n    Write a function to return the sum of square of integers.\n    '''\n    \n    return sum(\n        n * n for n in test_tup1\n        if isinstance(n, int) and n * n >= 0\n    )\n    \ndef diff_of_squares(test_tup1, test_tup2):\n    '''\n    Write a function to return the difference between the sum of square of integers.\n    '''\n    \n    return sum_of_squares(test_tup1, test_tup2) - sum_of_squares(test_tup2, test_tup1)\n    \ndef get_least_common_factor(test_tup1, test_tup2):\n    '''\n    Write a function to get the least common factor.\n    '''\n    \n    return gcf(test_tup1[0], test_tup2[0]) * gcf(test_tup1[1], test_tup2[1])\n    \ndef gcf(test_tup1, test_tup2):\n    '''\n    Write a function to get the greatest common factor.\n    '''\n    \n    return abs(test_tup1[0] * test_tup2[1] / test_tup2[0] / test_tup1[1])\n    \ndef common_factors(test_tup1, test_tup2):\n    '''\n    Write a function to get the common factors of two integers.\n    '''\n    \n    return len(set(test_tup1) & set(test_tup2))\n    \ndef check_for_palindrome(test_tup1, test_tup2):\n    '''\n    Write a function to check if one tuple is a palindrome of another.\n    '''\n    \n    return (\n        test_tup1[::-1] == test_tup1\n        and test_tup2[::-1] == test_tup2\n    )\n    \ndef are_there_duplicates(test_tup1, test_tup2):\n    '''\n    Write a function to check if there are any duplicates in a tuple.\n    '''\n    \n    return len(set(test_tup1))!= len(set(test_tup2))\n    \ndef missing_elements(test_tup1, test_tup2):\n    '''\n    Write a function to get the missing elements of two tuples.\n    '''\n    \n    return set(test_tup1) - set(test_tup2)\n    \ndef get_permutations(test_tup1, test_tup2):\n    '''\n    Write a function to get all the permutations of a tuple.\n    '''\n    \n    return [\n        swap(test_tup1, test_tup2)\n        for test_tup2 in permutations(test_tup2)\n    ]\n    \ndef count_occurrences(test_tup1, test_tup2):\n    '''\n    Write a function to get the count of the occurrences of an element in a tuple.\n    '''\n    \n    return test_tup1.count(test_tup2)\n    \ndef get_count_of_numbers(test_tup1, test_tup2):\n    '''\n    Write a function to get the count of the numbers in a tuple.\n    '''\n    \n    return sum(test_tup1.count(n) for n in test_tup2)\n    \ndef is_there_anagram(test_tup1, test_tup2):\n    '''\n    Write a function to check if two tuples have an anagram.\n    '''\n    \n    return sorted(test_tup1) == sorted(test_tup2)\n    \ndef get_nth_digit(test_tup1, n):\n    '''\n    Write a function to get the nth digit of a tuple.\n    '''\n    \n    return int(str(test_tup1)[n])\n    \ndef is_string_equal(test_tup1, test_tup2):\n    '''\n    Write a function to check if two strings are equal.\n    '''\n    \n    return test_tup1 == test_tup2\n    \ndef convert_to_string(test_tup1, test_tup2):\n    '''\n    Write a function to convert a tuple into string.\n    '''\n    \n    return ''.join(str(test_tup) for test_tup in test_tup1)\n    \ndef compare_strings(test_tup1, test_tup2):\n    '''\n    Write a function to compare strings.\n    '''\n    \n    return cmp(test_tup1, test_tup2)\n    \ndef are_strings_equal(test_tup1, test_tup2):\n    '''\n    Write a function to check if two strings are equal.\n    '''\n    \n    return test_tup1.lower() == test_tup2.lower()\n    \ndef get_max_of_three(test_tup1, test_tup2, test_tup3):\n    '''\n    Write a function to get the max of three tuples.\n    '''\n    \n    return max(test_tup1, test_tup2, test_tup3)\n    \ndef get_first_element(test_tup1):\n    '''\n    Write a function to get the first element of a tuple.\n    '''\n    \n    return test_tup1[0]\n    \ndef get_second_element(test_tup1):\n    '''\n    Write a function to get the second element of a tuple.\n    '''\n    \n    return test_tup1[1]\n    \ndef get_third_element(test_tup1):\n    '''\n    Write a function to get the third element of a tuple.\n    '''\n    \n    return test_tup1[2]\n    \ndef get_all_elements(test_tup1):\n    '''\n    Write a function to get all the elements of "
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    #TODO: Write your code here\n    #You may modify the function code in this section\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return max(test_tup1, test_tup2, key=lambda x:x[1])\n    elif len(test_tup1) > len(test_tup2):\n        return max(test_tup1, key=lambda x:x[1])\n    else:\n        return max(test_tup2, key=lambda x:x[1])\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) == 0:\n        return test_tup2\n    elif len(test_tup2) == 0:\n        return test_tup1\n    elif test_tup1[0] > test_tup2[0]:\n        return (test_tup2[0],) + maximize_elements(test_tup1[1:], test_tup2[1:])\n    else:\n        return (test_tup1[0],) + maximize_elements(test_tup1[1:], test_tup2[1:])\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    elif test_tup1[0] > test_tup2[0]:\n        return test_tup2\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup1\n    elif test_tup1[1] > test_tup2[1]:\n        return test_tup1\n    elif test_tup1[1] < test_tup2[1]:\n        return test_tup2\n    elif test_tup1[2] > test_tup2[2]:\n        return test_tup1\n    elif test_tup1[2] < test_tup2[2]:\n        return test_tup2\n    elif test_tup1[3] > test_tup2[3]:\n        return test_tup1\n    elif test_tup1[3] < test_tup2[3]:\n        return test_tup2\n    elif test_tup1[4] > test_tup2[4]:\n        return test_tup1\n    elif test_tup1[4] < test_tup2[4]:\n        return test_tup2\n    elif test_tup1[5] > test_tup2[5]:\n        return test_tup1\n    elif test_tup1[5] < test_tup2[5]:\n        return test_tup2\n    elif test_tup1[6] > test_tup2[6]:\n        return test_tup1\n    elif test_tup1[6] < test_tup2[6]:\n        return test_tup2\n    elif test_tup1[7] > test_tup2[7]:\n        return test_tup1\n    elif test_tup1[7] < test_tup2[7]:\n        return test_tup2\n    elif test_tup1[8] > test_tup2[8]:\n        return test_tup1\n    elif test_tup1[8] < test_tup2[8]:\n        return test_tup2\n    elif test_tup1[9] > test_tup2[9]:\n        return test_tup1\n    elif test_tup1[9] < test_tup2[9]:\n        return test_tup2\n    elif test_tup1[10] > test_tup2[10]:\n        return test_tup1\n    elif test_tup1[10] < test_tup2[10]:\n        return test_tup2\n    elif test_tup1[11] > test_tup2[11]:\n        return test_tup1\n    elif test_tup1[11] < test_tup2[11]:\n        return test_tup2\n    elif test_tup1[12] > test_tup2[12]:\n        return test_tup1\n    elif test_tup1[12] < test_tup2[12]:\n        return test_tup2\n    elif test_tup1[13] > test_tup2[13]:\n        return test_tup1\n    elif test_tup1[13] < test_tup2[13]:\n        return test_tup2\n    elif test_tup1[14] > test_tup2[14]:\n        return test_tup1\n    elif test_tup1[14] < test_tup2[14]:\n        return test_tup2\n    elif test_tup1[15] > test_tup2[15]:\n        return test_tup1\n    elif test_tup1[15] < test_tup2[15]:\n        return test_tup2\n    elif test_tup1[16] > test_tup2[16]:\n        return test_tup1\n    elif test_tup1[16] < test_tup2[16]:\n        return test_tup2\n    elif test_tup1[17] > test_tup2[17]:\n        return test_tup1\n    elif test_tup1[17] < test_tup2[17]:\n        return test_tup2\n    elif test_tup1[18] > test_tup2[18]:\n        return test_tup1\n    elif test_tup1[18] < test_tup2[18]:\n        return test_tup2\n    elif test_tup1[19] > test_tup2[19]:\n        return test_tup1\n    elif test_tup1[19] < test_tup2[19]:\n        return test_tup2\n    elif test_tup1[20] > test_tup2[20]:\n        return test_tup1\n    elif test_tup1[20] < test_tup2[20]:\n        return test_tup2\n    elif test_tup1[21] > test_tup2[21]:\n        return test_tup1\n    elif test_tup1[21] < test_tup2[21]:\n        return test_tup2\n    elif test_tup1[22] > test_tup2[22]:\n        return test_tup1\n    elif test_tup1[22] < test_tup2[22]:\n        return test_tup2\n    elif test_tup1[23] > test_tup2[23]:\n        return test_tup1\n    elif test_tup1[23] < test_tup2[23]:\n        return test_tup2\n    elif test_tup1[24] > test_tup2[24]:\n        return test_tup1\n    elif test_tup1[24] < test_tup2[24]:\n        return test_tup2\n    elif test_tup1[25] > test_tup2[25]:\n        return test_tup1\n    elif test_tup1[25] < test_tup2[25]:\n        return test_tup2\n    elif test_tup1[26] > test_tup2[26]:\n        return test_tup1\n    elif test_tup1[26] < test_tup2[26]:\n        return test_tup2\n    elif test_tup1[27] > test_tup2[27]:\n        return test_tup1\n    elif test_tup1[27] < test_tup2[27]:\n        return test_tup2\n    elif test_tup1[28] > test_tup2[28]:\n        return test_tup1\n    elif test_tup1[28] < test_tup2[28]:\n        return test_tup2\n    elif test_tup1[29] > test_tup2[29]:\n        return test_tup1\n    elif test_tup1[29] < test_tup2[29]:\n        return test_tup2\n    elif test_tup1[30] > test_tup2[30]:\n        return test_tup1\n    elif test_tup1[30] < test_tup2[30]:\n        return test_tup2\n    elif test_tup1[31] > test_tup2[31]:\n        return test_tup1\n    elif test_tup1[31] < test_tup2[31]:\n        return test_tup2\n    elif test_tup1[32] > test_tup2[32]:\n        return test_tup1\n    elif test_tup1[32] < test_tup2[32]:\n        return test_tup2\n    elif test_tup1[33] > test_tup2[33]:\n        return test_tup1\n    elif test_"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup.append(test_tup1[i])\n        else:\n            max_tup.append(test_tup2[i])\n    return max_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(max(test_tup1), max(test_tup2))\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = [2]\n    x = 3\n    while len(primes) < n:\n        for y in primes:\n            if pow(y, 2, x) == 1:\n                primes.append(x)\n                x += 2\n                break\n        else:\n            primes.append(x)\n            x += 2\n    return primes[-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Get the nth newman\u2013shanks\u2013williams prime \n    r = newman_williams_prime(n) \n    # If the nth newman\u2013shanks\u2013williams prime is a perfect square, then it is the nth prime\n    if r ** 2 == n: \n        return r \n    # Otherwise, the nth newman\u2013shanks\u2013williams prime is the sum of the nth prime and the square root of the nth newman\u2013shanks\u2013williams prime\n    return r + (r ** 2 - n) // (2 * r) \n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    \n    if n%2 == 0:\n        return newman_prime(n/2)\n    \n    g = 2\n    \n    while(g**2 <= n):\n        if n%g == 0:\n            return newman_prime(n/g)\n        g += 1\n        \n    return n\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 0:\n        return 'n must be a positive integer greater than 0'\n    elif n == 1:\n        return 2\n    else:\n        # By Fermat's Little Theorem, if n is a prime number then we have 2^s\n        s = 0\n        while not is_prime(2**s):\n            s += 1\n        # By the definition of newman\u2013shanks\u2013williams prime number,\n        # p = 2^s + 1\n        # s = 0 is the only value that gives a 2^s prime number\n        p = 2**s + 1\n        # Use the binary search strategy to find a number within n of p\n        x = 2**(s - 1)\n        while x < n:\n            x = x << 1\n        while x > n:\n            x = x >> 1\n        if x == n:\n            return p\n        else:\n            return x\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    pass\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    start = time.time()\n    num = n\n    while True:\n        num += 1\n        for i in range(2,num):\n            if num % i == 0:\n                break\n        else:\n            print(num)\n            print(\"Time taken:\",time.time()-start)\n            return num\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = []\n    primetable = [False] * (n+1)\n    \n    for i in range(2,n+1):\n        if primetable[i] == True:\n            continue\n        \n        prime.append(i)\n        \n        for j in range(i*i,n+1,i):\n            primetable[j] = True\n    \n    return prime[n-1]\n    \ndef main():\n    print newman_prime(100)\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # nth newman\u2013shanks\u2013williams prime number\n    # find nth newman\u2013shanks\u2013williams prime number\n    if n == 1:\n        return 2\n    \n    else:\n        # n must be even\n        if n%2 == 0:\n            return None\n        \n        # get n = a*(2^s) + 1\n        # a*(2^s) + 1 = n - 1\n        # get s = log2(n-1)\n        s = 0\n        while (n-1)%2 == 0:\n            n = (n-1) / 2\n            s += 1\n        \n        # find a prime p\n        p = 1\n        while True:\n            # p is odd\n            if is_prime(p):\n                break\n            # p is even\n            p += 2\n        \n        # get a = p^s\n        a = p**s\n        \n        # find the number of steps (n - 1) must take before getting to the newman\u2013shanks\u2013williams\n        # prime number n - 1 = 2^s * a - 1\n        # get steps = log2(n - 1) / log2(a - 1)\n        steps = 0\n        while (n-1)%(a-1)!= 0:\n            n -= 1\n            steps += 1\n        \n        # get the newman\u2013shanks\u2013williams prime number\n        if n == 1:\n            return p\n        else:\n            return 2*p*(a**steps) + 1\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if (n == 1):\n        return 2\n    elif (n == 2):\n        return 3\n    elif (n == 3):\n        return 5\n    elif (n == 4):\n        return 7\n    elif (n == 5):\n        return 11\n    elif (n == 6):\n        return 19\n    elif (n == 7):\n        return 29\n    else:\n        return (2**n-1)\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(a/b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #return (test_tup1[i]/test_tup2[i] for i in range(0, len(test_tup1)))\n    #return [test_tup1[i]/test_tup2[i] for i in range(0, len(test_tup1))]\n    return tuple((test_tup1[i]/test_tup2[i] for i in range(0, len(test_tup1))))\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return ((a / b) for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #write your code below.Do not modify anything below this comment.\n    \n    return (tup1[0] / test_tup2[0], tup1[1] / test_tup2[1])\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    a, b = test_tup1\n    c, d = test_tup2\n    return (a/c, b/d)\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1])\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = tuple()\n    for i in range(0, len(test_tup1)):\n        result = result + (test_tup1[i] / test_tup2[i],)\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i]/test_tup2[i], )\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # def division_elements(test_tup1, test_tup2):\n    #     pass\n    # Division element-wise\n    \n    # Define a tuple of tuples\n    # test_tup1 = (2, 3, 4)\n    # test_tup2 = (10, 100, 1000)\n    \n    # Division element-wise\n    # print(test_tup1[0] / test_tup2[0])\n    # print(test_tup1[1] / test_tup2[1])\n    # print(test_tup1[2] / test_tup2[2])\n    \n    # Store the number of tuples in test_tup1\n    # n = len(test_tup1)\n    \n    # # Define a tuple of zeros\n    # # test_tup3 = (0, 0, 0)\n    \n    # # Store the tuple of zeros\n    # # test_tup3 = (0, 0, 0)\n    \n    # # Find the tuple of zeros for the division element-wise\n    # # for i in range(n):\n    # #     test_tup3[i] = 0\n    \n    # # Perform the division element-wise\n    # # for i in range(n):\n    # #     test_tup3[i] = test_tup1[i] / test_tup2[i]\n    \n    # # Uncomment the next line to see the results\n    # # print(test_tup3)\n    \n    # Return the tuple of zeros for the division element-wise\n    # return test_tup3\n    pass\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    def division_elements(test_tup1, test_tup2):\n        '''\n        write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n        '''\n        a = zip(*test_tup1)\n        b = zip(*test_tup2)\n        res = []\n        for i in range(len(a)):\n            res.append(a[i] / b[i])\n        return res\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return first_part, second_part\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    index = L\n    return (list1[0:index], list1[index:])\n    \n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # 1. Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L.\n    # 2. Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the second part of the list is L.\n    # 3. Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L.\n    # 4. Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the second part of the list is L.\n    # 5. Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L.\n    # 6. Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the second part of the list is L.\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[0:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    half = len(list1) / 2\n    return (list1[0:half], list1[half:])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    length = len(list1)\n    return (list1[:length/2], list1[length/2:])\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return round(h_age * 7)\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    if h_age <= 2:\n        return h_age * 8\n    elif h_age >= 3:\n        return 22 + (h_age - 2) * 4\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    #first: calculate the value of the dog's age in months.\n    age_in_months = (h_age * 12)\n    #then, calculate the value of the dog's age in dog's years.\n    age_in_dog_years = age_in_months / 12\n    #then, calculate the value of the dog's age in dog's weeks.\n    age_in_weeks = age_in_dog_years * 7\n    #and finally, calculate the value of the dog's age in dog's days.\n    age_in_days = age_in_weeks * 7\n    #return the value of the dog's age.\n    return age_in_days\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age*7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        print(\"Age must be a positive number.\")\n        return\n    else:\n        age_in_years = h_age * 7\n        return age_in_years\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    if h_age < 0:\n        print('Please enter a positive number.')\n    elif h_age <= 1:\n        return h_age * 10.5\n    elif h_age <= 2:\n        return (h_age - 1) * 4 + 21\n    else:\n        return (h_age - 2) * 4 + 21 + 4 * (h_age - 2)\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (h_age * 7) + 1\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        return 0\n    return (h_age * 7) + 17\n    \ndef dog_years(d_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if d_age < 0:\n        return 0\n    return d_age * 4\n    \ndef dog_age_in_years(age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if age < 0:\n        return 0\n    return (age * 7) + 17\n    \ndef dog_years_in_years(age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if age < 0:\n        return 0\n    return age * 4\n    \ndef multiply_by_seven(x):\n    '''\n    Write a function to multiply by seven.\n    '''\n    return x * 7\n    \ndef times_two_thirds(x):\n    '''\n    Write a function to multiply by two thirds.\n    '''\n    return x * 2 / 3\n    \ndef is_palindrome(word):\n    '''\n    Write a function to determine if a word is a palindrome.\n    '''\n    if len(word) <= 1:\n        return True\n    if word[0]!= word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n    \ndef is_palindrome_rec(word, i = -1):\n    '''\n    Write a function to determine if a word is a palindrome.\n    '''\n    if i == len(word) - 1:\n        return True\n    if word[i]!= word[-1 - i]:\n        return False\n    return is_palindrome_rec(word, i + 1)\n    \ndef is_palindrome_rec_2(word, i = -1, j = -1):\n    '''\n    Write a function to determine if a word is a palindrome.\n    '''\n    if i == j:\n        return True\n    if word[i]!= word[-1 - i]:\n        return False\n    return is_palindrome_rec_2(word, i + 1, j - 1)\n    \ndef is_palindrome_rec_3(word, i = -1):\n    '''\n    Write a function to determine if a word is a palindrome.\n    '''\n    if i == len(word) - 1:\n        return True\n    if word[i]!= word[-1 - i]:\n        return False\n    return is_palindrome_rec_3(word, i + 1)\n    \ndef reverse_rec(word, i = -1, j = -1):\n    '''\n    Write a function to reverse a word.\n    '''\n    if i == j:\n        return\n    reverse_rec(word, i + 1, j - 1)\n    temp = word[i]\n    word[i] = word[j]\n    word[j] = temp\n    \ndef reverse_rec_2(word, i = -1, j = -1):\n    '''\n    Write a function to reverse a word.\n    '''\n    if i == j:\n        return\n    temp = word[i]\n    word[i] = word[j]\n    word[j] = temp\n    reverse_rec_2(word, i + 1, j - 1)\n    \ndef reverse_rec_3(word, i = -1, j = -1):\n    '''\n    Write a function to reverse a word.\n    '''\n    if i == j:\n        return\n    temp = word[i]\n    word[i] = word[j]\n    word[j] = temp\n    reverse_rec_3(word, i + 1, j - 1)\n    \ndef is_lexical_order(word1, word2):\n    '''\n    Write a function to determine if two words are in lexical order.\n    '''\n    if word1 == word2:\n        return True\n    if len(word1)!= len(word2):\n        return False\n    if word1 > word2:\n        return False\n    if word2 > word1:\n        return False\n    i = 0\n    j = 0\n    while i < len(word1):\n        if word1[i]!= word2[i]:\n            return False\n        i += 1\n    return True\n    \ndef is_lexical_order_2(word1, word2):\n    '''\n    Write a function to determine if two words are in lexical order.\n    '''\n    if word1 == word2:\n        return True\n    if len(word1)!= len(word2):\n        return False\n    i = 0\n    j = 0\n    while i < len(word1):\n        if word1[i]!= word2[i]:\n            return False\n        i += 1\n    return True\n    \ndef is_lexical_order_3(word1, word2):\n    '''\n    Write a function to determine if two words are in lexical order.\n    '''\n    if word1 == word2:\n        return True\n    if len(word1)!= len(word2):\n        return False\n    i = 0\n    j = 0\n    while i < len(word1):\n        if word1[i]!= word2[i]:\n            return False\n        i += 1\n    return True\n    \ndef is_lexical_order_4(word1, word2):\n    '''\n    Write a function to determine if two words are in lexical order.\n    '''\n    if word1 == word2:\n        return True\n    if len(word1)!= len(word2):\n        return False\n    if word1 > word2:\n        return False\n    if word2 > word1:\n        return False\n    i = 0\n    j = 0\n    while i < len(word1):\n        if word1[i]!= word2[i]:\n            return False\n        i += 1\n    return True\n    \ndef is_lexical_order_5(word1, word2):\n    '''\n    Write a function to determine if two words are in lexical order.\n    '''\n    if word1 == word2:\n        return True\n    if len(word1)!= len(word2):\n        return False\n    if word1 > word2:\n        return False\n    if word2 > word1:\n        return False\n    i = 0\n    j = 0\n    while i < len(word1):\n        if word1[i]!= word2[i]:\n            return False\n        i += 1\n    return True\n    \ndef is_lexical_order_6(word1, word2):\n    '''\n    Write a function to determine if two words are in lexical order.\n    '''\n    if word1 == word2:\n        return True\n    if len(word1)!= len(word2):\n        return False\n    if word1 > word2:\n        return False\n    if word2 > word1:\n        return False\n    i = 0\n    j = 0\n    while i < len(word1):\n        if word1[i]!= word2[i]:\n            return False\n        i += 1\n    return True\n    \ndef is_lexical_order_7(word1, word2):\n    '''\n    Write a function to determine if two words are in lexical order.\n    '''\n    if word1 == word2:\n        return True\n    if len(word1)!= len(word2):\n        return False\n    if word1 > word2:\n        return False\n    if word2 > word1:\n        return False\n    i = 0\n    j = 0\n    while i < len(word1):\n        if word1[i]!= word2[i]:\n            return False\n        i += 1\n    return True\n    \ndef is_lexical_order_8(word1, word2):\n    '''\n    Write a function to determine if two words are in lexical order.\n    '''\n    if word1 == word2:\n        return True\n    if len(word1)!= len(word2):\n        return False\n    if word1 > word2:\n        return False\n    if word2 > word1:\n        return False\n    i = 0\n    j "
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # def list_split(S, step):\n    #     '''\n    #     Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    #     '''\n    #     # return [S[i::step] for i in range(step)]\n    #     return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) % step!= 0:\n        return 'error'\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = [S]\n    for i in range(step, len(S), step):\n        L.append(S[i:i+step])\n    return L\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step > len(S):\n        print('Incorrect step size')\n    else:\n        l = []\n        for i in range(0, len(S), step):\n            l.append(S[i:i+step])\n        return l\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in xrange(step)]\n    \n    \ndef list_reverse(S):\n    '''\n    Write a function that takes in a list and returns a new list with the elements of the original list in reverse order.\n    '''\n    return S[::-1]\n    \n    \ndef is_sorted(S):\n    '''\n    Write a function that takes in a list and returns True if the list is sorted and False otherwise.\n    '''\n    return all(S[i] <= S[i + 1] for i in xrange(len(S) - 1))\n    \n    \ndef merge(S1, S2):\n    '''\n    Write a function that takes in two lists and returns a new list that is the merge of the two lists.\n    '''\n    return S1 + S2\n    \n    \ndef map_merge(L1, L2, f):\n    '''\n    Write a function that takes in two lists and a function and returns a new list that is the list with the function applied to each element of the list.\n    '''\n    return [f(L1[i], L2[i]) for i in xrange(len(L1))]\n    \n    \ndef map_f(L, f):\n    '''\n    Write a function that takes in a list and a function and returns a new list that is the list with the function applied to each element of the list.\n    '''\n    return [f(L[i]) for i in xrange(len(L))]\n    \n    \ndef map_reduce(L, f):\n    '''\n    Write a function that takes in a list and a function and returns a new list that is the result of applying the function to every element of the list.\n    '''\n    return [f(L[i]) for i in xrange(len(L))]\n    \n    \ndef filter_merge(L1, L2, f):\n    '''\n    Write a function that takes in two lists and returns a new list that is the merged list of the two lists, but with only the elements of the new list that satisfy the function f.\n    '''\n    return [L1[i] for i in xrange(len(L1)) if f(L1[i])] + [L2[i] for i in xrange(len(L2)) if f(L2[i])]\n    \n    \ndef filter_f(L, f):\n    '''\n    Write a function that takes in a list and a function and returns a new list that is the list with only the elements of the new list that satisfy the function f.\n    '''\n    return [L[i] for i in xrange(len(L)) if f(L[i])]\n    \n    \ndef filter_reduce(L, f):\n    '''\n    Write a function that takes in a list and a function and returns a new list that is the result of applying the function to every element of the list, but with only the elements of the new list that satisfy the function f.\n    '''\n    return f(L)\n    \n    \ndef is_anagram(S1, S2):\n    '''\n    Write a function that takes in two strings and returns True if the strings are anagrams and False otherwise.\n    '''\n    return sorted(S1) == sorted(S2)\n    \n    \ndef max_abs(L):\n    '''\n    Write a function that takes in a list of integers and returns the largest absolute value in the list.\n    '''\n    return max([abs(L[i]) for i in xrange(len(L))])\n    \n    \ndef abs_sum(L):\n    '''\n    Write a function that takes in a list of integers and returns the sum of absolute values of the elements of the list.\n    '''\n    return sum([abs(L[i]) for i in xrange(len(L))])\n    \n    \ndef has_empty_strings(L):\n    '''\n    Write a function that takes in a list of strings and returns True if the list contains any empty strings and False otherwise.\n    '''\n    return any('' in L)\n    \n    \ndef has_empty_strings_2(L):\n    '''\n    Write a function that takes in a list of strings and returns True if the list contains any empty strings and False otherwise.\n    '''\n    return any(not L[i].strip() for i in xrange(len(L)))\n    \n    \ndef compute_bill(S, p):\n    '''\n    Write a function that takes in the price and the service time of a dinner bill and returns the total cost of the bill.\n    '''\n    return S * p\n    \n    \ndef compute_bill_2(p, s):\n    '''\n    Write a function that takes in the price and the service time of a dinner bill and returns the total cost of the bill.\n    '''\n    return p * s\n    \n    \ndef compute_bill_3(p, s):\n    '''\n    Write a function that takes in the price and the service time of a dinner bill and returns the total cost of the bill.\n    '''\n    return p + (p * s) / 100\n    \n    \ndef compute_bill_4(p, s):\n    '''\n    Write a function that takes in the price and the service time of a dinner bill and returns the total cost of the bill.\n    '''\n    return p + (p * s) / 100 if s <= 2 else p * 1.2\n    \n    \ndef compute_bill_5(p, s):\n    '''\n    Write a function that takes in the price and the service time of a dinner bill and returns the total cost of the bill.\n    '''\n    return p + (p * s) / 100 if s <= 2 else p * 1.2 if s <= 5 else p * 1.5\n    \n    \ndef compute_bill_6(p, s):\n    '''\n    Write a function that takes in the price and the service time of a dinner bill and returns the total cost of the bill.\n    '''\n    return p + (p * s) / 100 if s <= 2 else p * 1.2 if s <= 5 else p * 1.5 if s <= 10 else p * 1.8\n    \n    \ndef compute_bill_7(p, s):\n    '''\n    Write a function that takes in the price and the service time of a dinner bill and returns the total cost of the bill.\n    '''\n    return p + (p * s) / 100 if s <= 2 else p * 1.2 if s <= 5 else p * 1.5 if s <= 10 else p * 1.8 if s <= 15 else p * 2\n    \n    \ndef compute_bill_8(p, s):\n    '''\n    Write a function that takes in the price and the service time of a dinner bill and returns the total cost of the bill.\n    '''\n    return p + (p * s) / 100 if s <= 2 else p * 1.2 if s <= 5 else p * 1.5 if s <= 10 else p * 1.8 if s <= 15 else p * 2 if s <= 20 else p * 2.5\n    \n    \ndef compute_bill_9(p, s):\n    '''\n    Write a function that takes in the price and the service time of a dinner bill and returns the total cost of the bill.\n    '''\n    return p + (p * s) / 100 if s <= 2 else p * 1.2 if s <= 5 else p * 1.5 if s <= 10 else p * 1.8 if s <= 15 else p * 2 if s <= 20 else p * 2.5 if s <= 25 else p * 2.8\n    \n    \ndef compute_bill_10(p, s):\n    '''\n    Write a function that takes in the price and the service time of a dinner bill and returns the total cost of the bill.\n    '''\n    return p + (p * s) / 100 if s <= 2 else p * 1.2 if s <= 5 else p * 1.5 if s <= 10 else p * 1.8 if s <= 15 else p * 2 if s <= 20 else p * 2.5 if s <= 25 else p * 2.8 if s <= 30 else p * 2.9\n    \n    \ndef compute_bill_11(p, s):\n    '''\n    Write a function that takes in the price and the service time of a dinner bill and returns the total cost of the bill.\n    '''\n    return p + (p * s) "
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    res = []\n    for i in range(0, len(S), step):\n        res.append(S[i:i+step])\n    return res\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    i = 0\n    while i < len(S):\n        result.append(S[i:i + step])\n        i += step\n    return result\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = float(l)\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l ** 2)\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = int(l)\n    area = 6*l**2\n    return area\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * pow(l, 2)\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    a = l**2\n    return a\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # If the length is greater than zero, it is a valid side length.\n    if l > 0:\n        # The surface area of a cube is the area of the 6 faces times the length of the side.\n        return 6 * l ** 2\n    # If the length is zero, the surface area is undefined.\n    else:\n        return 'undefined'\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    a,b,c=l\n    return 6*a*b+6*a*c+6*b*c\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import math\n    l = float(l)\n    return 6*l**2\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    import math\n    r = float(r)\n    return 4*math.pi*r**2\ndef lateralsurface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given its radius and height.\n    '''\n    import math\n    r = float(r)\n    h = float(h)\n    return 2*math.pi*r*(r+h)\ndef main():\n    import math\n    print lateralsurface_cube(3)\n    print lateralsurface_sphere(5)\n    print lateralsurface_cylinder(5,7)\nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([i**2 for i in range(1,n,2)])\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 1:\n        return n**2 + square_Sum(n - 1)\n    else:\n        return square_Sum(n - 1)\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total=0\n    for i in range(n+1):\n        if i%2==1:\n            total+=i**2\n    return total\n    \n    \ndef if_else_statement():\n    '''\n    Write a python function that takes in two integers n and m and returns True if m is a factor of n, and False if it is not.\n    '''\n    if n%m==0:\n        return True\n    else:\n        return False\n    \n    \ndef for_loop_statement():\n    '''\n    Write a python function that takes in two integers n and m and returns a list of the first n multiples of m.\n    '''\n    l=[]\n    for i in range(n):\n        l.append(i*m)\n    return l\n    \n    \ndef while_loop_statement():\n    '''\n    Write a python function that takes in two integers n and m and returns a list of the first n multiples of m.\n    '''\n    l=[]\n    i=0\n    while i<n:\n        l.append(i*m)\n        i+=1\n    return l\n    \n    \ndef definite_loop_statement():\n    '''\n    Write a python function that takes in two integers n and m and returns a list of the first n multiples of m.\n    '''\n    l=[]\n    for i in range(n):\n        l.append(i*m)\n    return l\n    \n    \ndef mystery_func(a,b):\n    '''\n    Write a python function that takes in two integers a and b and returns the value of a^b.\n    '''\n    return a**b\n    \n    \ndef mystery_func_2(a,b):\n    '''\n    Write a python function that takes in two integers a and b and returns the value of a/b.\n    '''\n    return a/b\n    \n    \ndef mystery_func_3(a,b):\n    '''\n    Write a python function that takes in two integers a and b and returns the value of a-b.\n    '''\n    return a-b\n    \n    \ndef mystery_func_4(a,b):\n    '''\n    Write a python function that takes in two integers a and b and returns the value of a+b.\n    '''\n    return a+b\n    \n    \ndef mystery_func_5(a,b):\n    '''\n    Write a python function that takes in two integers a and b and returns the value of a%b.\n    '''\n    return a%b\n    \n    \ndef mystery_func_6(a,b):\n    '''\n    Write a python function that takes in two integers a and b and returns the value of a//b.\n    '''\n    return a//b\n    \n    \ndef mystery_func_7(a,b):\n    '''\n    Write a python function that takes in two integers a and b and returns the value of a**b.\n    '''\n    return a**b\n    \n    \ndef mystery_func_8(a,b):\n    '''\n    Write a python function that takes in two integers a and b and returns the value of a**b.\n    '''\n    return a**b\n    \n    \ndef mystery_func_9(a,b):\n    '''\n    Write a python function that takes in two integers a and b and returns the value of a**b.\n    '''\n    return a**b\n    \n    \ndef mystery_func_10(a,b):\n    '''\n    Write a python function that takes in two integers a and b and returns the value of a/b.\n    '''\n    return a/b\n    \n    \ndef mystery_func_11(a,b):\n    '''\n    Write a python function that takes in two integers a and b and returns the value of a%b.\n    '''\n    return a%b\n    \n    \ndef mystery_func_12(a,b):\n    '''\n    Write a python function that takes in two integers a and b and returns the value of a//b.\n    '''\n    return a//b\n    \n    \ndef mystery_func_13(a,b):\n    '''\n    Write a python function that takes in two integers a and b and returns the value of a+b.\n    '''\n    return a+b\n    \n    \ndef mystery_func_14(a,b):\n    '''\n    Write a python function that takes in two integers a and b and returns the value of a+b.\n    '''\n    return a+b\n    \n    \ndef mystery_func_15(a,b):\n    '''\n    Write a python function that takes in two integers a and b and returns the value of a+b.\n    '''\n    return a+b\n    \n    \ndef mystery_func_16(a,b):\n    '''\n    Write a python function that takes in two integers a and b and returns the value of a+b.\n    '''\n    return a+b\n    \n    \ndef mystery_func_17(a,b):\n    '''\n    Write a python function that takes in two integers a and b and returns the value of a+b.\n    '''\n    return a+b\n    \n    \ndef mystery_func_18(a,b):\n    '''\n    Write a python function that takes in two integers a and b and returns the value of a+b.\n    '''\n    return a+b\n    \n    \ndef mystery_func_19(a,b):\n    '''\n    Write a python function that takes in two integers a and b and returns the value of a+b.\n    '''\n    return a+b\n    \n    \ndef mystery_func_20(a,b):\n    '''\n    Write a python function that takes in two integers a and b and returns the value of a+b.\n    '''\n    return a+b\n    \n    \ndef mystery_func_21(a,b):\n    '''\n    Write a python function that takes in two integers a and b and returns the value of a+b.\n    '''\n    return a+b\n    \n    \ndef mystery_func_22(a,b):\n    '''\n    Write a python function that takes in two integers a and b and returns the value of a+b.\n    '''\n    return a+b\n    \n    \ndef mystery_func_23(a,b):\n    '''\n    Write a python function that takes in two integers a and b and returns the value of a+b.\n    '''\n    return a+b\n    \n    \ndef mystery_func_24(a,b):\n    '''\n    Write a python function that takes in two integers a and b and returns the value of a+b.\n    '''\n    return a+b\n    \n    \ndef mystery_func_25(a,b):\n    '''\n    Write a python function that takes in two integers a and b and returns the value of a+b.\n    '''\n    return a+b\n    \n    \ndef mystery_func_26(a,b):\n    '''\n    Write a python function that takes in two integers a and b and returns the value of a+b.\n    '''\n    return a+b\n    \n    \ndef mystery_func_27(a,b):\n    '''\n    Write a python function that takes in two integers a and b and returns the value of a+b.\n    '''\n    return a+b\n    \n    \ndef mystery_func_28(a,b):\n    '''\n    Write a python function that takes in two integers a and b and returns the value of a+b.\n    '''\n    return a+b\n    \n    \ndef mystery_func_29(a,b):\n    '''\n    Write a python function that takes in two integers a and b and returns the value of a+b.\n    '''\n    return a+b\n    \n    \ndef mystery_func_30(a,b):\n    '''\n    Write a python function that takes in two integers a and b and returns the value of a+b.\n    '''\n    return a+b\n    \n    \ndef mystery_func_31(a,b):\n    '''\n    Write a python function that takes in two integers a and b and returns the value of a+b.\n    '''\n    return a+b\n    \n    \ndef mystery_func_32(a,b):\n    '''\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Initialize the sum to 0\n    sum = 0\n    # Loop from 1 to n\n    for i in range(1, n+1):\n        # If the i-th term is odd, sum the i-th term and add it to the sum\n        if i % 2!= 0:\n            sum = sum + i * i\n    # Return the sum\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    sum = 0\n    for i in range(1, n + 1, 2):\n        sum += i ** 2\n    return sum\n    \n    "
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([i**2 for i in range(1,n+1,2)])\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([i**2 for i in range(1,n+1) if i%2 == 1])\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([x ** 2 for x in range(1, n, 2)])\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    nums = range(1,n+1)\n    for i in nums:\n        if i % 2!= 0:\n            sum = sum + i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n*(n-1)//2\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num = 1\n    for i in xrange(1, n):\n        num *= (i + 1)\n    return num\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 8\n    elif n == 6:\n        return 11\n    elif n == 7:\n        return 15\n    elif n == 8:\n        return 21\n    elif n == 9:\n        return 27\n    elif n == 10:\n        return 36\n    elif n == 11:\n        return 45\n    elif n == 12:\n        return 64\n    elif n == 13:\n        return 81\n    elif n == 14:\n        return 100\n    elif n == 15:\n        return 120\n    elif n == 16:\n        return 153\n    elif n == 17:\n        return 171\n    elif n == 18:\n        return 204\n    elif n == 19:\n        return 227\n    elif n == 20:\n        return 256\n    elif n == 21:\n        return 285\n    elif n == 22:\n        return 324\n    elif n == 23:\n        return 361\n    elif n == 24:\n        return 400\n    elif n == 25:\n        return 429\n    elif n == 26:\n        return 486\n    elif n == 27:\n        return 529\n    elif n == 28:\n        return 587\n    elif n == 29:\n        return 654\n    elif n == 30:\n        return 721\n    elif n == 31:\n        return 804\n    elif n == 32:\n        return 877\n    elif n == 33:\n        return 937\n    elif n == 34:\n        return 1008\n    elif n == 35:\n        return 1069\n    elif n == 36:\n        return 1132\n    elif n == 37:\n        return 1205\n    elif n == 38:\n        return 1278\n    elif n == 39:\n        return 1341\n    elif n == 40:\n        return 1400\n    elif n == 41:\n        return 1463\n    elif n == 42:\n        return 1526\n    elif n == 43:\n        return 1595\n    elif n == 44:\n        return 1658\n    elif n == 45:\n        return 1729\n    elif n == 46:\n        return 1792\n    elif n == 47:\n        return 1855\n    elif n == 48:\n        return 1925\n    elif n == 49:\n        return 1968\n    elif n == 50:\n        return 2041\n    elif n == 51:\n        return 2104\n    elif n == 52:\n        return 2167\n    elif n == 53:\n        return 2230\n    elif n == 54:\n        return 2293\n    elif n == 55:\n        return 2356\n    elif n == 56:\n        return 2429\n    elif n == 57:\n        return 2492\n    elif n == 58:\n        return 2555\n    elif n == 59:\n        return 2628\n    elif n == 60:\n        return 2701\n    elif n == 61:\n        return 2774\n    elif n == 62:\n        return 2837\n    elif n == 63:\n        return 2990\n    elif n == 64:\n        return 3053\n    elif n == 65:\n        return 3126\n    elif n == 66:\n        return 3189\n    elif n == 67:\n        return 3252\n    elif n == 68:\n        return 3315\n    elif n == 69:\n        return 3378\n    elif n == 70:\n        return 3441\n    elif n == 71:\n        return 3514\n    elif n == 72:\n        return 3587\n    elif n == 73:\n        return 3650\n    elif n == 74:\n        return 3723\n    elif n == 75:\n        return 3796\n    elif n == 76:\n        return 3859\n    elif n == 77:\n        return 3932\n    elif n == 78:\n        return 3995\n    elif n == 79:\n        return 4058\n    elif n == 80:\n        return 4131\n    elif n == 81:\n        return 4204\n    elif n == 82:\n        return 4267\n    elif n == 83:\n        return 4330\n    elif n == 84:\n        return 4393\n    elif n == 85:\n        return 4456\n    elif n == 86:\n        return 4519\n    elif n == 87:\n        return 4592\n    elif n == 88:\n        return 4657\n    elif n == 89:\n        return 4720\n    elif n == 90:\n        return 4793\n    elif n == 91:\n        return 4856\n    elif n == 92:\n        return 4929\n    elif n == 93:\n        return 5002\n    elif n == 94:\n        return 5065\n    elif n == 95:\n        return 5128\n    elif n == 96:\n        return 5201\n    elif n == 97:\n        return 5264\n    elif n == 98:\n        return 5337\n    elif n == 99:\n        return 5310\n    elif n == 100:\n        return 5383\n    elif n == 101:\n        return 5445\n    elif n == 102:\n        return 5518\n    elif n == 103:\n        return 5580\n    elif n == 104:\n        return 5633\n    elif n == 105:\n        return 5716\n    elif n == 106:\n        return 5788\n    elif n == 107:\n        return 5851\n    elif n == 108:\n        return 5924\n    elif n == 109:\n        return 5997\n    elif n == 110:\n        return 6060\n    elif n == 111:\n        return 6123\n    elif n == 112:\n        return 6196\n    elif n == 113:\n        return 6260\n    elif n == 114:\n        return 6323\n    elif n == 115:\n        return 6304\n    elif n == 116:\n        return 6377\n    elif n == 117:\n        return 6440\n    elif n == 118:\n        return 6513\n    elif n == 119:\n        return 6576\n    elif n == 120:\n        return 6649\n    elif n == 121:\n        return 6722\n    elif n == 122:\n        return 6805\n    elif n == 123:\n        return 6868\n    elif n == 124:\n        return 6931\n    elif n == 125:\n        return 6994\n    elif n == 126:\n        return 7057\n    elif n == 127:\n        return 7120\n    elif n == 128:\n        return 7193\n    elif n == 129:\n        return 7256\n    elif n == 130:\n        return 7319\n    elif n == 131:\n        return 7380\n    elif n == 132:\n        return 7433\n    elif n == 133:\n        return 7506\n    elif n == 134:\n        return 7579\n    elif n == 135:\n        return 7632\n    elif n == 136:\n        return 7695\n    elif n == 137:\n        return 7748\n    elif n == 138:\n        return 7811\n    elif n == 139:\n        return 7874\n    elif n == 140:\n        return 7937\n    elif n == 141:\n        return 7998\n    elif n == 142:\n        return 8070\n    elif n == 143:\n        return 8133\n    elif n == 144:\n        return 8206\n    elif n == 145:\n        return 8269\n    elif n == 146:\n        return 8322\n    elif n == 147:\n        return 8375\n    elif n == 148:\n        return 8438\n    elif n == 149:\n        return 8511\n    elif n == 150:\n        return 8564\n    elif n == 151:\n        return 8627\n    elif n == 152:\n        return 8690\n    elif n == 153:\n        return 8743\n    elif n == 154:\n        return 8806\n    elif n == 155:\n        return 8859\n    elif n == 156:\n        return 8932\n    elif n == 157:\n        return 8995\n    elif "
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return 3 * n ** 2 + 1\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n % 2 == 0: \n        return n\n    else: \n        return n + 1\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0: \n        return 0\n    stars = 1\n    count = 1\n    while stars < n:\n        stars *= 2\n        count += 1\n    return count\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # Make a list of a string that has a star number\n    # for every number between 1 and n\n    # \"n\" stars from left to right\n    # Find the sum of all the numbers of the list\n    # Return this number\n    l = [str(i) * i for i in range(1, n+1)]\n    return sum(int(x) for x in l)\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    s=0\n    for x in range(n):\n        s += x + 1\n    return s\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n * ((3 * n) - 1) // 2\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 'Not a valid number'\n    else:\n        return find_star_num(n-1) * find_star_num(n-2)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef dec(k):\n    '''\n    Write a function to find the character given the ascii value.\n    '''\n    return chr(k)\n    \ndef encryption(s, key):\n    '''\n    Write a function to encrypt a string using a key.\n    '''\n    n = len(s)\n    m = len(key)\n    \n    # key should be an integer\n    if type(key)!= int:\n        return 'Invalid key'\n    \n    # if key is greater than the length of the string\n    if key >= n:\n        return 'Key is greater than the string'\n        \n    # create a new list with length n\n    new_list = []\n    \n    # copy the original string to the new list\n    for i in range(n):\n        new_list.append(s[i])\n    \n    # iterate through each character in the original string\n    for i in range(n):\n        # check if the character is in the new list\n        if s[i] in new_list:\n            # find the index of the character in the new list\n            index = new_list.index(s[i])\n            # find the position of the original character\n            # using the index\n            new_list[index] = dec(ascii_value(s[i]) + key)\n            \n        # if the character is not in the new list,\n        # add the character to the new list\n        else:\n            new_list.append(s[i])\n    \n    # create a new string\n    new_string = ''\n    \n    # append the new list to the new string\n    for i in new_list:\n        new_string += i\n    \n    return new_string\n    \ndef decryption(s, key):\n    '''\n    Write a function to decrypt a string using a key.\n    '''\n    n = len(s)\n    m = len(key)\n    \n    # key should be an integer\n    if type(key)!= int:\n        return 'Invalid key'\n    \n    # if key is greater than the length of the string\n    if key >= n:\n        return 'Key is greater than the string'\n        \n    # create a new list with length n\n    new_list = []\n    \n    # copy the original string to the new list\n    for i in range(n):\n        new_list.append(s[i])\n    \n    # iterate through each character in the original string\n    for i in range(n):\n        # check if the character is in the new list\n        if s[i] in new_list:\n            # find the index of the character in the new list\n            index = new_list.index(s[i])\n            # find the position of the original character\n            # using the index\n            new_list[index] = dec(ascii_value(s[i]) - key)\n            \n        # if the character is not in the new list,\n        # add the character to the new list\n        else:\n            new_list.append(s[i])\n    \n    # create a new string\n    new_string = ''\n    \n    # append the new list to the new string\n    for i in new_list:\n        new_string += i\n    \n    return new_string\n    \n    \ns = 'algorithm'\nkey = 2\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # return ord(k)\n    return k\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = ord(k)\n    if k >= 97 and k <= 122:\n        k = k - 97\n    elif k >= 65 and k <= 90:\n        k = k - 65\n    return k\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k in \"abcdefghijklmnopqrstuvwxyz\":\n        return ord(k) - 96\n    elif k in \"0123456789\":\n        return ord(k) - 48\n    else:\n        return 0\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if ord(k) >= 97 and ord(k) <= 122:\n        return ord(k) - 97\n    else:\n        return ord(k) - 65\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if(k >= 'a' and k <= 'z'):\n        return ord(k) - ord('a') + 1\n    elif(k >= 'A' and k <= 'Z'):\n        return ord(k) - ord('A') + 1\n    else:\n        return 0\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if arr == []:\n        return 0\n    else:\n        return sum(arr[::2])\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # return sum([a[i] for i in range(0, len(a), 2) if a[i] % 2 == 0])\n    # return sum([a[i] for i in range(0, len(a), 2)])\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    s = 0\n    for i in range(0, len(arr)):\n        if arr[i] % 2 == 0:\n            s += arr[i]\n    return s\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[0] + sum_even_and_even_index(arr[2:])\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    "
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    result = 0\n    for i, j in enumerate(arr):\n        if i % 2 == 0 and j % 2 == 0:\n            result += j\n    return result\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    i = 0\n    j = 0\n    k = 0\n    l = len(arr)\n    while i < l:\n        if arr[i] % 2 == 0:\n            j += arr[i]\n        i += 1\n    while j < l:\n        if j % 2 == 0:\n            k += j\n        j += 1\n    print(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    index = 0\n    sum_even = 0\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(0,len(arr),2):\n        sum_even+=arr[i]\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # return sum(arr[::2])\n    # return sum(arr[1::2])\n    return sum(arr[1::2]) + sum(arr[::2])\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index_even_sum = 0\n    for i in range(0, len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_index_even_sum = even_index_even_sum + arr[i]\n    return even_index_even_sum\n    \ndef max_in_the_list(arr):\n    '''\n    Write a python function to find the max number in a list.\n    '''\n    return max(arr)\n    \ndef count_of_non_negative_numbers_in_a_list(arr):\n    '''\n    Write a python function to count the number of non-negative numbers in a list.\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        if arr[i] > 0:\n            count = count + 1\n    return count\n    \ndef sum_of_even_and_odd_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at odd positions of a list.\n    '''\n    odd_index_even_sum = 0\n    for i in range(0, len(arr)):\n        if arr[i] % 2 == 1 and i % 2 == 1:\n            odd_index_even_sum = odd_index_even_sum + arr[i]\n    return odd_index_even_sum\n    \ndef sum_of_first_n_squared_numbers(n):\n    '''\n    Write a python function to find the sum of first n squared numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i ** 2\n    return sum\n    \ndef print_second_last_item(arr):\n    '''\n    Write a python function to print the second last item of a list.\n    '''\n    print arr[len(arr)-2]\n    \ndef are_list_same(list1, list2):\n    '''\n    Write a python function to check if two lists are same or not.\n    '''\n    if list1 == list2:\n        return True\n    else:\n        return False\n    \ndef print_last_n_items(arr, n):\n    '''\n    Write a python function to print the last n items of a list.\n    '''\n    for i in range(len(arr)-n, len(arr)):\n        print arr[i]\n    \ndef is_n_item_in_list(arr, n):\n    '''\n    Write a python function to check if a number is present in a list.\n    '''\n    if n in arr:\n        return True\n    else:\n        return False\n    \ndef get_digit_sum(n):\n    '''\n    Write a python function to get sum of digits of a number.\n    '''\n    sum = 0\n    while n > 0:\n        sum = sum + n % 10\n        n = n / 10\n    return sum\n    \ndef first_n_items_of_list(arr, n):\n    '''\n    Write a python function to get the first n items of a list.\n    '''\n    return arr[0:n]\n    \ndef find_min_max_of_list(arr):\n    '''\n    Write a python function to find min and max of a list.\n    '''\n    min = arr[0]\n    max = arr[0]\n    for i in range(0, len(arr)):\n        if arr[i] < min:\n            min = arr[i]\n        elif arr[i] > max:\n            max = arr[i]\n    return min, max\n    \ndef reverse_a_string(str):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return str[::-1]\n    \ndef reverse_all_items_of_list(arr):\n    '''\n    Write a python function to reverse all the items of a list.\n    '''\n    arr.reverse()\n    return arr\n    \ndef find_second_last_item(arr):\n    '''\n    Write a python function to find the second last item of a list.\n    '''\n    return arr[len(arr)-2]\n    \ndef remove_duplicates_from_list(arr):\n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    arr = list(set(arr))\n    return arr\n    \ndef get_list_of_factors_of_a_number(n):\n    '''\n    Write a python function to find the list of factors of a number.\n    '''\n    arr = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            arr.append(i)\n    return arr\n    \ndef swap_first_and_last_items_of_list(arr):\n    '''\n    Write a python function to swap first and last items of a list.\n    '''\n    first_item = arr[0]\n    last_item = arr[-1]\n    arr[0] = last_item\n    arr[-1] = first_item\n    return arr\n    \ndef print_pattern_of_n_stars(n):\n    '''\n    Write a python function to print the pattern of n stars.\n    '''\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            print '*',\n        print\n    \ndef print_a_triangle(n):\n    '''\n    Write a python function to print a triangle of n stars.\n    '''\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            print '*',\n        print\n    for i in range(n-1, 0, -1):\n        for j in range(1, i+1):\n            print '*',\n        print\n    \ndef print_a_triangle_of_n_stars(n):\n    '''\n    Write a python function to print a triangle of n stars.\n    '''\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            print '*',\n        print\n    for i in range(n-1, 0, -1):\n        for j in range(1, i+1):\n            print '*',\n        print\n    \ndef convert_a_string_to_number(str):\n    '''\n    Write a python function to convert a string to number.\n    '''\n    return int(str)\n    \ndef print_list_of_n_numbers(n):\n    '''\n    Write a python function to print a list of n numbers.\n    '''\n    for i in range(1, n+1):\n        print i\n        \ndef sort_list_of_numbers(arr):\n    '''\n    Write a python function to sort a list of numbers.\n    '''\n    return sorted(arr)\n    \ndef print_list_of_n_numbers_in_reverse(n):\n    '''\n    Write a python function to print a list of n numbers in reverse.\n    '''\n    for i in range(n-1, 0, -1):\n        print i\n        \ndef print_all_numbers_less_than_n(n):\n    '''\n    Write a python function to print all numbers less than n.\n    '''\n    for i in range(1, n+1):\n        print i\n        \ndef print_list_of_n_numbers_in_ascending_order(n):\n    '''\n    Write a python function to print a list of n numbers in ascending order.\n    '''\n    for i in range(1, n+1):\n        print i\n        \ndef print_n_first_even_numbers(n):\n    '''\n    Write a python function to print first n even numbers.\n    '''\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            print i\n            \ndef print_n_first_odd_numbers(n):\n    '''\n    Write a python function to print first n odd numbers.\n    '''\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            print i\n            \ndef print_n_last_even_numbers"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([x**5 for x in range(1,n,2) if x**5%4 == 0])\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(2, n + 1, 2):\n        total += i**5\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(0,n):\n        if(i**5%2==0):\n            total += i**5\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([x**5 for x in range(n) if x%2==0])\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if (n < 0):\n        return 0\n    total = 0\n    for i in range(1,n+1):\n        if (i%2 == 0):\n            total += i**5\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i % 2 == 0 and i**5 > 1000:\n            sum += i\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    #You may want to define a new function that accepts an integer n and a list of the powers of 10 that you would like to sum.\n    \n    if n<0:\n        return 'no natural numbers less than zero!'\n    else:\n        total = 0\n        for i in range(n+1):\n            if i%2==0:\n                total+=i**5\n        return total\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(x**5 for x in range(n) if x%2 == 0)\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return int(sum(range(n+1)[1::2])**5)\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return n*(n+1)*(2*n+1)*(3*n+1)*(4*n+1)//10\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result_list = []\n    for i in test_list:\n        result_list.append(i[-1])\n    return result_list\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_list.append(tup[-1])\n    return new_list\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append(i[1])\n    return new_list\n    \ndef front_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append(i[0])\n    return new_list\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[-1] for t in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[-1] for t in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result_list = []\n    for item in test_list:\n        result_list.append(item[-1])\n    return result_list\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [(t[1]) for t in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [item[-1] for item in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[1] for t in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [item[-1] for item in test_list]\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    res = []\n    for i in range(len(test_tup1)):\n        res.append(test_tup1[i] - test_tup2[i])\n    return tuple(res)\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] - test_tup2[i],)\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] - test_tup2[i],)\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception('Two tuples must be of equal length')\n    else:\n        return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    assert type(test_tup1) == tuple\n    assert type(test_tup2) == tuple\n    assert len(test_tup1) == len(test_tup2)\n    return tuple(subtract(test_tup1[i], test_tup2[i]) for i in range(len(test_tup1)))\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    diff = ()\n    for i in range(len(test_tup1)):\n        diff = diff + (test_tup1[i]-test_tup2[i],)\n    return diff\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(subtract_element(x, y) for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for idx, val in enumerate(test_tup1):\n        new_tup += (val - test_tup2[idx],)\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    temp_list = []\n    for i in range(len(test_tup1)):\n        temp_list.append(test_tup1[i] - test_tup2[i])\n    return tuple(temp_list)\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    x1, y1 = test_tup1\n    x2, y2 = test_tup2\n    \n    return x1 - x2, y1 - y2\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_list = [] \n    # total = 0\n    for i in range(n+1): \n        total = 0\n        for j in range(i+1): \n            total += binomial(i,j) \n        binomial_list.append(total)\n    return sum(binomial_list[2::2])\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0:\n        return 1\n    else:\n        return 2*even_binomial_Coeff_Sum(n-1) + (n-1)*(n-2)/2\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # your code here\n    if n%2==0:\n        n=n/2\n    else:\n        n=n/2+1\n    binom_coeff=0\n    for i in range(n+1):\n        binom_coeff=binom_coeff+math.factorial(n)/(math.factorial(i)*math.factorial(n-i))\n    return binom_coeff\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n<0 or type(n)!= int:\n        raise ValueError(\"Please input a positive integer number\")\n    return int((n/2)*((2*n)-1))\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range( 0, n):\n        if i % 2 == 0:\n            sum = sum + (math.factorial(n) / ((math.factorial(i)) * math.factorial(n-i)))\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return (((n*(n-1))/2)**(n))\n        \ndef binomial_coefficient_1(n, k):\n    '''\n    Write a python function that takes in 2 positive integers n and k and finds the binomial coefficient of (n, k)\n    '''\n    if n == 0:\n        return 1\n    elif k == 0:\n        return 1\n    elif k > n:\n        return 0\n    else:\n        return ((n * binomial_coefficient_1(n-1, k))/math.factorial(n))\n    \ndef binomial_coefficient_2(n, k):\n    '''\n    Write a python function that takes in 2 positive integers n and k and finds the binomial coefficient of (n, k)\n    '''\n    if n == 0:\n        return 1\n    elif k == 0:\n        return 1\n    elif k > n:\n        return 0\n    else:\n        return (((n - k) * binomial_coefficient_1(n, k))/math.factorial(k))\n        \ndef binomial_coefficient_3(n, k):\n    '''\n    Write a python function that takes in 2 positive integers n and k and finds the binomial coefficient of (n, k)\n    '''\n    if k > n:\n        return 0\n    else:\n        return binomial_coefficient_1(n, k) + binomial_coefficient_1(n-1, k-1)\n        \ndef binomial_coefficient_4(n, k):\n    '''\n    Write a python function that takes in 2 positive integers n and k and finds the binomial coefficient of (n, k)\n    '''\n    if k > n:\n        return 0\n    elif k == 0:\n        return 1\n    else:\n        return ((n - k) * binomial_coefficient_2(n, k) + (n - k - 1) * binomial_coefficient_2(n - 1, k - 1))\n        \ndef binomial_coefficient_5(n, k):\n    '''\n    Write a python function that takes in 2 positive integers n and k and finds the binomial coefficient of (n, k)\n    '''\n    if n == 0:\n        return 1\n    elif k == 0:\n        return 1\n    elif k > n:\n        return 0\n    else:\n        return (((n - k) * binomial_coefficient_1(n, k))/math.factorial(k)) + (((n - k - 1) * binomial_coefficient_1(n - 1, k - 1))/math.factorial(k - 1))\n        \ndef binomial_coefficient_6(n, k):\n    '''\n    Write a python function that takes in 2 positive integers n and k and finds the binomial coefficient of (n, k)\n    '''\n    if k > n:\n        return 0\n    elif k == 0:\n        return 1\n    else:\n        return (((n - k) * binomial_coefficient_2(n, k))/math.factorial(k)) + (((n - k - 1) * binomial_coefficient_2(n - 1, k - 1))/math.factorial(k - 1))\n        \ndef binomial_coefficient_7(n, k):\n    '''\n    Write a python function that takes in 2 positive integers n and k and finds the binomial coefficient of (n, k)\n    '''\n    if k > n:\n        return 0\n    elif k == 0:\n        return 1\n    else:\n        return (((n - k) * binomial_coefficient_3(n, k))/math.factorial(k)) + (((n - k - 1) * binomial_coefficient_3(n - 1, k - 1))/math.factorial(k - 1))\n        \ndef binomial_coefficient_8(n, k):\n    '''\n    Write a python function that takes in 2 positive integers n and k and finds the binomial coefficient of (n, k)\n    '''\n    if k > n:\n        return 0\n    elif k == 0:\n        return 1\n    else:\n        return (((n - k) * binomial_coefficient_4(n, k))/math.factorial(k)) + (((n - k - 1) * binomial_coefficient_4(n - 1, k - 1))/math.factorial(k - 1))\n        \ndef binomial_coefficient_9(n, k):\n    '''\n    Write a python function that takes in 2 positive integers n and k and finds the binomial coefficient of (n, k)\n    '''\n    if k > n:\n        return 0\n    elif k == 0:\n        return 1\n    else:\n        return (((n - k) * binomial_coefficient_5(n, k))/math.factorial(k)) + (((n - k - 1) * binomial_coefficient_5(n - 1, k - 1))/math.factorial(k - 1))\n        \ndef binomial_coefficient_10(n, k):\n    '''\n    Write a python function that takes in 2 positive integers n and k and finds the binomial coefficient of (n, k)\n    '''\n    if k > n:\n        return 0\n    elif k == 0:\n        return 1\n    else:\n        return (((n - k) * binomial_coefficient_6(n, k))/math.factorial(k)) + (((n - k - 1) * binomial_coefficient_6(n - 1, k - 1))/math.factorial(k - 1))\n        \ndef binomial_coefficient_11(n, k):\n    '''\n    Write a python function that takes in 2 positive integers n and k and finds the binomial coefficient of (n, k)\n    '''\n    if k > n:\n        return 0\n    elif k == 0:\n        return 1\n    else:\n        return (((n - k) * binomial_coefficient_7(n, k))/math.factorial(k)) + (((n - k - 1) * binomial_coefficient_7(n - 1, k - 1))/math.factorial(k - 1))\n        \ndef binomial_coefficient_12(n, k):\n    '''\n    Write a python function that takes in 2 positive integers n and k and finds the binomial coefficient of (n, k)\n    '''\n    if k > n:\n        return 0\n    elif k == 0:\n        return 1\n    else:\n        return (((n - k) * binomial_coefficient_8(n, k))/math.factorial(k)) + (((n - k - 1) * binomial_coefficient_8(n - 1, k - 1))/math.factorial(k - 1))\n        \ndef binomial_coefficient_13(n, k):\n    '''\n    Write a python function that takes in 2 positive integers n and k and finds the binomial coefficient of (n, k)\n    '''\n    if k > n:\n        return 0\n    elif k == 0:\n        return 1\n    else:\n        return (((n - k) * binomial_coefficient_9(n, k))/math.factorial(k)) + (((n - k - 1) * binomial_coefficient_9(n - 1, k - 1))/math.factorial(k - 1))\n        \ndef binomial_coefficient_14(n, k):\n    '''\n    Write a python function that takes in 2 positive integers n and k and finds the binomial coefficient of (n, k)\n    '''\n    if k > n:\n        return 0\n    elif k == 0:\n        return 1\n    else:\n        return (((n - k) * binomial_coefficient_10(n, k))/math.factorial(k)) + (((n - k - 1) * binomial_coefficient_10(n - 1, k - 1))/math.factorial(k - 1))\n        \ndef binomial_coefficient_15(n, k):\n    '''\n    Write a pytho"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n < 1) or (type(n)!= int):\n        print(\"Error: n must be a positive integer\")\n    else:\n        if n > 0:\n            temp = 1\n            for i in range(1,n+1):\n                temp = temp * i\n            return temp\n        else:\n            print(\"Error: n must be a positive integer\")\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n/2)*((n-1)/(2*n-2))\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0: \n        return 1\n    if n == 1: \n        return n\n    if n == 2: \n        return n + 1\n    if n == 3: \n        return n + 2\n    if n == 4: \n        return n + 3\n    return even_binomial_Coeff_Sum(n - 1) + even_binomial_Coeff_Sum(n - 2) + even_binomial_Coeff_Sum(n - 3) + even_binomial_Coeff_Sum(n - 4)\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Your code here\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (pi/4)*(r**2)*(h)\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi*r**2*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return pi*(r**2)*h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = pi * r**2 * h\n    return v\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume=3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348654152565\n    return volume*r*r*h\n    \n    \ndef mass_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the mass.\n    '''\n    mass=2.0*3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348654152565*r*r*h\n    return mass\n    \n    \ndef force_cylinder(m,r):\n    '''\n    Write a function that takes in the mass and radius of a cylinder and returns the the force acting on the object.\n    '''\n    force=m*9.8\n    return force\n    \n    \ndef acceleration_cylinder(m,v):\n    '''\n    Write a function that takes in the mass and velocity of a cylinder and returns the the acceleration.\n    '''\n    acceleration=v**2-9.8*m\n    return acceleration\n    \n    \ndef momentum_cylinder(m,v):\n    '''\n    Write a function that takes in the mass and velocity of a cylinder and returns the the momentum.\n    '''\n    momentum=m*v\n    return momentum\n    \n    \ndef energy_cylinder(m,v):\n    '''\n    Write a function that takes in the mass and velocity of a cylinder and returns the the energy.\n    '''\n    energy=m*v**2\n    return energy\n    \n    \ndef momentum_energy_cylinder(m,v):\n    '''\n    Write a function that takes in the mass and velocity of a cylinder and returns the the momentum and energy.\n    '''\n    momentum=m*v\n    energy=m*v**2\n    return momentum,energy\n    \n    \ndef density_cylinder(m,v):\n    '''\n    Write a function that takes in the mass and velocity of a cylinder and returns the the density.\n    '''\n    density=m/v\n    return density\n    \n    \ndef momentum_density_cylinder(m,v):\n    '''\n    Write a function that takes in the mass and velocity of a cylinder and returns the the momentum and density.\n    '''\n    momentum=m*v\n    density=m/v\n    return momentum,density\n    \n    \ndef kinetic_energy_cylinder(m,v):\n    '''\n    Write a function that takes in the mass and velocity of a cylinder and returns the the kinetic energy.\n    '''\n    kinetic_energy=0.5*m*v**2\n    return kinetic_energy\n    \n    \ndef specific_energy_cylinder(m,v):\n    '''\n    Write a function that takes in the mass and velocity of a cylinder and returns the the specific energy.\n    '''\n    specific_energy=kinetic_energy_cylinder(m,v)+mass_cylinder(m,1)*(3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348654152565)\n    return specific_energy\n    \n    \ndef momentum_specific_energy_cylinder(m,v):\n    '''\n    Write a function that takes in the mass and velocity of a cylinder and returns the the momentum and the specific energy.\n    '''\n    momentum=momentum_cylinder(m,v)\n    specific_energy=kinetic_energy_cylinder(m,v)+mass_cylinder(m,1)*(3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348654152565)\n    return momentum,specific_energy\n    \n    \ndef momentum_density_specific_energy_cylinder(m,v):\n    '''\n    Write a function that takes in the mass and velocity of a cylinder and returns the the momentum and the density and the specific energy.\n    '''\n    momentum,density=momentum_density_cylinder(m,v)\n    specific_energy=kinetic_energy_cylinder(m,v)+mass_cylinder(m,1)*(3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348654152565)\n    return momentum,density,specific_energy\n    \n    \ndef thermal_energy_cylinder(m,v):\n    '''\n    Write a function that takes in the mass and velocity of a cylinder and returns the the thermal energy.\n    '''\n    thermal_energy=kinetic_energy_cylinder(m,v)+mass_cylinder(m,1)*(3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348654152565)\n    return thermal_energy\n    \n    \ndef specific_energy_thermal_cylinder(m,v):\n    '''\n    Write a function that takes in the mass and velocity of a cylinder and returns the the specific energy.\n    '''\n    specific_energy=thermal_energy_cylinder(m,v)+mass_cylinder(m,1)*(3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348654152565)\n    return specific_energy\n    \n    \ndef momentum_density_specific_energy_thermal_cylinder(m,v):\n    '''\n    Write a function that takes in the mass and velocity of a cylinder and returns the the momentum and the density and the specific energy.\n    '''\n    momentum,density=momentum_density_cylinder(m,v)\n    specific_energy=thermal_energy_cylinder(m,v)+mass_cylinder(m,1)*(3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348654152565)\n    return momentum,density,specific_energy\n    \n    \ndef momentum_density_specific_energy_thermal_cylinder(m,v):\n    '''\n    Write a function that takes in the mass and velocity of a cylinder and returns the the momentum and the density and the specific energy.\n    '''\n    momentum,density=momentum_density_cylinder(m,v)\n    specific_energy=thermal_energy_cylinder(m,v)+mass_cylinder(m,1)*(3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348654152565)\n    return momentum,density,specific_energy\n    \n    \ndef pressure_cylinder(m,h):\n    '''\n    Write a function that takes in the mass and height of a cylinder and returns the the pressure.\n    '''\n    pressure=9.8*m*h\n    return pressure\n    \n    \ndef pressure_energy_cylinder(m,h):\n    '''\n    Write a function that takes in the mass and height of a cylinder and returns the the pressure and the energy.\n    '''\n    pressure,energy=pressure_cylinder(m,h),mass_cylinder(m,1)*(3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348654152565)\n    return pressure,energy\n    \n    \ndef force_gravity_cylinder(m,h):\n    '''\n    Write a function that takes in the mass and height of a cylinder and returns the the force acting on the object.\n    '''\n    force=9.8*m\n    return force\n    \n    \ndef acceleration_gravity_cylinder(m,h):\n    '''\n    Write a function that takes in the mass and height of a cylinder and returns the the acceleration.\n    '''\n    acceleration=force_gravity_cylinder(m,h)/m\n    return acceleration\n    \n    \ndef momentum_gravity_cylinder(m"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14159 * r**2 * h) / 3\n    print(volume)\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (pi*r**2*h)/3\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*r**2*h\n    \ndef test_volume_cylinder():\n    '''\n    Tests for the volume_cylinder function\n    '''\n    assert volume_cylinder(5,8) == 52.096\n    assert volume_cylinder(1,2) == 0.6\n    assert volume_cylinder(2,0) == 0\n    assert volume_cylinder(1,0) == 0\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * (r**2) * h\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    return pi * r * r * h\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for k,v in dict.items():\n        if v >= n:\n            filtered_dict[k] = v\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # new_dict = {}\n    # for key,val in dict.items():\n    #     if val >= n:\n    #         new_dict[key] = val\n    # return new_dict\n    return {k:v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    d = {}\n    for x in dict:\n        if dict[x] >= n:\n            d[x] = dict[x]\n    return d\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key in dict:\n        if n <= dict[key]:\n            new_dict[key] = dict[key]\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    def dict_filter(dict,n):\n    for key,value in dict.items():\n        if value >= n:\n            print(key,value)\n        else:\n            print(value)\n        pass\n    return dict_filter\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    if not isinstance(dict,dict) or not isinstance(n,int):\n        return \"Not a dictionary or n is not an integer\"\n    return {k:v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for key in dict:\n        if dict[key]<=n:\n            del dict[key]\n    return dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # your code here\n    new_dict={}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key]=value\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    \n    # create a new dictionary with filtered values\n    new_dict = {}\n    # for each key, value pair, if the value is greater than or equal to n, add it to the new_dict\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    \n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,value in dict.iteritems():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # use generator to find the number of elements before the tuple element\n    n = len(test_tup)\n    count = 0\n    for i in range(n):\n        if test_tup[i] == 'x':\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    element = test_tup[0]\n    counter = 0\n    for tup_element in test_tup:\n        if tup_element < element:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    i = 0\n    l = len(test_tup)\n    while i < l:\n        if test_tup[i] == i:\n            return i\n        i += 1\n    return i\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len(test_tup[:test_tup.index(element)])\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    i = 0\n    for item in test_tup:\n        if item == test_tup[0]:\n            break\n        i += 1\n    return i\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == 1:\n            break\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    result = {}\n    for index, i in enumerate(test_tup):\n        if i not in result:\n            result[i] = index\n        elif result[i] > index:\n            result[i] = index\n    return len(result)\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i < test_tup[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    n = 0\n    for i in test_tup:\n        if test_tup.index(i) == 0:\n            n += 1\n        else:\n            break\n    return n\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    num_count = 0\n    for i in test_tup:\n        if test_tup.index(i) < test_tup.index(i):\n            num_count += 1\n    return num_count\n    \nprint count_first_elements((1,2,3,2,3,5))\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    a,b,c,i,count=1,1,2,1,0\n    while i<n: \n        a,b,c=b,c,c+b\n        i+=1\n        count+=1\n    return a\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = n - 1\n    num = 1\n    counter = 0\n    n = n % 10\n    while counter!= n:\n        num += 1\n        counter += 1\n        if counter % 10 == 0:\n            num += 1\n    return num\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    num_list = [1, 1, 2]\n    \n    while num_list[-1] < n:\n        \n        num_list.append(num_list[-1] + num_list[-2])\n    \n    return num_list[-1] == n\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = []\n    num.append(0)\n    num.append(1)\n    num.append(4)\n    num.append(16)\n    num.append(36)\n    for i in range(3, n+1):\n        num.append(num[i-1] + num[i-2] + num[i-3])\n    if num[n] % 10 == 0:\n        return True\n    else:\n        return False\n    \ndef decagon(n):\n    '''\n    Return the nth decagonal number\n    '''\n    num = []\n    num.append(0)\n    num.append(1)\n    num.append(4)\n    num.append(16)\n    num.append(36)\n    for i in range(3, n+1):\n        num.append(num[i-1] + num[i-2] + num[i-3])\n    return num[n]\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = n + 1\n    t = 1\n    while n > t * (t + 1) / 2:\n        t += 1\n    if t % 2 == 1:\n        n -= t\n    else:\n        n += t\n    return n\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 0\n    for i in range(1,n+1):\n        decagonal += i\n        decagonal *= 10\n    return decagonal\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return is_num_pandigital(n, [0,1,2,3,4,5,6,7,8])\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    start = 1\n    dec_num = 1\n    while True:\n        start += 1\n        dec_num += 1\n        if dec_num == start + ((start ** 2) - 1) / 2:\n            return True\n        elif dec_num == start + ((start ** 2) + 1) / 2:\n            return False\n        else:\n            continue\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    result = []\n    for i in range(1,n+1):\n        result.append(int((i*(i+1))/2))\n    return result[n-1]\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(n*2+1)/2\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if not dlist:\n        return (False, -1)\n    pos = 0\n    while pos < len(dlist) and dlist[pos]!= item:\n        pos = pos + 1\n    if pos == len(dlist):\n        return (False, -1)\n    else:\n        return (True, pos)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, elem in enumerate(dlist):\n        if elem == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            return True, i\n    if found == False:\n        return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if len(dlist) == 0:\n        return (False, -1)\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    idx = 0\n    found = False\n    while idx < len(dlist) and not found:\n        if dlist[idx] == item:\n            found = True\n        else:\n            idx += 1\n    return found, idx\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            return found, i\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, v in enumerate(dlist):\n        if v == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, value in enumerate(dlist):\n        if value == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in test_list:\n        if i in test_list:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                return unique\n    return unique\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(0, len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == 0:\n        return True\n    for elem in test_list:\n        if test_list.count(elem) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    \n    # first convert the list into a set, and then compare the length of the set with the list\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    temp = set()\n    for ele in test_list:\n        if ele in temp:\n            return False\n        else:\n            temp.add(ele)\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    a = set(test_list)\n    return(len(test_list) == len(a))\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) > len(set(test_list)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [nums1[i]-nums2[i] for i in range(len(nums1))]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    #sub = []\n    #for i in range(len(nums1)):\n        #sub.append(nums1[i]-nums2[i])\n    #return sub\n    return [nums1[i]-nums2[i] for i in range(len(nums1))]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)>len(nums2):\n        return sub_list(nums2,nums1)\n    i=0\n    while i<len(nums1):\n        nums1[i]-=nums2[i]\n        i+=1\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return map(operator.sub, nums1, nums2)\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1-num2 for num1,num2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)==0:\n        return []\n    else:\n        result=[]\n        for i in xrange(len(nums1)):\n            if nums1[i]==nums2[i]:\n                result.append(nums1[i])\n            elif nums1[i]!=nums2[i]:\n                result.append(nums1[i]-nums2[i])\n        return result\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] -= nums2[i]\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    n = len(nums1)\n    m = len(nums2)\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    counter = {}\n    for digit in str(n):\n        if digit in counter:\n            counter[digit] += 1\n        else:\n            counter[digit] = 1\n    for key in counter:\n        if counter[key] > int(key):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if not isinstance(n, int):\n        raise TypeError('n is not an integer')\n    if n < 0:\n        raise ValueError('n is not positive')\n    return True if 0 <= n and all(digit < n for digit in str(n)) else False\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    res = []\n    s = str(n)\n    for i in range(len(s)):\n        if int(s[i])>0:\n            res.append(int(s[i]))\n    s = set(res)\n    if len(s)<=len(res):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Your code here\n    if not n: return True\n    c = Counter(str(n))\n    for i in c:\n        if int(i) > c[i]:\n            return False\n    return True\n    \n    \n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    dic = {}\n    for i in n:\n        if i in dic:\n            dic[i]+=1\n        else:\n            dic[i]=1\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    number_map = {'0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0}\n    for ch in str(n):\n        if ch in number_map:\n            number_map[ch] += 1\n    return (number_map['0'] <= number_map['1'] <= number_map['2'] <= number_map['3'] <= number_map['4'] <= number_map['5'] <= number_map['6'] <= number_map['7'] <= number_map['8'] <= number_map['9'])\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for d in str(n):\n        if d not in freq:\n            freq[d] = 1\n        else:\n            freq[d] += 1\n    for k in freq:\n        if freq[k] > k:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    import collections\n    a = collections.Counter(str(n))\n    for i in range(len(a)):\n        if int(a[str(i)]) > int(i):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0]*10\n    for i in range(n):\n        temp = i\n        while temp>0:\n            freq[(temp%10)]+=1\n            temp = temp//10\n    for i in freq:\n        if i>=10-i:\n            return False\n    return True\ndef reverse(num):\n    '''\n    Write a python function that takes in an integer and check whether the integer is palindromic or not.\n    '''\n    temp = num\n    rev = 0\n    while num>0:\n        rev = (rev*10) + num%10\n        num //= 10\n    if temp==rev:\n        return True\n    return False\ndef isPrime(num):\n    '''\n    Write a python function that takes in an integer and check whether the integer is prime or not.\n    '''\n    if num<2:\n        return False\n    for i in range(2,int(num**0.5)):\n        if num%i==0:\n            return False\n    return True\ndef consecutive_primes(num):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a consecutive prime number or not.\n    '''\n    if num<2:\n        return False\n    for i in range(2,num):\n        if isPrime(i) and isPrime(num-i):\n            return True\n    return False\ndef print_pattern(num):\n    '''\n    Write a python function that takes in an integer and print out the pattern as below.\n    '''\n    for i in range(num):\n        for j in range(i):\n            print(' ',end='')\n        for k in range(num-i):\n            print('*',end='')\n        print()\ndef is_consecutive_prime(num):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a consecutive prime number or not.\n    '''\n    for i in range(2,num):\n        if isPrime(i) and isPrime(num-i) and consecutive_primes(num):\n            return True\n    return False\ndef sum_of_digits(num):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a product of two consecutive prime numbers or not.\n    '''\n    n = len(str(num))\n    if n%2==0:\n        return False\n    mid = n//2\n    for i in range(mid):\n        if is_consecutive_prime(num*10**i) and is_consecutive_prime(num*10**(mid-i-1)):\n            return True\n    return False\ndef number_of_digits(num):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a product of two consecutive prime numbers or not.\n    '''\n    n = len(str(num))\n    if n%2==0:\n        return False\n    mid = n//2\n    for i in range(mid):\n        if is_consecutive_prime(num*10**i) and is_consecutive_prime(num*10**(mid-i-1)):\n            return True\n    return False\ndef is_special_number(num):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a special number or not.\n    '''\n    num = str(num)\n    if len(num)<2:\n        return False\n    if int(num[0])%2==0:\n        return False\n    for i in range(1,len(num)):\n        if int(num[i])%2==1:\n            return False\n    return True\ndef reverse_list(l):\n    '''\n    Write a python function that takes in a list and reverse the list.\n    '''\n    for i in range(len(l)//2):\n        temp = l[i]\n        l[i] = l[len(l)-1-i]\n        l[len(l)-1-i] = temp\n    return l\ndef is_sum_of_two_digits(num):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a sum of two consecutive digits or not.\n    '''\n    if len(str(num))<2:\n        return False\n    for i in range(1,len(str(num))):\n        if int(str(num)[i])==int(str(num)[i-1])+1:\n            return True\n    return False\ndef palindrom(num):\n    '''\n    Write a python function that takes in an integer and check whether the integer is palindromic or not.\n    '''\n    temp = num\n    rev = 0\n    while temp>0:\n        rev = (rev*10) + temp%10\n        temp //= 10\n    if num==rev:\n        return True\n    return False\ndef is_palindrom_digits(num):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a palindromic number or not.\n    '''\n    temp = num\n    rev = 0\n    while temp>0:\n        rev = (rev*10) + temp%10\n        temp //= 10\n    return num==rev\ndef is_palindrom_number(num):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a palindromic number or not.\n    '''\n    temp = num\n    while temp>0:\n        if temp%10!=temp//10%10:\n            return False\n        temp //= 10\n    return True\ndef reverse_digits(num):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a palindromic number or not.\n    '''\n    temp = num\n    rev = 0\n    while temp>0:\n        rev = (rev*10) + temp%10\n        temp //= 10\n    return rev\ndef is_palindrom_number_digits(num):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a palindromic number or not.\n    '''\n    temp = num\n    while temp>0:\n        if temp%10!=temp//10%10:\n            return False\n        temp //= 10\n    return True\ndef is_fibonacci_number(num):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a Fibonacci number or not.\n    '''\n    if num<2:\n        return False\n    a = 1\n    b = 1\n    while b<num:\n        a,b = b,a+b\n    if b==num:\n        return True\n    return False\ndef reverse_number(num):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a palindromic number or not.\n    '''\n    temp = num\n    rev = 0\n    while temp>0:\n        rev = (rev*10) + temp%10\n        temp //= 10\n    return rev\ndef is_fibonacci_number_digits(num):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a palindromic number or not.\n    '''\n    if len(str(num))<2:\n        return False\n    a = 1\n    b = 1\n    while b<num:\n        a,b = b,a+b\n    if b==num:\n        return True\n    return False\ndef is_ab_number(num):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a palindromic number or not.\n    '''\n    temp = num\n    rev = 0\n    while temp>0:\n        rev = (rev*10) + temp%10\n        temp //= 10\n    if num==rev:\n        return True\n    return False\ndef is_ab_number_digits(num):\n    '''\n    Write a python function that takes in an integer and check whether the integer is a palindromic number or not.\n    '''\n    if len(str(num))<2:\n        return False\n    a = 1\n    b = 1\n    while b<num:\n        a,b = b,"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return all(n%int(i)==0 for i in str(n))\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    assert(len(list) > 0)\n    return (list.count(element) == len(list))\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(item == element for item in list)\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element == list[0]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(item == element for item in list)\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    is_equal = True\n    for i in list:\n        if i!= element:\n            is_equal = False\n            break\n    return is_equal\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search('a.b.b', text) is not None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # method 1\n    if re.search('a(?:b){2,3}', text):\n        return True\n    else:\n        return False\n    # method 2\n    # if re.search('a(?:b)*?', text):\n    #     return True\n    # else:\n    #     return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search(r'[ab]{2,3}', text)\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search(r'ab{2,3}',text)\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #text = text.lower()\n    m = re.match(r'[ab]{1}',text)\n    return bool(m)\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.match(r'[ab]{2,3}', text)\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search('ab{2,3}', text))\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #check if the string has the character 'a' followed by two or three 'b' characters\n    if re.match('^[ab]*b',text):\n        return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab*'\n    result = re.match(pattern, text)\n    if result:\n        print('Found a match!')\n    else:\n        print('No match')\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    count_b = 0\n    for i in range(0,len(text)):\n        if text[i] == \"b\" and count_b < 3:\n            count_b += 1\n        elif count_b == 3:\n            return True\n        elif count_b == 2:\n            return True\n    return False\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    prefix = [0 for _ in range(n)]\n    prefix[0] = a[0]\n    max_sum = a[0]\n    for i in range(1, n):\n        prefix[i] = max(prefix[i-1] + a[i], a[i])\n        max_sum = max(max_sum, prefix[i])\n    count = 0\n    for i in range(n):\n        if count == k:\n            if max_sum < prefix[i]:\n                max_sum = prefix[i]\n        else:\n            count += 1\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # create an array with the same elements as a and initialise it with 0\n    b = [0] * n\n    # b[0] = a[0]\n    b[1] = a[0]\n    for i in range(1, n):\n        b[i] = max(b[i - 1] + a[i], a[i])\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    ans = -1<<32\n    m = len(a)\n    for i in range(m - n):\n        ans = max(ans, sum(a[i:i + n]) * k)\n    return ans\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    return max_sub_array_sum_repeated_impl(a, k, n, 0, k - 1)\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    for i in range(0, n-k+1):\n        max_sum = max(max_sum, sum(a[i:i+k]))\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    repeated = a * k\n    max_sum = sum(a)\n    for i in range(1, n):\n        for j in range(0, i):\n            repeated[j] = a[j]\n        \n        repeated[i] = a[i]\n        \n        curr_sum = sum(repeated)\n        max_sum = max(curr_sum, max_sum)\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n==1:\n        return a[0]\n    ans=0\n    for i in range(0,n-1,k):\n        if a[i]<=0 and a[i+1]<=0:\n            ans=max(ans,a[i]+a[i+1])\n        else:\n            ans=max(ans,a[i]+a[i+1]+max_sub_array_sum_repeated(a[i+2:],n-i-1,k))\n    return ans\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if not a:\n        return 0\n    a.insert(0, 0)\n    for i in range(1, len(a)):\n        a[i] += a[i - 1]\n    max_sum = -sys.maxint\n    for i in range(0, len(a) - k + 1):\n        max_sum = max(max_sum, a[i + k - 1] - a[i])\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_ending_here = max_so_far = 0\n    for i in range(0, k):\n        max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n        max_ending_here = 0\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    result = 0\n    curr_sum = 0\n    for i in range(0, k):\n        for j in range(i, n - k + i + 1):\n            curr_sum += a[j]\n        if curr_sum > result:\n            result = curr_sum\n        curr_sum = 0\n    return result\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([x**2 for x in range(n) if x%2==0])\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n*(n+1)*(2*n+1))/6\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #return ((n+1)**2)\n    return sum([i**2 for i in range(0,n+1) if i%2==0])\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    result = 0\n    if n < 0:\n        return False\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for i in range(n):\n            if i % 2 == 0:\n                result = result + i * i\n    return result\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        if i % 2 == 0:\n            total += i * i\n    return total\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([i**2 for i in range(n+1) if i%2==0])\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return n * (n + 1) * (2 * n + 1) / 6 \n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #if n <= 0:\n    #    raise ValueError('n must be > 0')\n    #if n == 1:\n    #    return 0\n    #else:\n    #    return (n*(n+1))//2\n    #return sum([i*i for i in range(n) if i % 2 == 0])\n    return sum(i*i for i in range(n) if i % 2 == 0)\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return 0\n    else:\n        return n**2 + square_Sum(n-2)\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n < 0:\n        print \"Error! Number should be positive and >= 0\"\n        return 0\n    else:\n        return square_Sum(n-1) + (n**2)\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if type(list1) == int:\n        return 'please enter a list'\n    elif type(list1)!= list:\n        return 'enter a list'\n    max = len(list1)\n    for i in range(len(list1)):\n        if len(list1[i]) > max:\n            max = len(list1[i])\n    return max\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = []\n    for i in list1:\n        if len(i) == max(len(i) for i in list1):\n            max_length.append(i)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max(map(len,list1))\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max=0\n    for i in list1:\n        if(len(i)>max):\n            max=len(i)\n    print max\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len=0\n    for lists in list1:\n        if len(lists)>max_len:\n            max_len=len(lists)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = len(list1)\n    count = 0\n    l=[]\n    for i in range(length):\n        count1 = len(list1[i])\n        if count1 > count:\n            count = count1\n            l=list1[i]\n    return l\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif len(list1) == 1:\n        return len(list1[0])\n    else:\n        return max([len(list1[i]) for i in range(len(list1))])\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n    return max_len\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k <= 2:\n        return 0\n    if k == 3:\n        return k - 1\n    return count_no_of_ways(n - 1, k - 1) + k * count_no_of_ways(n - 1, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k > n:\n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0: \n        return 1\n    if n < 0 or k < 0: \n        return 0\n    \n    no_of_ways = count_no_of_ways(n-1, k)\n    if k > 2: \n        no_of_ways += count_no_of_ways(n-1, k-2)\n    return no_of_ways\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 1:\n        return n\n    if k == 2:\n        return (n*(n-1))/2\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    '''\n    >>> count_no_of_ways(7, 3)\n    35\n    >>> count_no_of_ways(3, 1)\n    6\n    >>> count_no_of_ways(4, 1)\n    10\n    '''\n    memo = {}\n    def count_no_of_ways_util(n, k):\n        if k == 0:\n            return 1\n        if n == 1:\n            return k\n        if (n, k) in memo:\n            return memo[(n, k)]\n        result = 0\n        for i in range(k):\n            result += count_no_of_ways_util(n-1, k-1) * (i+1)\n        memo[(n, k)] = result\n        return result\n    return count_no_of_ways_util(n, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    return count_no_of_ways_recursion(n, k, 1)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 13\n    if n == 6:\n        return 24\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k) + count_no_of_ways(n-3, k) + count_no_of_ways(n-4, k) + count_no_of_ways(n-5, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k==1 or n==1: \n        return 1\n    if n==2: \n        return k\n    if k==2: \n        return k**2\n    return count_no_of_ways(n-1, k-1) + (k-1)*count_no_of_ways(n-2, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    if k == 0:\n        return 0\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n < 0:\n        return -find(-n,m)\n    else:\n        return n/m\n    \ndef lcm(a,b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    return a * b / find(a,b)\n    \ndef gcd(a,b):\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    if b == 0:\n        return a\n    else:\n        return gcd(b,a % b)\n    \ndef xgcd(a,b):\n    '''\n    Write a python function to find x and y,gcd(a,b) = gcd(x,y), x and y,gcd(a,b) = x*a+y*b (i.e. if a = q*x + r*y, then gcd(a,b) = gcd(x,y))\n    '''\n    if b == 0:\n        return (1,0,a)\n    else:\n        q, r = divmod(a,b)\n        x,y,gcd = xgcd(b,r)\n        return (y, x - q*y, gcd)\n    \ndef modinv(a,m):\n    '''\n    Write a python function to find modular inverse of a number mod m.\n    '''\n    g, x, y = xgcd(a, m)\n    if g!= 1:\n        raise ValueError(\"inverse doesn't exist\")\n    else:\n        return x % m\n    \ndef modinv(a,m):\n    '''\n    Write a python function to find modular inverse of a number mod m.\n    '''\n    g, x, y = xgcd(a, m)\n    if g!= 1:\n        raise ValueError(\"inverse doesn't exist\")\n    else:\n        return x % m\n    \ndef extgcd(a,b):\n    '''\n    Write a python function to find the gcd(a,b) and x,y such that ax + by = gcd(a,b).\n    '''\n    x,y,u,v = 0,1,1,0\n    while a!= 0:\n        q,r = b//a,b%a\n        m,n = x-u*q,y-v*q\n        b,a,x,y,u,v = a,r,u,v,m,n\n    return b,x,y\n    \ndef main():\n    a = int(input('Enter a:'))\n    b = int(input('Enter b:'))\n    print('a = %d,b = %d' %(a,b))\n    print('LCM is',lcm(a,b))\n    print('GCD is',gcd(a,b))\n    print('Modular inverse of %d (mod %d) is %d' %(a,b,modinv(a,b)))\n    print('XGCD is',xgcd(a,b))\n    \nmain()"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return None\n    return n / m \n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n/m\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)\n    \ndef gcd(a,b):\n    '''\n    Write a python function to find the greatest common divisor of two numbers (using euclid's algo)\n    '''\n    if a<b:\n        a,b=b,a\n    while b!= 0:\n        a,b=b,a%b\n    return a\n    \ndef factor(n):\n    '''\n    Write a python function to find the prime factor of a number\n    '''\n    i=2\n    prime=[]\n    while i*i<=n:\n        while n%i==0:\n            prime.append(i)\n            n/=i\n        i+=1\n    if n>1:\n        prime.append(n)\n    return prime\n    \ndef find_fraction(n):\n    '''\n    Write a python function to find the fractional part of a number\n    '''\n    if n>=0:\n        return n-int(n)\n    else:\n        return -((-n)%1)\n        \ndef largest_pandigital(num):\n    '''\n    Write a python function to find the largest pandigital number for a number\n    '''\n    l=[]\n    for i in range(1,num+1):\n        l.append(i)\n    l.sort(reverse=True)\n    s=\"\"\n    for i in range(1,num+1):\n        s+=str(l[i-1])\n    return int(s)\n    \ndef anagram(n):\n    '''\n    Write a python function to find anagrams of a string in a dictionary\n    '''\n    s=n\n    d={}\n    for i in s:\n        if i not in d.keys():\n            d[i]=1\n        else:\n            d[i]+=1\n    l=list(d.keys())\n    l.sort()\n    for i in l:\n        if d[i]>1:\n            print(i,end=\" \")\n            \ndef caesar(s,k):\n    '''\n    Write a python function to encrypt a string using Caesar Cipher with a key k\n    '''\n    l=[]\n    for i in s:\n        if i.isalpha():\n            l.append(i)\n    l.sort(key=lambda x:x.lower())\n    s=\"\"\n    for i in l:\n        s+=chr((ord(i)+k-97)%26+97)\n    return s\n    \ndef caesar_cipher(s,k):\n    '''\n    Write a python function to decrypt a string using Caesar Cipher with a key k\n    '''\n    return caesar(s,k*(-1))\n    \ndef mdc(a,b):\n    '''\n    Write a python function to find the greatest common divisor of two numbers (using euclid's algo)\n    '''\n    if a<b:\n        a,b=b,a\n    while b!= 0:\n        a,b=b,a%b\n    return a\n    \ndef mod(a,b):\n    '''\n    Write a python function to find the modulus of two numbers (using euclid's algo)\n    '''\n    if a<b:\n        a,b=b,a\n    while b!= 0:\n        a,b=b,a%b\n    return a\n    \ndef fermat(n):\n    '''\n    Write a python function to test if n is prime\n    '''\n    a=2\n    while a<=n-1:\n        if (n-1)%a==0:\n            return False\n        a+=1\n    return True\n    \ndef primorial(n):\n    '''\n    Write a python function to find the primorial of a number\n    '''\n    p=1\n    for i in range(2,n+1):\n        p*=i\n    return p\n    \ndef is_palindrome(n):\n    '''\n    Write a python function to test if a string is a palindrome\n    '''\n    s=str(n)\n    l=len(s)\n    for i in range(l//2):\n        if s[i]!=s[l-i-1]:\n            return False\n    return True\n    \ndef is_pandigital(n,s=9):\n    '''\n    Write a python function to test if a number is a pandigital number\n    '''\n    l=[]\n    while n!=0:\n        l.append(n%s)\n        n//=s\n    l.sort()\n    s=\"\"\n    for i in l:\n        s+=str(i)\n    return s==str(l[-1])\n    \ndef is_biprime(n):\n    '''\n    Write a python function to test if a number is prime\n    '''\n    l=[]\n    for i in range(2,n):\n        if n%i==0:\n            l.append(i)\n    if len(l)==0:\n        return True\n    return False\n    \ndef is_prime(n):\n    '''\n    Write a python function to test if a number is prime\n    '''\n    return is_biprime(n)\n    \ndef is_perfect(n):\n    '''\n    Write a python function to test if a number is perfect\n    '''\n    s=0\n    for i in range(1,n):\n        if n%i==0:\n            s+=i\n    return s==n\n    \ndef is_pandigital_permutation(n,s=9):\n    '''\n    Write a python function to test if a number is a permutation of a pandigital number\n    '''\n    l=[]\n    while n!=0:\n        l.append(n%s)\n        n//=s\n    l.sort()\n    s=\"\"\n    for i in l:\n        s+=str(i)\n    return s==str(l[-1])\n    \ndef is_pandigital_product(n,m):\n    '''\n    Write a python function to test if a product of two pandigital numbers is a permutation of a pandigital number\n    '''\n    a=n*m\n    l=[]\n    while a!=0:\n        l.append(a%10)\n        a//=10\n    l.sort()\n    s=\"\"\n    for i in l:\n        s+=str(i)\n    return is_pandigital(s,10)\n    \ndef primes(n):\n    '''\n    Write a python function to find prime numbers up to n\n    '''\n    l=[]\n    for i in range(2,n+1):\n        if is_prime(i):\n            l.append(i)\n    return l\n    \ndef find_perfect_squares(n):\n    '''\n    Write a python function to find the perfect squares up to n\n    '''\n    l=[]\n    for i in range(1,n+1):\n        if i**0.5==int(i**0.5):\n            l.append(i)\n    return l\n    \ndef product_of_primes(n):\n    '''\n    Write a python function to find the product of primes up to n\n    '''\n    l=primes(n)\n    p=1\n    for i in l:\n        p*=i\n    return p\n    \ndef remove_duplicates(l):\n    '''\n    Write a python function to remove duplicates from a list\n    '''\n    l1=[]\n    for i in l:\n        if i not in l1:\n            l1.append(i)\n    return l1\n    \ndef substring(s,n):\n    '''\n    Write a python function to find the n-th substring of a string\n    '''\n    l=[]\n    for i in range(len(s)-n+1):\n        l.append(s[i:i+n])\n    return l\n    \ndef substring_compare(s,t):\n    '''\n    Write a python function to compare two substring of the same length\n    '''\n    l=[]\n    for i in s:\n        if i in t:\n            l.append(i)\n    return l\n    "
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n / m\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n/m\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n>m:\n        quot=n/m\n    else:\n        quot=m/n\n    return quot\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n/m\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n%m == 0:\n        return n/m\n    else:\n        return n/m+1\n    \ndef diff(n,m):\n    '''\n    Write a python function to find difference between two numbers (absolut difference).\n    '''\n    return abs(n-m)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        raise ZeroDivisionError('Division by zero')\n    if n < m:\n        return 0\n    else:\n        return n//m\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    print((w**2+h**2)**0.5)\ndef recursive_factorial(n):\n    '''\n    Write a recursive function to find the factorial of a number.\n    '''\n    if n==1:\n        return n\n    else:\n        return n*recursive_factorial(n-1)\ndef recursive_factorial_from_0(n):\n    '''\n    Write a recursive function to find the factorial of a number.\n    '''\n    if n==1:\n        return n\n    else:\n        return n*recursive_factorial(n-1)\ndef recursive_fibonacci(n):\n    '''\n    Write a recursive function to find the nth number in the Fibonacci sequence.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    else:\n        return recursive_fibonacci(n-1)+recursive_fibonacci(n-2)\ndef recursive_fibonacci_from_0(n):\n    '''\n    Write a recursive function to find the nth number in the Fibonacci sequence.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    else:\n        return recursive_fibonacci(n-1)+recursive_fibonacci(n-2)\ndef recursive_fibonacci_from_1(n):\n    '''\n    Write a recursive function to find the nth number in the Fibonacci sequence.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    else:\n        return recursive_fibonacci_from_1(n-1)+recursive_fibonacci_from_1(n-2)\ndef recursive_fibonacci_from_2(n):\n    '''\n    Write a recursive function to find the nth number in the Fibonacci sequence.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    else:\n        return recursive_fibonacci_from_2(n-1)+recursive_fibonacci_from_2(n-2)\ndef recursive_fibonacci_from_3(n):\n    '''\n    Write a recursive function to find the nth number in the Fibonacci sequence.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    else:\n        return recursive_fibonacci_from_3(n-1)+recursive_fibonacci_from_3(n-2)\ndef recursive_fibonacci_from_4(n):\n    '''\n    Write a recursive function to find the nth number in the Fibonacci sequence.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    else:\n        return recursive_fibonacci_from_4(n-1)+recursive_fibonacci_from_4(n-2)\ndef recursive_fibonacci_from_5(n):\n    '''\n    Write a recursive function to find the nth number in the Fibonacci sequence.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    else:\n        return recursive_fibonacci_from_5(n-1)+recursive_fibonacci_from_5(n-2)\ndef recursive_fibonacci_from_6(n):\n    '''\n    Write a recursive function to find the nth number in the Fibonacci sequence.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    else:\n        return recursive_fibonacci_from_6(n-1)+recursive_fibonacci_from_6(n-2)\ndef recursive_fibonacci_from_7(n):\n    '''\n    Write a recursive function to find the nth number in the Fibonacci sequence.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    else:\n        return recursive_fibonacci_from_7(n-1)+recursive_fibonacci_from_7(n-2)\ndef recursive_fibonacci_from_8(n):\n    '''\n    Write a recursive function to find the nth number in the Fibonacci sequence.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    else:\n        return recursive_fibonacci_from_8(n-1)+recursive_fibonacci_from_8(n-2)\ndef recursive_fibonacci_from_9(n):\n    '''\n    Write a recursive function to find the nth number in the Fibonacci sequence.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    else:\n        return recursive_fibonacci_from_9(n-1)+recursive_fibonacci_from_9(n-2)\ndef recursive_fibonacci_from_10(n):\n    '''\n    Write a recursive function to find the nth number in the Fibonacci sequence.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    else:\n        return recursive_fibonacci_from_10(n-1)+recursive_fibonacci_from_10(n-2)\ndef recursive_fibonacci_from_11(n):\n    '''\n    Write a recursive function to find the nth number in the Fibonacci sequence.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    else:\n        return recursive_fibonacci_from_11(n-1)+recursive_fibonacci_from_11(n-2)\ndef recursive_fibonacci_from_12(n):\n    '''\n    Write a recursive function to find the nth number in the Fibonacci sequence.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    else:\n        return recursive_fibonacci_from_12(n-1)+recursive_fibonacci_from_12(n-2)\ndef recursive_fibonacci_from_13(n):\n    '''\n    Write a recursive function to find the nth number in the Fibonacci sequence.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    else:\n        return recursive_fibonacci_from_13(n-1)+recursive_fibonacci_from_13(n-2)\ndef recursive_fibonacci_from_14(n):\n    '''\n    Write a recursive function to find the nth number in the Fibonacci sequence.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    else:\n        return recursive_fibonacci_from_14(n-1)+recursive_fibonacci_from_14(n-2)\ndef recursive_fibonacci_from_15(n):\n    '''\n    Write a recursive function to find the nth number in the Fibonacci sequence.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    else:\n        return recursive_fibonacci_from_15(n-1)+recursive_fibonacci_from_15(n-2)\ndef recursive_fibonacci_from_16(n):\n    '''\n    Write a recursive function to find the nth number in the Fibonacci sequence.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    else:\n        return recursive_fibonacci_from_16(n-1)+recursive_fibonacci_from_16(n-2)\ndef recursive_fibonacci_from_17(n):\n    '''\n    Write a recursive function to find the nth number in the Fibonacci sequence.\n    '''\n    if n==1"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w+h)/2\n    a = math.sqrt(s*s - w*w)\n    return a\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = h**2 + w**2\n    b = 2 * (h * w)\n    c = h**2 - w**2\n    return math.sqrt(a + b + c)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = float(w)\n    b = float(h)\n    c = float(math.sqrt(a**2 + b**2))\n    if(c == a):\n        c = float(w + h)\n    elif(c == b):\n        c = float(w + h)\n    else:\n        c = float(w + b)\n    print \"The third side of the right angled triangle is %f.\"%c\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    hypotenuse = math.sqrt(math.pow(w,2) + math.pow(h,2))\n    side_a = math.sqrt(math.pow(hypotenuse,2) - math.pow(w,2))\n    side_b = math.sqrt(math.pow(hypotenuse,2) - math.pow(h,2))\n    side_c = math.sqrt(math.pow(hypotenuse,2) - math.pow(side_a,2) - math.pow(side_b,2))\n    return side_c\n    \ndef int_factorial(n):\n    '''\n    Write a function that returns the factorial of a natural number, n, as a string.\n    '''\n    factorial = 1\n    for i in range(1,n+1):\n        factorial *= i\n    return str(factorial)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\ndef answer_one():\n    print(otherside_rightangle(3,4))\ndef answer_two():\n    print(otherside_rightangle(12,5))\ndef answer_three():\n    print(otherside_rightangle(24,8))\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    hyp = math.sqrt(w**2 + h**2)\n    return (w+h)/hyp\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return int(w**2+h**2)**.5\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    from math import sqrt\n    return sqrt(w**2+h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w > h:\n        return w**2 + h**2\n    return h**2 + w**2\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 0\n    maxval = listval[0]\n    for i in range(1,len(listval)):\n        if maxval < listval[i]:\n            maxval = listval[i]\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for ele in listval:\n        if ele > max_val:\n            max_val = ele\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    maxval = listval[0]\n    for i in range(1,len(listval)):\n        if maxval < listval[i]:\n            maxval = listval[i]\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = 0\n    for i in range(0,len(listval)):\n        if listval[i] > maxval:\n            maxval = listval[i]\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval=listval[0]\n    for x in listval:\n        if x>maxval:\n            maxval=x\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        raise TypeError(\"Input is not a list.\")\n    if len(listval) == 0:\n        raise ValueError(\"List cannot be empty.\")\n    \n    current = listval[0]\n    for item in listval:\n        if item > current:\n            current = item\n    return current\n    \ndef get_min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        raise TypeError(\"Input is not a list.\")\n    if len(listval) == 0:\n        raise ValueError(\"List cannot be empty.\")\n    \n    current = listval[0]\n    for item in listval:\n        if item < current:\n            current = item\n    return current\n    \ndef get_max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        raise TypeError(\"Input is not a list.\")\n    if len(listval) == 0:\n        raise ValueError(\"List cannot be empty.\")\n    \n    current = listval[0]\n    for item in listval:\n        if item > current:\n            current = item\n    return current\n    \ndef is_sorted(listval):\n    '''\n    Write a function to check whether a given list is sorted.\n    '''\n    if not isinstance(listval, list):\n        raise TypeError(\"Input is not a list.\")\n    if len(listval) == 0:\n        raise ValueError(\"List cannot be empty.\")\n    \n    is_sorted = True\n    for i in range(1, len(listval)):\n        if listval[i-1] > listval[i]:\n            is_sorted = False\n    return is_sorted\n    \ndef is_anagram(str1, str2):\n    '''\n    Write a function to determine if two strings are anagrams of each other.\n    '''\n    if not isinstance(str1, str) or not isinstance(str2, str):\n        raise TypeError(\"Inputs must be strings.\")\n    \n    return sorted(str1) == sorted(str2)\n    \ndef get_anagrams(str1):\n    '''\n    Write a function to return all anagrams of a given string.\n    '''\n    if not isinstance(str1, str):\n        raise TypeError(\"Input is not a string.\")\n    \n    anagrams = []\n    all_anagrams = []\n    for i in range(1, len(str1)):\n        for j in range(i, len(str1)):\n            if is_anagram(str1[i:j+1], str1):\n                anagrams.append(str1[i:j+1])\n    for anagram in anagrams:\n        all_anagrams.append(anagram)\n    return all_anagrams\n    \ndef is_palindrome(str1):\n    '''\n    Write a function to determine whether a given string is a palindrome.\n    '''\n    if not isinstance(str1, str):\n        raise TypeError(\"Input is not a string.\")\n    \n    return str1 == str1[::-1]\n    \ndef get_rotated_words(str1):\n    '''\n    Write a function to find all the words that are rotated strings of a given word.\n    '''\n    if not isinstance(str1, str):\n        raise TypeError(\"Input is not a string.\")\n    \n    rotated = []\n    for i in range(1, len(str1)):\n        if is_palindrome(str1[i:] + str1[:i]):\n            rotated.append(str1[i:] + str1[:i])\n    return rotated\n    \ndef is_rotated(str1, str2):\n    '''\n    Write a function to determine whether two strings are rotated versions of each other.\n    '''\n    if not isinstance(str1, str) or not isinstance(str2, str):\n        raise TypeError(\"Inputs must be strings.\")\n    \n    return sorted(str1) == sorted(str2)\n    \ndef rotate_string(str1, n):\n    '''\n    Write a function to rotate a string.\n    '''\n    if not isinstance(str1, str):\n        raise TypeError(\"Input is not a string.\")\n    if not isinstance(n, int):\n        raise TypeError(\"Input is not an integer.\")\n    \n    rotated = str1[n:] + str1[:n]\n    return rotated\n    \ndef reverse_string(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    if not isinstance(str1, str):\n        raise TypeError(\"Input is not a string.\")\n    \n    reversed = str1[::-1]\n    return reversed\n    \ndef is_substring(str1, str2):\n    '''\n    Write a function to determine if a string is a substring of another.\n    '''\n    if not isinstance(str1, str) or not isinstance(str2, str):\n        raise TypeError(\"Inputs must be strings.\")\n    \n    return str1 in str2\n    \ndef is_rotated(str1, str2):\n    '''\n    Write a function to determine if two strings are rotated versions of each other.\n    '''\n    if not isinstance(str1, str) or not isinstance(str2, str):\n        raise TypeError(\"Inputs must be strings.\")\n    \n    return sorted(str1) == sorted(str2)\n    \ndef are_permutations(str1, str2):\n    '''\n    Write a function to determine if two strings are permutations of each other.\n    '''\n    if not isinstance(str1, str) or not isinstance(str2, str):\n        raise TypeError(\"Inputs must be strings.\")\n    \n    return sorted(str1) == sorted(str2)\n    \ndef is_unique_chars(str1):\n    '''\n    Write a function to determine if a string has all unique characters.\n    '''\n    if not isinstance(str1, str):\n        raise TypeError(\"Input is not a string.\")\n    \n    characters = {}\n    for char in str1:\n        if char in characters:\n            return False\n        else:\n            characters[char] = True\n    return True\n    \ndef get_sum_digits(num):\n    '''\n    Write a function to return the sum of the digits of a given number.\n    '''\n    if not isinstance(num, int):\n        raise TypeError(\"Input is not an integer.\")\n    \n    sum_digits = 0\n    while num > 0:\n        sum_digits += num % 10\n        num //= 10\n    return sum_digits\n    \ndef is_sublist(list1, list2):\n    '''\n    Write a function to determine if a given list is a sublist of another list.\n    '''\n    if not isinstance(list1, list) or not isinstance(list2, list):\n        raise TypeError(\"Inputs must be lists.\")\n    \n    for item in list1:\n        if not item in list2:\n            return False\n    return True\n    \ndef get_string_reversed(str1):\n    '''\n    Write a function to return a reversed string of a given string.\n    '''\n    if not isinstance(str1, str):\n        raise TypeError(\"Input is not a string.\")\n    \n    return str1[::-1]\n    \ndef is_permutation(str1, str2):\n    '''\n    Write a function to determine if two strings are permutations of each other.\n    '''\n    if not isinstance(str1, str) or not isinstance(str2, str):\n        raise TypeError(\"Inputs must be strings.\")\n    \n    return sorted(str1) == sorted(str2)\n    \ndef are_anagrams(str1, str2):\n    '''\n    Write a function to determine if two strings are anagrams of each other.\n    '''\n    if not isinstance(str1, str) or not isinstance(str2, str):\n        raise TypeError(\"Inputs must be strings.\")\n    \n    return sorte"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    listval.sort(reverse = True)\n    return listval[0]\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        maxval = listval[0]\n        for i in listval:\n            if i > maxval:\n                maxval = i\n        return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for i in range(len(listval)):\n        if maxval < listval[i]:\n            maxval = listval[i]\n    return maxval\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    sum = 0\n    for i in range(1,number):\n        if number % i == 0:\n            divisors.append(i)\n    for j in range(len(divisors)):\n        sum += divisors[j]\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divs = []\n    for i in range(1,number//2+1):\n        if number%i == 0:\n            divs.append(i)\n    return sum(divs)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = 0\n    for i in range(1, number):\n        if number % i == 0:\n            divisors += i\n    return divisors\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for x in range(1, number + 1):\n        if number % x == 0:\n            sum += x\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = [i for i in range(1, number+1) if number%i == 0]\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 1:\n        return 1\n    elif number == 2:\n        return 2\n    else:\n        return number + sum_div(number - 1)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, int(number/2)+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    number = abs(int(number))\n    divisor = 1\n    s = 0\n    if number == 0 or number == 1:\n        return 0\n    while divisor <= number:\n        if number % divisor == 0:\n            s += divisor\n            if divisor!= number:\n                s += number / divisor\n        divisor += 1\n    return s\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    s = 0\n    for i in range(1, number):\n        if number % i == 0:\n            s += i\n    return s\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    arr = arr\n    Inv_Count = 0\n    if len(arr) <= 1:\n        return Inv_Count\n    else:\n        mid = len(arr)//2\n        l = arr[0:mid]\n        r = arr[mid:]\n        Inv_Count += get_Inv_Count(l)\n        Inv_Count += get_Inv_Count(r)\n        l_num = len(l)\n        r_num = len(r)\n        i = 0\n        j = 0\n        k = 0\n        while i < l_num and j < r_num:\n            if l[i] < r[j]:\n                arr[k] = l[i]\n                i += 1\n            else:\n                arr[k] = r[j]\n                j += 1\n                Inv_Count += (l_num - i)\n            k += 1\n        while i < l_num:\n            arr[k] = l[i]\n            i += 1\n            k += 1\n        while j < r_num:\n            arr[k] = r[j]\n            j += 1\n            k += 1\n    return Inv_Count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            if arr[i] > arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) <= 1:\n        return 0, arr\n    mid = len(arr)//2\n    left_count, left_arr = get_Inv_Count(arr[:mid])\n    right_count, right_arr = get_Inv_Count(arr[mid:])\n    \n    i, j, k = 0, 0, 0\n    inversions = left_count + right_count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Define the number of inversions in the array\n    count = 0\n    # Get the length of the array\n    n = len(arr)\n    # Sort the array\n    arr = sorted(arr)\n    # Count the number of inversions\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] > arr[j]):\n                count = count + 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Split array into sorted and unsorted parts\n    arr1 = arr[:]\n    arr2 = arr[:]\n    Inv_Count = 0\n    # Sort arr1\n    arr1.sort()\n    # Iterate over the array again and use Merge Sort to merge the \n    # array1 and array2 into an output array.\n    for i in range(len(arr)):\n        arr[i] = arr1[i]\n    for i in range(len(arr)):\n        arr[i] = arr2[i]\n    # For each element in the array, if the element is less than or \n    # equal to its next element, then increment Inv_Count\n    for i in range(len(arr)-1):\n        if arr[i] <= arr[i+1]:\n            Inv_Count += 1\n    return Inv_Count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    num = len(arr)\n    inv_count = 0\n    for i in range(num):\n        for j in range(i+1, num):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    if n==0:\n        return 0\n    elif n==1:\n        return 0\n    elif n==2:\n        if arr[0]>arr[1]:\n            return 1\n        else:\n            return 0\n    else:\n        arr = arr[0:n-1]\n        return get_Inv_Count(arr) + get_Inv_Count(arr[0:n-1])\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n    if n == 2:\n        if arr[0] > arr[1]:\n            return 1\n        else:\n            return 0\n    else:\n        mid = n//2\n        left = arr[:mid]\n        right = arr[mid:]\n        left_inv_count = get_Inv_Count(left)\n        right_inv_count = get_Inv_Count(right)\n        return left_inv_count + right_inv_count\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return sum(list1, [])\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    for item in list1:\n        if type(item) is list:\n            flatten_list(item)\n        else:\n            result = result + [item]\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # helper function to flatten a list\n    # input: a list that may contain nested lists\n    # output: the flattened list\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    \n    result = []\n    for elem in list1:\n        if isinstance(elem, list):\n            result.extend(flatten_list(elem))\n        else:\n            result.append(elem)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return sum(list1, [])\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    output = []\n    for item in list1:\n        if type(item) == list:\n            output += flatten_list(item)\n        else:\n            output += [item]\n    return output\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    for item in list1:\n        if isinstance(item, list):\n            flatten_list(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == type([]):\n            flattened_list += flatten_list(item)\n        else:\n            flattened_list += [item]\n    return flattened_list\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for item in list1:\n        if isinstance(item,list):\n            list2.extend(flatten_list(item))\n        else:\n            list2.append(item)\n    return list2\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = 0\n    max_t = 0\n    for i in range(0, len(stdata)):\n        if sum(stdata[i][1]) > max_sum:\n            max_sum = sum(stdata[i][1])\n            max_t = i\n    return max_t\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    res = defaultdict(list)\n    for el in stdata:\n        res[el[0]].append(el[1])\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    l = []\n    for i in stdata:\n        for j in i:\n            l.append(j)\n    return max(l)\ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    l = []\n    for i in stdata:\n        for j in i:\n            l.append(j)\n    return min(l)\ndef max_average(stdata):\n    '''\n    Write a function to calculate the maximum average from the list of tuples.\n    '''\n    l = []\n    for i in stdata:\n        avg = 0\n        for j in i:\n            avg = avg + j\n        l.append(avg/len(i))\n    return max(l)\ndef min_average(stdata):\n    '''\n    Write a function to calculate the minimum average from the list of tuples.\n    '''\n    l = []\n    for i in stdata:\n        avg = 0\n        for j in i:\n            avg = avg + j\n        l.append(avg/len(i))\n    return min(l)\ndef count_aggregate(stdata):\n    '''\n    Write a function to calculate the count aggregate from the list of tuples.\n    '''\n    l = []\n    for i in stdata:\n        l.append(len(i))\n    return l\ndef count_average(stdata):\n    '''\n    Write a function to calculate the count average from the list of tuples.\n    '''\n    l = []\n    for i in stdata:\n        avg = 0\n        for j in i:\n            avg = avg + j\n        l.append(avg/len(i))\n    return l\ndef max_min(stdata):\n    '''\n    Write a function to calculate the maximum and minimum from the list of tuples.\n    '''\n    l = []\n    for i in stdata:\n        max_val = max(i)\n        min_val = min(i)\n        l.append((max_val,min_val))\n    return l\ndef max_range(stdata):\n    '''\n    Write a function to calculate the maximum range from the list of tuples.\n    '''\n    l = []\n    for i in stdata:\n        max_val = max(i)\n        min_val = min(i)\n        l.append(max_val-min_val)\n    return l\ndef mean_aggregate(stdata):\n    '''\n    Write a function to calculate the mean aggregate from the list of tuples.\n    '''\n    l = []\n    for i in stdata:\n        avg = 0\n        for j in i:\n            avg = avg + j\n        l.append(avg/len(i))\n    return l\ndef mean_average(stdata):\n    '''\n    Write a function to calculate the mean average from the list of tuples.\n    '''\n    l = []\n    for i in stdata:\n        avg = 0\n        for j in i:\n            avg = avg + j\n        l.append(avg/len(i))\n    return l\ndef variance(stdata):\n    '''\n    Write a function to calculate the variance from the list of tuples.\n    '''\n    l = []\n    for i in stdata:\n        l.append(sum([(j - mean(i))**2 for j in i])/len(i))\n    return l\ndef standard_dev(stdata):\n    '''\n    Write a function to calculate the standard deviation from the list of tuples.\n    '''\n    l = []\n    for i in stdata:\n        l.append(sqrt(variance(i)))\n    return l\ndef sort_aggregate(stdata,opr):\n    '''\n    Write a function to sort the list of tuples based on the aggregate function\n    passed as an argument.\n    '''\n    l = []\n    for i in stdata:\n        l.append((opr(i),i))\n    l.sort()\n    l.reverse()\n    return l\ndef sort_aggregate_range(stdata,opr):\n    '''\n    Write a function to sort the list of tuples based on the aggregate function\n    passed as an argument and the ranges.\n    '''\n    l = []\n    for i in stdata:\n        l.append((opr(i),i))\n    l.sort()\n    l.reverse()\n    return l\ndef find_aggregate(stdata,opr):\n    '''\n    Write a function to find the aggregate from the list of tuples based on the\n    aggregate function passed as an argument.\n    '''\n    l = []\n    for i in stdata:\n        l.append(opr(i))\n    return l\ndef find_aggregate_range(stdata,opr):\n    '''\n    Write a function to find the aggregate from the list of tuples based on the\n    aggregate function passed as an argument and the ranges.\n    '''\n    l = []\n    for i in stdata:\n        l.append(opr(i))\n    return l\ndef find_average(stdata,opr):\n    '''\n    Write a function to find the average aggregate from the list of tuples based on\n    the aggregate function passed as an argument.\n    '''\n    l = []\n    for i in stdata:\n        avg = 0\n        for j in i:\n            avg = avg + j\n        l.append(opr(avg/len(i)))\n    return l\ndef find_average_range(stdata,opr):\n    '''\n    Write a function to find the average aggregate from the list of tuples based on\n    the aggregate function passed as an argument and the ranges.\n    '''\n    l = []\n    for i in stdata:\n        avg = 0\n        for j in i:\n            avg = avg + j\n        l.append(opr(avg/len(i)))\n    return l\ndef find_variance(stdata,opr):\n    '''\n    Write a function to find the variance aggregate from the list of tuples based on\n    the aggregate function passed as an argument.\n    '''\n    l = []\n    for i in stdata:\n        l.append(opr(i))\n    return l\ndef find_variance_range(stdata,opr):\n    '''\n    Write a function to find the variance aggregate from the list of tuples based on\n    the aggregate function passed as an argument and the ranges.\n    '''\n    l = []\n    for i in stdata:\n        l.append(opr(i))\n    return l\ndef find_standard_dev(stdata,opr):\n    '''\n    Write a function to find the standard deviation aggregate from the list of tuples\n    based on the aggregate function passed as an argument.\n    '''\n    l = []\n    for i in stdata:\n        l.append(sqrt(opr(i)))\n    return l\ndef find_standard_dev_range(stdata,opr):\n    '''\n    Write a function to find the standard deviation aggregate from the list of tuples\n    based on the aggregate function passed as an argument and the ranges.\n    '''\n    l = []\n    for i in stdata:\n        l.append(sqrt(opr(i)))\n    return l\ndef stddev(stdata):\n    '''\n    Write a function to calculate the standard deviation of the list of tuples.\n    '''\n    l = []\n    for i in stdata:\n        l.append(sqrt(variance(i)))\n    return l\ndef stddev_range(stdata):\n    '''\n    Write a function to calculate the standard deviation of the list of tuples based\n    on the ranges.\n    '''\n    l = []\n    for i in stdata:\n        l.append(sqrt(variance(i)))\n    return l\ndef find_max(stdata):\n    '''\n    Write a function to find the maximum aggregate from the list of tuples.\n    '''\n    l = []\n    for i in stdata:\n        max_val = max(i)\n        l.append(max_val)\n    return l\ndef find_min(stdata):\n    '"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(list)\n    for i in stdata:\n        d[i[0]].append(i[1])\n    return max(d.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    bins = defaultdict(int)\n    for _, bin in stdata:\n        bins[bin] += 1\n    return max(bins.keys()), bins\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max(stdata, key=lambda x:x[2])\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    result = defaultdict(lambda:0)\n    for tup in stdata:\n        result[tup[1]] += tup[2]\n    return result\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    res = defaultdict(list)\n    for val, st in stdata:\n        res[val].append(st)\n    return max(res.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    if len(stdata) == 1:\n        return stdata[0][2]\n    max_so_far = stdata[0][2]\n    curr_max = stdata[0][2]\n    for i in xrange(1, len(stdata)):\n        curr_max += stdata[i][2]\n        if curr_max > max_so_far:\n            max_so_far = curr_max\n    return max_so_far\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    sorted_stdata = sorted(stdata, key=lambda x: x[1], reverse=True)\n    grouped_stdata = defaultdict(list)\n    for key, value in sorted_stdata:\n        grouped_stdata[key].append(value)\n    \n    output = []\n    for key, values in grouped_stdata.items():\n        if len(values) > 1:\n            output.append(sum(values) / len(values))\n    return max(output) if output else 0\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 0\n    ans = 0\n    for i in range(2**n):\n        # print i\n        temp = count_binary_seq(n-1)\n        if (i>>n)%2 == 0:\n            ans += temp\n        else:\n            ans -= temp\n    return ans\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    n = int(n)\n    count = 0\n    for i in xrange(2**n):\n        s = bin(i)\n        s = s[2:]\n        s = s[::-1]\n        s = s[:n]\n        if sum(int(c) for c in s) == sum(int(c) for c in s[::-1]):\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    return count_binary_seq(n-1) + count_binary_seq(n-2) + count_binary_seq(n-3)\n    \n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return count_binary_seq_recursive(n,0,0)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    bin_seq = ''\n    if (n < 0): \n        return 0\n    for i in range(2**n): \n        bin_seq = bin(i)[2:]\n        if bin_seq[:n] == bin_seq[n:]: \n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 15\n    if n == 7:\n        return 19\n    if n == 8:\n        return 22\n    if n == 9:\n        return 26\n    if n == 10:\n        return 31\n    if n == 11:\n        return 35\n    if n == 12:\n        return 39\n    if n == 13:\n        return 43\n    if n == 14:\n        return 47\n    if n == 15:\n        return 53\n    if n == 16:\n        return 57\n    if n == 17:\n        return 62\n    if n == 18:\n        return 66\n    if n == 19:\n        return 72\n    if n == 20:\n        return 78\n    if n == 21:\n        return 83\n    if n == 22:\n        return 89\n    if n == 23:\n        return 95\n    if n == 24:\n        return 99\n    if n == 25:\n        return 105\n    if n == 26:\n        return 111\n    if n == 27:\n        return 117\n    if n == 28:\n        return 123\n    if n == 29:\n        return 129\n    if n == 30:\n        return 135\n    if n == 31:\n        return 141\n    if n == 32:\n        return 147\n    if n == 33:\n        return 153\n    if n == 34:\n        return 159\n    if n == 35:\n        return 165\n    if n == 36:\n        return 171\n    if n == 37:\n        return 177\n    if n == 38:\n        return 183\n    if n == 39:\n        return 189\n    if n == 40:\n        return 195\n    if n == 41:\n        return 201\n    if n == 42:\n        return 207\n    if n == 43:\n        return 213\n    if n == 44:\n        return 219\n    if n == 45:\n        return 225\n    if n == 46:\n        return 231\n    if n == 47:\n        return 237\n    if n == 48:\n        return 243\n    if n == 49:\n        return 249\n    if n == 50:\n        return 255\n    if n == 51:\n        return 261\n    if n == 52:\n        return 267\n    if n == 53:\n        return 273\n    if n == 54:\n        return 279\n    if n == 55:\n        return 285\n    if n == 56:\n        return 291\n    if n == 57:\n        return 297\n    if n == 58:\n        return 303\n    if n == 59:\n        return 309\n    if n == 60:\n        return 315\n    if n == 61:\n        return 321\n    if n == 62:\n        return 327\n    if n == 63:\n        return 333\n    if n == 64:\n        return 339\n    if n == 65:\n        return 345\n    if n == 66:\n        return 351\n    if n == 67:\n        return 357\n    if n == 68:\n        return 363\n    if n == 69:\n        return 369\n    if n == 70:\n        return 375\n    if n == 71:\n        return 381\n    if n == 72:\n        return 387\n    if n == 73:\n        return 393\n    if n == 74:\n        return 399\n    if n == 75:\n        return 405\n    if n == 76:\n        return 411\n    if n == 77:\n        return 417\n    if n == 78:\n        return 423\n    if n == 79:\n        return 429\n    if n == 80:\n        return 435\n    if n == 81:\n        return 441\n    if n == 82:\n        return 447\n    if n == 83:\n        return 453\n    if n == 84:\n        return 459\n    if n == 85:\n        return 465\n    if n == 86:\n        return 471\n    if n == 87:\n        return 477\n    if n == 88:\n        return 483\n    if n == 89:\n        return 489\n    if n == 90:\n        return 495\n    if n == 91:\n        return 501\n    if n == 92:\n        return 507\n    if n == 93:\n        return 513\n    if n == 94:\n        return 519\n    if n == 95:\n        return 525\n    if n == 96:\n        return 531\n    if n == 97:\n        return 537\n    if n == 98:\n        return 543\n    if n == 99:\n        return 549\n    if n == 100:\n        return 555\n    if n == 101:\n        return 561\n    if n == 102:\n        return 567\n    if n == 103:\n        return 573\n    if n == 104:\n        return 579\n    if n == 105:\n        return 585\n    if n == 106:\n        return 591\n    if n == 107:\n        return 597\n    if n == 108:\n        return 603\n    if n == 109:\n        return 609\n    if n == 110:\n        return 615\n    if n == 111:\n        return 621\n    if n == 112:\n        return 627\n    if n == 113:\n        return 633\n    if n == 114:\n        return 639\n    if n == 115:\n        return 645\n    if n == 116:\n        return 651\n    if n == 117:\n        return 657\n    if n == 118:\n        return 663\n    if n == 119:\n        return 669\n    if n == 120:\n        return 675\n    if n == 121:\n        return 681\n    if n == 122:\n        return 687\n    if n == 123:\n        return 693\n    if n == 124:\n        return 699\n    if n == 125:\n        return 705\n    if n == 126:\n        return 711\n    if n == 127:\n        return 717\n    if n == 128:\n        return 723\n    if n == 129:\n        return 729\n    if n == 130:\n        return 735\n    if n == 131:\n        return 741\n    if n == 132:\n        return 747\n    if n == 133:\n        return 753\n    if n == 134:\n        return 759\n    if n == 135:\n        return 765\n    if n == 136:\n        return 771\n    if n == 137:\n        return 777\n    if n == 138:\n        return 783\n    if n == 139:\n        return 789\n    if n == 140:\n        return 795\n    if n == 141:\n        return 801\n    if n == 142:\n        return 808\n    if n == 143:\n        return 813\n    if n == 144:\n        return 819\n    if n == 145:\n        return 825\n    if n == 146:\n        return 831\n    if n == 147:\n        return 837\n    if n == 148:\n        return 843\n    if n == 149:\n        return 849\n    if n == 150:\n        return 855\n    if n == 151:\n        return 861\n    if n == 152:\n        return 867\n    if n == 153:\n        return 873\n    if n == 154:\n        return 879\n    if n == 155:\n        return 885\n    if n == 156:\n        return 891\n    if n == 157:\n        return 897\n    if n == 158:\n        return 903\n    if n == 159:\n        return 909\n    if n == 160:\n        return 915\n    if n == 161:\n        return 921\n    if n == 162:\n        return 927\n    if n == 163:\n        return 933\n    if n == 164:\n        return 939\n    if n == 165:\n        return 945\n    if n == 166:\n        return 951\n    if n == 167:\n        return 957\n    if n == 168:\n        return 963\n    if n == 169:\n        return 969\n    if n == 170:\n        return 975\n    if n == 171:\n        return 981\n    if n == 172:\n        return 987\n    if n == 173:\n        return 993\n    if n == 17"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # if n is 0 or n is 1:\n    if n <= 1:\n        return 1\n    # else\n    else:\n        return count_binary_seq(n-1) + count_binary_seq(n-2)\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # base cases\n    if n == 0 or n == 1: \n        return 1\n    if n == 2: \n        return 2\n    if n == 3: \n        return 4\n    if n == 4: \n        return 7\n    \n    # calculate the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits \n    count = 0 \n    for i in range(2, n): \n        count += count_binary_seq(n-1) * (2**(n-1))\n    return count + 2**n\n    \n    \ndef get_binary_seq(n): \n    '''\n    Write a function to find the first n binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # base cases\n    if n == 0 or n == 1: \n        return ''\n    if n == 2: \n        return '00'\n    if n == 3: \n        return '110'\n    if n == 4: \n        return '1010'\n    if n == 5: \n        return '1001'\n    if n == 6: \n        return '10101'\n    \n    # calculate the first n binary sequences of length 2n such that sum of first n bits is same as sum of last n bits \n    seq = ''\n    for i in range(2, n): \n        if i == 2: \n            seq = seq + '0' + get_binary_seq(n-1)\n        else: \n            seq = seq + get_binary_seq(n-1)\n    \n    # we return from the recursion, so, the first n bits should be '0'\n    return '0' + seq\n    \n    \ndef count_special_binary_seq(n): \n    '''\n    Write a function to find the count of all special binary sequences of length n such that first and last bits are same and sum of first n bits is same as sum of last n bits.\n    '''\n    # base cases\n    if n == 0 or n == 1: \n        return 1\n    if n == 2: \n        return 2\n    if n == 3: \n        return 4\n    if n == 4: \n        return 8\n    if n == 5: \n        return 16\n    \n    # calculate the count of all special binary sequences of length n such that first and last bits are same and sum of first n bits is same as sum of last n bits \n    count = 0 \n    for i in range(2, n): \n        count += count_special_binary_seq(n-1) * (2**(n-1))\n    return count + (2**n - 1)\n    \n    \ndef get_special_binary_seq(n): \n    '''\n    Write a function to find the first n special binary sequences of length n such that first and last bits are same and sum of first n bits is same as sum of last n bits.\n    '''\n    # base cases\n    if n == 0 or n == 1: \n        return ''\n    if n == 2: \n        return '00'\n    if n == 3: \n        return '110'\n    if n == 4: \n        return '1010'\n    if n == 5: \n        return '1001'\n    if n == 6: \n        return '10101'\n    \n    # calculate the first n special binary sequences of length n such that first and last bits are same and sum of first n bits is same as sum of last n bits \n    seq = ''\n    for i in range(2, n): \n        if i == 2: \n            seq = seq + get_special_binary_seq(n-1)\n        else: \n            seq = seq + get_special_binary_seq(n-1)\n    \n    # we return from the recursion, so, the first n bits should be '0'\n    return '0' + seq\n    \n    \ndef find_n_digit_nines(n): \n    '''\n    Write a function to find the number of non-negative integers whose digits are all 9s. \n    '''\n    # base case\n    if n == 0: \n        return 1\n    if n == 1: \n        return 9\n    if n == 2: \n        return 45\n    if n == 3: \n        return 91\n    if n == 4: \n        return 479\n    if n == 5: \n        return 9981\n    \n    # we calculate the number of non-negative integers whose digits are all 9s\n    # from the sum of all such integers upto n\n    count = 0 \n    for i in range(1, n+1): \n        count += find_n_digit_nines(n-i)\n    return count\n    \n    \ndef get_digit(n, d): \n    '''\n    Write a function to find the dth digit of n. \n    '''\n    # base cases\n    if d == 1: \n        return n%10\n    if d == 2: \n        return (n%100)//10\n    if d == 3: \n        return (n%1000)//100\n    if d == 4: \n        return (n%10000)//1000\n    if d == 5: \n        return (n%100000)//10000\n    if d == 6: \n        return (n%1000000)//100000\n    if d == 7: \n        return (n%10000000)//1000000\n    if d == 8: \n        return (n%100000000)//10000000\n    if d == 9: \n        return (n%1000000000)//100000000\n    \n    # calculate the dth digit of n\n    return get_digit(n//10, d-1)\n    \n    \ndef count_digits(n): \n    '''\n    Write a function to find the count of all digits of n. \n    '''\n    # base cases\n    if n == 0: \n        return 1\n    if n == 1: \n        return 10\n    if n == 2: \n        return 45\n    if n == 3: \n        return 91\n    if n == 4: \n        return 479\n    if n == 5: \n        return 9981\n    \n    # we calculate the number of non-negative integers whose digits are all 9s\n    # from the sum of all such integers upto n\n    count = 0 \n    for i in range(1, n+1): \n        count += count_digits(n-i)\n    return count\n    \n    \ndef get_largest_digit_of_product(n): \n    '''\n    Write a function to find the largest digit of product of all digits of n. \n    '''\n    # base cases\n    if n == 0: \n        return 1\n    if n == 1: \n        return 9\n    if n == 2: \n        return 9\n    if n == 3: \n        return 9\n    if n == 4: \n        return 9\n    if n == 5: \n        return 9\n    if n == 6: \n        return 7\n    if n == 7: \n        return 7\n    if n == 8: \n        return 7\n    if n == 9: \n        return 7\n    \n    # calculate the largest digit of product of all digits of n\n    temp = 0\n    for i in range(1, n+1): \n        temp = temp * get_digit(i, 1)\n    return temp%10\n    \n    \ndef get_smallest_digit_of_product(n): \n    '''\n    Write a function to find the smallest digit of product of all digits of n. \n    '''\n    # base cases\n    if n == 0: \n        return 1\n    if n == 1: \n        return 9\n    if n == 2: \n        return 1\n    if n == 3: \n        return 1\n    if n == 4: \n        return 1\n    if n == 5: \n        return 1\n    if n == 6: \n        return 1\n    if n == 7: \n        return 1\n    if n == 8: \n        return 1\n    if n == 9: \n        return 1\n    \n    # calculate the smallest digit of product of all digits of n\n    temp = 0\n    for i in range(1, n+1): \n    "
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    return count_binary_seq(n-1) + count_binary_seq(n-2)\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is not dict:\n        return 0\n    return max(dict_depth(v) for v in d.values()) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return max(dict_depth(v) for v in d.itervalues()) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not d:\n        return 0\n    return max(dict_depth(d[k]) if isinstance(d, dict) else 1 for k in d)\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    for k, v in d.items():\n        if type(v) is dict:\n            count += 1 + dict_depth(v)\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is dict:\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is not dict:\n        return 0\n    else:\n        return max(dict_depth(v) for v in d.values()) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return 1 + max(map(dict_depth, d.values())) if d else 0\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(rotations)) :\n        ranges[i] -= rotations[i]\n        if ranges[i] > 0 :\n            index += 1\n    return index\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotate=rotations[index]\n    #print 'rotate',rotate\n    low=ranges[0]\n    high=ranges[1]\n    #print low,high\n    mid=(low+high)//2\n    #print mid\n    if arr[rotate]==arr[mid] :\n        return arr[rotate]\n    elif arr[rotate]>arr[mid] :\n        if low==mid :\n            return arr[mid]\n        return find_Element(arr,ranges[1:],rotations,mid+1)\n    else :\n        if high==mid :\n            return arr[mid]\n        return find_Element(arr,ranges[1:],rotations,mid-1)\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations) :\n        if arr[index] == arr[0] :\n            return arr[index]\n        index = (index+1)%len(arr)\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    return arr[rotations[index]-1]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    while(ranges>0) :\n        arr[index],arr[index-1] = arr[index-1],arr[index]\n        index -= 1\n        ranges -= 1\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # print \"input : \",arr,ranges,rotations,index\n    if len(rotations) == 0 :\n        return arr[index]\n    else :\n        mid = int(len(arr)/2)\n        # print \"mid : \",arr[mid]\n        if mid == 0 :\n            return find_Element(arr[mid:],ranges[mid:],rotations[mid:],index)\n        elif mid == len(arr) - 1 :\n            return find_Element(arr[:mid],ranges[:mid],rotations[:mid],index)\n        else :\n            if rotations[mid] == ranges[mid] :\n                return find_Element(arr[mid:],ranges[mid:],rotations[mid:],index)\n            elif rotations[mid] > ranges[mid] :\n                return find_Element(arr[:mid],ranges[:mid],rotations[:mid],index)\n            else :\n                return find_Element(arr[mid:],ranges[mid:],rotations[mid:],index)\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if(index == len(rotations) - 1) :\n        return arr[rotations[index]]\n    else :\n        first_range = ranges[index]\n        second_range = ranges[index + 1]\n        first_half = arr[first_range[0] : first_range[1] + 1]\n        second_half = arr[second_range[0] : second_range[1] + 1]\n        half_size = len(first_half) + len(second_half)\n        if(rotations[index] > rotations[index + 1]) :\n            half_size = -half_size\n        return find_Element(arr,ranges,rotations,index + 1) + half_size\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    start,end = ranges[index]\n    rotations[index] = 0\n    for i in range(start,end+1) :\n        if arr[i] > arr[index] :\n            rotations[index] += 1\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(index,len(arr)) :\n        if (arr[i] > ranges[rotations]) and (arr[i] < ranges[rotations + 1]) :\n            return arr[i]\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotated_arr = [x for x in arr]\n    rotated_arr = rotate_array(rotated_arr,rotations)\n    \n    for i in range(ranges) :\n        rotated_arr = rotate_array(rotated_arr,rotations)\n    \n    return rotated_arr[index]\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            return word\n    return None\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    a = []\n    for i in range(0,len(words)):\n        if re.match(\"p\",words[i]):\n            a.append(words[i])\n    return a\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = [word.lower() for word in words]\n    p_words = [word for word in words if word.startswith('p')]\n    return p_words\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            return word\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    list_of_p = [word for word in words if word[0]=='p']\n    return list_of_p\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word for word in words if word.startswith('p')]\ndef pinyin(words):\n    '''\n    Write a function to convert a given string to pinyin.\n    '''\n    pinyin_lst = []\n    for word in words:\n        pinyin_lst.append(pinyin_dict[word])\n    return pinyin_lst\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p' and 'p' in word:\n            return word\n            \ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    for word in words:\n        if word[-1] == 'p' and 'p' in word:\n            return word\n            \ndef count_p(words):\n    '''\n    Write a function that takes a list of words and returns the number of words that begin and end with 'p'.\n    '''\n    count = 0\n    for word in words:\n        if word[0] == 'p' and word[-1] == 'p':\n            count += 1\n    return count\n    \ndef count_p_words(words):\n    '''\n    Write a function that takes a list of words and returns the number of p-words in the list. p-words are words that begin with 'p' and end with 'p'.\n    '''\n    count = 0\n    for word in words:\n        if 'p' in word:\n            if word[0] == 'p' and word[-1] == 'p':\n                count += 1\n    return count\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = []\n    for word in words:\n        if word[0] == 'p':\n            p.append(word)\n    return p\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return filter(lambda x: x.startswith('p'), words)\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    l = []\n    for word in words:\n        if word[0] == 'p':\n            l.append(word)\n    return l\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if (index == n):\n        return 0\n    max_sum = a[index]\n    max_sum_k = 0\n    for j in xrange(index, n):\n        if a[j] < a[index]:\n            max_sum_k = max(max_sum_k, max_sum)\n            max_sum = max(max_sum, max_sum_k + a[j])\n        else:\n            max_sum_k = max(max_sum_k, max_sum)\n            max_sum = max(max_sum, max_sum_k)\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    global Max\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if (k > n):\n        return -1\n    if (k == n):\n        return sum(a[:k])\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > index:\n        return 0\n    if n == index:\n        return a[index]\n    max_sum = a[index]\n    for i in range(index + 1, n + 1):\n        max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i, k + 1))\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if (index == n):\n        return 0\n    else:\n        result = a[index]\n        if (index < k):\n            result = max(result, max_sum_increasing_subseq(a, n, index + 1, k))\n        result = max(result, max_sum_increasing_subseq(a, n, index + 1, k) + a[index])\n    return result\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # Base Case\n    if index == 0:\n        return 0\n    elif k > index:\n        return 0\n    \n    else:\n        # Initialize the dp array\n        dp = [0 for i in range(k + 1)]\n        \n        # Initialize the dp array\n        for i in range(1, n + 1):\n            previous_max = 0\n            for j in range(1, k + 1):\n                previous_max = max(previous_max, dp[j])\n                if a[i - 1] < j:\n                    previous_max = max(previous_max, dp[j - a[i - 1]] + a[i - 1])\n                dp[j] = previous_max\n        \n        return dp[k]\n    \ndef max_sum_increasing_subseq_recur(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Base Case\n    if index == 0:\n        return 0\n    elif k > index:\n        return 0\n    \n    # Case 1\n    if a[index - 1] < k:\n        return max(max_sum_increasing_subseq_recur(a, n, index - 1, k), a[index - 1] + max_sum_increasing_subseq_recur(a, n, index - 1, k - a[index - 1]))\n    \n    # Case 2\n    else:\n        return max_sum_increasing_subseq_recur(a, n, index - 1, k)\n    \ndef max_sum_decreasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of decreasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Base Case\n    if index == 0:\n        return 0\n    elif k > index:\n        return 0\n    \n    else:\n        # Initialize the dp array\n        dp = [0 for i in range(k + 1)]\n        \n        # Initialize the dp array\n        for i in range(1, n + 1):\n            previous_max = 0\n            for j in range(1, k + 1):\n                previous_max = max(previous_max, dp[j])\n                if a[i - 1] < j:\n                    previous_max = max(previous_max, dp[j - a[i - 1]] + a[i - 1])\n                dp[j] = previous_max\n        \n        return dp[k]\n    \ndef max_sum_decreasing_subseq_recur(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of decreasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Base Case\n    if index == 0:\n        return 0\n    elif k > index:\n        return 0\n    \n    # Case 1\n    if a[index - 1] < k:\n        return max(max_sum_decreasing_subseq_recur(a, n, index - 1, k), a[index - 1] + max_sum_decreasing_subseq_recur(a, n, index - 1, k - a[index - 1]))\n    \n    # Case 2\n    else:\n        return max_sum_decreasing_subseq_recur(a, n, index - 1, k)\n    \ndef max_sum_palindrome_subseq(a, n, index):\n    '''\n    Write a function to find the maximum sum of palindrome subsequence from prefix until ith index, i.e., k > i.\n    '''\n    # Base Case\n    if index == 0:\n        return 0\n    \n    # Initialize the dp array\n    dp = [0 for i in range(n + 1)]\n    \n    # Initialize the dp array\n    for i in range(1, n + 1):\n        previous_max = 0\n        for j in range(1, i + 1):\n            previous_max = max(previous_max, dp[j])\n            if a[i - 1] == a[j - 1]:\n                previous_max = max(previous_max, dp[j - 1] + 2 * a[i - 1])\n            dp[j] = previous_max\n    \n    return dp[n]\n    \ndef max_sum_palindrome_subseq_recur(a, n, index):\n    '''\n    Write a function to find the maximum sum of palindrome subsequence from prefix until ith index, i.e., k > i.\n    '''\n    # Base Case\n    if index == 0:\n        return 0\n    \n    # Case 1\n    if a[index - 1] == a[n - index]:\n        return max(max_sum_palindrome_subseq_recur(a, n, index - 1), max_sum_palindrome_subseq_recur(a, n, index - 1) + 2 * a[index - 1])\n    \n    # Case 2\n    else:\n        return max(max_sum_palindrome_subseq_recur(a, n, index - 1), max_sum_palindrome_subseq_recur(a, n, index - 1) + a[index - 1])\n    \ndef max_sum_non_decreasing_subseq(a, n):\n    '''\n    Write a function to find the maximum sum of non-decreasing subsequence from prefix until ith index, i.e., k > i.\n    '''\n    # Base Case\n    if n == 0:\n        return 0\n    \n    # Initialize the dp array\n    dp = [0 for i in range(n + 1)]\n    \n    # Initialize the dp array\n    for i in range(1, n + 1):\n        previous_max = 0\n        for j in range(1, i + 1):\n            previous_max = max(previous_max, dp[j])\n            if a[i - 1] < a[j - 1]:\n                previous_max = max(previous_max, dp[j - 1] + a[i - 1])\n            dp[j] = previous_max\n    \n    return dp[n]\n    \ndef max_sum_non_decreasing_subseq_recur(a, n):\n    '''\n    Write a function to find the maximum sum of non-decreasing subsequence from prefix until ith index, i.e., k > i.\n    '''\n    # Base Case\n    if n == 0:\n        return 0\n    \n    # Case 1\n    if a[n - 1] < a[n - 2]:\n        return max(max_sum_non_decreasing_subseq_recur(a, n - 1), max_sum_non_decreasing_subseq_recur(a, n - 1) + a[n - 1])\n    \n    # Case 2\n    else:\n        return max_sum_non_decreasing_subseq_recur(a, n - 1)\n    \ndef max_sum_non_increasing_subseq(a, n):\n    '''\n    Write a function to find the maximum sum of non-increasing subsequence from prefix until ith index, i.e., k > i.\n    '''\n    # Base Case\n    if n == 0:\n        return 0\n    \n    # Initialize the dp array\n    dp = [0 for i in range(n + 1)]\n    \n    # Initialize the dp array\n    for i in range(1, n + 1):\n        previous_max = 0\n        for j in range(1, i + 1):\n            previous_max = max(previous_max, dp[j])\n            if a[i - 1] > a[j - 1]:\n                previous_max = max(previous_max, dp[j - 1] + a"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    if k < index:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    res = 0\n    if k > index:\n        return res\n    if n == index:\n        return a[index]\n    if res < a[index]:\n        res = a[index]\n    if index + k < n:\n        res = max_sum_increasing_subseq(a, n, index+1, k)\n    if index + k < n and res + a[index+k] > a[index]:\n        res += a[index+k]\n    return res\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k < n:\n        return a[index]\n    if index > 0:\n        return max(a[index - 1], max_sum_increasing_subseq(a, n, index - 1, k))\n    else:\n        return 0\n    \n    \ndef max_sum_increasing_subseq_DP(a, n, k):\n    '''\n    Dp solution\n    '''\n    # max sum increasing subseq for 0th index to kth index\n    # dp[i][k] = max sum increasing subseq for 0th index to i and upto kth index\n    dp = [[0 for i in range(n + 1)] for j in range(k + 1)]\n    #base case\n    for i in range(n + 1):\n        dp[0][i] = a[i - 1]\n    # case 1: no element upto kth index\n    for i in range(1, k + 1):\n        dp[i][0] = 0\n    # case 2: max sum increasing subseq till ith index is zero\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if a[i - 1] > a[j - 1]:\n                dp[j][i] = max(dp[j - 1][i], dp[j][i - 1])\n            else:\n                dp[j][i] = max(dp[j - 1][i], dp[j][i - 1] + a[i - 1])\n    return dp[k][n]\n    \n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    global answer\n    if k >= len(a):\n        return 0\n    if k == 0:\n        return max(a[0], 0)\n    if index == len(a):\n        return 0\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:] + (n,)\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    t=deepcopy(tuplex)\n    return t[m:m+n]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m<0 or n<0:\n        return tuplex\n    else:\n        return tuplex[m],tuplex[m+1],tuplex[m+2]\ndef current_score(column,board,point):\n    '''\n    Write a function that returns the current score of a board\n    '''\n    total=0\n    if board[0][column]=='X':\n        total+=point[0]\n    elif board[0][column]=='O':\n        total+=point[1]\n    if board[1][column]=='X':\n        total+=point[0]\n    elif board[1][column]=='O':\n        total+=point[1]\n    if board[2][column]=='X':\n        total+=point[0]\n    elif board[2][column]=='O':\n        total+=point[1]\n    return total\ndef min_max_move(board,depth,maximizing,alpha,beta):\n    '''\n    Write a function that chooses the best move for the computer.\n    '''\n    moves=[]\n    for i in range(3):\n        for j in range(3):\n            if board[i][j]=='_':\n                moves.append([i,j])\n    if depth==0:\n        return [0,0]\n    else:\n        if maximizing:\n            best_score=-10000\n            for move in moves:\n                if board[move[0]][move[1]]=='_':\n                    board[move[0]][move[1]]='X'\n                    score=current_score(move[1],board,point)\n                    if score>best_score:\n                        best_score=score\n                        best_move=[move[0],move[1]]\n                    board[move[0]][move[1]]='_'\n                    if best_score>beta:\n                        return best_move\n                    alpha=max(alpha,best_score)\n            return best_move\n        else:\n            best_score=10000\n            for move in moves:\n                if board[move[0]][move[1]]=='_':\n                    board[move[0]][move[1]]='O'\n                    score=current_score(move[1],board,point)\n                    if score<best_score:\n                        best_score=score\n                        best_move=[move[0],move[1]]\n                    board[move[0]][move[1]]='_'\n                    if best_score<alpha:\n                        return best_move\n                    beta=min(beta,best_score)\n            return best_move\ndef terminal(board):\n    '''\n    Write a function that checks if a game is over.\n    '''\n    if board[0][0]=='X' and board[1][1]=='X' and board[2][2]=='X':\n        return True\n    elif board[0][0]=='O' and board[1][1]=='O' and board[2][2]=='O':\n        return True\n    elif board[0][2]=='X' and board[1][1]=='X' and board[2][0]=='X':\n        return True\n    elif board[0][2]=='O' and board[1][1]=='O' and board[2][0]=='O':\n        return True\n    elif board[0][0]=='X' and board[1][0]=='X' and board[2][0]=='X':\n        return True\n    elif board[0][0]=='O' and board[1][0]=='O' and board[2][0]=='O':\n        return True\n    elif board[0][1]=='X' and board[1][1]=='X' and board[2][1]=='X':\n        return True\n    elif board[0][1]=='O' and board[1][1]=='O' and board[2][1]=='O':\n        return True\n    elif board[0][2]=='X' and board[1][2]=='X' and board[2][2]=='X':\n        return True\n    elif board[0][2]=='O' and board[1][2]=='O' and board[2][2]=='O':\n        return True\n    elif board[0][0]=='X' and board[0][1]=='X' and board[0][2]=='X':\n        return True\n    elif board[0][0]=='O' and board[0][1]=='O' and board[0][2]=='O':\n        return True\n    elif board[1][0]=='X' and board[1][1]=='X' and board[1][2]=='X':\n        return True\n    elif board[1][0]=='O' and board[1][1]=='O' and board[1][2]=='O':\n        return True\n    elif board[2][0]=='X' and board[2][1]=='X' and board[2][2]=='X':\n        return True\n    elif board[2][0]=='O' and board[2][1]=='O' and board[2][2]=='O':\n        return True\n    elif board[0][0]=='X' and board[1][1]=='X' and board[2][2]=='X':\n        return True\n    elif board[0][0]=='O' and board[1][1]=='O' and board[2][2]=='O':\n        return True\n    elif board[0][2]=='X' and board[1][1]=='X' and board[2][0]=='X':\n        return True\n    elif board[0][2]=='O' and board[1][1]=='O' and board[2][0]=='O':\n        return True\n    else:\n        return False\ndef tictactoe_helper(board,point,depth):\n    '''\n    Write a function that can play a game of Tic-Tac-Toe.\n    '''\n    if terminal(board):\n        return board\n    else:\n        depth+=1\n        current_move=min_max_move(board,depth,True,10000,0)\n        if board[current_move[0]][current_move[1]]=='_':\n            board[current_move[0]][current_move[1]]='X'\n            return tictactoe_helper(board,point,depth)\n        else:\n            return tictactoe_helper(board,point,depth)\ndef tictactoe(board,point):\n    '''\n    Write a function that can play a game of Tic-Tac-Toe.\n    '''\n    board=deepcopy(board)\n    if terminal(board):\n        return board\n    else:\n        board=tictactoe_helper(board,point,0)\n        return board\npoint=[3,-3]\nboard=[['_','_','_'],\n        ['_','_','_'],\n        ['_','_','_']]\nboard=tictactoe(board,point)\nfor i in range(3):\n    print board[i]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_copy = deepcopy(tuplex)\n    if m > 0:\n        for i in range(m):\n            tuplex_copy = tuplex_copy[1:]\n    if n > 0:\n        for i in range(n):\n            tuplex_copy = tuplex_copy[:1]\n    return tuplex_copy\ndef tuplex_x_y(tuplex,x,y):\n    '''\n    Write a function to get a tuple with elements of x and y.\n    '''\n    tuplex_copy = deepcopy(tuplex)\n    for i in range(x):\n        tuplex_copy = tuplex_copy[1:]\n    for i in range(y):\n        tuplex_copy = tuplex_copy[:1]\n    return tuplex_copy\ndef get_squared_list(l):\n    '''\n    Write a function to get a squared list of the elements of l.\n    '''\n    result = []\n    for i in l:\n        result.append(i**2)\n    return result\ndef get_non_repeating_letters(string):\n    '''\n    Write a function to get a list of non repeating letters in a string.\n    '''\n    from collections import defaultdict\n    d = defaultdict(int)\n    for c in string:\n        d[c] += 1\n    return [k for k,v in d.items() if v == 1]\ndef get_pairs(l):\n    '''\n    Write a function to get a list of pairs of l elements.\n    '''\n    result = []\n    for i in range(0,len(l)-1,1):\n        result.append((l[i],l[i+1]))\n    return result\ndef get_duplicates(l):\n    '''\n    Write a function to get a list of duplicates in l.\n    '''\n    from collections import defaultdict\n    d = defaultdict(int)\n    for c in l:\n        d[c] += 1\n    return [k for k,v in d.items() if v > 1]\ndef get_nonduplicate_tuples(l):\n    '''\n    Write a function to get a list of non duplicates tuples in l.\n    '''\n    from collections import defaultdict\n    d = defaultdict(int)\n    result = []\n    for c in l:\n        d[c] += 1\n    for c in l:\n        if d[c] == 1:\n            result.append(c)\n    return result\ndef get_nonduplicate_tuples_list(l):\n    '''\n    Write a function to get a list of non duplicates tuples in l.\n    '''\n    from collections import defaultdict\n    d = defaultdict(int)\n    result = []\n    for c in l:\n        d[c] += 1\n    for c in l:\n        if d[c] == 1:\n            result.append(c)\n    return result\ndef get_nonduplicate_tuples_str(l):\n    '''\n    Write a function to get a list of non duplicates tuples in l.\n    '''\n    from collections import defaultdict\n    d = defaultdict(int)\n    result = []\n    for c in l:\n        d[c] += 1\n    for c in l:\n        if d[c] == 1:\n            result.append(c)\n    return result\ndef get_nonduplicate_tuples_dict(l):\n    '''\n    Write a function to get a list of non duplicates tuples in l.\n    '''\n    from collections import defaultdict\n    d = defaultdict(int)\n    result = []\n    for c in l:\n        d[c] += 1\n    for c in l:\n        if d[c] == 1:\n            result.append(c)\n    return result\ndef get_first_n(l,n):\n    '''\n    Write a function to get a list of the first n elements in l.\n    '''\n    return l[0:n]\ndef get_last_n(l,n):\n    '''\n    Write a function to get a list of the last n elements in l.\n    '''\n    return l[-n:]\ndef get_middle_n(l,n):\n    '''\n    Write a function to get a list of the middle n elements in l.\n    '''\n    return l[n:-n]\ndef replace_letters(string,dict):\n    '''\n    Write a function to replace letters in a string by those in dict.\n    '''\n    from collections import defaultdict\n    d = defaultdict(int)\n    for c in string:\n        d[c] += 1\n    result = []\n    for c in string:\n        if d[c]!= 0:\n            result.append(dict[c])\n        else:\n            result.append(c)\n    return ''.join(result)\ndef is_anagram(s1,s2):\n    '''\n    Write a function to check if s1 and s2 are anagrams.\n    '''\n    return sorted(s1) == sorted(s2)\ndef is_anagram_list(l1,l2):\n    '''\n    Write a function to check if two lists are anagrams.\n    '''\n    return sorted(l1) == sorted(l2)\ndef are_permutations(s1,s2):\n    '''\n    Write a function to check if two strings are permutations.\n    '''\n    return sorted(s1) == sorted(s2)\ndef palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return string == string[::-1]\ndef permutations(s):\n    '''\n    Write a function to get all permutations of a string.\n    '''\n    import itertools\n    return list(map(''.join,itertools.permutations(s)))\ndef permutations_list(l):\n    '''\n    Write a function to get all permutations of a list.\n    '''\n    import itertools\n    return list(map(''.join,itertools.permutations(l)))\ndef permutations_dict(d):\n    '''\n    Write a function to get all permutations of a dict.\n    '''\n    import itertools\n    return list(map(''.join,itertools.permutations(d)))\ndef get_words_from_file(filename):\n    '''\n    Write a function to get all the words in a file.\n    '''\n    import re\n    return re.compile('\\s+').split(open(filename).read())\ndef get_words_from_file_list(filename):\n    '''\n    Write a function to get all the words in a file.\n    '''\n    import re\n    return re.compile('\\s+').split(open(filename).read().split())\ndef get_words_from_file_set(filename):\n    '''\n    Write a function to get all the words in a file.\n    '''\n    import re\n    return set(re.compile('\\s+').split(open(filename).read()))\ndef get_words_from_file_dict(filename):\n    '''\n    Write a function to get all the words in a file.\n    '''\n    import re\n    return re.compile('\\s+').split(open(filename).read())\ndef get_words_from_file_set_dict(filename):\n    '''\n    Write a function to get all the words in a file.\n    '''\n    import re\n    return set(re.compile('\\s+').split(open(filename).read()))\ndef get_words_from_file_dict_set(filename):\n    '''\n    Write a function to get all the words in a file.\n    '''\n    import re\n    return set(re.compile('\\s+').split(open(filename).read()))\ndef get_words_from_file_dict_list(filename):\n    '''\n    Write a function to get all the words in a file.\n    '''\n    import re\n    return re.compile('\\s+').split(open(filename).read())\ndef get_words_from_file_dict"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n+1]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m],tuplex[n]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex)==1:\n        return ':'.join(str(tuplex[0]) for i in range(m,n))\n    else:\n        return tuplex[0]+':'+colon_tuplex(tuplex[1:],m,n)\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex)<m or len(tuplex)<n:\n        raise IndexError\n    if m==1:\n        return tuplex[n-1]\n    return tuplex[n-1:m-1:-1]\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==0:\n        return tuplex[n]\n    else:\n        return tuplex[n]+(colon_tuplex(tuplex,m-1,n-1),)\ndef triples(tuplex):\n    '''\n    Write a function that takes a tuple and return a new tuple with values that\n    are squares of the original tuple's values. For example, if\n    tuplex = (1, 2, 3), your function should return\n    (1, 4, 9).\n    '''\n    return colon_tuplex(tuplex,len(tuplex)-1,0)\ndef has_duplicates(tuplex):\n    '''\n    Write a function that takes a tuple and returns True if any two elements\n    appear the same number of times in the tuple. For example, if\n    tuplex = (1, 2, 3), your function should return True. If tuplex =\n    (1, 2, 3, 4, 5), your function should return False.\n    '''\n    s=set(tuplex)\n    if len(s)==len(tuplex):\n        return False\n    else:\n        return True\ndef count(tuplex):\n    '''\n    Write a function that takes a tuple and returns a dictionary with the\n    number of times each element appears in the tuple as the key and the\n    value of each key is the number of times it appears in the tuple as the\n    value. For example, if tuplex = (1, 1, 1, 1, 1, 1), your function\n    should return {1: 5, 2: 1}.\n    '''\n    counts={}\n    for i in tuplex:\n        if i not in counts:\n            counts[i]=1\n        else:\n            counts[i]+=1\n    return counts\ndef highest_and_lowest(tuplex):\n    '''\n    Write a function that takes a tuple and returns a tuple with the highest\n    element and the lowest element of the tuple. For example, if tuplex =\n    (1, 2, 3, 4, 5, 6), your function should return (6, 1).\n    '''\n    if len(tuplex)==0:\n        return (None,None)\n    else:\n        tuplex=tuplex[::-1]\n        lowest=tuplex[0]\n        highest=tuplex[0]\n        for i in tuplex:\n            if i>highest:\n                highest=i\n            if i<lowest:\n                lowest=i\n        return (highest,lowest)\ndef make_words(alphabet, n):\n    '''\n    Write a function that takes a string alphabet and an integer n and returns\n    a tuple of length n with the strings that can be made from the letters of\n    alphabet. For example, make_words('ab', 2) should return ('aa', 'ab',\n    'ba', 'bb', 'ab', 'ba').\n    '''\n    tuplex=alphabet\n    if n==0:\n        return tuplex\n    else:\n        return (make_words(tuplex,n-1)+tuplex)\ndef all_lists(n):\n    '''\n    Write a function that takes an integer n and returns a tuple with all the\n    n-dimensional lists that can be made from the elements of the one-dimensional\n    list [1, 2, 3, 4]. For example, if n is 3, the function should return\n    ((1, 2, 3), (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)).\n    '''\n    if n==0:\n        return ()\n    else:\n        return ((1,2,3),all_lists(n-1),(1,2),all_lists(n-1),(1,3),all_lists(n-1),(1,4),all_lists(n-1))\ndef all_perms(tuplex):\n    '''\n    Write a function that takes a tuple and returns a tuple with all the\n    permutations of the elements of the tuple. For example, if tuplex = (1, 2,\n    3), your function should return ((1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1),\n    (3, 1, 2), (3, 2, 1)).\n    '''\n    if len(tuplex)==0:\n        return ()\n    else:\n        return ((tuplex[0],)+all_perms(tuplex[1:]))+(tuplex[1:],)\ndef apply_all(f, n):\n    '''\n    Write a function that takes a function f and an integer n and returns a\n    function that takes a tuple and applies f to every element of the tuple.\n    For example, if f is abs, the function should return the absolute value of\n    the tuple. If f is max, the function should return the max value of the\n    tuple. If f is min, the function should return the min value of the tuple.\n    '''\n    if n==0:\n        return f\n    else:\n        return apply_all(lambda x:f(x),n-1)(apply_all(f,n-1))\ndef update(tuplex):\n    '''\n    Write a function that takes a tuple and returns a new tuple with all the\n    elements squared. For example, if tuplex = (1, 2, 3), your function should\n    return (1, 4, 9).\n    '''\n    return apply_all(lambda x:x**2,len(tuplex))\ndef remove_duplicates(tuplex):\n    '''\n    Write a function that takes a tuple and returns a new tuple with all the\n    elements of the tuple that are duplicates removed. For example, if tuplex =\n    (1, 2, 3, 1, 2, 3), your function should return (1, 2, 3).\n    '''\n    tuplex=tuplex[::-1]\n    s=set(tuplex)\n    tuplex=tuple(s)\n    return tuplex[::-1]\ndef find(tuplex, item):\n    '''\n    Write a function that takes a tuple and returns the index of the first\n    occurrence of item in the tuple. For example, if tuplex = (1, 2, 3, 1, 2, 3)\n    and item is 1, your function should return 2.\n    '''\n    if len(tuplex)==0:\n        return None\n    else:\n        if tuplex[0]==item:\n            return 0\n        else:\n            return find(tuplex[1:],item)\ndef is_unique(tuplex):\n    '''\n    Write a function that takes a tuple and returns True if the tuple contains\n    no duplicate elements and False otherwise. For example, if tuplex = (1,\n    2, 3, 1, 2, 3), your function should return False.\n    '''\n    return len(tuplex)==len(set(tuplex))\ndef make_abecedarian(alphabet):\n    '''\n    Write a function that takes a tuple of numbers and returns a tuple with the\n    same numbers as the tuple in abecedarian order. For example, if\n    alphabet = (1, 3, 5, 2, 4, 6), your function should return (1, 3, 5, 2, 4, 6).\n    '''\n    if len(alphabet)==0:\n        return ()\n    else:\n        return (alphabet[0],)+(make_abecedarian(alphabet[1:]))\ndef make_pairs(tuplex):\n    '''\n    Write a function that takes a tuple and returns a new tuple with all the\n    pairs of the elements of the tuple. For example, if tuplex = (1, 2, 3),\n    your function should return ((1, 2), (2, 3)).\n    '''\n    if len(tuplex)==0:\n        return ()\n    else:\n        return ((tuplex[0],)+make_pairs(tuplex[1:]))+(tuplex[1:],)\ndef diff(tuplex):\n    '''\n    Write a function that takes a tuple and returns a tuple with the first and\n    last elements of the tuple removed and the elements in between returned\n    as a single tuple"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m <= n:\n        return tuplex[m-1:n]\n    else:\n        return tuplex[n-1:m]\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    ans = [0] * N\n    for i in xrange(N):\n        ans[i] = nums1[i] * nums2[N - i - 1]\n    return ans\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    m = len(nums1)\n    n = len(nums2)\n    if m < N or n < N:\n        return\n    nums1.sort()\n    nums2.sort()\n    result = []\n    for i in range(0, N):\n        result.append(nums1[i] * nums2[i])\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #compute all possible factors of numbers\n    factors1 = [1]\n    factors2 = [1]\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def max_product(a, b):\n        if a < b:\n            return a\n        else:\n            return b\n    result = 0\n    for i in range(N):\n        result = max_product(result, nums1[i] * nums2[i])\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    '''\n    1. O(n) space\n    2.\n    '''\n    if not nums1 or not nums2: return 0\n    nums1.sort()\n    nums2.sort()\n    left = len(nums1) - N\n    right = len(nums1) - 1\n    result = 1\n    while left >= 0 and right < len(nums2):\n        if nums1[left] * nums2[right] > result:\n            result = nums1[left] * nums2[right]\n        if nums1[left] < nums2[right]:\n            left -= 1\n        else:\n            right += 1\n    if left < 0:\n        return result\n    else:\n        return result * nums1[left]\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N > len(nums1) or N > len(nums2):\n        return None\n    elif N == 0:\n        return []\n    else:\n        if len(nums1) < len(nums2):\n            nums1, nums2 = nums2, nums1\n        f1, f2 = [], []\n        for x in nums1:\n            f1.append(x)\n            f1.append(1/x)\n        for x in nums2:\n            f2.append(x)\n            f2.append(1/x)\n        f1.sort()\n        f2.sort()\n        f1 = f1[:N]\n        f2 = f2[:N]\n        result = [1]\n        for x in f1:\n            for y in f2:\n                product = x * y\n                if product > result[0]:\n                    result = [product]\n                elif product == result[0]:\n                    result.append(product)\n        return result\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    if len(nums1) > N or len(nums2) > N:\n        return -1\n    \n    biggest = [1]\n    \n    for i in range(1, N + 1):\n        curr = []\n        for j in range(i):\n            if i % nums1[j] == 0:\n                curr.append(nums1[j])\n            if i % nums2[j] == 0:\n                curr.append(nums2[j])\n        if len(curr) > len(biggest):\n            biggest = curr\n    \n    return reduce(lambda x,y: x*y, biggest)\n    \ndef find_max_product(nums, max_range):\n    '''\n    Write a function to find all the maximum products that can be obtained with 2 or more numbers from a given list.\n    '''\n    \n    if len(nums) < 2:\n        return -1\n    \n    max_product = []\n    \n    for i in range(max_range):\n        max_product.append(large_product(nums[i:], nums[:i+1], len(nums) - i))\n    \n    return max_product\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N > len(nums1) * len(nums2):\n        return\n    nums1.sort()\n    nums2.sort()\n    result = []\n    for i in range(N):\n        result.append(nums1[-1]*nums2[-1])\n        nums1.pop()\n        nums2.pop()\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    ans = []\n    for i in xrange(N):\n        m = max(nums1)\n        n = max(nums2)\n        if nums1.count(m) > 1:\n            nums1.remove(m)\n        if nums2.count(n) > 1:\n            nums2.remove(n)\n        ans.append(m*n)\n    return ans\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # create a list of lists of size N\n    nums = [[] for i in range(N)]\n    # insert numbers to each list\n    for i in range(N):\n        nums[i].append(nums1[i%len(nums1)])\n        nums[i].append(nums2[i%len(nums2)])\n    \n    # sort each list by decreasing order of values\n    for i in range(N):\n        nums[i].sort(key = lambda x: x[1], reverse = True)\n    \n    # find the products from each list\n    products = []\n    for i in range(N):\n        products.append(nums[i][0][1] * nums[i][1][1])\n    \n    # return the product of the first N products\n    return products[0] * products[1] * products[2]\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n    "
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef main():\n    print maximum(1,2)\n    \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a>b):\n        return a\n    else:\n        return b\n    \ndef maximum3(a,b,c):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return maximum(a,b)\n    \ndef max_of_three(a,b,c):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    return max(a,b,c)\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n        \ndef abs_value(a):\n    '''\n    Write a python function to find the absolute value of a number.\n    '''\n    if a < 0:\n        return -a\n    else:\n        return a\n        \ndef convert_to_binary(a):\n    '''\n    Write a python function to convert a number to binary\n    '''\n    if a == 0:\n        return 0\n    else:\n        return convert_to_binary(a//2) * 10 + a%2\n        \ndef factorial(a):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if a == 1 or a == 0:\n        return 1\n    else:\n        return a * factorial(a-1)\n        \ndef is_even(a):\n    '''\n    Write a python function to check if a number is even or odd.\n    '''\n    if a == 0:\n        return True\n    else:\n        return is_even(a-2)\n        \ndef is_palindrome(a):\n    '''\n    Write a python function to check if a number is a palindrome.\n    '''\n    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    else:\n        return is_palindrome(a//10) * 10 + a%10 == a\n        \ndef is_power_of_two(a):\n    '''\n    Write a python function to check if a number is a power of two.\n    '''\n    if a == 0:\n        return False\n    else:\n        return is_power_of_two(a/2) * 2 == a\n        \ndef fibonacci(a):\n    '''\n    Write a python function to find the fibonacci number.\n    '''\n    if a == 0 or a == 1:\n        return a\n    else:\n        return fibonacci(a-1) + fibonacci(a-2)\n        \ndef fibonacci_number(a):\n    '''\n    Write a python function to find the number of fibonacci numbers less than a\n    number.\n    '''\n    if a == 0 or a == 1:\n        return 1\n    else:\n        return fibonacci_number(a-1) + fibonacci_number(a-2)\n        \ndef nth_fibonacci(a):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if a == 0 or a == 1:\n        return a\n    else:\n        return nth_fibonacci(a-2) + nth_fibonacci(a-1)\n        \ndef is_armstrong(a):\n    '''\n    Write a python function to check if a number is an armstrong number.\n    '''\n    temp = a\n    sum = 0\n    while temp!= 0:\n        r = temp % 10\n        sum = sum + pow(r, 3)\n        temp = temp // 10\n    if a == sum:\n        return True\n    else:\n        return False\n        \ndef prime_number(a):\n    '''\n    Write a python function to check if a number is a prime number.\n    '''\n    if a == 2:\n        return True\n    elif a < 2:\n        return False\n    else:\n        if a % 2 == 0:\n            return False\n        else:\n            return prime_number(a//2)\n        \ndef palindrome_number(a):\n    '''\n    Write a python function to check if a number is a palindrome number.\n    '''\n    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    else:\n        temp = a\n        sum = 0\n        while temp!= 0:\n            r = temp % 10\n            sum = sum * 10 + r\n            temp = temp // 10\n        if a == sum:\n            return True\n        else:\n            return False\n        \ndef reverse_number(a):\n    '''\n    Write a python function to reverse a number.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return reverse_number(a//10) * 10 + a%10\n        \ndef is_pandigital(a):\n    '''\n    Write a python function to check if a number is a pandigital number.\n    '''\n    temp = str(a)\n    if len(temp) == 9:\n        s = 0\n        for i in range(1, 10):\n            if str(i) not in temp:\n                return False\n            s = s + int(str(i) in temp)\n        if s == 9:\n            return True\n        else:\n            return False\n    else:\n        return False\n        \ndef factorial_of_number(a):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if a == 0:\n        return 1\n    else:\n        return a * factorial_of_number(a-1)\n        \ndef digit_count(a):\n    '''\n    Write a python function to count the digits in a number.\n    '''\n    s = 0\n    while a!= 0:\n        r = a%10\n        s = s + 1\n        a = a//10\n    return s\n        \ndef nth_digit(a, n):\n    '''\n    Write a python function to find the nth digit of a number.\n    '''\n    if n == 0:\n        return a\n    else:\n        return nth_digit(a//10, n-1) * 10 + a%10\n        \ndef is_happy(a):\n    '''\n    Write a python function to check if a number is happy.\n    '''\n    if a == 1:\n        return True\n    else:\n        if a == 4:\n            return False\n        else:\n            return is_happy(sum_of_square_of_digits(a))\n        \ndef sum_of_square_of_digits(a):\n    '''\n    Write a python function to find the sum of square of digits of a number.\n    '''\n    s = 0\n    while a!= 0:\n        r = a%10\n        s = s + pow(r, 2)\n        a = a//10\n    return s\n        \ndef prime_factors(a):\n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    if a == 2:\n        return a\n    if a < 2:\n        return None\n    if a == 1:\n        return None\n    if a == 3:\n        return a\n    if a % 2 == 0:\n        return 2 * prime_factors(a//2)\n    else:\n        return 2 * prime_factors(a-1)\n        \ndef is_perfect_number(a):\n    '''\n    Write a python function to check if a number is perfect.\n    '''\n    if a == 2:\n        return True\n    else:\n        if a < 2:\n            return False\n        elif a == 1:\n            return False\n        else:\n            return sum_of_divisors(a) == a\n        \ndef sum_of_divisors(a):\n    '''\n    Write a python function to find the sum of divisors of a number.\n    '''\n    s = 1\n    for i in range(1, a//2+1):\n        if a % i == 0:\n            s = s + i\n    return s\n        \ndef is_factor(a, b):\n    '''\n    Write a python function to check if a number is a factor of another number.\n    '''\n    if a == 0:\n        return False\n    elif a == b:\n        return True\n    else:\n        return is_factor(a, b-1)\n        \ndef sum_of_factorials(a):\n    '''\n    Write a python function to find the sum of factorials of a number.\n    '''\n    if a == 0:\n        return 1\n    else:\n        return sum"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a>b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tup = tuple(str1)\n    return tup\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    result = []\n    for char in str1:\n        result.append(char)\n    return tuple(result)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tup1 = tuple(str1)\n    return tup1\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n & (~n + 1)\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (1 << (len(bin(n))-2))\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (1 << 0) \n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    import math\n    import random\n    \n    if (n & 1)!= 1: \n        n = n | 1 \n        return n\n    else: \n        i = 1\n        while (n & 1) == 0: \n            n = n >> 1\n            i += 1\n        n = n | (1 << i) \n        return n \n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0: \n        return 1\n    t = 1\n    for i in range(32): \n        t += (1 & n)\n        n = n << 1\n    return t\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    # get the right most set bit\n    m = 1\n    while m & n!= 0:\n        m = m << 1\n    \n    # set the right most set bit\n    m = m | 1\n    \n    # return the result\n    return m\n    \ndef set_left_most_bit(n):\n    '''\n    Write a python function to set the left most bit.\n    '''\n    \n    # get the right most unset bit\n    m = 1\n    while m & n!= 0:\n        m = m << 1\n    \n    # set the right most unset bit\n    m = m | 1\n    \n    # return the result\n    return m\n    "
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n & (n - 1)\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    s = bin(n)\n    s = s.replace(\"0b\", \"\")\n    \n    return int(s.ljust(len(s), '0'), 2)\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (~(n & -n))\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    bin_val = bin(n)[2:]\n    return int(str(bin_val)[:1] + '0' + str(bin_val)[1:], 2)\n    \n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h / 3\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi * (r**2)) / 3 * h\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = (math.pi)*(r**2)*(h/3)\n    return vol\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    r = float(r)\n    h = float(h)\n    return (1/3)*math.pi*(r**2)*(h**2)\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    \n    pi = 3.14159265\n    V = 1/3*pi*(r**2)*h\n    print 'Volume of a cone: %0.2f' %V\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi=3.14\n    V=1.0/3.0*pi*r*r*h\n    return V\ndef volume_cone1(r,h):\n    pi=3.14\n    V=1.0/3.0*pi*r*r*h\n    return V\ndef volume_cylinder(r,h):\n    pi=3.14\n    V=1.0/3.0*pi*r*r*h\n    return V\ndef volume_cylinder_1(r,h):\n    pi=3.14\n    V=1.0/3.0*pi*r*r*h\n    return V\ndef area_cone(r,h):\n    pi=3.14\n    area=pi*r*r*h\n    return area\ndef area_cone_1(r,h):\n    pi=3.14\n    area=pi*r*r*h\n    return area\ndef area_cylinder(r,h):\n    pi=3.14\n    area=pi*r*r*h\n    return area\ndef area_cylinder_1(r,h):\n    pi=3.14\n    area=pi*r*r*h\n    return area\ndef pressure_force(mass,area,a):\n    F=mass*a\n    return F\ndef pressure_force1(mass,area,a):\n    F=mass*a\n    return F\ndef pressure_force_1(mass,area,a):\n    F=mass*a\n    return F\ndef volume_force(mass,area,a):\n    F=mass*a\n    return F\ndef volume_force_1(mass,area,a):\n    F=mass*a\n    return F\ndef force(mass,area,a):\n    F=mass*a\n    return F\ndef force_1(mass,area,a):\n    F=mass*a\n    return F\ndef force_2(mass,area,a):\n    F=mass*a\n    return F\ndef moment(mass,area,a,b):\n    m=mass*(a+b)\n    return m\ndef torque(mass,area,a,b):\n    t=mass*(a-b)\n    return t\ndef radiation_flux(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_1(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_2(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_3(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_4(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_5(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_6(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_7(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_8(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_9(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_10(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_11(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_12(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_13(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_14(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_15(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_16(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_17(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_18(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_19(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_20(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_21(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_22(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_23(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_24(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_25(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_26(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_27(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_28(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_29(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_30(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_31(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_32(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_33(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_34(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_35(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_36(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_37(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_38(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_39(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_40(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_41(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_42(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_43(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_44(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_45(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_46(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_47(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_48(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_49(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_50(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_51(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_52(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_53(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_54(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_55(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_56(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_57(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_58(W,L):\n    flux=W/L\n    return flux\ndef radiation_flux_59(W,"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi=3.14159265359\n    v=1/3*pi*r**2*h\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V=math.pi*r**2*h/3\n    return V\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*r**2*h\n    \ndef volume_cone_with_base(r,h,b):\n    '''\n    Write a function to find the volume of a cone when the base is given.\n    '''\n    return (1/3)*math.pi*r**2*h-b\n    \ndef area_cone(r,h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    return (1/2)*math.pi*r*h\n    \ndef area_cone_with_base(r,h,b):\n    '''\n    Write a function to find the area of a cone when the base is given.\n    '''\n    return (1/2)*math.pi*r*h-b\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\n    \ndef volume_sphere_with_base(r,b):\n    '''\n    Write a function to find the volume of a sphere when the base is given.\n    '''\n    return 4/3*math.pi*r**3-b\n    \ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    return 4*math.pi*r**2\n    \ndef area_sphere_with_base(r,b):\n    '''\n    Write a function to find the area of a sphere when the base is given.\n    '''\n    return 4*math.pi*r**2-b\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r**2*h\n    \ndef volume_cylinder_with_base(r,h,b):\n    '''\n    Write a function to find the volume of a cylinder when the base is given.\n    '''\n    return math.pi*r**2*h-b\n    \ndef area_cylinder(r,h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    return math.pi*r*2+h*math.sqrt(r**2+h**2)\n    \ndef area_cylinder_with_base(r,h,b):\n    '''\n    Write a function to find the area of a cylinder when the base is given.\n    '''\n    return math.pi*r*2+h*math.sqrt(r**2+h**2)-b\n    \ndef volume_cone_with_base(r,h,b):\n    '''\n    Write a function to find the volume of a cone when the base is given.\n    '''\n    return (1/3)*math.pi*r**2*h-b\n    \ndef volume_cone_with_base(r,h):\n    '''\n    Write a function to find the volume of a cone when the base is given.\n    '''\n    return (1/3)*math.pi*r**2*h\n    \ndef mass_cube(l):\n    '''\n    Write a function to find the mass of a cube.\n    '''\n    return l*l*l\n    \ndef mass_cube_with_base(l,b):\n    '''\n    Write a function to find the mass of a cube when the base is given.\n    '''\n    return l*l*l-b\n    \ndef mass_sphere(r):\n    '''\n    Write a function to find the mass of a sphere.\n    '''\n    return 4/3*math.pi*r**3\n    \ndef mass_sphere_with_base(r,b):\n    '''\n    Write a function to find the mass of a sphere when the base is given.\n    '''\n    return 4/3*math.pi*r**3-b\n    \ndef mass_cylinder(r,h):\n    '''\n    Write a function to find the mass of a cylinder.\n    '''\n    return math.pi*r**2*h\n    \ndef mass_cylinder_with_base(r,h,b):\n    '''\n    Write a function to find the mass of a cylinder when the base is given.\n    '''\n    return math.pi*r**2*h-b\n    \ndef mass_cone(r,h):\n    '''\n    Write a function to find the mass of a cone.\n    '''\n    return (1/3)*math.pi*r**2*h\n    \ndef mass_cone_with_base(r,h,b):\n    '''\n    Write a function to find the mass of a cone when the base is given.\n    '''\n    return (1/3)*math.pi*r**2*h-b\n    \ndef mass_cone_with_base(r,h):\n    '''\n    Write a function to find the mass of a cone when the base is given.\n    '''\n    return (1/3)*math.pi*r**2*h\n    \ndef mass_sphere(r):\n    '''\n    Write a function to find the mass of a sphere.\n    '''\n    return 4/3*math.pi*r**3\n    \ndef mass_sphere_with_base(r,b):\n    '''\n    Write a function to find the mass of a sphere when the base is given.\n    '''\n    return 4/3*math.pi*r**3-b\n    \ndef mass_cylinder(r,h):\n    '''\n    Write a function to find the mass of a cylinder.\n    '''\n    return math.pi*r**2*h\n    \ndef mass_cylinder_with_base(r,h,b):\n    '''\n    Write a function to find the mass of a cylinder when the base is given.\n    '''\n    return math.pi*r**2*h-b\n    \ndef mass_cone(r,h):\n    '''\n    Write a function to find the mass of a cone.\n    '''\n    return (1/3)*math.pi*r**2*h\n    \ndef mass_cone_with_base(r,h,b):\n    '''\n    Write a function to find the mass of a cone when the base is given.\n    '''\n    return (1/3)*math.pi*r**2*h-b\n    \ndef mass_cone_with_base(r,h):\n    '''\n    Write a function to find the mass of a cone when the base is given.\n    '''\n    return (1/3)*math.pi*r**2*h\n    \ndef mass_sphere(r):\n    '''\n    Write a function to find the mass of a sphere.\n    '''\n    return 4/3*math.pi*r**3\n    \ndef mass_sphere_with_base(r,b):\n    '''\n    Write a function to find the mass of a sphere when the base is given.\n    '''\n    return 4/3*math.pi*r**3-b\n    \ndef mass_cylinder(r,h):\n    '''\n    Write a function to find the mass of a cylinder.\n    '''\n    return math.pi*r**2*h\n    \ndef mass_cylinder_with_base(r,h,b):\n    '''\n    Write a function to find the mass of a cylinder when the base is given.\n    '''\n    return math.pi*r**2*h-b\n    \ndef mass_cone(r,h):\n    '''\n    Write a function to find the mass of a cone.\n    '''\n    return (1/3)*math.pi*r**2*h\n    \ndef mass_cone_with_base(r,h,b):\n    '''\n    Write a function to find the mass of a cone when the base is given.\n    '''\n    return (1/3)*math.pi*r**2*h-b\n    \ndef mass_cone_with_base(r,h):\n    '''\n    Write a function to find the mass of a cone when the base is given.\n    '''\n    return (1/3)*math.pi*r**2*h\n    \ndef mass_sphere(r):\n    '''\n    Write a function to find the mas"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    from math import pi\n    \n    v = (1/3)*(math.pi)*(r**2)*h\n    return v\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    from math import pi\n    \n    v = (1/3)*(math.pi)*(r**2)*h\n    return v\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    from math import pi\n    \n    v = (4/3)*(math.pi)*(r**3)\n    return v\n    \ndef volume_pyramid(b,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    from math import pi\n    \n    v = (1/3)*(math.pi)*(b**2)*h\n    return v\n    \ndef volume_ellipsoid(a,b,c):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    from math import pi\n    \n    v = (4/3)*(math.pi)*(a**3)*b*c\n    return v\n    \ndef volume_torus(a,b):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    from math import pi\n    \n    v = (4/3)*(math.pi)*(a**2)*b*2\n    return v\n    \ndef volume_parallelepiped(a,b,c):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    from math import pi\n    \n    v = (1/3)*(pi)*(a**2)*b*c\n    return v\n    \ndef volume_rectangularprism(a,b):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    from math import pi\n    \n    v = (1/3)*(a*b)\n    return v\n    \ndef volume_conicalsurface(r,h,a,b):\n    '''\n    Write a function to find the volume of a conical surface.\n    '''\n    from math import pi\n    \n    v = (1/3)*(math.pi)*(r**2)*h*(b/a)\n    return v\n    \ndef volume_sphericalsurface(r,a,b,c):\n    '''\n    Write a function to find the volume of a spherical surface.\n    '''\n    from math import pi\n    \n    v = (4/3)*(math.pi)*(r**2)*(a*b*c)\n    return v\n    \ndef volume_miscellaneous(r,h,a,b,c):\n    '''\n    Write a function to find the volume of miscellaneous geometrical\n    objects such as cylinders, cones, spheres, and pyramids.\n    '''\n    from math import pi\n    \n    v = (1/3)*(math.pi)*(r**2)*h*(a*b*c)\n    return v\n    \ndef volume_union(r1,r2,h1,h2):\n    '''\n    Write a function to find the volume of a union of two geometric\n    objects such as cylindrical and conical surfaces.\n    '''\n    from math import pi\n    \n    v = (1/3)*(math.pi)*(r1**2)*(r2**2)*(h1+h2)\n    return v\n    \ndef volume_intersection(r1,r2,h1,h2):\n    '''\n    Write a function to find the volume of an intersection of two\n    geometric objects such as cylindrical and conical surfaces.\n    '''\n    from math import pi\n    \n    v = (1/3)*(math.pi)*(r1**2)*(r2**2)*(h1*h2)\n    return v\n    \ndef volume_difference(r1,r2,h1,h2):\n    '''\n    Write a function to find the volume of a difference of two geometric\n    objects such as cylindrical and conical surfaces.\n    '''\n    from math import pi\n    \n    v = (1/3)*(math.pi)*(r1**2)*(r2**2)*(h1-h2)\n    return v\n    \ndef volume_ratio(r1,r2,h1,h2):\n    '''\n    Write a function to find the volume of a ratio of two geometric\n    objects such as cylindrical and conical surfaces.\n    '''\n    from math import pi\n    \n    v = (1/3)*(math.pi)*(r1**2)*(r2**2)*(h1/h2)\n    return v\n    \ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    from math import pi\n    \n    v = (1/2)*(math.pi)*(r**2)*h\n    return v\n    \ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    from math import pi\n    \n    v = (1/2)*(math.pi)*(r**2)*h\n    return v\n    \ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    from math import pi\n    \n    v = (4/3)*(math.pi)*(r**3)\n    return v\n    \ndef surface_area_pyramid(b,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    from math import pi\n    \n    v = (1/2)*(math.pi)*(b**2)*h\n    return v\n    \ndef surface_area_ellipsoid(a,b,c):\n    '''\n    Write a function to find the surface area of an ellipsoid.\n    '''\n    from math import pi\n    \n    v = (4/3)*(math.pi)*(a**2)*b*c\n    return v\n    \ndef surface_area_torus(a,b):\n    '''\n    Write a function to find the surface area of a torus.\n    '''\n    from math import pi\n    \n    v = (4/3)*(math.pi)*(a**2)*b*2\n    return v\n    \ndef surface_area_parallelepiped(a,b,c):\n    '''\n    Write a function to find the surface area of a parallelepiped.\n    '''\n    from math import pi\n    \n    v = (2/3)*(pi)*(a**2)*b*c\n    return v\n    \ndef surface_area_rectangularprism(a,b):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    from math import pi\n    \n    v = (2/3)*(pi)*(a**2)*b\n    return v\n    \ndef surface_area_conicalsurface(r,h,a,b):\n    '''\n    Write a function to find the surface area of a conical surface.\n    '''\n    from math import pi\n    \n    v = (2/3)*(pi)*(r**2)*h*(b/a)\n    return v\n    \ndef surface_area_sphericalsurface(r,a,b,c):\n    '''\n    Write a function to find the surface area of a spherical surface.\n    '''\n    from math import pi\n    \n    v = (4/3)*(math.pi)*(r**2)*(a*b*c)\n    return v\n    \ndef surface_area_miscellaneous(r,h,a,b,c):\n    '''\n    Write a function to find the surface area of miscellaneous geometrical\n    objects such as cylinders, cones, spheres, and pyramids.\n    '''\n    from math import pi\n    \n    v = (2/3)*(pi)*(r**2)*h*(a*b*c)\n    return v\n    \ndef surface_area_union(r1,"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n<2:\n        return n\n    else:\n        return highest_Power_of_2(n/2)\n    \n    \ndef all_powers_of_2(n):\n    '''\n    Write a python function to return a list of all the powers of 2 that are less than or equal to n.\n    '''\n    if n<2:\n        return [n]\n    else:\n        return [2**i for i in range(highest_Power_of_2(n)+1)]\n    \n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest = 1\n    while highest <= n:\n        highest = highest * 2\n    return highest / 2\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    p = 0\n    while(n>=2**p):\n        p += 1\n    return p - 1\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        return highest_Power_of_2(n//2)\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 0\n    while 2**i <= n:\n        i = i + 1\n    return 2**(i-1)\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    counter = 0\n    while 2**counter <= n:\n        counter = counter + 1\n    return counter - 1\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    pow = 1\n    while pow <= n:\n        pow <<= 1\n    return pow\ndef find_Divisors(n):\n    '''\n    Write a python function to find the number of divisors of n\n    '''\n    divisors = []\n    for i in range(1, int(n**0.5)):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n    divisors.sort()\n    return divisors\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    m = n-1\n    while m > 0:\n        if n & m == 0:\n            return m\n        m >>= 1\n    return 1\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    num = 1\n    while(num <= n):\n        num = num * 2\n    return num / 2\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    m = 0\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        m = int(math.log2(n))\n        if 2**(m+1) <= n:\n            return 2**(m+1)\n        else:\n            return 2**m\n    \ndef factorization(n):\n    '''\n    Write a python function to factor a number n into prime numbers.\n    '''\n    res = []\n    i = 2\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            res.append(i)\n    if n > 1:\n        res.append(n)\n    return res\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    a = 0\n    b = 1\n    for i in range(2, n+1):\n        a, b = b, (a + b) % 1e9\n    return a\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    lucas_numbers = [0] * (n+1)\n    lucas_numbers[0] = 2\n    lucas_numbers[1] = 1\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_list = [2,1]\n    for i in range(n-2):\n        lucas_list.append(lucas_list[-2] + lucas_list[-1])\n    return lucas_list[n-1]\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    L = [1,2]\n    for i in xrange(2, n+1):\n        L.append((L[-1]**2 - 2*L[-2]) % m)\n    return L[n]\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    prev, curr = 0, 1\n    for i in range(n-1):\n        prev, curr = curr, prev + curr\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_seq = [2, 1]\n    for i in range(2, n): \n        lucas_seq.append(lucas_seq[-1] + lucas_seq[-2])\n    return lucas_seq[n - 1]\n    \ndef find_sum_of_squares(n): \n    '''\n    Write a function to find the sum of the squares of the first n numbers.\n    '''\n    s = 0\n    for i in range(n): \n        s += (i * i)\n    return s\n    \ndef find_sum_of_cubes(n): \n    '''\n    Write a function to find the sum of the cubes of the first n numbers.\n    '''\n    s = 0\n    for i in range(n): \n        s += (i * i * i)\n    return s\n    \ndef find_sum_of_cubed_squares(n): \n    '''\n    Write a function to find the sum of the cubes of the first n numbers.\n    '''\n    s = 0\n    for i in range(n): \n        s += (i * i * i)\n    return s\n    \ndef find_sum_of_n_numbers(n): \n    '''\n    Write a function to find the sum of the n numbers.\n    '''\n    return n * (n + 1) / 2\n    \ndef find_sum_of_multiples_of_three_or_five(n): \n    '''\n    Write a function to find the sum of the first n multiples of 3 or 5.\n    '''\n    s = 0\n    for i in range(n): \n        if i % 3 == 0: \n            s += i\n        elif i % 5 == 0: \n            s += i\n    return s\n    \ndef find_sum_of_multiples_of_three_and_five(n): \n    '''\n    Write a function to find the sum of the first n multiples of 3 and 5.\n    '''\n    s = 0\n    for i in range(n): \n        if i % 3 == 0 and i % 5 == 0: \n            s += i\n    return s\n    \ndef find_sum_of_multiples_of_three_and_five_or_six(n): \n    '''\n    Write a function to find the sum of the first n multiples of 3 and 5.\n    '''\n    s = 0\n    for i in range(n): \n        if i % 3 == 0 or i % 5 == 0: \n            s += i\n    return s\n    \ndef find_sum_of_multiples_of_three_and_five_or_six_or_seven(n): \n    '''\n    Write a function to find the sum of the first n multiples of 3 and 5.\n    '''\n    s = 0\n    for i in range(n): \n        if i % 3 == 0 or i % 5 == 0 or i % 7 == 0: \n            s += i\n    return s\n    \ndef find_sum_of_multiples_of_three_and_five_or_six_and_seven(n): \n    '''\n    Write a function to find the sum of the first n multiples of 3 and 5.\n    '''\n    s = 0\n    for i in range(n): \n        if i % 3 == 0 or i % 5 == 0 or i % 7 == 0: \n            s += i\n    return s\n    \ndef find_sum_of_multiples_of_three_and_five_and_seven(n): \n    '''\n    Write a function to find the sum of the first n multiples of 3 and 5.\n    '''\n    s = 0\n    for i in range(n): \n        if i % 3 == 0 and i % 5 == 0 and i % 7 == 0: \n            s += i\n    return s\n    \ndef find_sum_of_multiples_of_three_and_five_and_seven_or_eight(n): \n    '''\n    Write a function to find the sum of the first n multiples of 3 and 5.\n    '''\n    s = 0\n    for i in range(n): \n        if i % 3 == 0 or i % 5 == 0 or i % 7 == 0 or i % 8 == 0: \n            s += i\n    return s\n    \ndef find_sum_of_multiples_of_three_and_five_and_seven_or_eight_or_nine(n): \n    '''\n    Write a function to find the sum of the first n multiples of 3 and 5.\n    '''\n    s = 0\n    for i in range(n): \n        if i % 3 == 0 or i % 5 == 0 or i % 7 == 0 or i % 8 == 0 or i % 9 == 0: \n            s += i\n    return s\n    \ndef find_sum_of_multiples_of_three_and_five_and_seven_or_eight_or_nine_or_ten(n): \n    '''\n    Write a function to find the sum of the first n multiples of 3 and 5.\n    '''\n    s = 0\n    for i in range(n): \n        if i % 3 == 0 or i % 5 == 0 or i % 7 == 0 or i % 8 == 0 or i % 9 == 0 or i % 10 == 0: \n            s += i\n    return s\n    \ndef find_sum_of_multiples_of_three_and_five_and_seven_or_eight_and_nine(n): \n    '''\n    Write a function to find the sum of the first n multiples of 3 and 5.\n    '''\n    s = 0\n    for i in range(n): \n        if i % 3 == 0 and i % 5 == 0 and i % 7 == 0 and i % 9 == 0: \n            s += i\n    return s\n    \ndef find_sum_of_multiples_of_three_and_five_and_seven_or_eight_and_nine_or_ten(n): \n    '''\n    Write a function to find the sum of the first n multiples of 3 and 5.\n    '''\n    s = 0\n    for i in range(n): \n        if i % 3 == 0 and i % 5 == 0 and i % 7 == 0 and i % 9 == 0 or i % 10 == 0: \n            s += i\n    return s\n    \ndef find_sum_of_multiples_of_three_and_five_and_seven_or_eight_and_nine_or_ten_or_eleven(n): \n    '''\n    Write a function to find the sum of the first n multiples of 3 and 5.\n    '''\n    s = 0\n    for i in range(n): \n        if i % 3 == 0 and i % 5 == 0 and i % 7 == 0 and i % 9 == 0 or i % 10 == 0 or i % 11 == 0: \n            s += i\n    return s\n    \ndef find_sum_of_multiples_of_three_and_five_and_seven_or_eight_and_nine_and_ten(n): \n    '''\n    Write a function to find the sum of the first n multiples of 3 and 5.\n    '''\n    s = 0\n    for i in range(n): \n        if i % 3 == 0 and i % 5 == 0 and i % 7 == 0 and i % 9 == 0 and i % 10 == 0: \n            s += i\n    return s\n    \ndef find_sum_of_multiples_of_three_and_five_and_seven_or_eight_and_nine_and_ten_or_eleven(n): \n    '''\n    Write a function to find the sum of the first n multiples of 3 and 5.\n    '''\n    s = 0\n    for i in range(n): \n        if i % 3 == 0 and i % 5 == 0 and i % 7 == 0 and i % 9 == 0 and i % 10 == 0 or i % 11 == 0: \n            s += i\n    return s\n    \ndef find_sum_of_multiples_of_three_and_five_and_seven_or_eight_and_nine_and_ten_or_eleven_or_twelve(n): \n    '''\n    Write a function to find the sum of the first n mult"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    def find_p_root(a, p):\n        # Newton method\n        x = (p + 1) / 2\n        while True:\n            if pow(x, p, a) == 1:\n                return x\n            x = (x + a / x) / 2\n    \n    def lucas_index(n, p):\n        # Lucas index\n        return (n * find_p_root(7, p) - 1) / find_p_root(5, p)\n    \n    if n == 1:\n        return 2\n    return lucas_index(n, 13)\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for index, item in enumerate(list_):\n        list_[index] = string.format(item)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = [format(i, string) for i in list_]\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] += string\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for index, value in enumerate(list_):\n        list_[index] = value.format(string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string % i for i in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string % x for x in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(el) for el in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for element in list_:\n        result.append(string % element)\n    return result\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_string = string.format(*list_)\n    print(formatted_string)\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = {l2[i]:l3[i]}\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {k: {k1:v1, k2:v2} for k, v, v1, v2 in zip(l1, l2, l3, l3[1:])}\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {l1[i]: {l2[j]: l3[k]} for i in range(len(l1)) for j in range(len(l2)) for k in range(len(l3))}\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = {l2[i]:l3[i]}\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    new_dict = {}\n    new_dict['list1'] = l1\n    new_dict['list2'] = l2\n    new_dict['list3'] = l3\n    return new_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict1 = {}\n    for x in l1:\n        if l2.count(x) == 1:\n            dict1[x] = l2[l1.index(x)]\n        else:\n            dict1[x] = convert_list_dictionary(l1, l2, l3)\n    return dict1\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {l1[i]: {l2[i]: l3[i]} for i in range(len(l1))}\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for i, j in zip(l1, l2):\n        d1[i] = j\n    for i in l3:\n        d1[i] = {'id':i}\n    return d1\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return [{l1[i]:l2[i], l3[i]:l3[i]} for i in range(len(l1))]\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1)!= len(l2) or len(l2)!= len(l3):\n        raise ValueError('The lengths of three lists are not equal')\n    return [{l1[i]:l2[i], l3[i]: l3[i]} for i in range(len(l1))]"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return n*(n+1)/2 if n % 2 == 0 else max(n*(n+1)/2, n*(n+1)*3/4)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    return (n / 2) + (n / 3) + (n / 4) + (n / 5)\n    \n    \nprint (get_max_sum(1000))"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n)\n    else:\n        return max(get_max_sum(n - 1) + get_max_sum(n - 2) + get_max_sum(n - 3) + get_max_sum(n - 4), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum = max(sum, (get_max_sum(i/2) + get_max_sum(i/3) + get_max_sum(i/4) + get_max_sum(i/5)))\n        else:\n            sum = max(sum, i)\n    return sum\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n/2),get_max_sum(n/3),get_max_sum(n/4),get_max_sum(n/5)) + n\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if (n == 1):\n        return 1\n    else:\n        if (n % 2 == 0):\n            return get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5)\n        else:\n            return max(get_max_sum(n / 2), get_max_sum(n / 3), get_max_sum(n / 4), get_max_sum(n / 5)) + n\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    n = int (n)\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5) + n, n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n    \n    \ndef get_min_sum (n):\n    '''\n    Write a function to find the minimum sum possible by using the given equation f(n) = min( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return min(get_min_sum(n/2) + get_min_sum(n/3) + get_min_sum(n/4) + get_min_sum(n/5), n)\n    \ndef get_sum_of_digits (n):\n    '''\n    Write a function to find the sum of digits of the given number.\n    '''\n    n = str(n)\n    n = [int(i) for i in n]\n    return sum(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # base case is f(1) = 1\n    if n <= 1:\n        return 1\n    else:\n        return max (get_max_sum (n/2) + get_max_sum (n/3) + get_max_sum (n/4) + get_max_sum (n/5), n)\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max([len(i) for i in input_list])\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = [i]\n        elif len(i) == max_len:\n            max_list.append(i)\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for each in input_list:\n        if max_length < len(each):\n            max_length = len(each)\n            max_list = [each]\n        elif max_length == len(each):\n            max_list.append(each)\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    maximum_length = len(input_list[0])\n    for l in input_list:\n        if len(l) > maximum_length:\n            maximum_length = len(l)\n    return maximum_length\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list)==0:\n        return None\n    maximum_length=1\n    max_length_list=input_list[0]\n    for i in range(1,len(input_list)):\n        if len(input_list[i])>maximum_length:\n            maximum_length=len(input_list[i])\n            max_length_list=input_list[i]\n        elif len(input_list[i])==maximum_length:\n            max_length_list=max_length_list+', '+input_list[i]\n    return max_length_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # first check if input list is empty or not\n    if len(input_list) == 0:\n        return None\n    # set the max_length to zero\n    max_length = 0\n    # set the index to zero\n    index = 0\n    # loop over the list\n    while index < len(input_list):\n        # check if the length of the list is greater than max_length\n        if len(input_list[index]) > max_length:\n            # set the max_length to the new length\n            max_length = len(input_list[index])\n        # increment the index\n        index += 1\n    # return the max_length\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return 0\n    max_len = 1\n    max_len_list = [input_list[0]]\n    for i in range(1,len(input_list)):\n        if len(input_list[i]) == len(input_list[i-1]):\n            max_len_list.append(input_list[i])\n        else:\n            if len(max_len_list) < max_len:\n                max_len = len(max_len_list)\n                max_len_list = [input_list[i]]\n            else:\n                max_len_list = [input_list[i]]\n    if len(max_len_list) < max_len:\n        max_len = len(max_len_list)\n    return max_len\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    max_len_list = [input_list[0]]\n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_len:\n            max_len = len(input_list[i])\n            max_len_list = [input_list[i]]\n        elif len(input_list[i]) == max_len:\n            max_len_list.append(input_list[i])\n    return max_len_list\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for each_list in input_list:\n        max_len = max(max_len, len(each_list))\n    return max_len\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False\n    \ndef check_palindrome(test_str):\n    '''\n    Write a function to check if given string is a palindrome.\n    '''\n    return test_str == test_str[::-1]\n    \ndef check_anagram(test_str1, test_str2):\n    '''\n    Write a function to check if two given strings are anagram of each other.\n    '''\n    return sorted(test_str1) == sorted(test_str2)\n    \ndef check_rotation(test_str1, test_str2):\n    '''\n    Write a function to check if given two strings are rotations of each other.\n    '''\n    if len(test_str1)!= len(test_str2):\n        return False\n    return test_str1 in test_str2 + test_str2\n    \ndef check_permutation(test_str1, test_str2):\n    '''\n    Write a function to check if two given strings are permutations of each other.\n    '''\n    return sorted(test_str1) == sorted(test_str2)\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    num_tup = len(test_tup)\n    return num_tup == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    \n    return len(test_tup) == len(set(test_tup))\n    \n    \ndef test_check_distinct():\n    '''\n    Here is a list of tuples, check if there are duplicates in each of them.\n    '''\n    \n    test_list = [\n    ((0, 1, 2, 3, 4, 5), True),\n    ((0, 1, 2, 3, 1, 5), True),\n    ((0, 1, 2, 3, 4, 4), False),\n    ((0, 1, 2, 3, 1, 5), False),\n    ((1, 2, 3, 4, 5, 6), False),\n    ]\n    \n    for tup in test_list:\n        assert check_distinct(tup[0]) == tup[1]\n        \n    print(\"Passed!\")\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Base case\n    if len(test_tup) == 1:\n        return True\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) == 1:\n            return i\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    repeated_characters = set()\n    for i in range(len(str1)):\n        if str1[i] in repeated_characters:\n            pass\n        else:\n            repeated_characters.add(str1[i])\n            break\n    return str1[i]\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char not in char_dict:\n            char_dict[char] = 1\n        else:\n            char_dict[char] += 1\n    for char in str1:\n        if char_dict[char] == 1:\n            return char\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    for c in str1:\n        if c not in char_dict:\n            char_dict[c] = 1\n        else:\n            char_dict[c] += 1\n    for c in str1:\n        if char_dict[c] == 1:\n            return c\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    d = dict()\n    for s in str1:\n        if s not in d:\n            d[s] = 1\n        else:\n            d[s] += 1\n    for i in range(len(str1)):\n        if d[str1[i]] == 1:\n            return str1[i]\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    for i in range(len(str1)):\n        if char_dict[str1[i]] == 1:\n            return str1[i]\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i)==1:\n            return i\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char) == 1:\n            return char\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for each in str1:\n        if str1.count(each) == 1:\n            return each\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    for i in range(len(str1)):\n        if str1[i] in char_dict:\n            char_dict[str1[i]] += 1\n        else:\n            char_dict[str1[i]] = 1\n    for i in range(len(str1)):\n        if char_dict[str1[i]] == 1:\n            return str1[i]\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex, string) is not None\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    global regex\n    if re.match(regex, string): \n        return 'true'\n    else: \n        return 'false'\n        \n    \nprint(check_char('abc'))\nprint(check_char('ab'))\nprint(check_char('ba'))"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(re.match(regex,string)):\n        return True\n    return False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.search(regex, string))\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    try:\n        return bool(re.match(regex, string))\n    except:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return \"String starts and ends with same character\"\n    return \"String does not start and end with same character\"\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string) \nprint check_char('abc')\nprint check_char('abcd')\nprint check_char('123abc')\nprint check_char('1234abc')\nprint check_char('abc')\nprint check_char('abcd')\nprint check_char('abce')\nprint check_char('1234')\nprint check_char('1234abcd')\nprint check_char('abcd')\nprint check_char('1234abcde')\nprint check_char('1234abcde')\nprint check_char('abcdef')\nprint check_char('abcdefg')\nprint check_char('abcdefgh')\nprint check_char('abcdefghi')\nprint check_char('abcdefghij')\nprint check_char('abcdefghijkl')\nprint check_char('abcdefghijklmn')\nprint check_char('abcdefghijklmnop')\nprint check_char('abcdefghijklmnopq')\nprint check_char('abcdefghijklmnopqr')\nprint check_char('abcdefghijklmnopqrs')\nprint check_char('abcdefghijklmnopqrst')\nprint check_char('abcdefghijklmnopqrstuv')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check_char('abcdefghijklmnopqrstuvwxyz')\nprint check"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex, string)) \n    \ndef check_same_letter(string): \n    '''\n    Write a function to check whether the given string has the same number of characters as another string.\n    '''\n    return bool(re.match(regex, string)) and len(string) == len(re.sub(regex, '', string))\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    list = [a,b,c]\n    list.sort()\n    if a>b and a>c:\n        return list[1]\n    elif b>c and b>a:\n        return list[2]\n    elif c>a and c>b:\n        return list[0]\n    else:\n        return None\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a <= b <= c or c <= b <= a:\n        return b\n    elif b <= a <= c or c <= a <= b:\n        return a\n    else:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    all_numbers = [a,b,c]\n    all_numbers.sort()\n    return all_numbers[1]\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    #if a<=b and a<=c:\n    #    print a\n    #    return a\n    #elif b<=a and b<=c:\n    #    print b\n    #    return b\n    #else:\n    #    print c\n    #    return c\n    a,b,c = sorted([a,b,c])\n    if a==b or a==c:\n        return a\n    elif b==c:\n        return b\n    else:\n        return c\n        \n        \ndef run_median_tests():\n    print \"testing median\"\n    print median_numbers(-1,0,1)\n    print median_numbers(2,3,5)\n    print median_numbers(2,5,3)\n    print median_numbers(1,1,1)\n    print median_numbers(0,1,2)\n    print median_numbers(0,2,1)\n    print median_numbers(2,1,0)\n    print median_numbers(-5,-5,-5)\n    print median_numbers(2,5,0)\n    print median_numbers(0,0,0)\n    print median_numbers(3,5,3)\n    print median_numbers(5,3,5)\n    print median_numbers(5,5,5)\n    print median_numbers(5,5,5)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1,1)\n    print median_numbers(1,1"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a,b,c = sorted([a,b,c])\n    if a<b and a<c:\n        return a\n    if b<c and b<a:\n        return b\n    return c\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if a<c:\n            return a\n        elif c>b:\n            return b\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        elif c>a:\n            return c\n        else:\n            return a\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    x = a + b + c\n    x.sort()\n    return x[2]\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b:\n        if b < c:\n            return b\n        elif a < c:\n            return a\n        else:\n            return c\n    elif a > b:\n        if a < c:\n            return a\n        elif b > c:\n            return c\n        else:\n            return b\n    else:\n        return a\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b<c or c<b<a:\n        return b\n    elif b<a<c or c<a<b:\n        return a\n    else:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    import statistics\n    list1 = [a,b,c]\n    list1.sort()\n    return statistics.median(list1)\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total = total + sum(list(map(int,str(num))))\n    return total\n    \ndef factorial(n):\n    '''\n    Write a function that takes an integer n and returns the n-th factorial.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n    \ndef find_outlier(integers):\n    '''\n    Write a function that takes a list of integers and returns the integer which is an outlier. An outlier is an integer that is either the minimum or maximum in the list.\n    '''\n    if len(integers) == 1:\n        return integers[0]\n    elif integers[0] > integers[1]:\n        return integers[1]\n    else:\n        return integers[0]\n        \ndef big_diff(nums):\n    '''\n    Given a list of integers, return the difference between the largest and smallest integers in the array.\n    '''\n    return max(nums) - min(nums)\n    \ndef find_same_number(nums):\n    '''\n    Given a list of integers with duplicate numbers, \n    find all duplicate numbers and return a list of duplicates. \n    \n    For example,\n    Given [4, 3, 2, 7, 8, 2, 3, 1], return [2, 3].\n    '''\n    same_nums = []\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            if nums[i] == nums[j]:\n                same_nums.append(nums[i])\n    return same_nums\n    \ndef intersection(nums1, nums2):\n    '''\n    Given two arrays, write a function to compute their intersection.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    else:\n        inter = []\n        for i in nums1:\n            if i in nums2:\n                inter.append(i)\n        return inter\n        \ndef rotate(matrix):\n    '''\n    Given a matrix of m x n elements (m rows, n columns), \n    rotate the matrix by 90 degrees.\n    '''\n    n = len(matrix[0])\n    for i in range(n//2):\n        for j in range(i, n-i-1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[n-1-j][i]\n            matrix[n-1-j][i] = matrix[n-1-i][n-1-j]\n            matrix[n-1-i][n-1-j] = matrix[j][n-1-i]\n            matrix[j][n-1-i] = temp\n            \ndef remove_duplicate(nums):\n    '''\n    Given an array of integers, remove the duplicates in place and return the new length.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        nums.sort()\n        for i in range(len(nums)-1,0,-1):\n            if nums[i] == nums[i-1]:\n                nums.pop(i)\n        return len(nums)\n        \ndef single_number(nums):\n    '''\n    Given a list of integers, every element appears three times except for one. Find that single one.\n    '''\n    ans = 0\n    for num in nums:\n        ans = ans ^ num\n    return ans\n    \ndef majority_element(nums):\n    '''\n    Given a list of numbers, find the majority element. \n    The majority element is the element that appears more than \u230a n/2 \u230b times.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        half = len(nums)//2\n        return majority_element(nums[:half]) if sum(nums[:half]) > sum(nums[half:]) else majority_element(nums[half:])\n        \ndef three_sum(nums):\n    '''\n    Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.\n    '''\n    nums.sort()\n    ans = []\n    for i in range(len(nums)-2):\n        a,b,c = i, i+1, len(nums)-1\n        while a < b:\n            if nums[a]+nums[b]+nums[c] == 0:\n                ans.append([nums[a],nums[b],nums[c]])\n                while a < b and nums[a] == nums[a+1]:\n                    a += 1\n                while b < c and nums[b] == nums[b-1]:\n                    b += 1\n                a += 1\n                b -= 1\n                c -= 1\n            elif nums[a]+nums[b]+nums[c] < 0:\n                a += 1\n            else:\n                b -= 1\n    return ans\n    \ndef rotate_matrix(matrix):\n    '''\n    Given a matrix of m x n elements (m rows, n columns), \n    rotate the matrix by 90 degrees.\n    '''\n    for i in range(len(matrix)//2):\n        for j in range(i, len(matrix[0])-1-i):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[len(matrix)-1-j][i]\n            matrix[len(matrix)-1-j][i] = matrix[len(matrix)-1-i][len(matrix)-1-j]\n            matrix[len(matrix)-1-i][len(matrix)-1-j] = matrix[j][len(matrix)-1-i]\n            matrix[j][len(matrix)-1-i] = temp\n            \ndef longest_common_prefix(strs):\n    '''\n    Write a function to find the longest common prefix string amongst an array of strings.\n    '''\n    if len(strs) == 0:\n        return ''\n    else:\n        i = 0\n        while i < len(strs[0]):\n            for string in strs:\n                if string[i]!= strs[0][i]:\n                    return strs[0][:i]\n            i += 1\n        return strs[0]\n        \ndef spiral_order(matrix):\n    '''\n    Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.\n    '''\n    if len(matrix) == 0:\n        return []\n    else:\n        top,bottom,left,right = 0,len(matrix)-1,0,len(matrix[0])-1\n        ans = []\n        while top <= bottom and left <= right:\n            for i in range(left,right+1):\n                ans.append(matrix[top][i])\n            top += 1\n            if top > bottom:\n                break\n            for i in range(top,bottom+1):\n                ans.append(matrix[i][right])\n            right -= 1\n            if right < left:\n                break\n            for i in range(right,left-1,-1):\n                ans.append(matrix[bottom][i])\n            bottom -= 1\n            if bottom < top:\n                break\n            for i in range(bottom,top-1,-1):\n                ans.append(matrix[i][left])\n            left += 1\n            if left > right:\n                break\n        return ans\n        \ndef plus_one(digits):\n    '''\n    Given a non-empty array of digits representing a non-negative integer, plus one to the integer.\n    '''\n    if len(digits) == 1 and digits[0] == 9:\n        return [1,0]\n    else:\n        for i in range(len(digits)-1,-1,-1):\n            if digits[i] == 9:\n                digits[i] = 0\n            else:\n                digits["
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum(int(x) for x in str(n)) for n in nums]\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        result += sum(int(i) for i in str(num))\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        num = str(num)\n        total = total + sum(int(d) for d in num)\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = []\n    for i in nums:\n        sum_of_digits.append(sum(int(digit) for digit in str(i)))\n    return sum_of_digits\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digits = 0\n    for i in nums:\n        digits += sum(list(map(int, str(i))))\n    return digits\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(x) for x in nums)\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        result.append(sum(int(digit) for digit in str(num)))\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(int, str(nums)))\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    total = 0\n    for i in range(0, len(nums)):\n        num = nums[i]\n        while num > 0:\n            total = total + num % 10\n            num = num / 10\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    x = test_tup1[0]\n    y = test_tup2[0]\n    return (x ^ y, )\n    \nprint bitwise_xor((10, 10, 20), (20, 10, 20))\nprint bitwise_xor((1, 1, 1), (1, 1, 1))\nprint bitwise_xor((10, 10, 20), (20, 10, 20))\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    #Tuple element-wise xor\n    return tuple(a^b for a,b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([tup1[i] ^ tup2[i] for i in range(len(tup1))])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if type(test_tup1)!= tuple:\n        raise Exception('test_tup1 must be a tuple.')\n    if type(test_tup2)!= tuple:\n        raise Exception('test_tup2 must be a tuple.')\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception('test_tup1 and test_tup2 must be the same length.')\n    return tuple([a ^ b for a, b in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    assert(type(test_tup1) == tuple)\n    assert(type(test_tup2) == tuple)\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    #print \"Tup1: \" + str(test_tup1)\n    #print \"Tup2: \" + str(test_tup2)\n    res = []\n    for i,j in zip(test_tup1, test_tup2):\n        #print \"i: \" + str(i) + \" j: \" + str(j)\n        res.append(i ^ j)\n    #print \"Res: \" + str(res)\n    return res\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for tup in zip(test_tup1, test_tup2):\n        result.append( tuple(a ^ b for a, b in zip(*tup)) )\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # xor_out = tuple()\n    # xor_out = tuple(x ^ y for x,y in zip(test_tup1, test_tup2))\n    # return xor_out\n    return tuple(x ^ y for x,y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_dict = {}\n    for element in test_list:\n        test_dict[element] = test_list.count(element)\n    return len(test_dict.keys())\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    dict = {}\n    for i in test_list:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    return len(dict)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        freq_dict[item] = freq_dict.get(item,0) + 1\n    return len(freq_dict.keys())\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    res_list=[]\n    for i in test_list:\n        if i not in res_list:\n            res_list.append(i)\n    return len(res_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # a dict of tuples as key and a count as value\n    freq = {}\n    for x in test_list:\n        # key for the dict is a tuple\n        tup = tuple(x)\n        # increment the count of the tuple by 1\n        freq[tup] = freq.get(tup,0) + 1\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    if test_list==[]:\n        return None\n    test_list.sort()\n    previous=test_list[0]\n    temp_list=[]\n    for i in test_list:\n        if i!= previous:\n            temp_list.append(i)\n        previous=i\n    return len(temp_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list = sorted(test_list)\n    unique_list = []\n    count_list = []\n    \n    for i in range(len(test_list)):\n        if test_list[i] not in unique_list:\n            unique_list.append(test_list[i])\n            count_list.append(1)\n        else:\n            count_list[unique_list.index(test_list[i])] += 1\n    return unique_list, count_list\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    list_1 = {}\n    for x in test_list:\n        for y in x:\n            if y not in list_1:\n                list_1[y] = 1\n            else:\n                list_1[y] += 1\n    print list_1\n    return len(list_1.keys())\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    tup1_len = len(test_tup1)\n    tup2_len = len(test_tup2)\n    new_tup = ()\n    \n    if tup1_len < tup2_len:\n        for i in range(0, tup2_len - tup1_len):\n            new_tup += ((),)\n    elif tup1_len > tup2_len:\n        for i in range(0, tup1_len - tup2_len):\n            new_tup += ((),)\n    else:\n        for i in range(0, tup1_len):\n            new_tup += (test_tup1[i] + test_tup2[i],)\n    \n    return new_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        return None\n    if len(test_tup1) == 0 or len(test_tup2) == 0:\n        return None\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    res = []\n    for i in range(len(test_tup1)):\n        res.append(test_tup1[i] + test_tup2[i])\n    return tuple(res)\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(x+y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = tuple(list(test_tup1) + list(test_tup2))\n    return new_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError(\"Both arguments should be tuples\")\n    return tuple([x+y for x,y in zip(test_tup1,test_tup2)])\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1) == 1:\n        return tuple([test_tup1[0] + test_tup2[0]])\n    else:\n        return tuple([test_tup1[0] + test_tup2[0], add_nested_tuples(test_tup1[1:], test_tup2[1:])])\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    # Fill this function here\n    \n    \n    \n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # TODO: Add code here\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = ()\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Incompatible tuples')\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] + test_tup2[i],)\n    return new_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(map(operator.add, test_tup1, test_tup2))\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>=b:\n        return b\n    else:\n        return a\n    \ndef median(list1,list2):\n    '''\n    Write a python function to find the median of two sorted lists.\n    '''\n    list1.extend(list2)\n    list1.sort()\n    if len(list1)%2==0:\n        mid1=(len(list1)-1)/2\n        mid2=(len(list1))/2\n        med=(list1[mid1]+list1[mid2])/2\n    else:\n        mid=(len(list1)+1)/2\n        med=list1[mid-1]\n    return med\n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>=b:\n        return a\n    else:\n        return b\n    \ndef mode(list1):\n    '''\n    Write a python function to find the mode of a list.\n    '''\n    data = Counter(list1)\n    data_list = data.most_common(1)\n    return data_list[0][0]\n    \ndef pearson_r(list1,list2):\n    '''\n    Write a python function to find the pearson correlation coefficient of two lists.\n    '''\n    mean_list1 = float(sum(list1))/len(list1)\n    mean_list2 = float(sum(list2))/len(list2)\n    \n    pairs = 0\n    sum_xy = 0\n    sum_x = 0\n    sum_y = 0\n    for i in range(len(list1)):\n        pairs += 1\n        sum_xy += (list1[i] - mean_list1)*(list2[i] - mean_list2)\n        sum_x += (list1[i] - mean_list1)**2\n        sum_y += (list2[i] - mean_list2)**2\n    \n    return (sum_xy - (mean_list1 * mean_list2) )/(math.sqrt(sum_x)*math.sqrt(sum_y))\n    \ndef spearman_r(list1,list2):\n    '''\n    Write a python function to find the spearman correlation coefficient of two lists.\n    '''\n    size = len(list1)\n    sum_up = 0\n    sum_x = 0\n    sum_y = 0\n    sum_x_square = 0\n    sum_y_square = 0\n    for i in range(size):\n        sum_up += (list1[i] - list2[i])**2\n        sum_x += list1[i]\n        sum_y += list2[i]\n        sum_x_square += (list1[i])**2\n        sum_y_square += (list2[i])**2\n    \n    x_y_product = sum_x * sum_y\n    up = sum_up - x_y_product\n    down = math.sqrt(sum_x_square) * math.sqrt(sum_y_square)\n    \n    return 1 - (up/down)\n    \ndef kendalltau(list1,list2):\n    '''\n    Write a python function to find the kendall tau coefficient of two lists.\n    '''\n    size = len(list1)\n    tau = 0\n    for i in range(size):\n        for j in range(size):\n            if list1[i] < list2[j]:\n                tau += 1\n    return tau/((size*(size-1))/2)\n    \ndef variance(list1):\n    '''\n    Write a python function to find the variance of a list.\n    '''\n    mean = sum(list1)/len(list1)\n    squared_diff = 0\n    for i in range(len(list1)):\n        squared_diff += (list1[i] - mean)**2\n    return squared_diff/len(list1)\n    \ndef mean(list1):\n    '''\n    Write a python function to find the mean of a list.\n    '''\n    mean = sum(list1)/len(list1)\n    return mean\n    \ndef covariance(list1,list2):\n    '''\n    Write a python function to find the covariance of two lists.\n    '''\n    mean_list1 = sum(list1)/len(list1)\n    mean_list2 = sum(list2)/len(list2)\n    size = len(list1)\n    sum_xy = 0\n    for i in range(size):\n        sum_xy += (list1[i] - mean_list1)*(list2[i] - mean_list2)\n    return sum_xy/(len(list1)-1)\n    \ndef correlation(list1,list2):\n    '''\n    Write a python function to find the correlation coefficient of two lists.\n    '''\n    size = len(list1)\n    x_mean = mean(list1)\n    y_mean = mean(list2)\n    x_diff = 0\n    y_diff = 0\n    sum_xy = 0\n    for i in range(size):\n        x_diff += (list1[i] - x_mean)**2\n        y_diff += (list2[i] - y_mean)**2\n        sum_xy += (list1[i] - x_mean)*(list2[i] - y_mean)\n    return sum_xy/(math.sqrt(x_diff)*math.sqrt(y_diff))\n    \ndef max(list1,list2):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>=b:\n        return a\n    else:\n        return b\n    \ndef min(list1,list2):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>=b:\n        return b\n    else:\n        return a\n    \ndef index(l,x):\n    '''\n    Write a python function to find the index of a number in a list.\n    '''\n    size = len(l)\n    for i in range(size):\n        if l[i] == x:\n            return i\n    return -1\n    \ndef index2(l,x):\n    '''\n    Write a python function to find the index of a number in a list.\n    '''\n    size = len(l)\n    for i in range(size):\n        if l[i] == x:\n            return i\n    return size\n    \ndef mode_list(list1,list2):\n    '''\n    Write a python function to find the mode of two lists.\n    '''\n    data = Counter(list1)\n    data_list = data.most_common(1)\n    mode1 = data_list[0][0]\n    mode2 = mode(list2)\n    return [mode1,mode2]\n    \ndef sort(list1,list2):\n    '''\n    Write a python function to sort two lists.\n    '''\n    list1.sort()\n    list2.sort()\n    return [list1,list2]\n    \ndef sort2(list1,list2):\n    '''\n    Write a python function to sort two lists.\n    '''\n    list1.sort()\n    list2.sort(reverse=True)\n    return [list1,list2]\n    \ndef nlargest(n,list1):\n    '''\n    Write a python function to find the n largest elements in a list.\n    '''\n    size = len(list1)\n    max_list = []\n    for i in range(size):\n        max_list.append(list1[i])\n        if len(max_list) > n:\n            max_list.pop(0)\n    return max_list\n    \ndef nsmallest(n,list1):\n    '''\n    Write a python function to find the n smallest elements in a list.\n    '''\n    size = len(list1)\n    min_list = []\n    for i in range(size):\n        min_list.append(list1[i])\n        if len(min_list) > n:\n            min_list.pop(0)\n    return min_list\n    \ndef nlargest2(n,list1):\n    '"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n    "
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \nprint(minimum(2,1))\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n    \ndef count(a):\n    '''\n    Write a python function to count the number of lines in a text file.\n    '''\n    i = 0\n    for line in a:\n        i += 1\n    return i\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex \n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for tup in tuplex:\n        if tup == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for tup in tuplex:\n        if tup1 == tup:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for t in tuplex:\n        if t==tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex.count(tuple1) > 0:\n        print tuple1,\"is present in the tuple\"\n    else:\n        print tuple1,\"is not present in the tuple\"\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for t in tuplex: \n        if t[0] == tuple1[0] and t[1] == tuple1[1]: \n            return True \n    return False \n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = bin(x)\n    if x[-1] == \"1\":\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = x + 1\n    parity = 0\n    while(x):\n        parity = parity + x%2\n        x = x // 2\n    return (parity)\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'odd' if (x % 2!= 0) else 'even'\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n    \nif __name__ == '__main__':\n    print(find_Parity(int(input('Enter a number: '))))"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    cnt = 0\n    for i in range(1,x+1):\n        if x%i == 0:\n            cnt+=1\n    if cnt%2 == 0:\n        print(\"Parity is even\")\n    else:\n        print(\"Parity is odd\")\n        "
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x == 0:\n        return 1\n    if x & 1 == 1:\n        return 0\n    return find_Parity(x>>1)\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = int(x)\n    a = 0\n    while (x>0):\n        a = a + x%2\n        x = x >> 1\n    if a%2==0:\n        return \"Parity is even\"\n    else:\n        return \"Parity is odd\"\nfind_Parity(97)\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return int(x % 2) \n    \n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    return (x & 1)\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n <= 9:\n        return n + 1\n    s = str(n)\n    n = int(s[::-1])\n    k = len(s) - 1\n    while n > 10:\n        s = str(n)\n        n = int(s[k] + s[k + 1] + s[:k-1][::-1])\n        k = k - 1\n    return int(s + s[:k][::-1])\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n<10:\n        return n\n    else:\n        digits = [int(x) for x in str(n)]\n        i = 0\n        #counts the number of elements which are in descending order\n        while i<len(digits)-1 and digits[i]<=digits[i+1]:\n            i+=1\n        #returns the number which is the last element in the array\n        return int(\"\".join([str(x) for x in digits[i+1:]]+[str(digits[i])]))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    n = list(n)\n    i = 0\n    for i in range(len(n)-1):\n        if n[i] > n[i+1]:\n            n[i],n[i+1] = n[i+1],n[i]\n            break\n    n = ''.join(n)\n    return int(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(d) for d in str(n)]\n    digits.sort(reverse=True)\n    return int(''.join([str(d) for d in digits]))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # a is the original number\n    a = str(n)\n    # b is the modified number\n    b = a[::-1]\n    # c is the rearranged number\n    c = ''\n    # d is the length of a\n    d = len(a)\n    # flag is a variable to check if the loop is running\n    flag = 1\n    # for loop to check the length of original number\n    for i in range(d):\n        # if the digit of a is greater than the digit of b\n        if int(a[i]) > int(b[i]):\n            # c is the rearranged number\n            c += str(int(b[i]) - 1)\n        # if the digit of a is equal to the digit of b\n        elif int(a[i]) == int(b[i]):\n            # if the length of c is not equal to the length of a\n            if len(c)!= len(a):\n                # if the length of c is less than the length of a\n                if len(c) < len(a):\n                    # if the digit of a is equal to the last digit of c\n                    if int(a[i]) == int(c[-1]):\n                        # c is the rearranged number\n                        c += str(int(c[-1]) + 1)\n                    # else if the digit of a is not equal to the last digit of c\n                    else:\n                        # c is the rearranged number\n                        c += str(int(c[-1]) - 1)\n                # if the length of c is greater than or equal to the length of a\n                else:\n                    # if the digit of a is equal to the first digit of c\n                    if int(a[i]) == int(c[0]):\n                        # c is the rearranged number\n                        c += str(int(c[0]) + 1)\n                    # else if the digit of a is not equal to the first digit of c\n                    else:\n                        # c is the rearranged number\n                        c += str(int(c[0]) - 1)\n            # if the length of c is equal to the length of a\n            else:\n                # if the digit of a is equal to the last digit of c\n                if int(a[i]) == int(c[-1]):\n                    # c is the rearranged number\n                    c += str(int(c[-1]) + 1)\n                # else if the digit of a is not equal to the last digit of c\n                else:\n                    # c is the rearranged number\n                    c += str(int(c[-1]) - 1)\n        # if the digit of a is less than the digit of b\n        elif int(a[i]) < int(b[i]):\n            # c is the rearranged number\n            c += str(int(a[i]) + 1)\n    # if the length of c is equal to the length of a\n    if len(c) == len(a):\n        # if the length of c is not equal to the length of a\n        if len(c) < len(a):\n            # if the digit of a is equal to the last digit of c\n            if int(a[i]) == int(c[-1]):\n                # c is the rearranged number\n                c += str(int(c[-1]) + 1)\n            # else if the digit of a is not equal to the last digit of c\n            else:\n                # c is the rearranged number\n                c += str(int(c[-1]) - 1)\n        # if the length of c is greater than or equal to the length of a\n        else:\n            # if the digit of a is equal to the first digit of c\n            if int(a[i]) == int(c[0]):\n                # c is the rearranged number\n                c += str(int(c[0]) + 1)\n            # else if the digit of a is not equal to the first digit of c\n            else:\n                # c is the rearranged number\n                c += str(int(c[0]) - 1)\n    # if the length of c is less than the length of a\n    else:\n        # if the digit of a is equal to the last digit of c\n        if int(a[i]) == int(c[-1]):\n            # c is the rearranged number\n            c += str(int(c[-1]) + 1)\n        # else if the digit of a is not equal to the last digit of c\n        else:\n            # c is the rearranged number\n            c += str(int(c[-1]) - 1)\n    # if the original number is equal to the rearranged number\n    if int(a) == int(c):\n        # flag is equal to 1\n        flag = 1\n    # if the original number is not equal to the rearranged number\n    else:\n        # flag is equal to 0\n        flag = 0\n    # if flag is 1\n    if flag == 1:\n        # return the rearranged number\n        return int(c)\n    # if flag is 0\n    else:\n        # return the original number\n        return int(a)\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if not n:\n        return -1\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    for i in range(len(n)-1,0,-1):\n        if n[i]>n[i-1]:\n            for j in range(i,0,-1):\n                if n[j]>n[i-1]:\n                    n[j],n[i-1] = n[i-1],n[j]\n                    break\n    return int(''.join(n))\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 0:\n        return -1\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 0:\n        return -1\n    ret = 0\n    str_n = str(n)\n    for i in range(len(str_n) - 1):\n        ret *= 10\n        ret += max(int(str_n[i]), int(str_n[i + 1]))\n    return ret\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    length = len(n)\n    n_list = list(n)\n    n_list.sort(reverse=True)\n    for i in range(length):\n        n_list.insert(i, n[i])\n    return int(''.join(n_list))\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1 = nums1[0:]\n    nums2 = nums2[0:]\n    if k > len(nums1) * len(nums2) or k <= 0:\n        return []\n    res = []\n    if len(nums1) < len(nums2):\n        nums1, nums2 = nums2, nums1\n    if len(nums1) == 0 or len(nums2) == 0:\n        return [[]]\n    for num in nums1:\n        for num2 in nums2:\n            heapq.heappush(res, [num, num2])\n            if len(res) == k:\n                break\n        if len(res) == k:\n            break\n    return [heapq.heappop(res) for x in xrange(k)]\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    maxheap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(maxheap) < k:\n                heapq.heappush(maxheap, (-nums1[i]+nums2[j], nums1[i], nums2[j]))\n            else:\n                if -nums1[i]+nums2[j] < -maxheap[0][0]:\n                    heapq.heappop(maxheap)\n                    heapq.heappush(maxheap, (-nums1[i]+nums2[j], nums1[i], nums2[j]))\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    h = []\n    result = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(h) == k:\n                if h[0][0] > nums1[i] + nums2[j]:\n                    heapq.heappop(h)\n                    heapq.heappush(h, (nums1[i] + nums2[j], i, j))\n            else:\n                heapq.heappush(h, (nums1[i] + nums2[j], i, j))\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    n = len(nums1)\n    m = len(nums2)\n    res = []\n    \n    for i in range(n):\n        for j in range(m):\n            heapq.heappush(res, (nums1[i] + nums2[j], i, j))\n    \n    res = []\n    for i in range(k):\n        res.append(heapq.heappop(res))\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], (i,j)))\n    return [(heapq.heappop(heap)[1]) for i in range(k)]\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    if k < 0 or k > len(nums1) * len(nums2):\n        return []\n    pairs = []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, [nums1[i]+nums2[j], i, j])\n    for i in range(k):\n        pairs.append(heapq.heappop(heap))\n    return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k == 0: return []\n    if len(nums1) == 0 or len(nums2) == 0: return []\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    res = []\n    l1 = 0\n    l2 = 0\n    while True:\n        if l1 >= len(nums1) or l2 >= len(nums2):\n            break\n        if nums1[l1] > nums2[l2]:\n            if k > 1:\n                k -= 1\n                l2 += 1\n                continue\n            else:\n                break\n        res.append((nums1[l1], nums2[l2]))\n        l1 += 1\n        l2 += 1\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    count = 0\n    minHeap = []\n    for i in range(min(k,len(nums1))):\n        heapq.heappush(minHeap,(nums1[i]+nums2[0],nums1[i],nums2[0]))\n    while count < k:\n        if minHeap[0][0]>=minHeap[0][1]:\n            heapq.heappop(minHeap)\n            heapq.heappush(minHeap,(nums1[0]+nums2[0],nums1[0],nums2[0]))\n        count += 1\n    return [(k,i,j) for i,j in minHeap]\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap, (-nums1[i], nums2[i]))\n    result = []\n    for i in range(k):\n        result.append(heapq.heappop(heap))\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    i, j = 0, 0\n    res = []\n    heap = []\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] > nums2[j]:\n            heapq.heappush(heap, (-nums1[i], nums1[i]))\n            i += 1\n        else:\n            heapq.heappush(heap, (-nums2[j], nums2[j]))\n            j += 1\n        if len(heap) > k:\n            heapq.heappop(heap)\n    while len(heap) < k:\n        if nums1[i]:\n            heapq.heappush(heap, (-nums1[i], nums1[i]))\n            i += 1\n        else:\n            heapq.heappush(heap, (-nums2[j], nums2[j]))\n            j += 1\n        if len(heap) > k:\n            heapq.heappop(heap)\n    while len(heap) > 0:\n        res.append((-heapq.heappop(heap), heapq.heappop(heap)))\n    return res\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return min([i * j for i, j in list1])\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1 = sorted(list1, key=lambda x: x[0] * x[1])\n    return list1[0]\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    temp = list1\n    for i in range(0, len(list1), 2):\n        if i+1 == len(list1):\n            break\n        temp = list1[i][0]*list1[i+1][1] - list1[i][1]*list1[i+1][0]\n        #print temp\n    return temp\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort(key=lambda x: x[1]/x[0], reverse=True)\n    return (list1[0][0], list1[0][1])\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    products = []\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i < j:\n                products.append(list1[i][0]*list1[j][1])\n    return min(products)\n    "
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return tuple(sorted(list1,key = lambda x : x[1]*x[2]))[0]\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1 = sorted(list1, key=lambda x: x[1])\n    list2 = sorted(list1, key=lambda x: x[0])\n    list1.reverse()\n    list2.reverse()\n    print(list1)\n    print(list2)\n    for i in range(len(list1)):\n        if list1[i][0] > list2[i][1]:\n            list1[i][0], list1[i][1] = list1[i][1], list1[i][0]\n    print(list1)\n    print(list2)\n    return list1[0][0]*list1[0][1]\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return (min([a*b for a,b in list1]), max([a*b for a,b in list1]))\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    product = 1\n    for item in list1:\n        product *= item[0] * item[1]\n    return product\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval, key=lambda k:float(k['value']))['value']\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return None\n    else:\n        return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = None\n    for i in listval:\n        if minval is None:\n            minval = i\n        elif i < minval:\n            minval = i\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = None\n    for element in listval:\n        if minval == None:\n            minval = element\n        else:\n            if element < minval:\n                minval = element\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float(\"inf\")\n    for i in listval:\n        if min_val > i:\n            min_val = i\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    assert len(listval) > 0, 'List is empty'\n    if len(listval) == 1:\n        return listval[0]\n    min_val = listval[0]\n    for elem in listval:\n        if elem < min_val:\n            min_val = elem\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if listval == []:\n        return None\n    val = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] < val:\n            val = listval[i]\n    return val\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    \n    # string to hold the camel case output\n    camelCaseString = \"\"\n    \n    # loop to traverse through the input string\n    for letter in word:\n        if letter!= \"_\":\n            camelCaseString += letter\n    \n    # if the string is empty\n    if camelCaseString == \"\":\n        return \"\"\n    \n    # capitalize the first letter\n    camelCaseString = camelCaseString[0].upper() + camelCaseString[1:]\n    \n    # return the camel case string\n    return camelCaseString\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case_string = re.sub('_','', word)\n    camel_case_string = camel_case_string[0].lower() + camel_case_string[1:]\n    return camel_case_string\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if len(word) < 2:\n        return word\n    else:\n        list_of_words = word.split('_')\n        camel_string = list_of_words[0]\n        for i in xrange(1, len(list_of_words)):\n            camel_string += list_of_words[i].capitalize()\n        return camel_string\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.capitalize() for word in word.split('_'))\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word == '':\n        return ''\n    word = word.split('_')\n    res = ''\n    for i in range(len(word)):\n        res += word[i].capitalize()\n    return res\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    if word == '':\n        return ''\n    if word[0].islower():\n        return word\n    res = ''\n    i = 0\n    while i < len(word):\n        if word[i].isupper():\n            i += 1\n        else:\n            res += word[i]\n            i += 1\n    return res\ndef get_middle(s):\n    '''\n    Write a function to find the middle element of a given string.\n    '''\n    if len(s) % 2 == 0:\n        return s[len(s)//2-1:len(s)//2+1]\n    else:\n        return s[len(s)//2]\ndef remove_duplicate(s):\n    '''\n    Write a function to remove the duplicate characters in the given string.\n    '''\n    return ''.join(set(s))\ndef string_compression(s):\n    '''\n    Write a function to compress a string.\n    '''\n    if len(s) == 0:\n        return ''\n    res = []\n    counter = 0\n    for i in range(len(s)):\n        if s[i] == s[i-1]:\n            counter += 1\n        else:\n            if counter > 1:\n                res.append(str(counter))\n                res.append(s[i-1])\n                counter = 0\n            else:\n                res.append(s[i-1])\n    if counter > 1:\n        res.append(str(counter))\n        res.append(s[-1])\n    else:\n        res.append(s[-1])\n    return ''.join(res)\ndef is_palindrome(s):\n    '''\n    Write a function to check if the given string is a palindrome.\n    '''\n    return s == s[::-1]\ndef reverse(s):\n    '''\n    Write a function to reverse a string.\n    '''\n    return s[::-1]\ndef is_pangram(s):\n    '''\n    Write a function to check if the given string is a pangram.\n    '''\n    if len(s) == 0:\n        return False\n    s = s.lower()\n    return'' not in s\ndef word_flipper(s):\n    '''\n    Write a function to flip the case of each character in a string.\n    '''\n    if len(s) == 0:\n        return ''\n    s = s.lower()\n    res = ''\n    for i in range(len(s)):\n        if s[i] =='':\n            res +=''\n        else:\n            res += s[i].upper() if s[i].islower() else s[i].lower()\n    return res\ndef move_zeros(nums):\n    '''\n    Write a function to move all zeroes to the end of a list.\n    '''\n    if len(nums) == 0:\n        return nums\n    idx = 0\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            nums[idx] = nums[i]\n            idx += 1\n    while idx < len(nums):\n        nums[idx] = 0\n        idx += 1\n    return nums\ndef string_to_integer(s):\n    '''\n    Write a function to convert a string to integer.\n    '''\n    return int(s)\ndef valid_parentheses(s):\n    '''\n    Write a function to check if the given string is balanced parentheses.\n    '''\n    cnt = 0\n    for i in range(len(s)):\n        if s[i] == '(':\n            cnt += 1\n        if s[i] == ')':\n            cnt -= 1\n            if cnt < 0:\n                return False\n    return cnt == 0\ndef valid_tic_tac_toe(board):\n    '''\n    Write a function to check if the board is valid Tic-Tac-Toe board.\n    '''\n    return board[0] == board[1] == board[2] or board[3] == board[4] == board[5] or board[6] == board[7] == board[8] or board[0] == board[3] == board[6] or board[1] == board[4] == board[7] or board[2] == board[5] == board[8] or board[0] == board[4] == board[8] or board[2] == board[4] == board[6]\ndef is_one_edit_away(s1, s2):\n    '''\n    Write a function to check if the given strings are one edit away.\n    '''\n    if len(s1) > len(s2):\n        s1, s2 = s2, s1\n    if len(s1) == len(s2):\n        return 'true' if s1!= s2 else 'false'\n    i = 0\n    while i < len(s1):\n        if s1[i]!= s2[i]:\n            break\n        i += 1\n    if i == len(s1):\n        return 'true'\n    else:\n        return 'false'\ndef almost_sort(s):\n    '''\n    Write a function to check if the given array is almost sorted.\n    '''\n    if len(s) == 0:\n        return True\n    for i in range(len(s)):\n        if s[i] > s[i+1]:\n            return False\n    return True\ndef radix_sort(s):\n    '''\n    Write a function to sort a list using the radix sort algorithm.\n    '''\n    if len(s) == 0:\n        return s\n    temp = [0 for i in range(10)]\n    for i in range(10):\n        temp[i] = [0 for j in range(len(s))]\n    for i in range(1, 10):\n        for j in range(len(s)):\n            temp[i][j] = s[j] % (10**(i-1)) // 10**(i-1)\n        for j in range(len(s)-1, -1, -1):\n            s[j] = temp[i][j]\n    return s\ndef find_itinerary(tickets):\n    '''\n    Write a function to find the itinerary in a given list of tickets.\n    '''\n    graph = [[] for i in range(len(tickets))]\n    for i in range(len(tickets)):\n        for j in range(len(tickets[i])):\n            graph[i].append(tickets[i][j][1])\n    #print(graph)\n    def dfs(graph, start, path):\n        if start >= len(graph):\n            if path not in result:\n                result.append(path)\n            return\n        for i in graph[start]:\n            dfs(graph, i, path+[i])\n    result = []\n    for i in range(len(tickets)):\n        dfs(graph, i, [i])\n    return result\ndef add_two_strings(s1, s2):\n    '''\n    Write a function to add two strings together.\n    '''\n    if len(s1) < len(s2):\n        s1, s2 = s2, s1\n    carry = 0\n    res = []\n    for i in range(len(s2)):\n        num = carry\n        if i < len(s1):\n            num += ord(s1[i]) - ord('0')\n        if i < len(s2):\n            num += ord(s2[i]) - ord('0')\n        res.append(str(num % 10))\n        carry = num // 10\n    if carry > 0:\n        res.append(str(carry))\n    return ''.join(res[::-1])\ndef find_uncommon(s1, s2):\n    '"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    try:\n        if'' not in word:\n            return word[0].lower() + word[1:].lower()\n        # if there is space in word then split the word into list\n        else:\n            list_word = word.split(' ')\n            for i in range(0, len(list_word)):\n                if i == 0:\n                    list_word[i] = list_word[i].lower()\n                    continue\n                list_word[i] = list_word[i].capitalize()\n            camel_case = ''\n            for word in list_word:\n                camel_case = camel_case + word\n            return camel_case\n    except:\n        return word\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    try:\n        list_word = []\n        # convert word into list\n        for w in word:\n            list_word.append(w)\n        # if first letter is uppercase then make it lowercase\n        if list_word[0].isupper():\n            list_word[0] = list_word[0].lower()\n        # when word is starting with number then add '_' to the beginning of word\n        if list_word[0].isdigit():\n            list_word[0] = '_' + list_word[0]\n        # check if there is any digit in word and add '_' in front of that digit\n        for i in range(1, len(list_word)):\n            if list_word[i].isdigit():\n                list_word[i] = '_' + list_word[i]\n        # check if there is word starting with any digit and add '_' at the beginning\n        for i in range(1, len(list_word)):\n            if list_word[i].isdigit():\n                list_word[0] = '_' + list_word[i]\n        # when word is ending with number then add '_' to the end of word\n        if list_word[-1].isdigit():\n            list_word[-1] = '_' + list_word[-1]\n        snake_case = ''\n        for word in list_word:\n            snake_case = snake_case + word\n        return snake_case\n    except:\n        return word\ndef camel_to_snake_replace(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    try:\n        list_word = []\n        # convert word into list\n        for w in word:\n            list_word.append(w)\n        # when word is starting with number then add '_' to the beginning of word\n        if list_word[0].isdigit():\n            list_word[0] = '_' + list_word[0]\n        # when word is ending with number then add '_' to the end of word\n        if list_word[-1].isdigit():\n            list_word[-1] = '_' + list_word[-1]\n        snake_case = ''\n        for word in list_word:\n            snake_case = snake_case + word\n        # replace '-' with '_' in camel case string\n        snake_case = re.sub(r'\\-', '_', snake_case)\n        return snake_case\n    except:\n        return word\ndef camel_to_snake_case_replace(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    try:\n        list_word = []\n        # convert word into list\n        for w in word:\n            list_word.append(w)\n        # when word is starting with number then add '_' to the beginning of word\n        if list_word[0].isdigit():\n            list_word[0] = '_' + list_word[0]\n        # when word is ending with number then add '_' to the end of word\n        if list_word[-1].isdigit():\n            list_word[-1] = '_' + list_word[-1]\n        snake_case = ''\n        for word in list_word:\n            snake_case = snake_case + word\n        # replace '-' with '_' in camel case string\n        snake_case = re.sub(r'\\-', '_', snake_case)\n        return snake_case\n    except:\n        return word\ndef camel_to_snake_case_replace_second(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    try:\n        list_word = []\n        # convert word into list\n        for w in word:\n            list_word.append(w)\n        # when word is starting with number then add '_' to the beginning of word\n        if list_word[0].isdigit():\n            list_word[0] = '_' + list_word[0]\n        # when word is ending with number then add '_' to the end of word\n        if list_word[-1].isdigit():\n            list_word[-1] = '_' + list_word[-1]\n        snake_case = ''\n        for word in list_word:\n            snake_case = snake_case + word\n        # replace '-' with '_' in camel case string\n        snake_case = re.sub(r'\\-', '_', snake_case)\n        return snake_case\n    except:\n        return word\ndef camel_to_snake_case_replace_third(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    try:\n        list_word = []\n        # convert word into list\n        for w in word:\n            list_word.append(w)\n        # when word is starting with number then add '_' to the beginning of word\n        if list_word[0].isdigit():\n            list_word[0] = '_' + list_word[0]\n        # when word is ending with number then add '_' to the end of word\n        if list_word[-1].isdigit():\n            list_word[-1] = '_' + list_word[-1]\n        snake_case = ''\n        for word in list_word:\n            snake_case = snake_case + word\n        # replace '-' with '_' in camel case string\n        snake_case = re.sub(r'\\-', '_', snake_case)\n        return snake_case\n    except:\n        return word\ndef camel_to_snake_case_replace_fourth(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    try:\n        list_word = []\n        # convert word into list\n        for w in word:\n            list_word.append(w)\n        # when word is starting with number then add '_' to the beginning of word\n        if list_word[0].isdigit():\n            list_word[0] = '_' + list_word[0]\n        # when word is ending with number then add '_' to the end of word\n        if list_word[-1].isdigit():\n            list_word[-1] = '_' + list_word[-1]\n        snake_case = ''\n        for word in list_word:\n            snake_case = snake_case + word\n        # replace '-' with '_' in camel case string\n        snake_case = re.sub(r'\\-', '_', snake_case)\n        return snake_case\n    except:\n        return word\ndef camel_to_snake_case_replace_fifth(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    try:\n        list_word = []\n        # convert word into list\n        for w in word:\n            list_word.append(w)\n        # when word is starting with number then add '_' to the beginning of word\n        if list_word[0].isdigit():\n            list_word[0] = '_' + list_word[0]\n        # when word is ending with number then add '_' to the end o"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # pattern = re.compile('(?<=[a-z0-9])([A-Z])')\n    # words = re.findall(pattern, word)\n    # camel = ''\n    # for word in words:\n    #     camel += word.lower()\n    #     camel += '_'\n    # return camel[:-1]\n    return ''.join(x.title() for x in word.split('_'))\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    '''\n    string = \"\"\n    word = word.replace(\"_\",\" \")\n    for i in word:\n        if i!= \" \":\n            string += i\n    print string\n    '''\n    s = re.sub('_','', word)\n    s = re.sub('(?<!^)(?=[A-Z])','', s)\n    return s.capitalize()\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    out = ''\n    if word[0].isupper():\n        out += word\n    else:\n        out += word[0].upper() + word[1:]\n    return out\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not word:\n        return ''\n    first_character = word[0].lower()\n    if first_character in ['a','e','i','o','u']:\n        return word.lower()\n    else:\n        return ''.join([first_character] + [x.upper() for x in word[1:]])\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return filter(lambda x: x % 2 == 0, l)\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if l:\n        return [i for i in l if i%2==0]\n    else:\n        return None\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_l=[]\n    for i in l:\n        if i%2!=0:\n            new_l.append(i)\n    return new_l\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i % 2 == 0:\n            l.remove(i)\n        else:\n            continue\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = [x for x in l if x%2 ==0]\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l1=[]\n    for i in l:\n        if i%2==0:\n            l1.append(i)\n    print l1\n    return l1\nremove_odd([1,2,3,4,5,6])\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    print'remove_odd'\n    return [x for x in l if x%2==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd = []\n    for i in l:\n        if i%2!=0:\n            odd.append(i)\n    print 'Given list = ', l\n    print 'List of odd numbers = ', odd\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [t[n] for t in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [tuple[n] for tuple in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [tup[n-1] for tup in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > 0:\n        return reduce(lambda x,y: x+y, map(lambda z: z[n], list1))\n    else:\n        return reduce(lambda x,y: x+y, map(lambda z: z[abs(n)], list1))\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [i[n-1] for i in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    \n    return [i[n] for i in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    extracted = []\n    for i in list1:\n        extracted.append(i[n])\n    return extracted\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    tuple_counter = 0\n    for tuple in list1:\n        if tuple_counter == n:\n            return tuple\n        tuple_counter += 1\n    return None\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [i[n-1] for i in list1]\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for val in list1:\n        if val in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return [item for item in list1 if item in list2]\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    result = []\n    for i in list1:\n        if i in list2:\n            result.append(i)\n    if len(result)>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return set(list1).intersection(set(list2))\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    result = False\n    for n in list1:\n        if n in list2:\n            result = True\n            break\n    return result\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    for i in list1:\n        if i in list2:\n            return True\n    else:\n        return False\n    \n    "
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(val in list2 for val in list1)\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # return [x for x in list1 if x in list2]\n    for x in list1:\n        if x in list2:\n            return True\n    return False\ndef count(l):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    return sum(c in 'aeiou' for c in l)\ndef count_vowels(s):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    count = 0\n    for c in s:\n        if c in 'aeiou':\n            count += 1\n    return count\ndef count_vowels_1(s):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    return sum(1 for c in s if c in 'aeiou')\ndef count_vowels_2(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_3(s):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    return len([c for c in s if c in 'aeiou'])\ndef count_vowels_4(s):\n    return len([c for c in s if c in 'aeiou'])\ndef count_vowels_5(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_6(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_7(s):\n    return sum(1 for c in s if c in 'aeiou')\ndef count_vowels_8(s):\n    return sum(1 for c in s if c in 'aeiou')\ndef count_vowels_9(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_10(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_11(s):\n    return sum(1 for c in s if c in 'aeiou')\ndef count_vowels_12(s):\n    return sum(1 for c in s if c in 'aeiou')\ndef count_vowels_13(s):\n    return sum(1 for c in s if c in 'aeiou')\ndef count_vowels_14(s):\n    return sum(1 for c in s if c in 'aeiou')\ndef count_vowels_15(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_16(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_17(s):\n    return sum(1 for c in s if c in 'aeiou')\ndef count_vowels_18(s):\n    return sum(1 for c in s if c in 'aeiou')\ndef count_vowels_19(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_20(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_21(s):\n    return sum(1 for c in s if c in 'aeiou')\ndef count_vowels_22(s):\n    return sum(1 for c in s if c in 'aeiou')\ndef count_vowels_23(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_24(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_25(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_26(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_27(s):\n    return sum(1 for c in s if c in 'aeiou')\ndef count_vowels_28(s):\n    return sum(1 for c in s if c in 'aeiou')\ndef count_vowels_29(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_30(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_31(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_32(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_33(s):\n    return sum(1 for c in s if c in 'aeiou')\ndef count_vowels_34(s):\n    return sum(1 for c in s if c in 'aeiou')\ndef count_vowels_35(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_36(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_37(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_38(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_39(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_40(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_41(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_42(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_43(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_44(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_45(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_46(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_47(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_48(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_49(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_50(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_51(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_52(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_53(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_54(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_55(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_56(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_57(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_58(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_59(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_60(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_61(s):\n    return sum(c in 'aeiou' for c in s)\ndef count_vowels_62(s):\n    return su"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return not set(list1).isdisjoint(list2)\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return set(list1).intersection(set(list2))\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # n = len(arr)\n    # max_value = [1]*n\n    # min_value = [1]*n\n    # for i in range(n):\n    #     if i == 0:\n    #         max_value[i] = arr[i]\n    #         min_value[i] = arr[i]\n    #     else:\n    #         max_value[i] = max(max_value[i-1]*arr[i], min_value[i-1]*arr[i])\n    #         min_value[i] = min(max_value[i-1]*arr[i], min_value[i-1]*arr[i])\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # remove negative numbers from array\n    arr = [x for x in arr if x > 0]\n    if arr == []: return None\n    #sort array in descending order\n    arr.sort(reverse=True)\n    # keep track of the maximum product pair\n    max_product = arr[0] * arr[1]\n    # find the highest product pair\n    for i in range(0, len(arr)-1):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    m = [1] * len(arr)\n    n = [1] * len(arr)\n    for i in range(1, len(arr)):\n        for j in range(0, i):\n            if (arr[i] > arr[j]):\n                if (m[i] < m[j] * arr[i]):\n                    m[i] = m[j] * arr[i]\n            elif (arr[i] < arr[j]):\n                if (n[i] < n[j] * arr[i]):\n                    n[i] = n[j] * arr[i]\n    m.sort()\n    n.sort()\n    return m[len(m)-1], n[len(n)-1]\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    N = len(arr)\n    if N==0:\n        return []\n    arr.sort()\n    max_product = arr[N-1]*arr[N-2]\n    result = []\n    for i in range(N-2):\n        product = arr[i]*arr[i+1]*arr[i+2]\n        if product > max_product:\n            max_product = product\n            result = [arr[i], arr[i+1], arr[i+2]]\n    return result\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    left = [0]*len(arr)\n    right = [0]*len(arr)\n    left[0] = 1\n    right[len(arr)-1] = 1\n    max_product = arr[0]*arr[1]\n    for i in range(2,len(arr)):\n        left[i] = max(arr[i], arr[i]*left[i-2], arr[i]*right[i-2])\n        right[len(arr)-i-1] = max(arr[len(arr)-i-1], arr[len(arr)-i-1]*left[i-2], arr[len(arr)-i-1]*right[i-2])\n        max_product = max(left[i], right[len(arr)-i-1], max_product)\n    print(max_product)\n    \n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    \n    i = len(arr) - 1\n    j = len(arr) - 1\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort(reverse=True)\n    i = 0\n    result = []\n    for x in arr:\n        if x > 0:\n            result.append(x)\n            i += 1\n            if i == 2:\n                break\n    return result[0] * result[1]\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1,len(arr)):\n        max_ending_here = max(arr[i],max_ending_here * arr[i])\n        max_so_far = max(max_ending_here,max_so_far)\n    return max_so_far\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n=len(arr)\n    max_prod=0\n    for i in xrange(0,n):\n        for j in xrange(i+1,n):\n            prod=arr[i]*arr[j]\n            if prod>max_prod:\n                max_prod=prod\n    return max_prod\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    length = len(arr)\n    max1 = arr[-1] * arr[-2]\n    max2 = arr[-3] * arr[-4]\n    return max(max1,max2)\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_list = []\n    for i in Input:\n        if i[0] not in common_list:\n            common_list.append(i[0])\n    \n    return common_list\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return [set(x) & set(y) for x,y in zip(Input, Input[1:])]\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #print Input\n    \n    Output = []\n    \n    for tup in Input:\n        if tup[0] not in Output:\n            Output.append(tup[0])\n    \n    return Output\n    \ndef group_tuples_2(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #print Input\n    \n    Output = set(Input[0])\n    \n    for tup in Input[1:]:\n        Output = Output.intersection(tup)\n    \n    return list(Output)\n    \n    \ndef group_tuples_3(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #print Input\n    \n    Output = []\n    \n    for tup in Input:\n        if tup[0] not in Output:\n            Output.append(tup[0])\n    \n    return Output\n    \n    \ndef group_tuples_4(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #print Input\n    \n    Output = set(Input[0])\n    \n    for tup in Input[1:]:\n        Output.intersection_update(tup)\n    \n    return list(Output)\n    \n    \ndef group_tuples_5(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #print Input\n    \n    Output = set(Input[0])\n    \n    for tup in Input[1:]:\n        Output.intersection_update(tup)\n    \n    return list(Output)\n    \n    \ndef group_tuples_6(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #print Input\n    \n    Output = set(Input[0])\n    \n    for tup in Input[1:]:\n        Output.update(tup)\n    \n    return list(Output)\n    \n    \ndef group_tuples_7(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #print Input\n    \n    Output = set(Input[0])\n    \n    for tup in Input[1:]:\n        Output.intersection_update(tup)\n    \n    return list(Output)\n    \n    \ndef group_tuples_8(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #print Input\n    \n    Output = set(Input[0])\n    \n    for tup in Input[1:]:\n        Output.intersection_update(tup)\n    \n    return list(Output)\n    \n    \ndef group_tuples_9(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #print Input\n    \n    Output = set(Input[0])\n    \n    for tup in Input[1:]:\n        Output.update(tup)\n    \n    return list(Output)\n    \n    \ndef group_tuples_10(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #print Input\n    \n    Output = set(Input[0])\n    \n    for tup in Input[1:]:\n        Output.intersection_update(tup)\n    \n    return list(Output)\n    \n    \ndef group_tuples_11(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #print Input\n    \n    Output = set(Input[0])\n    \n    for tup in Input[1:]:\n        Output.intersection_update(tup)\n    \n    return list(Output)\n    \n    \ndef group_tuples_12(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #print Input\n    \n    Output = set(Input[0])\n    \n    for tup in Input[1:]:\n        Output.intersection_update(tup)\n    \n    return list(Output)\n    \n    \ndef group_tuples_13(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #print Input\n    \n    Output = set(Input[0])\n    \n    for tup in Input[1:]:\n        Output.intersection_update(tup)\n    \n    return list(Output)\n    \n    \ndef group_tuples_14(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #print Input\n    \n    Output = set(Input[0])\n    \n    for tup in Input[1:]:\n        Output.intersection_update(tup)\n    \n    return list(Output)\n    \n    \ndef group_tuples_15(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #print Input\n    \n    Output = set(Input[0])\n    \n    for tup in Input[1:]:\n        Output.intersection_update(tup)\n    \n    return list(Output)\n    \n    \ndef group_tuples_16(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #print Input\n    \n    Output = set(Input[0])\n    \n    for tup in Input[1:]:\n        Output.intersection_update(tup)\n    \n    return list(Output)\n    \n    \ndef group_tuples_17(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #print Input\n    \n    Output = set(Input[0])\n    \n    for tup in Input[1:]:\n        Output.intersection_update(tup)\n    \n    return list(Output)\n    \n    \ndef group_tuples_18(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #print Input\n    \n    Output = set(Input[0])\n    \n    for tup in Input[1:]:\n        Output.intersection_update(tup)\n    \n    return list(Output)\n    \n    \ndef group_tuples_19(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #print Input\n    \n    Output = set(Input[0])\n    \n    for tup in Input[1:]:\n        Output.intersection_update(tup)\n    \n    return list(Output)\n    \n    \ndef group_tuples_20(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #print Input\n    \n    Output = set(Input[0])\n    \n    for tup in Input[1:]:\n        Output.intersection_update(tup)\n    \n    return list(Output)\n    \n    \ndef group_tuples_21(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #print Input\n    \n    Output = set(Input[0])\n    \n    for tup in Input[1:]:\n        Output.intersection_update(tup)\n    \n    return list(Output)\n    \n    \ndef group_tuples_22(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #print Input\n    \n    Output = set(Input[0])\n    \n    for tup in Input[1:]:\n        Output.intersection_update(tup)\n    \n    return list(Output)\n    \n    \ndef group_tuples_23(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #print Input\n    \n    Output = set(Input[0])\n    \n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    s = list(set(Input))\n    return sorted(s)\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    input = list(Input)\n    return set([x[0] for x in input])\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    d = {}\n    for i in Input:\n        if i[0] in d:\n            d[i[0]].append(i[1])\n        else:\n            d[i[0]] = [i[1]]\n    return d\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    # getting first element of tuples\n    x = [j[0] for j in Input]\n    \n    # getting index of first element\n    y = x.index(min(x))\n    \n    # getting first element\n    z = Input[y][0]\n    \n    # checking index\n    if y == 0:\n        return z\n    else:\n        return group_tuples(Input[y:])\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    a = set(Input[0])\n    for i in range(1,len(Input)):\n        a = a & set(Input[i])\n    for i in Input:\n        if a == set(i):\n            return True\n    return False\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    mydict = {}\n    for tup in Input:\n        for elem in tup:\n            if elem not in mydict:\n                mydict[elem] = 1\n            else:\n                mydict[elem] += 1\n    for tup in Input:\n        for elem in tup:\n            if mydict[elem] == 1:\n                print(elem)\n                break\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    list_of_tuples = Input \n    list_of_tuples.sort()\n    return list_of_tuples[0][0]\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    count = 0 \n    index = 0\n    for i in range(0,len(lst)):\n        if len(lst[i]) > count:\n            count = len(lst[i])\n            index = i\n    return index\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length=0\n    max_item=0\n    for item in lst: \n        if(len(item)>max_length): \n            max_length=len(item)\n            max_item=item\n    return max_item\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    length=len(lst)\n    max_el=lst[0]\n    for i in range(length):\n        if len(lst[i])>len(max_el):\n            max_el=lst[i]\n    return max_el\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_lst = len(lst[0])\n    for i in range(1,len(lst)):\n        if len(lst[i]) > max_lst:\n            max_lst = len(lst[i])\n            max_lst_index = i\n    print(lst[max_lst_index])\nFind_Max(lst)\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    temp_max = 0 \n    max_index = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > temp_max:\n            temp_max = len(lst[i])\n            max_index = i\n    return lst[max_index]\n    \nprint(Find_Max(['apple', 'app', 'lemon', 'lemon', 'grapes']))\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst)==1:\n        return lst[0]\n    elif len(lst)==0:\n        return 'No element'\n    elif len(lst)>1:\n        m = lst[0]\n        for i in range(1,len(lst)):\n            if len(lst[i])>len(m):\n                m = lst[i]\n        return m\n    \ndef Find_Min(lst):\n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    if len(lst)==1:\n        return lst[0]\n    elif len(lst)==0:\n        return 'No element'\n    elif len(lst)>1:\n        m = lst[0]\n        for i in range(1,len(lst)):\n            if len(lst[i])<len(m):\n                m = lst[i]\n        return m\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    \n    # initialize maximum element\n    max_element = lst[0]\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maxlen = max(len(i) for i in lst)\n    return [i for i in lst if len(i) == maxlen]\n    \n    \n    \n    \n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    length = len(lst)\n    max_len = lst[0]\n    for i in range(1, length):\n        if len(lst[i]) > len(max_len):\n            max_len = lst[i]\n    return max_len\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    length = len(lst) \n    if length == 0:\n        return\n    if length == 1:\n        return lst[0]\n    \n    mid = length/2\n    left = lst[:mid]\n    right = lst[mid:]\n    \n    left_max = Find_Max(left)\n    right_max = Find_Max(right)\n    \n    if len(left_max)>len(right_max):\n        return left_max\n    elif len(right_max)>len(left_max):\n        return right_max\n    else:\n        return max(left_max,right_max)\n        \ndef Find_Min(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    length = len(lst) \n    if length == 0:\n        return\n    if length == 1:\n        return lst[0]\n    \n    mid = length/2\n    left = lst[:mid]\n    right = lst[mid:]\n    \n    left_max = Find_Max(left)\n    right_max = Find_Max(right)\n    \n    if len(left_max)>len(right_max):\n        return left_max\n    elif len(right_max)>len(left_max):\n        return right_max\n    else:\n        return min(left_max,right_max)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(round(i))\n    print(sum(list2)*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # sum = 0\n    # for number in list1:\n    #     sum = sum + number\n    # print(sum)\n    # print(sum*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum(map(round, list1)) * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    x = 0\n    for i in list1:\n        x += round(i)\n    print(str(x*len(list1)) + \" total\")\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for x in list1:\n        total_sum += round(x)\n    print (total_sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(round(i, 2))\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    if len(list1) == 0:\n        print('Empty list')\n        return\n    elif len(list1) == 1:\n        print(sum(list1) * len(list1))\n        return\n    else:\n        print((sum(round(n) for n in list1)) * len(list1))\n        return\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for item in list1:\n        item = round(item)\n        total += item\n    print \"The sum of all the numbers in the list is:\", total * len(list1)\n    "
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for item in list1:\n        round_item = round(item,2)\n        total += round_item\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    #rounding to 2 decimal places\n    list2 = [round(x, 2) for x in list1]\n    #return the total\n    return sum(list2) * len(list2)\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n < 0:\n        print(\"Please enter a positive number\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return n*n*n\n    else:\n        return n*(n+1)*(n+2)*(n+3)//6\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    i = 0\n    cube_sum = 0\n    while (i < n):\n        if (i % 2 == 0):\n            cube_sum += i ** 3\n        i += 1\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # compute cube sum of first n even numbers\n    return sum([x**3 for x in range(n) if x%2==0])\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n<2:\n        return n\n    elif n==2:\n        return 2**3\n    else:\n        return (2**3)*n\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n**3 + cube_Sum(n-2)\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    n = int(n)\n    c = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            c += i ** 3\n    return c\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    #The base case is when n = 1\n    if n == 1:\n        return 0\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    c=0\n    for i in range(n):\n        if (i%2==0):\n            c=c+i**3\n    return c\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # find the length of the tuple\n    tup_len = len(test_tup)\n    # the string in which the tuple elements will be concatenated\n    new_str = ''\n    # for each tuple element\n    for i in range(tup_len):\n        # if the element is not a tuple, just concatenate it\n        if not isinstance(test_tup[i], tuple):\n            new_str = new_str + test_tup[i]\n        # else if the element is a tuple, concatenate it by the delimiter\n        else:\n            new_str = new_str + '_' + test_tup[i][0]\n    return new_str\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    #print(test_tup)\n    #print(type(test_tup))\n    #return str(test_tup).replace('(','').replace(')','').replace('\\'','')\n    return ''.join(test_tup)\n    \n    "
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # split() return a list of each word in the string\n    # join() concatenate each element of the list with the delimiter\n    # concatenate() return a concatenated string\n    return ''.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # return ''.join(test_tup)\n    # print(test_tup)\n    return ','.join(str(i) for i in test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    try:\n        concatenated_string = ''\n        for item in test_tup:\n            concatenated_string += str(item)\n        return concatenated_string\n    except:\n        return 'Error'\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result = result + str(i) + '-'\n    result = result[:-1]\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for each in test_tup:\n        result += str(each) + ','\n    return result[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup)):\n        new_tup = new_tup + (test_tup[i] + delimiter, )\n    return new_tup\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concat = ''\n    for el in test_tup:\n        concat += str(el) + '_'\n    return concat[:-1]\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    c = 1\n    s = 0\n    while c <= n:\n        s = s + (c**3)\n        c = c + 1\n    return s/n\nprint (find_Average_Of_Cube(5))"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    count = 0\n    total = 0\n    for i in range(1, n + 1):\n        total += i**3\n        count += 1\n    return total/count\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n**3+find_Average_Of_Cube(n-1)\n    \ndef find_Difference(n):  \n    '''\n    Write a python function to find the difference between the square of the first n natural numbers and the sum of cubes of first n natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n**2)**2 - (find_Sum_Of_Cube(n)**2)\n    \ndef find_Sum_Of_Cube(n):  \n    '''\n    Write a python function to find the sum of cubes of first n natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (find_Sum_Of_Cube(n-1)**2) + n\n    \ndef find_Factorial(n):  \n    '''\n    Write a python function to find the factorial of a given number n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*find_Factorial(n-1)\n    \ndef find_Triangular_Number(n):  \n    '''\n    Write a python function to find the triangular number of the first n natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n*(n+1))/2\n    \ndef find_Sine(x):  \n    '''\n    Write a python function to find the sine of a given angle x.\n    '''\n    if x == 0:\n        return 1\n    else:\n        return -2*((x**3)/find_Cube(x))\n    \ndef find_Cube(x):  \n    '''\n    Write a python function to find the cube of a given number x.\n    '''\n    if x == 0:\n        return 0\n    else:\n        return x**3\n    \ndef find_Cuberoot(x):  \n    '''\n    Write a python function to find the cube root of a given number x.\n    '''\n    if x == 0:\n        return 0\n    else:\n        return x**(1/3)\n    \ndef find_Squareroot(x):  \n    '''\n    Write a python function to find the square root of a given number x.\n    '''\n    if x == 0:\n        return 0\n    else:\n        return x**(1/2)\n    \ndef find_Tangent(x):  \n    '''\n    Write a python function to find the tangent of a given angle x.\n    '''\n    if x == 0:\n        return 0\n    else:\n        return (find_Sine(x)*find_Cube(x))/find_Cube(x)\n    \ndef find_Natural_Log(x):  \n    '''\n    Write a python function to find the natural log of a given number x.\n    '''\n    if x == 0:\n        return 0\n    else:\n        return x**(1/x)\n    \ndef find_Log10(x):  \n    '''\n    Write a python function to find the log10 of a given number x.\n    '''\n    if x == 0:\n        return 0\n    else:\n        return log10(x)\n    \ndef find_Square(n):  \n    '''\n    Write a python function to find the square of a given number n.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n**2\n    \ndef find_Sin(x):  \n    '''\n    Write a python function to find the sine of a given angle x.\n    '''\n    if x == 0:\n        return 0\n    else:\n        return ((find_Square(x)*find_Sine(x))/find_Square(x))\n    \ndef find_Cos(x):  \n    '''\n    Write a python function to find the cosine of a given angle x.\n    '''\n    if x == 0:\n        return 0\n    else:\n        return (find_Square(x)*find_Cube(x))/find_Square(x)\n    \ndef find_Tan(x):  \n    '''\n    Write a python function to find the tangent of a given angle x.\n    '''\n    if x == 0:\n        return 0\n    else:\n        return ((find_Sine(x)*find_Cube(x))/find_Square(x))\n    \ndef find_Sinh(x):  \n    '''\n    Write a python function to find the hyperbolic sine of a given angle x.\n    '''\n    if x == 0:\n        return 0\n    else:\n        return (find_Square(x)*find_Sine(x))/find_Square(x)\n    \ndef find_Cosh(x):  \n    '''\n    Write a python function to find the hyperbolic cosine of a given angle x.\n    '''\n    if x == 0:\n        return 0\n    else:\n        return (find_Square(x)*find_Cube(x))/find_Square(x)\n    \ndef find_Tanh(x):  \n    '''\n    Write a python function to find the hyperbolic tangent of a given angle x.\n    '''\n    if x == 0:\n        return 0\n    else:\n        return (find_Square(x)*find_Sine(x))/find_Square(x)\n    \ndef find_asin(x):  \n    '''\n    Write a python function to find the arc sine of a given number x.\n    '''\n    if x == 0:\n        return 0\n    else:\n        return (find_Cuberoot(x**2)**(1/2))\n    \ndef find_acos(x):  \n    '''\n    Write a python function to find the arc cosine of a given number x.\n    '''\n    if x == 0:\n        return 0\n    else:\n        return (find_Squareroot(x**2))\n    \ndef find_atan(x):  \n    '''\n    Write a python function to find the arc tangent of a given number x.\n    '''\n    if x == 0:\n        return 0\n    else:\n        return (find_Sine(x)*find_Cube(x))/find_Square(x)\n    \ndef find_sin(x):  \n    '''\n    Write a python function to find the sine of a given angle x.\n    '''\n    if x == 0:\n        return 0\n    else:\n        return (find_Square(x)*find_Sine(x))/find_Square(x)\n    \ndef find_cos(x):  \n    '''\n    Write a python function to find the cosine of a given angle x.\n    '''\n    if x == 0:\n        return 0\n    else:\n        return (find_Square(x)*find_Cube(x))/find_Square(x)\n    \ndef find_tan(x):  \n    '''\n    Write a python function to find the tangent of a given angle x.\n    '''\n    if x == 0:\n        return 0\n    else:\n        return (find_Sine(x)*find_Cube(x))/find_Square(x)\n    \ndef find_asinh(x):  \n    '''\n    Write a python function to find the hyperbolic arc sine of a given number x.\n    '''\n    if x == 0:\n        return 0\n    else:\n        return (find_Square(x)*find_Sine(x))/find_Square(x)\n    \ndef find_acosh(x):  \n    '''\n    Write a python function to find the hyperbolic arc cosine of a given number x.\n    '''\n    if x == 0:\n        return 0\n    else:\n        return (find_Square(x)*find_Cube(x))/find_Square(x)\n    \ndef find_atanh(x):  \n    '''\n    Write a python function to find the hyperbolic arc tangent of a given number x.\n    '''\n    if x == 0:\n        return 0\n    else:\n        return (find_Sine(x)*find_Cube(x))/find_Square(x)\n    \ndef find_d(x):  \n    '''\n    Write a python function to find the difference between the square of the first n natura"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    n = int(n)\n    if n < 0:\n        print('Invalid Input')\n    else:\n        sum_of_cubes = 0\n        for i in range(1, n+1):\n            sum_of_cubes += i**3\n        avg_of_cubes = sum_of_cubes/n\n        print('Average of cubes of first ',n,' natural numbers = ',avg_of_cubes)\n    return None\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # avg_of_cubes = sum(n**3 for n in range(1,n+1))/n\n    # return avg_of_cubes\n    return sum(n**3 for n in range(1,n+1))/n\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    Average = 0\n    for i in range(n+1):\n        Average = Average + i**3\n    return Average / n\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    import math\n    \n    l = []\n    for i in range(n):\n        l.append(math.pow(i+1,3))\n        \n    total = sum(l)\n    \n    return total/n\n    \n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i = 1\n    sum = 0\n    while i <= n:\n        sum = sum + i**3\n        i = i+1\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i**3\n    avg = sum / n\n    return avg\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        result += i**3\n    result = result/n\n    return result\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [t[-1] for t in test_tuple]\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return (x[len(x)-1] for x in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    \n    return map(lambda x: x[-1], test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(map(lambda x: x[-1], test_tuple))\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    output_tuple = tuple()\n    for t in test_tuple:\n        output_tuple = output_tuple + (t[-1],)\n    return output_tuple\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear = tuple(i[-1] for i in test_tuple)\n    return rear\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(map(lambda x: x[-1], test_tuple))\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    def rear_finder(test_tuple):\n        def rear_finder_helper(test_tuple):\n            if not test_tuple:\n                return None\n            if not isinstance(test_tuple, tuple):\n                return None\n            if len(test_tuple) == 1:\n                return test_tuple[0]\n            return rear_finder_helper(test_tuple[1:])\n        return rear_finder_helper(test_tuple)\n    return tuple(map(rear_finder,test_tuple))\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    for i in test_tuple:\n        print i[-1]\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for list2 in list1:\n        if x in list2:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for ele in list1:\n        if ele == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        if list1[0] == x:\n            return 1 + count_element_in_list(list1[1:], x)\n        else:\n            return count_element_in_list(list1[1:], x)\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    \n    return len([i for i in list1 if i == x])\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if (list1[i] == x):\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    i = 0\n    for element in list1:\n        if element == x:\n            i += 1\n    return i\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!= 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x % 2 == 1, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x%2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!=0,nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x%2!=0, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odds = []\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            odds.append(nums[i])\n    return odds\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnums = []\n    for n in nums:\n        if n % 2!= 0:\n            oddnums.append(n)\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda num: num%2 == 1, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2]\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_format = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    if date_format.match(dt):\n        return dt[2] + '-' + dt[1] + '-' + dt[0]\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    res = re.sub(r'-', '', dt)\n    return res\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    #return dt[4:6]+'-'+dt[6:8]+'-'+dt[0:4]\n    dt_l = dt.split('-')\n    return '{}-{}-{}'.format(dt_l[2], dt_l[1], dt_l[0])\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    #return dt.strftime(\"%d-%m-%Y\")\n    return dt.strftime(\"%d-%m-%Y\")\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    arr = re.split('-',dt)\n    \n    return arr[2] + \"-\" + arr[1] + \"-\" + arr[0]\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if dt.find('-') > 0:\n        return dt.replace('-', '/')\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if dt.find('-')!= -1:\n        dt = dt.replace('-', '/')\n        return dt\n    else:\n        return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    str = dt\n    str = str.replace(\"-\",\"/\")\n    return str\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    return pattern.sub(lambda m: m.group(3)+'-'+m.group(2)+'-'+m.group(1), dt)\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    res = re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})',r'\\3-\\2-\\1',dt)\n    return res\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # get the length of the list\n    n = len(my_list)\n    \n    # choose the gap, the interval between the subarrays\n    gap = n // 2\n    \n    # determine the subarrays\n    while gap > 0:\n        # use a for loop to generate the subarrays\n        for i in range(gap, n):\n            # use the insertion sort to sort the subarray\n            current = my_list[i]\n            pos = i\n            while pos >= gap and my_list[pos - gap] > current:\n                my_list[pos] = my_list[pos - gap]\n                pos -= gap\n            my_list[pos] = current\n        \n        # increase the gap\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if my_list == None:\n        return\n    n = len(my_list)\n    h = 1\n    while h < n/3:\n        h = 3*h + 1\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    size = len(my_list)\n    gap = size / 2\n    while gap > 0:\n        for i in range(gap,size):\n            temp = my_list[i]\n            j = i\n            while j>=gap and my_list[j-gap]>temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap /= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) / 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap /= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Get the length of the array\n    n = len(my_list)\n    # Initialize the gap\n    gap = int(n / 2)\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list)//2\n    while gap > 0:\n        for i in range(gap,len(my_list)):\n            current = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > current:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = current\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    h = 1\n    while h < len(my_list)/3:\n        h = 3*h + 1\n    while h >= 1:\n        for i in range(h, len(my_list)):\n            key = my_list[i]\n            j = i - h\n            while j >= 0 and my_list[j] > key:\n                my_list[j + h] = my_list[j]\n                j -= h\n            my_list[j + h] = key\n        h /= 3\n    return my_list\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(t1 and t2 for t1, t2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    def extract_and_tuples(tup1, tup2):\n        '''\n        Write a function to extract the elementwise and tuples from the given two tuples.\n        '''\n        return [(a, b) for a, b in zip(tup1, tup2)]\n    return extract_and_tuples(test_tup1, test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return zip(test_tup1, test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] & test_tup2[i],)\n    return result\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] and test_tup2[0], test_tup1[1] and test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The given tuples are not of equal length\")\n    else:\n        new_list = []\n        for i in range(len(test_tup1)):\n            new_list.append(tuple(test_tup1[i] & test_tup2[i]))\n        return new_list\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -1/b*(c/a)**0.5\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b/2*a\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b/2/a\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    try:\n        x = (b**2-4*a*c)**0.5\n        y = -1 * (b+x)/2*a\n        return x,y\n    except ValueError:\n        return None\n        \ndef parabola_focus(a, b, c): \n    '''\n    Write a function to find the focus of a parabola.\n    '''\n    return -1 * b/2/a\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # a*x^2 + b*x + c = 0 \n    # x = -b/(2*a)\n    # ax^2 + bx + c = 0\n    # ax^2 + bx + c = -b/2*a\n    # x^2 + b*x + c = -b/2*a \n    # x^2 + b*x + c = -b/(2*a)^2 \n    # x^2 + b*x + c = -b/(2*a)*-b/(2*a)\n    # x^2 - b*x + c = -b/(2*a)\n    # x^2 - b*x + c = b*b/(4*a)\n    # x^2 - b*x + c = b*b/(4*a)*2*a\n    # x^2 - b*x + c = b*b/(4*a) -b/(4*a)*2*a \n    # x^2 - b*x + c = b*b/(4*a) -b/(4*a)*2*a -b/(4*a) \n    # x^2 - b*x + c = b*b/(4*a) -b/(4*a)*2*a -b/(4*a)*2 -b/(4*a)*2 + b/(4*a)*2 \n    # x^2 - b*x + c = b*b/(4*a) -b/(4*a)*2*a -b/(4*a)*2 -b/(4*a)*2 + b/(4*a)*2 -b/(4*a) \n    # x^2 - b*x + c = b*b/(4*a) -b/(4*a)*2*a -b/(4*a)*2 -b/(4*a)*2 + b/(4*a)*2 -b/(4*a) \n    # x^2 - b*x + c = b*b/(4*a) -b/(4*a)*2*a -b/(4*a)*2 -b/(4*a)*2 + b/(4*a)*2 -b/(4*a) \n    # x^2 - b*x + c = b*b/(4*a) -b/(4*a)*2*a -b/(4*a)*2 -b/(4*a)*2 + b/(4*a)*2 -b/(4*a) \n    # x^2 - b*x + c = b*b/(4*a) -b/(4*a)*2*a -b/(4*a)*2 -b/(4*a)*2 + b/(4*a)*2 -b/(4*a) \n    # x^2 - b*x + c = b*b/(4*a) -b/(4*a)*2*a -b/(4*a)*2 -b/(4*a)*2 + b/(4*a)*2 -b/(4*a) \n    # x^2 - b*x + c = b*b/(4*a) -b/(4*a)*2*a -b/(4*a)*2 -b/(4*a)*2 + b/(4*a)*2 -b/(4*a) \n    # x^2 - b*x + c = b*b/(4*a) -b/(4*a)*2*a -b/(4*a)*2 -b/(4*a)*2 + b/(4*a)*2 -b/(4*a) \n    # x^2 - b*x + c = b*b/(4*a) -b/(4*a)*2*a -b/(4*a)*2 -b/(4*a)*2 + b/(4*a)*2 -b/(4*a) \n    # x^2 - b*x + c = b*b/(4*a) -b/(4*a)*2*a -b/(4*a)*2 -b/(4*a)*2 + b/(4*a)*2 -b/(4*a) \n    # x^2 - b*x + c = b*b/(4*a) -b/(4*a)*2*a -b/(4*a)*2 -b/(4*a)*2 + b/(4*a)*2 -b/(4*a) \n    # x^2 - b*x + c = b*b/(4*a) -b/(4*a)*2*a -b/(4*a)*2 -b/(4*a)*2 + b/(4*a)*2 -b/(4*a) \n    # x^2 - b*x + c = b*b/(4*a) -b/(4*a)*2*a -b/(4*a)*2 -b/(4*a)*2 + b/(4*a)*2 -b/(4*a) \n    # x^2 - b*x + c = b*b/(4*a) -b/(4*a)*2*a -b/(4*a)*2 -b/(4*a)*2 + b/(4*a)*2 -b/(4*a) \n    # x^2 - b*x + c = b*b/(4*a) -b/(4*a)*2*a -b/(4*a)*2 -b/(4*a)*2 + b/(4*a)*2 -b/(4*a) \n    # x^2 - b*x + c = b*b/(4*a) -b/(4*a)*2*a -b/(4*a)*2 -b/(4*a)*2 + b/(4*a)*2 -b/(4*a) \n    # x^2 - b*x + c = b*b/(4*a) -b/(4*a)*2*a -b/(4*a)*2 -b/(4*a)*2 + b/(4*a)*2 -b/(4*a) \n    # x^2 - b*x + c = b*b/(4*a) -b/(4*a)*2*a -b/(4*a)*2 -b/(4*a)*2 + b/(4*a)*2 -b/(4*a) \n    # x^2 - b*x + c = b*b/(4*a) -b/(4*a)*2*a -b/(4*a)*2 -b/(4*a)*2 + b/(4*a)*2 -b/(4*a) \n    # x^2 - b*x + c = b*b/(4*a) -b/(4*a)*2*a -b/(4*a)*2 -b/(4*a)*2 + b/(4*a)*2 -b/(4*a) \n    # x^2 - b*x + c = b*b/(4*a) -b/(4*a)*2*a -b/(4*a)*2 -b/(4*a)*2 + b/(4*a)*2 -b/(4*a) \n    # x^2 - b*x + c = b*b/(4*a) -b/(4*a)*2*a -b/(4*a)*2 -b/(4*a)*2 + b/(4*a)*2 -b/(4*a) \n    # x^2 - b*x + c = b*b/(4*a) -b/(4*a)*2*a -b/(4*a)*2 -b/(4*a)*2 + b/(4*a)*2 -b/(4*a) \n    # x^2 - b*x + c = b*b/(4*a) -b/(4*a)*2*a -b/(4*a)*2 -b/(4*a)*2 + b/(4*a)*2 -b/(4*a) \n    # x^2 - b*x + c = b*b/(4*a) -b/(4*a)*2*a -b/(4*a)*2 -b/(4*a)*2 + b/(4*a)*2 -b/(4*a) \n    # x^2 - b*x + c = b*b/(4*a) -b/(4*a)*2*a -b/(4*a)*2 -b/(4*a)*2 + b/(4*a)*2 -b/(4*a) \n    # x^2 - b*x + c = b*b/(4*a) -b/(4*a)*2*a -b/(4*a)*2 -b/(4*a)*2 + "
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = (-b + (b**2-4*a*c)**0.5)/(2*a)\n    x2 = (-b - (b**2-4*a*c)**0.5)/(2*a)\n    return x1, x2\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # handle case where directrix is vertical and positive or negative\n    if a == 0: \n        if c == 0:\n            return \"x = 0\"\n        elif c > 0:\n            return \"x = \" + str(-c / b)\n        else:\n            return \"x = \" + str(c / b)\n    # handle case where directrix is vertical and negative or positive\n    elif b == 0: \n        if c == 0:\n            return \"x = 0\"\n        elif c > 0:\n            return \"x = \" + str(c / a)\n        else:\n            return \"x = \" + str(-c / a)\n    # handle case where directrix is not vertical\n    else: \n        directrix = (b**2) - (4*a*c)\n        if directrix < 0: \n            return \"x = 0\"\n        elif directrix == 0: \n            return \"x = \" + str((-b) / (2*a))\n        elif directrix > 0: \n            return \"x = \" + str((-b - (directrix**0.5)) / (2*a)) + \" and \" + str((-b + (directrix**0.5)) / (2*a))\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b + (b**2 - 4*a*c)**0.5)/2/a, (-b - (b**2 - 4*a*c)**0.5)/2/a\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    pass\n    \ndef parabola(a, b, c): \n    '''\n    Write a function to find the vertexes of a parabola.\n    '''\n    pass\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # directrix = -b/2a\n    return -b/2/a\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    i = 0\n    for x in list1:\n        if x in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if not len(list1) == len(list2):\n        return False\n    else:\n        for x in range(len(list1)):\n            if list1[x] in list2:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem1 in list1:\n        for elem2 in list2:\n            if elem1 == elem2:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item1 in list1:\n        if item1 in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return not set(list1).isdisjoint(list2)\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(list(set(list1).intersection(list2)))!= 0\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for number in list1:\n        if number in list2:\n            return True\n    return False\n    \n    \n    \ndef is_anagram(string1, string2):\n    '''\n    Write a function that takes two strings and returns true if they are anagrams of each other.\n    '''\n    #if len(string1)!= len(string2):\n    #    return False\n    string1 = string1.lower()\n    string2 = string2.lower()\n    for character in string1:\n        if character not in string2:\n            return False\n    for character in string2:\n        if character not in string1:\n            return False\n    return True\n    \n    \n    \ndef replace_vowels(string):\n    '''\n    Write a function that takes a string and replaces all vowels in the string with the letter x.\n    '''\n    \n    string = string.lower()\n    vowels = 'aeiou'\n    for character in string:\n        if character in vowels:\n            string = string.replace(character, 'x')\n    return string\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2.0*height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2) / 2.0 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2.0 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 0.5*(base1+base2)*height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Your code here\n    return (base1 + base2) / 2.0 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n    \ndef rectangle_perimeter(length,width):\n    '''\n    Write a function that takes in the lengths of two sides of a rectangle and \n    returns the perimeter.\n    '''\n    return length+length+width+width\n    \ndef rectangle_area(length,width):\n    '''\n    Write a function that takes in the lengths of two sides of a rectangle and \n    returns the area.\n    '''\n    return length*width\n    \ndef rectangle_diagonal(length,width):\n    '''\n    Write a function that takes in the lengths of two sides of a rectangle and \n    returns the diagonal.\n    '''\n    return (length**2 + width**2)**(1/2)\n    \ndef rectangle_center(length,width):\n    '''\n    Write a function that takes in the lengths of two sides of a rectangle and \n    returns the center of the rectangle.\n    '''\n    return (length/2,width/2)\n    \ndef circle_circumference(radius):\n    '''\n    Write a function that takes in the radius of a circle and returns the \n    circumference of that circle.\n    '''\n    return 2*3.14*radius\n    \ndef circle_area(radius):\n    '''\n    Write a function that takes in the radius of a circle and returns the \n    area of that circle.\n    '''\n    return 3.14*radius**2\n    \ndef rectangle_slide(length,width):\n    '''\n    Write a function that takes in the lengths of two sides of a rectangle and \n    returns the area of the rectangle when the slide edge is parallel with \n    the bottom edge.\n    '''\n    return length*width\n    \ndef rectangle_rotation(length,width,angle):\n    '''\n    Write a function that takes in the lengths of two sides of a rectangle and \n    the angle of the rectangle and returns the area of the rectangle when the \n    lengths of the sides are rotated.\n    '''\n    return (length**2 + width**2)**(1/2)*(1/2)*(angle)\n    \ndef rectangle_area(length,width):\n    '''\n    Write a function that takes in the lengths of two sides of a rectangle and \n    returns the area of the rectangle when the length of the bottom edge is \n    parallel to the top edge.\n    '''\n    return length*width\n    \ndef rectangle_diagonal(length,width):\n    '''\n    Write a function that takes in the lengths of two sides of a rectangle and \n    returns the diagonal of the rectangle.\n    '''\n    return (length**2 + width**2)**(1/2)\n    \ndef rectangle_ratio(length,width):\n    '''\n    Write a function that takes in the lengths of two sides of a rectangle and \n    returns the ratio of the length to the width.\n    '''\n    return length/width\n    \ndef rectangle_diagonal_2(length,width):\n    '''\n    Write a function that takes in the lengths of two sides of a rectangle and \n    returns the diagonal of the rectangle.\n    '''\n    return (length**2 + width**2)**(1/2)\n    \ndef rectangle_diagonal_3(length,width):\n    '''\n    Write a function that takes in the lengths of two sides of a rectangle and \n    returns the diagonal of the rectangle.\n    '''\n    return (length**2 + width**2)**(1/2)\n    \ndef rectangle_perimeter(length,width):\n    '''\n    Write a function that takes in the lengths of two sides of a rectangle and \n    returns the perimeter of the rectangle.\n    '''\n    return 2*(length+width)\n    \ndef rectangle_perimeter(length,width):\n    '''\n    Write a function that takes in the lengths of two sides of a rectangle and \n    returns the perimeter of the rectangle.\n    '''\n    return 2*(length+width)\n    \ndef rectangle_perimeter(length,width):\n    '''\n    Write a function that takes in the lengths of two sides of a rectangle and \n    returns the perimeter of the rectangle.\n    '''\n    return 2*(length+width)\n    \ndef rectangle_diagonal(length,width):\n    '''\n    Write a function that takes in the lengths of two sides of a rectangle and \n    returns the diagonal of the rectangle.\n    '''\n    return (length**2 + width**2)**(1/2)\n    \ndef rectangle_diagonal(length,width):\n    '''\n    Write a function that takes in the lengths of two sides of a rectangle and \n    returns the diagonal of the rectangle.\n    '''\n    return (length**2 + width**2)**(1/2)\n    \ndef rectangle_area(length,width):\n    '''\n    Write a function that takes in the lengths of two sides of a rectangle and \n    returns the area of the rectangle.\n    '''\n    return length*width\n    \ndef rectangle_area(length,width):\n    '''\n    Write a function that takes in the lengths of two sides of a rectangle and \n    returns the area of the rectangle.\n    '''\n    return length*width\n    \ndef rectangle_area(length,width):\n    '''\n    Write a function that takes in the lengths of two sides of a rectangle and \n    returns the area of the rectangle.\n    '''\n    return length*width\n    \ndef rectangle_area(length,width):\n    '''\n    Write a function that takes in the lengths of two sides of a rectangle and \n    returns the area of the rectangle.\n    '''\n    return length*width\n    \ndef rectangle_area(length,width):\n    '''\n    Write a function that takes in the lengths of two sides of a rectangle and \n    returns the area of the rectangle.\n    '''\n    return length*width\n    \ndef rectangle_area(length,width):\n    '''\n    Write a function that takes in the lengths of two sides of a rectangle and \n    returns the area of the rectangle.\n    '''\n    return length*width\n    \ndef rectangle_area(length,width):\n    '''\n    Write a function that takes in the lengths of two sides of a rectangle and \n    returns the area of the rectangle.\n    '''\n    return length*width\n    \ndef rectangle_area(length,width):\n    '''\n    Write a function that takes in the lengths of two sides of a rectangle and \n    returns the area of the rectangle.\n    '''\n    return length*width\n    \ndef rectangle_area(length,width):\n    '''\n    Write a function that takes in the lengths of two sides of a rectangle and \n    returns the area of the rectangle.\n    '''\n    return length*width\n    \ndef rectangle_area(length,width):\n    '''\n    Write a function that takes in the lengths of two sides of a rectangle and \n    returns the area of the rectangle.\n    '''\n    return length*width\n    \ndef rectangle_area(length,width):\n    '''\n    Write a function that takes in the lengths of two sides of a rectangle and \n    returns the area of the rectangle.\n    '''\n    return length*width\n    \ndef rectangle_area(length,width):\n    '''\n    Write a function that takes in the lengths of two sides of a rectangle and \n    returns the area of the rectangle.\n    '''\n    return length*width\n    \ndef rectangle_area(length,width):\n    '''\n    Write a function that takes in the lengths of two sides of a rectangle and \n    returns the area of the rectangle.\n    '''\n    return length*width\n    \ndef rectangle_area(length,width):\n    '''\n    Write a function that takes in the lengths of two sides of a rectangle and \n    returns the area of the rectangle.\n    '''\n    return length*width\n    \ndef rectangle_area(length,width):\n    '''\n    Write a function that takes in the lengths of two sides of a rectangle and \n    returns the area of the rectangle.\n    '''\n    return length*width\n    \ndef rectangle_area(length,width):\n    '''\n    Write a function that takes in the lengths of two sides of a rectangle and \n    returns the are"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1+base2)/2)*height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1 + base2)/2) * height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return.5*(base1+base2)*height\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 <= 0 or base2 <= 0 or height <= 0:\n        return None\n    if base1 <= height or base2 <= height:\n        return None\n    return ((base1+base2)/2)*height\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i < number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    try:\n        if type(arr) is not list:\n            raise TypeError('Please provide an array.')\n        else:\n            for i in arr:\n                if type(i) is not int:\n                    raise TypeError('Please provide integer elements of the array.')\n                else:\n                    if i > number:\n                        return True\n                    else:\n                        continue\n    except TypeError as e:\n        print(e)\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[len(arr)-1]:\n        print('Greater')\n    else:\n        print('Smaller')\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if(len(arr)==0):\n        return\n    arr.sort()\n    if arr[len(arr)-1]<number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr[-1] < number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr == []:\n        return True\n    else:\n        if arr[0] > number:\n            return True\n        else:\n            return check_greater(arr[1:], number)\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a*b')\n    return pattern.match(text)\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search('ab+', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search('ab*', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search('a*', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search('a+', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search('a?', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search('a{3}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search('a{2,3}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search('a{3,}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search('a{1,3}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search('a{0,3}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search('a{0,4}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search('a{0,5}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search('a{0,6}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search('a{0,7}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search('a{0,8}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search('a{0,9}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search('a{0,10}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search('a{0,11}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search('a{0,12}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search('a{0,13}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_twenty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search('a{0,14}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_twenty_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search('a{0,15}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_twenty_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search('a{0,16}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_twenty_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search('a{0,17}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_twenty_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search('a{0,18}', text)\n    if match:\n        print(match.group())\n    else:\n        print('No Match')\ndef text_match_twenty_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #pattern = re.compile(r'a+b')\n    #match = pattern.match(text)\n    #if match:\n    #    print match.group()\n    #else:\n    #    print'match not found'\n    pattern = re.compile(r'a+b')\n    match = pattern.search(text)\n    if match:\n        print match.group()\n    else:\n        print'match not found'\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #pattern = re.compile(r'a+b')\n    #match = pattern.match(text)\n    #if match:\n    #    print match.group()\n    #else:\n    #    print'match not found'\n    pattern = re.compile(r'a+b')\n    match = pattern.search(text)\n    if match:\n        print match.group()\n    else:\n        print'match not found'\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #pattern = re.compile(r'a+b')\n    #match = pattern.match(text)\n    #if match:\n    #    print match.group()\n    #else:\n    #    print'match not found'\n    pattern = re.compile(r'a+b')\n    match = pattern.search(text)\n    if match:\n        print match.group()\n    else:\n        print'match not found'\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #pattern = re.compile(r'a+b')\n    #match = pattern.match(text)\n    #if match:\n    #    print match.group()\n    #else:\n    #    print'match not found'\n    pattern = re.compile(r'a+b')\n    match = pattern.search(text)\n    if match:\n        print match.group()\n    else:\n        print'match not found'\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #pattern = re.compile(r'a+b')\n    #match = pattern.match(text)\n    #if match:\n    #    print match.group()\n    #else:\n    #    print'match not found'\n    pattern = re.compile(r'a+b')\n    match = pattern.search(text)\n    if match:\n        print match.group()\n    else:\n        print'match not found'\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #pattern = re.compile(r'a+b')\n    #match = pattern.match(text)\n    #if match:\n    #    print match.group()\n    #else:\n    #    print'match not found'\n    pattern = re.compile(r'a+b')\n    match = pattern.search(text)\n    if match:\n        print match.group()\n    else:\n        print'match not found'\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #pattern = re.compile(r'a+b')\n    #match = pattern.match(text)\n    #if match:\n    #    print match.group()\n    #else:\n    #    print'match not found'\n    pattern = re.compile(r'a+b')\n    match = pattern.search(text)\n    if match:\n        print match.group()\n    else:\n        print'match not found'\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #pattern = re.compile(r'a+b')\n    #match = pattern.match(text)\n    #if match:\n    #    print match.group()\n    #else:\n    #    print'match not found'\n    pattern = re.compile(r'a+b')\n    match = pattern.search(text)\n    if match:\n        print match.group()\n    else:\n        print'match not found'\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #pattern = re.compile(r'a+b')\n    #match = pattern.match(text)\n    #if match:\n    #    print match.group()\n    #else:\n    #    print'match not found'\n    pattern = re.compile(r'a+b')\n    match = pattern.search(text)\n    if match:\n        print match.group()\n    else:\n        print'match not found'\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #pattern = re.compile(r'a+b')\n    #match = pattern.match(text)\n    #if match:\n    #    print match.group()\n    #else:\n    #    print'match not found'\n    pattern = re.compile(r'a+b')\n    match = pattern.search(text)\n    if match:\n        print match.group()\n    else:\n        print'match not found'\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #pattern = re.compile(r'a+b')\n    #match = pattern.match(text)\n    #if match:\n    #    print match.group()\n    #else:\n    #    print'match not found'\n    pattern = re.compile(r'a+b')\n    match = pattern.search(text)\n    if match:\n        print match.group()\n    else:\n        print'match not found'\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #pattern = re.compile(r'a+b')\n    #match = pattern.match(text)\n    #if match:\n    #    print match.group()\n    #else:\n    #    print'match not found'\n    pattern = re.compile(r'a+b')\n    match = pattern.search(text)\n    if match:\n        print match.group()\n    else:\n        print'match not found'\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #pattern = re.compile(r'a+b')\n    #match = pattern.match(text)\n    #if match:\n    #    print match.group()\n    #else:\n    #    print'match not found'\n    pattern = re.compile(r'a+b')\n    match = pattern.search(text)\n    if match:\n        print match.group()\n    else:\n        print'match not found'\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #pattern = re.compile(r'a+b')\n    #match = pattern.match(text)\n    #if match:\n    #    print match.group()\n    #else:\n    #    print'match not found'\n    pattern = re.compile(r'a+b')\n    match = pattern.search(text)\n    if match:\n        print match.group()\n    else:\n        print'match not found'\ndef text_match_fifteen(text):"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'^a.+b$'\n    if re.match(pattern, text):\n        return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.search(r\"a[ab]+\", text)\n    if result:\n        return result.group()\n    else:\n        return None\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    return pattern.search(text)\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+',text)\n    if match:\n        return match.group(0)\n    else:\n        return None\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab{2}',text)\n    if match:\n        return match.group(0)\n    else:\n        return None\n    \ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab{2,}',text)\n    if match:\n        return match.group(0)\n    else:\n        return None\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+',text)\n    if match:\n        return match.group(0)\n    else:\n        return None\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    print(re.findall(r'a+b',text))\ndef text_match_all(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    print(re.findall(r'a*b',text))\ndef text_match_zero(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    print(re.findall(r'a{2,}b',text))\ndef text_match_zero_or_more(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    print(re.findall(r'a{0,}b',text))\ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    print(re.findall(r'a{1,}b',text))\ndef text_match_no_groups(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    print(re.findall(r'a?b',text))\ndef text_match_back(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    print(re.findall(r'a\\bb',text))\ndef text_match_escape(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    print(re.findall(r'a\\bb',text))\ndef text_match_dot(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    print(re.findall(r'a\\.',text))\ndef text_match_dot_but_not_escaped(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    print(re.findall(r'a\\\\',text))\ndef text_match_dot_and_escaped(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    print(re.findall(r'a\\\\\\\\',text))\ndef text_match_or(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    print(re.findall(r'a|b',text))\ndef text_match_or_not_escaped(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    print(re.findall(r'a\\\\|b',text))\ndef text_match_or_and_escaped(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    print(re.findall(r'a\\\\|b',text))\ndef text_match_caret(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    print(re.findall(r'a^b',text))\ndef text_match_caret_and_escaped(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    print(re.findall(r'a\\\\^b',text))\ndef text_match_caret_and_not_escaped(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    print(re.findall(r'a\\\\^b',text))\ndef text_match_or_caret(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    print(re.findall(r'a|b^',text))\ndef text_match_or_caret_and_escaped(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    print(re.findall(r'a\\\\|b^',text))\ndef text_match_or_caret_and_not_escaped(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    print(re.findall(r'a\\\\|b^',text))\ndef text_match_paren(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    print(re.findall(r'a\\)',text))\ndef text_match_paren_and_escaped(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    print(re.findall(r'a\\\\\\)',text))\ndef text_match_paren_and_not_escaped(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    print(re.findall(r'a\\\\\\)',text))\ndef text_match_dot_followed_by_paren(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    print(re.findall(r'a\\.\\)',text))\ndef text_match_dot_followed_by_paren_and_escaped(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    print(re.findall(r'a\\\\\\.\\)',text))\ndef text_match_dot_followed_by_paren_and_not_escaped(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    print(re.findall(r'a\\\\\\.\\)',text))\ndef text_match_two_or_more_and_one_before_or_after_b(text):\n    '''\n    Write a function that matches a string that has an a followed by two or more b's, followed by one or more b's, followed by an or followed by an or.\n    '''\n    print(re.findall(r'a{2,}(?=(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?b?(b|b?"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.search(r'ab+', text)\n    return result\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"(a)(.*)(b)\"\n    res = re.search(pattern, text)\n    if res:\n        print(\"Match found: {0}\".format(res.group()))\n    else:\n        print(\"No match found.\")\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    \n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = 0\n    while(n!=0) :\n        last_digit = n % 10\n        n = n / 10\n    return last_digit\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    while n/10 > 0:\n        n = n/10\n    return n\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = abs(n)\n    if n < 10 :\n        return n\n    return (n%10)\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n    \ndef SumLastDigit(n) :\n    '''\n    Write a python function to calculate the sum of the last digits of all the numbers in a given list.\n    '''\n    return sum(int(x%10) for x in n)\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    \n    if n<10 :\n        return n\n    else:\n        return last_Digit(n/10)\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n    \ndef count_letters(words):\n    '''\n    Write a python function to count the letters in a string.\n    '''\n    count = 0\n    for i in words:\n        count += len(i)\n    return count\n    \ndef rev_words(words):\n    '''\n    Write a python function to reverse the words of a string.\n    '''\n    word_list = words.split()\n    word_list.reverse()\n    return''.join(word_list)\n    \ndef odd_digits(digits):\n    '''\n    Write a python function to return the odd digits of a number.\n    '''\n    digit_list = list(digits)\n    odd_list = []\n    for i in digit_list:\n        if int(i) % 2 == 1:\n            odd_list.append(i)\n    return ''.join(odd_list)\n    \ndef div_by_3(numbers):\n    '''\n    Write a python function to return the numbers divisible by 3.\n    '''\n    num_list = list(numbers)\n    div_list = []\n    for i in num_list:\n        if i % 3 == 0:\n            div_list.append(i)\n    return ''.join(div_list)\n    \ndef add_digits(numbers):\n    '''\n    Write a python function to return the sum of the digits of a number.\n    '''\n    num_list = list(numbers)\n    digit_sum = 0\n    for i in num_list:\n        digit_sum += int(i)\n    return digit_sum\n    \ndef first_last(str1):\n    '''\n    Write a python function to return the first and last letters of a string.\n    '''\n    first = str1[0]\n    last = str1[-1]\n    return first + last\n    \ndef same_first_last(words):\n    '''\n    Write a python function to return True if the first and last letters of a string are the same,\n    False if not.\n    '''\n    if len(words) > 1:\n        if words[0] == words[-1]:\n            return True\n        else:\n            return False\n    else:\n        return False\n    \ndef reverse_first_last(words):\n    '''\n    Write a python function to reverse the first and last letters of a string.\n    '''\n    if len(words) > 1:\n        first = words[0]\n        last = words[-1]\n        return last + first + words[2: -1] + words[1]\n    else:\n        return ''\n    \ndef palindrome(words):\n    '''\n    Write a python function to check if a string is a palindrome.\n    '''\n    if len(words) > 1:\n        if words == words[::-1]:\n            return True\n        else:\n            return False\n    else:\n        return True\n    \ndef is_pangram(str1):\n    '''\n    Write a python function to check if a string is a pangram.\n    '''\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    for i in alphabet:\n        if i not in str1.lower():\n            return False\n    return True\n    \ndef count_code(str1):\n    '''\n    Write a python function to count the number of code characters in a string.\n    '''\n    num_code = 0\n    for i in str1:\n        if i == 'c' or i == 'o' or i == 'd':\n            num_code += 1\n    return num_code\n    \ndef count_hi(str1):\n    '''\n    Write a python function to count the number of hi characters in a string.\n    '''\n    num_hi = 0\n    for i in str1:\n        if i == 'h' or i == 'i':\n            num_hi += 1\n    return num_hi\n    \ndef cat_dog(str1):\n    '''\n    Write a python function to check if the string contains the substring cat and dog.\n    '''\n    if str1.find('cat')!= -1 and str1.find('dog')!= -1:\n        return True\n    else:\n        return False\n    \ndef count_evens(numbers):\n    '''\n    Write a python function to return the number of even numbers in a list.\n    '''\n    num_list = list(numbers)\n    num_even = 0\n    for i in num_list:\n        if i % 2 == 0:\n            num_even += 1\n    return num_even\n    \ndef count_odds(numbers):\n    '''\n    Write a python function to return the number of odd numbers in a list.\n    '''\n    num_list = list(numbers)\n    num_odd = 0\n    for i in num_list:\n        if i % 2 == 1:\n            num_odd += 1\n    return num_odd\n    \ndef count_ab(str1):\n    '''\n    Write a python function to count the number of ab characters in a string.\n    '''\n    num_ab = 0\n    for i in str1:\n        if i == 'a' or i == 'b':\n            num_ab += 1\n    return num_ab\n    \ndef count_i(str1):\n    '''\n    Write a python function to count the number of i characters in a string.\n    '''\n    num_i = 0\n    for i in str1:\n        if i == 'i':\n            num_i += 1\n    return num_i\n    \ndef count_n(str1):\n    '''\n    Write a python function to count the number of n characters in a string.\n    '''\n    num_n = 0\n    for i in str1:\n        if i == 'n':\n            num_n += 1\n    return num_n\n    \ndef count_letter_a(str1):\n    '''\n    Write a python function to count the number of a characters in a string.\n    '''\n    num_a = 0\n    for i in str1:\n        if i == 'a':\n            num_a += 1\n    return num_a\n    \ndef get_middle(str1):\n    '''\n    Write a python function to return the middle string of a string.\n    '''\n    return str1[len(str1) / 2 : -1] + str1[len(str1) / 2 + 1 : ]\n    \ndef get_longest_palindrome(str1):\n    '''\n    Write a python function to return the longest palindrome in a string.\n    '''\n    if len(str1) == 0:\n        return ''\n    elif len(str1) == 1:\n        return str1\n    else:\n        for i in range(0, len(str1)):\n            temp_string = str1[i : len(str1) - i]\n            if temp_string == temp_string[::-1]:\n                return temp_string\n    return ''\n    \ndef max_count_letter(str1):\n    '''\n    Write a python function to return the character that has the most occurrences.\n    '''\n    max_letters = ''\n    max_count = 0\n    for i in str1:\n        count = 0\n        for j in str1:\n            if i == j:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_letters = i\n    return max_letters\n    \ndef is_unique(str1):\n    '''\n    Write a python function to check if a string has all unique characters.\n    '''\n    letters = []\n    for i in str1:\n        if i not in letters:\n            letters.append(i)\n    return len(letters) == 26\n    \ndef is_unique_2(str1):\n    '''\n    Write a python function to check if a string has all unique characters.\n    '''"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for x in list1:\n        if x < 0:\n            list2.append(x)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    new_list = []\n    for i in list1:\n        if i < 0:\n            new_list.append(i)\n    return new_list\n    "
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    new_list = [i for i in list1 if i < 0]\n    return new_list\nprint neg_nos([-1, 2, -3, 4, 5, 6, -7, 8, -9])\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n    \n    \n    \ndef neg_nos1(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n    \n    \n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [-1 * x for x in list1]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            list2.append(list1[i])\n    return list2\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(str1.split(' ')[::2])\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    a = ''\n    for i in str1:\n        if ord(i)%2 == 0:\n            a = a+i\n    return a\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for i in range(len(str1)):\n        if i%2 == 0:\n            new_str += str1[i]\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in range(len(str1)):\n        if ord(str1[i])%2!=0:\n            str1=str1.replace(str1[i],'',1)\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([x for x in str1 if x.isdigit()])\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = ''\n    for i in str1:\n        if ord(i)%2==0:\n            str2 = str2 + i\n    return str2\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str1 = ''\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            new_str1 += str1[i]\n    return new_str1\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Use a stack to store indices\n    stack = []\n    # Loop through str1\n    for i, char in enumerate(str1):\n        # If the current index is even, append it to the stack\n        if i % 2 == 0:\n            stack.append(i)\n    # Initialize a new string\n    str2 = ''\n    # Loop through the stack\n    for i in stack:\n        # Append the character at that index to the new string\n        str2 += str1[i]\n    # Return the new string\n    return str2\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for c in str1:\n        if ord(c)%2 == 0:\n            result += c\n    return result\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    output = ''\n    for char in str1:\n        if not ord(char) % 2:\n            output += char\n    return output\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in test_list:\n        if (i[0] == i[1]) or (i[0] == -i[1]):\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    tuple_dict = {}\n    for i in range(0, len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                tuple_dict.setdefault(test_list[i], 0)\n                tuple_dict[test_list[i]] += 1\n                tuple_dict.setdefault(test_list[j], 0)\n                tuple_dict[test_list[j]] += 1\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return len([i for i in range(len(test_list)-1)\n    if test_list[i][1] == test_list[i+1][0]])\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    forward_list = []\n    backward_list = []\n    for item in test_list:\n        if item[0] == item[1]:\n            forward_list.append(item)\n        if item[1] == item[0]:\n            backward_list.append(item)\n    return (len(forward_list), len(backward_list))\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    def count_pairs(test_list):\n        '''\n        Return a list of tuples containing the idx of the matching element.\n        '''\n        n = len(test_list)\n        m = len(test_list[0])\n        \n        idx = []\n        for i in range(n):\n            for j in range(i + 1, n):\n                if test_list[i][0] == test_list[j][1] and \\\n                test_list[i][1] == test_list[j][0]:\n                    idx.append((i, j))\n        \n        return idx\n    \n    def check_bidirectional(idx, test_list):\n        '''\n        Return a list of tuples containing the idx of the matching element.\n        '''\n        \n        n = len(test_list)\n        m = len(test_list[0])\n        \n        for i, j in idx:\n            if i < j:\n                if test_list[i][0]!= test_list[j][1]:\n                    idx.remove((i, j))\n            elif i > j:\n                if test_list[i][1]!= test_list[j][0]:\n                    idx.remove((i, j))\n        \n        return idx\n    \n    idx = count_pairs(test_list)\n    idx = check_bidirectional(idx, test_list)\n    \n    return len(idx)\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in xrange(len(test_list)):\n        for j in xrange(len(test_list)):\n            if i <= j and test_list[i] < test_list[j]:\n                count += 1\n            if i > j and test_list[i] > test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    list_len = len(test_list)\n    d = {}\n    for x in range(0, list_len):\n        d[x] = []\n        for y in range(x, list_len):\n            if test_list[x][1] == test_list[y][0]:\n                d[x].append(y)\n                \n    return len(d[x])\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i][0] < test_list[j][0] and test_list[i][1] > test_list[j][1]:\n                count += 1\n            if test_list[i][0] > test_list[j][0] and test_list[i][1] < test_list[j][1]:\n                count += 1\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return 0\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    n = len(test_list)\n    if n < 4:\n        return 0\n    pairs = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if test_list[i] < test_list[j]:\n                pairs += 1\n            if test_list[i] > test_list[j]:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    ans = 0\n    for i in L:\n        ans = ans * 10 + i\n    return ans\n    \ndef single_to_multiple(i):\n    ans = []\n    while i > 0:\n        ans.append(i % 10)\n        i = i // 10\n    return ans[::-1]\n    \ndef to_camel_case(s):\n    '''\n    You are given a string in the format [a-zA-Z].\n    You need to change it to camelCase. \n    '''\n    s = s.split('-')\n    ans = ''\n    for i in s:\n        ans += i[0].upper() + i[1:]\n    return ans\n    \ndef rotate_matrix(M):\n    '''\n    Given a 2D array, rotate it by 90 degrees.\n    '''\n    ans = []\n    for i in range(len(M)):\n        ans.append([])\n        for j in range(len(M[i])):\n            ans[j].append(M[len(M)-i-1][j])\n    return ans\n    \ndef max_product(L):\n    '''\n    Write a function to find the maximum product of three integers in an array.\n    '''\n    ans = L[0] * L[1] * L[2]\n    for i in range(len(L)):\n        for j in range(len(L)):\n            if i == j:\n                continue\n            for k in range(len(L)):\n                if i == k or j == k:\n                    continue\n                ans = max(ans, L[i] * L[j] * L[k])\n    return ans\n    \ndef largest_prime_factor(n):\n    '''\n    Given an integer n, find the largest prime factor of n.\n    '''\n    ans = -1\n    for i in range(2, int(n**0.5)+1):\n        while n % i == 0:\n            ans = i\n            n /= i\n    if n > 2:\n        ans = n\n    return ans\n    \ndef rotate_strings(S):\n    '''\n    Given an array of strings, write a function to find the longest string that is a \n    rotation of another string in the array.\n    '''\n    ans = ''\n    for i in S:\n        for j in range(1, len(i)+1):\n            if (i[-j:] + i[:-j]) == i:\n                ans = i\n                break\n        if len(ans) > 0:\n            break\n    return ans\n    \ndef is_anagram(s, t):\n    '''\n    Given two strings s and t, write a function to determine if t is an anagram of s.\n    '''\n    if len(s)!= len(t):\n        return False\n    d = {}\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for j in t:\n        if j not in d:\n            return False\n        else:\n            d[j] -= 1\n    for k in d:\n        if d[k]!= 0:\n            return False\n    return True\n    \ndef hash_anagrams(L):\n    '''\n    Given a list of strings, compute the number of anagrams in the list.\n    '''\n    ans = {}\n    for i in L:\n        s = ''.join(sorted(i))\n        if s in ans:\n            ans[s] += 1\n        else:\n            ans[s] = 1\n    return ans\n    \ndef repeated_dna(s):\n    '''\n    Given a DNA string s, return the number of times it occurs in a\n    pre-existing DNA string, as well as the starting position of its\n    first occurrence.\n    '''\n    ans = 1\n    ind = 0\n    while ind < len(s):\n        if s[ind] == s[ind+1]:\n            ans += 1\n            ind += 2\n        else:\n            ind += 1\n    return [ans, ind]\n    \ndef hamming_distance(s, t):\n    '''\n    Given two strings, compute the Hamming distance between them.\n    '''\n    if len(s)!= len(t):\n        return -1\n    ans = 0\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            ans += 1\n    return ans\n    \ndef num_splits(s, t):\n    '''\n    Given two strings s and t, compute the number of ways in which s can be split\n    into t.\n    '''\n    if len(s) < len(t):\n        return 0\n    ans = 0\n    for i in range(len(s)-len(t)+1):\n        if s[i:i+len(t)] == t:\n            ans += 1\n    return ans\n    \ndef word_search(L, W):\n    '''\n    Given a list of strings L and a string W, determine if W is a prefix of\n    one string in L.\n    '''\n    ans = False\n    for i in L:\n        if i.startswith(W):\n            ans = True\n            break\n    return ans\n    \ndef binary_search(L, i):\n    '''\n    Given a list of integers L and an integer i, return True if i is in L,\n    False otherwise.\n    '''\n    ans = False\n    left = 0\n    right = len(L) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if i == L[mid]:\n            ans = True\n            break\n        elif i > L[mid]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return ans\n    \ndef find_missing_numbers(L):\n    '''\n    Given an array of integers between 1 and n, inclusive, where n is the length\n    of the array, some numbers may be missing from the array.\n    Count the number of such missing numbers.\n    '''\n    ans = 0\n    for i in range(1, len(L)+1):\n        if i not in L:\n            ans += 1\n    return ans\n    \ndef longest_word(s):\n    '''\n    Given a string, find the length of the longest word. A word is defined to be\n    a string containing only alphabetic characters.\n    '''\n    ans = 1\n    for i in s:\n        if i.isalpha():\n            ans += 1\n        else:\n            ans = 1\n    return ans\n    \ndef longest_nonrepeating_substring(s):\n    '''\n    Given a string, find the length of the longest substring without repeating \n    characters. For example, the longest substring without repeating letters for\n    \"abcabcbb\" is \"abc\", which the length is 3. For \"bbbbb\" the longest substring\n    is \"b\", with the length of 1.\n    '''\n    ans = []\n    start = 0\n    for i in range(len(s)):\n        if s[i] in ans:\n            start = max(ans.index(s[i]) + 1, start)\n        ans.append(s[i])\n    return len(ans) - start\n    \ndef repeating_dna(s):\n    '''\n    Given a DNA string s, compute the number of times it occurs in a pre-existing \n    DNA string, as well as the number of times it suffices to be repeated to \n    make the DNA string.\n    '''\n    ans = 1\n    count = 0\n    for i in range(len(s) - 1):\n        if s[i] == s[i+1]:\n            count += 1\n        else:\n            ans *= count + 1\n            count = 0\n    return [ans, count]\n    \ndef rotate_matrix_by_90(M):\n    '''\n    Given a 2D array of integers, rotate the array by 90 degrees.\n    '''\n    ans = []\n    for i in range(len(M)):\n        ans.append([])\n        for j in range(len(M[i])):\n            ans[i].append(M[len(M)-j-1][i])\n    return ans\n    \ndef convert_to_base_2(n):\n    '''\n    Write a function that takes "
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    x = 0\n    for i in L:\n        x = x * 10 + i\n    return x\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 1:\n        return L[0]\n    elif len(L) == 2:\n        return L[0] * 10 + L[1]\n    else:\n        return multiple_to_single(L[1:]) * 10 + L[0]\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(x) for x in L]))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(e) for e in L))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(str(x) for x in L))\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # return reduce(lambda x,y: x*10+y,L)\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    num = 0\n    for i in L:\n        num = num * 10 + i\n    return num\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # L = [i for i in L]\n    # L = [str(i) for i in L]\n    # L = int(''.join(L))\n    # return L\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    regex = r'\\w+'\n    word = re.findall(regex,text)\n    word_list = list(word)\n    adverb = re.findall(r'\\w+ly',text)\n    adverb_list = list(adverb)\n    for i in word_list:\n        if i in adverb_list:\n            adverb_position = word_list.index(i)\n            break\n    return adverb_position\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #adverbs = [r'adverb',r'adv',r'adv.']\n    adverbs = [r'adv.',r'adv',r'adverb']\n    regex = '(?<=\\s)(' + '|'.join(adverbs) + ')'\n    #regex = '(?<=\\s)(adv\\.)'\n    matches = re.findall(regex, text, re.IGNORECASE)\n    #print matches\n    if matches:\n        return zip(matches, [m.start() for m in re.finditer(regex, text, re.IGNORECASE)])\n    else:\n        return []\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pos_list = []\n    for i in range(len(text)):\n        if text[i:i+3] == 'adv':\n            pos_list.append(i)\n    return pos_list\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # regex to match all adverbs\n    regex_adverb = re.compile('\\w+ly\\w*')\n    matches = regex_adverb.findall(text)\n    \n    if len(matches)==0:\n        return []\n    else:\n        return [text.find(match) for match in matches]\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    search_pattern = re.compile(r'(^.*?)(([\\w\\s]+)(\\w*))', re.IGNORECASE)\n    search_obj = re.search(search_pattern, text)\n    # print(\"The text is:\", text)\n    if search_obj:\n        print(\"The first adverb is:\", search_obj.group(3))\n        print(\"The adverb's position is:\", search_obj.start(3))\n    else:\n        print(\"There is no adverb\")\ndef word_length(text):\n    '''\n    Write a function to find the average word length in a sentence.\n    '''\n    words = re.findall(r'\\w+', text)\n    print(\"There are\", len(words), \"words in the sentence\")\n    print(\"The average word length is\", sum(len(word) for word in words) / len(words))\ndef first_four_char(text):\n    '''\n    Write a function that takes a sentence and returns the first four characters\n    of that sentence.\n    '''\n    first_four_char = re.findall(r'\\w{4}', text)\n    print(\"The first four characters of the sentence is:\", first_four_char)\ndef last_four_char(text):\n    '''\n    Write a function that takes a sentence and returns the last four characters\n    of that sentence.\n    '''\n    last_four_char = re.findall(r'\\w{4}', text)\n    print(\"The last four characters of the sentence is:\", last_four_char)\ndef length_of_sentence(text):\n    '''\n    Write a function that takes a sentence and returns the length of the sentence.\n    '''\n    length = re.findall(r'[\\w\\s]*', text)\n    print(\"The length of the sentence is:\", len(length))\ndef valid_url(text):\n    '''\n    Write a function that takes a URL and returns the status code.\n    '''\n    valid_url = re.compile(r'((http|https):\\/\\/)?((www.)?[a-zA-Z0-9]+'+\\\n        r'(\\.[a-zA-Z0-9]+)*(\\.[a-zA-Z0-9]+)*(\\/[a-zA-Z0-9\\+\\-\\.\\?\\,\\=]+)*(\\.\\w{2,4}))', re.IGNORECASE)\n    if re.match(valid_url, text):\n        print(\"This is a valid URL\")\n    else:\n        print(\"This is not a valid URL\")\ndef valid_phone(text):\n    '''\n    Write a function that takes a phone number and returns true or false.\n    '''\n    valid_phone = re.compile(r'(^((\\d{3})|(\\(\\d{3}\\)))?(\\s|-|\\.)?(\\d{3})(\\s|-|\\.)?(\\d{4})$)', re.IGNORECASE)\n    if re.match(valid_phone, text):\n        print(\"This is a valid phone number\")\n    else:\n        print(\"This is not a valid phone number\")\ndef valid_email(text):\n    '''\n    Write a function that takes a email and returns true or false.\n    '''\n    valid_email = re.compile(r'(([a-zA-Z0-9]+)(\\.[a-zA-Z0-9_.]*[a-zA-Z0-9_.])*@[a-zA-Z0-9]+\\.[a-zA-Z]{2,})', re.IGNORECASE)\n    if re.match(valid_email, text):\n        print(\"This is a valid email\")\n    else:\n        print(\"This is not a valid email\")\ndef valid_ip(text):\n    '''\n    Write a function that takes an ip address and returns true or false.\n    '''\n    valid_ip = re.compile(r'(^(1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}(1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\s|-|\\.)([0-9]{1,3}|[1-9][0-9]{1,2}|1[0-9][0-9]{2}|2[0-4][0-9]|25[0-5])\\b', re.IGNORECASE)\n    if re.match(valid_ip, text):\n        print(\"This is a valid ip address\")\n    else:\n        print(\"This is not a valid ip address\")\ndef valid_ip_net(text):\n    '''\n    Write a function that takes a network address and returns true or false.\n    '''\n    valid_ip_net = re.compile(r'(^(1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}(1[0-9]{2}|2[0-4][0-9]|25[0-5])', re.IGNORECASE)\n    if re.match(valid_ip_net, text):\n        print(\"This is a valid ip network\")\n    else:\n        print(\"This is not a valid ip network\")\ndef valid_url_ip(text):\n    '''\n    Write a function that takes a url and returns true or false.\n    '''\n    valid_url_ip = re.compile(r'(^(http(s)?:\\/\\/)?(www.)?[a-zA-Z0-9\\+\\-\\.]+'+\\\n        r'(\\.[a-zA-Z]{2,4})+(\\/[a-zA-Z0-9\\+\\-\\.]+)*(\\.\\w{2,4})?$)', re.IGNORECASE)\n    if re.match(valid_url_ip, text):\n        print(\"This is a valid url and ip\")\n    else:\n        print(\"This is not a valid url and ip\")\ndef valid_url_ip_port(text):\n    '''\n    Write a function that takes a url and returns true or false.\n    '''\n    valid_url_ip_port = re.compile(r'(^(http(s)?:\\/\\/)?(www.)?[a-zA-Z0-9\\+\\-\\.]+'+\\\n        r'(\\.[a-zA-Z]{2,4})+(\\/[a-zA-Z0-9\\+\\-\\.]+)*(:\\d{2,5})?$)', re.IGNORECASE)\n    if re.match(valid_url_ip_port, text):\n        print(\"This is a valid url and ip and port\")\n    else:\n        print(\"This is not a valid url and ip and port\")\ndef valid_url_ip_port_query(text):\n    '''\n    Write a function that takes a url and returns true or false.\n    '''\n    valid_url_ip_port_query = re.compile(r'(^(http(s)?:\\/\\/)?(www.)?[a-zA-Z0-9\\+\\-\\.]+'+\\\n        r'(\\.[a-zA-Z]{2,4})+(\\/[a-zA-Z0-9\\+\\-\\.]+)*(:\\d{2,5})?\\?(\\w+)?$)', re.IGNORECASE)\n    if re.match(valid_url_ip_port_query, text):\n        print(\"This is a valid url and ip and port and query\")\n    else:\n        print(\"This is not a valid url and ip and port and query\")\ndef valid_url_ip_port_query_port(text):\n    '''\n    Write a function that takes a url and returns true or false.\n    '''\n    valid_url_ip_port_query_port = re.compile(r'(^(http(s)?:\\/\\/)?(www.)?[a-zA-Z0-9\\+\\-\\.]+'+\\\n        r'(\\.[a-zA-Z]{2,4})+(\\/[a"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # use re.findall() function to find adverb\n    adverb = re.findall(r'(?<=\\s)\\w+\\s?(?=adverb|adv\\.)',text)\n    # Use re.finditer() to find position of adverb\n    for i in re.finditer(r'\\w+\\s?(?=adverb|adv\\.)',text):\n        # Use group() function to get position of adverb\n        print('Adverb found:', i.group())\n    \n    # Use re.search() function to find adverb\n    # for i in re.search(r'adverb|adv\\.', text):\n    #     # use group() function to get position of adverb\n    #     print('Adverb found:', i.group())\n    \nfind_adverb_position('Find the adverb position in the sentence')\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb = re.findall(r'(?<=\\s)(adverb[\\w]*(?=\\s))',text)\n    return adverb\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    if 'first' in text:\n        print(re.findall('\\w+', text))\n    return\ndef replace_text(string,new_word,old_word):\n    '''\n    Write a function that replaces a word with another word\n    '''\n    return\ndef calculate_area(value):\n    '''\n    Write a function that accepts a measurement value(such as 2 or 2.5) and returns the area of a square or circle.\n    '''\n    try:\n        value = float(value)\n        if value > 0:\n            return value * value\n        elif value < 0:\n            return abs(value) * abs(value)\n        else:\n            return None\n    except ValueError:\n        return None\ndef calculate_volume(value):\n    '''\n    Write a function that accepts a measurement value(such as 2 or 2.5) and returns the volume of a cube or sphere.\n    '''\n    try:\n        value = float(value)\n        if value > 0:\n            return value * value * value\n        elif value < 0:\n            return abs(value) * abs(value) * abs(value)\n        else:\n            return None\n    except ValueError:\n        return None\ndef calculate_fuel(value):\n    '''\n    Write a function that accepts a measurement value(such as 2 or 2.5) and returns the fuel equivalent.\n    '''\n    try:\n        value = float(value)\n        if value > 0:\n            return value * 1.0\n        elif value < 0:\n            return abs(value) * 1.0\n        else:\n            return None\n    except ValueError:\n        return None\ndef is_fraction(value):\n    '''\n    Write a function that accepts a number and checks if it is a fraction.\n    '''\n    try:\n        value = float(value)\n        return value - int(value) == 0\n    except ValueError:\n        return False\ndef is_valid_date(value):\n    '''\n    Write a function that accepts a value in the format dd/mm/yyyy and checks if it is a valid date.\n    '''\n    try:\n        value = value.split('/')\n        if len(value) == 3:\n            for i in value:\n                if i.isdigit() is False:\n                    return False\n            return len(value[2]) == 4\n    except ValueError:\n        return False\n    except IndexError:\n        return False\ndef convert_to_roman(value):\n    '''\n    Write a function that accepts a number and returns the Roman equivalent\n    '''\n    return\ndef is_palindrome(value):\n    '''\n    Write a function that accepts a word and checks if it is a palindrome.\n    '''\n    return\ndef strip_punctuation(text):\n    '''\n    Write a function that accepts a word and returns a word with all the punctuation removed.\n    '''\n    return\ndef is_increasing_sequence(value):\n    '''\n    Write a function that accepts a word and checks if it is a increasing sequence.\n    '''\n    return\ndef is_pangram(text):\n    '''\n    Write a function that accepts a word and checks if it is a pangram.\n    '''\n    return\ndef make_username_valid(value):\n    '''\n    Write a function that accepts a string and returns a string made up of the characters in the input string in reverse order.\n    '''\n    return\ndef is_valid_email(value):\n    '''\n    Write a function that accepts a string and checks if it is a valid email.\n    '''\n    return\ndef is_anagram(word1,word2):\n    '''\n    Write a function that accepts two words and returns true if they are anagrams of each other\n    '''\n    return\ndef is_reverse_anagram(word1,word2):\n    '''\n    Write a function that accepts two words and returns true if they are reverse anagrams of each other\n    '''\n    return\ndef calculate_digits(value):\n    '''\n    Write a function that accepts a string and counts the number of digits\n    '''\n    return\ndef calculate_letters(value):\n    '''\n    Write a function that accepts a string and counts the number of letters\n    '''\n    return\ndef find_anagrams(word, dic):\n    '''\n    Write a function that accepts a word and a list of dictionary and returns the number of anagrams of the word in the list of dictionary\n    '''\n    return\ndef add_prices(price_list):\n    '''\n    Write a function that accepts a list of prices and returns the total price of the items in the list.\n    '''\n    return\ndef is_prime(value):\n    '''\n    Write a function that accepts a number and returns true if it is a prime number and false otherwise\n    '''\n    return\ndef most_common_word(string,dictionary):\n    '''\n    Write a function that accepts a string and a dictionary and returns the most common word in the string.\n    '''\n    return\ndef is_vowel(char):\n    '''\n    Write a function that accepts a character and returns true if it is a vowel and false otherwise\n    '''\n    return\ndef is_vowel2(char):\n    '''\n    Write a function that accepts a character and returns true if it is a vowel and false otherwise.\n    '''\n    return\ndef sum_digits(value):\n    '''\n    Write a function that accepts a string and returns the sum of the numbers in the string\n    '''\n    return\ndef find_digit(text,number):\n    '''\n    Write a function that accepts a string and returns the number of times the number is present in the string\n    '''\n    return\ndef find_most_common_word(string,dictionary):\n    '''\n    Write a function that accepts a string and a dictionary and returns the most common word in the string\n    '''\n    return\ndef find_digit(text,number):\n    '''\n    Write a function that accepts a string and returns the number of times the number is present in the string\n    '''\n    return\ndef validate_pin(pin):\n    '''\n    Write a function that accepts a 4 digit string and returns true if the first two digits are 10 and the last three digits are unique and false otherwise\n    '''\n    return\ndef is_sorted(value):\n    '''\n    Write a function that accepts a list of numbers and returns true if the list is sorted and false otherwise\n    '''\n    return\ndef is_same_first_last(value):\n    '''\n    Write a function that accepts a list of numbers and returns true if the first and last elements are equal and false otherwise\n    '''\n    return\ndef duplicate_number(value):\n    '''\n    Write a function that accepts a list of numbers and returns the number that appears an odd number of times. If there is no odd number of duplicates, return -1\n    '''\n    return\ndef add_string(string1,string2):\n    '''\n    Write a function that accepts two strings and returns a string that is the sum of the two strings\n    '''\n    return\ndef factorial(value):\n    '''\n    Write a function that accepts a number and returns the factorial of the number\n    '''\n    return\ndef unique_in_order(value):\n    '''\n    Write a function that accepts a list of items and returns a list of items that are unique in their order\n    '''\n    return\ndef swap_case(string):\n    '''\n    Write a function that accepts a string and returns the string with all the upper case letters converted to lower case and vice versa\n    '''\n    return\ndef is_binary(value):\n    '''\n    Write a function that accepts a number and returns true if the number is 0 or 1\n    '''\n    return\ndef is_valid_pin(pin):\n    '''\n    Write a function that accepts a four digit pin number and returns true if the first two digits are the same and the last three digits are unique and false otherwise\n    '''\n    return\ndef count_letters(string):\n    '''\n    Write a function that accepts a string and returns a dictionary that contains the number of each letter in the string as the key and the number of that letter as the value\n    '''\n    return\ndef get_word_lengths(string):\n    '''\n    Write a function that accepts a string and returns a list of lengths o"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    for i in range(len(text)):\n        if text[i] == 'r':\n            if i!= 0:\n                return i\n    return -1\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    r = re.compile(r'\\w*(?P<adverb>adverb)', re.IGNORECASE)\n    res = r.search(text)\n    if res:\n        print(\"The first adverb is:\", res.group('adverb'))\n        print(\"First adverb position:\", res.span())\n    else:\n        print(\"There is no adverb in the sentence\")\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    l = int(l)\n    return 6*l*l\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l**3\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    \n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    if l==1:\n        return 6\n    else:\n        return 6*l*l\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    print count/float(len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    total=0\n    for i in nums:\n        total+=i\n    print '%s/%s=%s'%(total,len(nums),float(total)/len(nums))\n    \ndef largest_sum(nums):\n    '''\n    Write a function to find the largest sum of the contiguous subarray within an array of numbers\n    that can contain negative integers.\n    '''\n    largest=nums[0]\n    current=nums[0]\n    for i in nums[1:]:\n        current=max(i,i+current)\n        largest=max(largest,current)\n    print largest\n    \ndef sum_array(nums):\n    '''\n    Write a function that takes in a non-empty array of integers and returns the sum of the \n    maximum sum subarray of nums.\n    '''\n    current=nums[0]\n    global_max=nums[0]\n    for i in nums[1:]:\n        current=max(i,i+current)\n        global_max=max(global_max,current)\n    print global_max\n    \ndef largest_sum(nums):\n    '''\n    Write a function that takes in a non-empty array of integers and returns an array of the\n    indexes of the array that represent the largest sum of a subarray of nums.\n    '''\n    if len(nums)==1:\n        return [0]\n    current=nums[0]\n    global_max=nums[0]\n    global_max_indexes=[]\n    for i in nums[1:]:\n        current=max(i,i+current)\n        if current>global_max:\n            global_max=current\n            global_max_indexes=[nums[0]]\n        elif current==global_max:\n            global_max_indexes.append(nums[0])\n        nums[0]+=1\n    return global_max_indexes\n    \ndef min_swaps(nums):\n    '''\n    Write a function that takes in an array of positive integers and returns the minimum number \n    of swaps that need to be performed on the array to make it sorted.\n    '''\n    def num_swaps(nums):\n        '''\n        Return the number of swaps needed to sort the array\n        '''\n        nums_sorted=sorted(nums)\n        for i,num in enumerate(nums_sorted):\n            if num!=num_sorted[i]:\n                return i\n        return 0\n    num_swaps=num_swaps(nums)\n    print num_swaps\n    \ndef even_number_of_swaps(nums):\n    '''\n    Write a function that takes in an array of integers and returns the number of pairs of \n    consecutive integers that are out of place.\n    '''\n    swaps=0\n    for i in range(len(nums)):\n        if (nums[i]!=i+1) and (nums[i+1]!=i):\n            swaps+=1\n    print swaps\n    \ndef k_sum(nums,target):\n    '''\n    Write a function that takes in an array of numbers and a target sum and returns a subset\n    of nums that sums up to the target sum.\n    '''\n    if len(nums)==0:\n        return []\n    if len(nums)==1:\n        return nums[0]\n    res=[]\n    first=nums[0]\n    second=k_sum(nums[1:],target-first)\n    if second!=None:\n        res.append(first)\n        res+=second\n    first=nums[0]\n    second=k_sum(nums[1:],target-first)\n    if second!=None:\n        res+=second\n    if len(res)==0:\n        return None\n    return res\n    \ndef k_sum_2(nums,target):\n    '''\n    Write a function that takes in an array of numbers and a target sum and returns a subset\n    of nums that sums up to the target sum.\n    '''\n    def helper(nums,target,k):\n        if k==0:\n            if target==0:\n                return [[]]\n            else:\n                return None\n        if target==0:\n            return [[]]\n        res=[]\n        for i in range(len(nums)):\n            sub=helper(nums[i+1:],target-nums[i],k-1)\n            if sub!=None:\n                for sub_list in sub:\n                    res.append([nums[i]]+sub_list)\n        return res\n    res=helper(nums,target,len(nums))\n    return res\n    \ndef find_k_length_strings(nums,k):\n    '''\n    Write a function that takes in an array of numbers and a target integer k and returns the \n    subsets of nums that sum to k.\n    '''\n    if len(nums)==0:\n        return []\n    if len(nums)==1:\n        return nums\n    res=[]\n    first=nums[0]\n    second=find_k_length_strings(nums[1:],k-1)\n    if second!=None:\n        res+=second\n        res.append([first])\n    first=nums[0]\n    second=find_k_length_strings(nums[1:],k)\n    if second!=None:\n        res+=second\n        res.append([first])\n    if len(res)==0:\n        return None\n    return res\n    \ndef is_subsequence(s1,s2):\n    '''\n    Write a function that takes in two strings and returns True if s2 is a \n    subsequence of s1, False otherwise.\n    '''\n    def find_string_helper(s1,s2,start):\n        if len(s2)==0:\n            return True\n        if len(s1)==0:\n            return False\n        if s1[0]==s2[0]:\n            if find_string_helper(s1[1:],s2[1:],start+1):\n                return True\n        return find_string_helper(s1[1:],s2[1:],start)\n    return find_string_helper(s1,s2,0)\n    \ndef count_construct(target,words):\n    '''\n    Write a function that takes in a string and an array of strings and returns the number\n    of ways that string can be constructed from the array of strings.\n    '''\n    def helper(target,words,index,memo):\n        if len(target)==0:\n            return 1\n        if target in memo:\n            return memo[target]\n        res=0\n        for i in range(index,len(words)):\n            if len(target)<len(words[i]):\n                if target[:len(words[i])]==words[i]:\n                    res+=helper(target[len(words[i]):],words,i,memo)\n        memo[target]=res\n        return res\n    memo={}\n    return helper(target,words,0,memo)\n    \ndef pythagorean_triplets(nums):\n    '''\n    Write a function that takes in an array of integers and returns a list of triples of \n    the form (i, j, k), such that i^2+j^2=k^2 and the triplets are from the array.\n    '''\n    res=[]\n    if len(nums)<3:\n        return res\n    nums.sort()\n    for i in range(len(nums)-2):\n        if i>0 and nums[i]==nums[i-1]:\n            continue\n        second=i+1\n        third=len(nums)-1\n        while second<third:\n            if nums[i]**2+nums[second]**2==nums[third]**2:\n                res.append([nums[i],nums[second],nums[third]])\n                second+=1\n                while second<third and nums[second]==nums[second-1]:\n                    second+=1\n            elif nums[i]*"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    \n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return float(count) / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    p_count = 0\n    for num in nums:\n        if num > 0:\n            p_count += 1\n    return float(p_count) / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos = 0\n    neg = 0\n    for i in nums:\n        if i > 0:\n            pos += 1\n        elif i < 0:\n            neg += 1\n    return float(pos)/float(len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for i in nums:\n        if i > 0:\n            positive_count += 1\n    return float(positive_count)/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if not nums:\n        return None\n    positive = 0\n    total = 0\n    for num in nums:\n        total += num\n        if num > 0:\n            positive += 1\n    return positive * 1.0 / total\ndef positive_count2(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if not nums:\n        return None\n    positive = sum(1 for num in nums if num > 0)\n    total = sum(nums)\n    return positive * 1.0 / total\ndef delete_max(nums):\n    '''\n    Write a function to delete the maximum number in an array of integers.\n    '''\n    if not nums:\n        return None\n    max_num = max(nums)\n    nums.remove(max_num)\n    return nums\ndef delete_max2(nums):\n    '''\n    Write a function to delete the maximum number in an array of integers.\n    '''\n    if not nums:\n        return None\n    max_num = max(nums)\n    nums.remove(max_num)\n    return nums\ndef delete_max3(nums):\n    '''\n    Write a function to delete the maximum number in an array of integers.\n    '''\n    if not nums:\n        return None\n    max_num = max(nums)\n    nums.remove(max_num)\n    return nums\ndef insert_sort(nums):\n    '''\n    Write a function to sort an array of integers in ascending order.\n    '''\n    if not nums:\n        return None\n    for i in range(1, len(nums)):\n        temp = nums[i]\n        j = i\n        while j > 0 and nums[j-1] > temp:\n            nums[j] = nums[j-1]\n            j -= 1\n        nums[j] = temp\n    return nums\ndef insert_sort2(nums):\n    '''\n    Write a function to sort an array of integers in ascending order.\n    '''\n    if not nums:\n        return None\n    for i in range(1, len(nums)):\n        temp = nums[i]\n        j = i\n        while j > 0 and temp < nums[j-1]:\n            nums[j] = nums[j-1]\n            j -= 1\n        nums[j] = temp\n    return nums\ndef insert_sort3(nums):\n    '''\n    Write a function to sort an array of integers in ascending order.\n    '''\n    if not nums:\n        return None\n    for i in range(1, len(nums)):\n        temp = nums[i]\n        j = i\n        while j > 0 and temp < nums[j-1]:\n            nums[j] = nums[j-1]\n            j -= 1\n        nums[j] = temp\n    return nums\ndef insert_sort4(nums):\n    '''\n    Write a function to sort an array of integers in ascending order.\n    '''\n    if not nums:\n        return None\n    for i in range(1, len(nums)):\n        temp = nums[i]\n        j = i\n        while j > 0 and temp < nums[j-1]:\n            nums[j] = nums[j-1]\n            j -= 1\n        nums[j] = temp\n    return nums\ndef insert_sort5(nums):\n    '''\n    Write a function to sort an array of integers in ascending order.\n    '''\n    if not nums:\n        return None\n    for i in range(1, len(nums)):\n        temp = nums[i]\n        j = i\n        while j > 0 and temp < nums[j-1]:\n            nums[j] = nums[j-1]\n            j -= 1\n        nums[j] = temp\n    return nums\ndef insert_sort6(nums):\n    '''\n    Write a function to sort an array of integers in ascending order.\n    '''\n    if not nums:\n        return None\n    for i in range(1, len(nums)):\n        temp = nums[i]\n        j = i\n        while j > 0 and temp < nums[j-1]:\n            nums[j] = nums[j-1]\n            j -= 1\n        nums[j] = temp\n    return nums\ndef insert_sort7(nums):\n    '''\n    Write a function to sort an array of integers in ascending order.\n    '''\n    if not nums:\n        return None\n    for i in range(1, len(nums)):\n        temp = nums[i]\n        j = i\n        while j > 0 and temp < nums[j-1]:\n            nums[j] = nums[j-1]\n            j -= 1\n        nums[j] = temp\n    return nums\ndef insert_sort8(nums):\n    '''\n    Write a function to sort an array of integers in ascending order.\n    '''\n    if not nums:\n        return None\n    for i in range(1, len(nums)):\n        temp = nums[i]\n        j = i\n        while j > 0 and temp < nums[j-1]:\n            nums[j] = nums[j-1]\n            j -= 1\n        nums[j] = temp\n    return nums\ndef insert_sort9(nums):\n    '''\n    Write a function to sort an array of integers in ascending order.\n    '''\n    if not nums:\n        return None\n    for i in range(1, len(nums)):\n        temp = nums[i]\n        j = i\n        while j > 0 and temp < nums[j-1]:\n            nums[j] = nums[j-1]\n            j -= 1\n        nums[j] = temp\n    return nums\ndef insert_sort10(nums):\n    '''\n    Write a function to sort an array of integers in ascending order.\n    '''\n    if not nums:\n        return None\n    for i in range(1, len(nums)):\n        temp = nums[i]\n        j = i\n        while j > 0 and temp < nums[j-1]:\n            nums[j] = nums[j-1]\n            j -= 1\n        nums[j] = temp\n    return nums\ndef insert_sort11(nums):\n    '''\n    Write a function to sort an array of integers in ascending order.\n    '''\n    if not nums:\n        return None\n    for i in range(1, len(nums)):\n        temp = nums[i]\n        j = i\n        while j > 0 and temp < nums[j-1]:\n            nums[j] = nums[j-1]\n            j -= 1\n        nums[j] = temp\n    return nums\ndef insert_sort12(nums):\n    '''\n    Write a function to sort an array of integers in ascending order.\n    '''\n    if not nums:\n        return None\n    for i in range(1, len(nums)):\n        temp = nums[i]\n        j = i\n        while j > 0 and temp < nums[j-1]:\n            nums[j] = nums[j-1]\n            j -= 1\n        nums[j] = temp\n    return nums\ndef insert_sort13(nums):\n    '''\n    Write a function to sort an array of integers in ascending order.\n    '''\n    if not nums:\n        return None\n    for i in range(1, len(nums)):\n        temp = nums[i]\n        j = i\n        while j > 0 and temp < nums[j-1]:\n            nums[j] = nums[j-1]\n            j -= 1\n        nums[j] = temp\n    return nums\ndef insert_sort14(nums):\n    '''\n    Write a function to sort an array of integers in ascending order.\n    '''\n    if not nums:\n        return None\n    for i in range(1, len("
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos, neg = 0, 0\n    for num in nums:\n        if num > 0:\n            pos += 1\n        elif num < 0:\n            neg += 1\n    return float(pos) / neg\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums)==0:\n        return 0\n    p_count = 0\n    for i in nums:\n        if i > 0:\n            p_count+=1\n    return p_count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos = 0\n    for i in nums:\n        if i > 0:\n            pos += 1\n    return pos / len(nums)\ndef abs_of_all(nums):\n    '''\n    Write a function to find the absolute of all the numbers of an array of integers.\n    '''\n    return sum([abs(i) for i in nums])\ndef max_of_all(nums):\n    '''\n    Write a function to find the max of all the numbers of an array of integers.\n    '''\n    return max(nums)\ndef largest_in_slice(nums):\n    '''\n    Write a function to find the largest element in a slice of an array of integers.\n    '''\n    start = 0\n    end = len(nums)\n    max_of_all = nums[0]\n    for i in range(start, end):\n        if nums[i] > max_of_all:\n            max_of_all = nums[i]\n    return max_of_all\ndef duplicate_count(str):\n    '''\n    Write a function to count the number of duplicate characters in a string.\n    '''\n    s = sorted(str)\n    d = {}\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    dup = 0\n    for i in d:\n        if d[i] > 1:\n            dup += 1\n    return dup\ndef sort_by_index(nums, index):\n    '''\n    Write a function that will sort an array by the \"index\"th element. \n    '''\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i][index] > nums[j][index]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\ndef max_in_array(nums):\n    '''\n    Write a function to find the maximum of an array of numbers.\n    '''\n    return max(nums)\ndef first_last_index(nums):\n    '''\n    Write a function that returns the index of the first and last occurrence of an integer in an array of integers.\n    '''\n    return [nums.index(i) for i in nums if i == max(nums)]\ndef remove_duplicates(nums):\n    '''\n    Write a function to remove duplicates from an array of integers.\n    '''\n    nums = sorted(nums)\n    d = {}\n    for i in nums:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in d:\n        if d[i] > 1:\n            nums.remove(i)\n    return nums\ndef add_all(nums):\n    '''\n    Write a function to add all the elements of an array of numbers.\n    '''\n    return sum(nums)\ndef sort_by_length(strs):\n    '''\n    Write a function to sort an array by the length of its elements.\n    '''\n    return sorted(strs, key = lambda x: len(x))\ndef reverse_array(nums):\n    '''\n    Write a function to reverse an array of integers.\n    '''\n    nums = nums[::-1]\n    return nums\ndef power_set(nums):\n    '''\n    Write a function that returns the power set of an array of integers.\n    '''\n    arr = [[]]\n    for i in nums:\n        new_arr = []\n        for j in arr:\n            new_arr.append(j + [i])\n        arr += new_arr\n    return arr\ndef sub_string(str, s):\n    '''\n    Write a function to find the longest substring that is an anagram of a given string.\n    '''\n    return max([s for i in range(len(str)) for j in range(len(str)) if sorted(str[i:j+1]) == sorted(s)], key = lambda x: len(x))\ndef increment_by_one(nums):\n    '''\n    Write a function to increment all the elements of an array of integers.\n    '''\n    for i in nums:\n        i += 1\n    return nums\ndef palindrome_permutation(str):\n    '''\n    Write a function to check whether a string is a permutation of a palindrome.\n    '''\n    d = {}\n    for i in str:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in d:\n        if d[i] % 2 == 1:\n            return False\n    return True\ndef reverse_words(str):\n    '''\n    Write a function that reverses words in a string. A word is defined as a sequence of non-space characters.\n    '''\n    return''.join(str.split()[::-1])\ndef first_last6(nums):\n    '''\n    Write a function that returns true if the first number and the last number of an array of integers are the same number.\n    '''\n    return nums[0] == nums[-1]\ndef max_subarray(nums):\n    '''\n    Write a function to find the contiguous subarray within an array (containing at least one number) which has the largest sum.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in nums:\n        current_sum = max(current_sum + i, i)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\ndef insertion_sort(nums):\n    '''\n    Write a function to sort an array of positive integers using insertion sort.\n    '''\n    for i in range(1, len(nums)):\n        current = nums[i]\n        index = i - 1\n        while index >= 0 and nums[index] > current:\n            nums[index+1] = nums[index]\n            index -= 1\n        nums[index+1] = current\n    return nums\ndef length_of_last_word(str):\n    '''\n    Write a function to find the length of the last word in a string.\n    '''\n    return len(str.split(' ')[-1])\ndef first_missing_positive(nums):\n    '''\n    Write a function to find the first missing positive integer in an unsorted array of integers.\n    '''\n    nums = list(set(nums))\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            nums[i] -= 1\n    for i in nums:\n        if i!= 0:\n            return i+1\n    return 1\ndef find_median(nums):\n    '''\n    Write a function to find the median of a list of integers.\n    '''\n    n = len(nums)\n    nums = sorted(nums)\n    if n % 2 == 1:\n        return nums[n//2]\n    else:\n        return (nums[n//2] + nums[n//2-1])/2.0\ndef xor_operation(nums):\n    '''\n    Write a function to compute the XOR of all the numbers in an array of integers.\n    '''\n    return reduce(lambda x, y: x ^ y, nums)\ndef find_missing_number(nums):\n    '''\n    Write a function to find the missing number in an array of integers.\n    '''\n    n = len(nums)\n    nums = set(nums)\n    for i in range(n+1):\n        if i not in nums:\n            return i\n    return None\ndef sort_array(nums):\n    '''\n    Write a function to sort an array of strings. \n    '''\n    nums = sorted(nums)\n    return nums\ndef zero_matrix(mat):\n    '''\n    Write a function to return the zero matrix of a matrix.\n    '''\n    mat = [[int(i) for i in j] for j in mat]\n    return [[0 for "
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_element = -1\n    for item in list1:\n        if (item < max_element) and (item < 0):\n            max_element = item\n    return max_element\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    l = list1[0]\n    list1 = list1[1:]\n    return l\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    count=0\n    for i in list1:\n        if i < 0:\n            count=1\n    if count==0:\n        return None\n    else:\n        return max(list1)\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            return list1[i]\n    return -1\n    \ndef list_max(list1): \n    '''\n    Write a python function to find the max number of a list.\n    '''\n    return max(list1)\n    \ndef power_num(base, exponent):\n    '''\n    Write a python function to compute the power of a number.\n    '''\n    return base ** exponent\n    \ndef min_num(list1): \n    '''\n    Write a python function to find the min number of a list.\n    '''\n    return min(list1)\n    \ndef factorial(num): \n    '''\n    Write a python function to compute the factorial of a number.\n    '''\n    if num == 1 or num == 0:\n        return 1\n    else:\n        return num * factorial(num - 1)\n    \ndef sum_num(list1): \n    '''\n    Write a python function to compute the sum of a list.\n    '''\n    sum1 = 0\n    for i in range(len(list1)):\n        sum1 = sum1 + list1[i]\n    return sum1\n    \ndef rec_sum(list1): \n    '''\n    Write a python function to compute the sum of a list using recursion.\n    '''\n    if len(list1) == 1:\n        return list1[0]\n    return list1[0] + rec_sum(list1[1:])\n    \ndef rec_sum_n(list1, n):\n    '''\n    Write a python function to compute the sum of a list using recursion.\n    '''\n    if len(list1) == 1:\n        return list1[0]\n    if n == 1:\n        return list1[0] + rec_sum_n(list1[1:], 1)\n    else:\n        return list1[0] + rec_sum_n(list1[1:], n - 1)\n    \ndef rec_factorial(n): \n    '''\n    Write a python function to compute the factorial of a number using recursion.\n    '''\n    if n == 1:\n        return 1\n    return n * rec_factorial(n - 1)\n    \ndef rec_power(base, exponent): \n    '''\n    Write a python function to compute the power of a number using recursion.\n    '''\n    if exponent == 1:\n        return base\n    return base * rec_power(base, exponent - 1)\n    \ndef rec_power_n(base, exponent, n): \n    '''\n    Write a python function to compute the power of a number using recursion.\n    '''\n    if exponent == 1:\n        return base\n    if n == 1:\n        return base * rec_power_n(base, exponent - 1, 1)\n    else:\n        return base * rec_power_n(base, exponent - 1, n - 1)\n    \ndef rec_max(list1): \n    '''\n    Write a python function to find the max number of a list using recursion.\n    '''\n    if len(list1) == 1:\n        return list1[0]\n    return max(list1[0], rec_max(list1[1:]))\n    \ndef rec_min(list1): \n    '''\n    Write a python function to find the min number of a list using recursion.\n    '''\n    if len(list1) == 1:\n        return list1[0]\n    return min(list1[0], rec_min(list1[1:]))\n    \ndef max_num(list1): \n    '''\n    Write a python function to find the max number of a list using recursion.\n    '''\n    if len(list1) == 1:\n        return list1[0]\n    return max(list1[0], max_num(list1[1:]))\n    \ndef min_num(list1): \n    '''\n    Write a python function to find the min number of a list using recursion.\n    '''\n    if len(list1) == 1:\n        return list1[0]\n    return min(list1[0], min_num(list1[1:]))\n    \ndef sum_even(list1): \n    '''\n    Write a python function to compute the sum of even numbers from a list.\n    '''\n    sum1 = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            sum1 = sum1 + list1[i]\n    return sum1\n    \ndef sum_odd(list1): \n    '''\n    Write a python function to compute the sum of odd numbers from a list.\n    '''\n    sum1 = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 1:\n            sum1 = sum1 + list1[i]\n    return sum1\n    \ndef mean(list1): \n    '''\n    Write a python function to compute the mean of a list.\n    '''\n    return sum_num(list1) / len(list1)\n    \ndef median(list1): \n    '''\n    Write a python function to compute the median of a list.\n    '''\n    list1.sort()\n    if len(list1) % 2 == 0:\n        return (list1[len(list1) / 2 - 1] + list1[len(list1) / 2]) / 2\n    else:\n        return list1[len(list1) / 2]\n    \ndef mode(list1): \n    '''\n    Write a python function to compute the mode of a list.\n    '''\n    count = 1\n    dict1 = {}\n    for i in range(len(list1)):\n        if list1[i] in dict1:\n            dict1[list1[i]] = dict1[list1[i]] + 1\n        else:\n            dict1[list1[i]] = 1\n    for i in range(len(list1)):\n        if dict1[list1[i]] > count:\n            count = dict1[list1[i]]\n    for i in range(len(list1)):\n        if dict1[list1[i]] == count:\n            return list1[i]\n    \ndef mean_num(list1): \n    '''\n    Write a python function to compute the mean of a list of numbers.\n    '''\n    return sum_num(list1) / len(list1)\n    \ndef median_num(list1): \n    '''\n    Write a python function to compute the median of a list of numbers.\n    '''\n    list1.sort()\n    if len(list1) % 2 == 0:\n        return (list1[len(list1) / 2 - 1] + list1[len(list1) / 2]) / 2\n    else:\n        return list1[len(list1) / 2]\n    \ndef mode_num(list1): \n    '''\n    Write a python function to compute the mode of a list of numbers.\n    '''\n    count = 1\n    dict1 = {}\n    for i in range(len(list1)):\n        if list1[i] in dict1:\n            dict1[list1[i]] = dict1[list1[i]] + 1\n        else:\n            dict1[list1[i]] = 1\n    for i in range(len(list1)):\n        if dict1[list1[i]] > count:\n            count = dict1[list1[i]]\n            max_num = list1[i]\n    for i in range(len(list1)):\n        if dict1[list1[i]] == count and list1[i] > max_num:\n            max_num = list1[i]\n    return max_num\n    \ndef test_largest_neg():\n    '''\n    Write a test function to test the largest_neg function\n    '''\n    print(\"Testing largest_neg function...\", end = \"\")\n    assert(largest_neg([1, 2, 3, 4, 5, -10, -6, -7]) == -10)\n    assert(largest_neg([-2, -3, -1, -4, -5, -6, -7]) == -1)\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for i in list1:\n        if i < 0 and i > max_neg:\n            max_neg = i\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max1 = list1[0]\n    for i in range(len(list1)):\n        if list1[i] < max1:\n            max1 = list1[i]\n    return max1\ndef largest_pos(list1): \n    '''\n    Write a python function to find the largest positive number from the given list.\n    '''\n    max1 = list1[0]\n    for i in range(len(list1)):\n        if list1[i] > max1:\n            max1 = list1[i]\n    return max1\ndef smallest_pos(list1): \n    '''\n    Write a python function to find the smallest positive number from the given list.\n    '''\n    min1 = list1[0]\n    for i in range(len(list1)):\n        if list1[i] > min1:\n            min1 = list1[i]\n    return min1\ndef smallest_neg(list1): \n    '''\n    Write a python function to find the smallest negative number from the given list.\n    '''\n    min1 = list1[0]\n    for i in range(len(list1)):\n        if list1[i] < min1:\n            min1 = list1[i]\n    return min1\ndef count_smaller(list1): \n    '''\n    Write a python function to find the count of numbers smaller than the given number from the given list.\n    '''\n    count1 = 0\n    for i in range(len(list1)):\n        if list1[i] < int(input(\"Enter a number to find count of numbers smaller than it: \")):\n            count1 = count1 + 1\n    return count1\ndef count_larger(list1): \n    '''\n    Write a python function to find the count of numbers greater than the given number from the given list.\n    '''\n    count1 = 0\n    for i in range(len(list1)):\n        if list1[i] > int(input(\"Enter a number to find count of numbers greater than it: \")):\n            count1 = count1 + 1\n    return count1\ndef search_num(list1): \n    '''\n    Write a python function to find a number in the given list if it exists. If not, return \"No\".\n    '''\n    if int(input(\"Enter a number to search in the list: \")) in list1:\n        return \"Yes\"\n    else:\n        return \"No\"\ndef search_list(list1): \n    '''\n    Write a python function to find the index of a given number in the given list. If the number is not in the list, return \"No\".\n    '''\n    if int(input(\"Enter a number to search in the list: \")) in list1:\n        return list1.index(int(input(\"Enter a number to search in the list: \")))\n    else:\n        return \"No\"\ndef search_list2(list1): \n    '''\n    Write a python function to find the index of a given number in the given list, starting from 0 to the length of the list. If the number is not in the list, return \"No\".\n    '''\n    if int(input(\"Enter a number to search in the list: \")) in list1:\n        return list1.index(int(input(\"Enter a number to search in the list: \")), 0, len(list1))\n    else:\n        return \"No\"\ndef sort_list(list1): \n    '''\n    Write a python function to sort the given list.\n    '''\n    list1.sort()\n    return list1\ndef reverse_list(list1): \n    '''\n    Write a python function to reverse the given list.\n    '''\n    list1.reverse()\n    return list1\ndef join_list(list1): \n    '''\n    Write a python function to join the given list elements in a string.\n    '''\n    return ''.join(list1)\ndef sum_list(list1): \n    '''\n    Write a python function to find the sum of the given list.\n    '''\n    sum1 = 0\n    for i in range(len(list1)):\n        sum1 = sum1 + list1[i]\n    return sum1\ndef sort_list2(list1): \n    '''\n    Write a python function to sort the given list in descending order.\n    '''\n    list1.sort()\n    list1.reverse()\n    return list1\ndef remove_duplicates(list1): \n    '''\n    Write a python function to remove duplicates from the given list.\n    '''\n    list1 = list(set(list1))\n    return list1\ndef find_median(list1): \n    '''\n    Write a python function to find the median of the given list.\n    '''\n    list1 = sorted(list1)\n    if len(list1) % 2 == 0:\n        median1 = (list1[len(list1)//2 - 1] + list1[len(list1)//2]) / 2\n        return median1\n    else:\n        median1 = list1[len(list1)//2]\n        return median1\ndef find_mode(list1): \n    '''\n    Write a python function to find the mode(s) of the given list.\n    '''\n    count = 0\n    list1 = sorted(list1)\n    for i in range(len(list1)):\n        if list1[i] == list1[i - 1]:\n            count = count + 1\n    if count > 1:\n        print(\"Mode(s) are: \")\n        for i in range(count):\n            print(list1[i])\n    elif count == 1:\n        print(\"Mode is: \")\n        print(list1[i])\n    else:\n        print(\"No mode\")\ndef list_to_string(list1): \n    '''\n    Write a python function to convert the given list into a string.\n    '''\n    str1 = ''\n    for i in range(len(list1)):\n        str1 = str1 + str(list1[i])\n    return str1\ndef string_to_list(str1): \n    '''\n    Write a python function to convert the given string into a list.\n    '''\n    list1 = []\n    for i in range(len(str1)):\n        list1.append(str1[i])\n    return list1\ndef check_char(str1): \n    '''\n    Write a python function to check if the given string is a palindrome or not.\n    '''\n    if str1 == str1[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\"\ndef find_common(list1, list2): \n    '''\n    Write a python function to find the common items between the given lists.\n    '''\n    count1 = 0\n    count2 = 0\n    list3 = []\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            count1 = count1 + 1\n            list3.append(list1[i])\n    for i in range(len(list2)):\n        if list2[i] in list1:\n            count2 = count2 + 1\n            list3.append(list2[i])\n    if count1 == 0 and count2 == 0:\n        return \"No\"\n    else:\n        return list3\ndef find_longest_common(list1, list2): \n    '''\n    Write a python function to find the longest common items between the given lists.\n    '''\n    list3 = []\n    count1 = 0\n    count2 = 0\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            count1 = count1 + 1\n            list3.append(list1[i])\n    for i in range(len(list2)):\n        if list2[i] in list1:\n            count2 = count2 + 1\n            list3.append(list2[i])\n    if count1 > count2:\n        return list3\n    else:\n        return list3\ndef remove_vowels(str1): \n    '''\n    Write a python function to remove the vowels from the given string.\n    '''\n    vowels = ['a','e','i',"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1)\n    \n    \n    \ndef split(string, delimiters):\n    '''\n    Write a python function to split a string by delimiters.\n    '''\n    list1 = string.split(delimiters)\n    return list1\n    \n    \n    \ndef count(string, sub):\n    '''\n    Write a python function to find the count of substring in a given string.\n    '''\n    list1 = string.split()\n    return list1.count(sub)\n    \n    \n    \ndef sort_by_length(list1):\n    '''\n    Write a python function to sort the list of strings by length in increasing order.\n    '''\n    list1.sort(key=len)\n    return list1\n    \n    \n    \ndef merge(list1, list2):\n    '''\n    Write a python function to merge two sorted lists into a single list.\n    '''\n    return list1+list2\n    \n    \n    \ndef first_last6(list1):\n    '''\n    Write a python function to find the first and last occurence of 6 in a given list of numbers.\n    '''\n    list1.index(6)\n    list1.index(6,6)\n    \n    \n    \ndef remove_duplicates(list1):\n    '''\n    Write a python function to remove duplicates from a given list.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \n    \n    \ndef is_palindrome(string):\n    '''\n    Write a python function to check if a string is a palindrome.\n    '''\n    list1 = list(string)\n    list1.reverse()\n    if list1 == list(string):\n        return True\n    else:\n        return False\n    \n    \n    \ndef swap_case(string):\n    '''\n    Write a python function to convert all uppercase letters to lowercase and all lowercase letters to uppercase.\n    '''\n    list1 = list(string)\n    for i in range(len(list1)):\n        if list1[i].isupper():\n            list1[i] = list1[i].lower()\n        elif list1[i].islower():\n            list1[i] = list1[i].upper()\n    return ''.join(list1)\n    \n    \n    \ndef sort_by_length(list1):\n    '''\n    Write a python function to sort a list of strings by length in increasing order.\n    '''\n    list1.sort(key=len)\n    return list1\n    \n    \n    \ndef first_last6(list1):\n    '''\n    Write a python function to find the first and last occurence of 6 in a given list of numbers.\n    '''\n    list1.index(6)\n    list1.index(6,6)\n    \n    \n    \ndef remove_duplicates(list1):\n    '''\n    Write a python function to remove duplicates from a given list.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \n    \n    \ndef is_palindrome(string):\n    '''\n    Write a python function to check if a string is a palindrome.\n    '''\n    list1 = list(string)\n    list1.reverse()\n    if list1 == list(string):\n        return True\n    else:\n        return False\n    \n    \n    \ndef swap_case(string):\n    '''\n    Write a python function to convert all uppercase letters to lowercase and all lowercase letters to uppercase.\n    '''\n    list1 = list(string)\n    for i in range(len(list1)):\n        if list1[i].isupper():\n            list1[i] = list1[i].lower()\n        elif list1[i].islower():\n            list1[i] = list1[i].upper()\n    return ''.join(list1)\n    \n    \n    \ndef sort_by_length(list1):\n    '''\n    Write a python function to sort a list of strings by length in increasing order.\n    '''\n    list1.sort(key=len)\n    return list1\n    \n    \n    \ndef first_last6(list1):\n    '''\n    Write a python function to find the first and last occurence of 6 in a given list of numbers.\n    '''\n    list1.index(6)\n    list1.index(6,6)\n    \n    \n    \ndef remove_duplicates(list1):\n    '''\n    Write a python function to remove duplicates from a given list.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \n    \n    \ndef is_palindrome(string):\n    '''\n    Write a python function to check if a string is a palindrome.\n    '''\n    list1 = list(string)\n    list1.reverse()\n    if list1 == list(string):\n        return True\n    else:\n        return False\n    \n    \n    \ndef swap_case(string):\n    '''\n    Write a python function to convert all uppercase letters to lowercase and all lowercase letters to uppercase.\n    '''\n    list1 = list(string)\n    for i in range(len(list1)):\n        if list1[i].isupper():\n            list1[i] = list1[i].lower()\n        elif list1[i].islower():\n            list1[i] = list1[i].upper()\n    return ''.join(list1)\n    \n    \n    \ndef sort_by_length(list1):\n    '''\n    Write a python function to sort a list of strings by length in increasing order.\n    '''\n    list1.sort(key=len)\n    return list1\n    \n    \n    \ndef first_last6(list1):\n    '''\n    Write a python function to find the first and last occurence of 6 in a given list of numbers.\n    '''\n    list1.index(6)\n    list1.index(6,6)\n    \n    \n    \ndef remove_duplicates(list1):\n    '''\n    Write a python function to remove duplicates from a given list.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \n    \n    \ndef is_palindrome(string):\n    '''\n    Write a python function to check if a string is a palindrome.\n    '''\n    list1 = list(string)\n    list1.reverse()\n    if list1 == list(string):\n        return True\n    else:\n        return False\n    \n    \n    \ndef swap_case(string):\n    '''\n    Write a python function to convert all uppercase letters to lowercase and all lowercase letters to uppercase.\n    '''\n    list1 = list(string)\n    for i in range(len(list1)):\n        if list1[i].isupper():\n            list1[i] = list1[i].lower()\n        elif list1[i].islower():\n            list1[i] = list1[i].upper()\n    return ''.join(list1)\n    \n    \n    \ndef sort_by_length(list1):\n    '''\n    Write a python function to sort a list of strings by length in increasing order.\n    '''\n    list1.sort(key=len)\n    return list1\n    \n    \n    \ndef first_last6(list1):\n    '''\n    Write a python function to find the first and last occurence of 6 in a given list of numbers.\n    '''\n    list1.index(6)\n    list1.index(6,6)\n    \n    \n    \ndef remove_duplicates(list1):\n    '''\n    Write a python function to remove duplicates from a given list.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \n    \n    \ndef is_palindrome(string):\n    '''\n    Write a python function to check if a string is a palindrome.\n    '''\n    list1 = list(string)\n    list1.reverse()\n    if list1 == list(string):\n        return True\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = 0\n    for i in list1:\n        if(i<0 and i>max):\n            max = i\n    return max\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -1\n    for number in list1:\n        if number > largest:\n            largest = number\n    return largest\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    count = 0\n    for num in list1:\n        if num < 0:\n            count = num\n            break\n    return count\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(x, y[K:]) for x, y in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed = []\n    for i in range(len(test_list)):\n        trimmed.append(test_list[i][:K])\n    return tuple(trimmed)\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [\n        (t[0], t[1][K:]) if len(t[1]) > K else t\n        for t in test_list\n    ]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(item[0], item[1][K:]) for item in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(a,b,c,d) for a,b,c,d in test_list if len(d) >= K]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [trim_tuple_helper(t, K) for t in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tup in test_list:\n        if len(tup) == K:\n            new_list.append(tup)\n    return new_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tuple_ in test_list:\n        if len(tuple_) == K:\n            new_list.append(tuple_)\n    return new_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result_list = []\n    for i in test_list:\n        if len(i) >= K:\n            result_list.append(i[:K])\n        else:\n            result_list.append(i)\n    return result_list\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for k in test_list:\n        k = k[0:K]\n    return test_list\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    index_list = []\n    res = []\n    for i in xrange(len(test_tup1)):\n        index_list.append(i)\n    for i in index_list:\n        res.append(test_tup1[i] * test_tup2[i])\n    return tuple(res)\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    # Approach 1: \n    # for i in range(len(test_tup1)):\n    #     temp = test_tup1[i] * test_tup2[i]\n    #     print(temp)\n    \n    # Approach 2:\n    # return tuple([tup1[i] * tup2[i] for i in range(len(tup1))])\n    \n    # Approach 3:\n    # temp = []\n    # for i in range(len(test_tup1)):\n    #     temp.append(test_tup1[i] * test_tup2[i])\n    # return tuple(temp)\n    \n    # Approach 4:\n    # return tuple([tup1[i] * tup2[i] for i in range(len(tup1))])\n    \n    return tuple([test_tup1[i] * test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i, val1 in enumerate(test_tup1):\n        test_tup1[i] = test_tup1[i]*test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    \n    # print(\"test_tup1: {}\".format(test_tup1))\n    # print(\"test_tup2: {}\".format(test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuple lengths do not match\"\n    else:\n        new_tup = ()\n        for x in range(0, len(test_tup1)):\n            new_tup = new_tup + (test_tup1[x] * test_tup2[x],)\n        return new_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_list = []\n    new_tup1 = tuple()\n    new_tup2 = tuple()\n    for i in range(len(test_tup1)):\n        index_list.append(i)\n    index_list.reverse()\n    for i in index_list:\n        new_tup1 = new_tup1 + (test_tup1[i] * test_tup2[i],)\n        new_tup2 = new_tup2 + (test_tup2[i] * test_tup1[i],)\n    return new_tup1, new_tup2\n    \ndef remove_duplicate(test_tup):\n    '''\n    Write a function to remove duplicate elements from the tuple\n    '''\n    new_tup = tuple()\n    for i in test_tup:\n        if i not in new_tup:\n            new_tup = new_tup + (i,)\n    return new_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return (test_tup1[0]*test_tup2[0], test_tup1[1]*test_tup2[1])\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple([a*b for a,b in zip(test_tup1,test_tup2)])\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] * test_tup2[i],)\n    return new_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    res = ()\n    for i, j in zip(test_tup1, test_tup2):\n        res += (i*j,)\n    return res\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst1 = []\n    for i in lst:\n        cnt = 0\n        for j in tup:\n            if i == j:\n                cnt = cnt + 1\n        lst1.append(cnt)\n    print \"number of occurences of element in tuple: \", lst1\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counts = 0\n    for i in lst: \n        if i in tup: \n            counts += 1\n    return counts \n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    d = dict(Counter(tup))\n    l = list()\n    for key, value in d.iteritems():\n        l.append(value)\n    return l\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurrence = 0\n    for i in lst:\n        if tup.count(i)>0:\n            occurrence += 1\n    return occurrence\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = 0\n    for element in tup: \n        if element in lst: \n            cnt+=1\n    return cnt \n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    res = 0\n    for ele in lst:\n        if ele in tup:\n            res = res + 1\n    return res \n    \n    \n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = 0\n    for i in lst: \n        if i == tup: \n            cnt+=1\n    return cnt \n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = 0\n    for i in lst:\n        if i in tup:\n            cnt+=1\n    return cnt\ndef is_unique_wrt_order(lst):\n    '''\n    Write a python function to check if all the elements are unique or not, \n    in the order of insertion\n    '''\n    s = sorted(lst)\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return False\n    return True\ndef is_unique_wrt_order_my(lst):\n    '''\n    Write a python function to check if all the elements are unique or not, \n    in the order of insertion\n    '''\n    s = sorted(lst)\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return False\n    return True\ndef is_unique_wrt_order_my2(lst):\n    '''\n    Write a python function to check if all the elements are unique or not, \n    in the order of insertion\n    '''\n    s = sorted(lst)\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return False\n    return True\ndef is_unique_wrt_order_my3(lst):\n    '''\n    Write a python function to check if all the elements are unique or not, \n    in the order of insertion\n    '''\n    s = sorted(lst)\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return False\n    return True\ndef is_unique_wrt_order_my4(lst):\n    '''\n    Write a python function to check if all the elements are unique or not, \n    in the order of insertion\n    '''\n    s = sorted(lst)\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return False\n    return True\ndef is_unique_wrt_order_my5(lst):\n    '''\n    Write a python function to check if all the elements are unique or not, \n    in the order of insertion\n    '''\n    s = sorted(lst)\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return False\n    return True\ndef is_unique_wrt_order_my6(lst):\n    '''\n    Write a python function to check if all the elements are unique or not, \n    in the order of insertion\n    '''\n    s = sorted(lst)\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return False\n    return True\ndef is_unique_wrt_order_my7(lst):\n    '''\n    Write a python function to check if all the elements are unique or not, \n    in the order of insertion\n    '''\n    s = sorted(lst)\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return False\n    return True\ndef is_unique_wrt_order_my8(lst):\n    '''\n    Write a python function to check if all the elements are unique or not, \n    in the order of insertion\n    '''\n    s = sorted(lst)\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return False\n    return True\ndef is_unique_wrt_order_my9(lst):\n    '''\n    Write a python function to check if all the elements are unique or not, \n    in the order of insertion\n    '''\n    s = sorted(lst)\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return False\n    return True\ndef is_unique_wrt_order_my10(lst):\n    '''\n    Write a python function to check if all the elements are unique or not, \n    in the order of insertion\n    '''\n    s = sorted(lst)\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return False\n    return True\ndef is_unique_wrt_order_my11(lst):\n    '''\n    Write a python function to check if all the elements are unique or not, \n    in the order of insertion\n    '''\n    s = sorted(lst)\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return False\n    return True\ndef is_unique_wrt_order_my12(lst):\n    '''\n    Write a python function to check if all the elements are unique or not, \n    in the order of insertion\n    '''\n    s = sorted(lst)\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return False\n    return True\ndef is_unique_wrt_order_my13(lst):\n    '''\n    Write a python function to check if all the elements are unique or not, \n    in the order of insertion\n    '''\n    s = sorted(lst)\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return False\n    return True\ndef is_unique_wrt_order_my14(lst):\n    '''\n    Write a python function to check if all the elements are unique or not, \n    in the order of insertion\n    '''\n    s = sorted(lst)\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return False\n    return True\ndef is_unique_wrt_order_my15(lst):\n    '''\n    Write a python function to check if all the elements are unique or not, \n    in the order of insertion\n    '''\n    s = sorted(lst)\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return False\n    return True\ndef is_unique_wrt_order_my16(lst):\n    '''\n    Write a python function to check if all the elements are unique or not, \n    in the order of insertion\n    '''\n    s = sorted(lst)\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return False\n    return True\ndef is_unique_wrt_order_my17(lst):\n    '''\n    Write a python function to check if all the elements are unique or not, \n    in the order of insertion\n    '''\n    s = sorted(lst)\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return False\n    return True\ndef is_unique_wrt_order_my18(lst):\n    '''\n    Write a python function to check if all the elements are unique or not, \n    in the order of insertion\n    '''\n    s = sorted(lst)\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return False\n    return True\ndef is_unique_wrt_order_my19(lst):\n    '''\n    Write a python function to check if all the elements are unique or not, \n    in the order of insertion\n    '''\n    s = sorted(lst)\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return False\n    return True\ndef is_unique_wrt_order_my20(lst):\n    '''\n    Write a python function to check if all the elements are unique or not, \n    in the order of insertion\n    '''\n    s = sorted(lst)\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return False"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counts = {}\n    for item in lst:\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n    for key, value in counts.items():\n        if key in tup:\n            return value\n    return 0\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for element in lst:\n        if element in tup:\n            print element, tup.count(element)\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    \n    cubes = []\n    \n    for i in nums:\n        cubes.append(i**3)\n    \n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    new_list = []\n    for num in nums:\n        new_list.append(num**3)\n    return new_list\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in nums:\n        print(i*i*i)\n    return None\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in nums:\n        print(i*i*i)\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [n**3 for n in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    \n    l = list(map(lambda x: x**3, nums))\n    return l\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in nums:\n        print(i**3)\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin = [0]\n    for i in xrange(1, n):\n        perrin.append(perrin[i - 1] + i)\n    return perrin\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n - 1)\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    i = 1\n    summ = 0\n    while i<=n:\n        if i%3 == 0:\n            summ+=i\n        i+=1\n    return summ\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    \n    result = 0\n    n -= 1\n    while n > 0:\n        result += n\n        n -= 2\n    return result\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i % 3 == 0 or i % 5 == 0:\n            sum += i\n    return sum\n    \n    \nif __name__ == '__main__':\n    n = int(input().strip())\n    print(cal_sum(n))"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    for i in range(n):\n        result += i+1\n    return result\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum(range(1,n+1,2))\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(n):\n        s += i**3 + 3*i**2 + 3*i + 1\n    return s\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    out = []\n    for s in l:\n        if len(s) == l:\n            out.append(s)\n    return out\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    new_list = []\n    for string in str:\n        new_list.append(string[:l])\n    return new_list\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    index = 0\n    while index < len(l):\n        result.append(str[:l])\n        str = str[l:]\n        index += 1\n    return result\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l == 0:\n        return ''\n    elif l == 1:\n        return str\n    else:\n        return str[:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    def find_index(str):\n        for i, ch in enumerate(str):\n            if ch =='':\n                return i\n        return i + 1\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # for i in range(len(str)):\n    #     print(str[i][:l])\n    str_l = []\n    for i in range(len(str)):\n        str_l.append(str[i][:l])\n    return str_l\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    r = []\n    for x in l:\n        if len(x) < l:\n            r.append(x)\n        else:\n            r.append(x[0:l])\n    return r\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    import re\n    out = []\n    for i in l:\n        out.append(re.findall(str, i)[0])\n    return out\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return \"\".join([str[i:i+l] for i in range(0, len(str), l)])\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for s in l:\n        result.append(s[:l])\n    return result\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    t = re.sub('\\s+','',text1)\n    return t\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \",\"\")\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return ''.join(text1.split())\ndef remove_newline(text1):\n    '''\n    Write a function to remove all newlines from the given string.\n    '''\n    return text1.replace('\\n','')\ndef remove_spaces(text1):\n    '''\n    Write a function to remove all spaces from the given string.\n    '''\n    return text1.replace(' ','')\ndef remove_characters(text1,characters):\n    '''\n    Write a function to remove all characters from the given string.\n    '''\n    return text1.translate(None,characters)\ndef find_capitalization(text1):\n    '''\n    Write a function to find the capitalization of the given string.\n    '''\n    return text1.istitle()\ndef find_numbers(text1):\n    '''\n    Write a function to find the numbers in the given string.\n    '''\n    return re.findall('[0-9]+',text1)\ndef find_alphabets(text1):\n    '''\n    Write a function to find the alphabets in the given string.\n    '''\n    return re.findall('[a-zA-Z]+',text1)\ndef find_others(text1):\n    '''\n    Write a function to find the all other characters in the given string.\n    '''\n    return re.findall('[^a-zA-Z]+',text1)\ndef format_type_string(text1):\n    '''\n    Write a function to format the given string using the given format type.\n    '''\n    if format_type == 'Capitalize':\n        return text1.title()\n    elif format_type == 'Lower':\n        return text1.lower()\n    elif format_type == 'Upper':\n        return text1.upper()\n    else:\n        return text1\ndef remove_multiple_spaces(text1):\n    '''\n    Write a function to remove all the multiple spaces from the given string.\n    '''\n    return re.sub(' +',' ',text1)\ndef replace_multiple_space_with_single(text1):\n    '''\n    Write a function to replace all the multiple spaces with single spaces.\n    '''\n    return re.sub(' +',' ',text1)\ndef replace_single_space_with_double(text1):\n    '''\n    Write a function to replace all the single spaces with double spaces.\n    '''\n    return re.sub(' ',',',text1)\ndef split_string_with_delimiter(text1,delimiter):\n    '''\n    Write a function to split the given string with the given delimiter.\n    '''\n    return text1.split(delimiter)\ndef split_string_with_space(text1):\n    '''\n    Write a function to split the given string with the given delimiter.\n    '''\n    return text1.split(' ')\ndef count_occurences(text1,substring):\n    '''\n    Write a function to count the occurences of the given substring in the given string.\n    '''\n    return text1.count(substring)\ndef replace_occurence(text1,substring,replacement):\n    '''\n    Write a function to replace the occurence of the given substring in the given string.\n    '''\n    return text1.replace(substring,replacement)\ndef extract_digits(text1):\n    '''\n    Write a function to extract the digits from the given string.\n    '''\n    return re.findall('[0-9]+',text1)\ndef extract_alphabets(text1):\n    '''\n    Write a function to extract the alphabets from the given string.\n    '''\n    return re.findall('[a-zA-Z]+',text1)\ndef extract_others(text1):\n    '''\n    Write a function to extract the all other characters from the given string.\n    '''\n    return re.findall('[^a-zA-Z]+',text1)\ndef count_occurences(text1,substring):\n    '''\n    Write a function to count the occurences of the given substring in the given string.\n    '''\n    return text1.count(substring)\ndef replace_occurence(text1,substring,replacement):\n    '''\n    Write a function to replace the occurence of the given substring in the given string.\n    '''\n    return text1.replace(substring,replacement)\ndef extract_digits(text1):\n    '''\n    Write a function to extract the digits from the given string.\n    '''\n    return re.findall('[0-9]+',text1)\ndef extract_alphabets(text1):\n    '''\n    Write a function to extract the alphabets from the given string.\n    '''\n    return re.findall('[a-zA-Z]+',text1)\ndef extract_others(text1):\n    '''\n    Write a function to extract the all other characters from the given string.\n    '''\n    return re.findall('[^a-zA-Z]+',text1)\ndef count_occurences(text1,substring):\n    '''\n    Write a function to count the occurences of the given substring in the given string.\n    '''\n    return text1.count(substring)\ndef replace_occurence(text1,substring,replacement):\n    '''\n    Write a function to replace the occurence of the given substring in the given string.\n    '''\n    return text1.replace(substring,replacement)\ndef extract_digits(text1):\n    '''\n    Write a function to extract the digits from the given string.\n    '''\n    return re.findall('[0-9]+',text1)\ndef extract_alphabets(text1):\n    '''\n    Write a function to extract the alphabets from the given string.\n    '''\n    return re.findall('[a-zA-Z]+',text1)\ndef extract_others(text1):\n    '''\n    Write a function to extract the all other characters from the given string.\n    '''\n    return re.findall('[^a-zA-Z]+',text1)\ndef count_occurences(text1,substring):\n    '''\n    Write a function to count the occurences of the given substring in the given string.\n    '''\n    return text1.count(substring)\ndef replace_occurence(text1,substring,replacement):\n    '''\n    Write a function to replace the occurence of the given substring in the given string.\n    '''\n    return text1.replace(substring,replacement)\ndef extract_digits(text1):\n    '''\n    Write a function to extract the digits from the given string.\n    '''\n    return re.findall('[0-9]+',text1)\ndef extract_alphabets(text1):\n    '''\n    Write a function to extract the alphabets from the given string.\n    '''\n    return re.findall('[a-zA-Z]+',text1)\ndef extract_others(text1):\n    '''\n    Write a function to extract the all other characters from the given string.\n    '''\n    return re.findall('[^a-zA-Z]+',text1)\ndef count_occurences(text1,substring):\n    '''\n    Write a function to count the occurences of the given substring in the given string.\n    '''\n    return text1.count(substring)\ndef replace_occurence(text1,substring,replacement):\n    '''\n    Write a function to replace the occurence of the given substring in the given string.\n    '''\n    return text1.replace(substring,replacement)\ndef extract_digits(text1):\n    '''\n    Write a function to extract the digits from the given string.\n    '''\n    return re.findall('[0-9]+',text1)\ndef extract_alphabets(text1):\n    '''\n    Write a function to extract the alphabets from the given string.\n    '''\n    return re.findall('["
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(\"[\\s]\",\"\",text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(\" \", \"\", text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub('\\s', '', text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    result = re.sub('\\s+','',text1)\n    return result\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    new_text = re.sub('\\s+', '', text1)\n    return new_text\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('[\\s\\n]+', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1.isspace()==False:\n        text1=re.sub('[^a-zA-Z0-9\\s]+', '', text1)\n    return text1\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost <= sale_amount:\n        return actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost == sale_amount:\n        return 0\n    elif actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0\ndef cal_profit_loss(order_id,invoice_id,stock_id,stock_cost,stock_sale,stock_loss,stock_amount):\n    '''\n    Write a function that will calculate the profit loss of a stock over a period of time.\n    '''\n    if invoice_id:\n        sale_amount = stock_sale\n        actual_cost = stock_cost\n    else:\n        sale_amount = 0\n        actual_cost = 0\n    loss_amount = loss_amount(actual_cost,sale_amount)\n    if stock_id:\n        total_cost = loss_amount + stock_cost\n        total_sale = loss_amount + stock_sale\n        total_loss = loss_amount\n        total_profit = total_sale - total_cost\n        print \"id:\",order_id,\"\\ninvoice_id:\",invoice_id,\"\\nstock_id:\",stock_id,\"\\nsale_amount:\",sale_amount,\"\\nactual_cost:\",actual_cost,\"\\nstock_cost:\",stock_cost,\"\\nloss_amount:\",loss_amount,\"\\ntotal_cost:\",total_cost,\"\\ntotal_sale:\",total_sale,\"\\ntotal_loss:\",total_loss,\"\\ntotal_profit:\",total_profit\n    else:\n        print \"id:\",order_id,\"\\ninvoice_id:\",invoice_id,\"\\nsale_amount:\",sale_amount,\"\\nactual_cost:\",actual_cost,\"\\nstock_cost:\",stock_cost,\"\\nloss_amount:\",loss_amount,\"\\ntotal_cost:\",stock_cost,\"\\ntotal_sale:\",stock_sale,\"\\ntotal_loss:\",loss_amount,\"\\ntotal_profit:\",stock_sale - stock_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost-sale_amount if actual_cost-sale_amount>0 else 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount-actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost-sale_amount\n    \n    \ndef loss_percentage(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss percentage if the given amount has loss else return 0.\n    '''\n    return loss_amount(actual_cost,sale_amount)/actual_cost*100\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = 0\n    for i in range(len(actual_cost)):\n        if actual_cost[i] > sale_amount[i]:\n            loss = loss + (actual_cost[i] - sale_amount[i])\n    return loss\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = (actual_cost - sale_amount)\n    if loss_amount > 0:\n        return loss_amount\n    else:\n        return 0\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    ans = 0\n    \n    for i in range(2,int(math.sqrt(n)+1)) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                ans = ans + i \n            if i!= n : \n                ans = ans + n / i \n    return ans\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    result = 0\n    for i in range(1, (int)(math.sqrt(n))+1) :\n        if(n % i == 0) :\n            if(i%2==0) :\n                result = result + i\n            if(i!= 1 and i!= (int)(math.sqrt(n))):\n                result = result + (n/i)\n    return result\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 1\n    for i in range(2,int(math.sqrt(n))+1): \n        if n % i == 0: \n            if i == 2: \n                sum = sum + i \n            else: \n                sum = sum + (i + n/i)\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 0 :\n        return None\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    t = 0\n    for i in range(1,(n//2)+1) : \n        if (n % i == 0) : \n            if (i % 2 == 0) : \n                t = t + i\n    return t\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i = 1\n    summ = 0\n    while i < n:\n        if n%i == 0:\n            if i%2 == 0:\n                summ += i\n        i += 1\n    return summ\ndef factors(n) : \n    '''\n    Write a python function to find the factors of a number.\n    '''\n    i = 1\n    factors = []\n    while i < n:\n        if n%i == 0:\n            factors.append(i)\n        i += 1\n    return factors\ndef remove_duplicate_letters(my_string):\n    '''\n    Write a python function to remove duplicate letters from a string.\n    '''\n    new_string = []\n    for i in my_string:\n        if i not in new_string:\n            new_string.append(i)\n    return new_string\ndef gcd(a,b):\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    if a > b :\n        smaller = a\n    else :\n        smaller = b\n    for i in range(1,smaller+1):\n        if((a%i == 0) and (b%i == 0)):\n            gcd = i\n    return gcd\ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    i = 2\n    while i < n:\n        if n%i == 0:\n            return False\n            break\n        i += 1\n    else:\n        return True\ndef primeFactors(n):\n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    i = 2\n    factors = []\n    while i < n:\n        if n%i == 0:\n            factors.append(i)\n        i += 1\n    return factors\ndef pfactors(n):\n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    i = 2\n    factors = []\n    while i < n:\n        if n%i == 0:\n            factors.append(i)\n        i += 1\n    return factors\ndef primeFactors(n):\n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    i = 2\n    factors = []\n    while i < n:\n        if n%i == 0:\n            factors.append(i)\n        i += 1\n    return factors\ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    i = 2\n    while i < n:\n        if n%i == 0:\n            return False\n            break\n        i += 1\n    else:\n        return True\ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    i = 2\n    while i < n:\n        if n%i == 0:\n            return False\n            break\n        i += 1\n    else:\n        return True\ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    i = 2\n    while i < n:\n        if n%i == 0:\n            return False\n            break\n        i += 1\n    else:\n        return True\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    i = 1\n    fact = 1\n    while i < n:\n        fact = fact*i\n        i = i + 1\n    return fact\ndef fibonacci(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    a = 0\n    b = 1\n    for i in range(n-1):\n        c = a+b\n        a = b\n        b = c\n    return b\ndef sumDigits(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    i = 0\n    summ = 0\n    while n > 0:\n        rem = n%10\n        summ += rem\n        n = n//10\n    return summ\ndef sumDigits(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    i = 0\n    summ = 0\n    while n > 0:\n        rem = n%10\n        summ += rem\n        n = n//10\n    return summ\ndef sumDigits(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    i = 0\n    summ = 0\n    while n > 0:\n        rem = n%10\n        summ += rem\n        n = n//10\n    return summ\ndef sumDigits(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    i = 0\n    summ = 0\n    while n > 0:\n        rem = n%10\n        summ += rem\n        n = n//10\n    return summ\ndef sumDigits(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    i = 0\n    summ = 0\n    while n > 0:\n        rem = n%10\n        summ += rem\n        n = n//10\n    return summ\ndef sumDigits(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    i = 0\n    summ = 0\n    while n > 0:\n        rem = n%10\n        summ += rem\n        n = n//10\n    return summ\ndef sumDigits(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    i = 0\n    summ = 0\n    while n > 0:\n        rem = n%10\n        summ += rem\n        n = n//10\n    return summ\ndef sumDigits(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    i = 0\n    summ = 0\n    while n > 0:\n        rem = n%10\n        summ += rem\n        n = n//10\n    return summ\ndef sumDigits(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    i = 0\n    summ = 0\n    while n > 0:\n        rem = n%10\n        summ += rem\n        n = n//10\n    return summ\ndef sumDigits(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    i = 0\n    summ = 0\n    while n > 0:\n        rem = n%10\n        summ += rem\n        n = n//10\n    return summ\ndef sumDigits(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    i = 0\n    summ = 0\n    while n > 0:\n        rem = n%10\n        summ += rem\n        n = n//10\n    return summ\ndef sumDigits(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    i = 0\n    summ = 0\n    while n > 0:\n        rem = n%10\n        summ += rem\n        n = n//10\n    return summ\ndef sumDigits(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    i = 0\n    summ = 0\n    while n > 0:\n        rem = n%10\n        summ += rem\n        n = n//10\n    return summ\ndef sumDigits(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    i = 0\n    summ = 0\n    while n > 0:\n        rem = n%10\n        summ += rem\n        n = n//10\n    return summ\ndef sumDigits(n)"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(list(filter(lambda x: x%2==0,range(1,n+1))))\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n % 2 == 0) : \n        return (n / 2) * ((n / 2) + 1)\n    else : \n        return ((n / 2) + 1) * (n / 2)\ndef primeFactors(n) : \n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    count = 0\n    while (n % 2 == 0) : \n        count = count + 1\n        n = n / 2\n    return count\ndef countPrimeFactors(n) : \n    '''\n    Write a python function to find the count of prime factors of a number.\n    '''\n    count = 0\n    while (n % 2 == 0) : \n        count = count + 1\n        n = n / 2\n    return count\ndef isPerfectSquare(n) : \n    '''\n    Write a python function to find the square root of a number.\n    '''\n    perfectSquare = int(math.sqrt(n))\n    if perfectSquare * perfectSquare == n : \n        return perfectSquare \n    else : \n        return -1\ndef isPerfectCube(n) : \n    '''\n    Write a python function to find the cube root of a number.\n    '''\n    perfectCube = int(math.pow(n, 1/3))\n    if perfectCube * perfectCube * perfectCube == n : \n        return perfectCube \n    else : \n        return -1\ndef isPerfectFibonacci(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    perfectFibonacci = 1\n    if n == 0 : \n        return 1\n    if n == 1 : \n        return 1\n    for i in range(2, n + 1) : \n        perfectFibonacci = perfectFibonacci * i\n    return perfectFibonacci\ndef isPerfectCubeRoot(n) : \n    '''\n    Write a python function to find the cube root of a number.\n    '''\n    perfectCubeRoot = int(math.pow(n, 1/3))\n    if perfectCubeRoot * perfectCubeRoot * perfectCubeRoot == n : \n        return perfectCubeRoot \n    else : \n        return -1\ndef isPerfectPentagonal(n) : \n    '''\n    Write a python function to find the pentagonal number of a number.\n    '''\n    perfectPentagonal = (1 + math.sqrt(1 + 24 * n)) / 6\n    if perfectPentagonal * perfectPentagonal * perfectPentagonal == n : \n        return perfectPentagonal\n    else : \n        return -1\ndef isPerfectHexagonal(n) : \n    '''\n    Write a python function to find the hexagonal number of a number.\n    '''\n    perfectHexagonal = (1 + math.sqrt(1 + 8 * n)) / 4\n    if perfectHexagonal * perfectHexagonal * perfectHexagonal == n : \n        return perfectHexagonal\n    else : \n        return -1\ndef isPerfectHeptagonal(n) : \n    '''\n    Write a python function to find the heptagonal number of a number.\n    '''\n    perfectHeptagonal = (1 + math.sqrt(1 + 8 * n)) / 4\n    if perfectHeptagonal * perfectHeptagonal * perfectHeptagonal == n : \n        return perfectHeptagonal\n    else : \n        return -1\ndef isPerfectOctagonal(n) : \n    '''\n    Write a python function to find the octagonal number of a number.\n    '''\n    perfectOctagonal = (1 + math.sqrt(1 + 8 * n)) / 4\n    if perfectOctagonal * perfectOctagonal * perfectOctagonal == n : \n        return perfectOctagonal\n    else : \n        return -1\ndef isPerfectNthRoot(n, root) : \n    '''\n    Write a python function to find the nth root of a number.\n    '''\n    if root > 1 : \n        perfectNthRoot = math.pow(n, 1/root)\n        if perfectNthRoot == n : \n            return perfectNthRoot\n        else : \n            return -1\n    else : \n        perfectNthRoot = n\n        return perfectNthRoot\ndef isPerfectNthRootPrime(n, root) : \n    '''\n    Write a python function to find the nth root of a number if the nth root is prime.\n    '''\n    if isPrime(n, root) : \n        return isPerfectNthRoot(n, root)\n    else : \n        return -1\ndef isPerfectNthRootNotPrime(n, root) : \n    '''\n    Write a python function to find the nth root of a number if the nth root is not prime.\n    '''\n    if not isPrime(n, root) : \n        return isPerfectNthRoot(n, root)\n    else : \n        return -1\ndef isPerfectNthRootPerfect(n, root) : \n    '''\n    Write a python function to find the nth root of a number if the nth root is perfect.\n    '''\n    if (isPerfectNthRoot(n, root) == -1) : \n        return -1\n    else : \n        return isPerfectNthRoot(n, root)\ndef isPerfectNthRootPerfectPrime(n, root) : \n    '''\n    Write a python function to find the nth root of a number if the nth root is perfect and prime.\n    '''\n    if (isPerfectNthRoot(n, root) == -1) : \n        return -1\n    elif isPrime(n, root) : \n        return isPerfectNthRoot(n, root)\n    else : \n        return -1\ndef isPerfectNthRootPerfectNotPrime(n, root) : \n    '''\n    Write a python function to find the nth root of a number if the nth root is perfect and not prime.\n    '''\n    if (isPerfectNthRoot(n, root) == -1) : \n        return -1\n    elif not isPrime(n, root) : \n        return isPerfectNthRoot(n, root)\n    else : \n        return -1\ndef isPerfectNthRootNotPerfect(n, root) : \n    '''\n    Write a python function to find the nth root of a number if the nth root is not perfect.\n    '''\n    if (isPerfectNthRoot(n, root) == -1) : \n        return -1\n    else : \n        return isPerfectNthRoot(n, root)\ndef isPerfectNthRootPerfectNotPrime(n, root) : \n    '''\n    Write a python function to find the nth root of a number if the nth root is not perfect and prime.\n    '''\n    if (isPerfectNthRoot(n, root) == -1) : \n        return -1\n    elif not isPrime(n, root) : \n        return isPerfectNthRoot(n, root)\n    else : \n        return -1\ndef isPerfectNthRootNotPerfectPrime(n, root) : \n    '''\n    Write a python function to find the nth root of a number if the nth root is not perfect and not prime.\n    '''\n    if (isPerfectNthRoot(n, root) == -1) : \n        return -1\n    elif not isPrime(n, root) : \n        return isPerfectNthRoot(n, root)\n    else : \n        return -1\ndef isPerfectNthRootPerfectNotPrime(n, root) : \n    '''\n    Write a python function to find the nth root of a number if the nth root is not perfect and not prime.\n    '''\n    if (isPerfectNthRoot(n, root) == -1) : \n        return -1\n    elif not isPrime(n, root) : \n        return isPerfectNthRoot(n, root)\n    else : \n        return -1\ndef isPerfectNthRootPerfectPrimeNotPrime(n, root) : \n    '''\n    Write a python function to find the nth root of a number if the nth root is not perfect and prime.\n    '''\n    if (isPerfectNthRoot("
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n % 2 == 0) : \n        return (n // 2) * (n // 2)\n    else : \n        return (n // 2) * (n // 2) + 1\ndef sumofEvenFactors(n) : \n    '''\n    Write a python function to find the sum of even numbers which divide the number.\n    '''\n    s = 0\n    while (n % 2 == 0) : \n        s = s + n // 2\n        n = n // 2\n    return s\ndef sumofFactors1(n) : \n    '''\n    Write a python function to find the sum of odd factors of a number.\n    '''\n    return n * (n + 1) // 2\ndef sumofOddFactors(n) : \n    '''\n    Write a python function to find the sum of odd numbers which divide the number.\n    '''\n    s = 0\n    while (n % 2 == 0) : \n        s = s + n // 2\n        n = n // 2\n    return s + n\ndef sumofPrimeFactors(n) : \n    '''\n    Write a python function to find the sum of prime factors of a number.\n    '''\n    s = 2\n    for i in range(2, int(math.sqrt(n))) : \n        while (n % i == 0) : \n            s = s + i\n            n = n // i\n    if (n > 2) : \n        s = s + n\n    return s\ndef sumofPrimeFactors1(n) : \n    '''\n    Write a python function to find the sum of prime numbers which divide the number.\n    '''\n    s = 2\n    for i in range(2, int(math.sqrt(n))) : \n        while (n % i == 0) : \n            s = s + i\n            n = n // i\n    return s\ndef isPrime(n) : \n    '''\n    Write a python function to check whether the number is prime or not.\n    '''\n    for i in range(2, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            return False\n    return True\ndef isPrime1(n) : \n    '''\n    Write a python function to check whether the number is prime or not.\n    '''\n    if (n <= 1) : \n        return False\n    if (n <= 3) : \n        return True\n    if (n % 2 == 0 or n % 3 == 0) : \n        return False\n    i = 5\n    while (i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\ndef primeFactors(n) : \n    '''\n    Write a python function to find all the prime factors of a number.\n    '''\n    l = []\n    while (n % 2 == 0) : \n        l.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2) : \n        while (n % i == 0) : \n            l.append(i)\n            n = n // i\n    if (n > 2) : \n        l.append(n)\n    return l\ndef primeFactors1(n) : \n    '''\n    Write a python function to find all the prime factors of a number.\n    '''\n    l = []\n    while (n % 2 == 0) : \n        l.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2) : \n        while (n % i == 0) : \n            l.append(i)\n            n = n // i\n    if (n > 2) : \n        l.append(n)\n    return l\ndef isPerfectSquare(n) : \n    '''\n    Write a python function to check whether the number is perfect square or not.\n    '''\n    s = int(math.sqrt(n))\n    if (s * s == n) : \n        return True\n    else : \n        return False\ndef isPerfectSquare1(n) : \n    '''\n    Write a python function to check whether the number is perfect square or not.\n    '''\n    if (n < 0) : \n        return False\n    if (n == 0 or n == 1) : \n        return True\n    s = int(math.sqrt(n))\n    if (s * s == n) : \n        return True\n    else : \n        return False\ndef isPerfectSquare2(n) : \n    '''\n    Write a python function to check whether the number is perfect square or not.\n    '''\n    if (n < 0) : \n        return False\n    if (n == 0 or n == 1) : \n        return True\n    s = int(math.sqrt(n))\n    if (s * s == n) : \n        return True\n    else : \n        for i in range(s, 1, -1) : \n            if (s * s == n) : \n                return True\n            s = s - 1\n        return False\ndef isPerfectSquare3(n) : \n    '''\n    Write a python function to check whether the number is perfect square or not.\n    '''\n    if (n < 0) : \n        return False\n    if (n == 0 or n == 1) : \n        return True\n    s = int(math.sqrt(n))\n    if (s * s == n) : \n        return True\n    else : \n        for i in range(s + 1, 1, -1) : \n            if (s * s == n) : \n                return True\n            s = s + 1\n        return False\ndef isPerfectSquare4(n) : \n    '''\n    Write a python function to check whether the number is perfect square or not.\n    '''\n    if (n < 0) : \n        return False\n    if (n == 0 or n == 1) : \n        return True\n    s = int(math.sqrt(n))\n    if (s * s == n) : \n        return True\n    else : \n        for i in range(s, 1, -1) : \n            if (s * s == n) : \n                return True\n            s = s - 1\n        return False\ndef isPerfectSquare5(n) : \n    '''\n    Write a python function to check whether the number is perfect square or not.\n    '''\n    if (n < 0) : \n        return False\n    if (n == 0 or n == 1) : \n        return True\n    s = int(math.sqrt(n))\n    if (s * s == n) : \n        return True\n    else : \n        for i in range(s - 1, 1, -1) : \n            if (s * s == n) : \n                return True\n            s = s + 1\n        return False\ndef isPerfectSquare6(n) : \n    '''\n    Write a python function to check whether the number is perfect square or not.\n    '''\n    if (n < 0) : \n        return False\n    if (n == 0 or n == 1) : \n        return True\n    s = int(math.sqrt(n))\n    if (s * s == n) : \n        return True\n    else : \n        for i in range(s + 1, 1, -1) : \n            if (s * s == n) : \n                return True\n            s = s + 1\n        return False\ndef isPerfectSquare7(n) : \n    '''\n    Write a python function to check whether the number is perfect square or not.\n    '''\n    if (n < 0) : \n        return False\n    if (n == 0 or n == 1) : \n        return True\n    s = int(math.sqrt(n))\n    if (s * s == n) : \n        return True\n    else : \n        for i in range(s - 1, 1, -1) : \n            if (s * s == n) : \n                return True\n            s = s + 1\n        return False\ndef isPerfectSquar"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    for i in range(1, int(math.sqrt(n))+1) :\n        if (n % i == 0) :\n            if (i % 2 == 0) :\n                total = total + i \n            else :\n                total = total + n/i\n    return total\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile('z*')\n    if pattern.search(text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\b[a-z]*z\\b', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\w+z\\w*'\n    if re.search(pattern, text):\n        print(\"Found a match!\")\n    else:\n        print(\"No match\")\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.search(r'\\b[zZ]+\\b', text)\n    if match:\n        return match.group()\n    return None\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('z', text):\n        print(re.search('z', text))\n    else:\n        print('Nope')\ndef text_match_no_z(text):\n    '''\n    Write a function that matches a word not containing 'z'.\n    '''\n    if re.search('[^z]', text):\n        print(re.search('[^z]', text))\n    else:\n        print('Nope')\ndef text_match_numbers(text):\n    '''\n    Write a function that matches a word containing 0-9.\n    '''\n    if re.search('\\d', text):\n        print(re.search('\\d', text))\n    else:\n        print('Nope')\ndef text_match_no_numbers(text):\n    '''\n    Write a function that matches a word not containing numbers.\n    '''\n    if re.search('[^0-9]', text):\n        print(re.search('[^0-9]', text))\n    else:\n        print('Nope')\ndef text_match_alnum(text):\n    '''\n    Write a function that matches a word containing alphanumeric characters from a-z, A-Z, 0-9, or _.\n    '''\n    if re.search('[a-zA-Z0-9_]', text):\n        print(re.search('[a-zA-Z0-9_]', text))\n    else:\n        print('Nope')\ndef text_match_no_alnum(text):\n    '''\n    Write a function that matches a word not containing alphanumeric characters from a-z, A-Z, 0-9, or _.\n    '''\n    if re.search('[^a-zA-Z0-9_]', text):\n        print(re.search('[^a-zA-Z0-9_]', text))\n    else:\n        print('Nope')\ndef text_match_with_under(text):\n    '''\n    Write a function that matches a word containing 'x' or 'X'.\n    '''\n    if re.search('x|X', text):\n        print(re.search('x|X', text))\n    else:\n        print('Nope')\ndef text_match_no_under(text):\n    '''\n    Write a function that matches a word not containing 'x' or 'X'.\n    '''\n    if re.search('[^xX]', text):\n        print(re.search('[^xX]', text))\n    else:\n        print('Nope')\ndef text_match_alpha(text):\n    '''\n    Write a function that matches a word containing only alpha-numeric characters from a-z, A-Z.\n    '''\n    if re.search('[a-zA-Z]', text):\n        print(re.search('[a-zA-Z]', text))\n    else:\n        print('Nope')\ndef text_match_no_alpha(text):\n    '''\n    Write a function that matches a word not containing only alpha-numeric characters from a-z, A-Z.\n    '''\n    if re.search('[^a-zA-Z]', text):\n        print(re.search('[^a-zA-Z]', text))\n    else:\n        print('Nope')\ndef text_match_non_lower(text):\n    '''\n    Write a function that matches a word containing any non-lowercase character.\n    '''\n    if re.search('[^a-z]', text):\n        print(re.search('[^a-z]', text))\n    else:\n        print('Nope')\ndef text_match_no_non_lower(text):\n    '''\n    Write a function that matches a word containing only lowercase characters from a-z.\n    '''\n    if re.search('[a-z]', text):\n        print(re.search('[a-z]', text))\n    else:\n        print('Nope')\ndef text_match_non_upper(text):\n    '''\n    Write a function that matches a word containing any non-uppercase character.\n    '''\n    if re.search('[^A-Z]', text):\n        print(re.search('[^A-Z]', text))\n    else:\n        print('Nope')\ndef text_match_no_non_upper(text):\n    '''\n    Write a function that matches a word containing only uppercase characters from A-Z.\n    '''\n    if re.search('[A-Z]', text):\n        print(re.search('[A-Z]', text))\n    else:\n        print('Nope')\ndef text_match_start_end(text):\n    '''\n    Write a function that matches a word containing 'x' at the start or end of the word.\n    '''\n    if re.search('x$|^x', text):\n        print(re.search('x$|^x', text))\n    else:\n        print('Nope')\ndef text_match_no_start_end(text):\n    '''\n    Write a function that matches a word containing 'x' not at the start or end of the word.\n    '''\n    if re.search('[^xX]$|[^xX]', text):\n        print(re.search('[^xX]$|[^xX]', text))\n    else:\n        print('Nope')\ndef text_match_word(text):\n    '''\n    Write a function that matches a word containing any letter (lowercase or uppercase).\n    '''\n    if re.search('\\w', text):\n        print(re.search('\\w', text))\n    else:\n        print('Nope')\ndef text_match_no_word(text):\n    '''\n    Write a function that matches a word containing only digits.\n    '''\n    if re.search('\\d', text):\n        print(re.search('\\d', text))\n    else:\n        print('Nope')\ndef text_match_range(text):\n    '''\n    Write a function that matches a word that contains any two consecutive characters.\n    '''\n    if re.search('\\w\\w', text):\n        print(re.search('\\w\\w', text))\n    else:\n        print('Nope')\ndef text_match_no_range(text):\n    '''\n    Write a function that matches a word that contains no two consecutive characters.\n    '''\n    if re.search('\\w{2}', text):\n        print(re.search('\\w{2}', text))\n    else:\n        print('Nope')\ndef text_match_end(text):\n    '''\n    Write a function that matches a word ending with 'b'.\n    '''\n    if re.search('b$', text):\n        print(re.search('b$', text))\n    else:\n        print('Nope')\ndef text_match_no_end(text):\n    '''\n    Write a function that matches a word that does not end with 'b'.\n    '''\n    if re.search('b$', text):\n        print(re.search('b$', text))\n    else:\n        print('Nope')\ndef text_match_same(text):\n    '''\n    Write a function that matches a word that has the same letters as the word \"madam\".\n    '''\n    if re.search('madam', text):\n        print(re.search('madam', text))\n    else:\n        print('Nope')\ndef text_match_no_same(text):\n    '''\n    Write a function that matches a word that does not have the same letters as the word \"madam\".\n    '''\n    if re.search('madam', text):\n        print(re.search('madam', text))\n    else:\n        print('Nope')\ndef text_match_repetition(text):\n    '''\n    Write a function that matches a word that has repeated letters.\n    '''\n    if re.search('(.)\\\\1', text):\n        print(re.search('(.)\\\\1', text))\n    else:\n        print('Nope')\ndef text_match_no_repetition(text):\n    '''\n    Write a functio"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    wordz = re.findall(r'\\w*z\\w*',text)\n    return wordz\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search('\\b[z]+\\b', text)\ndef text_match_wordy(text):\n    '''\n    Write a function that matches a word containing 'y'.\n    '''\n    return re.search('\\b[y]+\\b', text)\ndef text_match_wordx(text):\n    '''\n    Write a function that matches a word containing 'x'.\n    '''\n    return re.search('\\b[x]+\\b', text)\ndef text_match_wordf(text):\n    '''\n    Write a function that matches a word containing 'f'.\n    '''\n    return re.search('\\b[f]+\\b', text)\ndef text_match_wordq(text):\n    '''\n    Write a function that matches a word containing 'q'.\n    '''\n    return re.search('\\b[q]+\\b', text)\ndef text_match_wordp(text):\n    '''\n    Write a function that matches a word containing 'p'.\n    '''\n    return re.search('\\b[p]+\\b', text)\ndef text_match_wordr(text):\n    '''\n    Write a function that matches a word containing 'r'.\n    '''\n    return re.search('\\b[r]+\\b', text)\ndef text_match_words(text):\n    '''\n    Write a function that matches a word containing's'.\n    '''\n    return re.search('\\b[s]+\\b', text)\ndef text_match_wordo(text):\n    '''\n    Write a function that matches a word containing 'o'.\n    '''\n    return re.search('\\b[o]+\\b', text)\ndef text_match_wordl(text):\n    '''\n    Write a function that matches a word containing 'l'.\n    '''\n    return re.search('\\b[l]+\\b', text)\ndef text_match_wordt(text):\n    '''\n    Write a function that matches a word containing 't'.\n    '''\n    return re.search('\\b[t]+\\b', text)\ndef text_match_wordu(text):\n    '''\n    Write a function that matches a word containing 'u'.\n    '''\n    return re.search('\\b[u]+\\b', text)\ndef text_match_wordm(text):\n    '''\n    Write a function that matches a word containing'm'.\n    '''\n    return re.search('\\b[m]+\\b', text)\ndef text_match_worda(text):\n    '''\n    Write a function that matches a word containing 'a'.\n    '''\n    return re.search('\\b[a]+\\b', text)\ndef text_match_wordu(text):\n    '''\n    Write a function that matches a word containing 'u'.\n    '''\n    return re.search('\\b[u]+\\b', text)\ndef text_match_wordn(text):\n    '''\n    Write a function that matches a word containing 'n'.\n    '''\n    return re.search('\\b[n]+\\b', text)\ndef text_match_wordr(text):\n    '''\n    Write a function that matches a word containing 'r'.\n    '''\n    return re.search('\\b[r]+\\b', text)\ndef text_match_wordd(text):\n    '''\n    Write a function that matches a word containing 'd'.\n    '''\n    return re.search('\\b[d]+\\b', text)\ndef text_match_wordw(text):\n    '''\n    Write a function that matches a word containing 'w'.\n    '''\n    return re.search('\\b[w]+\\b', text)\ndef text_match_wordr(text):\n    '''\n    Write a function that matches a word containing 'r'.\n    '''\n    return re.search('\\b[r]+\\b', text)\ndef text_match_worde(text):\n    '''\n    Write a function that matches a word containing 'e'.\n    '''\n    return re.search('\\b[e]+\\b', text)\ndef text_match_wordi(text):\n    '''\n    Write a function that matches a word containing 'i'.\n    '''\n    return re.search('\\b[i]+\\b', text)\ndef text_match_worde(text):\n    '''\n    Write a function that matches a word containing 'e'.\n    '''\n    return re.search('\\b[e]+\\b', text)\ndef text_match_wordw(text):\n    '''\n    Write a function that matches a word containing 'w'.\n    '''\n    return re.search('\\b[w]+\\b', text)\ndef text_match_worda(text):\n    '''\n    Write a function that matches a word containing 'a'.\n    '''\n    return re.search('\\b[a]+\\b', text)\ndef text_match_wordr(text):\n    '''\n    Write a function that matches a word containing 'r'.\n    '''\n    return re.search('\\b[r]+\\b', text)\ndef text_match_wordl(text):\n    '''\n    Write a function that matches a word containing 'l'.\n    '''\n    return re.search('\\b[l]+\\b', text)\ndef text_match_wordt(text):\n    '''\n    Write a function that matches a word containing 't'.\n    '''\n    return re.search('\\b[t]+\\b', text)\ndef text_match_wordd(text):\n    '''\n    Write a function that matches a word containing 'd'.\n    '''\n    return re.search('\\b[d]+\\b', text)\ndef text_match_wordo(text):\n    '''\n    Write a function that matches a word containing 'o'.\n    '''\n    return re.search('\\b[o]+\\b', text)\ndef text_match_wordn(text):\n    '''\n    Write a function that matches a word containing 'n'.\n    '''\n    return re.search('\\b[n]+\\b', text)\ndef text_match_wordo(text):\n    '''\n    Write a function that matches a word containing 'o'.\n    '''\n    return re.search('\\b[o]+\\b', text)\ndef text_match_wordr(text):\n    '''\n    Write a function that matches a word containing 'r'.\n    '''\n    return re.search('\\b[r]+\\b', text)\ndef text_match_wordr(text):\n    '''\n    Write a function that matches a word containing 'r'.\n    '''\n    return re.search('\\b[r]+\\b', text)\ndef text_match_wordu(text):\n    '''\n    Write a function that matches a word containing 'u'.\n    '''\n    return re.search('\\b[u]+\\b', text)\ndef text_match_wordi(text):\n    '''\n    Write a function that matches a word containing 'i'.\n    '''\n    return re.search('\\b[i]+\\b', text)\ndef text_match_wordl(text):\n    '''\n    Write a function that matches a word containing 'l'.\n    '''\n    return re.search('\\b[l]+\\b', text)\ndef text_match_wordt(text):\n    '''\n    Write a function that matches a word containing 't'.\n    '''\n    return re.search('\\b[t]+\\b', text)\ndef text_match_wordu(text):\n    '''\n    Write a function that matches a word containing 'u'.\n    '''\n    return re.search('\\b[u]+\\b', text)\ndef text_match_wordn(text):\n    '''\n    Write a function that matches a word containing 'n'.\n    '''\n    return re.search('\\b[n]+\\b', text)\ndef text_match_wordr(text):\n    '''\n    Write a function that matches a word containing 'r'.\n    '''\n    return re.search('\\b[r]+\\b', text)\ndef text_match_wordu(text):\n    '''\n    Write a function that matches a word containing 'u'.\n    '''\n    return re"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    x = re.search('[z]', text)\n    if x:\n        print('Found a word containing \"z\"')\n    else:\n        print('Not a word containing \"z\"')\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    wordz = re.search(r'\\bz\\b', text)\n    if wordz:\n        return wordz.group()\n    else:\n        return 'Not found'\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r\"\\b\\w*z\\w*\\b\")\n    if pattern.search(text):\n        return True\n    return False\n    #r'\\b\\w*z\\w*\\b'\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        print \"Month number is out of range\"\n        return 1\n    elif monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            if 1 <= day <= 29:\n                return 0\n            else:\n                print \"Day is out of range\"\n                return 1\n        else:\n            if 1 <= day <= 28:\n                return 0\n            else:\n                print \"Day is out of range\"\n                return 1\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        if 1 <= day <= 30:\n            return 0\n        else:\n            print \"Day is out of range\"\n            return 1\n    else:\n        if 1 <= day <= 31:\n            return 0\n        else:\n            print \"Day is out of range\"\n            return 1\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_numb_dict = {'1':31, '2':28, '3':31, '4':30, '5':31, '6':30, '7':31, '8':31, '9':30, '10':31, '11':30, '12':31}\n    if monthnum2 in month_numb_dict:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return 31\n    else:\n        return 30\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # Declare a constant for a leap year\n    leap_year = 2000\n    if monthnum2 == 1:\n        return True\n    elif monthnum2 == 2:\n        if leap_year % 400 == 0:\n            return True\n        else:\n            return False\n    elif monthnum2 == 3:\n        return True\n    elif monthnum2 == 4:\n        return True\n    elif monthnum2 == 5:\n        return True\n    elif monthnum2 == 6:\n        return True\n    elif monthnum2 == 7:\n        return True\n    elif monthnum2 == 8:\n        return True\n    elif monthnum2 == 9:\n        return True\n    elif monthnum2 == 10:\n        return True\n    elif monthnum2 == 11:\n        return True\n    elif monthnum2 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        print('January')\n    elif monthnum2 == 2:\n        print('February')\n    elif monthnum2 == 3:\n        print('March')\n    elif monthnum2 == 4:\n        print('April')\n    elif monthnum2 == 5:\n        print('May')\n    elif monthnum2 == 6:\n        print('June')\n    elif monthnum2 == 7:\n        print('July')\n    elif monthnum2 == 8:\n        print('August')\n    elif monthnum2 == 9:\n        print('September')\n    elif monthnum2 == 10:\n        print('October')\n    elif monthnum2 == 11:\n        print('November')\n    elif monthnum2 == 12:\n        print('December')\n    else:\n        print('Invalid month number')\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if(monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        print(\"{} is a leap year\".format(monthnum2))\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        print(\"{} is a leap year\".format(monthnum2))\n    else:\n        print(\"{} is a not leap year\".format(monthnum2))\n    \ndef check_year(year):\n    '''\n    Write a function to check whether the given year is leap or not.\n    '''\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                print(\"{} is a leap year\".format(year))\n            else:\n                print(\"{} is not a leap year\".format(year))\n        else:\n            print(\"{} is a leap year\".format(year))\n    else:\n        print(\"{} is not a leap year\".format(year))\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\ndef check_leapyear_number(yearnum2):\n    '''\n    Write a function to check whether the given year number is leap or not.\n    '''\n    if yearnum2%4 == 0 and yearnum2%100!= 0:\n        return True\n    elif yearnum2%4 == 0 and yearnum2%100 == 0 and yearnum2%400 == 0:\n        return True\n    else:\n        return False\ndef leapyear_date_number(yearnum2):\n    '''\n    Write a function to check whether the given year number is leap or not and then find the number of days in it.\n    '''\n    if check_leapyear_number(yearnum2) == True:\n        return 366\n    else:\n        return 365\ndef date_numb(yearnum2,monthnum2,daynum2):\n    '''\n    Write a function to check whether the given date number is valid or not.\n    '''\n    if check_monthnumb_number(monthnum2) == True:\n        if check_leapyear_number(yearnum2) == True:\n            if daynum2>=1 and daynum2<=366:\n                return True\n            else:\n                return False\n        else:\n            if daynum2>=1 and daynum2<=365:\n                return True\n            else:\n                return False\n    else:\n        return False\ndef date_numb_days(yearnum2,monthnum2,daynum2):\n    '''\n    Write a function to check whether the given date number is valid or not.\n    '''\n    if date_numb(yearnum2,monthnum2,daynum2) == True:\n        if check_monthnumb_number(monthnum2) == True:\n            if check_leapyear_number(yearnum2) == True:\n                if daynum2>=1 and daynum2<=366:\n                    return 366-daynum2\n                else:\n                    return 0\n            else:\n                if daynum2>=1 and daynum2<=365:\n                    return 365-daynum2\n                else:\n                    return 0\n        else:\n            return 0\n    else:\n        return False\ndef date_numb_year(yearnum2,monthnum2,daynum2):\n    '''\n    Write a function to check whether the given date number is valid or not.\n    '''\n    if date_numb(yearnum2,monthnum2,daynum2) == True:\n        if check_monthnumb_number(monthnum2) == True:\n            if check_leapyear_number(yearnum2) == True:\n                if daynum2>=1 and daynum2<=366:\n                    return yearnum2-1\n                else:\n                    return 0\n            else:\n                if daynum2>=1 and daynum2<=365:\n                    return yearnum2\n                else:\n                    return 0\n        else:\n            return 0\n    else:\n        return False\ndef date_numb_month(yearnum2,monthnum2,daynum2):\n    '''\n    Write a function to check whether the given date number is valid or not.\n    '''\n    if date_numb(yearnum2,monthnum2,daynum2) == True:\n        if check_monthnumb_number(monthnum2) == True:\n            if check_leapyear_number(yearnum2) == True:\n                if daynum2>=1 and daynum2<=366:\n                    return monthnum2\n                else:\n                    return 0\n            else:\n                if daynum2>=1 and daynum2<=365:\n                    return monthnum2+1\n                else:\n                    return 0\n        else:\n            return 0\n    else:\n        return False\ndef date_numb_day(yearnum2,monthnum2,daynum2):\n    '''\n    Write a function to check whether the given date number is valid or not.\n    '''\n    if date_numb(yearnum2,monthnum2,daynum2) == True:\n        if check_monthnumb_number(monthnum2) == True:\n            if check_leapyear_number(yearnum2) == True:\n                if daynum2>=1 and daynum2<=366:\n                    return daynum2\n                else:\n                    return 0\n            else:\n                if daynum2>=1 and daynum2<=365:\n                    return daynum2\n                else:\n                    return 0\n        else:\n            return 0\n    else:\n        return False\ndef date_numb_all(yearnum2,monthnum2,daynum2):\n    '''\n    Write a function to check whether the given date number is valid or not.\n    '''\n    if date_numb(yearnum2,monthnum2,daynum2) == True:\n        if check_monthnumb_number(monthnum2) == True:\n            if check_leapyear_number(yearnum2) == True:\n                if daynum2>=1 and daynum2<=366:\n                    return 366-daynum2,366-daynum2,366-daynum2,366-daynum2,366-daynum2,366-daynum2,366-daynum2\n                else:\n                    return 0,0,0,0,0,0,0\n            else:\n                if daynum2>=1 and daynum2<=365:\n                    return 365-daynum2,365-daynum2,365-daynum2,365-daynum2,365-daynum2,365-daynum2,365-daynum2\n                else:\n                    return 0,0,0,0,0,0,0\n        else:\n            return 0,0,0,0,0,0,0\n    else:\n        return False\ndef date_numb_all_day(yearnum2,monthnum2,daynum2):\n    '''\n    Write a function to check whether the given date number is valid or not.\n    '''\n    if date_numb(yearnum2,monthnum2,daynum2) == True:\n        if check_monthnumb_number(monthnum2) == True:\n            if check_leapyear_number(yearnum2) == True:\n                if daynum2>=1 and daynum2<=366:\n                    return 366-daynum2,366-daynum2,366-daynum2,366-daynum2,366-daynum2,366-daynum2\n                else:\n                    return 0,0,0,0,0,0\n            else:\n                if daynum2>=1 and daynum2<=365:\n                    return 365-daynum2,365-daynum2,365-daynum2,365-daynum2,365-daynum2\n                else:\n                    return 0,0,0,0,0\n        else:\n            return 0,0,0,0,0\n    else:\n        return False\ndef date_numb_range(startyearnum2,endyearnum2):\n    '''\n    Write a function to check whether the given date number is valid or not.\n    '''\n    if startyearnum2>endyearnum2:\n        return False\n    else:\n        startyearnum2+=1\n        yearnum2=startyearnum2\n        if check_monthnumb_number(monthnum2) == True:\n            if check_leapyear_number(yearnum2) == True:\n                if daynum2>=1 and daynum2<=366:\n                    while yearnum2<=endyearnum2:\n                        yield 366-daynum2,366-daynum2,366-daynum2,366-daynum2,366-daynum2,366-daynum2,366-daynum2\n                        yearnum2+=1\n                else:\n                    while yearnum2<=endyearnum2:\n                        yield 0,0,0,0,0,0,0\n                        yearnum2+=1\n            else:\n                if daynum2>=1 and daynum2<=365:\n                    while yearnum2<=endyearnum2:\n                        yield 365-daynum2,365-daynum2,365-da"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(0, len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [x[::-1] for x in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [x[::-1] for x in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for string in stringlist:\n        newlist.insert(0, string)\n    return newlist\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [str[::-1] for str in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [x[::-1] for x in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(0,len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if stringlist is None or len(stringlist) < 1:\n        return stringlist\n    else:\n        result = []\n        for string in stringlist:\n            string = string[::-1]\n            result.append(string)\n        return result\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    rev_list = []\n    for string in stringlist:\n        rev_list.append(string[::-1])\n    return rev_list\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for i in range(len(stringlist)):\n        newlist.append(stringlist[i][::-1])\n    return newlist\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    m = len(lst)\n    if (m == 0):\n        return m\n    for i in range(len(lst)):\n        for j in range(i,len(lst)):\n            sub = lst[i:j+1]\n            if len(sub) < m:\n                m = len(sub)\n    return m\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    m = len(lst[0])\n    for i in lst:\n        if len(i) < m:\n            m = len(i)\n    for i in lst:\n        if len(i) == m:\n            return i\n    return None\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst.sort(key=len)\n    return lst[0]\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    length= len(lst)\n    i=0\n    while i< length:\n        if length-i <= lst[i]:\n            return lst[i]\n        i= i+1\n    return 0\n    \ndef Get_titles(soup):\n    '''\n    Write a python function to get all the titles of the episodes available on the webpage.\n    '''\n    \n    elements= soup.findAll('span', attrs={\"class\":\"title\"})\n    \n    return elements\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    for sublst in lst:\n        if len(sublst)<len(min):\n            min=sublst\n    return min\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    n = len(lst)\n    min=lst[0]\n    for i in range(1,n):\n        if len(lst[i]) < len(min):\n            min = lst[i]\n    return min\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minlen = len(lst[0])\n    minlist = lst[0]\n    for i in range(len(lst)):\n        if minlen > len(lst[i]):\n            minlen = len(lst[i])\n            minlist = lst[i]\n    return minlist\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = len(lst[0])\n    min_list = lst[0]\n    for l in lst:\n        if len(l) <= min:\n            min = len(l)\n            min_list = l\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    global min_length\n    if len(lst) == 1:\n        return lst\n    l = len(lst)\n    if lst[0] < lst[1]:\n        min_length = lst[0]\n        return lst[0]\n    else:\n        min_length = lst[1]\n        return lst[1]\n    \n    \ndef sub_list(lst):\n    '''\n    Write a python function to find the sublist having maximum length.\n    '''\n    global max_length\n    if len(lst) == 1:\n        return lst\n    l = len(lst)\n    if lst[0] > lst[1]:\n        max_length = lst[0]\n        return lst[0]\n    else:\n        max_length = lst[1]\n        return lst[1]\n    \ndef find_common_element(lst):\n    '''\n    Write a python function to find the common element between two list.\n    '''\n    a = 0\n    b = 0\n    l = len(lst)\n    while a < l:\n        if lst[a] in lst[b]:\n            print lst[a]\n            a = a + 1\n            b = b + 1\n        elif lst[b] in lst[a]:\n            print lst[b]\n            a = a + 1\n            b = b + 1\n        else:\n            a = a + 1\n            b = b + 1\n            \ndef common_elements():\n    '''\n    Write a python function to find the common elements between two list.\n    '''\n    global common_lst\n    for i in range(0,len(first_lst)):\n        for j in range(0,len(second_lst)):\n            if first_lst[i] == second_lst[j]:\n                common_lst.append(first_lst[i])\n                break\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    n = len(lst) \n    min = lst[0]\n    min_index = 0\n    for i in range(1, n): \n        if (len(min) > len(lst[i])): \n            min = lst[i] \n            min_index = i \n    return min_index \n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    \n    return l*b\n    \ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    \n    return 2*(l+b)\n    \ndef triangle_area(l,b):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    \n    return 0.5*l*b\n    \ndef triangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    \n    return l+b\n    \ndef rhombus_area(l,b):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    \n    return l*b\n    \ndef rhombus_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rhombus.\n    '''\n    \n    return 2*(l+b)\n    \ndef quadrilateral_area(l,b):\n    '''\n    Write a function to find the area of a quadrilateral.\n    '''\n    \n    return l*b\n    \ndef quadrilateral_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a quadrilateral.\n    '''\n    \n    return 4*l\n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    \n    return math.pi*(r**2)\n    \ndef circle_perimeter(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    \n    return 2*math.pi*r\n    \ndef rhombus_area(l,b):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    \n    return l*b\n    \ndef rhombus_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rhombus.\n    '''\n    \n    return 2*(l+b)\n    \ndef rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    \n    return l*b\n    \ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    \n    return 2*(l+b)\n    \ndef triangle_area(l,b):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    \n    return 0.5*l*b\n    \ndef triangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    \n    return l+b\n    \ndef rhombus_area(l,b):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    \n    return l*b\n    \ndef rhombus_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rhombus.\n    '''\n    \n    return 2*(l+b)\n    \ndef quadrilateral_area(l,b):\n    '''\n    Write a function to find the area of a quadrilateral.\n    '''\n    \n    return l*b\n    \ndef quadrilateral_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a quadrilateral.\n    '''\n    \n    return 4*l\n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    \n    return math.pi*(r**2)\n    \ndef circle_perimeter(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    \n    return 2*math.pi*r\n    \ndef rhombus_area(l,b):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    \n    return l*b\n    \ndef rhombus_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rhombus.\n    '''\n    \n    return 2*(l+b)\n    \ndef rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    \n    return l*b\n    \ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    \n    return 2*(l+b)\n    \ndef triangle_area(l,b):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    \n    return 0.5*l*b\n    \ndef triangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    \n    return l+b\n    \ndef rhombus_area(l,b):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    \n    return l*b\n    \ndef rhombus_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rhombus.\n    '''\n    \n    return 2*(l+b)\n    \ndef quadrilateral_area(l,b):\n    '''\n    Write a function to find the area of a quadrilateral.\n    '''\n    \n    return l*b\n    \ndef quadrilateral_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a quadrilateral.\n    '''\n    \n    return 4*l\n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    \n    return math.pi*(r**2)\n    \ndef circle_perimeter(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    \n    return 2*math.pi*r\n    \ndef rhombus_area(l,b):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    \n    return l*b\n    \ndef rhombus_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rhombus.\n    '''\n    \n    return 2*(l+b)\n    \ndef rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    \n    return l*b\n    \ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    \n    return 2*(l+b)\n    \ndef triangle_area(l,b):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    \n    return 0.5*l*b\n    \ndef triangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    \n    return l+b\n    \ndef rhombus_area(l,b):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    \n    return l*b\n    \ndef rhombus_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rhombus.\n    '''\n    \n    return 2*(l+b)\n    \ndef quadrilateral_area(l,b):\n    '''\n    Write a function to find the area of a quadrilateral.\n    '''\n    \n    return l*b\n    \ndef quadrilateral_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a quadrilateral.\n    '''\n    \n    return 4*l\n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    \n    return math.pi*(r**2)\n    \ndef circle_perimeter(r):\n    '"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+')\n    str1 = pattern.sub('', str1)\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]\\w+\\b', re.I)\n    subst = re.sub(pattern, '', str1)\n    return subst\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if len(str1) <= 1:\n        return str1\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            str1 = str1[:i] + str1[i + 1:]\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]',r'',str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub('[A-Z]+', '', str1)\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[A-Z]+', '', str1)\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # sub_str = re.sub(r'[A-Z]', \"\", str1)\n    # return sub_str\n    return re.sub('[A-Z]', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    output = ''\n    for i in str1:\n        if i.isupper():\n            pass\n        else:\n            output += i\n    return output\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res=[]\n    for i in lst:\n        res.append(i[0])\n    return res\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in lst:\n        yield i[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    ret = []\n    for l in lst:\n        ret.append(l[0])\n    return ret\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [elem[0] for elem in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return map(lambda x: x[0], lst) \n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0] for lst in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = [item[0] for item in lst]\n    return res\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst] \n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst]\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for c in str:\n        if c.isupper():\n            count += 1\n    return count\n    \ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    count = 0\n    for c in str:\n        if c.islower():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if (ord(i) >= 65 and ord(i) <= 90):\n            count = count + 1\n    return count\ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if (ord(i) >= 97 and ord(i) <= 122):\n            count = count + 1\n    return count\ndef digit_ctr(str):\n    '''\n    Write a python function to count the digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if (ord(i) >= 48 and ord(i) <= 57):\n            count = count + 1\n    return count\ndef space_ctr(str):\n    '''\n    Write a python function to count the white spaces in a given string.\n    '''\n    count = 0\n    for i in str:\n        if (ord(i) == 32):\n            count = count + 1\n    return count\ndef char_ctr(str):\n    '''\n    Write a python function to count the characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        count = count + 1\n    return count\ndef sentence_ctr(str):\n    '''\n    Write a python function to count the sentences in a given string.\n    '''\n    count = 0\n    for i in str:\n        if (ord(i) == 32):\n            count = count + 1\n        elif (ord(i) == '.' or ord(i) == '?' or ord(i) == '!'):\n            count = count + 1\n    return count\ndef paragraph_ctr(str):\n    '''\n    Write a python function to count the paragraphs in a given string.\n    '''\n    count = 0\n    for i in str:\n        if (ord(i) == 32):\n            count = count + 1\n        elif (ord(i) == '.' or ord(i) == '?' or ord(i) == '!'):\n            count = count + 1\n        elif (ord(i) == '\\n'):\n            count = count + 1\n    return count\ndef read_file(fname):\n    '''\n    Write a python function to read the content of a file and return it as a string.\n    '''\n    f = open(fname, 'r')\n    content = f.read()\n    return content\ndef count_char(str, c):\n    '''\n    Write a python function to count the number of times a character is repeated in a string.\n    '''\n    count = 0\n    for i in str:\n        if (i == c):\n            count = count + 1\n    return count\ndef count_words(str):\n    '''\n    Write a python function to count the number of words in a given string.\n    '''\n    str = str.split()\n    return len(str)\ndef count_lines(str):\n    '''\n    Write a python function to count the number of lines in a given string.\n    '''\n    count = 0\n    for i in str:\n        if (ord(i) == 10):\n            count = count + 1\n    return count\ndef count_chars(str):\n    '''\n    Write a python function to count the number of characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        count = count + 1\n    return count\ndef count_uppercase(str):\n    '''\n    Write a python function to count the number of upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if (ord(i) >= 65 and ord(i) <= 90):\n            count = count + 1\n    return count\ndef count_lowercase(str):\n    '''\n    Write a python function to count the number of lower case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if (ord(i) >= 97 and ord(i) <= 122):\n            count = count + 1\n    return count\ndef count_digits(str):\n    '''\n    Write a python function to count the number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if (ord(i) >= 48 and ord(i) <= 57):\n            count = count + 1\n    return count\ndef count_spaces(str):\n    '''\n    Write a python function to count the number of white spaces in a given string.\n    '''\n    count = 0\n    for i in str:\n        if (ord(i) == 32):\n            count = count + 1\n    return count\ndef count_punctuations(str):\n    '''\n    Write a python function to count the number of punctuations in a given string.\n    '''\n    count = 0\n    for i in str:\n        if (ord(i) == 33 or ord(i) == 34 or ord(i) == 35 or ord(i) == 36 or ord(i) == 37 or ord(i) == 38 or ord(i) == 39 or ord(i) == 40 or ord(i) == 41 or ord(i) == 42 or ord(i) == 43 or ord(i) == 44 or ord(i) == 45 or ord(i) == 46 or ord(i) == 47):\n            count = count + 1\n    return count\ndef count_sentences(str):\n    '''\n    Write a python function to count the number of sentences in a given string.\n    '''\n    str = str.split('.')\n    count = 0\n    for i in str:\n        if (ord(i) == 10):\n            count = count + 1\n    return count\ndef count_paragraphs(str):\n    '''\n    Write a python function to count the number of paragraphs in a given string.\n    '''\n    str = str.split('\\n')\n    count = 0\n    for i in str:\n        if (ord(i) == 10):\n            count = count + 1\n    return count\ndef longest_word(str):\n    '''\n    Write a python function to find the longest word in a given string.\n    '''\n    str = str.split()\n    maxlen = len(str[0])\n    for i in str:\n        if (len(i) > maxlen):\n            maxlen = len(i)\n    return maxlen\ndef longest_sentence(str):\n    '''\n    Write a python function to find the longest sentence in a given string.\n    '''\n    str = str.split('.')\n    maxlen = len(str[0])\n    for i in str:\n        if (len(i) > maxlen):\n            maxlen = len(i)\n    return maxlen\ndef longest_paragraph(str):\n    '''\n    Write a python function to find the longest paragraph in a given string.\n    '''\n    str = str.split('\\n')\n    maxlen = len(str[0])\n    for i in str:\n        if (len(i) > maxlen):\n            maxlen = len(i)\n    return maxlen\ndef reverse_string(str):\n    '''\n    Write a python function to reverse a string.\n    '''\n    str = str[::-1]\n    return str\ndef is_pallindrome(str):\n    '''\n    Write a python function to determine whether a string is a pallindrome or not.\n    '''\n    if (str == reverse_string(str)):\n        return True\n    else:\n        return False\ndef sum_list(list):\n    '''\n    Write a python function to sum all the items in a given list.\n    '''\n    total = 0\n    for i in list:\n        total = total + i\n    return total\ndef fibonacci(n):\n    '''\n    Write a python function to calculate the nth fibonacci number in a given list.\n    '''\n    if (n == 0):\n        return 0\n    elif (n == 1):\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\ndef factorial(n):\n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    if (n == 0):\n        return 1\n    else:\n        return n * factorial(n "
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_ctr = 0\n    for i in str:\n        if i.isupper():\n            upper_ctr += 1\n    return upper_ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(1 for c in str if c.isupper())\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # upper = 0\n    # for letter in str:\n    #     if letter.isupper():\n    #         upper += 1\n    # return upper\n    return sum(1 for c in str if c.isupper())\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    counter = 0\n    for c in str:\n        if c.isupper():\n            counter += 1\n    return counter\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for c in str:\n        if c.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_ctr = 0\n    for i in str:\n        if i.isupper():\n            upper_ctr += 1\n    return upper_ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper = 0\n    for c in str:\n        if c.isupper():\n            upper += 1\n    return upper\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if (i.isupper()):\n            count = count+1\n    return count\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return [list1[i:i + 1] for i in range(len(list1))]\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    def recurse(list1,list2,combs):\n        if not list2:\n            combs.append(list1)\n        else:\n            first = list1[0]\n            rest = list1[1:]\n            rest2 = list2[1:]\n            recurse(rest,rest2,combs)\n            recurse(rest,list2,combs)\n    combs=[]\n    recurse(list1,list2,combs)\n    return combs\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    # The set of all possible combinations\n    res = []\n    \n    # If the input list contains only one element, return a list containing only that element\n    if len(list1) == 1:\n        return [list1]\n    \n    # Generate the combinations for all the elements of the input list\n    for i in range(1, len(list1)):\n        # Find the permutations\n        perm = list(set(combinations(list1, i)))\n        # Generate all the combinations and add the result to the result list\n        for j in perm:\n            res.append(j)\n    \n    return res\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [list1]\n    else:\n        list2 = []\n        for element in list1:\n            for combination in combinations_list(list1[list1.index(element)+1:]):\n                list2.append([element] + combination)\n        return list2\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [list1]\n    first = list1[0]\n    rest = list1[1:]\n    return [first] + combinations_list(rest)\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # solution 1\n    # def combinations_list(list1):\n    #     '''\n    #     Write a function to find all possible combinations of the elements of a given list.\n    #     '''\n    #     if len(list1) == 0:\n    #         return [[]]\n    #     result = []\n    #     for i in range(len(list1)):\n    #         temp = list1[i]\n    #         rest_list = list1[:i] + list1[i + 1:]\n    #         for p in combinations_list(rest_list):\n    #             result.append([temp] + p)\n    #     return result\n    #     # return [list1[:i] + list1[i + 1:] for i in range(len(list1))]\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                print(list1[i], list1[j])\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1)==0:\n        return [[]]\n    elif len(list1)==1:\n        return [list1]\n    else:\n        list1_copy = list1[:]\n        last = list1_copy.pop()\n        return combinations_list(list1_copy)+combinations_list([last]+list1_copy)\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) < 2:\n        return []\n    elif len(list1) == 2:\n        return list(itertools.combinations(list1, 2))\n    else:\n        return list(itertools.combinations(list1, 2)) + combinations_list(list1[1:])\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    final_list=[]\n    for n in list1:\n        final_list.append([n])\n    for i in range(1,len(list1)):\n        current_list=[]\n        for j in range(len(final_list)):\n            for k in range(len(final_list[j])+1):\n                temp=final_list[j][:k]+final_list[j][k+1:]\n                temp.append(list1[i])\n                current_list.append(temp)\n        final_list=current_list\n    print(final_list)\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    result = 0\n    max_prod = 0\n    for i in xrange(len(arr)):\n        if arr[i] > 0:\n            result += arr[i]\n        else:\n            result = 0\n        if max_prod < result:\n            max_prod = result\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    global global_max\n    global_max = -100\n    if len(arr) == 0:\n        return -1\n    max_left = [0]*len(arr)\n    max_right = [0]*len(arr)\n    max_left[0] = arr[0]\n    max_right[-1] = arr[-1]\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_ending_here = 0\n    max_so_far = 0\n    n = len(arr)\n    for i in range(n):\n        max_ending_here = max_ending_here * arr[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_ending_here = 1\n    max_so_far = 1\n    for i in range(len(arr)):\n        max_ending_here = max_ending_here * arr[i]\n        if max_ending_here < 0:\n            max_ending_here = 1\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    print max_so_far\n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product_so_far = -1\n    max_ending_here = 1\n    for i in arr:\n        max_ending_here = max_ending_here*i\n        if max_ending_here < 0:\n            max_ending_here = 1\n        elif max_product_so_far < max_ending_here:\n            max_product_so_far = max_ending_here\n    return max_product_so_far\n    \n    \n    \n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # n = len(arr)\n    # dp = [0 for i in range(n)]\n    # for i in range(n):\n    #     dp[i] = max(arr[i], dp[i-1]*arr[i])\n    # print dp\n    # return max(dp)\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if arr == None or len(arr) == 0:\n        return -1\n    max_product = arr[0]\n    min_product = arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) < 2:\n        return arr\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    for i in arr[1:]:\n        if max_ending_here < 0:\n            max_ending_here = i\n        else:\n            max_ending_here = max(max_ending_here * i, i)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    val = dict.values()\n    if len(set(val)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n is None or n not in dict.values():\n        return False\n    for v in dict.values():\n        if v!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for key, value in dict.items():\n        if value == n:\n            count += 1\n    if count == len(dict):\n        print('true')\n    else:\n        print('false')\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    check = False\n    for key in dict.keys():\n        if dict[key]!= n:\n            return check\n    check = True\n    return check\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for key, value in dict.iteritems():\n        values.append(value)\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= 1:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for val in dict.values():\n        if val!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = dict[n]\n    for x in dict:\n        if dict[x]!= value:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.values():\n        if i!= n:\n            return False\n    return True\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v!= ''}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in list(dict1):\n        if not dict1[key]:\n            del dict1[key]\n        else:\n            drop_empty(dict1[key])\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key,value in dict1.items():\n        if value=='':\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    keys = dict1.keys()\n    for key in keys:\n        if not dict1[key]:\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if not value:\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v!= ''}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value!= ['']}\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr.sort()\n    max_product = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i] <= 0:\n            break\n        max_product = max(max_product, arr[i]*arr[i])\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod,min_prod = arr[0],arr[0]\n    for i in range(1,len(arr)):\n        if arr[i]<0:\n            min_prod,max_prod = max_prod,min_prod\n        max_prod = max(max_prod*arr[i],arr[i],min_prod*arr[i])\n        min_prod = min(min_prod*arr[i],arr[i],max_prod*arr[i])\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # The array is not sorted\n    if len(arr) <= 2:\n        return 0\n    elif len(arr) == 3:\n        return arr[0]*arr[1]*arr[2]\n    # The array is sorted\n    arr.sort()\n    max_product = 1\n    for i in range(len(arr)-1,1,-1):\n        max_product *= arr[i]\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 2:\n        return None\n    n = len(arr)\n    \n    max_p = arr[0]\n    max_idx = 0\n    for i in xrange(n):\n        if arr[i] > max_p:\n            max_p = arr[i]\n            max_idx = i\n    \n    product = 1\n    for i in xrange(n):\n        if i > max_idx:\n            product *= arr[i]\n    \n    return product\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return\n    min_end = max_end = 1\n    max_product = 1\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    pass\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return 0\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    result = 1\n    for i in range(1, len(arr)):\n        if arr[i-1] < arr[i]:\n            result *= arr[i]\n        else:\n            result = max(result, arr[i])\n    return result\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 1\n    for i in xrange(len(arr) - 1):\n        if arr[i] * arr[i + 1] > max_product:\n            max_product = arr[i] * arr[i + 1]\n    return max_product\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) <= 1:\n        return test_tup\n    new_tup = []\n    for i in range(len(test_tup)-1):\n        new_tup.append(test_tup[i] + test_tup[i+1])\n    new_tup.append(test_tup[-1])\n    return tuple(new_tup)\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return 0\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    total_sum = 0\n    for i in range(1, len(test_tup)):\n        total_sum += abs(test_tup[i] - test_tup[i-1])\n    return total_sum\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # TODO\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # first convert the tuple to a list\n    list_tup = list(test_tup)\n    # make a list of the tuple reversed\n    reversed_list = list_tup[::-1]\n    # add each element of the reversed list to the first element of the original list\n    list_tup = [list_tup[0]+reversed_list[1],list_tup[1]+reversed_list[0]]\n    # return the reversed list\n    return list_tup[::-1]\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    x = test_tup[0]\n    y = test_tup[1]\n    return x + y, x - y, x * y, x / y\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # first element\n    first_el = test_tup[0]\n    # second element\n    second_el = test_tup[1]\n    # tuple with the pairwise addition of the first and second elements\n    pairwise_tup = (first_el + second_el, first_el * second_el)\n    # return the result\n    return pairwise_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    \n    for i in range(1,len(test_tup)):\n        test_tup[i]+=test_tup[i-1]\n    return test_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    new_tup = (test_tup[0] + test_tup[1], test_tup[1] + test_tup[2], test_tup[2] + test_tup[3])\n    return new_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    assert len(test_tup) > 1\n    res = 0\n    for i in range(len(test_tup)-1):\n        res += test_tup[i] + test_tup[i+1]\n    return res\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    mul = 1\n    for i in arr:\n        mul = mul*(i%n)\n    return mul\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # modular multiplication of an array \n    # [5, 2, 4, 1] * [1, 2, 3, 4] \n    # [5, 30, 90, 40]\n    # [5, 30, 90, 40] % 4 = \n    # [5, 30, 90, 40] % 1 = \n    # [5, 30, 90, 40] % 2 = \n    # [5, 30, 90, 40] % 3 = \n    # 5 % 1 = 5\n    # 30 % 2 = 30\n    # 90 % 3 = 90\n    # 40 % 4 = 0\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # initialize result \n    res = 1 \n    for i in arr: \n        res = (res * i) % n \n    return res \n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # arr = sorted(arr)\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return sum(arr) % n\n    if n == 3:\n        return (arr[0] * arr[1]) % n\n    arr = arr[1:]\n    return ((arr[0] * arr[1]) % n) + find_remainder(arr, n)\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    ans = 1\n    for i in range(len(arr)):\n        ans = (ans*arr[i])%n\n    return ans\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    #Write your code here\n    return ((n*(n+1))//2)%n\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # For each element of the array, multiply it with the previous element and modulo n\n    # Add the result to the final result, modulo n\n    # Multiply the result with the array again and modulo n\n    res = 1\n    for i in range(0, n):\n        res = (res * arr[i]) % n\n    res = res * arr[i]\n    return res\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    for i in range(1, n): \n        arr[i] *= arr[i-1]\n        arr[i] %= n\n    return arr[-1]\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if len(arr) == 0:\n        return 0\n    ans = 1\n    for i in arr:\n        ans = (ans*i) % n\n    return ans\n    \ndef find_product(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if len(arr) == 0:\n        return 0\n    ans = arr[0]\n    for i in range(1, len(arr)):\n        ans = (ans*arr[i]) % n\n    return ans\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2: \n        return False\n    if len(l) == 2:\n        if l[0] == l[1]: \n            return True\n        else: \n            return False\n    for i in range(len(l)-1): \n        if l[i]!= l[i+1] - 1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i]+1!= l[i+1]:\n            return False\n    return True\ndef find_adjacent_duplicates(l):\n    '''\n    Write a python function to find the adjacent duplicates in the given list. \n    Example: [1,2,2,2,3,4,5] --> [2,2]\n    '''\n    new_l = []\n    for i in l:\n        if i not in new_l:\n            new_l.append(i)\n        else:\n            if i not in new_l[new_l.index(i)-1:]:\n                new_l.append(i)\n    return new_l\ndef find_adjacent_duplicates2(l):\n    '''\n    Write a python function to find the adjacent duplicates in the given list. \n    Example: [1,2,2,2,3,4,5] --> [2,2]\n    '''\n    new_l = []\n    for i in l:\n        if i not in new_l:\n            new_l.append(i)\n        else:\n            if i not in new_l[new_l.index(i)-1:]:\n                new_l.append(i)\n    return new_l\ndef check_adjacent_duplicates(l):\n    '''\n    Write a python function to check whether the given list contains adjacent duplicates or not. \n    Example: [1,2,2,2,3,4,5] --> True\n    '''\n    new_l = []\n    for i in l:\n        if i not in new_l:\n            new_l.append(i)\n        else:\n            if i not in new_l[new_l.index(i)-1:]:\n                new_l.append(i)\n    return new_l[0] == new_l[-1]\ndef check_adjacent_duplicates2(l):\n    '''\n    Write a python function to check whether the given list contains adjacent duplicates or not. \n    Example: [1,2,2,2,3,4,5] --> True\n    '''\n    for i in l:\n        if l.count(i) > 1:\n            return True\n    return False\ndef count_substring(string, sub_string):\n    '''\n    Write a python function to count the number of times a substring occurs in a string. \n    Example: count_substring(\"Python\", \"Py\") --> 2\n    '''\n    count = 0\n    for i in range(len(string)-len(sub_string)+1):\n        if string[i:i+len(sub_string)] == sub_string:\n            count += 1\n    return count\ndef count_substring2(string, sub_string):\n    '''\n    Write a python function to count the number of times a substring occurs in a string. \n    Example: count_substring(\"Python\", \"Py\") --> 2\n    '''\n    return len([string[i:i+len(sub_string)] for i in range(len(string)-len(sub_string)+1) if string[i:i+len(sub_string)] == sub_string])\ndef count_substring3(string, sub_string):\n    '''\n    Write a python function to count the number of times a substring occurs in a string. \n    Example: count_substring(\"Python\", \"Py\") --> 2\n    '''\n    return len([string[i:i+len(sub_string)] for i in range(len(string)-len(sub_string)+1) if string[i:i+len(sub_string)] == sub_string])\ndef count_substring4(string, sub_string):\n    '''\n    Write a python function to count the number of times a substring occurs in a string. \n    Example: count_substring(\"Python\", \"Py\") --> 2\n    '''\n    count = 0\n    for i in range(len(string)-len(sub_string)+1):\n        if string[i:i+len(sub_string)] == sub_string:\n            count += 1\n    return count\ndef count_substring5(string, sub_string):\n    '''\n    Write a python function to count the number of times a substring occurs in a string. \n    Example: count_substring(\"Python\", \"Py\") --> 2\n    '''\n    return len([sub_string for i in range(len(string)-len(sub_string)+1) if string[i:i+len(sub_string)] == sub_string])\ndef count_substring6(string, sub_string):\n    '''\n    Write a python function to count the number of times a substring occurs in a string. \n    Example: count_substring(\"Python\", \"Py\") --> 2\n    '''\n    return len([sub_string for i in range(len(string)-len(sub_string)+1) if string[i:i+len(sub_string)] == sub_string])\ndef count_substring7(string, sub_string):\n    '''\n    Write a python function to count the number of times a substring occurs in a string. \n    Example: count_substring(\"Python\", \"Py\") --> 2\n    '''\n    return len([sub_string for i in range(len(string)-len(sub_string)+1) if string[i:i+len(sub_string)] == sub_string])\ndef count_substring8(string, sub_string):\n    '''\n    Write a python function to count the number of times a substring occurs in a string. \n    Example: count_substring(\"Python\", \"Py\") --> 2\n    '''\n    return len(sub_string.join(string[i:i+len(sub_string)] for i in range(len(string)-len(sub_string)+1)))\ndef count_substring9(string, sub_string):\n    '''\n    Write a python function to count the number of times a substring occurs in a string. \n    Example: count_substring(\"Python\", \"Py\") --> 2\n    '''\n    return len(sub_string.join(string[i:i+len(sub_string)] for i in range(len(string)-len(sub_string)+1)))\ndef count_substring10(string, sub_string):\n    '''\n    Write a python function to count the number of times a substring occurs in a string. \n    Example: count_substring(\"Python\", \"Py\") --> 2\n    '''\n    return len(sub_string.join(string[i:i+len(sub_string)] for i in range(len(string)-len(sub_string)+1)))\ndef count_substring11(string, sub_string):\n    '''\n    Write a python function to count the number of times a substring occurs in a string. \n    Example: count_substring(\"Python\", \"Py\") --> 2\n    '''\n    return len(sub_string.join(string[i:i+len(sub_string)] for i in range(len(string)-len(sub_string)+1)))\ndef count_substring12(string, sub_string):\n    '''\n    Write a python function to count the number of times a substring occurs in a string. \n    Example: count_substring(\"Python\", \"Py\") --> 2\n    '''\n    return len(sub_string.join(string[i:i+len(sub_string)] for i in range(len(string)-len(sub_string)+1)))\ndef count_substring13(string, sub_string):\n    '''\n    Write a python function to count the number of times a substring occurs in a string. \n    Example: count_substring(\"Python\", \"Py\") --> 2\n    '''\n    return len(sub_string.join(string[i:i+len(sub_string)] for i in range(len(string)-len(sub_string)+1)))\ndef count_substring14(string, sub_string):\n    '''\n    Write a python function to count the number of times a substring occurs in a string. \n    Example: count_substring(\"Python\", \"Py\") --> 2\n    '''\n    return len(sub_string.join(string[i:i+len(sub_string)] for i in range(len(string)-len(sub_string)+1)))\ndef count_substring15(string, sub_string):"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return len(l) == len(set(l))\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i=0\n    while i<len(l)-1:\n        if l[i]==l[i+1]-1:\n            pass\n        else:\n            print \"Not consecutive\"\n            break\n        i+=1\n    else:\n        print \"Consecutive\"\n        \ndef check_Permuted(s1,s2):\n    '''\n    Write a python function to check whether the given strings are permuted or not.\n    '''\n    s1=''.join(sorted(s1))\n    s2=''.join(sorted(s2))\n    if s1==s2:\n        print \"Permuted\"\n    else:\n        print \"Not Permuted\"\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l)<=1:\n        return True\n    elif l[0]==l[1]-1:\n        return check_Consecutive(l[1:])\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in xrange(0,len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    list1 = l\n    list2 = []\n    for x in list1:\n        list2.append(x)\n    for i in range(0, len(list2) - 1):\n        if (list2[i] + 1 == list2[i + 1]):\n            print \"True\"\n            return\n    print \"False\"\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if(l[i+1]-l[i]!= 1):\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            pass\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]-1:\n            return True\n    return False\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    set3 = set1.intersection(set2)\n    return list(set3)\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return [(i,j) for i in test_list1 for j in test_list2 if i==j]\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #this takes O(n) time\n    if not test_list1:\n        return 0\n    if not test_list2:\n        return 0\n    return tuple([x for x in test_list1 if x in test_list2])\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    \n    list_length = len(test_list1)\n    set1 = set()\n    set2 = set()\n    for i in range(list_length):\n        set1.add(test_list1[i])\n        set2.add(test_list2[i])\n    return set1.intersection(set2)\n    \n    \nprint tuple_intersection((0, 1, 2, 3), (3, 2, 1, 0))\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #result_list = [x for x in test_list1 if x in test_list2]\n    #return result_list\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple(set(test_list1).intersection(set(test_list2)))\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple(set(test_list1).intersection(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersect_list = []\n    for each_tuple in test_list1:\n        if each_tuple in test_list2:\n            intersect_list.append(each_tuple)\n    return intersect_list\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return list(set1.intersection(set2))\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return [item for item in test_list1 if item in test_list2]\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n    \n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    a=str1.replace(ch,newch)\n    return a\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2=''\n    for c in str1:\n        if c==ch:\n            str2+=newch\n        else:\n            str2+=c\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    \n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # to find the index of the character\n    # in the string\n    index = str1.index(ch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key=lambda x:x[1])\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    #return sorted(dict1.items(), key=lambda x:x[1], reverse=True)\n    return sorted(dict1.items(), key=lambda x:x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1])\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_counter = sorted(dict1.items(), key = lambda x:x[1], reverse = True)\n    return sorted_counter\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter_list = Counter(dict1)\n    return sorted(counter_list, key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-1:-2:-1])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(nums) - min(nums) - max(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n    \nassert big_sum([1,2,3,4,5]) == 15, \"Expected: 15\"\nassert big_sum([1,2,3,4,5,6,7,8,9,10]) == 55, \"Expected: 55\"\nassert big_sum([-1,-2,-3]) == -6, \"Expected: -6\"\nassert big_sum([]) == 0, \"Expected: 0\"\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    return max(nums[0] + big_sum(nums[1:-1]), nums[-1] + big_sum(nums[:-1]))\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    \n    s = 0\n    for i in nums:\n        s = s + i\n    return s\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    s = 0\n    for i in nums:\n        s += i\n    return s\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    assert type(string) == str\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]*', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1=str1.lower()\n    return str1\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuations from a given string.\n    '''\n    str1=re.sub('[^A-Za-z0-9]+','', str1)\n    return str1\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    str1=re.sub('[0-9]+','', str1)\n    return str1\ndef remove_whitespaces(str1):\n    '''\n    Write a function to remove leading and trailing whitespaces from a given string.\n    '''\n    str1=str1.strip()\n    return str1\ndef remove_stopwords(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    str1=str1.split(' ')\n    filtered_str=' '.join(filter(lambda x:x not in ['a','an','the','is','are','the','of','this','that','which','or','and','to','in','of','it'],str1))\n    return filtered_str\ndef remove_apostrophe(str1):\n    '''\n    Write a function to remove the apostrophe from a given string.\n    '''\n    str1=str1.replace(\"'\",'')\n    return str1\ndef remove_html_tags(str1):\n    '''\n    Write a function to remove the html tags from a given string.\n    '''\n    str1=re.sub('<[^<]+?>','', str1)\n    return str1\ndef remove_accented_chars(str1):\n    '''\n    Write a function to remove accented characters from a given string.\n    '''\n    str1=str1.decode('utf8')\n    str1=str1.encode('ascii', 'ignore')\n    str1=str1.decode('ascii')\n    return str1\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    str1=re.sub('[0-9]+','', str1)\n    return str1\ndef remove_roman_numerals(str1):\n    '''\n    Write a function to remove roman numerals from a given string.\n    '''\n    str1=re.sub('[ivx]+','', str1)\n    return str1\ndef remove_exclamation_marks(str1):\n    '''\n    Write a function to remove exclamation marks from a given string.\n    '''\n    str1=str1.replace('!','')\n    return str1\ndef remove_question_marks(str1):\n    '''\n    Write a function to remove question marks from a given string.\n    '''\n    str1=str1.replace('?','')\n    return str1\ndef remove_hash_marks(str1):\n    '''\n    Write a function to remove hash marks from a given string.\n    '''\n    str1=str1.replace('#','')\n    return str1\ndef remove_parenthesis(str1):\n    '''\n    Write a function to remove parenthesis from a given string.\n    '''\n    str1=str1.replace('(','')\n    str1=str1.replace(')','')\n    return str1\ndef remove_currency_symbols(str1):\n    '''\n    Write a function to remove currency symbols from a given string.\n    '''\n    str1=str1.replace('$','')\n    str1=str1.replace(',','')\n    return str1\ndef remove_space_symbol(str1):\n    '''\n    Write a function to remove space symbol from a given string.\n    '''\n    str1=str1.replace(' ','')\n    return str1\ndef remove_line_feed(str1):\n    '''\n    Write a function to remove line feed from a given string.\n    '''\n    str1=str1.replace('\\n','')\n    return str1\ndef remove_tab_space(str1):\n    '''\n    Write a function to remove tab space from a given string.\n    '''\n    str1=str1.replace('\\t','')\n    return str1\ndef remove_punctuation_marks(str1):\n    '''\n    Write a function to remove punctuation marks from a given string.\n    '''\n    str1=str1.replace('.','')\n    str1=str1.replace(',','')\n    str1=str1.replace('-','')\n    str1=str1.replace('!','')\n    str1=str1.replace('?','')\n    str1=str1.replace('(','')\n    str1=str1.replace(')','')\n    return str1\ndef remove_space(str1):\n    '''\n    Write a function to remove leading and trailing space from a given string.\n    '''\n    str1=str1.strip()\n    return str1\ndef remove_apostrophe(str1):\n    '''\n    Write a function to remove the apostrophe from a given string.\n    '''\n    str1=str1.replace(\"'\",'')\n    return str1\ndef remove_url(str1):\n    '''\n    Write a function to remove url from a given string.\n    '''\n    str1=str1.replace('http','')\n    str1=str1.replace('https','')\n    return str1\ndef remove_comma(str1):\n    '''\n    Write a function to remove comma from a given string.\n    '''\n    str1=str1.replace(',','')\n    return str1\ndef remove_hyphen(str1):\n    '''\n    Write a function to remove hyphen from a given string.\n    '''\n    str1=str1.replace('-','')\n    return str1\ndef remove_slash(str1):\n    '''\n    Write a function to remove slash from a given string.\n    '''\n    str1=str1.replace('/','')\n    return str1\ndef remove_dash(str1):\n    '''\n    Write a function to remove dash from a given string.\n    '''\n    str1=str1.replace('-','')\n    return str1\ndef remove_colon(str1):\n    '''\n    Write a function to remove colon from a given string.\n    '''\n    str1=str1.replace(':','')\n    return str1\ndef remove_and(str1):\n    '''\n    Write a function to remove and from a given string.\n    '''\n    str1=str1.replace('and','')\n    return str1\ndef remove_semicolon(str1):\n    '''\n    Write a function to remove semicolon from a given string.\n    '''\n    str1=str1.replace(';','')\n    return str1\ndef remove_percentage(str1):\n    '''\n    Write a function to remove percentage from a given string.\n    '''\n    str1=str1.replace('%','')\n    return str1\ndef remove_exclamation_point(str1):\n    '''\n    Write a function to remove exclamation point from a given string.\n    '''\n    str1=str1.replace('!','')\n    return str1\ndef remove_exclamation_sign(str1):\n    '''\n    Write a function to remove exclamation sign from a given string.\n    '''\n    str1=str1.replace('!','')\n    return str1\ndef remove_comma_mark(str1):\n    '''\n    Write a function to remove comma mark from a given string.\n    '''\n    str1=str1.replace(',','')\n    return str1\ndef remove_semicolon_mark(str1):\n    '''\n    Write a function to remove semicolon mark from a given string.\n    '''\n    str1=str1.replace(';','')\n    return str1\ndef remove_colon_mark(str1):\n    '''\n    Write a function to remove colon mark from a given string"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    list1=[]\n    str1 = re.findall(r\"[\\w']+\",str1)\n    for i in str1:\n        if i not in list1:\n            list1.append(i)\n    str1 = ''.join(list1)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    newstr = ''\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            newstr += str1[i]\n    return newstr\ndef to_lowercase(str1):\n    '''\n    Write a function to convert a given string to lowercase letters.\n    '''\n    return str1.lower()\ndef to_uppercase(str1):\n    '''\n    Write a function to convert a given string to uppercase letters.\n    '''\n    return str1.upper()\ndef to_reverse(str1):\n    '''\n    Write a function to reverse a given string.\n    '''\n    return str1[::-1]\ndef to_capitalize(str1):\n    '''\n    Write a function to convert the first character of a given string to uppercase and the rest to lowercase.\n    '''\n    return str1.capitalize()\ndef find_first(str1, ch):\n    '''\n    Write a function to find the first occurrence of a character in a given string.\n    '''\n    return str1.find(ch)\ndef replace(str1, old, new):\n    '''\n    Write a function to replace the first occurrence of a character with another character in a given string.\n    '''\n    return str1.replace(old, new)\ndef is_palindrome(str1):\n    '''\n    Write a function to determine if a string is a palindrome.\n    '''\n    return str1 == str1[::-1]\ndef find_second(str1, ch):\n    '''\n    Write a function to find the second occurrence of a character in a given string.\n    '''\n    return str1.find(ch, str1.find(ch) + 1)\ndef count_substring(str1, sub):\n    '''\n    Write a function to count the number of substrings in a given string.\n    '''\n    return str1.count(sub)\ndef substring_index(str1, sub):\n    '''\n    Write a function to find the index of a given substring in a given string.\n    '''\n    return str1.find(sub)\ndef substring_count(str1, sub):\n    '''\n    Write a function to count the number of times a given substring occurs in a given string.\n    '''\n    return str1.count(sub)\ndef is_substring(str1, sub):\n    '''\n    Write a function to check if a given string is a substring of another string.\n    '''\n    return str1 in sub\ndef is_rotated(str1, str2):\n    '''\n    Write a function to check if a given string is a rotated version of another string.\n    '''\n    return str1 in str2 + str2\ndef is_rotated_v1(str1, str2):\n    '''\n    Write a function to check if a given string is a rotated version of another string.\n    '''\n    return str1 in str2[1:] + str2[0]\ndef is_rotated_v2(str1, str2):\n    '''\n    Write a function to check if a given string is a rotated version of another string.\n    '''\n    return str1 == str2[-1:] + str2[:-1]\ndef is_rotated_v3(str1, str2):\n    '''\n    Write a function to check if a given string is a rotated version of another string.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    for i in range(len(str1)):\n        if str1[i]!= str2[(len(str1) - 1) - i]:\n            return False\n    return True\ndef is_rotated_v4(str1, str2):\n    '''\n    Write a function to check if a given string is a rotated version of another string.\n    '''\n    return str1[::-1] == str2\ndef is_rotated_v5(str1, str2):\n    '''\n    Write a function to check if a given string is a rotated version of another string.\n    '''\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            return False\n    return True\ndef is_rotated_v6(str1, str2):\n    '''\n    Write a function to check if a given string is a rotated version of another string.\n    '''\n    return str1 == str2[-1:] + str2[:-1]\ndef is_rotated_v7(str1, str2):\n    '''\n    Write a function to check if a given string is a rotated version of another string.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    if str1[0]!= str2[-1]:\n        return False\n    return str1[1:] == str2[:-1]\ndef is_rotated_v8(str1, str2):\n    '''\n    Write a function to check if a given string is a rotated version of another string.\n    '''\n    return str1[::-1] == str2\ndef is_rotated_v9(str1, str2):\n    '''\n    Write a function to check if a given string is a rotated version of another string.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    if str1[0]!= str2[-1]:\n        return False\n    return str1[1:] == str2[:-1]\ndef is_rotated_v10(str1, str2):\n    '''\n    Write a function to check if a given string is a rotated version of another string.\n    '''\n    return str1[::-1] == str2\ndef is_rotated_v11(str1, str2):\n    '''\n    Write a function to check if a given string is a rotated version of another string.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    if str1[0]!= str2[-1]:\n        return False\n    return str1[1:] == str2[:-1]\ndef is_rotated_v12(str1, str2):\n    '''\n    Write a function to check if a given string is a rotated version of another string.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    if str1[0]!= str2[-1]:\n        return False\n    return str1[1:] == str2[:-1]\ndef is_rotated_v13(str1, str2):\n    '''\n    Write a function to check if a given string is a rotated version of another string.\n    '''\n    return str1[::-1] == str2\ndef is_rotated_v14(str1, str2):\n    '''\n    Write a function to check if a given string is a rotated version of another string.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    return str1[::-1] == str2\ndef is_rotated_v15(str1, str2):\n    '''\n    Write a function to check if a given string is a rotated version of another string.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    if str1[::-1] == str2:\n        return True\n    return False\ndef is_rotated_v16(str1, str2):\n    '''\n    Write a function to check if a given string is a rotated version of another string.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    return str1[0] == str2[-1] and str1[1:] == str2[:-1]\ndef is_rotated_v17(str1, str2):\n    '''\n    Write a function to check if a given string is a rotated version of another string.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    return str1[0] == str2[0] and str1[1:] == str2[1:] + str2[0] + str2[1:]\ndef is_rotated_v18(str1, str2):\n    '''\n    Write a function to check i"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]+', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if not str1:\n        return \"\"\n    # remove first letter\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            return remove_lowercase(str1[i:])\n    return str1[0]+remove_lowercase(str1[1:])\ndef remove_numbers(str1):\n    '''\n    Write a function to remove all numbers from a given string.\n    '''\n    if not str1:\n        return \"\"\n    # remove first letter\n    for i in range(len(str1)):\n        if not str1[i].isdigit():\n            return remove_numbers(str1[i:])\n    return str1[0]+remove_numbers(str1[1:])\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    \n    str1 = str1.lower()\n    str1 = re.sub(\"[a-z]\",\"\",str1)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    t=''\n    for i in str1:\n        if i.isupper():\n            t+=' '+i\n    return t\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('\\s+','', str1)\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    # Define a string of all the digits of the number\n    all_Digits = str(n)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in all_Digits]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into a list of strings of length 1\n    List = [i for i in List_String]\n    \n    # Convert the list into a string\n    List_String = \"\".join(List)\n    \n    # Split the string into "
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n/10**0) % 10 \n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    if n == 0 :\n        return 0\n    return int(n / 10 ** (int(math.log10(n)) - 1))\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Your code here\n    return int(str(n)[0])\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n > 0 :\n        if n%10 == 0 :\n            return 0\n        n /= 10\n    return 1\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    digit = n % 10\n    return digit\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    digit = n % 100\n    return digit\n    \ndef third_Digit(n) :  \n    '''\n    Write a python function to find the third digit of a given number.\n    '''\n    digit = n % 1000\n    return digit\n    \ndef fourth_Digit(n) :  \n    '''\n    Write a python function to find the fourth digit of a given number.\n    '''\n    digit = n % 10000\n    return digit\n    \ndef fifth_Digit(n) :  \n    '''\n    Write a python function to find the fifth digit of a given number.\n    '''\n    digit = n % 100000\n    return digit\n    \ndef sixth_Digit(n) :  \n    '''\n    Write a python function to find the sixth digit of a given number.\n    '''\n    digit = n % 1000000\n    return digit\n    \ndef seventh_Digit(n) :  \n    '''\n    Write a python function to find the seventh digit of a given number.\n    '''\n    digit = n % 10000000\n    return digit\n    \ndef eighth_Digit(n) :  \n    '''\n    Write a python function to find the eighth digit of a given number.\n    '''\n    digit = n % 100000000\n    return digit\n    \ndef ninth_Digit(n) :  \n    '''\n    Write a python function to find the ninth digit of a given number.\n    '''\n    digit = n % 1000000000\n    return digit\n    \ndef tenth_Digit(n) :  \n    '''\n    Write a python function to find the tenth digit of a given number.\n    '''\n    digit = n % 10000000000\n    return digit\n    \ndef first_Two_Digit(n) :  \n    '''\n    Write a python function to find the first two digits of a given number.\n    '''\n    digit1 = n % 100\n    digit2 = n % 1000\n    return digit1, digit2\n    \ndef second_Two_Digit(n) :  \n    '''\n    Write a python function to find the second two digits of a given number.\n    '''\n    digit1 = n % 10\n    digit2 = n % 100\n    return digit1, digit2\n    \ndef third_Two_Digit(n) :  \n    '''\n    Write a python function to find the third two digits of a given number.\n    '''\n    digit1 = n % 1000\n    digit2 = n % 10000\n    return digit1, digit2\n    \ndef fourth_Two_Digit(n) :  \n    '''\n    Write a python function to find the fourth two digits of a given number.\n    '''\n    digit1 = n % 100\n    digit2 = n % 1000\n    return digit1, digit2\n    \ndef fifth_Two_Digit(n) :  \n    '''\n    Write a python function to find the fifth two digits of a given number.\n    '''\n    digit1 = n % 10\n    digit2 = n % 100\n    return digit1, digit2\n    \ndef sixth_Two_Digit(n) :  \n    '''\n    Write a python function to find the sixth two digits of a given number.\n    '''\n    digit1 = n % 100\n    digit2 = n % 1000\n    return digit1, digit2\n    \ndef seventh_Two_Digit(n) :  \n    '''\n    Write a python function to find the seventh two digits of a given number.\n    '''\n    digit1 = n % 1000\n    digit2 = n % 10000\n    return digit1, digit2\n    \ndef eighth_Two_Digit(n) :  \n    '''\n    Write a python function to find the eighth two digits of a given number.\n    '''\n    digit1 = n % 1000\n    digit2 = n % 100\n    return digit1, digit2\n    \ndef ninth_Two_Digit(n) :  \n    '''\n    Write a python function to find the ninth two digits of a given number.\n    '''\n    digit1 = n % 10000\n    digit2 = n % 100000\n    return digit1, digit2\n    \ndef tenth_Two_Digit(n) :  \n    '''\n    Write a python function to find the tenth two digits of a given number.\n    '''\n    digit1 = n % 100000\n    digit2 = n % 1000000\n    return digit1, digit2\n    \ndef first_Three_Digit(n) :  \n    '''\n    Write a python function to find the first three digits of a given number.\n    '''\n    digit1, digit2 = first_Two_Digit(n)\n    digit3 = n % 10000\n    return digit1, digit2, digit3\n    \ndef second_Three_Digit(n) :  \n    '''\n    Write a python function to find the second three digits of a given number.\n    '''\n    digit1, digit2 = second_Two_Digit(n)\n    digit3 = n % 1000\n    return digit1, digit2, digit3\n    \ndef third_Three_Digit(n) :  \n    '''\n    Write a python function to find the third three digits of a given number.\n    '''\n    digit1, digit2 = third_Two_Digit(n)\n    digit3 = n % 100\n    return digit1, digit2, digit3\n    \ndef fourth_Three_Digit(n) :  \n    '''\n    Write a python function to find the fourth three digits of a given number.\n    '''\n    digit1, digit2 = fourth_Two_Digit(n)\n    digit3 = n % 10\n    return digit1, digit2, digit3\n    \ndef fifth_Three_Digit(n) :  \n    '''\n    Write a python function to find the fifth three digits of a given number.\n    '''\n    digit1, digit2 = fifth_Two_Digit(n)\n    digit3 = n % 10\n    return digit1, digit2, digit3\n    \ndef sixth_Three_Digit(n) :  \n    '''\n    Write a python function to find the sixth three digits of a given number.\n    '''\n    digit1, digit2 = sixth_Two_Digit(n)\n    digit3 = n % 100\n    return digit1, digit2, digit3\n    \ndef seventh_Three_Digit(n) :  \n    '''\n    Write a python function to find the seventh three digits of a given number.\n    '''\n    digit1, digit2 = seventh_Two_Digit(n)\n    digit3 = n % 10\n    return digit1, digit2, digit3\n    \ndef eighth_Three_Digit(n) :  \n    '''\n    Write a python function to find the eighth three digits of a given number.\n    '''\n    digit1, digit2 = eighth_Two_Digit(n)\n    digit3 = n % 10\n    return digit1, digit2, digit3\n    \ndef ninth_Three_Digit(n) :  \n    '''\n    Write a python function to find the ninth three digits of a given number.\n    '''\n    digit1, digit2 = ninth_Two_Digit(n)\n    digit3 = n % 10\n    return digit1, digit2, digit3\n    \ndef tenth_Three_Digit(n) :  \n    '''\n    Write a python function to find the tenth three digits of a given number.\n    '''\n    digit1, digit2 = tenth_Two_Digit(n)\n    digit3 = n % 100\n    return digit1, digit2, digit3\n    \ndef first_Four_Digit(n) :  \n    '''\n    Write a python function to find the first four digits of a given number.\n    '''\n    digit1, digit2 = first_Two_Digit(n)\n    digit3, digit4 = first_Two_Digit(n)\n    return digit1, digit2, digit3, digit4\n    \ndef second_Four_Digit(n) :  \n    '''\n    Write a python function to find the second four digits of a given number.\n    '''\n    digit1, digit2 = second_Two_Digit(n)\n    digit3, digit4 = first_Two_Digit(n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n / 10 ** 1)\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for i in list:\n        if i%2 == 1:\n            odds.append(i)\n    return odds\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    return [item for item in list if item % 2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for item in list:\n        if item % 2!= 0:\n            odds.append(item)\n    return odds\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # your code goes here\n    a = []\n    for i in list:\n        if i % 2 == 1:\n            a.append(i)\n    return a\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    ans=[]\n    for i in list:\n        if i%2:\n            ans.append(i)\n    return ans\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    #return [x for x in list if x%2!= 0]\n    return [x for x in list if not x%2]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    oddlist = []\n    for i in list:\n        if i%2!= 0:\n            oddlist.append(i)\n    print oddlist\n    return oddlist\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x%2!=0]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for x in list:\n        if x % 2 == 1:\n            result.append(x)\n    return result\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i%2!= 0:\n            odd.append(i)\n    print(odd)\n    return odd\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 0 :\n        return 0\n    else :\n        return ((n**3) + difference(n-1))\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    #n = int(raw_input(\"Enter the n value : \"))\n    sum_of_cubes = 0 \n    sum_of_numbers = 0 \n    for i in range(1, n + 1) :\n        sum_of_numbers = sum_of_numbers + i\n        sum_of_cubes = sum_of_cubes + (i * i * i)\n    print \"The difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers is : \", sum_of_cubes - sum_of_numbers\ndifference(n)"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum(n*n*n) - sum(range(1,n+1))\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum([x**3 for x in range(1,n)]) - sum([x for x in range(1,n+1)])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Code here\n    import math\n    cubes=0\n    for i in range(1,n+1) :\n        cubes=cubes+(i**3)\n    sum=0\n    for i in range(1,n+1) :\n        sum=sum+i\n    return sum**3-cubes\ndef sum_of_cubes(n) :\n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    # Code here\n    s=0\n    for i in range(1,n+1) :\n        s=s+i\n    return s**3\ndef sum_of_squares(n) :\n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    # Code here\n    s=0\n    for i in range(1,n+1) :\n        s=s+i**2\n    return s\ndef sum_of_squares_on_even_number(n) :\n    '''\n    Write a python function to find the sum of the first n even numbers.\n    '''\n    # Code here\n    s=0\n    for i in range(2,n+1,2) :\n        s=s+i\n    return s\ndef sum_of_squares_on_odd_number(n) :\n    '''\n    Write a python function to find the sum of the first n odd numbers.\n    '''\n    # Code here\n    s=0\n    for i in range(1,n+1,2) :\n        s=s+i\n    return s\ndef sum_of_odd_squares(n) :\n    '''\n    Write a python function to find the sum of the first n odd numbers.\n    '''\n    # Code here\n    s=0\n    for i in range(1,n+1,2) :\n        s=s+i**2\n    return s\ndef sum_of_odd_cubes(n) :\n    '''\n    Write a python function to find the sum of the first n odd numbers.\n    '''\n    # Code here\n    s=0\n    for i in range(1,n+1,2) :\n        s=s+i**3\n    return s\ndef sum_of_powers(n,x) :\n    '''\n    Write a python function to find the sum of first n natural numbers raised to the power of x.\n    '''\n    # Code here\n    s=0\n    for i in range(1,n+1) :\n        s=s+i**x\n    return s\ndef sum_of_powers_on_odd_number(n,x) :\n    '''\n    Write a python function to find the sum of first n natural numbers raised to the power of x.\n    '''\n    # Code here\n    s=0\n    for i in range(1,n+1,2) :\n        s=s+i**x\n    return s\ndef sum_of_powers_on_even_number(n,x) :\n    '''\n    Write a python function to find the sum of first n natural numbers raised to the power of x.\n    '''\n    # Code here\n    s=0\n    for i in range(2,n+1,2) :\n        s=s+i**x\n    return s\ndef sum_of_squares_on_odd_number(n) :\n    '''\n    Write a python function to find the sum of the first n odd numbers.\n    '''\n    # Code here\n    s=0\n    for i in range(1,n+1,2) :\n        s=s+i**2\n    return s\ndef sum_of_squares_on_even_number(n) :\n    '''\n    Write a python function to find the sum of the first n even numbers.\n    '''\n    # Code here\n    s=0\n    for i in range(2,n+1,2) :\n        s=s+i\n    return s\ndef sum_of_numbers(n) :\n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    # Code here\n    s=0\n    for i in range(1,n+1) :\n        s=s+i\n    return s\ndef sum_of_odd_numbers(n) :\n    '''\n    Write a python function to find the sum of the first n odd numbers.\n    '''\n    # Code here\n    s=0\n    for i in range(1,n+1,2) :\n        s=s+i\n    return s\ndef sum_of_even_numbers(n) :\n    '''\n    Write a python function to find the sum of the first n even numbers.\n    '''\n    # Code here\n    s=0\n    for i in range(2,n+1,2) :\n        s=s+i\n    return s\ndef sum_of_powers_of_2(n,x) :\n    '''\n    Write a python function to find the sum of first n natural numbers raised to the power of x.\n    '''\n    # Code here\n    s=0\n    for i in range(1,n+1) :\n        s=s+i**x\n    return s\ndef sum_of_powers_of_2_on_odd_number(n,x) :\n    '''\n    Write a python function to find the sum of first n natural numbers raised to the power of x.\n    '''\n    # Code here\n    s=0\n    for i in range(1,n+1,2) :\n        s=s+i**x\n    return s\ndef sum_of_powers_of_2_on_even_number(n,x) :\n    '''\n    Write a python function to find the sum of first n natural numbers raised to the power of x.\n    '''\n    # Code here\n    s=0\n    for i in range(2,n+1,2) :\n        s=s+i**x\n    return s\ndef sum_of_powers_of_3(n,x) :\n    '''\n    Write a python function to find the sum of first n natural numbers raised to the power of x.\n    '''\n    # Code here\n    s=0\n    for i in range(1,n+1) :\n        s=s+i**x\n    return s\ndef sum_of_powers_of_3_on_odd_number(n,x) :\n    '''\n    Write a python function to find the sum of first n natural numbers raised to the power of x.\n    '''\n    # Code here\n    s=0\n    for i in range(1,n+1,2) :\n        s=s+i**x\n    return s\ndef sum_of_powers_of_3_on_even_number(n,x) :\n    '''\n    Write a python function to find the sum of first n natural numbers raised to the power of x.\n    '''\n    # Code here\n    s=0\n    for i in range(2,n+1,2) :\n        s=s+i**x\n    return s\ndef sum_of_powers_of_5(n,x) :\n    '''\n    Write a python function to find the sum of first n natural numbers raised to the power of x.\n    '''\n    # Code here\n    s=0\n    for i in range(1,n+1) :\n        s=s+i**x\n    return s\ndef sum_of_powers_of_5_on_odd_number(n,x) :\n    '''\n    Write a python function to find the sum of first n natural numbers raised to the power of x.\n    '''\n    # Code here\n    s=0\n    for i in range(1,n+1,2) :\n        s=s+i**x\n    return s\ndef sum_of_powers_of_5_on_even_number(n,x) :\n    '''\n    Write a python function to find the sum of first n natural numbers raised to the power of x.\n    '''\n    # Code here\n    s=0\n    for i in range(2,n+1,2) :\n        s=s+i**x\n    return s\ndef sum_of_powers_of_10(n,x"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # your code here\n    return 0\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # return sum([x**3 for x in range(n)]) - sum([x for x in range(n)])\n    return sum([x**3 for x in range(n)]) - sum([x for x in range(n)])\n    \ndef sum_square_difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of the squares of the first n natural numbers and the square of the sum.\n    '''\n    return sum([x**2 for x in range(n)]) - sum([x for x in range(n)])**2\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    a = 0\n    b = 1\n    for i in range(n) :\n        a += b**3\n        b += 1\n    return a-b**3\nprint(difference(1000))\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    s = 0\n    for i in range(n) :\n        s = s + i**3\n    return s\n    \ndef square_sum(n) :  \n    '''\n    Write a python function to find the sum of the squares of the first n natural numbers.\n    '''\n    s = 0\n    for i in range(n) :\n        s = s + i\n    return s**2\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    difference=0\n    for i in range(1,n+1) :\n        difference=difference+i**3\n    return difference\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    OddCount = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if ( A[i] ^ A[j] ) & 1 : \n                OddCount += 1\n    return OddCount\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # Initialize the count of pairs whose xor value is odd.\n    count = 0\n    # Traverse the array.\n    for i in range(N-1) : \n        # Calculate xor value of each pair\n        x = A[i]^A[i+1]\n        # If the xor value is odd, increment count \n        if(x & 1) : \n            count = count + 1\n    # Return the count\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    pair_count = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if A[i] ^ A[j] & 1 : \n                pair_count += 1\n    return pair_count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    res = 0\n    for i in range(N) : \n        for j in range(i+1,N) : \n            if (A[i]^A[j]) & 1 : \n                res += 1\n    return res\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if (A[i]^A[j]) & 1 :\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N-1) :\n        for j in range(i+1,N) :\n            if A[i]^A[j]%2 :\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    S = 0\n    for i in range(N) : \n        for j in range(i+1,N) : \n            if A[i] ^ A[j] & 1 : \n                S += 1\n    return S \n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # Your Code Here\n    pairs = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if A[i]^A[j] & 1 :\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    print A\n    print N\n    count = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if (A[i]^A[j])&1!= 0 :\n                count = count+1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    count = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) & 1 == 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.lower()\n    string = string.upper()\n    return string\n    \ndef trim_string(string):\n    '''\n    Trim the whitespace from the beginning and end of a string.\n    '''\n    string = string.strip()\n    return string\n    \ndef replace_string(string, old, new):\n    '''\n    Write a function to replace the old string with the new string.\n    '''\n    if old in string:\n        string = string.replace(old, new)\n    return string\n    \ndef is_alpha(string):\n    '''\n    Write a function to check whether all characters in a string are alphabetic or not.\n    '''\n    string = string.lower()\n    for character in string:\n        if character.isalpha() == False:\n            return False\n    return True\n    \ndef is_lower(string):\n    '''\n    Write a function to check whether all characters in a string are lowercase or not.\n    '''\n    for character in string:\n        if character.isalpha() == False:\n            return False\n    return True\n    \ndef is_upper(string):\n    '''\n    Write a function to check whether all characters in a string are uppercase or not.\n    '''\n    for character in string:\n        if character.isalpha() == False:\n            return False\n    return True\n    \ndef is_digit(string):\n    '''\n    Write a function to check whether all characters in a string are digits or not.\n    '''\n    for character in string:\n        if character.isalpha() == False:\n            return False\n    return True\n    \ndef is_space(string):\n    '''\n    Write a function to check whether all characters in a string are spaces or not.\n    '''\n    for character in string:\n        if character.isalpha() == False:\n            return False\n    return True\n    \ndef is_title(string):\n    '''\n    Write a function to check whether all characters in a string are titlecase or not.\n    '''\n    for character in string:\n        if character.isalpha() == False:\n            return False\n    return True\n    \ndef is_lowercase(string):\n    '''\n    Write a function to check whether all characters in a string are lowercase or not.\n    '''\n    for character in string:\n        if character.isalpha() == False:\n            return False\n    return True\n    \ndef is_uppercase(string):\n    '''\n    Write a function to check whether all characters in a string are uppercase or not.\n    '''\n    for character in string:\n        if character.isalpha() == False:\n            return False\n    return True\n    \ndef is_lowerfirst(string):\n    '''\n    Write a function to check whether all characters in a string are lowercase or not.\n    '''\n    for character in string:\n        if character.isalpha() == False:\n            return False\n    return True\n    \ndef is_upperalpha(string):\n    '''\n    Write a function to check whether all characters in a string are uppercase or not.\n    '''\n    for character in string:\n        if character.isalpha() == False:\n            return False\n    return True\n    \ndef is_uppercase(string):\n    '''\n    Write a function to check whether all characters in a string are uppercase or not.\n    '''\n    for character in string:\n        if character.isalpha() == False:\n            return False\n    return True\n    \ndef is_lowerfirst(string):\n    '''\n    Write a function to check whether all characters in a string are lowercase or not.\n    '''\n    for character in string:\n        if character.isalpha() == False:\n            return False\n    return True\n    \ndef is_loweralpha(string):\n    '''\n    Write a function to check whether all characters in a string are lowercase or not.\n    '''\n    for character in string:\n        if character.isalpha() == False:\n            return False\n    return True\n    \ndef is_upperalpha(string):\n    '''\n    Write a function to check whether all characters in a string are uppercase or not.\n    '''\n    for character in string:\n        if character.isalpha() == False:\n            return False\n    return True\n    \ndef is_lower(string):\n    '''\n    Write a function to check whether all characters in a string are lowercase or not.\n    '''\n    for character in string:\n        if character.isalpha() == False:\n            return False\n    return True\n    \ndef is_uppercase(string):\n    '''\n    Write a function to check whether all characters in a string are uppercase or not.\n    '''\n    for character in string:\n        if character.isalpha() == False:\n            return False\n    return True\n    \ndef is_lower(string):\n    '''\n    Write a function to check whether all characters in a string are lowercase or not.\n    '''\n    for character in string:\n        if character.isalpha() == False:\n            return False\n    return True\n    \ndef is_space(string):\n    '''\n    Write a function to check whether all characters in a string are spaces or not.\n    '''\n    for character in string:\n        if character.isalpha() == False:\n            return False\n    return True\n    \ndef is_title(string):\n    '''\n    Write a function to check whether all characters in a string are titlecase or not.\n    '''\n    for character in string:\n        if character.isalpha() == False:\n            return False\n    return True\n    \ndef is_lowerfirst(string):\n    '''\n    Write a function to check whether all characters in a string are lowercase or not.\n    '''\n    for character in string:\n        if character.isalpha() == False:\n            return False\n    return True\n    \ndef is_upperalpha(string):\n    '''\n    Write a function to check whether all characters in a string are uppercase or not.\n    '''\n    for character in string:\n        if character.isalpha() == False:\n            return False\n    return True\n    \ndef is_uppercase(string):\n    '''\n    Write a function to check whether all characters in a string are uppercase or not.\n    '''\n    for character in string:\n        if character.isalpha() == False:\n            return False\n    return True\n    \ndef is_lowerfirst(string):\n    '''\n    Write a function to check whether all characters in a string are lowercase or not.\n    '''\n    for character in string:\n        if character.isalpha() == False:\n            return False\n    return True\n    \ndef is_loweralpha(string):\n    '''\n    Write a function to check whether all characters in a string are lowercase or not.\n    '''\n    for character in string:\n        if character.isalpha() == False:\n            return False\n    return True\n    \ndef is_upperalpha(string):\n    '''\n    Write a function to check whether all characters in a string are uppercase or not.\n    '''\n    for character in string:\n        if character.isalpha() == False:\n            return False\n    return True\n    \ndef is_lower(string):\n    '''\n    Write a function to check whether all characters in a string are lowercase or not.\n    '''\n    for character in string:\n        if character.isalpha() == False:\n            return False\n    return True\n    \ndef is_uppercase(string):\n    '''\n    Write a function to check whether all characters in a string are uppercase or not.\n    '''\n    for character in string:\n        if character.isalpha() == False:\n            return False\n    return True\n    \ndef is_lower(string):\n    '''\n    Write a function to check whether all characters in a string are lowercase or not.\n    '''\n    for character in string:\n        if character.isalpha() == False:\n            return False\n    return True\n    \ndef is_space(string):\n    '''\n    Write a function to check whether all characters in a string are spaces or not.\n    '''\n    for character in string:\n        if character.isalpha() == False:\n            return False\n    return True\n    \ndef is_title(string):\n    '''\n    Write a function to check whether all character"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(ch.swapcase() for ch in string)\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for c in string:\n        if c.isalpha():\n            result += c.swapcase()\n        else:\n            result += c\n    return result\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(['a' if c.isupper() else 'A' if c.islower() else c for c in string])\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(map(lambda x: x.swapcase(), string))\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([\n        string[i].swapcase() if i < len(string)-1 else string[i].lower()\n        for i in range(len(string))\n    ])\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if isinstance(string, str):\n        return ''.join(str(string.swapcase()))\n    else:\n        return ''.join(map(lambda x: str(x.swapcase()), string))\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    lst_1 = list(str(n1))\n    lst_2 = list(str(n2))\n    lst_1_str = ''.join(lst_1)\n    lst_2_str = ''.join(lst_2)\n    lst_1 = lst_1_str\n    lst_2 = lst_2_str\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    dif = abs(n1 - n2)\n    sum = 0\n    if n1 < n2:\n        big = n1\n        n1 = n2\n        n2 = big\n    while n1!= 0:\n        digit = n1 % 10\n        n1 = n1 // 10\n        sum += digit * digit\n    while n2!= 0:\n        digit = n2 % 10\n        n2 = n2 // 10\n        sum += digit * digit\n    return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(n1%10-n2%10) for n1, n2 in zip(str(n1), str(n2))])\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if type(n1) is not int or type(n2) is not int:\n        raise TypeError('Both input args should be integers')\n    else:\n        return sum([abs(n1%10 - n2%10)])\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if len(str(n1))!= len(str(n2)):\n        return \"Please enter two integers of the same length\"\n    sum_n = 0\n    for i in range(len(str(n1))):\n        sum_n += abs(int(str(n1)[i]) - int(str(n2)[i]))\n    return sum_n\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(int(i) - int(j)) for i, j in zip(str(n1), str(n2)))\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(int(n1[i]) - int(n2[i]) for i in range(len(n1)))\n    "
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if len(n1) < len(n2):\n        n1, n2 = n2, n1\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(x - y) for x, y in zip(map(int, str(n1)), map(int, str(n2)))])\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(map(lambda x: abs(int(x[0]) - int(x[1])), zip(str(n1), str(n2))))\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    cur_sum = a[0]\n    for i in xrange(1, size):\n        cur_sum = max(a[i], cur_sum + a[i])\n        max_sum = max(max_sum, cur_sum)\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if not a:\n        return 0\n    max_sum = 0\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    for i in range(0, size):\n        curr_sum = 0\n        for j in range(i, size):\n            curr_sum += a[j]\n            max_sum = max(curr_sum, max_sum)\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize the result with the first element of the list\n    result = a[0]\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    for i in range(size):\n        max_sum += a[i]\n    if max_sum < 0:\n        max_sum = 0\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = -float('inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_so_far:\n            max_so_far = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    max_sum = a[0]\n    max_so_far = a[0]\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    global_max = float('-inf')\n    for i in xrange(size):\n        running_max = float('-inf')\n        for j in xrange(i, size):\n            running_max = max(running_max + a[j], a[j])\n            global_max = max(global_max, running_max)\n    return global_max\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    global_max = a[0]\n    current_max = a[0]\n    for i in xrange(1, size):\n        current_max = max(a[i], current_max + a[i])\n        if current_max > global_max:\n            global_max = current_max\n    return global_max\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = -1\n    for i in xrange(size):\n        max_sum = max(max_sum, max_sub_array_sum_helper(a, i, i+1, size))\n    return max_sum\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup1 = test_tup1[0]\n    tup2 = test_tup2[0]\n    test_tup1 = test_tup1[1]\n    test_tup2 = test_tup2[1]\n    if len(tup1) < len(tup2):\n        union_tup = sorted(tup1 + tup2)\n    else:\n        union_tup = sorted(tup2 + tup1)\n    return union_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return (sorted(set(test_tup1 + test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = []\n    for x in test_tup1:\n        union_tup.append(x)\n    for y in test_tup2:\n        if y not in union_tup:\n            union_tup.append(y)\n    union_tup.sort()\n    return tuple(union_tup)\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return list(set(test_tup1) | set(test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    union_set = set(test_tup1).union(set(test_tup2))\n    union_tup = list(union_set)\n    union_tup.sort()\n    return tuple(union_tup)\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if not test_tup1 and not test_tup2:\n        return None\n    elif not test_tup1:\n        return test_tup2\n    elif not test_tup2:\n        return test_tup1\n    else:\n        if test_tup1[0] < test_tup2[0]:\n            return (test_tup1[0], test_tup1[1])\n        elif test_tup1[0] > test_tup2[0]:\n            return (test_tup2[0], test_tup2[1])\n        else:\n            return (test_tup1[0], test_tup1[1] + test_tup2[1])\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the length of the tuple and make a new tuple to store the union\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n    union_tup = ()\n    \n    # If the first tuple is longer than the second tuple, return the first tuple\n    if len1 > len2:\n        return test_tup1\n    \n    # Otherwise, the second tuple is longer, so return the second tuple\n    else:\n        return test_tup2\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n    result = test_tup1 + test_tup2\n    return result\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    union_list = list(union_set)\n    union_list.sort()\n    return tuple(union_list)\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    Max_Length = 0\n    for i in range(len(lst)):\n        Length = 1\n        for j in range(i+1,len(lst)):\n            if lst[i] == lst[j]:\n                Length += 1\n            else:\n                break\n        if Length > Max_Length:\n            Max_Length = Length\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    curr_max_len = 0\n    for item in lst:\n        if type(item) is list:\n            if curr_max_len < len(item):\n                curr_max_len = len(item)\n        elif type(item) is int:\n            curr_max_len += 1\n    return curr_max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lst_len = len(lst)\n    dict = {}\n    for i in range(lst_len):\n        dict[i] = lst[i]\n    max = 0\n    for i in range(lst_len):\n        for j in range(i,lst_len):\n            if len(dict[i:j+1])>max:\n                max = len(dict[i:j+1])\n    return max\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    max_list = []\n    for i in range(len(lst)):\n        temp_list = lst[i:]\n        if max_length < len(temp_list):\n            max_length = len(temp_list)\n            max_list = temp_list\n    return max_list\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    num_list = [len(i) for i in lst]\n    num_list.sort()\n    return num_list[-1]\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sublst = lst[i:j+1]\n            if max_length < len(sublst):\n                max_length = len(sublst)\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n = len(lst)\n    max_len = 0\n    for i in range(n):\n        count = 1\n        for j in range(i+1, n):\n            if lst[j] == lst[i]:\n                count += 1\n                continue\n            else:\n                break\n        if count > max_len:\n            max_len = count\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst_i in lst:\n        lst_len = len(lst_i)\n        if lst_len > max_len:\n            max_len = lst_len\n            max_lst = lst_i\n    return max_lst\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    # Initialize a variable with an integer of zero\n    max_len = 0\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    result = []\n    for i in range(0, len(lst)):\n        for j in range(0, len(lst)):\n            if j >= i:\n                result.append(j - i + 1)\n    print(result)\nFind_Max_Length(['a','b','c','d','e','f','g','h','i','j','k'])\nFind_Max_Length(['a','b','c','d','e','f','g','h','i','j','k','a','b','c','d','e','f','g','h','i','j','k'])\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r'\"([^\"]*)\"', text)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #the variable \"regex\" is a Python standard library regex object.\n    regex = re.compile(r'\"(.*?)\"')\n    return regex.findall(text)\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall('\\\"(.*?)\\\"',text)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # group(0) returns the full match\n    # group(1) returns the first parenthesized subgroup.\n    # group(2) returns the second parenthesized subgroup, etc.\n    # group(n) returns the nth parenthesized subgroup.\n    # group(n+1) returns the n+1th parenthesized subgroup.\n    # (.*) returns all the characters between the first and last quotation mark\n    # (.+?) matches any single character not in a group\n    #.+? matches any single character not in a group, but in a group\n    # [^\\s]+ matches one or more non-whitespace characters\n    # \\s matches any whitespace character\n    #? matches zero or one of the preceding group\n    # * matches zero or more of the preceding group\n    # + matches one or more of the preceding group\n    # \\b matches the empty string, but only at the beginning or end of a word\n    # \\b matches the empty string, but only at the beginning or end of a word\n    # (?<=...) Matches if the current position in the string is preceded\n    # (?<!...) Matches if the current position in the string is not preceded\n    # (?(id/name)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?=...)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?!...)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?<=...)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?<!...)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?=...)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?!...)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?<=...)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?<!...)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?<=...)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?<!...)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(id/name)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists and no pattern otherwise\n    # (?(?(?-i)yes-pattern|no-pattern) Matches yes pattern if group id/name\n    # exists an"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'(\\\".*?\\\")')\n    res = pattern.findall(text)\n    return res\ndef extract_values_from_file(file_name):\n    '''\n    Write a function to extract values between quotation marks from a file.\n    '''\n    f = open(file_name, 'r')\n    text = f.read()\n    return extract_values(text)\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    patt = re.compile(r'\\\"(.+?)\\\"')\n    values = patt.findall(text)\n    return values\n    # print values\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Write your code here\n    # return re.findall('\\\".*?\\\"', text)\n    return re.findall('\\\"[^\\\"]+\\\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"[^\"]*\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\\\"(.*?)\\\"')\n    pattern = pattern.findall(text)\n    return pattern\ndef print_full_name(a, b):\n    return '{} {}'.format(a, b)\nprint_full_name('Sushant', 'Puri')"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # text = text.replace(\"\\n\", \" \")\n    # print(text)\n    # print(type(text))\n    # print(text.replace(\"\\n\", \" \"))\n    # print(text.split(\"=\"))\n    # print(type(text))\n    for line in text.split(\"\\n\"):\n        # print(line)\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # print(line.split('\"'))\n        # prin"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    d={}\n    for i in range(n):\n        d[arr[i]] = 1\n    for i in range(n):\n        d[arr[i]] -= 1\n        for j in range(i+1,n):\n            if d[arr[i]] >=0 and d[arr[j]] >= 0:\n                print arr[i],arr[j]\n            d[arr[j]] -= 1\n        d[arr[i]] += 1\n    \narr = [1,1,1,1]\nn = len(arr)\ncount_Pairs(arr,n)"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    res = 0\n    arr.sort()\n    for i in range(n-1):\n        if i == 0 or arr[i]!= arr[i-1]:\n            j = i + 1\n            k = n-1\n            while j < k:\n                if arr[j] == arr[k]:\n                    res += k - j\n                    k -= 1\n                else:\n                    j += 1\n    return res\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n): \n        for j in range(i+1, n):\n            if (arr[i]!=arr[j]):\n                count += 1\n    return count \n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # To make things simple, we will assume that the length of the list is always even.\n    # Otherwise the pairs count will not be correct.\n    # If the list is an even length, we can simply take the middle element to be the root.\n    # If the list is an odd length, we can make it even by taking the middle of the list and adding it to the end of the list.\n    if n%2 == 0:\n        root = n/2\n    else:\n        root = (n/2) + 1\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0 \n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if not arr:\n        return 0\n    d = {}\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] not in d:\n            d[arr[i]] = 1\n        else:\n            d[arr[i]] += 1\n    for i in range(len(arr)):\n        if arr[i] not in d:\n            continue\n        if arr[i] == arr[i-1]:\n            continue\n        else:\n            if d[arr[i]] > 1:\n                d[arr[i]] -= 2\n                count += d[arr[i]]\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\narr = [1,2,3,4,5,6,7]\nn = len(arr)\nprint count_Pairs(arr,n)"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\ndef join(l): \n    '''\n    Write a python function to join a list into a string.\n    '''\n    return ''.join(l)\ndef calculate(a,b): \n    '''\n    Write a python function to multiply two numbers.\n    '''\n    return a*b\ndef compare(a,b): \n    '''\n    Write a python function to compare two numbers.\n    '''\n    if a==b:\n        return True\n    else:\n        return False\ndef findall(str): \n    '''\n    Write a python function to find all occurences of a substring in a string.\n    '''\n    return [m.start() for m in re.finditer(str,str)]\ndef replace(str): \n    '''\n    Write a python function to replace a substring in a string.\n    '''\n    return re.sub(str,'',str)\ndef string(str): \n    '''\n    Write a python function to remove spaces in a string.\n    '''\n    return str.replace(' ','')\ndef sort(l): \n    '''\n    Write a python function to sort a list.\n    '''\n    return sorted(l)\ndef listtoString(l): \n    '''\n    Write a python function to convert a list to a string.\n    '''\n    return join(l)\ndef capitalize(str): \n    '''\n    Write a python function to capitalize a string.\n    '''\n    return str.capitalize()\ndef permutations(str): \n    '''\n    Write a python function to find permutations of a string.\n    '''\n    return permutationsHelper(str, 0, len(str) - 1)\ndef permutationsHelper(str, start, end):\n    if start == end:\n        print str\n    else:\n        for i in range(start, end + 1):\n            str[start], str[i] = str[i], str[start]\n            permutationsHelper(str, start + 1, end)\n            str[start], str[i] = str[i], str[start]\ndef enumerate(str): \n    '''\n    Write a python function to enumerate all possible permutations of a string.\n    '''\n    return enumerateHelper(str, 0, len(str) - 1)\ndef enumerateHelper(str, start, end):\n    if start == end:\n        print str\n    else:\n        for i in range(start, end + 1):\n            str[start], str[i] = str[i], str[start]\n            enumerateHelper(str, start + 1, end)\n            str[start], str[i] = str[i], str[start]\ndef palindrome(str): \n    '''\n    Write a python function to check if a string is a palindrome.\n    '''\n    return isPalindrome(str, 0, len(str) - 1)\ndef isPalindrome(str, start, end):\n    if start > end:\n        return True\n    if str[start]!= str[end]:\n        return False\n    return isPalindrome(str, start + 1, end - 1)\ndef isPalindrome2(str): \n    '''\n    Write a python function to check if a string is a palindrome.\n    '''\n    return isPalindrome2Helper(str, 0, len(str) - 1)\ndef isPalindrome2Helper(str, start, end):\n    if start >= end:\n        return True\n    if str[start]!= str[end]:\n        return False\n    return isPalindrome2Helper(str, start + 1, end - 1)\ndef replaceall(str, sub, replacement): \n    '''\n    Write a python function to replace all occurences of a substring in a string.\n    '''\n    return re.sub(sub, replacement, str)\ndef append(str, s): \n    '''\n    Write a python function to add a string at the end of a string.\n    '''\n    return str + s\ndef slice(str, start, end): \n    '''\n    Write a python function to get a substring in a string.\n    '''\n    return str[start:end]\ndef substr(str, start, end): \n    '''\n    Write a python function to get a substring in a string.\n    '''\n    return str[start:end]\ndef strip(str): \n    '''\n    Write a python function to strip leading and trailing spaces in a string.\n    '''\n    return str.strip()\ndef length(str): \n    '''\n    Write a python function to get the length of a string.\n    '''\n    return len(str)\ndef replacechar(str, start, end, replacement): \n    '''\n    Write a python function to replace a substring in a string.\n    '''\n    return str[:start] + replacement + str[end+1:]\ndef replacechars(str, start, end, replacement): \n    '''\n    Write a python function to replace a substring in a string.\n    '''\n    return str[:start] + replacement + str[end+1:]\ndef reverse(str): \n    '''\n    Write a python function to reverse a string.\n    '''\n    return str[::-1]\ndef count(str, s): \n    '''\n    Write a python function to count the number of occurences of a substring in a string.\n    '''\n    return str.count(s)\ndef isdigit(str): \n    '''\n    Write a python function to check if all characters in a string are digits.\n    '''\n    return str.isdigit()\ndef islower(str): \n    '''\n    Write a python function to check if all characters in a string are lowercase.\n    '''\n    return str.islower()\ndef isspace(str): \n    '''\n    Write a python function to check if all characters in a string are whitespace.\n    '''\n    return str.isspace()\ndef isalpha(str): \n    '''\n    Write a python function to check if all characters in a string are alphabetic.\n    '''\n    return str.isalpha()\ndef isnumeric(str): \n    '''\n    Write a python function to check if all characters in a string are numeric.\n    '''\n    return str.isnumeric()\ndef isalnum(str): \n    '''\n    Write a python function to check if all characters in a string are alphanumeric.\n    '''\n    return str.isalnum()\ndef istitle(str): \n    '''\n    Write a python function to check if all characters in a string are titlecase.\n    '''\n    return str.istitle()\ndef split(str): \n    '''\n    Write a python function to split a string into words.\n    '''\n    return str.split()\ndef splitlines(str): \n    '''\n    Write a python function to split a string into lines.\n    '''\n    return str.splitlines()\ndef trim(str): \n    '''\n    Write a python function to remove leading and trailing whitespace in a string.\n    '''\n    return str.strip()\ndef reverse(str): \n    '''\n    Write a python function to reverse a string.\n    '''\n    return str[::-1]\ndef trim(str): \n    '''\n    Write a python function to remove leading and trailing whitespace in a string.\n    '''\n    return str.strip()\ndef trim(str): \n    '''\n    Write a python function to remove leading and trailing whitespace in a string.\n    '''\n    return str.strip()\ndef reverse(str): \n    '''\n    Write a python function to reverse a string.\n    '''\n    return str[::-1]\ndef reverse(str): \n    '''\n    Write a python function to reverse a string.\n    '''\n    return str[::-1]\ndef reverse(str): \n    '''\n    Write a python function to reverse a string.\n    '''\n    return str[::-1]\ndef reverse(str): \n    '''\n    Write a python function to reverse a string.\n    '''\n    return str[::-1]\ndef reverse(str): \n    '''\n    Write a python function to reverse a string.\n    '''\n    return str"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\ndef ispangram(str1, alphabet):\n    '''\n    Write a python function to check whether a string is pangram or not.\n    '''\n    #alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in alphabet:\n        if letter not in split(str1):\n            return False\n    return True\ndef vowel_count(str):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowel_dict = {}\n    vowel_dict['a'] = 0\n    vowel_dict['e'] = 0\n    vowel_dict['i'] = 0\n    vowel_dict['o'] = 0\n    vowel_dict['u'] = 0\n    for letter in str:\n        if letter in vowel_dict:\n            vowel_dict[letter] += 1\n    return vowel_dict\ndef find_anagrams(word, dictionary):\n    '''\n    Write a python function to find anagrams of a string in a dictionary of words.\n    '''\n    anagram_dict = {}\n    for word in dictionary:\n        if sorted(word) == sorted(word):\n            if word not in anagram_dict:\n                anagram_dict[word] = []\n            anagram_dict[word].append(word)\n    return anagram_dict\ndef anagram_words(str1, str2):\n    '''\n    Write a python function to find if two strings are anagrams of each other.\n    '''\n    if sorted(str1) == sorted(str2):\n        return True\n    return False\ndef reverse(string):\n    '''\n    Write a python function to reverse a string.\n    '''\n    if string == \"\":\n        return \"\"\n    else:\n        return reverse(string[1:]) + string[0]\ndef insert_space(str, index):\n    '''\n    Write a python function to insert space in a string at the given index.\n    '''\n    if index > len(str):\n        return str\n    else:\n        return str[:index] + \" \" + str[index:]\ndef palindrome(str):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    return str == reverse(str)\ndef get_intersection(dict1, dict2):\n    '''\n    Write a python function to get the intersection of two dictionaries.\n    '''\n    new_dict = {}\n    for word in dict1:\n        if word in dict2:\n            if word not in new_dict:\n                new_dict[word] = 0\n            new_dict[word] += 1\n    return new_dict\ndef fractional_knapsack(value, weight, capacity):\n    '''\n    Write a python function to find the maximum value that can be put in a knapsack of capacity W, \n    with items in the form of a list of [value, weight]\n    '''\n    value_list = sorted(value, key = lambda x: x[0]/x[1], reverse = True)\n    value_weight = {}\n    for i in range(len(value_list)):\n        if value_list[i][1] > capacity:\n            value_weight[value_list[i][0]] = 1\n        else:\n            value_weight[value_list[i][0]] = int(weight[value_list[i][0]]/weight[value_list[i][1]])\n    return sum(value_weight[i] for i in value_weight)\ndef unique_length_words(words):\n    '''\n    Write a python function to find the length of the longest unique substring in a string.\n    '''\n    word_dict = {}\n    length = len(words)\n    for i in range(length):\n        for j in range(i+1, length):\n            if words[i] not in word_dict:\n                word_dict[words[i]] = 0\n            if words[j] not in word_dict:\n                word_dict[words[j]] = 0\n            if len(words[i]) == len(words[j]):\n                if word_dict[words[i]] == word_dict[words[j]]:\n                    word_dict[words[i]] = len(words[i])\n                else:\n                    word_dict[words[i]] = len(words[i])\n            else:\n                if len(words[i]) > len(words[j]):\n                    if word_dict[words[i]] > word_dict[words[j]]:\n                        word_dict[words[i]] = word_dict[words[j]]\n                else:\n                    word_dict[words[j]] = word_dict[words[i]]\n    return max(word_dict.values())\ndef find_maximum_average_subarray_of_size_k(k, nums):\n    '''\n    Write a python function to find the maximum average subarray of size k\n    '''\n    n = len(nums)\n    if k > n:\n        return\n    max_sum = 0\n    for i in range(n-k+1):\n        curr_sum = sum(nums[i:i+k])\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\ndef last_index_of_target_number_in_an_array(arr, target):\n    '''\n    Write a python function to find the last index of the target number in an array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if arr[mid] > target:\n            right = mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            return mid\n    if arr[left] == target:\n        return left\n    else:\n        return -1\ndef max_distinct(arr, n):\n    '''\n    Write a python function to find the maximum number of distinct elements in an array.\n    '''\n    max_distinct = 0\n    for i in range(n):\n        max_distinct += 1\n        if arr[i] in arr[:i]:\n            max_distinct -= 1\n    return max_distinct\ndef two_sum(arr, target):\n    '''\n    Write a python function to find the indices of the two numbers whose sum is equal to a target in an array.\n    '''\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return [i, j]\ndef longest_increasing_subsequence(arr):\n    '''\n    Write a python function to find the length of the longest increasing subarray in an array.\n    '''\n    longest_arr = [1]*len(arr)\n    for i in range(len(arr)):\n        for j in range(i):\n            if arr[j] < arr[i] and longest_arr[i] < longest_arr[j] + 1:\n                longest_arr[i] = longest_arr[j] + 1\n    return max(longest_arr)\ndef is_anagram(str1, str2):\n    '''\n    Write a python function to check if two strings are anagram of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        str1 = str1.lower()\n        str2 = str2.lower()\n        sort_str1 = sorted(str1)\n        sort_str2 = sorted(str2)\n        if str1 == str2:\n            return True\n        else:\n            return False\ndef is_rotation(str1, str2):\n    '''\n    Write a python function to check if a string is a rotation of another string.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        str1 = str1.lower()\n        str2 = str2.lower()\n        rotate_str1 = str1 + str1\n        if str2 in rotate_str1:\n            return True\n        else:\n            return False\ndef is_substring(str1, str2):\n    '''\n    Writ"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # approach 1\n    '''\n    output = []\n    for char in word:\n        output.append(char)\n    return output\n    '''\n    # approach 2\n    '''\n    return [char for char in word]\n    '''\n    # approach 3\n    return word.split()\n    \ndef check_string(check, word):\n    '''\n    Write a python function to check if a substring is present in a string.\n    '''\n    return word.find(check) > -1\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    for digit in str(n):\n        total += int(digit)\n    return total\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(digit) for digit in str(n)])\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n / 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return (n % 10 + sum_digits(int(n / 10)))\n    \n    \ndef count_and_say(n):\n    '''\n    Write a function to say a string repeatedly.\n    '''\n    if n == 1:\n        return '1'\n    else:\n        result = count_and_say(n - 1)\n        count = 1\n        new_string = ''\n        for i in range(0, len(result)):\n            if i == 0:\n                new_string += str(count) + result[i]\n            else:\n                if result[i] == result[i - 1]:\n                    count += 1\n                else:\n                    new_string += str(count) + result[i]\n                    count = 1\n        return new_string\n    \n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    return sum_digits(n // 10) + n % 10\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(i) for i in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    assert(n >= 0)\n    # base case\n    if n == 0:\n        return 0\n    # recursive case\n    else:\n        return n % 10 + sum_digits(n / 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = str(n)\n    t = 0\n    for c in s:\n        t += int(c)\n    return t\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    i = 1\n    while i < len(list1):\n        if list1[i-1] > list1[i]:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if(list1[i] > list1[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    if list1[0] < list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    length = len(list1)\n    for i in range(length-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1,len(list1)):\n        if(list1[i]<list1[i-1]):\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    flag = True\n    for i in range(1,len(list1)):\n        if list1[i] < list1[i-1]:\n            flag = False\n    return flag\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for x in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    # empty_dicts = {}\n    # for i in range(length):\n    #     empty_dicts[i] = {}\n    # return empty_dicts\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for x in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    dictionary_list = []\n    for i in range(length):\n        dictionary_list.append({})\n    return dictionary_list\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [dict() for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in xrange(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in list1:\n        i.sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(0, len(list1)):\n        list1[i].sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for lst in list1:\n        new_list.append(sorted(lst))\n    return new_list\n    \n    \n    "
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    n = len(list1)\n    for i in range(n):\n        for j in range(len(list1[i])-1):\n            if list1[i][j] > list1[i][j+1]:\n                list1[i][j], list1[i][j+1] = list1[i][j+1], list1[i][j]\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # for a given list of lists, go through each list, sort it, append it to a new list\n    return [sorted(list1[i]) for i in range(len(list1))]\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for sublist in list1:\n        result.append(sorted(sublist))\n    return result\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=len)\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Uncomment the following lines to test.\n    print(\"\\n********** ENTERING SORT_SUBLISTS **********\\n\")\n    print(\"\\nINPUT: list1 =\",list1,\"\\n\")\n    for x in range(0,len(list1)):\n        # Uncomment the following line to test.\n        print(\"\\nx=\",x,\"\\n\")\n        print(\"\\nOriginal list1[\",x,\"] =\",list1[x],\"\\n\")\n        list1[x] = sorted(list1[x])\n        print(\"\\nSorted list1[\",x,\"] =\",list1[x],\"\\n\")\n    print(\"\\nFINAL OUTPUT: list1 =\",list1,\"\\n\")\n    print(\"\\n********** EXITING SORT_SUBLISTS **********\\n\")\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key = lambda x: len(x))\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    pass\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return set(nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    counts = {}\n    for i in nums:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    return [i for i in counts if counts[i] == 1]\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    d = {}\n    for i in nums:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    return d.values()\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    if len(nums) < 2:\n        return len(nums)\n    if len(nums) == 2:\n        return len(nums) - 1\n    if len(nums) == 3:\n        return 2\n    if len(nums) == 4:\n        return 3\n    if len(nums) == 5:\n        return 4\n    if len(nums) > 5:\n        if len(nums)%2 == 0:\n            return (len(nums) - 1)//2\n        else:\n            return (len(nums) - 2)//2\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # initialize empty dictionary\n    nums_dict = {}\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_nums = []\n    for i in range(0, len(nums)):\n        if nums[i] not in new_nums:\n            new_nums.append(nums[i])\n    return new_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for i in range(0, len(nums)):\n        unique_nums.add(nums[i])\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    final_list = []\n    for num in nums:\n        if num not in final_list:\n            final_list.append(num)\n    return final_list\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique = []\n    for i in nums:\n        if i not in unique:\n            unique.append(i)\n    return len(unique)\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return 1\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    new_list = [i for n, i in enumerate(list_data) if i not in list_data[:n]]\n    new_list = [i for i in new_list if i > 1]\n    return reduce(lambda x, y: x * y, new_list)\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return reduce(operator.mul, set(list_data))\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    import functools\n    #if not all(isinstance(i,int) for i in list_data):\n    #    raise TypeError(\"Only integer numbers are allowed\")\n    if not len(list_data):\n        raise ValueError(\"List is empty\")\n    elif len(list_data) == 1:\n        return list_data[0]\n    else:\n        product = functools.reduce(lambda x,y: x * y, [i for i in set(list_data)])\n        return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    result = 1\n    for i in list_data:\n        if i not in result:\n            result = result * i\n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    result = 1\n    for i in set(list_data):\n        result *= i\n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_product = 1\n    for i in list_data:\n        if i not in unique_product:\n            unique_product = unique_product * i\n    print(unique_product)\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for i in list_data:\n        product *= i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product_dict = {}\n    for i in list_data:\n        if i in product_dict:\n            product_dict[i] += 1\n        else:\n            product_dict[i] = 1\n    product_list = [(i, product_dict[i]) for i in product_dict]\n    product_list = sorted(product_list, key = lambda x: x[1], reverse=True)\n    return product_list\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return reduce(lambda x,y: x*y, [num for num in list_data if list_data.count(num) == 1])\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # the surface area of a cylinder is 2*pi*r*(r+h)\n    # where r is the radius of the cylinder and h is the height of the cylinder\n    return 2*math.pi*r*(r+h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pass\n    return math.pi*r*(r+h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*math.pi*r*(r+h)\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sa = 2*pi*r*(r+h)\n    return sa\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # constants\n    pi = 3.1415926535\n    # outer circle\n    sa_outer = pi*2*r\n    # inner circle\n    sa_inner = pi*(r**2 - h**2)\n    # surface area\n    sa = sa_outer + sa_inner\n    return sa\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #surface area of cylinder = 2*pi*r*(r+h) + 2*pi*r*h\n    return 2*pi*r*(r+h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # returns 2*pi*r*h + 2*pi*r**2\n    return 2*math.pi*r*(r+h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sa=2*pi*r*h\n    return sa\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    from math import pi\n    return 2*pi*r*(r+h)\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    print(2*pi*r*h + 2*pi*r**2)\n    "
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B): \n        return False \n    for i in range(0,len(B)): \n        if A[i]!= B[i]: \n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    j = 0\n    for i in B:\n        if i in A[j:]:\n            j = A.index(i)+1\n        else:\n            return False\n    return True\n    \ndef find_max(A):\n    '''\n    Write a python function to find the max element in a list.\n    '''\n    n = len(A)\n    if n == 1:\n        return A[0]\n    max_element = A[0]\n    for i in xrange(1,n):\n        if A[i] > max_element:\n            max_element = A[i]\n    return max_element\n    \ndef reverse_list(A):\n    '''\n    Write a python function to reverse a list.\n    '''\n    n = len(A)\n    if n == 1:\n        return A\n    else:\n        return A[n-1::-1]\n    \ndef sort_list(A):\n    '''\n    Write a python function to sort a list.\n    '''\n    n = len(A)\n    if n == 1:\n        return A\n    else:\n        return sorted(A)\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return 0\n    i = 0\n    while i < len(B) and B[i] == A[i]:\n        i += 1\n    if i == len(B):\n        return 1\n    return 0\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    for i in range(len(B)):\n        if A[i]==B[i]:\n            return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if type(A)!=list or type(B)!=list: return \"Arguments are not lists.\"\n    if len(A)>len(B): return \"A is not a sublist of B.\"\n    for i in range(len(A)):\n        if A[i]!=B[i]: break\n    else: return 1\n    return 0\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if B==[]:\n        return True\n    elif len(B)>len(A):\n        return False\n    elif A==B:\n        return True\n    else:\n        if B[0] in A:\n            return is_Sub_Array(A[len(B):],B[1:])\n        else:\n            return False\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    result = False\n    if len(A) > len(B):\n        result = False\n    else:\n        for i in xrange(len(A)):\n            if A[i] == B[i]:\n                result = True\n    return result\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return B in A\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    n=len(A)\n    m=len(B)\n    \n    if n>m:\n        return 0\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A==[]:\n        return False\n    for i in range(len(B)):\n        if B[i] not in A:\n            return False\n    return True\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # factorials = [1,1,2,6,24,120,720,5040,40320,362880,3628800,39916800,479001600,6227020800,87178291200,1307674368000]\n    # for i in range(len(factorials)):\n    #     if (n // factorials[i]) == 1:\n    #         return i\n    # return -1\n    # return int(str(n)[-1])\n    # # return int(str(n)[-1])\n    # # return len(str(n))\n    return n % 9\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fac = 1\n    for i in xrange(2,n+1): \n        fac *= i\n    last = fac % 10\n    return last\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0: \n        return None\n    elif n == 0:\n        return 1\n    else:\n        return last_Digit_Factorial(n/10)*(n%10)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    return n * last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    cnt = 0\n    while (n > 0):\n        n = n // 10\n        cnt = cnt + 1\n    return cnt\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n*factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n%10 + last_Digit_Factorial(n/10)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return int(str(math.factorial(n))[-1])\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        raise ValueError('Factorial of negative numbers are not defined')\n    elif n==0:\n        return 1\n    else:\n        return n%10*last_Digit_Factorial(n/10)\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    assert type(n)==int and n>=0, \"n must be an integer greater than or equal to 0\"\n    return n and n%10\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1) == len(list2) == len(list3):\n        return list(zip(list1,list2,list3))\n    else:\n        return None\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [x for x in zip(list1,list2,list3)]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] + list2[i] + list3[i] for i in range(len(list1))]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i]+list2[i]+list3[i] for i in range(len(list1))]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.extend([list1[i], list2[i], list3[i]])\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.extend([list1[i],list2[i],list3[i]])\n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    i = 0\n    result = []\n    while i < len(list1) and i < len(list2) and i < len(list3):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    out = []\n    for i in range(len(list1)):\n        out.append(list1[i])\n        out.append(list2[i])\n        out.append(list3[i])\n    return out\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] + list2[i] + list3[i] for i in range(len(list1))]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list(chain(*zip(list1,list2,list3)))\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return [(x,y) for (x,y) in test_tup1 if x not in test_tup2 or y not in test_tup2]\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1 = eval(test_tup1)\n    test_tup2 = eval(test_tup2)\n    \n    dissimilar_dict = {}\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            if test_tup1[i] == test_tup2[j]:\n                break\n        else:\n            dissimilar_dict[test_tup1[i]] = test_tup2[j]\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    l1 = list(test_tup1)\n    l2 = list(test_tup2)\n    count = 0\n    for i in range(len(l1)):\n        if l1[i]!= l2[i]:\n            count += 1\n    print count\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(i)\n    return dissimilar_elements\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    res = set(test_tup1) ^ set(test_tup2)\n    return list(res)\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    tup1_set = set(test_tup1)\n    tup2_set = set(test_tup2)\n    intersection = tup1_set & tup2_set\n    return list(tup1_set - intersection) + list(tup2_set - intersection)\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if test_tup1 == test_tup2:\n        return None\n    dissimilar_ele = []\n    for i in range(0, len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_ele.append(test_tup1[i])\n    return dissimilar_ele\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = set(test_tup1) & set(test_tup2)\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if test_tup1[0]!= test_tup2[0]:\n        return test_tup1[0]\n    elif test_tup1[1]!= test_tup2[1]:\n        return test_tup1[1]\n    else:\n        return test_tup1[2]\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # check if even function is a bool or not.\n    if type(even_fnc) == bool:\n        # check if even function is True or not.\n        if even_fnc == True:\n            # even function is True, return tuple with only even elements.\n            return tuple(filter(even_fnc, test_tuple))\n        else:\n            # even function is False, return tuple with only odd elements.\n            return tuple(filter(lambda x: not even_fnc(x), test_tuple))\n    else:\n        # even function is a function, return tuple with elements which are even with the help of the function.\n        return tuple(filter(even_fnc, test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple):\n        return tuple(even_fnc(test_tuple))\n    else:\n        return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    if isinstance(test_tuple, tuple):\n        return tuple(filter(even_fnc, test_tuple))\n    else:\n        return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = tuple()\n    for element in test_tuple:\n        if even_fnc(element):\n            new_tuple += (element,)\n    return new_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return [item for item in test_tuple if item % 2 == 0]\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if type(test_tuple) == tuple:\n        if len(test_tuple)!= 0:\n            if type(test_tuple[0]) == tuple:\n                res = even_ele(test_tuple[0], even_fnc)\n                return even_ele(res, even_fnc)\n            elif type(test_tuple[0]) == int:\n                return even_fnc(test_tuple)\n            else:\n                return even_fnc(test_tuple)\n        else:\n            return tuple()\n    else:\n        return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for ntuple in test_tuple: \n        if not even_fnc(ntuple): \n            yield tuple(ele for ele in ntuple if ele % 2 == 0)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def remove_even(ele):\n        if even_fnc(ele):\n            return (ele)\n    return tuple(remove_even(i) for i in test_tuple)\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b * s \n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    sa = b * s\n    return sa\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s*4 + b*b*s\n    \n    \ndef surface_Area_rect(b,l):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and length.\n    '''\n    return b*l\n    \n    \ndef surface_Area_tri(b,h):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*h/2\n    \n    \ndef side_Area_rect(b,l):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and length.\n    '''\n    return l*b\n    \n    \ndef side_Area_tri(b,h):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*h/2\n    \n    \ndef side_Area_rect2(b,h):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*h/2) + (b*b/2)\n    \n    \ndef side_Area_tri2(b,h):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*h\n    \n    \ndef side_Area_rect3(b,h):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*h\n    \n    \ndef side_Area_tri3(b,h):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*(h/2)\n    \n    \ndef volume_Rect(b,h):\n    '''\n    Write a python function to find the volume of a rectangle with a given base edge and height.\n    '''\n    return b*h\n    \n    \ndef volume_Tri(b,h):\n    '''\n    Write a python function to find the volume of a rectangle with a given base edge and height.\n    '''\n    return b*h/2\n    \n    \ndef volume_Rect2(b,h):\n    '''\n    Write a python function to find the volume of a rectangle with a given base edge and height.\n    '''\n    return b*h\n    \n    \ndef volume_Tri2(b,h):\n    '''\n    Write a python function to find the volume of a rectangle with a given base edge and height.\n    '''\n    return b*(h/2)\n    \n    \ndef volume_Rect3(b,h):\n    '''\n    Write a python function to find the volume of a rectangle with a given base edge and height.\n    '''\n    return b*h\n    \n    \ndef volume_Tri3(b,h):\n    '''\n    Write a python function to find the volume of a rectangle with a given base edge and height.\n    '''\n    return b*h/2\n    \n    \ndef volume_Rect4(b,h):\n    '''\n    Write a python function to find the volume of a rectangle with a given base edge and height.\n    '''\n    return b*h\n    \n    \ndef volume_Tri4(b,h):\n    '''\n    Write a python function to find the volume of a rectangle with a given base edge and height.\n    '''\n    return b*(h/2)\n    \n    \ndef volume_Rect5(b,h):\n    '''\n    Write a python function to find the volume of a rectangle with a given base edge and height.\n    '''\n    return b*h\n    \n    \ndef volume_Tri5(b,h):\n    '''\n    Write a python function to find the volume of a rectangle with a given base edge and height.\n    '''\n    return b*(h/2)\n    \n    \ndef volume_Rect6(b,h):\n    '''\n    Write a python function to find the volume of a rectangle with a given base edge and height.\n    '''\n    return b*h\n    \n    \ndef volume_Tri6(b,h):\n    '''\n    Write a python function to find the volume of a rectangle with a given base edge and height.\n    '''\n    return b*(h/2)\n    \n    \ndef volume_Rect7(b,h):\n    '''\n    Write a python function to find the volume of a rectangle with a given base edge and height.\n    '''\n    return b*h\n    \n    \ndef volume_Tri7(b,h):\n    '''\n    Write a python function to find the volume of a rectangle with a given base edge and height.\n    '''\n    return b*(h/2)\n    \n    \ndef volume_Rect8(b,h):\n    '''\n    Write a python function to find the volume of a rectangle with a given base edge and height.\n    '''\n    return b*h\n    \n    \ndef volume_Tri8(b,h):\n    '''\n    Write a python function to find the volume of a rectangle with a given base edge and height.\n    '''\n    return b*(h/2)\n    \n    \ndef volume_Rect9(b,h):\n    '''\n    Write a python function to find the volume of a rectangle with a given base edge and height.\n    '''\n    return b*h\n    \n    \ndef volume_Tri9(b,h):\n    '''\n    Write a python function to find the volume of a rectangle with a given base edge and height.\n    '''\n    return b*(h/2)\n    \n    \ndef volume_Rect10(b,h):\n    '''\n    Write a python function to find the volume of a rectangle with a given base edge and height.\n    '''\n    return b*h\n    \n    \ndef volume_Tri10(b,h):\n    '''\n    Write a python function to find the volume of a rectangle with a given base edge and height.\n    '''\n    return b*(h/2)\n    \n    \ndef volume_Rect11(b,h):\n    '''\n    Write a python function to find the volume of a rectangle with a given base edge and height.\n    '''\n    return b*h\n    \n    \ndef volume_Tri11(b,h):\n    '''\n    Write a python function to find the volume of a rectangle with a given base edge and height.\n    '''\n    return b*(h/2)\n    \n    \ndef volume_Rect12(b,h):\n    '''\n    Write a python function to find the volume of a rectangle with a given base edge and height.\n    '''\n    return b*h\n    \n    \ndef volume_Tri12(b,h):\n    '''\n    Write a python function to find the volume of a rectangle with a given base edge and height.\n    '''\n    return b*(h/2)\n    \n    \ndef volume_Rect13(b,h):\n    '''\n    Write a python function to find the volume of a rectangle with a given base edge and height.\n    '''\n    return b*h\n    \n    \ndef volume_Tri13(b,h):\n    '''\n    Write a python function to find the volume of a rectangle with a given base edge and height.\n    '''\n    return b*(h/2)\n    \n    \ndef volume_Rect14(b,h):\n    '''\n    Write a python function to find the volume of a rectangle with a given base edge and height.\n    '''\n    return b*h\n    \n    \ndef volume_Tri14(b,h):\n    '''\n    Write a python function to find the volume of a rectangle with a given base edge and height.\n    '''\n    return b*(h/2)\n    \n    \ndef volume_Rect15(b,h):\n    '''\n    Write a python function to find the volume of a rectangle with a given base edge and height.\n    '''\n    return b*h\n    \n    \ndef volume_Tri15(b,h):\n    '''\n    Write a python function to find the volume of a rectangle with a given base edge and height.\n    '''"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #surface area\n    return b*b + (s*s)*2 + (b*s)*2\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b * 2 + (b ** 2 - (b - s) ** 2)\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    area = b*s\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*(b+s))\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\ndef Perimeter(b,s): \n    '''\n    Write a python function to find the perimeter of a square pyramid with a given base edge and height.\n    '''\n    return (2*b) + (2*s)\ndef Volume(b,s): \n    '''\n    Write a python function to find the volume of a square pyramid with a given base edge and height.\n    '''\n    return (b*s)/3\ndef area_of_triangle(s1,s2): \n    '''\n    Write a python function to find the area of a triangle given base edges and height.\n    '''\n    return (s1*s2)/2\ndef perimeter_of_triangle(s1,s2): \n    '''\n    Write a python function to find the perimeter of a triangle given base edges and height.\n    '''\n    return (s1+s2)\ndef volume_of_cuboid(l,w,h): \n    '''\n    Write a python function to find the volume of a cuboid given lengths, widths, and heights.\n    '''\n    return l*w*h\ndef surface_area_of_cuboid(l,w,h): \n    '''\n    Write a python function to find the surface area of a cuboid given lengths, widths, and heights.\n    '''\n    return 2*(l*w) + 2*(w*h) + 2*(h*l)\ndef surface_area_of_rectangular_prism(b,h): \n    '''\n    Write a python function to find the surface area of a rectangular prism given base edges and height.\n    '''\n    return 2*(b*h) + 2*(b*h) + 2*(h*b)\ndef area_of_circular_prism(r,h): \n    '''\n    Write a python function to find the area of a circular prism given radius and height.\n    '''\n    return 3*(r**2) + 2*(r**2) + 2*(h*r)\ndef volume_of_sphere(r): \n    '''\n    Write a python function to find the volume of a sphere given radius.\n    '''\n    return (4/3)*(3.14)*(r**3)\ndef volume_of_cylinder(r,h): \n    '''\n    Write a python function to find the volume of a cylinder given radius and height.\n    '''\n    return (3.14)*(r**2)*(h)\ndef area_of_spherical_section(r): \n    '''\n    Write a python function to find the surface area of a spherical section given radius.\n    '''\n    return 3.14*(r**2)\ndef surface_area_of_spherical_section(r): \n    '''\n    Write a python function to find the surface area of a spherical section given radius.\n    '''\n    return 4*(3.14)*(r**2)\ndef volume_of_cone(r,h): \n    '''\n    Write a python function to find the volume of a cone given radius and height.\n    '''\n    return (3.14)*(r**2)*(h)\ndef volume_of_cone_section(r,h): \n    '''\n    Write a python function to find the volume of a cone section given radius and height.\n    '''\n    return (3.14)*(r**2)*(h)\ndef volume_of_conical_section(r,h): \n    '''\n    Write a python function to find the volume of a conical section given radius and height.\n    '''\n    return (3.14)*(r**2)*(h)\ndef area_of_taper(b,t,r): \n    '''\n    Write a python function to find the surface area of a taper given base edge, taper ratio, and radius.\n    '''\n    return 2*(b*t) + (b*t) + (2*(b*t) + (b*t)*(r**2))\ndef area_of_prism(b,h): \n    '''\n    Write a python function to find the surface area of a prism given base edge and height.\n    '''\n    return 2*(b*h) + 2*(b*h) + 2*(h*b)\ndef volume_of_pyramid(b,h): \n    '''\n    Write a python function to find the volume of a pyramid given base edge and height.\n    '''\n    return (b*h)/3\ndef area_of_trapezoid(b,h,t): \n    '''\n    Write a python function to find the surface area of a trapezoid given base edge, height, and tilt ratio.\n    '''\n    return (b*h) + (2*(b*h) + (b*t))\ndef area_of_rectangular_prism_with_hole(b,h,l): \n    '''\n    Write a python function to find the surface area of a rectangular prism with a hole given base edge, height, and length.\n    '''\n    return (b*h) + (l*b) + (l*h)\ndef area_of_rectangular_prism_with_holes(b,h,l,n): \n    '''\n    Write a python function to find the surface area of a rectangular prism with a hole given base edge, height, and length.\n    '''\n    return (b*h) + (2*(l*b) + (n*l*h))\ndef area_of_rectangular_prism_with_holes_of_length_and_height(b,h,l,n): \n    '''\n    Write a python function to find the surface area of a rectangular prism with a hole given base edge, height, and length.\n    '''\n    return (b*h) + (2*(l*b) + (n*l*h))\ndef volume_of_pyramid_with_hole(b,h,l): \n    '''\n    Write a python function to find the volume of a pyramid with a hole given base edge, height, and length.\n    '''\n    return (b*h)/3\ndef volume_of_pyramid_with_holes(b,h,l,n): \n    '''\n    Write a python function to find the volume of a pyramid with a hole given base edge, height, and length.\n    '''\n    return (b*h)/3\ndef area_of_pyramid_with_hole(b,h,l): \n    '''\n    Write a python function to find the surface area of a pyramid with a hole given base edge, height, and length.\n    '''\n    return (b*h) + (l*b)\ndef area_of_pyramid_with_holes(b,h,l,n): \n    '''\n    Write a python function to find the surface area of a pyramid with a hole given base edge, height, and length.\n    '''\n    return (b*h) + (2*(l*b) + (n*l*h))\ndef area_of_pyramid_with_holes_of_length_and_height(b,h,l,n): \n    '''\n    Write a python function to find the surface area of a pyramid with a hole given base edge, height, and length.\n    '''\n    return (b*h) + (2*(l*b) + (n*l*h))\ndef volume_of_cuboid_with_hole(b,h,l): \n    '''\n    Write a python function to find the volume of a cuboid with a hole given base edge, height, and length.\n    '''\n    return (b*h)/3\ndef volume_of_cuboid_with_holes(b,h,l,n): \n    '''\n    Write a python function to find the volume of a cuboid with a hole given base edge, height, and length.\n    '''\n    return (b*h)/3\ndef area_of_cuboid_with_hole(b,h,l): \n    '''\n    Write a python function to find the surface area of a cuboid with a hole given base edge, height, and length.\n    '''\n    return (b*h) + (l*b)\ndef area_of_cuboid_with_holes(b,h,l,n): \n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    S = (b * s) / 2\n    return S\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print 'empty'\n    else:\n        print 'not empty'\n    # return 'empty' if not dict1 else 'not empty'\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return False\n    else:\n        return True\ndef dict_values(dict1):\n    '''\n    Write a function to print all values in a dictionary\n    '''\n    for key in dict1:\n        print(dict1[key])\ndef is_empty(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if my_dict(dict1)==False:\n        return True\n    else:\n        return False\ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary in ascending order\n    '''\n    for i in sorted(dict1):\n        print(i)\ndef merge_dict(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries\n    '''\n    for key in dict2:\n        dict1[key] = dict2[key]\n    return dict1\ndef get_key(dict1):\n    '''\n    Write a function to get the key of a dictionary\n    '''\n    for key in dict1:\n        return key\ndef get_value(dict1):\n    '''\n    Write a function to get the value of a dictionary\n    '''\n    for value in dict1.values():\n        return value\ndef set_value(dict1):\n    '''\n    Write a function to set a value in a dictionary\n    '''\n    dict1[1] = \"abc\"\n    return dict1\ndef update_dict(dict1):\n    '''\n    Write a function to update a dictionary\n    '''\n    dict1.update({4: \"hello\"})\n    return dict1\ndef delete_dict_value(dict1):\n    '''\n    Write a function to delete a value in a dictionary\n    '''\n    dict1.pop(1)\n    return dict1\ndef key_dict(dict1):\n    '''\n    Write a function to get all keys in a dictionary\n    '''\n    for key in dict1.keys():\n        return key\ndef value_dict(dict1):\n    '''\n    Write a function to get all values in a dictionary\n    '''\n    for value in dict1.values():\n        return value\ndef keys_dict(dict1):\n    '''\n    Write a function to get all keys of a dictionary\n    '''\n    for key in dict1.keys():\n        print(key)\ndef values_dict(dict1):\n    '''\n    Write a function to get all values of a dictionary\n    '''\n    for value in dict1.values():\n        print(value)\ndef update_dict_key(dict1, dict2):\n    '''\n    Write a function to update a key in a dictionary\n    '''\n    dict1.update({4:\"hello\"})\n    return dict1\ndef delete_dict_key(dict1):\n    '''\n    Write a function to delete a key in a dictionary\n    '''\n    del dict1[4]\n    return dict1\ndef copy_dict(dict1):\n    '''\n    Write a function to copy a dictionary\n    '''\n    copy = dict1.copy()\n    return copy\ndef count_items(dict1):\n    '''\n    Write a function to count items in a dictionary\n    '''\n    print(len(dict1))\ndef update_item(dict1):\n    '''\n    Write a function to update items in a dictionary\n    '''\n    dict1[1] = \"hello\"\n    return dict1\ndef length_dict(dict1):\n    '''\n    Write a function to get length of a dictionary\n    '''\n    print(len(dict1))\ndef max_dict(dict1):\n    '''\n    Write a function to get max value of a dictionary\n    '''\n    print(max(dict1.values()))\ndef min_dict(dict1):\n    '''\n    Write a function to get min value of a dictionary\n    '''\n    print(min(dict1.values()))\ndef concatenate_dict(dict1, dict2):\n    '''\n    Write a function to concatenate two dictionaries\n    '''\n    new_dict = dict1.copy()\n    new_dict.update(dict2)\n    return new_dict\ndef print_dict(dict1):\n    '''\n    Write a function to print all items in a dictionary\n    '''\n    for i in dict1:\n        print(dict1[i])\ndef get_all_values(dict1):\n    '''\n    Write a function to get all values of a dictionary\n    '''\n    values = []\n    for value in dict1.values():\n        values.append(value)\n    return values\ndef sort_dict_values(dict1):\n    '''\n    Write a function to sort all values of a dictionary\n    '''\n    values = get_all_values(dict1)\n    values.sort()\n    return values\ndef sort_dict_keys(dict1):\n    '''\n    Write a function to sort all keys of a dictionary\n    '''\n    keys = get_all_keys(dict1)\n    keys.sort()\n    return keys\ndef sort_dict_items(dict1):\n    '''\n    Write a function to sort all items of a dictionary\n    '''\n    items = get_all_items(dict1)\n    items.sort()\n    return items\ndef reverse_dict(dict1):\n    '''\n    Write a function to reverse a dictionary\n    '''\n    new_dict = {}\n    for key in dict1:\n        value = dict1[key]\n        new_dict[value] = key\n    return new_dict\ndef print_dict_in_order(dict1):\n    '''\n    Write a function to print all items in a dictionary\n    '''\n    keys = get_all_keys(dict1)\n    for i in keys:\n        print(dict1[i])\ndef print_dict_items_in_order(dict1):\n    '''\n    Write a function to print all items in a dictionary\n    '''\n    items = get_all_items(dict1)\n    for i in items:\n        print(i)\ndef copy_dict_item(dict1):\n    '''\n    Write a function to copy an item in a dictionary\n    '''\n    copy = dict1[1].copy()\n    return copy\ndef print_value_keys(dict1):\n    '''\n    Write a function to print all values of a dictionary\n    '''\n    for value in dict1.values():\n        print(value)\ndef print_value_items(dict1):\n    '''\n    Write a function to print all values of a dictionary\n    '''\n    for value in dict1.values():\n        print(value)\ndef set_item(dict1, dict2):\n    '''\n    Write a function to set a item in a dictionary\n    '''\n    dict1[1] = \"hello\"\n    return dict1\ndef update_dict_item(dict1):\n    '''\n    Write a function to update a key in a dictionary\n    '''\n    dict1[1] = \"hello\"\n    return dict1\ndef delete_item(dict1):\n    '''\n    Write a function to delete a key from a dictionary\n    '''\n    del dict1[1]\n    return dict1\ndef get_all_keys(dict1):\n    '''\n    Write a function to get all keys in a dictionary\n    '''\n    keys = []\n    for key in dict1.keys():\n        keys.append(key)\n    return keys\ndef get_all_values(dict1):\n    '''\n    Write a function to get all values in a dictionary\n    '''\n    values = []\n    for value in dict1.values():\n        values.append(value)\n    return values\ndef get_all_items(dict1):\n    '''\n    Write a function to get all items in a dictionary\n    '''\n    items = []\n    for item in dict1.items():\n        items.append(item)\n    return items\ndef get_all_keys_items(dict1):\n    '''\n    Write a function to get all keys and items in a dictionary\n    '''\n    keys = get_all_keys(dict1)\n    items = get_all_items(dict1)\n    return keys, items\ndef get_all_items_values(dict1):\n    '''\n    Write a function to get all items and values in a dictionary\n    '''\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\ndef my_counter(dict1):\n    '''\n    Write a function to return a dictionary of \n    every string with its frequency\n    '''\n    if len(dict1) == 0:\n        return {}\n    else:\n        keys = dict1.keys()\n        for item in keys:\n            dict1[item] = 1\n        return dict1\ndef my_string(str1):\n    '''\n    Write a function to convert a string to uppercase\n    '''\n    if len(str1) == 0:\n        return \"\"\n    else:\n        return str1.upper()\ndef my_tuple(tup1):\n    '''\n    Write a function to remove the last element of a tuple\n    '''\n    if len(tup1) == 0:\n        return tup1\n    else:\n        return tup1[0:len(tup1)-1]\ndef my_list(list1):\n    '''\n    Write a function to remove the last element of a list\n    '''\n    if len(list1) == 0:\n        return []\n    else:\n        return list1[0:len(list1)-1]\ndef my_sort(list1):\n    '''\n    Write a function to sort a list\n    '''\n    if len(list1) == 0:\n        return []\n    else:\n        return sorted(list1)\ndef my_range(n):\n    '''\n    Write a function to return a range of numbers\n    '''\n    if n == 0:\n        return []\n    elif n > 0:\n        return range(1,n+1)\n    elif n < 0:\n        return range(n,0)\ndef my_filter(function,list1):\n    '''\n    Write a function to filter a list\n    '''\n    if len(list1) == 0:\n        return []\n    else:\n        filter = []\n        for item in list1:\n            if function(item):\n                filter.append(item)\n        return filter\ndef my_reversed(list1):\n    '''\n    Write a function to return the reversed list\n    '''\n    if len(list1) == 0:\n        return []\n    else:\n        return list1[::-1]\ndef my_any(list1):\n    '''\n    Write a function to return True if any item is true, False otherwise\n    '''\n    if len(list1) == 0:\n        return False\n    else:\n        for item in list1:\n            if item:\n                return True\n        return False\ndef my_all(list1):\n    '''\n    Write a function to return True if all items are true, False otherwise\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        for item in list1:\n            if not item:\n                return False\n        return True\ndef my_len(list1):\n    '''\n    Write a function to return the length of a list\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        return len(list1)\ndef my_append(list1,item):\n    '''\n    Write a function to add an item to the end of a list\n    '''\n    if len(list1) == 0:\n        return [item]\n    else:\n        return list1 + [item]\ndef my_insert(list1,item):\n    '''\n    Write a function to insert an item at the given index in a list\n    '''\n    if len(list1) == 0:\n        return [item]\n    else:\n        return list1[0:list1.index(list1[0])] + [item] + list1[list1.index(list1[0])+1:]\ndef my_index(item,list1):\n    '''\n    Write a function to return the index of an item in a list\n    '''\n    if len(list1) == 0:\n        return -1\n    else:\n        return list1.index(item)\ndef my_del(list1,item):\n    '''\n    Write a function to delete the first item that matches the given value\n    '''\n    if len(list1) == 0:\n        return list1\n    else:\n        if item == list1[0]:\n            return list1[1:]\n        else:\n            return list1[0:list1.index(item)]\ndef my_pop(list1,index):\n    '''\n    Write a function to delete an item with the given index from a list\n    '''\n    if len(list1) == 0:\n        return list1\n    else:\n        if index == len(list1)-1:\n            return list1[0:len(list1)-1]\n        else:\n            return list1[0:list1.index(list1[index])] + list1[list1.index(list1[index])+1:]\ndef my_reverse(list1):\n    '''\n    Write a function to reverse a list\n    '''\n    if len(list1) == 0:\n        return []\n    else:\n        return list1[::-1]\ndef my_max(list1):\n    '''\n    Write a function to return the max value in a list\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        return max(list1)\ndef my_min(list1):\n    '''\n    Write a function to return the max value in a list\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        return min(list1)\ndef my_map(function,list1):\n    '''\n    Write a function to map a function over a list\n    '''\n    if len(list1) == 0:\n        return []\n    else:\n        return list(map(function,list1))\ndef my_reduce(function,list1):\n    '''\n    Write a function to reduce a list\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        return reduce(function,list1)\ndef my_reduce(function,list1):\n    '''\n    Write a function to reduce a list\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        return reduce(function,list1)\ndef my_zip(list1,list2):\n    '''\n    Write a function to zip two lists together\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return []\n    else:\n        return list(zip(list1,list2))\ndef my_enumerate(list1):\n    '''\n    Write a function to enumerate a list\n    '''\n    if len(list1) == 0:\n        return []\n    else:\n        return list(enumerate(list1))\ndef my_filter(function,list1):\n    '''\n    Write a function to filter a list\n    '''\n    if len(list1) == 0:\n        return []\n    else:\n        filter = []\n        for item in list1:\n            if function(item):\n                filter.append(item)\n        return filter\ndef my_filter(function,list1):\n    '''\n    Write a function to filter a list\n    '''\n    if len(list1) == 0:\n        return []\n    else:\n        filter = []\n        for item in list1:\n            if function(item):\n                filter.append(item)\n        return filter\ndef my_sorted(list1):\n    '''\n    Write a function to sort a list\n    '''\n    if len(list1) == 0:\n        return []\n    else:\n        return sorted(list1)\ndef my_sorted(list1,reverse=False):\n    '''\n    Write a function to sort a list\n    '''\n    if len(list1) == 0:\n        return []\n    else:\n        return sorted(list1,reverse=reverse)\ndef my_range(n):\n    '''\n    Write a function to return a range of numbers\n    '''\n    if n == 0:\n        return []\n    elif n > 0:\n        return range(1,n+1)\n    elif n < 0:"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    dict2 = {}\n    for key in dict1.keys():\n        dict2[key] = dict1[key]\n    return dict2\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return True if len(dict1)==0 else False\n    # Alternatively, you can return if not dict1:\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = [1]\n    for i in range(1, num+1):\n        catalan.append(catalan[i-1]*(2*i+1)/(i+2))\n    return catalan[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return (num-1) * catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return 0\n    elif num == 0:\n        return 1\n    else:\n        return 2 * sum([catalan_number(num - i - 1) for i in range(num)])\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 0:\n        return 1\n    else:\n        return catalan_number(num - 1) * (num + 1) / 2\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return num * catalan_number(num - 1) / (num + 1)\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return None\n    if num == 0:\n        return 1\n    catalan = [0] * (num + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n    for i in range(2, num + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        raise Exception(\"Please enter positive number\")\n    if num == 0:\n        return 1\n    else:\n        return 2 * catalan_number(num - 1) / (num + 1)\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    n = num\n    res = [0]*(n+1)\n    res[0] = 1\n    for i in xrange(1,n+1):\n        for j in xrange(i,n+1):\n            res[j] += res[j-i]\n    return res[n]\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    catalan_numbers = []\n    catalan_numbers.append(1)\n    catalan_numbers.append(1)\n    catalan_numbers.append(2)\n    for i in range(3,num+1):\n        catalan_numbers.append(0)\n    for i in range(3,num+1):\n        for j in range(i,num+1):\n            catalan_numbers[j] += catalan_numbers[j-i]\n    return catalan_numbers[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = re.finditer(r\"\\w+ly$\",text)\n    list_of_positions = []\n    for item in result:\n        list_of_positions.append(item.start())\n    return list_of_positions\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = re.search(r'ly$', text)\n    if result:\n        print result.start(), result.end()\n    else:\n        print 'None'\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # return [m.start() for m in re.finditer('ly$', text)]\n    return [m.start() for m in re.finditer('ly', text)]\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    a = re.search('ly$', text)\n    if a:\n        print(a.start())\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ly_list = []\n    pat = re.compile(r'ly$')\n    match = pat.search(text)\n    if match:\n        print(match.start())\n        ly_list.append(match.start())\n        print(ly_list)\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos= re.finditer(r\"\\wly\\b\", text)\n    if not pos:\n        print \"There is no adverb ending with ly\"\n    else:\n        print \"The first adverb ending with ly is %s with position %s\" % (pos[0].group(), str(pos.start(0)))\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # use re.findall(pattern,string)\n    ly_pos = re.findall(r'(ly)\\b', text)\n    return ly_pos\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    # pattern = re.compile('^.*ly$', re.IGNORECASE)\n    # result = pattern.findall(text)\n    # print result\n    \n    # word = text.split()\n    # res = [m.end() for m in re.finditer('ly$', text)]\n    # print res\n    \n    # word = text.split()\n    # print word\n    # res = [m.start() for m in re.finditer('ly$', text)]\n    # print res\n    \n    res = []\n    word = text.split()\n    \n    for i, c in enumerate(word):\n        if c.lower().endswith('ly'):\n            res.append(i)\n            \n    return res\n    "
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #ret = re.findall(r\"\\s[ad]y\\s\", text)\n    #print(ret)\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    vowels = 'aeiouy'\n    vowel_positions = []\n    for word in text.split():\n        found_vowel = False\n        for pos, letter in enumerate(word):\n            if letter in vowels and found_vowel == False:\n                vowel_positions.append(pos)\n                found_vowel = True\n        if found_vowel == False:\n            vowel_positions.append(0)\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    maxHeap = []\n    for item,price in items:\n        heapq.heappush(maxHeap,(-price,item))\n        if len(maxHeap) > n:\n            heapq.heappop(maxHeap)\n    result = []\n    for _ in range(n):\n        result.append(heapq.heappop(maxHeap)[1])\n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(key=lambda x:x[1],reverse=True)\n    return [items[i][0] for i in range(n)]\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if not items:\n        return []\n    elif n == 1:\n        return [max(items, key=lambda item: item[1])]\n    else:\n        leftover = n - len(items)\n        return heapq.nlargest(leftover, items, key=lambda item: item[1])\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return heapq.nlargest(n,items)\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # O(n lgn)\n    if n == 1:\n        return [[i] for i in items]\n    else:\n        sorted_items = sorted(items,reverse=True)\n        return [sorted_items[i:i + n] for i in range(0, len(items), n)]\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # heap of tuples of (cost,item)\n    heap = [(-item[1],item[0]) for item in items]\n    heapq.heapify(heap)\n    return [(heapq.heappop(heap)[1],-heapq.heappop(heap)[1]) for i in range(n)]\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    res = []\n    for i in range(n):\n        res.append(items[i][1])\n    return res\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n<=0 or n>len(items):\n        return []\n    heap = []\n    for item,price in items:\n        heapq.heappush(heap,(-price,item))\n    return [heapq.heappop(heap)[1] for _ in range(n)]\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #h = sorted(items, key=lambda x: x[1], reverse=True)\n    h = []\n    for item in items:\n        heapq.heappush(h, (item[1],item[0]))\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #sorted_items = sorted(items,key=lambda item:item[1],reverse=True)\n    #return sorted_items[:n]\n    return heapq.nlargest(n,items,key=lambda item:item[1])\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n]+l[n:len(l)]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n]+l[n+1:]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = []\n    arr.extend(l[:n])\n    arr.extend(l[n:])\n    return arr\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n]+l[n:], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l_n = l[0:n]\n    l_n.append(l[n:])\n    return l_n\n    \n    \nl = [1,2,3,4,5,6]\nprint split_Arr(l, 3)\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l1 = l[:n]\n    l2 = l[n:]\n    return l1 + l2\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n]+l[n+1:]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        return [l]\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[-1] - nums[0]\n    \nprint big_diff([10, 2, 5, 0])\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n    \ndef sum_of_numbers(nums):\n    '''\n    Write a python function to find the sum of all numbers in a given list.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums)-min(nums)\n    \ndef sorted_and_distinct(nums):\n    '''\n    Write a python function to check whether a list contains all the distinct numbers from 0 to 9.\n    '''\n    nums.sort()\n    for i in range(10):\n        if nums.count(i)!= 1:\n            return False\n    return True\n    \ndef flatten_list(nested_list):\n    '''\n    Write a python function to flatten a nested list.\n    '''\n    final_list = []\n    for i in nested_list:\n        if type(i) is list:\n            final_list = final_list + flatten_list(i)\n        else:\n            final_list.append(i)\n    return final_list\n    \ndef min_max(nums):\n    '''\n    Write a python function to find the max and min value in a list.\n    '''\n    min_num = nums[0]\n    max_num = nums[0]\n    for i in nums:\n        if i < min_num:\n            min_num = i\n        if i > max_num:\n            max_num = i\n    return min_num, max_num\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    big = min(nums)\n    small = max(nums)\n    return big-small\n    "
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    a = nums[0]\n    b = nums[0]\n    for i in nums:\n        if i > a:\n            a = i\n        elif i < b:\n            b = i\n    return a-b\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[-1] - nums[0]\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a,b+1):\n        if (i**0.5)%1==0:\n            print(i)\nperfect_squares(0,10)\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    num = 1\n    perfect_squares = []\n    while True:\n        if (num ** 2) >= a and (num ** 2) <= b:\n            perfect_squares.append(num ** 2)\n        elif (num ** 2) < a:\n            break\n        num += 1\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a < b:\n        return perfect_squares(a, b-1) + perfect_squares(b, b)\n    else:\n        return 0\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    def is_sq(n):\n        if n**0.5 == int(n**0.5):\n            return True\n        else:\n            return False\n    perfect_sq_list = []\n    for x in range(a, b+1):\n        if is_sq(x) and x**2 >= a and x**2 <= b:\n            perfect_sq_list.append(x**2)\n    return perfect_sq_list\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    i = a\n    while (i <= b):\n        j = 1\n        while (j * j <= i):\n            if (i % j == 0):\n                print(j)\n                break\n            j += 1\n        i += 1\nperfect_squares(25, 300)\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for x in range(a,b+1):\n        if x*x == a:\n            perfect_squares.append(x)\n        elif x*x > a and x*x < b:\n            perfect_squares.append(x)\n    return perfect_squares\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = [x ** 2 for x in range(int(sqrt(a)), int(sqrt(b)) + 1) if x ** 2 in range(a, b + 1)]\n    return perfect_squares\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [i**2 for i in range(a, b+1) if i**2 >= a and i**2 <= b]\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return sum(i**2 for i in range(int(math.sqrt(a)), int(math.sqrt(b)) + 1))\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Use binary search to find all perfect square in the range a to b\n    # Use binary search to find all perfect square in the range a to b\n    # Use binary search to find all perfect square in the range a to b\n    # Use binary search to find all perfect square in the range a to b\n    # Use binary search to find all perfect square in the range a to b\n    # Use binary search to find all perfect square in the range a to b\n    # Use binary search to find all perfect square in the range a to b\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (round(abs(x) * cos(y)), round(abs(y) * sin(y)))\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (round(sqrt(x**2+y**2)), cmath.phase(complex(x,y)))\ndef is_equal(a,b):\n    '''\n    Write a function to check if two numbers are equal.\n    '''\n    return a == b\ndef is_bigger(a,b):\n    '''\n    Write a function to check if a number is bigger than another one.\n    '''\n    return a > b\ndef power(a,b):\n    '''\n    Write a function to compute the power of a number.\n    '''\n    return a**b\ndef digit_count(a):\n    '''\n    Write a function to count the number of digits in a given number.\n    '''\n    return len(str(a))\ndef fib(a,b):\n    '''\n    Write a function that will find the Nth Fibonacci number, where N is a positive integer\n    '''\n    if a == 0 or b == 0:\n        return 1\n    return a+b\ndef factorial(n):\n    '''\n    Write a function to calculate the factorial of a given number.\n    '''\n    return n * factorial(n-1)\ndef palindrome(s):\n    '''\n    Write a function that will determine if a string is a palindrome.\n    '''\n    if len(s) == 1:\n        return True\n    if s[0] == s[-1]:\n        return palindrome(s[1:-1])\n    else:\n        return False\ndef palindrome_rec(s):\n    '''\n    Write a function to determine if a string is a palindrome using recursion.\n    '''\n    if len(s) == 1:\n        return True\n    if s[0] == s[-1]:\n        return palindrome_rec(s[1:-1])\n    else:\n        return False\ndef palindrome_iter(s):\n    '''\n    Write a function to determine if a string is a palindrome using iteration.\n    '''\n    for i in range(len(s)/2):\n        if s[i]!= s[-(i+1)]:\n            return False\n    return True\ndef fizz_buzz(n):\n    '''\n    Write a function to print all the divisors of a number.\n    '''\n    for i in range(1, n+1):\n        if n % i == 0:\n            print(i)\ndef reverse(s):\n    '''\n    Write a function to reverse a string.\n    '''\n    return s[::-1]\ndef reverse_rec(s):\n    '''\n    Write a function to reverse a string using recursion.\n    '''\n    if len(s) == 1:\n        return s\n    return reverse_rec(s[1:]) + s[0]\ndef reverse_iter(s):\n    '''\n    Write a function to reverse a string using iteration.\n    '''\n    for i in range(len(s)):\n        s = s[:i]+ s[i+1:]\n    return s\ndef is_anagram(a,b):\n    '''\n    Write a function to check if two strings are anagrams.\n    '''\n    a = a.lower()\n    b = b.lower()\n    if len(a)!= len(b):\n        return False\n    if sorted(a) == sorted(b):\n        return True\n    return False\ndef is_anagram_rec(a,b):\n    '''\n    Write a function to check if two strings are anagrams using recursion.\n    '''\n    if len(a)!= len(b):\n        return False\n    if sorted(a) == sorted(b):\n        return True\n    return is_anagram_rec(a[1:], b[1:])\ndef is_anagram_iter(a,b):\n    '''\n    Write a function to check if two strings are anagrams using iteration.\n    '''\n    a = a.lower()\n    b = b.lower()\n    if len(a)!= len(b):\n        return False\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            return False\n    return True\ndef is_anagram_rec2(a,b):\n    '''\n    Write a function to check if two strings are anagrams using recursion.\n    '''\n    if len(a)!= len(b):\n        return False\n    if sorted(a)!= sorted(b):\n        return False\n    return True\ndef is_anagram_iter2(a,b):\n    '''\n    Write a function to check if two strings are anagrams using iteration.\n    '''\n    a = a.lower()\n    b = b.lower()\n    if len(a)!= len(b):\n        return False\n    d = {}\n    for i in range(len(a)):\n        if a[i] in d:\n            d[a[i]] += 1\n        else:\n            d[a[i]] = 1\n        if b[i] in d:\n            d[b[i]] -= 1\n        else:\n            d[b[i]] = -1\n    for k in d:\n        if d[k]!= 0:\n            return False\n    return True\ndef is_anagram_iter3(a,b):\n    '''\n    Write a function to check if two strings are anagrams using iteration.\n    '''\n    a = a.lower()\n    b = b.lower()\n    if len(a)!= len(b):\n        return False\n    d = {}\n    for i in range(len(a)):\n        d[a[i]] = d.get(a[i], 0) + 1\n        d[b[i]] = d.get(b[i], 0) - 1\n    for k in d:\n        if d[k]!= 0:\n            return False\n    return True\ndef is_anagram_rec3(a,b):\n    '''\n    Write a function to check if two strings are anagrams using recursion.\n    '''\n    if len(a)!= len(b):\n        return False\n    if sorted(a)!= sorted(b):\n        return False\n    return True\ndef min_max(nums):\n    '''\n    Write a function that takes a list of integers and returns the maximum and minimum values in the list.\n    '''\n    return min(nums), max(nums)\ndef min_max_iter(nums):\n    '''\n    Write a function that takes a list of integers and returns the maximum and minimum values in the list using iteration.\n    '''\n    min_num = nums[0]\n    max_num = nums[0]\n    for num in nums[1:]:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    return (min_num, max_num)\ndef fib_rec(n):\n    '''\n    Write a function to find the nth Fibonacci number using recursion.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib_rec(n-1) + fib_rec(n-2)\ndef fib_iter(n):\n    '''\n    Write a function to find the nth Fibonacci number using iteration.\n    '''\n    if n == 1:\n        return 1\n    a = 0\n    b = 1\n    for i in range(n-1):\n        a, b = b, a+b\n    return a\ndef fib_iter2(n):\n    '''\n    Write a function to find the nth Fibonacci number using iteration.\n    '''\n    if n == 1:\n        return 1\n    a = 0\n    b = 1\n    for i in range(n-1):\n        a, b = b, a+b\n    return a\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    for i in range(2, "
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = x**2+y**2\n    b = cmath.sqrt(a)\n    return b.real,b.imag\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=float(x)\n    y=float(y)\n    if y<0:\n        print \"Complex number should be positive\"\n        return\n    elif y==0:\n        return (x,0)\n    else:\n        return ((x*cmath.sqrt(1-y**2))/cmath.sqrt(1+y**2),0)\ndef polar_rect_coord(a,b):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    a=float(a)\n    b=float(b)\n    if b==0:\n        return (a,0)\n    elif b<0:\n        return (0,0)\n    else:\n        return ((a**2+b**2)**0.5,0)\ndef cart_polar(x,y):\n    '''\n    Write a function to convert cartesian coordinates to polar coordinates.\n    '''\n    x=float(x)\n    y=float(y)\n    if y==0:\n        if x==0:\n            return (0,0)\n        elif x>0:\n            return (cmath.sqrt(x**2+y**2),0)\n        else:\n            return (0,0)\n    elif y>0:\n        return (0,cmath.sqrt(x**2+y**2))\n    else:\n        return ((x*cmath.sqrt(1-y**2))/cmath.sqrt(1+y**2),0)\ndef cart_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=float(x)\n    y=float(y)\n    if y<0:\n        print \"Complex number should be positive\"\n        return\n    elif y==0:\n        return (x,0)\n    else:\n        return (cmath.sqrt(x**2+y**2),0)\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x=float(x)\n    y=float(y)\n    if y==0:\n        if x==0:\n            return (0,0)\n        elif x>0:\n            return (cmath.sqrt(x**2+y**2),0)\n        else:\n            return (0,0)\n    elif y>0:\n        return (0,cmath.sqrt(x**2+y**2))\n    else:\n        return ((x*cmath.sqrt(1-y**2))/cmath.sqrt(1+y**2),0)\ndef cart_rect_coord(a,b):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    a=float(a)\n    b=float(b)\n    if b==0:\n        if a==0:\n            return (0,0)\n        elif a>0:\n            return (cmath.sqrt(a**2+b**2),0)\n        else:\n            return (0,0)\n    elif b<0:\n        return (0,0)\n    else:\n        return (cmath.sqrt(a**2+b**2),0)\ndef cart_coord(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=float(x)\n    y=float(y)\n    if y==0:\n        if x==0:\n            return (0,0)\n        elif x>0:\n            return (x,0)\n        else:\n            return (0,0)\n    elif y>0:\n        return (x,0)\n    else:\n        return ((x**2+y**2)**0.5,0)\ndef rect_cart_coord(a,b):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    a=float(a)\n    b=float(b)\n    if b==0:\n        if a==0:\n            return (0,0)\n        elif a>0:\n            return (a,0)\n        else:\n            return (0,0)\n    elif b>0:\n        return (0,a)\n    else:\n        return ((a**2+b**2)**0.5,0)\ndef sc(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x=float(x)\n    y=float(y)\n    if y==0:\n        if x==0:\n            return (0,0)\n        elif x>0:\n            return (cmath.sqrt(x**2+y**2),0)\n        else:\n            return (0,0)\n    elif y>0:\n        return (0,cmath.sqrt(x**2+y**2))\n    else:\n        return ((x*cmath.sqrt(1-y**2))/cmath.sqrt(1+y**2),0)\ndef dic_i(s,n):\n    '''\n    Write a function to convert from a diagonal to a unit circle (i.e. from\n    a diagonal to a circle of radius 1)\n    '''\n    a=float(s)\n    n=float(n)\n    if n==0:\n        return 0\n    elif n<0:\n        return 0\n    else:\n        return (a/n)\ndef dic_ii(s,n):\n    '''\n    Write a function to convert from a diagonal to a unit circle (i.e. from\n    a diagonal to a circle of radius 1)\n    '''\n    a=float(s)\n    n=float(n)\n    if n==0:\n        return 0\n    elif n<0:\n        return 0\n    else:\n        return (a/n)\ndef dic_iii(s,n):\n    '''\n    Write a function to convert from a diagonal to a unit circle (i.e. from\n    a diagonal to a circle of radius 1)\n    '''\n    a=float(s)\n    n=float(n)\n    if n==0:\n        return 0\n    elif n<0:\n        return 0\n    else:\n        return (a/n)\ndef circle_i(r,n):\n    '''\n    Write a function to convert from a circle to a diagonal (i.e. from a circle\n    to a diagonal of radius 1)\n    '''\n    r=float(r)\n    n=float(n)\n    if n==0:\n        return 0\n    elif n<0:\n        return 0\n    else:\n        return (r*n)\ndef circle_ii(r,n):\n    '''\n    Write a function to convert from a circle to a diagonal (i.e. from a circle\n    to a diagonal of radius 1)\n    '''\n    r=float(r)\n    n=float(n)\n    if n==0:\n        return 0\n    elif n<0:\n        return 0\n    else:\n        return (r*n)\ndef circle_iii(r,n):\n    '''\n    Write a function to convert from a circle to a diagonal (i.e. from a circle\n    to a diagonal of radius 1)\n    '''\n    r=float(r)\n    n=float(n)\n    if n==0:\n        return 0\n    elif n<0:\n        return 0\n    else:\n        return (r*n)\ndef triangle_i(a,n):\n    '''\n    Write a function to convert from a triangle to a diagonal (i.e. from a\n    triangle to a diagonal of radius 1)\n    '''\n    a=float(a)\n    n=float(n)\n    if n==0:\n        return 0\n    elif n<0:\n        return 0\n    else:\n        return (a*n)\ndef triangle_ii(a,n):\n    '''\n    Write a function to convert from a triangle to a diagonal (i.e. from a\n    triangle to a diagonal of radius 1)\n    '''\n    a=float(a)\n    n=float(n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(x,cmath.radians(y))\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return cmath.polar(x)\ndef shortest_path(x1,y1,x2,y2):\n    '''\n    Write a function to find the shortest path between two points given the\n    coordinates of both points.\n    '''\n    return max(abs(x1-x2),abs(y1-y2))\ndef check_eulers_criteria(n):\n    '''\n    Write a function to check whether a number n is a perfect square.\n    '''\n    return n**(1/2)%1==0\ndef check_prime(n):\n    '''\n    Write a function to check whether a number n is a prime number.\n    '''\n    if n==1:\n        return False\n    elif n==2 or n==3:\n        return True\n    elif n%2==0 or n%3==0:\n        return False\n    elif check_eulers_criteria(n):\n        return False\n    else:\n        return True\ndef get_primes(n):\n    '''\n    Write a function to get the list of all prime numbers up to n\n    '''\n    primes=[]\n    for i in range(2,n+1):\n        if check_prime(i):\n            primes.append(i)\n    return primes\ndef get_non_primes(n):\n    '''\n    Write a function to get the list of all non prime numbers up to n\n    '''\n    non_primes=[]\n    for i in range(2,n+1):\n        if not check_prime(i):\n            non_primes.append(i)\n    return non_primes\ndef all_subsets(arr):\n    '''\n    Write a function to get the list of all subsets of a given array.\n    '''\n    subsets=[[]]\n    for i in range(len(arr)):\n        for j in range(len(subsets)):\n            subsets.append(subsets[j]+[arr[i]])\n    return subsets\ndef check_perfect(n):\n    '''\n    Write a function to check whether a given number is a perfect number.\n    '''\n    sum_of_divisors=0\n    for i in range(1,n):\n        if n%i==0:\n            sum_of_divisors+=i\n    if sum_of_divisors==n:\n        return True\n    else:\n        return False\ndef get_perfect_numbers(n):\n    '''\n    Write a function to get the list of all perfect numbers up to n\n    '''\n    perfect_numbers=[]\n    for i in range(2,n+1):\n        if check_perfect(i):\n            perfect_numbers.append(i)\n    return perfect_numbers\ndef is_prime(n):\n    '''\n    Write a function to check whether a given number n is a prime number.\n    '''\n    if n%2==0 and n!=2:\n        return False\n    elif n==2:\n        return True\n    elif n==1 or n%2==0:\n        return False\n    elif check_eulers_criteria(n):\n        return False\n    else:\n        return True\ndef is_power_of_2(n):\n    '''\n    Write a function to check whether a given number n is a power of 2.\n    '''\n    return (n&(n-1))==0\ndef is_power_of_2_efficient(n):\n    '''\n    Write a function to check whether a given number n is a power of 2.\n    '''\n    return n%2==0 and n/2==n//2\ndef get_primes_list(n):\n    '''\n    Write a function to get the list of all primes up to n\n    '''\n    primes=[]\n    for i in range(2,n+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\ndef get_primes_list_efficient(n):\n    '''\n    Write a function to get the list of all primes up to n\n    '''\n    primes=[]\n    for i in range(2,n+1):\n        if is_power_of_2_efficient(i):\n            primes.append(i)\n    return primes\ndef get_non_primes_list(n):\n    '''\n    Write a function to get the list of all non primes up to n\n    '''\n    non_primes=[]\n    for i in range(2,n+1):\n        if not is_prime(i):\n            non_primes.append(i)\n    return non_primes\ndef get_non_primes_list_efficient(n):\n    '''\n    Write a function to get the list of all non primes up to n\n    '''\n    non_primes=[]\n    for i in range(2,n+1):\n        if not is_power_of_2_efficient(i):\n            non_primes.append(i)\n    return non_primes\ndef get_all_digits(n):\n    '''\n    Write a function to get the list of all digits of a given number n.\n    '''\n    string=str(n)\n    return [int(i) for i in string]\ndef check_in_array(element, array):\n    '''\n    Write a function to check whether a given element is in a given array.\n    '''\n    for i in array:\n        if i==element:\n            return True\n    return False\ndef get_array_index(element, array):\n    '''\n    Write a function to get the index of a given element in an array.\n    '''\n    for i in range(len(array)):\n        if array[i]==element:\n            return i\n    return -1\ndef get_unique_items(array):\n    '''\n    Write a function to get the list of all unique items of an array\n    '''\n    unique_items=[]\n    for i in array:\n        if not check_in_array(i,unique_items):\n            unique_items.append(i)\n    return unique_items\ndef get_unique_items_efficient(array):\n    '''\n    Write a function to get the list of all unique items of an array\n    '''\n    unique_items=[]\n    for i in array:\n        if not check_in_array(i,unique_items):\n            unique_items.append(i)\n    return unique_items\ndef get_missing_item(array):\n    '''\n    Write a function to get the list of all missing items of an array\n    '''\n    missing_item_list=[]\n    for i in range(max(array)+1):\n        if not check_in_array(i,array):\n            missing_item_list.append(i)\n    return missing_item_list\ndef get_missing_item_efficient(array):\n    '''\n    Write a function to get the list of all missing items of an array\n    '''\n    missing_item_list=[]\n    for i in range(max(array)+1):\n        if not check_in_array(i,array):\n            missing_item_list.append(i)\n    return missing_item_list\ndef get_all_possible_permutations(arr):\n    '''\n    Write a function to get the list of all possible permutations of an array\n    '''\n    if len(arr)==0:\n        return []\n    elif len(arr)==1:\n        return [arr]\n    else:\n        small_permutations=get_all_possible_permutations(arr[1:])\n        permutations=[]\n        for i in small_permutations:\n            for j in range(len(i)+1):\n                permutations.append(i[:j]+arr[0:1]+i[j:])\n        return small_permutations+permutations\ndef get_all_possible_permutations_efficient(arr):\n    '''\n    Write a function to get the list of all possible permutations of an array\n    '''\n    if len(arr"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    x = [i for i in x]\n    y = [j for j in y]\n    #print x\n    #print y\n    #print max(x)\n    #print max(y)\n    #print min(x)\n    #print min(y)\n    \n    #print max(x), max(y)\n    #print min(x), min(y)\n    \n    \n    #print max(x)-min(x)\n    #print max(y)-min(y)\n    \n    \n    #print max(x),max(y)\n    #print min(x),min(y)\n    \n    #print max(x),min(y)\n    #print min(x),max(y)\n    \n    \n    \n    \n    #print max(x)\n    #print max(y)\n    #print min(x)\n    #print min(y)\n    \n    #print x,y\n    \n    \n    \n    #maxx = abs(max(x))\n    #maxy = abs(max(y))\n    #minx = abs(min(x))\n    #miny = abs(min(y))\n    \n    #print maxx\n    #print maxy\n    #print minx\n    #print miny\n    \n    \n    #maxx = max(x)\n    #maxy = max(y)\n    #minx = min(x)\n    #miny = min(y)\n    #print maxx\n    #print maxy\n    #print minx\n    #print miny\n    \n    \n    \n    #print maxx,maxy\n    #print minx,miny\n    \n    #print maxx-minx\n    #print maxy-miny\n    \n    \n    #print maxx\n    #print minx\n    \n    \n    #print max(x)\n    #print min(x)\n    \n    #print max(y)\n    #print min(y)\n    \n    #print max(x)-min(x)\n    #print max(y)-min(y)\n    \n    \n    #print (max(x)-min(x))/maxx\n    #print (max(y)-min(y))/maxy\n    \n    \n    \n    \n    \n    \n    \n    #print max(x)\n    #print min(x)\n    \n    #print max(y)\n    #print min(y)\n    \n    #print max(x)-min(x)\n    #print max(y)-min(y)\n    \n    \n    #print (max(x)-min(x))/maxx\n    #print (max(y)-min(y))/maxy\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    #print x\n    #print y\n    \n    #print max(x),max(y)\n    #print min(x),min(y)\n    \n    #print max(x)-min(x)\n    #print max(y)-min(y)\n    \n    \n    \n    #print (max(x)-min(x))/maxx\n    #print (max(y)-min(y))/maxy\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x,y=complex(x,y)\n    r=cmath.sqrt(x*x+y*y)\n    theta=cmath.atan2(y,x)\n    return r,theta\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # x = x**2 + y**2\n    # y = (x**0.5) * sin(y)\n    # x = (x**0.5) * cos(y)\n    # (x,y) = (complex(x), complex(y))\n    return complex(x,y)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    \n    xr=int(x.real)\n    xq=int(x.imag)\n    if xr==xq==0:\n        return complex(0,0)\n    if xr!=xq==0:\n        return complex(xr,xq)\n    if xr==0 and xq!=0:\n        return complex(y,0)\n    if xr==0 and xq==0:\n        return complex(0,y)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 and xq==0:\n        return complex(0,0)\n    if xr==0 an"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(x,cmath.pi/2-y)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a=y**2+x**2\n    b=2*y*x\n    return a,b\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 1:\n        return newList\n    else:\n        tmp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = tmp\n        return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    return newList[-1]+newList[1:len(newList)-1]+newList[0]\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.append(newList.pop(0))\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    tmp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = tmp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0] = newList[-1]\n    newList[-1] = newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    if length <= 1:\n        return newList\n    else:\n        newList[0], newList[length-1] = newList[length-1], newList[0]\n        return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in xrange(0,k):\n        res = res * (n-i)\n        res = res / (i+1)\n    return res\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    if (k>n-k):\n        k = n-k\n    for i in range(0,k):\n        res = res*(n-i)\n        res = res//(i+1)\n    return res\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    binomial_coeff = [0 for i in range(k+1)] \n    binomial_coeff[0] = 1\n    if(n == k): \n        return binomial_coeff[n] \n    binomial_coeff[1] = 1\n    if(n > 1): \n        for i in range(2,n+1): \n            for j in range(min(i,k)+1): \n                if(j > 1): \n                    binomial_coeff[j] += binomial_coeff[j-1]*(i-j+1) \n    return binomial_coeff[k] \n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if(k>n or k<0):\n        return 0\n    if(k==0 or k==n):\n        return 1\n    else:\n        a = 1\n        for i in range(1,n-k+1):\n            a = a*(n-i)\n            a = a/i\n        return a\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    res = 1; \n    for i in range(0, k): \n        res = res * (n - i) \n        res = res // (i + 1) \n    return res\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = [[0 for x in range(k+1)] for x in range(n+1)]\n    for i in range(n+1):\n        for j in range(min(i,k)+1):\n            if j == 0 or j == i:\n                C[i][j] = 1\n            else:\n                C[i][j] = C[i-1][j-1] + C[i-1][j]\n    return C[n][k]\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    ans = 1\n    for i in range(1,n-k+1): \n        ans = ans*i\n    for i in range(1,k+1): \n        ans = ans/i\n    return ans\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(k):\n        res = res*(n-i)\n        res = res//(i+1)\n    return res\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 1\n    if(k > n - k):\n        k = n - k\n    for i in range(0, k):\n        result = result * (n - i)\n        result = result / (i + 1)\n    return result\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff=1\n    for i in range(0,k):\n        coeff=coeff*(n-i)\n        coeff=coeff//(i+1)\n    return coeff\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_as_string = str(ip)\n    if ip_as_string.startswith('0'):\n        return ip_as_string[1:]\n    else:\n        return ip_as_string\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return \".\".join(ip.split(\".\")).strip(\".\")\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # if ip[0] == 0:\n    #     ip = ip[1:]\n    # if ip[0] == '0':\n    #     ip = ip[1:]\n    # if ip[0] == '0':\n    #     ip = ip[1:]\n    # return ip\n    return ip.strip('0')\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip[0] == '0':\n        ip = ip[1:]\n        return removezero_ip(ip)\n    else:\n        return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('(\\.0+)','\\g<1>',ip)\ndef remove_private_ip(ip):\n    '''\n    Write a function to remove private ip from an ip address.\n    '''\n    temp=ip.split('.')\n    if temp[0]=='10' or temp[0]=='192' or temp[0]=='172':\n        return\n    elif temp[0]=='127':\n        return\n    elif temp[0]=='0':\n        return\n    elif temp[0]=='169' or temp[0]=='172' or temp[0]=='192':\n        return\n    elif temp[0]=='0' or temp[0]=='1':\n        return\n    elif temp[0]=='169' or temp[0]=='172' or temp[0]=='192':\n        return\n    elif temp[0]=='0' or temp[0]=='1':\n        return\n    elif temp[0]=='129' or temp[0]=='130' or temp[0]=='131' or temp[0]=='132' or temp[0]=='133' or temp[0]=='134' or temp[0]=='135' or temp[0]=='136' or temp[0]=='137' or temp[0]=='138' or temp[0]=='139' or temp[0]=='140' or temp[0]=='141' or temp[0]=='142' or temp[0]=='143' or temp[0]=='144' or temp[0]=='145' or temp[0]=='146' or temp[0]=='147' or temp[0]=='148' or temp[0]=='149':\n        return\n    elif temp[0]=='224' or temp[0]=='239':\n        return\n    elif temp[0]=='192':\n        temp[0]='0'\n        return temp\n    elif temp[0]=='172':\n        temp[0]='1'\n        return temp\n    elif temp[0]=='0':\n        temp[0]='8'\n        return temp\n    elif temp[0]=='8':\n        temp[0]='0'\n        return temp\n    elif temp[0]=='128':\n        temp[0]='2'\n        return temp\n    elif temp[0]=='2':\n        temp[0]='0'\n        return temp\n    elif temp[0]=='0':\n        temp[0]='4'\n        return temp\n    elif temp[0]=='4':\n        temp[0]='0'\n        return temp\n    elif temp[0]=='192' or temp[0]=='172':\n        return\n    elif temp[0]=='0':\n        return\n    else:\n        return temp\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('(\\.0){2,}', '', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = ip.split('.')\n    if len(ip_list)!= 4:\n        return \"Error\"\n    \n    ip_list = [int(i) for i in ip_list]\n    while ip_list[3] == 0:\n        ip_list = ip_list[:3] + ip_list[4:]\n    return '.'.join(ip_list)\n    \ndef remove_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('\\.0+$', '', ip)\n    \ndef find_ip(ip, start, end):\n    '''\n    Finds the last occurrence of ip in the range start to end\n    '''\n    return max(i for i in xrange(start, end) if ip in str(i))\n    \ndef split_ip(ip):\n    '''\n    Split the ip into its 4 octets\n    '''\n    return [int(i) for i in ip.split('.')]\n    \ndef list_contains(ip_list, ip):\n    '''\n    ip_list = [192, 168, 1, 1]\n    ip = '192.168.1.1'\n    '''\n    return any(ip in str(i) for i in ip_list)\n    \ndef check_ip(ip):\n    '''\n    Takes an ip address and returns true if it is in the right format.\n    '''\n    if not re.match('^(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})$', ip):\n        return False\n    for i in ip.split('.'):\n        if not 0<= int(i)<=255:\n            return False\n    return True\n    \ndef check_ip_in_range(ip, start, end):\n    '''\n    Check if an ip is in a range\n    '''\n    return start <= int(ip) <= end\n    \ndef get_network_bits(ip):\n    '''\n    Take a 32 bit ip address and return the network bits\n    '''\n    return 32 - find_ip(ip, 0, 255)\n    \ndef get_broadcast_bits(ip):\n    '''\n    Take a 32 bit ip address and return the network bits\n    '''\n    return 32 - get_network_bits(ip)\n    \ndef check_ip_in_range(ip, start, end):\n    '''\n    Check if an ip is in a range\n    '''\n    return start <= int(ip) <= end\n    \ndef get_subnet_bits(ip, bits):\n    '''\n    Take a 32 bit ip address and return the network bits\n    '''\n    return 32 - bits\n    \ndef get_network_ip(ip, bits):\n    '''\n    Take a 32 bit ip address and return the network ip\n    '''\n    return split_ip(ip)[0] & get_subnet_bits(ip, bits)\n    \ndef get_broadcast_ip(ip, bits):\n    '''\n    Take a 32 bit ip address and return the network ip\n    '''\n    return get_network_ip(ip, bits) + (2 ** bits - 1)\n    \ndef get_first_ip(ip):\n    '''\n    Take a 32 bit ip address and return the first ip in that network\n    '''\n    return '%d.%d.%d.%d' % (get_network_ip(ip, 24), get_network_ip(ip, 16), get_network_ip(ip, 8), 0)\n    \ndef get_last_ip(ip):\n    '''\n    Take a 32 bit ip address and return the last ip in that network\n    '''\n    return '%d.%d.%d.%d' % (get_network_ip(ip, 24), get_network_ip(ip, 16), get_network_ip(ip, 8), (2 ** 24) - 1)\n    \ndef get_network_ips(ip, bits):\n    '''\n    Take a 32 bit ip address and return the network ips in that network\n    '''\n    return [get_network_ip(ip, bits) + i for i in xrange(2 ** (32 - bits))]\n    \ndef get_broadcast_ips(ip, bits):\n    '''\n    Take a 32 bit ip address and return the broadcast ips in that network\n    '''\n    return [get_broadcast_ip(ip, bits) + i for i in xrange(2 ** (32 - bits))]\n    \ndef get_last_ip_in_network(ip):\n    '''\n    Take a 32 bit ip address and return the last ip in that network\n    '''\n    return '%d.%d.%d.%d' % (get_network_ip(ip, 24), get_network_ip(ip, 16), get_network_ip(ip, 8), (2 ** 24) - 1)\n    \ndef get_first_ip_in_network(ip):\n    '''\n    Take a 32 bit ip address and return the first ip in that network\n    '''\n    return '%d.%d.%d.%d' % (get_network_ip(ip, 24), get_network_ip(ip, 16), get_network_ip(ip, 8), 0)\n    \ndef get_network_ips_in_range(ip, start, end):\n    '''\n    Take a 32 bit ip address and return the network ips in that network\n    '''\n    return [get_network_ip(ip, 24) + i for i in xrange(start, end) if 0 <= i <= (2 ** 24 - 1)]\n    \ndef get_broadcast_ips_in_range(ip, start, end):\n    '''\n    Take a 32 bit ip address and return the broadcast ips in that network\n    '''\n    return [get_broadcast_ip(ip, 24) + i for i in xrange(start, end) if 0 <= i <= (2 ** 24 - 1)]\n    \ndef get_host_ips(ip):\n    '''\n    Take a 32 bit ip address and return the network ips in that network\n    '''\n    return [get_network_ip(ip, 24) + i for i in xrange(2 ** 24)]\n    \ndef get_host_ip_in_range(ip, start, end):\n    '''\n    Take a 32 bit ip address and return the host ip in that network\n    '''\n    return [get_network_ip(ip, 24) + i for i in xrange(start, end) if 0 <= i <= (2 ** 24)]\n    \ndef get_host_ips_in_range(ip, start, end):\n    '''\n    Take a 32 bit ip address and return the host ip in that network\n    '''\n    return [get_network_ip(ip, 24) + i for i in xrange(start, end)]\n    \ndef is_valid_ip(ip):\n    '''\n    Takes a string and returns a boolean.\n    '''\n    return check_ip(ip)\n    \ndef is_valid_ip_in_range(ip, start, end):\n    '''\n    Takes a string and returns a boolean.\n    '''\n    return check_ip_in_range(ip, start, end)\n    \ndef is_valid_ip_in_network(ip, bits):\n    '''\n    Takes a string and returns a boolean.\n    '''\n    return check_ip_in_range(ip, get_network_ip(ip, bits), get_broadcast_ip(ip, bits))\n    \ndef is_valid_ip_in_subnet(ip, bits):\n    '''\n    Takes a string and returns a boolean.\n    '''\n    return check_ip_in_range(ip, get_network_ip(ip, bits), get_broadcast_ip(ip, bits))\n    \ndef is_valid_ip_in_network_range(ip, start, end):\n    '''\n    Takes a string and returns a boolean.\n    '''\n    return check_ip_in_range(ip, get_network_ip(ip, start), get_broadcast_ip(ip, end))\n    \ndef is_valid_ip_in_subnet_range(ip, start, end):\n    '''\n    Takes "
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.split('.')\n    return '.'.join(ip[1:4])\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return int(ip.lstrip('0'))\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    l = len(ip)\n    i = 0\n    while i < l:\n        if ip[i] == \"0\":\n            i += 1\n        else:\n            break\n    return ip[i:]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return list1[0] - list1[1]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    for i in range(0, len(list1), 2):\n        if i == 0:\n            even = list1[i]\n        else:\n            if list1[i] % 2 == 0:\n                even = list1[i]\n    for i in range(1, len(list1), 2):\n        if i == 1:\n            odd = list1[i]\n        else:\n            if list1[i] % 2!= 0:\n                odd = list1[i]\n    return even - odd\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return list1[0] - list1[1]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    \n    even_list = []\n    odd_list = []\n    \n    for item in list1:\n        if (item % 2 == 0):\n            even_list.append(item)\n        else:\n            odd_list.append(item)\n    \n    difference = abs(sum(even_list) - sum(odd_list))\n    return difference\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_number = list1[0]\n    odd_number = list1[1]\n    difference = even_number - odd_number\n    return difference\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    sum1 = sum(list1[0::2])\n    sum2 = sum(list1[1::2])\n    return abs(sum1 - sum2)\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_first = list1[0]\n    odd_first = list1[1]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_number = []\n    odd_number = []\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return list1[len(list1) // 2] - list1[0] if len(list1) % 2 == 0 else list1[len(list1) // 2] - list1[1]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_nums = []\n    odd_nums = []\n    for num in list1:\n        if num % 2 == 0:\n            even_nums.append(num)\n        else:\n            odd_nums.append(num)\n    return abs(sum(even_nums) - sum(odd_nums))\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    l1 = len(str1)\n    l2 = len(str2)\n    \n    if l1!= l2 :\n        return -1\n    \n    if l1 == 0 :\n        return 0\n    \n    count = 0\n    \n    for i in range(0,l1):\n        if str1[i]!= str2[i] :\n            count = count + 1\n            str1[i],str2[i] = str2[i],str1[i]\n    return count\n    \n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = ''.join(reversed(str1))\n    str2 = ''.join(reversed(str2))\n    result = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            result += 1\n            str1 = str1[:i] + str1[i+1:]\n            str2 = str2[:i] + str2[i+1:]\n    return result\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            str2 = str2[:i] + str2[i+1:]\n            str1 = str1[:i] + str1[i+1:]\n            count += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            count += 1\n            ind = str2.index(str1[i])\n            str2 = str2[:ind] + str2[ind+1:]\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    max_num = max(len(str1), len(str2))\n    swaps = 0\n    for i in range(max_num) : \n        if str1[i]!= str2[i] :\n            temp = str2[i]\n            str2 = str2[:i] + str2[i+1:]\n            str2 = str2[:i] + temp + str2[i:]\n            swaps += 1\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # convert string to int\n    str1 = int(''.join(str1.split()),2)\n    str2 = int(''.join(str2.split()),2)\n    if str1 == str2 :\n        return 0\n    else :\n        return minSwaps(str1,str2)\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!=len(str2):\n        print(\"lenght of two strings are not same\")\n        return\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Initializing count and swapped variable\n    count = 0\n    swapped = False\n    \n    # for loop to iterate over lengths of strings\n    for i in range(len(str1)) : \n        \n        # if str1[i]!= str2[i] \n        if str1[i]!= str2[i] : \n            \n            # Increment count by 1\n            count += 1\n            \n            # if str1[i] > str2[i]\n            if str1[i] > str2[i] : \n                \n                # Swap the characters\n                str2[i], str2[i+1] = str2[i+1], str2[i]\n                \n                # Reset swapped to False\n                swapped = False\n            \n            # if str1[i] < str2[i]\n            elif str1[i] < str2[i] : \n                \n                # Swap the characters\n                str2[i], str2[i+1] = str2[i+1], str2[i]\n                \n                # Reset swapped to False\n                swapped = False\n    \n    # Return the count of swaps\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    #Code\n    count = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = str1.strip()\n    str2 = str2.strip()\n    n = len(str1)\n    if str1 == str2 :\n        return 0\n    if n!= len(str2) :\n        return -1\n    if str1[::-1] == str2 :\n        return 0\n    if (str1 == \"0\" and str2 == \"1\") or (str1 == \"1\" and str2 == \"0\") :\n        return 1\n    swap = 0\n    for i in range(n) :\n        if str1[i]!= str2[i] :\n            swap += 1\n            str1 = str1[:i] + str2[i] + str1[i+1:]\n            str2 = str2[:i] + str1[i] + str2[i+1:]\n    return swap\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list)*sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    count = 0\n    for elem in tuple_list:\n        count += sys.getsizeof(elem)\n    return count\ndef tuple_print(tuple_list):\n    '''\n    Write a function to print the given tuple.\n    '''\n    for elem in tuple_list:\n        print(elem)\ndef tuple_get(tuple_list, idx):\n    '''\n    Write a function to return the element at the given index in the tuple.\n    '''\n    return tuple_list[idx]\ndef tuple_get_slice(tuple_list, start, end):\n    '''\n    Write a function to return a slice of the tuple.\n    '''\n    return tuple_list[start:end]\ndef tuple_set_element(tuple_list, idx, new_elem):\n    '''\n    Write a function to set the value of the element at the given index in the tuple.\n    '''\n    tuple_list[idx] = new_elem\n    return tuple_list\ndef tuple_set_slice(tuple_list, start, end, new_tuple):\n    '''\n    Write a function to set the value of the slice of the tuple.\n    '''\n    tuple_list[start:end] = new_tuple\n    return tuple_list\ndef tuple_append(tuple_list, elem):\n    '''\n    Write a function to append the given element to the tuple.\n    '''\n    tuple_list.append(elem)\n    return tuple_list\ndef tuple_clear(tuple_list):\n    '''\n    Write a function to clear the given tuple.\n    '''\n    tuple_list = []\n    return tuple_list\ndef tuple_copy(tuple_list):\n    '''\n    Write a function to copy the given tuple.\n    '''\n    return tuple_list[:]\ndef tuple_reverse(tuple_list):\n    '''\n    Write a function to reverse the tuple.\n    '''\n    return tuple_list[::-1]\ndef tuple_index(tuple_list, idx):\n    '''\n    Write a function to return the element at the given index in the tuple.\n    '''\n    return tuple_list.index(idx)\ndef tuple_count(tuple_list, elem):\n    '''\n    Write a function to return the count of the given element in the tuple.\n    '''\n    return tuple_list.count(elem)\ndef tuple_remove(tuple_list, elem):\n    '''\n    Write a function to remove the given element from the tuple.\n    '''\n    tuple_list.remove(elem)\n    return tuple_list\ndef tuple_pop(tuple_list, idx):\n    '''\n    Write a function to pop the element at the given index in the tuple.\n    '''\n    return tuple_list.pop(idx)\ndef tuple_contains(tuple_list, elem):\n    '''\n    Write a function to check if the given element is in the tuple.\n    '''\n    return elem in tuple_list\ndef tuple_sort(tuple_list):\n    '''\n    Write a function to sort the tuple.\n    '''\n    return sorted(tuple_list)\ndef tuple_sort_reverse(tuple_list):\n    '''\n    Write a function to sort the tuple in reverse order.\n    '''\n    return sorted(tuple_list, reverse=True)\ndef tuple_reverse_with_idx(tuple_list):\n    '''\n    Write a function to reverse the tuple and its elements.\n    '''\n    for idx in range(len(tuple_list) // 2):\n        tuple_list[idx], tuple_list[len(tuple_list) - 1 - idx] = tuple_list[len(tuple_list) - 1 - idx], tuple_list[idx]\n    return tuple_list\ndef tuple_max(tuple_list):\n    '''\n    Write a function to return the maximum element in the tuple.\n    '''\n    return max(tuple_list)\ndef tuple_min(tuple_list):\n    '''\n    Write a function to return the minimum element in the tuple.\n    '''\n    return min(tuple_list)\ndef tuple_sum(tuple_list):\n    '''\n    Write a function to return the sum of the elements in the tuple.\n    '''\n    return sum(tuple_list)\ndef tuple_average(tuple_list):\n    '''\n    Write a function to return the average of the elements in the tuple.\n    '''\n    return sum(tuple_list) / len(tuple_list)\ndef tuple_middle(tuple_list):\n    '''\n    Write a function to return the middle element in the tuple.\n    '''\n    return tuple_list[len(tuple_list) // 2]\ndef tuple_all_true(tuple_list):\n    '''\n    Write a function to return True if all elements in the tuple are true.\n    '''\n    for elem in tuple_list:\n        if not elem:\n            return False\n    return True\ndef tuple_any_true(tuple_list):\n    '''\n    Write a function to return True if any element in the tuple is true.\n    '''\n    for elem in tuple_list:\n        if elem:\n            return True\n    return False\ndef tuple_is_tuple(tuple_list):\n    '''\n    Write a function to return True if the given argument is a tuple.\n    '''\n    return isinstance(tuple_list, tuple)\ndef tuple_is_int(tuple_list):\n    '''\n    Write a function to return True if all elements in the tuple are integers.\n    '''\n    for elem in tuple_list:\n        if not isinstance(elem, int):\n            return False\n    return True\ndef tuple_is_float(tuple_list):\n    '''\n    Write a function to return True if all elements in the tuple are floats.\n    '''\n    for elem in tuple_list:\n        if not isinstance(elem, float):\n            return False\n    return True\ndef tuple_is_str(tuple_list):\n    '''\n    Write a function to return True if all elements in the tuple are strings.\n    '''\n    for elem in tuple_list:\n        if not isinstance(elem, str):\n            return False\n    return True\ndef tuple_is_list(tuple_list):\n    '''\n    Write a function to return True if all elements in the tuple are lists.\n    '''\n    for elem in tuple_list:\n        if not isinstance(elem, list):\n            return False\n    return True\ndef tuple_is_set(tuple_list):\n    '''\n    Write a function to return True if all elements in the tuple are sets.\n    '''\n    for elem in tuple_list:\n        if not isinstance(elem, set):\n            return False\n    return True\ndef tuple_is_dict(tuple_list):\n    '''\n    Write a function to return True if all elements in the tuple are dictionaries.\n    '''\n    for elem in tuple_list:\n        if not isinstance(elem, dict):\n            return False\n    return True\ndef tuple_is_complex(tuple_list):\n    '''\n    Write a function to return True if all elements in the tuple are complex numbers.\n    '''\n    for elem in tuple_list:\n        if not isinstance(elem, complex):\n            return False\n    return True\ndef tuple_is_bytes(tuple_list):\n    '''\n    Write a function to return True if all elements in the tuple are bytes.\n    '''\n    for elem in tuple_list:\n        if not isinstance(elem, bytes):\n            return False\n    return True\ndef tuple_is_bytearray(tuple_list):\n    '''\n    Write a function to return True if all elements in the tuple are bytearrays.\n    '''\n    for elem in tuple_list:\n        if not isinstance(elem, bytearray):\n            return False\n    return True\ndef tuple_is_memoryview(tuple_list):\n    '''\n    Write a function to return True if all elements in th"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for val in tuple_list:\n        size += sys.getsizeof(val)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    count = 0\n    for i in tuple_list:\n        count += sys.getsizeof(i)\n    return count\ndef list_size(list_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    count = 0\n    for i in list_list:\n        count += sys.getsizeof(i)\n    return count\ndef create_list_of_list(n):\n    '''\n    Write a function that returns a list of lists with n number of \n    elements each.\n    '''\n    return [[i for i in range(n)] for j in range(n)]\ndef create_list(n):\n    '''\n    Write a function that returns a list with n number of \n    elements.\n    '''\n    return [i for i in range(n)]\ndef tuple_iterable(tuple_list):\n    '''\n    Write a function to check if the given tuple is iterable.\n    '''\n    try:\n        next(iter(tuple_list))\n        return True\n    except:\n        return False\ndef list_iterable(list_list):\n    '''\n    Write a function to check if the given list is iterable.\n    '''\n    try:\n        next(iter(list_list))\n        return True\n    except:\n        return False\ndef tuple_iterator(tuple_list):\n    '''\n    Write a function to check if the given tuple is iterator.\n    '''\n    try:\n        iter(tuple_list)\n        return True\n    except:\n        return False\ndef list_iterator(list_list):\n    '''\n    Write a function to check if the given list is iterator.\n    '''\n    try:\n        iter(list_list)\n        return True\n    except:\n        return False\ndef tuple_len(tuple_list):\n    '''\n    Write a function to find the length of the given tuple.\n    '''\n    return len(tuple_list)\ndef list_len(list_list):\n    '''\n    Write a function to find the length of the given list.\n    '''\n    return len(list_list)\ndef tuple_add(tuple1, tuple2):\n    '''\n    Write a function to add the two given tuples together.\n    '''\n    return tuple1 + tuple2\ndef tuple_subtract(tuple1, tuple2):\n    '''\n    Write a function to subtract the second tuple from the first tuple.\n    '''\n    return tuple1 - tuple2\ndef tuple_product(tuple1, tuple2):\n    '''\n    Write a function to multiply the first tuple with the second tuple.\n    '''\n    return tuple1 * tuple2\ndef tuple_quotient(tuple1, tuple2):\n    '''\n    Write a function to find the quotient of the first tuple divided by the second tuple.\n    '''\n    return tuple1 / tuple2\ndef tuple_remainder(tuple1, tuple2):\n    '''\n    Write a function to find the remainder of the first tuple divided by the second tuple.\n    '''\n    return tuple1 % tuple2\ndef list_concat(list1, list2):\n    '''\n    Write a function to concatenate the two given lists together.\n    '''\n    return list1 + list2\ndef list_product(list1, list2):\n    '''\n    Write a function to multiply the two given lists together.\n    '''\n    return list1 * list2\ndef list_quotient(list1, list2):\n    '''\n    Write a function to find the quotient of the first list divided by the second list.\n    '''\n    return list1 / list2\ndef list_remainder(list1, list2):\n    '''\n    Write a function to find the remainder of the first list divided by the second list.\n    '''\n    return list1 % list2\ndef tuple_element(tuple1, index):\n    '''\n    Write a function to find the element of the given tuple at the given index.\n    '''\n    return tuple1[index]\ndef list_element(list1, index):\n    '''\n    Write a function to find the element of the given list at the given index.\n    '''\n    return list1[index]\ndef tuple_count(tuple1, item):\n    '''\n    Write a function to count the number of times the item occurs in the tuple.\n    '''\n    return tuple1.count(item)\ndef list_count(list1, item):\n    '''\n    Write a function to count the number of times the item occurs in the list.\n    '''\n    return list1.count(item)\ndef tuple_index(tuple1, item):\n    '''\n    Write a function to find the index of the first occurrence of the item in the tuple.\n    '''\n    return tuple1.index(item)\ndef list_index(list1, item):\n    '''\n    Write a function to find the index of the first occurrence of the item in the list.\n    '''\n    return list1.index(item)\ndef tuple_append(tuple1, tuple2):\n    '''\n    Write a function to append the second tuple to the first tuple.\n    '''\n    return tuple1 + tuple2\ndef tuple_insert(tuple1, tuple2, index):\n    '''\n    Write a function to insert the second tuple into the first tuple at the given index.\n    '''\n    return tuple1[:index] + tuple2 + tuple1[index:]\ndef list_insert(list1, index, item):\n    '''\n    Write a function to insert the second list into the first list at the given index.\n    '''\n    return list1[:index] + [item] + list1[index:]\ndef tuple_remove(tuple1, item):\n    '''\n    Write a function to remove the first occurrence of the item in the tuple.\n    '''\n    return tuple1[:tuple1.index(item)] + tuple1[tuple1.index(item) + 1:]\ndef list_remove(list1, item):\n    '''\n    Write a function to remove the first occurrence of the item in the list.\n    '''\n    return list1[:list1.index(item)] + list1[list1.index(item) + 1:]\ndef tuple_reverse(tuple1):\n    '''\n    Write a function to reverse the elements of the tuple.\n    '''\n    return tuple1[::-1]\ndef list_reverse(list1):\n    '''\n    Write a function to reverse the elements of the list.\n    '''\n    return list1[::-1]\ndef tuple_max(tuple1, tuple2):\n    '''\n    Write a function to find the maximum value of the two given tuples.\n    '''\n    return max(tuple1, tuple2)\ndef list_max(list1, list2):\n    '''\n    Write a function to find the maximum value of the two given lists.\n    '''\n    return max(list1, list2)\ndef tuple_min(tuple1, tuple2):\n    '''\n    Write a function to find the minimum value of the two given tuples.\n    '''\n    return min(tuple1, tuple2)\ndef list_min(list1, list2):\n    '''\n    Write a function to find the minimum value of the two given lists.\n    '''\n    return min(list1, list2)\ndef tuple_join(tuple1, tuple2):\n    '''\n    Write a function to join the given tuples.\n    '''\n    return tuple1 + tuple2\ndef tuple_setitem(tuple1, index, item):\n    '''\n    Write a function to replace the item in the given tuple at the given index with the given item.\n    '''\n    return tuple1[:index] + (item,) + tuple1[index + 1:]\ndef list_setitem(list1, index, item):\n    '''\n    Write a function to replace the item in the given list at the given index with the given item.\n    '''\n    return list1[:index] + [item] + list1[index + 1:]\ndef tuple_slice(tuple1, start, stop):\n    '''\n    Write a function to return the slice of the tuple.\n    '''\n    return tuple1[start:sto"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size=0\n    for item in tuple_list:\n        size=size+sys.getsizeof(item)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    i=0\n    tuple_length=sys.getsizeof(tuple_list)\n    while i<len(tuple_list):\n        tuple_length=tuple_length+sys.getsizeof(tuple_list[i])\n        i=i+1\n    return tuple_length\n    \ndef copy_tuple(tuple_list):\n    '''\n    Write a function to copy a tuple.\n    '''\n    tuple_length=sys.getsizeof(tuple_list)\n    copy_tuple=tuple_list\n    i=0\n    while i<len(tuple_list):\n        tuple_length=tuple_length+sys.getsizeof(tuple_list[i])\n        i=i+1\n    return tuple_length\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\ndef tuple_sum(tuple_list):\n    '''\n    Write a function to find the sum of all the elements in the given tuple.\n    '''\n    total = 0\n    for x in tuple_list:\n        total += x\n    return total\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size=0\n    for i in tuple_list:\n        size+=sys.getsizeof(i)\n    return size\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1:\n        return arr2[k-1]\n    if not arr2:\n        return arr1[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    \n    mid1 = len(arr1) / 2\n    mid2 = len(arr2) / 2\n    \n    if mid1 + mid2 == k - 1:\n        return min(find_kth(arr1[:mid1], arr2[:mid2], k), find_kth(arr1[mid1:], arr2[mid2:], k-mid1-mid2))\n    \n    if mid1 + mid2 > k - 1:\n        return find_kth(arr1, arr2[:mid2], k)\n    return find_kth(arr1[:mid1], arr2, k)\n    \nprint find_kth([1,2,3,4], [5,6,7,8,9], 6)"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1 is None or arr2 is None or len(arr1) == 0 or len(arr2) == 0:\n        return None\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while True:\n        if i >= len(arr1) or j >= len(arr2):\n            return -1\n        if i + j == k:\n            return arr1[i] if i < len(arr1) else arr2[j]\n        if i + j < k:\n            if arr1[i] < arr2[j]:\n                i += 1\n            else:\n                j += 1\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    p1 = 0\n    p2 = 0\n    len1 = len(arr1)\n    len2 = len(arr2)\n    while True:\n        if p1 == len1:\n            return arr2[p2 + k - 1]\n        if p2 == len2:\n            return arr1[p1 + k - 1]\n        if k == 1:\n            return min(arr1[p1], arr2[p2])\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while True:\n        if i == len(arr1):\n            return arr2[j + k - 1]\n        elif j == len(arr2):\n            return arr1[i + k - 1]\n        elif k == 1:\n            return min(arr1[i], arr2[j])\n        else:\n            if arr1[i] < arr2[j]:\n                i += 1\n                k -= 1\n            else:\n                j += 1\n                k -= 1\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # check if the arrays are empty\n    if arr1 is None:\n        return arr2[k-1]\n    if arr2 is None:\n        return arr1[k-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # iterate over array 1, find the absolute difference between\n    # index of element in array 1 and index of element in array 2.\n    # this difference will be used to index the array 2 element.\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        diff = abs(arr1[i] - arr2[j])\n        if diff == k:\n            return arr1[i]\n        elif diff < k:\n            i += 1\n        else:\n            j += 1\n    # if array 1 is exhausted, the kth element is on the other array\n    # because of the binary search, if the difference is bigger than the\n    # length of array 2, the kth element is not in array 2.\n    return arr2[j - 1] if i == len(arr1) else arr1[i]\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0:\n        return arr2[k-1]\n    if len(arr2) == 0:\n        return arr1[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    mid1 = len(arr1) / 2\n    mid2 = len(arr2) / 2\n    if arr1[mid1] < arr2[mid2]:\n        if k > mid2 + 1:\n            return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n    else:\n        if k > mid1 + 1:\n            return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n        else:\n            return find_kth(arr1[:mid1], arr2, k)\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    idx1, idx2 = 0, 0\n    count, j = 0, 0\n    while count < k:\n        if arr1[idx1] == arr2[idx2]:\n            count += 1\n            idx1 += 1\n            idx2 += 1\n        elif arr1[idx1] > arr2[idx2]:\n            idx2 += 1\n        else:\n            idx1 += 1\n    return arr1[idx1-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    armstrong = 0\n    i = 0\n    while number > 0:\n        digit = number % 10\n        armstrong += digit ** len(str(number))\n        number //= 10\n    if armstrong == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    digits = 0\n    # count the number of digits in the number\n    while number > 0:\n        number, last_digit = divmod(number, 10)\n        digits += 1\n    total = 0\n    # take the sum of the cubes of the digits\n    while number > 0:\n        last_digit = number % 10\n        total += last_digit ** digits\n        number //= 10\n    if number == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_digits = len(str(number))\n    # total sum of the cubes of each digit\n    total_sum = 0\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    digits = []\n    temp = number\n    while temp > 0:\n        digits.append(temp % 10)\n        temp //= 10\n    digits = digits[::-1]\n    length = len(digits)\n    sum_digits = 0\n    for i in range(0, length):\n        sum_digits += digits[i]**length\n    return sum_digits == number\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    return sum([int(i)**len(str(number)) for i in str(number)]) == number\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # if len(str(number)) == 1:\n    #     return True\n    # sum = 0\n    # for i in range(len(str(number))):\n    #     sum += int(str(number)[i])**3\n    # if sum == number:\n    #     return True\n    # else:\n    #     return False\n    # return sum == number\n    return number == sum(int(i)**3 for i in str(number))\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    sum = 0\n    num = number\n    while num > 0:\n        digit = num % 10\n        sum = sum + digit ** 3\n        num = num // 10\n    if number == sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    summation = 0\n    number_string = str(number)\n    for digit in number_string:\n        summation += int(digit)**len(number_string)\n    if summation == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    len_number = len(str(number))\n    count_sum = 0\n    for digit in str(number):\n        digit = int(digit)\n        count_sum += digit ** len_number\n    if count_sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    order = len(str(number))\n    \n    sum = 0\n    temp = number\n    \n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    \n    return True if sum == number else False\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    \n    i = 0\n    total = 0\n    while i < number:\n        total = total + i\n        i = i + 1\n    return total, total / number\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    result = 0\n    total = 0\n    for i in range(1, number+1):\n        result = result + i\n        total = total + i\n    average = total / number\n    return result, average\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    while (count < number):\n        total = total + count\n        count = count + 1\n    avg = float(total) / count\n    return (total, avg)\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    s = 0\n    for i in range(1, number+1):\n        s += i\n    return s, s/number\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    def sum_average_helper(number, sum, average):\n        if number == 0:\n            return sum, average\n        sum += number\n        average = sum/number\n        return sum_average_helper(number-1, sum, average)\n    return sum_average_helper(number, 0, 0)\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    \n    # Two types of problems:\n    # 1.    If there is no number, return 0\n    # 2.    If the given number is negative, return None\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    average = 0\n    for i in range(number + 1):\n        total += i\n    average = float(total)/number\n    return(total, average)\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    \n    total = 0\n    count = 0\n    \n    while count < number:\n        total = total + count\n        count = count + 1\n        \n    average = total / number\n    \n    return(total, average)\n    \nprint(sum_average(10))"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n = int(number)\n    total = 0\n    count = 1\n    while count <= n:\n        total += count\n        count += 1\n    return total, total/n\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    n = 0\n    while n < number:\n        sum += n\n        n += 1\n    average = sum / number\n    return sum, average\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    #Your code here\n    return n%2==0\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return (n & 1) == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2 == 0) : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return (n % 2) == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    return False\n    \ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if n % 2!= 0 : \n        return True\n    return False\n    \ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n < 2 : \n        return False\n    if n == 2 : \n        return True\n    for i in xrange(2, int(n **.5) + 1) : \n        if n % i == 0 : \n            return False\n    return True\n    \ndef get_Prime_List(limit) : \n    '''\n    Write a python function to get a list of prime numbers within the given limit\n    '''\n    if limit < 2 : \n        return []\n    if limit == 2 : \n        return [2]\n    if limit == 3 : \n        return [2, 3]\n    primes = []\n    for i in xrange(2, limit) : \n        if is_Prime(i) : \n            primes.append(i)\n    return primes\n    \ndef get_Powers_List(base, limit) : \n    '''\n    Write a python function to get a list of powers of a given number\n    '''\n    pow_list = []\n    for i in xrange(0, limit + 1) : \n        pow_list.append(base ** i)\n    return pow_list\n    \ndef get_Factorial_List(limit) : \n    '''\n    Write a python function to get a list of factorials within the given limit\n    '''\n    fact_list = []\n    for i in xrange(0, limit + 1) : \n        if is_Prime(i) : \n            fact_list.append(i)\n    return fact_list\n    \ndef get_Sum_of_Factorial_List(limit) : \n    '''\n    Write a python function to get a list of factorials within the given limit\n    '''\n    sum_of_fact_list = 0\n    fact_list = get_Factorial_List(limit)\n    for i in xrange(0, len(fact_list)) : \n        sum_of_fact_list += fact_list[i]\n    return sum_of_fact_list\n    \ndef get_Sum_of_Powers_List(base, limit) : \n    '''\n    Write a python function to get a list of powers of a given number\n    '''\n    sum_of_pow_list = 0\n    pow_list = get_Powers_List(base, limit)\n    for i in xrange(0, len(pow_list)) : \n        sum_of_pow_list += pow_list[i]\n    return sum_of_pow_list\n    \ndef get_Sum_of_Divisors_List(limit) : \n    '''\n    Write a python function to get a list of powers of a given number\n    '''\n    sum_of_div_list = 0\n    for i in xrange(1, limit) : \n        if limit % i == 0 : \n            sum_of_div_list += i\n    return sum_of_div_list\n    \ndef get_Sum_of_Squares_List(limit) : \n    '''\n    Write a python function to get a list of powers of a given number\n    '''\n    sum_of_sq_list = 0\n    for i in xrange(1, limit) : \n        sum_of_sq_list += (i ** 2)\n    return sum_of_sq_list\n    \ndef get_Sum_of_Cubed_List(limit) : \n    '''\n    Write a python function to get a list of powers of a given number\n    '''\n    sum_of_cubed_list = 0\n    for i in xrange(1, limit) : \n        sum_of_cubed_list += (i ** 3)\n    return sum_of_cubed_list\n    \ndef get_Sum_of_Factorials_and_Powers_List(limit) : \n    '''\n    Write a python function to get a list of powers of a given number\n    '''\n    sum_of_factorials_pow_list = 0\n    factorial_list = get_Factorial_List(limit)\n    pow_list = get_Powers_List(2, limit)\n    for i in xrange(0, len(factorial_list)) : \n        sum_of_factorials_pow_list += factorial_list[i] * pow_list[i]\n    return sum_of_factorials_pow_list\n    \ndef get_Sum_of_Squares_and_Powers_List(limit) : \n    '''\n    Write a python function to get a list of powers of a given number\n    '''\n    sum_of_sq_pow_list = 0\n    pow_list = get_Powers_List(2, limit)\n    sq_list = get_Powers_List(2, limit)\n    for i in xrange(0, len(pow_list)) : \n        sum_of_sq_pow_list += pow_list[i] * sq_list[i]\n    return sum_of_sq_pow_list\n    \ndef get_Sum_of_Cubed_and_Powers_List(limit) : \n    '''\n    Write a python function to get a list of powers of a given number\n    '''\n    sum_of_cubed_pow_list = 0\n    pow_list = get_Powers_List(2, limit)\n    cubed_list = get_Powers_List(3, limit)\n    for i in xrange(0, len(pow_list)) : \n        sum_of_cubed_pow_list += pow_list[i] * cubed_list[i]\n    return sum_of_cubed_pow_list\n    \ndef get_Sum_of_Divisors_and_Factorials_and_Powers_List(limit) : \n    '''\n    Write a python function to get a list of powers of a given number\n    '''\n    sum_of_div_factorial_pow_list = 0\n    divisor_list = get_Divisors_List(limit)\n    factorial_list = get_Factorial_List(limit)\n    pow_list = get_Powers_List(2, limit)\n    for i in xrange(0, len(divisor_list)) : \n        sum_of_div_factorial_pow_list += divisor_list[i] * factorial_list[i] * pow_list[i]\n    return sum_of_div_factorial_pow_list\n    \ndef get_Sum_of_Divisors_and_Factorials_and_Squares_List(limit) : \n    '''\n    Write a python function to get a list of powers of a given number\n    '''\n    sum_of_div_factorial_sq_list = 0\n    divisor_list = get_Divisors_List(limit)\n    factorial_list = get_Factorial_List(limit)\n    sq_list = get_Powers_List(2, limit)\n    for i in xrange(0, len(divisor_list)) : \n        sum_of_div_factorial_sq_list += divisor_list[i] * factorial_list[i] * sq_list[i]\n    return sum_of_div_factorial_sq_list\n    \ndef get_Sum_of_Divisors_and_Factorials_and_Cubed_List(limit) : \n    '''\n    Write a python function to get a list of powers of a given number\n    '''\n    sum_of_div_factorial_cubed_list = 0\n    divisor_list = get_Divisors_List(limit)\n    factorial_list = get_Factorial_List(limit)\n    cubed_list = get_Powers_List(3, limit)\n    for i in xrange"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2 == 0\n    \ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    return n%2 == 1\n    \ndef is_Zero(n) : \n    '''\n    Write a python function to check whether the given number is zero or not.\n    '''\n    return n == 0\n    \ndef is_Positive(n) : \n    '''\n    Write a python function to check whether the given number is positive or not.\n    '''\n    return n > 0\n    \ndef is_Negative(n) : \n    '''\n    Write a python function to check whether the given number is negative or not.\n    '''\n    return n < 0\n    \ndef is_Perfect(n) : \n    '''\n    Write a python function to check whether the given number is a perfect number or not.\n    '''\n    Sum = 0\n    for x in range(1,n) :\n        if n%x == 0 :\n            Sum = Sum + x\n    return Sum == n\n    \ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n == 1 :\n        return False\n    \n    for x in range(2,n) :\n        if n%x == 0 :\n            return False\n    return True\n    \ndef is_Fibonacci(n) : \n    '''\n    Write a python function to check whether the given number is a Fibonacci number or not.\n    '''\n    return is_Prime(n) and is_Prime(n+1)\n    \ndef is_Pandigital(n) : \n    '''\n    Write a python function to check whether the given number is a pandigital number or not.\n    '''\n    s = str(n)\n    for x in range(0,len(s)) :\n        if s[x] == '0' :\n            return False\n    return len(s) == 9\n    \ndef is_Palindrome(n) : \n    '''\n    Write a python function to check whether the given number is a palindrome number or not.\n    '''\n    s = str(n)\n    for x in range(len(s)/2) :\n        if s[x]!= s[-(x+1)] :\n            return False\n    return True\n    \ndef is_Armstrong(n) : \n    '''\n    Write a python function to check whether the given number is an armstrong number or not.\n    '''\n    Sum = 0\n    for x in range(1,n) :\n        if n%x == 0 :\n            Sum = Sum + (x**3)\n    return Sum == n\n    \ndef is_Armstrong_Reverse(n) : \n    '''\n    Write a python function to check whether the given number is an armstrong number or not.\n    '''\n    Sum = 0\n    for x in range(1,n) :\n        if n%x == 0 :\n            Sum = Sum + (x**2)\n    return Sum == n\n    \ndef is_Roman(s) : \n    '''\n    Write a python function to check whether the given number is a Roman numeral number or not.\n    '''\n    s = s.upper()\n    roman = {'M' : 1000,'D' : 500,'C' : 100,'L' : 50,'X' : 10,'V' : 5,'I' : 1}\n    if len(s) > 1 :\n        if s[-1] in roman :\n            return roman[s[-1]] >= roman[s[-2]]\n    if len(s) == 1 :\n        if s in roman :\n            return True\n    return False\n    \ndef is_Prime_Fibonacci(n) : \n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    if n == 1 or n == 2 or n == 3 :\n        return True\n    if n%2 == 0 :\n        return False\n    \n    p = 5\n    f1 = 1\n    f2 = 1\n    while p <= n**(0.5) :\n        if n%p == 0 :\n            return False\n        if p == 5 :\n            p = 7\n            f1 = f2\n            f2 = p - 1\n        else :\n            p = p + 2\n            f1 = f2\n            f2 = p - 1\n    return True\n    \ndef is_Power(n) : \n    '''\n    Write a python function to check whether the given number is a power number or not.\n    '''\n    return n == 1 or n == 2 or n == 4 or n == 8 or n == 16 or n == 32 or n == 64 or n == 128 or n == 256 or n == 512 or n == 1024\n    \ndef is_Power_Reverse(n) : \n    '''\n    Write a python function to check whether the given number is a power number or not.\n    '''\n    return is_Power(n) and n%2 == 0\n    \ndef is_Pentagonal(n) : \n    '''\n    Write a python function to check whether the given number is a pentagonal number or not.\n    '''\n    return is_Prime(n) and is_Power(n+1)\n    \ndef is_Pentagonal_Reverse(n) : \n    '''\n    Write a python function to check whether the given number is a pentagonal number or not.\n    '''\n    return is_Pentagonal(n) and n%2 == 0\n    \ndef is_Pentagonal_Prime(n) : \n    '''\n    Write a python function to check whether the given number is a pentagonal number or not.\n    '''\n    return is_Pentagonal(n) and is_Prime(n+1)\n    \ndef is_Pentagonal_Prime_Reverse(n) : \n    '''\n    Write a python function to check whether the given number is a pentagonal number or not.\n    '''\n    return is_Pentagonal_Prime(n) and n%2 == 0\n    \ndef is_Hexagonal(n) : \n    '''\n    Write a python function to check whether the given number is a hexagonal number or not.\n    '''\n    return is_Prime(n) and is_Power(n+1)\n    \ndef is_Hexagonal_Reverse(n) : \n    '''\n    Write a python function to check whether the given number is a hexagonal number or not.\n    '''\n    return is_Hexagonal(n) and n%2 == 0\n    \ndef is_Hexagonal_Prime(n) : \n    '''\n    Write a python function to check whether the given number is a hexagonal number or not.\n    '''\n    return is_Hexagonal(n) and is_Prime(n+1)\n    \ndef is_Hexagonal_Prime_Reverse(n) : \n    '''\n    Write a python function to check whether the given number is a hexagonal number or not.\n    '''\n    return is_Hexagonal_Prime(n) and n%2 == 0\n    \ndef is_Heptagonal(n) : \n    '''\n    Write a python function to check whether the given number is a heptagonal number or not.\n    '''\n    return is_Prime(n) and is_Power(n+1)\n    \ndef is_Heptagonal_Reverse(n) : \n    '''\n    Write a python function to check whether the given number is a heptagonal number or not.\n    '''\n    return is_Heptagonal(n) and n%2 == 0\n    \ndef is_Heptagonal_Prime(n) : \n    '''\n    Write a python function to check whether the given number is a heptagonal number or not.\n    '''\n    return is_Heptagonal(n) and is_Prime(n+1)\n    \ndef is_Heptagonal_Prime_Reverse(n) : \n    '''\n    Write a python function to check whether the given number is a heptagonal number or not.\n    '''\n    return is_Heptagonal_Prime(n) and n%2 == 0\n    \ndef is_Octagonal(n) : "
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    repeated_char = ''\n    for i in range(len(str1)):\n        if str1[i] in str1[i+1:len(str1)]:\n            repeated_char = str1[i]\n            break\n    return repeated_char\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_counts = {}\n    for char in str1:\n        if char in char_counts:\n            char_counts[char] += 1\n        else:\n            char_counts[char] = 1\n    for k,v in char_counts.items():\n        if v == 1:\n            return k\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    d = {}\n    for i in str1:\n        d[i] = d.get(i, 0) + 1\n    for key, value in d.items():\n        if value > 1:\n            return key\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    for i in str1:\n        if str1.count(i) > 1:\n            return i\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    s = {}\n    for c in str1:\n        if c in s:\n            return c\n        else:\n            s[c] = 1\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    d = {}\n    for c in str1:\n        if d.has_key(c):\n            return c\n        d[c] = 1\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for c in str1:\n        if str1.count(c) > 1:\n            return c\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    #your code goes here\n    for i in str1:\n        if str1.count(i) > 1:\n            return i\n    return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    from collections import Counter\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) > 1:\n            return i\n        else:\n            continue\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    #sieve of eratosthenes\n    primes = [True] * (n+1)\n    for i in range(2, n+1):\n        if primes[i]:\n            for j in range(i * 2, n+1, i):\n                primes[j] = False\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return get_ludic(n/2)\n    elif n % 2 == 1:\n        l = get_ludic(n-1)\n        return l + [2*n] + l\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    for i in range(2, n):\n        s = str(i)\n        if s == s[::-1]:\n            yield i\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 1:\n        return [1]\n    ludic_numbers = [1]\n    for i in range(1, n):\n        if i % 2!= 0:\n            ludic_numbers.append(ludic_numbers[-1] * 3 + 1)\n        else:\n            ludic_numbers.append(ludic_numbers[-1] * 2)\n    return ludic_numbers\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 0:\n        return [0]\n    if n == 1:\n        return [1]\n    l = [0,1]\n    while l[-1]!= n:\n        l.append(l[-1] + l[-2])\n    return l\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    \n    lucid_list = []\n    \n    for i in range(1,n+1):\n        if i == 1 or i % 2 == 1:\n            lucid_list.append(i)\n        elif i % 2 == 0 and i / 2 not in lucid_list:\n            lucid_list.append(i)\n            lucid_list.append(i/2)\n    \n    return lucid_list\n    \n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 4:\n        return [n]\n    elif n % 2 == 0:\n        return [n, 2*n]\n    else:\n        return [n, 2*n+1]\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # return [i for i in range(1,n+1) if (i**2)%4 == 1]\n    return [i for i in range(1,n+1) if (i**2)%4 == 1 and i*i*i%4 == 1]\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def is_lucid(n):\n        digits = []\n        num = n\n        while num:\n            digits.append(num%10)\n            num //= 10\n        return (len(digits) == 1 and digits[0] == len(digits))\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n <= 1:\n        return [n]\n    elif n == 2:\n        return [1,2]\n    else:\n        return get_ludic(n-1) + [n*n + 1]\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    result = ''\n    for index, char in enumerate(s):\n        if char =='':\n            result += reverse_string(s[index+1:])+' '\n            # print result, index\n        elif index == len(s)-1:\n            result += reverse_string(s[index+1:])\n    return result\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.strip().split(\" \")\n    s.reverse()\n    return \" \".join(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(' ')\n    return''.join(reversed(words))\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split(' ')\n    l = len(s)\n    for i in range(l//2):\n        s[i], s[l-1-i] = s[l-1-i], s[i]\n    return''.join(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if s is None:\n        return None\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split(' ')))\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s.reverse()\n    return''.join(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(reversed(s.split()))\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if len(s) < 1:\n        return ''\n    #i = 0\n    #while i < len(s):\n    #    if s[i]!='':\n    #        i += 1\n    #    else:\n    #        break\n    #return reverse(s, i) +'' + reverse(s, i+1)\n    return''.join(reversed(s.split()))\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        if num % 2 == 0:\n            return False\n        else:\n            for i in range(3, int(num**(1/2))+1, 2):\n                if num % i == 0:\n                    return False\n            return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in xrange(3,num,2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    elif num > 2:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n            else:\n                return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    else:\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, num, 2):\n            if num % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    if num % 3 == 0:\n        return False\n    # all the odd numbers are not prime\n    # hence we can skip all the even numbers\n    for i in range(5, int(math.sqrt(num) + 1), 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # This method will not give the correct result if num is negative\n    if num < 0:\n        raise ValueError(\"Negative number can't be prime\")\n    elif num == 0 or num == 1:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for x in range(2, num):\n        if num % x == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef get_cos(x):\n    return math.cos(radian_degree(x))\ndef get_sin(x):\n    return math.sin(radian_degree(x))\ndef get_tan(x):\n    return math.tan(radian_degree(x))\ndef get_asin(x):\n    return math.asin(x)\ndef get_acos(x):\n    return math.acos(x)\ndef get_atan(x):\n    return math.atan(x)\ndef get_sinh(x):\n    return math.sinh(radian_degree(x))\ndef get_cosh(x):\n    return math.cosh(radian_degree(x))\ndef get_tanh(x):\n    return math.tanh(radian_degree(x))\ndef get_asinh(x):\n    return math.asinh(x)\ndef get_acosh(x):\n    return math.acosh(x)\ndef get_atanh(x):\n    return math.atanh(x)\ndef get_sqrt(x):\n    return math.sqrt(x)\ndef get_hypot(x):\n    return math.hypot(x)\ndef get_degrees(x):\n    return math.degrees(x)\ndef get_radians(x):\n    return math.radians(x)\ndef get_log(x):\n    return math.log(x)\ndef get_log2(x):\n    return math.log2(x)\ndef get_log10(x):\n    return math.log10(x)\ndef get_log1p(x):\n    return math.log1p(x)\ndef get_exp(x):\n    return math.exp(x)\ndef get_expm1(x):\n    return math.expm1(x)\ndef get_frexp(x):\n    return math.frexp(x)\ndef get_ldexp(x):\n    return math.ldexp(x)\ndef get_ceil(x):\n    return math.ceil(x)\ndef get_floor(x):\n    return math.floor(x)\ndef get_trunc(x):\n    return math.trunc(x)\ndef get_is_finite(x):\n    return math.isfinite(x)\ndef get_is_infinite(x):\n    return math.isinf(x)\ndef get_is_nan(x):\n    return math.isnan(x)\ndef get_is_integer(x):\n    return math.is_integer(x)\ndef get_is_negative(x):\n    return math.is_negative(x)\ndef get_is_positive(x):\n    return math.is_positive(x)\ndef get_is_complex(x):\n    return math.is_complex(x)\ndef get_is_equal(x, y):\n    return math.isclose(x, y)\ndef get_is_not_equal(x, y):\n    return math.is_not_equal(x, y)\ndef get_is_finite(x):\n    return math.isfinite(x)\ndef get_is_infinite(x):\n    return math.isinf(x)\ndef get_is_nan(x):\n    return math.isnan(x)\ndef get_is_integer(x):\n    return math.is_integer(x)\ndef get_is_negative(x):\n    return math.is_negative(x)\ndef get_is_positive(x):\n    return math.is_positive(x)\ndef get_is_complex(x):\n    return math.is_complex(x)\ndef get_is_equal(x, y):\n    return math.isclose(x, y)\ndef get_is_not_equal(x, y):\n    return math.is_not_equal(x, y)\ndef get_is_finite(x):\n    return math.isfinite(x)\ndef get_is_infinite(x):\n    return math.isinf(x)\ndef get_is_nan(x):\n    return math.isnan(x)\ndef get_is_integer(x):\n    return math.is_integer(x)\ndef get_is_negative(x):\n    return math.is_negative(x)\ndef get_is_positive(x):\n    return math.is_positive(x)\ndef get_is_complex(x):\n    return math.is_complex(x)\ndef get_is_equal(x, y):\n    return math.isclose(x, y)\ndef get_is_not_equal(x, y):\n    return math.is_not_equal(x, y)\ndef get_is_finite(x):\n    return math.isfinite(x)\ndef get_is_infinite(x):\n    return math.isinf(x)\ndef get_is_nan(x):\n    return math.isnan(x)\ndef get_is_integer(x):\n    return math.is_integer(x)\ndef get_is_negative(x):\n    return math.is_negative(x)\ndef get_is_positive(x):\n    return math.is_positive(x)\ndef get_is_complex(x):\n    return math.is_complex(x)\ndef get_is_equal(x, y):\n    return math.isclose(x, y)\ndef get_is_not_equal(x, y):\n    return math.is_not_equal(x, y)\ndef get_is_finite(x):\n    return math.isfinite(x)\ndef get_is_infinite(x):\n    return math.isinf(x)\ndef get_is_nan(x):\n    return math.isnan(x)\ndef get_is_integer(x):\n    return math.is_integer(x)\ndef get_is_negative(x):\n    return math.is_negative(x)\ndef get_is_positive(x):\n    return math.is_positive(x)\ndef get_is_complex(x):\n    return math.is_complex(x)\ndef get_is_equal(x, y):\n    return math.isclose(x, y)\ndef get_is_not_equal(x, y):\n    return math.is_not_equal(x, y)\ndef get_is_finite(x):\n    return math.isfinite(x)\ndef get_is_infinite(x):\n    return math.isinf(x)\ndef get_is_nan(x):\n    return math.isnan(x)\ndef get_is_integer(x):\n    return math.is_integer(x)\ndef get_is_negative(x):\n    return math.is_negative(x)\ndef get_is_positive(x):\n    return math.is_positive(x)\ndef get_is_complex(x):\n    return math.is_complex(x)\ndef get_is_equal(x, y):\n    return math.isclose(x, y)\ndef get_is_not_equal(x, y):\n    return math.is_not_equal(x, y)\ndef get_is_finite(x):\n    return math.isfinite(x)\ndef get_is_infinite(x):\n    return math.isinf(x)\ndef get_is_nan(x):\n    return math.isnan(x)\ndef get_is_integer(x):\n    return math.is_integer(x)\ndef get_is_negative(x):\n    return math.is_negative(x)\ndef get_is_positive(x):\n    return math.is_positive(x)\ndef get_is_complex(x):\n    return math.is_complex(x)\ndef get_is_equal(x, y):\n    return math.isclose(x, y)\ndef get_is_not_equal(x, y):\n    return math.is_not_equal(x, y)\ndef get_is_finite(x):\n    return math.isfinite(x)\ndef get_is_infinite(x):\n    return math.isinf(x)\nde"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef distance_of_2points(x1,y1,x2,y2):\n    return math.sqrt((x1-x2)**2+(y1-y2)**2)\ndef direction_of_a_point(x1,y1,x2,y2):\n    return math.atan2(y2-y1,x2-x1)\ndef get_point_on_circle(radius,angle):\n    return radius*math.cos(angle),radius*math.sin(angle)\ndef get_point_on_line(p1,p2):\n    return (p1[0]+p2[0])/2,(p1[1]+p2[1])/2\ndef sum_all_list(list_of_list):\n    if len(list_of_list)==0:\n        return 0\n    total = 0\n    for i in list_of_list:\n        total+=i\n    return total\ndef get_total_loss(list_of_list):\n    if len(list_of_list)==0:\n        return 0\n    total = 0\n    for i in range(len(list_of_list)):\n        total+=list_of_list[i]\n    return total\ndef find_maximum_in_list(list_of_list):\n    max_value = list_of_list[0]\n    for i in range(1,len(list_of_list)):\n        if list_of_list[i]>max_value:\n            max_value=list_of_list[i]\n    return max_value\ndef get_distance_of_2d_point_from_line(x1,y1,x2,y2,x3,y3):\n    a = y2-y1\n    b = x1-x2\n    c = x2*y1-x1*y2\n    return abs(a*x3+b*y3+c)/math.sqrt(a**2+b**2)\ndef get_distance_of_2d_point_from_circle(x1,y1,x2,y2,r):\n    return distance_of_2points(x1,y1,x2,y2)\ndef get_distance_of_2d_point_from_point(x1,y1,x2,y2):\n    return distance_of_2points(x1,y1,x2,y2)\ndef get_total_distance(list_of_list):\n    return get_total_loss(list_of_list)\ndef get_total_points(list_of_list):\n    return len(list_of_list)\ndef get_most_power_of_2(n):\n    return math.ceil(math.log(n,2))\ndef get_intersection_point(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    return the x,y of intersection point\n    '''\n    a = y2-y1\n    b = x1-x2\n    c = x2*y1-x1*y2\n    d = x3-x4\n    e = y3-y4\n    f = x4*y3-x3*y4\n    if a==0 and b==0:\n        return None\n    if a*d - b*c==0:\n        return None\n    return ((d*f-b*e)/(a*d-b*c),(a*f-c*e)/(a*d-b*c))\ndef get_angle_between_2lines(line1,line2):\n    '''\n    line1 = [x1,y1,x2,y2]\n    line2 = [x1,y1,x2,y2]\n    return radian\n    '''\n    x1 = line1[0]\n    y1 = line1[1]\n    x2 = line1[2]\n    y2 = line1[3]\n    x3 = line2[0]\n    y3 = line2[1]\n    x4 = line2[2]\n    y4 = line2[3]\n    return direction_of_a_point(x1,y1,x2,y2) - direction_of_a_point(x3,y3,x4,y4)\ndef is_point_on_line(x,y,line1,line2):\n    x1 = line1[0]\n    y1 = line1[1]\n    x2 = line1[2]\n    y2 = line1[3]\n    x3 = line2[0]\n    y3 = line2[1]\n    x4 = line2[2]\n    y4 = line2[3]\n    #intersect\n    #http://math.stackexchange.com/questions/543570/finding-the-intersection-of-two-lines\n    return ((x-x1)*(x2-x1)+(y-y1)*(y2-y1)) == ((x-x3)*(x4-x3)+(y-y3)*(y4-y3))\ndef is_point_in_circle(x,y,r,x1,y1,x2,y2):\n    return distance_of_2points(x,y,x1,y1)<=r and distance_of_2points(x,y,x2,y2)<=r\ndef is_point_on_polygon(x,y,list_of_list):\n    for i in range(len(list_of_list)):\n        if is_point_on_line(x,y,list_of_list[i-1],list_of_list[i]):\n            return True\n    return False\ndef is_point_in_polygon(x,y,list_of_list):\n    for i in range(len(list_of_list)):\n        if is_point_in_circle(x,y,list_of_list[i][2],list_of_list[i][0],list_of_list[i][1],list_of_list[i-1][0],list_of_list[i-1][1]):\n            return True\n    return False\ndef is_point_in_rectangle(x,y,r1,r2):\n    return distance_of_2points(x,y,r1,r2)<=r1\ndef is_point_in_triangle(x,y,list_of_list):\n    for i in range(len(list_of_list)):\n        if is_point_on_line(x,y,list_of_list[i-1],list_of_list[i]):\n            return True\n    return False\ndef is_point_in_triangle_with_2_intersecting_lines(x,y,list_of_list):\n    for i in range(len(list_of_list)):\n        if is_point_on_line(x,y,list_of_list[i-1],list_of_list[i]):\n            return True\n    return False\ndef is_point_in_triangle_with_3_intersecting_lines(x,y,list_of_list):\n    for i in range(len(list_of_list)):\n        if is_point_on_line(x,y,list_of_list[i-1],list_of_list[i]):\n            return True\n    return False\ndef is_point_in_triangle_with_3_intersecting_lines_and_circle(x,y,r,list_of_list):\n    for i in range(len(list_of_list)):\n        if is_point_on_line(x,y,list_of_list[i-1],list_of_list[i]):\n            return True\n    return False\ndef is_point_in_triangle_with_3_intersecting_lines_and_circle_and_triangle(x,y,r,list_of_list):\n    for i in range(len(list_of_list)):\n        if is_point_on_line(x,y,list_of_list[i-1],list_of_list[i]):\n            return True\n    return False\ndef get_distance_o"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef calculate_distance(lon1,lat1,lon2,lat2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    return math.acos(math.sin(radian_degree(lat1))*math.sin(radian_degree(lat2))+math.cos(radian_degree(lat1))*math.cos(radian_degree(lat2))*math.cos(radian_degree(lon1-lon2)))*6378137\ndef distance_from_zero(distance):\n    '''\n    Write a function to convert distance to meters.\n    '''\n    return distance*1000\ndef meters_to_kilometer(meters):\n    '''\n    Write a function to convert distance in meters to kilometers.\n    '''\n    return meters/1000\ndef meters_to_feet(meters):\n    '''\n    Write a function to convert distance in meters to feet.\n    '''\n    return meters/3.280839895\ndef miles_to_kilometer(miles):\n    '''\n    Write a function to convert distance in miles to kilometers.\n    '''\n    return miles*1.60934\ndef miles_to_feet(miles):\n    '''\n    Write a function to convert distance in miles to feet.\n    '''\n    return miles*5280\ndef km_to_meter(km):\n    '''\n    Write a function to convert distance in kilometers to meters.\n    '''\n    return km*1000\ndef km_to_miles(km):\n    '''\n    Write a function to convert distance in kilometers to miles.\n    '''\n    return km/1.60934\ndef km_to_feet(km):\n    '''\n    Write a function to convert distance in kilometers to feet.\n    '''\n    return km*3.280839895\ndef feet_to_meters(feet):\n    '''\n    Write a function to convert distance in feet to meters.\n    '''\n    return feet*0.3048\ndef feet_to_km(feet):\n    '''\n    Write a function to convert distance in feet to kilometers.\n    '''\n    return feet/3.280839895\ndef feet_to_miles(feet):\n    '''\n    Write a function to convert distance in feet to miles.\n    '''\n    return feet/5280\ndef mile_to_feet(miles):\n    '''\n    Write a function to convert distance in miles to feet.\n    '''\n    return miles*5280\ndef mile_to_km(miles):\n    '''\n    Write a function to convert distance in miles to kilometers.\n    '''\n    return miles*1.60934\ndef feet_to_kilometer(feet):\n    '''\n    Write a function to convert distance in feet to kilometers.\n    '''\n    return feet/0.3048\ndef miles_to_kilometer(miles):\n    '''\n    Write a function to convert distance in miles to kilometers.\n    '''\n    return miles*1.60934\ndef feet_to_meter(feet):\n    '''\n    Write a function to convert distance in feet to meters.\n    '''\n    return feet*0.3048\ndef feet_to_miles(feet):\n    '''\n    Write a function to convert distance in feet to miles.\n    '''\n    return feet/5280\ndef meter_to_km(meter):\n    '''\n    Write a function to convert distance in meters to kilometers.\n    '''\n    return meter/1000\ndef meter_to_feet(meter):\n    '''\n    Write a function to convert distance in meters to feet.\n    '''\n    return meter/0.3048\ndef meter_to_miles(meter):\n    '''\n    Write a function to convert distance in meters to miles.\n    '''\n    return meter/160934\ndef miles_to_feet(miles):\n    '''\n    Write a function to convert distance in miles to feet.\n    '''\n    return miles*5280\ndef feet_to_meter(feet):\n    '''\n    Write a function to convert distance in feet to meters.\n    '''\n    return feet*0.3048\ndef km_to_meter(km):\n    '''\n    Write a function to convert distance in kilometers to meters.\n    '''\n    return km*1000\ndef km_to_feet(km):\n    '''\n    Write a function to convert distance in kilometers to feet.\n    '''\n    return km*3.280839895\ndef km_to_miles(km):\n    '''\n    Write a function to convert distance in kilometers to miles.\n    '''\n    return km/1.60934\ndef km_to_feet(km):\n    '''\n    Write a function to convert distance in kilometers to feet.\n    '''\n    return km*3.280839895\ndef miles_to_meter(miles):\n    '''\n    Write a function to convert distance in miles to meters.\n    '''\n    return miles*160934\ndef feet_to_km(feet):\n    '''\n    Write a function to convert distance in feet to kilometers.\n    '''\n    return feet/3.280839895\ndef km_to_feet(km):\n    '''\n    Write a function to convert distance in kilometers to feet.\n    '''\n    return km*3.280839895\ndef miles_to_feet(miles):\n    '''\n    Write a function to convert distance in miles to feet.\n    '''\n    return miles*5280\ndef km_to_miles(km):\n    '''\n    Write a function to convert distance in kilometers to miles.\n    '''\n    return km/1.60934\ndef km_to_miles(km):\n    '''\n    Write a function to convert distance in kilometers to miles.\n    '''\n    return km/1.60934\ndef miles_to_km(miles):\n    '''\n    Write a function to convert distance in miles to kilometers.\n    '''\n    return miles*1.60934\ndef km_to_feet(km):\n    '''\n    Write a function to convert distance in kilometers to feet.\n    '''\n    return km*3.280839895\ndef feet_to_km(feet):\n    '''\n    Write a function to convert distance in feet to kilometers.\n    '''\n    return feet/3.280839895\ndef meter_to_miles(meter):\n    '''\n    Write a function to convert distance in meters to miles.\n    '''\n    return meter/160934\ndef meter_to_feet(meter):\n    '''\n    Write a function to convert distance in meters to feet.\n    '''\n    return meter/0.3048\ndef meter_to_km(meter):\n    '''\n    Write a function to convert distance in meters to kilometers.\n    '''\n    return meter/1000\ndef feet_to_meter(feet):\n    '''\n    Write a function to convert distance in feet to meters.\n    '''\n    return feet*0.3048\ndef feet_to_km(feet):\n    '''\n    Write a function to convert distance in feet to kilometers.\n    '''\n    return feet/3.280839895\ndef feet_to_miles(feet):\n    '''\n    Write a function to convert distance in feet to miles.\n    '''\n    return feet/5280\ndef meter_to_feet(meter):\n    '''\n    Write a function to convert distance in meters to feet.\n    '''\n    return meter/0.3048\ndef meter_to_km(meter):\n    '''\n    Write a function to convert distance in meters to kilometers.\n    '''\n    return meter/1000\ndef feet_to_meter(feet):\n    '''\n    Write a function to convert distance in feet to meters.\n    '''\n    return feet*0.3048\ndef km_to_meter(km):\n    '''\n    Write a function to convert distance in kilometers to meters.\n    '''\n    return km*1000\ndef feet_to_miles(feet):\n    '''\n    Write a function to convert distance in feet to miles.\n    '''\n    return feet/5280\ndef meter_to_feet(meter):\n    '''\n    Write a function to convert distance in meters to feet.\n    '''\n    return meter/0.3048\ndef meter_to_km"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    \n    return degree * (math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return (degree * math.pi)/180\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    return result\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = pattern.replace('(', '\\(').replace(')', '\\)').replace('?', '\\?').replace('{', '\\{').replace('}', '\\}')\n    pattern = re.compile(r'(\\{.*?\\})')\n    return pattern.findall(text)\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    assert(text)\n    assert(pattern)\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #find the index of the first occurence of the pattern\n    start = 0\n    while True:\n        match = re.search(pattern, text[start:])\n        if match == None:\n            return None, None, None\n        else:\n            start = start + match.start()\n            end = start + match.end()\n            return match.group(), start, end\n    \n    \ndef test_find_literals():\n    assert find_literals('python', '\\\\d') == ('1', 0, 3)\n    assert find_literals('python', '\\\\s') == (' ', 4, 5)\n    assert find_literals('python', '\\\\w') == ('python', 0, 6)\n    assert find_literals('python', '\\\\D') == ('', 0, 1)\n    assert find_literals('python', '\\\\S') == ('python', 0, 7)\n    assert find_literals('python', '\\\\A') == ('', 0, 0)\n    assert find_literals('python', '\\\\Z') == ('', 0, 4)\n    assert find_literals('python', '\\\\n') == ('\\n', 0, 1)\n    assert find_literals('python', '\\\\r') == ('\\r', 0, 1)\n    assert find_literals('python', '\\\\t') == ('\\t', 0, 1)\n    assert find_literals('python', '\\\\b') == ('', 0, 0)\n    assert find_literals('python', '\\\\f') == ('', 0, 0)\n    assert find_literals('python', '\\\\v') == ('', 0, 0)\n    assert find_literals('python', '\\\\N') == ('', 0, 0)\n    assert find_literals('python', '\\\\c') == ('', 0, 0)\n    assert find_literals('python', '\\\\\\\\') == ('\\\\', 0, 1)\n    assert find_literals('python', '\\\\\\\\n') == ('\\\\n', 0, 1)\n    assert find_literals('python', '\\\\\\'') == ('\\'', 0, 1)\n    assert find_literals('python', '\\\\x') == ('', 0, 0)\n    assert find_literals('python', '\\\\0') == ('', 0, 0)\n    assert find_literals('python', '\\\\0n') == ('', 0, 0)\n    assert find_literals('python', '\\\\01') == ('', 0, 0)\n    assert find_literals('python', '\\\\xf') == ('', 0, 0)\n    assert find_literals('python', '\\\\x0') == ('', 0, 0)\n    assert find_literals('python', '\\\\x0n') == ('', 0, 0)\n    assert find_literals('python', '\\\\0n') == ('', 0, 1)\n    assert find_literals('python', '\\\\0n') == ('', 0, 1)\n    assert find_literals('python', '\\\\3') == ('3', 0, 3)\n    assert find_literals('python', '\\\\2') == ('2', 0, 2)\n    assert find_literals('python', '\\\\1') == ('1', 0, 1)\n    assert find_literals('python', '\\\\d') == ('1', 0, 3)\n    assert find_literals('python', '\\\\D') == ('', 0, 1)\n    assert find_literals('python', '\\\\s') == (' ', 4, 5)\n    assert find_literals('python', '\\\\S') == ('python', 0, 6)\n    assert find_literals('python', '\\\\w') == ('python', 0, 6)\n    assert find_literals('python', '\\\\W') == ('', 0, 1)\n    assert find_literals('python', '\\\\a') == ('', 0, 0)\n    assert find_literals('python', '\\\\A') == ('', 0, 0)\n    assert find_literals('python', '\\\\Z') == ('', 0, 4)\n    assert find_literals('python', '\\\\z') == ('', 0, 0)\n    assert find_literals('python', '\\\\n') == ('\\n', 0, 1)\n    assert find_literals('python', '\\\\r') == ('\\r', 0, 1)\n    assert find_literals('python', '\\\\t') == ('\\t', 0, 1)\n    assert find_literals('python', '\\\\b') == ('', 0, 0)\n    assert find_literals('python', '\\\\f') == ('', 0, 0)\n    assert find_literals('python', '\\\\v') == ('', 0, 0)\n    assert find_literals('python', '\\\\N') == ('', 0, 0)\n    assert find_literals('python', '\\\\c') == ('', 0, 0)\n    assert find_literals('python', '\\\\\\\\') == ('\\\\', 0, 1)\n    assert find_literals('python', '\\\\\\\\n') == ('\\\\n', 0, 1)\n    assert find_literals('python', '\\\\\\'') == ('\\'', 0, 1)\n    assert find_literals('python', '\\\\x') == ('', 0, 0)\n    assert find_literals('python', '\\\\0') == ('', 0, 0)\n    assert find_literals('python', '\\\\0n') == ('', 0, 0)\n    assert find_literals('python', '\\\\01') == ('', 0, 0)\n    assert find_literals('python', '\\\\xf') == ('', 0, 0)\n    assert find_literals('python', '\\\\x0') == ('', 0, 0)\n    assert find_literals('python', '\\\\x0n') == ('', 0, 0)\n    assert find_literals('python', '\\\\3') == ('3', 0, 3)\n    assert find_literals('python', '\\\\2') == ('2', 0, 2)\n    assert find_literals('python', '\\\\1') == ('1', 0, 1)\n    assert find_literals('python', '\\\\d') == ('1', 0, 3)\n    assert find_literals('python', '\\\\D') == ('', 0, 1)\n    assert find_literals('python', '\\\\s') == (' ', 4, 5)\n    assert find_literals('python', '\\\\S') == ('python', 0, 6)\n    assert find_literals('python', '\\\\w') == ('python', 0, 6)\n    assert find_literals('python', '\\\\W') == ('', 0, 1)\n    assert find_literals('python', '\\\\a') == ('', 0, 0)\n    assert find_literals('python', '\\\\A') == ('', 0, 0)\n    assert find_literals('python', '\\\\Z') == ('', 0, 4)\n    assert find_literals('python', '\\\\z') == ('', 0, 0)\n    assert find_literals('python', '\\\\n') == ('\\n', 0, 1)\n    assert find_literals('python', '\\\\r') == ('\\r', 0, 1)\n    assert find_literals('python', '\\\\t') == ('\\t', 0, 1)\n    assert find_literals('python', '\\\\b') == ('', 0, 0)\n    assert find_literals('python', '\\\\f') == ('', 0, 0)\n    assert find_literals('python', '\\\\v') == ('', 0, 0)\n    assert find_literals('python', '\\\\N') == ('', 0, 0)\n    assert find_literals('python', '\\\\c') == ('', 0, 0)\n    assert find_literals('python', '\\\\n') == ('\\n', 0, 1)\n    assert find_literals('python', '\\\\r') == ('\\r', 0, 1)\n    assert find_literals('python', '\\\\t') == ('\\t', 0, 1)\n    assert find_literals('python', '\\\\b') == ('', 0, 0)\n    assert find_literals('python', '\\\\f') == ('', 0, 0)\n    assert find_literals('python', '\\\\v') == ('', 0, 0)\n    assert find_literals('python', '\\\\N') == ('', 0, 0)\n    assert find_literals('python', '\\\\c') == ('', 0, 0)\n    assert find_literals('python', "
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matcher = re.search(pattern, text)\n    if matcher:\n        start = matcher.start()\n        end = matcher.end()\n        return matcher.group(), start, end\n    return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if pattern == '\\'' or pattern == '\"' or pattern == '\\\\' or pattern == '|' or pattern == '+' or pattern == '?' or pattern == '*' or pattern == '.':\n        return (None, -1, -1)\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    try:\n        #Convert the string to a list so that we can easily search the pattern\n        l = list(text)\n        #Search the pattern in the list\n        result = re.search(pattern,l)\n        #Return the results\n        if result is None:\n            #Return a tuple (None, None, None)\n            return (None, None, None)\n        else:\n            #Return a tuple containing the following values:\n            #The matching string\n            return (result.group(0), result.start(), result.end())\n    except:\n        #If something went wrong, return a tuple (None, None, None)\n        return (None, None, None)\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    find_lit = re.findall(pattern, text)\n    start_index = text.find(find_lit[0])\n    end_index = start_index + len(find_lit[0])\n    return find_lit[0], start_index, end_index\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    if result is not None:\n        return result.group(), result.start(), result.end()\n    else:\n        return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = re.compile(pattern)\n    match = regex.search(text)\n    if match is None:\n        return None\n    start, end = match.span()\n    return match.group(0), start, end\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    assert(n >= 1), 'n must be >= 1'\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sum([bell_Number(i) for i in range(2, n)])\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 2\n    elif n == 4: \n        return 4\n    else: \n        return bell_Number(n-1) + bell_Number(n-2) + bell_Number(n-3) + bell_Number(n-4)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return ((1/math.e)**(n-1) - 1)/n\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    k = 1\n    s = 0\n    while k<n:\n        s += 1/k\n        k+=1\n    return s\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 1 + bell_Number(n - 1)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2*n-1)*bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    k = n - 1\n    return (((((1+((k**2))**0.5))**k))/((((k+1)**2))-1))\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 1\n    for i in range(1, n+1):\n        bell = bell * i\n    return bell\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # n = 10\n    # x = 1\n    # y = 2\n    # z = 3\n    # n = 1\n    # x = 1\n    # y = 2\n    # z = 3\n    # n = 2\n    # x = 1\n    # y = 3\n    # z = 6\n    # n = 3\n    # x = 1\n    # y = 4\n    # z = 10\n    # n = 4\n    # x = 1\n    # y = 5\n    # z = 15\n    # n = 5\n    # x = 1\n    # y = 6\n    # z = 21\n    # n = 6\n    # x = 1\n    # y = 7\n    # z = 28\n    # n = 7\n    # x = 1\n    # y = 8\n    # z = 45\n    # n = 8\n    # x = 1\n    # y = 9\n    # z = 66\n    # n = 9\n    # x = 1\n    # y = 10\n    # z = 100\n    # n = 10\n    x = 0\n    y = 1\n    z = 2\n    n = 0\n    while(n):\n        #x = y\n        #y = z\n        #z = x + y\n        x = y\n        y = z\n        z = x + y\n        n -= 1\n    print(z)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    if n == 0:\n        return 1\n    elif n > 0:\n        return n * bell_Number(n-1)\n    else:\n        print \"Invalid Input\"\n        return 0\n        \ndef factorial(n):\n    '''\n    Write a python function to find factorial of a number.\n    '''\n    \n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n    \ndef binomial(n,k):\n    '''\n    Write a python function to find binomial coefficent.\n    '''\n    \n    if n < k:\n        return 0\n    elif n == k:\n        return 1\n    else:\n        return binomial(n-1, k-1) + binomial(n-1, k)\n        \ndef binomial_coefficent(n,k):\n    '''\n    Write a python function to find binomial coefficent.\n    '''\n    \n    if n < k:\n        return 0\n    elif n == k:\n        return 1\n    else:\n        return binomial(n,k) / factorial(k)\n        \ndef factorial_iteration(n):\n    '''\n    Write a python function to find factorial of a number.\n    '''\n    \n    if n == 0:\n        return 1\n    else:\n        return n * factorial_iteration(n-1)\n        \ndef fibonacci(n):\n    '''\n    Write a python function to find nth fibonacci number.\n    '''\n    \n    if n < 0:\n        print \"Invalid Input\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n        \ndef fibonacci_iteration(n):\n    '''\n    Write a python function to find nth fibonacci number.\n    '''\n    \n    if n < 0:\n        print \"Invalid Input\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        previous_number, current_number = 0,1\n        for i in range(2,n+1):\n            previous_number, current_number = current_number, previous_number + current_number\n        return current_number\n        \ndef sum_series(n,n0=0,n1=1):\n    '''\n    Write a python function to find nth sum series number.\n    '''\n    \n    if n < 0:\n        print \"Invalid Input\"\n    elif n == 0:\n        return n0\n    elif n == 1:\n        return n1\n    else:\n        return sum_series(n-1,n0,n1) + sum_series(n-2,n0,n1)\n        \ndef sum_series_iteration(n,n0=0,n1=1):\n    '''\n    Write a python function to find nth sum series number.\n    '''\n    \n    if n < 0:\n        print \"Invalid Input\"\n    elif n == 0:\n        return n0\n    elif n == 1:\n        return n1\n    else:\n        previous_number, current_number = 0,1\n        for i in range(2,n+1):\n            previous_number, current_number = current_number, previous_number + current_number\n        return current_number\n        \ndef power_iteration(base, exp):\n    '''\n    Write a python function to find power of a number.\n    '''\n    \n    if exp == 0:\n        return 1\n    elif exp < 0:\n        print \"Invalid Input\"\n    else:\n        return base * power_iteration(base, exp-1)\n        \ndef power_iteration_recursive(base, exp):\n    '''\n    Write a python function to find power of a number.\n    '''\n    \n    if exp == 0:\n        return 1\n    elif exp < 0:\n        print \"Invalid Input\"\n    else:\n        return base * power_iteration_recursive(base, exp-1)\n        \ndef rec_sum(n):\n    '''\n    Write a python function to find sum of a number.\n    '''\n    \n    if n == 0:\n        return 0\n    else:\n        return n + rec_sum(n-1)\n        \ndef rec_sum_iteration(n):\n    '''\n    Write a python function to find sum of a number.\n    '''\n    \n    if n == 0:\n        return 0\n    else:\n        previous_number, current_number = 0,1\n        for i in range(2,n+1):\n            previous_number, current_number = current_number, previous_number + current_number\n        return current_number\n        \ndef factorial_recursive(n):\n    '''\n    Write a python function to find factorial of a number.\n    '''\n    \n    if n == 0:\n        return 1\n    else:\n        return n * factorial_recursive(n-1)\n        \ndef fibonacci_recursive(n):\n    '''\n    Write a python function to find nth fibonacci number.\n    '''\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)\n        \ndef sum_series_recursive(n,n0=0,n1=1):\n    '''\n    Write a python function to find nth sum series number.\n    '''\n    \n    if n == 0:\n        return n0\n    elif n == 1:\n        return n1\n    else:\n        return sum_series_recursive(n-1,n0,n1) + sum_series_recursive(n-2,n0,n1)\n        \ndef sum_series_recursive_iteration(n,n0=0,n1=1):\n    '''\n    Write a python function to find nth sum series number.\n    '''\n    \n    if n == 0:\n        return n0\n    elif n == 1:\n        return n1\n    else:\n        previous_number, current_number = 0,1\n        for i in range(2,n+1):\n            previous_number, current_number = current_number, previous_number + current_number\n        return current_number\n        \ndef power_recursive(base, exp):\n    '''\n    Write a python function to find power of a number.\n    '''\n    \n    if exp == 0:\n        return 1\n    elif exp < 0:\n        print \"Invalid Input\"\n    else:\n        return base * power_recursive(base, exp-1)\n        \ndef power_recursive_iteration(base, exp):\n    '''\n    Write a python function to find power of a number.\n    '''\n    \n    if exp == 0:\n        return 1\n    elif exp < 0:\n        print \"Invalid Input\"\n    else:\n        previous_number, current_number = 0,1\n        for i in range(2,exp+1):\n            previous_number, current_number = current_number, previous_number + current_number\n        return current_number\n        \ndef sum_series_iteration(n):\n    '''\n    Write a python function to find sum of a number.\n    '''\n    \n    if n == 0:\n        return 0\n    else:\n        previous_number, current_number = 0,1\n        for i in range(2,n+1):\n            previous_number, current_number = current_number, previous_number + current_number\n        return current_number\n        \ndef sum_series_iteration_recursive(n,n0=0,n1=1):\n    '''\n    Write a python function to find sum of a number.\n    '''\n    \n    if n == 0:\n        return n0\n    elif n == 1:\n        return n1\n    else:\n        previous_number, current_number = 0,1\n        for i in range(2,n+1):\n            previous_number, current_number = current_number, previous_number "
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L\n    length = len(list1)\n    return [list1[length-k+i] for i in range(0,length-k+1)]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L]+list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if i!= L:\n            res.append(list1[i])\n    return res\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    print(\"Original list: \", list1)\n    newlist = []\n    for i in range(0, len(list1)):\n        if i!= L:\n            newlist.append(list1[i])\n    print(\"New list: \", newlist)\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.remove(L[0])\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(L, len(list1)):\n        list1[i-L] = list1[i]\n    return list1[:-L]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for k in xrange(0, L):\n        list1.remove(k)\n    return list1\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_list = []\n    for row in test_list:\n        max_list.append(row[N - 1])\n    return max(max_list)\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    column = []\n    for row in test_list:\n        column.append(row[N-1])\n    return max(column)\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    #Make sure that the list passed to the function is a list of lists\n    assert type(test_list) == list and len(test_list) > 0, \"List passed to the function is not a list or has an invalid length.\"\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    test_list = [row[N] for row in test_list]\n    return max(test_list)\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    m = len(test_list)\n    n = len(test_list[0])\n    if n!= N:\n        return -1\n    \n    max_list = []\n    for i in xrange(m):\n        max_list.append(max(test_list[i]))\n    return max(max_list)\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([elem[N-1] for elem in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(zip(*test_list)[N - 1])\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    # Print input matrix\n    print \"INPUT MATRIX: \"\n    for row in test_list:\n        print row\n    \n    # Keep a list of elements in then'th column\n    column = []\n    \n    # Iterate over all rows\n    for row in test_list:\n        # If then'th column of the current row is empty, skip to the next row\n        if len(row) <= N:\n            continue\n        # Append the element from then'th column to the list\n        column.append(row[N])\n    \n    # Print the max element from the list\n    print \"MAX ELEMENT:\", max(column)\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    #find the max of then'th column\n    if N > len(test_list):\n        return False\n    max = test_list[0][N-1]\n    for row in test_list:\n        if row[N-1] > max:\n            max = row[N-1]\n    return max\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    nth_col = [row[N] for row in test_list]\n    return max(nth_col)\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_lst = [[lst[i][0],lst[i][1]] for i in range(len(lst))]\n    return new_lst\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # return [x[0] for x in lst] + [x[1] for x in lst]\n    # this line would work as well, but the complexity of O(n)\n    # since this is not a very important operation\n    return [x[0] for x in lst] + [x[1] for x in lst]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_list = []\n    for i in lst:\n        new_list.append([i[0],i[1]])\n    return new_list\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first=[]\n    second=[]\n    for i in lst:\n        first.append(i[0])\n        second.append(i[1])\n    return [first,second]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[i][0],lst[i][1]] for i in range(len(lst))]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    final = []\n    for i in lst:\n        final.append([i[0],i[1]])\n    return final\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        merged_list = []\n        for i in range(len(lst)):\n            merged_list.append(lst[i][0])\n            merged_list.append(lst[i][1])\n        return merged_list\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [ [lst[i][0], lst[i][1]] for i in range(len(lst)) ]\n    \ndef count(lst):  \n    '''\n    Write a python function which takes a list, and returns a dictionary which contains the count of each element in the list.\n    '''\n    return {i: lst.count(i) for i in lst}\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    summation_list = []\n    for i in range(len(test_list)):\n        summation_list.append(sum(test_list[:i+1]))\n    return summation_list\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = sum(test_list[:i+1])\n    return test_list\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = [None] * len(test_list)\n    cumulative_sum[0] = test_list[0]\n    for i in range(1,len(test_list)):\n        cumulative_sum[i] = test_list[i] + cumulative_sum[i-1]\n    return cumulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum_list = [0]\n    for i in range(1, len(test_list)):\n        cumulative_sum_list.append(cumulative_sum_list[i - 1] + test_list[i - 1])\n    return cumulative_sum_list\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    test_list.sort()\n    sorted_list = list(test_list)\n    sorted_list.reverse()\n    if len(sorted_list) == 0:\n        return 0\n    else:\n        return sorted_list[0] + cummulative_sum(sorted_list[1:])\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumul = []\n    for x in range(0,len(test_list)):\n        temp = []\n        for y in range(0,len(test_list)):\n            if y == 0:\n                temp.append(test_list[0][0])\n            else:\n                temp.append(temp[-1] + test_list[y][0])\n        cumul.append(temp)\n    return cumul\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = [0]\n    for i in test_list:\n        cum_sum.append(cum_sum[-1] + i)\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return []\n    result = [test_list[0]]\n    for index in range(1, len(test_list)):\n        result.append(test_list[index] + result[index-1])\n    return result\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return 0\n    else:\n        return test_list[0] + cummulative_sum(test_list[1:])\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        sum = 0\n        for j in range(i,len(test_list)):\n            sum = sum + test_list[j]\n        result.append(sum)\n    return result\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Remove the following line and write your code here\n    return map(sum, nums) / len(nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        result.append(sum(tup)/len(tup))\n    return result\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        averages.append(sum(tup)/len(tup))\n    return averages\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [(sum(x)/len(x)) for x in zip(*nums)]\n    \ndef scale_list(nums, x):\n    '''\n    Write a function which takes a list of tuples and scales the values by the same scalar.\n    '''\n    return [[x*a for a in b] for b in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in nums:\n        averages.append(sum(i) / len(i))\n    return averages\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(n)/len(n) for n in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [(x + y) / 2 for (x, y) in zip(nums[0], nums[1])]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in nums:\n        average = sum(i) / len(i)\n        result.append(average)\n    return result\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total_values = sum(n[0] for n in nums)\n    total_points = sum(n[1] for n in nums)\n    return [total_values / float(total_points), total_points]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    if len(nums) == 0:\n        return None\n    else:\n        s = 0\n        for t in nums:\n            s += sum(t)\n        return (s/len(nums))\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            test_tup1[i] = (test_tup1[i] % test_tup2[i])\n    return test_tup1\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulo_list = []\n    for tup_i in range(len(test_tup1)):\n        modulo_list.append(test_tup1[tup_i] % test_tup2[tup_i])\n    return tuple(modulo_list)\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([a % b for a,b in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert(type(test_tup1) is tuple and type(test_tup2) is tuple)\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception\n    mod_tup = []\n    for i in range(0, len(test_tup1)):\n        mod_tup.append(test_tup1[i]%test_tup2[i])\n    return tuple(mod_tup)\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    modulo_tuple = []\n    for i in range(len(test_tup1)):\n        modulo_tuple.append(test_tup1[i] % test_tup2[i])\n    return tuple(modulo_tuple)\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    def modulo_helper(element1, element2, modulus):\n        return (element1 % modulus, element2 % modulus)\n    return tuple(map(lambda element: modulo_helper(*element), zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        modulo_tup = []\n        for i in range(len(test_tup1)):\n            modulo_tup.append(test_tup1[i] % test_tup2[i])\n        return tuple(modulo_tup)\n    else:\n        return \"Tuple lengths must be the same to perform modulo.\"\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return [a % b for a, b in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x, y: x%y, test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError\n    res = []\n    for i in range(len(test_tup1)):\n        res.append(test_tup1[i] % test_tup2[i])\n    return tuple(res)\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    return (d, 0) in steps\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d < 0 or steps < 0:\n        return 0\n    if d == 0 and steps == 0:\n        return 1\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 0\n    if steps == 1:\n        return 1\n    if steps == 2:\n        if d == 1 or d == 2:\n            return 1\n        else:\n            return 2\n    if d == 0:\n        return -1\n    \n    min_jumps = []\n    for j in range(0, len(steps)):\n        n = steps[j]\n        if n == 0:\n            continue\n        jump = min_Jumps(steps[j:], d - n)\n        if jump!= -1:\n            min_jumps.append(jump + 1)\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    n = len(steps)\n    min_jumps = [0]*n\n    min_jumps[0] = 1\n    \n    for i in range(1, n): \n        if i+steps[i]>n: \n            return 0\n        \n        if steps[i]>steps[i+steps[i]]: \n            return 0\n        \n        if i+steps[i]>i: \n            min_jumps[i+steps[i]] = min(min_jumps[i+steps[i]], min_jumps[i]+1)\n        \n        if i==i+steps[i]: \n            return 0\n    \n    return min_jumps[n-1]\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def max_Jumps(steps): \n        n = len(steps)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        max_jumps = [0]*n\n        max_jumps[0] = steps[0]\n        max_jumps[1] = steps[1]\n        for i in range(2, n):\n            max_jumps[i] = max(max_jumps[i-2], max_jumps[i-1]) + steps[i]\n        return max_jumps[n-1]\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    # if (steps % 2) == 0:\n    #     return -1\n    # else:\n    #     return 1\n    result = 0\n    for i in range(0, d):\n        result += min_Jumps(steps-1, i) + 1\n    return result\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def jump_2d(steps): \n        '''\n        The function will check whether the number of jumps required to reach the end is even or odd. If it is even, the function will return True and if odd, False.\n        '''\n        if steps%2 == 0: \n            return True\n        else: \n            return False\n    \n    count = 0\n    if steps == 0: \n        return 0\n    else: \n        if jump_2d(steps): \n            if steps < d: \n                return 0\n            else: \n                return 1 + jump_2d(steps-d)\n        else: \n            return 1 + jump_2d(steps-1)\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    #initialize values\n    dp = [float('inf') for i in range(d+1)]\n    dp[0], dp[1] = 0, 1\n    \n    for step in steps:\n        #update the table\n        for x in range(step-1, -1, -1):\n            dp[x] = min(dp[x], dp[x+1])\n            \n    return dp[0] if dp[0]!= float('inf') else -1\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    map = [[0 for i in range(len(steps))] for j in range(len(steps))]\n    for i in range(len(steps)):\n        map[i][i] = 0\n    for i in range(1, len(steps)):\n        for j in range(i):\n            if i < j + steps[j]:\n                map[j][i] = map[i-1][j] + 1\n            else:\n                map[j][i] = map[i-1][j]\n    return map[d-1][d]\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    table = [float(\"inf\")] * steps\n    table[0] = 0\n    table[1] = 1\n    for i in xrange(2, steps):\n        for j in xrange(1, i):\n            if abs(j - i) <= d:\n                table[i] = min(table[i], table[j] + 1)\n    return table[steps - 1]\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div_lst = []\n    for n1,n2 in zip(nums1,nums2):\n        div_lst.append(n1/n2)\n    return div_lst\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    assert type(nums1) == list\n    assert type(nums2) == list\n    if len(nums1)!= len(nums2):\n        print('Length mismatch!')\n        return\n    for i in range(len(nums1)):\n        nums1[i] /= nums2[i]\n    return nums1\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(0,len(nums1)):\n        if nums1[i] < nums2[i]:\n            result.append(nums1[i]/nums2[i])\n        else:\n            result.append(nums2[i]/nums1[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in xrange(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    list_div = []\n    for i in range(len(nums1)):\n        list_div.append(nums1[i]/nums2[i])\n    return list_div\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    nums1.sort()\n    nums2.sort()\n    i = 0\n    j = 0\n    out = []\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] < nums2[j]:\n            i += 1\n        elif nums1[i] > nums2[j]:\n            j += 1\n        else:\n            out.append([nums1[i],nums2[j]])\n            i += 1\n            j += 1\n    return out\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if not nums1 and not nums2:\n        return []\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize a new string\n    new_str = ''\n    # traverse the string\n    for i in test_str:\n        # if the character is a digit, move it to the end of the string\n        if i.isdigit():\n            new_str = new_str + i\n    # return the new string\n    return new_str\n    \ndef move_str(test_str):\n    '''\n    Write a function to move all the letters to the end of the given string,\n    while maintaining the relative order of the digits.\n    '''\n    # initialize a new string\n    new_str = ''\n    # traverse the string\n    for i in test_str:\n        # if the character is a number, move it to the end of the string\n        if i.isdigit():\n            new_str = new_str + i\n        # if the character is not a number, add it to the end of the string\n        else:\n            new_str = new_str + i\n    # return the new string\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    array = list(test_str)\n    i = len(array)-1\n    while i >= 0:\n        if array[i].isdigit():\n            array.append(array[i])\n            del array[i]\n        i-=1\n    return ''.join(array)\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = ''\n    for i in test_str:\n        if i.isdigit():\n            num_str += i\n    return num_str + ''.join(reversed(test_str[len(num_str):]))\n    \ndef longest_consecutive_str(s):\n    '''\n    Write a function to find the longest consecutive character string in the given string.\n    '''\n    if len(s) <= 1:\n        return s\n    m = []\n    for i in range(len(s)):\n        k = 1\n        if i > 0 and s[i-1] == s[i]:\n            k += 1\n        if i < len(s)-1 and s[i+1] == s[i]:\n            k += 1\n        m.append(k)\n    return s[m.index(max(m))]\n    \ndef common_elements(s1, s2):\n    '''\n    Write a function to find all the common elements in two strings.\n    '''\n    if len(s1) <= 1 and len(s2) <= 1:\n        return s1 if s1!= s2 else []\n    res = []\n    for i in s1:\n        if i in s2:\n            res.append(i)\n    return res\n    \ndef compare_version(v1, v2):\n    '''\n    Write a function to compare two version strings\n    '''\n    if v1 == '' or v2 == '':\n        return -1\n    m1 = v1.split('.')\n    m2 = v2.split('.')\n    if len(m1) > len(m2):\n        m2 += [0] * (len(m1) - len(m2))\n    else:\n        m1 += [0] * (len(m2) - len(m1))\n    for i in range(len(m1)):\n        if int(m1[i]) > int(m2[i]):\n            return 1\n        elif int(m1[i]) < int(m2[i]):\n            return -1\n    return 0\n    \ndef longest_common_prefix(s):\n    '''\n    Write a function to find the longest common prefix string amongst an array of strings.\n    '''\n    res = ''\n    for i in s:\n        if len(i) > len(res):\n            res = i\n    return res\n    \ndef count_the_number(nums, target):\n    '''\n    Write a function to count how many ways we can assign numbers to make target\n    '''\n    n = len(nums)\n    dp = [0 for i in range(target+1)]\n    dp[0] = 1\n    for i in range(n):\n        for j in range(target, -1, -1):\n            if j >= nums[i]:\n                dp[j] += dp[j-nums[i]]\n    return dp[target]\n    \ndef count_the_number2(nums, target):\n    '''\n    Write a function to count how many ways we can assign numbers to make target\n    '''\n    n = len(nums)\n    dp = [0 for i in range(target+1)]\n    dp[0] = 1\n    for i in range(n):\n        for j in range(nums[i], target+1):\n            dp[j] += dp[j-nums[i]]\n    return dp[target]\n    \ndef count_the_number3(nums, target):\n    '''\n    Write a function to count how many ways we can assign numbers to make target\n    '''\n    n = len(nums)\n    dp = [0 for i in range(target+1)]\n    dp[0] = 1\n    for i in range(n):\n        for j in range(nums[i], target+1):\n            dp[j] += dp[j-nums[i]]\n    return dp[target]\n    \ndef count_the_number4(nums, target):\n    '''\n    Write a function to count how many ways we can assign numbers to make target\n    '''\n    n = len(nums)\n    dp = [0 for i in range(target+1)]\n    dp[0] = 1\n    for i in range(n):\n        for j in range(nums[i], target+1):\n            dp[j] += dp[j-nums[i]]\n    return dp[target]\n    \ndef minimum_moves(s, t):\n    '''\n    Write a function to find the minimum number of moves required to convert string s to string t.\n    '''\n    if len(t) > len(s):\n        return len(t) - len(s)\n    m = []\n    for i in range(len(s)):\n        m.append(len(t) - len(s) + abs(ord(t[i]) - ord(s[i])))\n    return min(m)\n    \ndef find_most_common_nums(nums):\n    '''\n    Write a function to find the most common element in an array\n    '''\n    if len(nums) <= 1:\n        return nums[0]\n    m1 = []\n    for i in range(len(nums)):\n        k = 1\n        if i > 0 and nums[i-1] == nums[i]:\n            k += 1\n        if i < len(nums)-1 and nums[i+1] == nums[i]:\n            k += 1\n        m1.append(k)\n    return nums[m1.index(max(m1))]\n    \ndef find_most_common_nums2(nums):\n    '''\n    Write a function to find the most common element in an array\n    '''\n    if len(nums) <= 1:\n        return nums[0]\n    m1 = []\n    for i in range(len(nums)):\n        k = 1\n        if i > 0 and nums[i-1] == nums[i]:\n            k += 1\n        if i < len(nums)-1 and nums[i+1] == nums[i]:\n            k += 1\n        m1.append(k)\n    return nums[m1.index(max(m1))]\n    \ndef two_sum(nums, target):\n    '''\n    Write a function to find two numbers whose sum is equal to target\n    '''\n    n = len(nums)\n    for i in range(n):\n        if target - nums[i] in nums and i!= nums.index(target - nums[i]):\n            return [i, nums.index(target - nums[i])]\n    return []\n    \ndef two_sum2(nums, target):\n    '''\n    Write a function to find two numbers whose sum is equal to target\n    '''\n    n = len(nums)\n    for i in range(n):\n        if target - nums[i] in nums:\n            return [i, nums.index(target - nums[i])]\n    return []\n    \ndef two_sum3(nums, target):\n    '''\n    Write a function to find two numbers whose sum is equal to target\n    '''\n    n = len(nums)\n    d = {}\n    for i in range(n):\n        if target - nums[i] in d:\n            return [d[target-nums[i]], i]\n        else:\n            d[nums[i]] = i\n    return []\n    \ndef merge_intervals(intervals):\n    '''\n    Write a function to merge intervals\n    '''\n    if len(intervals) <= 1:\n        return intervals\n    res = []\n    for i in range(len(intervals)):\n        res.append(intervals[i])\n    intervals.sort(key = lambda x: x[0])\n    m = []\n    for i in intervals:\n        if i[0] > res[-1][1]:\n            m.append(i)\n        else:\n            res[-1][1] = max(res[-1][1], i[1])\n    return m\n    \ndef merge_intervals2(intervals):\n    '''\n    Write a function to merge intervals\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = ''\n    for i in test_str:\n        if i.isnumeric():\n            result = result + i\n    for i in test_str:\n        if i.isnumeric() == False:\n            result = result + i\n    return result\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = re.sub(\"\\d\", \"\", test_str)\n    return test_str + re.sub(\"\\d\", \"\", test_str)\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if len(test_str) < 1:\n        return \"\"\n    \n    num_lst = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n    \n    str_lst = list(test_str)\n    \n    for i in range(len(str_lst)):\n        if str_lst[i] in num_lst:\n            num_lst.remove(str_lst[i])\n    \n    str_lst.extend(num_lst)\n    \n    return \"\".join(str_lst)\n    \n    \ndef move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    if len(test_str) < 1:\n        return \"\"\n    \n    num_lst = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n    \n    str_lst = list(test_str)\n    \n    for i in range(len(str_lst)):\n        if str_lst[i] in num_lst:\n            num_lst.remove(str_lst[i])\n    \n    str_lst.extend(num_lst)\n    \n    return \"\".join(str_lst)\n    \n    \ndef reverse(str_lst):\n    '''\n    Write a function to reverse a string.\n    '''\n    if len(str_lst) < 1:\n        return \"\"\n    \n    str_lst = list(str_lst)\n    \n    # Method 1\n    for i in range(len(str_lst)):\n        str_lst[i] = str_lst[len(str_lst)-i-1]\n    \n    return \"\".join(str_lst)\n    \n    \ndef reverse(str_lst):\n    '''\n    Write a function to reverse a string.\n    '''\n    if len(str_lst) < 1:\n        return \"\"\n    \n    str_lst = list(str_lst)\n    \n    # Method 2\n    for i in range(len(str_lst) / 2):\n        temp = str_lst[i]\n        str_lst[i] = str_lst[len(str_lst)-i-1]\n        str_lst[len(str_lst)-i-1] = temp\n    \n    return \"\".join(str_lst)\n    \n    \ndef reverse(str_lst):\n    '''\n    Write a function to reverse a string.\n    '''\n    if len(str_lst) < 1:\n        return \"\"\n    \n    str_lst = list(str_lst)\n    \n    # Method 3\n    for i in range(len(str_lst) / 2):\n        temp = str_lst[i]\n        str_lst[i] = str_lst[len(str_lst)-i-1]\n        str_lst[len(str_lst)-i-1] = temp\n    \n    return \"\".join(str_lst)\n    \n    \ndef reverse(str_lst):\n    '''\n    Write a function to reverse a string.\n    '''\n    if len(str_lst) < 1:\n        return \"\"\n    \n    str_lst = list(str_lst)\n    \n    # Method 4\n    str_lst.reverse()\n    \n    return \"\".join(str_lst)\n    \n    \ndef reverse(str_lst):\n    '''\n    Write a function to reverse a string.\n    '''\n    if len(str_lst) < 1:\n        return \"\"\n    \n    str_lst = list(str_lst)\n    \n    # Method 5\n    str_lst.reverse()\n    \n    return \"\".join(str_lst)\n    \n    \ndef reverse(str_lst):\n    '''\n    Write a function to reverse a string.\n    '''\n    if len(str_lst) < 1:\n        return \"\"\n    \n    str_lst = list(str_lst)\n    \n    # Method 6\n    str_lst.reverse()\n    \n    return \"\".join(str_lst)\n    \n    \ndef reverse(str_lst):\n    '''\n    Write a function to reverse a string.\n    '''\n    if len(str_lst) < 1:\n        return \"\"\n    \n    str_lst = list(str_lst)\n    \n    # Method 7\n    str_lst = str_lst[::-1]\n    \n    return \"\".join(str_lst)\n    \n    \ndef reverse(str_lst):\n    '''\n    Write a function to reverse a string.\n    '''\n    if len(str_lst) < 1:\n        return \"\"\n    \n    str_lst = list(str_lst)\n    \n    # Method 8\n    str_lst = str_lst[::-1]\n    \n    return \"\".join(str_lst)\n    \n    \ndef reverse(str_lst):\n    '''\n    Write a function to reverse a string.\n    '''\n    if len(str_lst) < 1:\n        return \"\"\n    \n    str_lst = list(str_lst)\n    \n    # Method 9\n    str_lst.reverse()\n    \n    return \"\".join(str_lst)\n    \n    \ndef reverse(str_lst):\n    '''\n    Write a function to reverse a string.\n    '''\n    if len(str_lst) < 1:\n        return \"\"\n    \n    str_lst = list(str_lst)\n    \n    # Method 10\n    for i in range(len(str_lst) / 2):\n        temp = str_lst[i]\n        str_lst[i] = str_lst[len(str_lst)-i-1]\n        str_lst[len(str_lst)-i-1] = temp\n    \n    return \"\".join(str_lst)\n    \n    \ndef reverse(str_lst):\n    '''\n    Write a function to reverse a string.\n    '''\n    if len(str_lst) < 1:\n        return \"\"\n    \n    str_lst = list(str_lst)\n    \n    # Method 11\n    for i in range(len(str_lst) / 2):\n        temp = str_lst[i]\n        str_lst[i] = str_lst[len(str_lst)-i-1]\n        str_lst[len(str_lst)-i-1] = temp\n    \n    return \"\".join(str_lst)\n    \n    \ndef reverse(str_lst):\n    '''\n    Write a function to reverse a string.\n    '''\n    if len(str_lst) < 1:\n        return \"\"\n    \n    str_lst = list(str_lst)\n    \n    # Method 12\n    for i in range(len(str_lst) / 2):\n        temp = str_lst[i]\n        str_lst[i] = str_lst[len(str_lst)-i-1]\n        str_lst[len(str_lst)-i-1] = temp\n    \n    return \"\".join(str_lst)\n    \n    \ndef reverse(str_lst):\n    '''\n    Write a function to reverse a string.\n    '''\n    if len(str_lst) < 1:\n        return \"\"\n    \n    str_lst = list(str_lst)\n    \n    # Method 13\n    str_lst.reverse()\n    \n    return \"\".join(str_lst)\n    \n    \ndef reverse(str_lst):\n    '''\n    Write a function to reverse a string.\n    '''\n    if len(str_lst) < 1:\n        return \"\"\n    \n    str_lst = list(str_lst)\n    \n    # Method 14\n    str_lst"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if not test_str:\n        return ''\n    last_num = None\n    for c in test_str:\n        if c.isdigit():\n            if last_num:\n                return test_str[:last_num] + test_str[last_num].join(c) + test_str[last_num+1:]\n            else:\n                last_num = len(test_str)\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    temp = ''\n    for x in test_str:\n        if x.isdigit():\n            temp += x\n    return temp + ''.join([str(x) for x in range(10, int(temp) + 1) if x not in temp])\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = ''\n    for char in test_str:\n        if not char.isdigit():\n            num_str += char\n    new_str = ''\n    for i in xrange(len(test_str) - len(num_str)):\n        new_str += num_str\n    new_str += num_str\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    pos = 0\n    length = len(test_str)\n    while pos < length:\n        if not test_str[pos].isdigit():\n            pos += 1\n        else:\n            num = int(test_str[pos])\n            str_len = len(test_str)\n            test_str = test_str[:pos] + test_str[pos+num:] + test_str[pos:pos+num]\n            pos += num\n    return test_str\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if not a:\n        return 0\n    curr_sum = 0\n    max_sum = 0\n    for i in range(len(a)):\n        curr_sum = 0\n        for j in range(i,len(a)):\n            curr_sum += a[j]\n            if curr_sum%2 == 0:\n                max_sum = max(max_sum, curr_sum)\n    return max_sum\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    result = 0\n    # Keep a running total of each prime\n    primes = [1] * (len(a) + 1)\n    for i in xrange(2, len(a) + 1):\n        if primes[i] == 1:\n            j = 2\n            while i * j <= len(a):\n                primes[i * j] = 0\n                j += 1\n    # Count the divisors for each number\n    for i in xrange(len(a)):\n        count = 0\n        for j in xrange(len(a)):\n            if a[j] % i == 0:\n                count += 1\n        result = max(result, count)\n    #print(result)\n    return result\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # Assume the list is already sorted.\n    for i in range(1,len(a)):\n        if a[i] % a[i-1]!= 0:\n            return len(a)\n    return len(a)\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 0:\n        return 0\n    result = []\n    a.sort()\n    curr = [a[0]]\n    for i in range(1, len(a)):\n        if a[i] % a[i-1] == 0:\n            curr.append(a[i])\n        else:\n            result.append(curr)\n            curr = [a[i]]\n    result.append(curr)\n    max_len = max([len(x) for x in result])\n    return max_len\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    pass\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    return 1\n    \ndef find_palindromes(arr):\n    '''\n    Write a function to find all the palindromes in the list of numbers.\n    '''\n    return arr\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    # max_mapping = [[0 for j in range(n)] for i in range(n)]\n    max_mapping = {}\n    for i in range(n):\n        max_mapping[i] = [0 for j in range(n)]\n        for j in range(i, n):\n            if a[j]%a[i] == 0:\n                max_mapping[i][j] = max_mapping[i][j-1] + 1\n            else:\n                max_mapping[i][j] = max_mapping[i][j-1]\n    \n    result = 0\n    for i in range(n):\n        if max_mapping[i][-1] > result:\n            result = max_mapping[i][-1]\n    return result\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    subset = [0] * n\n    for i in range(n):\n        for j in range(i, n):\n            if a[i] % a[j] == 0:\n                subset[j] = max(subset[j], subset[i] + 1)\n    return max(subset)\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    subset = []\n    for i in xrange(n):\n        for j in xrange(i+1, n):\n            if a[i] % a[j] == 0:\n                subset.append([i,j])\n    return subset\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if a[i] % a[j]!= 0:\n                break\n            else:\n                return len(a)\n    return 0\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return arr1[0]\n    elif n == 1:\n        return (arr1[0] + arr2[0]) / 2.0\n    else:\n        if arr1[n/2-1] > arr2[n/2]:\n            return get_median(arr1[:n/2], arr2, n/2)\n        elif arr1[n/2-1] < arr2[n/2]:\n            return get_median(arr1, arr2[:n/2], n/2)\n        else:\n            return (get_median(arr1[:n/2], arr2[:n/2], n/2) + get_median(arr1[n/2:], arr2[n/2:], n/2)) / 2.0\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    total_len = len(arr1) + len(arr2)\n    if total_len % 2 == 0:\n        median_idx = int(total_len / 2)\n        return (arr1[median_idx - 1] + arr1[median_idx]) / 2.0\n    else:\n        return arr1[total_len / 2]\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    if n % 2 == 0:\n        i = n / 2 - 1\n        j = n / 2\n    else:\n        i = n / 2\n        j = n / 2 + 1\n    med1 = arr1[i]\n    med2 = arr2[j]\n    if med1 < med2:\n        return get_median(arr1, arr2[j:], n - j)\n    elif med1 > med2:\n        return get_median(arr1[i:], arr2, n - i)\n    else:\n        return med1\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return (get_median(arr1, arr2, n / 2) + get_median(arr1, arr2, n / 2 + 1)) / 2.0\n    else:\n        return get_median(arr1, arr2, (n + 1) / 2)\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if (n == 1):\n        return (arr1[0] + arr2[0]) / 2\n    elif (n == 2):\n        return (arr1[0] + arr2[1]) / 2\n    else:\n        if (arr1[n/2] < arr2[n/2 - 1]):\n            return (arr1[n/2] + get_median(arr1[n/2 + 1:], arr2, n - n/2 - 1)) / 2\n        else:\n            return (arr2[n/2] + get_median(arr1, arr2[n/2 + 1:], n - n/2 - 1)) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    m,n = len(arr1), len(arr2)\n    if m < n:\n        arr1, arr2, n = arr2, arr1, m\n    if n==0:\n        return None\n    if n==1:\n        return (arr1[0]+arr2[0])/2.0\n    median = None\n    if n%2 == 0:\n        median = (arr1[n/2]+arr1[n/2-1])/2.0\n    else:\n        median = arr1[n/2]\n    min_range, max_range = (n/2)-1, n/2\n    while min_range >= 0:\n        if (arr2[min_range] < median)!= (arr2[max_range] < median):\n            return median\n        if arr2[min_range] < median:\n            min_range -= 1\n            max_range -= 1\n        elif arr2[max_range] < median:\n            min_range += 1\n            max_range -= 1\n        else:\n            min_range -= 1\n            max_range += 1\n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return arr1[0]\n    elif n == 2:\n        return (arr1[0] + arr1[1]) / 2\n    else:\n        split = n // 2\n        left = sorted(arr1[:split])\n        right = sorted(arr1[split:])\n        if n % 2 == 0:\n            return (get_median(left, right, n // 2) + get_median(left, right, n // 2)) / 2\n        else:\n            return get_median(left, right, n // 2 + 1)\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Initialize three pointers, one at each end of each list\n    p1 = 0\n    p2 = 0\n    # Initialize the \"pivot\"\n    pivot = (n + 1) // 2\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = n\n    middle1 = arr1[(n//2)]\n    middle2 = arr2[(n//2)]\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = j = 0\n    total = 0\n    while i < n and j < n:\n        if arr1[i] > arr2[j]:\n            total += arr1[i]\n            i += 1\n        elif arr2[j] > arr1[i]:\n            total += arr2[j]\n            j += 1\n        else:\n            total += (arr1[i] + arr2[j])\n            i += 1\n            j += 1\n    while i < n:\n        total += arr1[i]\n        i += 1\n    while j < n:\n        total += arr2[j]\n        j += 1\n    return total / (2 * n)\n    "
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for item in nums:\n        result.append(item**n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(n):\n        for j in range(len(nums)):\n            nums[j]**=n\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # O(n) time complexity\n    \n    return [n**x for x in nums]\n    \n    \ndef is_same_list(l1, l2):\n    '''\n    Write a function to check whether two lists are the same\n    '''\n    # O(n) time complexity\n    \n    return l1 == l2\n    \ndef find_nth_num_in_list(lst, num, n):\n    '''\n    Write a function to find the nth element in a list.\n    You need to return the nth element.\n    '''\n    # O(n) time complexity\n    \n    return lst[n]\n    \ndef rotate_list(lst, n):\n    '''\n    Write a function to rotate the given list by n elements.\n    '''\n    # O(n) time complexity\n    \n    return lst[n:] + lst[:n]\n    \ndef find_rotated_list(lst):\n    '''\n    Write a function to find the index of the nth element in a sorted list.\n    You need to return the index of the nth element.\n    '''\n    # O(n) time complexity\n    \n    return lst.index(min(lst))\n    \ndef is_in_rotated_list(lst, n):\n    '''\n    Write a function to check whether a number is in a list.\n    You need to return true or false.\n    '''\n    # O(n) time complexity\n    \n    return n in lst\n    \ndef find_nth_element_in_rotated_list(lst, n):\n    '''\n    Write a function to find the nth element in a sorted rotated list.\n    You need to return the nth element.\n    '''\n    # O(n) time complexity\n    \n    return lst[n]\n    \ndef find_rotated_list_by_index(lst, n):\n    '''\n    Write a function to find the nth element in a sorted rotated list.\n    You need to return the nth element.\n    '''\n    # O(n) time complexity\n    \n    return lst[lst[n]]\n    \ndef partition_by_pivot(lst, pivot):\n    '''\n    Write a function to partition a list by a given pivot.\n    '''\n    # O(n) time complexity\n    \n    return lst[:lst.index(pivot)] + [pivot] + lst[lst.index(pivot) + 1:]\n    \ndef selection_sort(lst):\n    '''\n    Write a function to sort a list using selection sort.\n    '''\n    # O(n^2) time complexity\n    \n    return [min(lst[i:]) for i in range(len(lst))]\n    \ndef find_smallest_range(lst):\n    '''\n    Write a function to find the smallest range in a list.\n    '''\n    # O(n) time complexity\n    \n    lst.sort()\n    \n    return lst[-1] - lst[0]\n    \ndef get_random_list(n):\n    '''\n    Write a function to get a random list with a given length.\n    '''\n    # O(n) time complexity\n    \n    return [random.randint(0,n) for i in range(n)]\n    \ndef get_random_elem(lst):\n    '''\n    Write a function to get a random element from a list.\n    '''\n    # O(n) time complexity\n    \n    return lst[random.randint(0,len(lst) - 1)]\n    \ndef add_nums(lst, n):\n    '''\n    Write a function to add the given numbers to a list.\n    '''\n    # O(n) time complexity\n    \n    return [lst[i] + n for i in range(len(lst))]\n    \ndef generate_cycle_list(n):\n    '''\n    Write a function to generate a list of n elements, each element in the list is a sub list of the previous element.\n    '''\n    # O(n) time complexity\n    \n    return [[i] for i in range(n)] + [[]]\n    \ndef find_cycle_in_list(lst):\n    '''\n    Write a function to find the cycle in a list.\n    '''\n    # O(n) time complexity\n    \n    return [i for i in range(len(lst)) if lst[i] == lst[lst[i]]]\n    \ndef is_unique(lst):\n    '''\n    Write a function to check if a list is unique.\n    '''\n    # O(n) time complexity\n    \n    return len(lst) == len(set(lst))\n    \ndef find_elem(lst, elem):\n    '''\n    Write a function to find the first occurrence of an element in a list.\n    '''\n    # O(n) time complexity\n    \n    return lst.index(elem)\n    \ndef rotate_left(lst, n):\n    '''\n    Write a function to rotate a list by n elements.\n    '''\n    # O(n) time complexity\n    \n    return lst[n:] + lst[:n]\n    \ndef replace_elem(lst, index, elem):\n    '''\n    Write a function to replace the element of a list at a given index with a new element.\n    '''\n    # O(n) time complexity\n    \n    return lst[:index] + [elem] + lst[index + 1:]\n    \ndef max_consecutive_1s(lst):\n    '''\n    Write a function to find the maximum consecutive 1s in a given list.\n    '''\n    # O(n) time complexity\n    \n    return max([1 + i for i in range(len(lst)) if lst[i] == 1])\n    \ndef rotate_list_with_n_elem(lst, n):\n    '''\n    Write a function to rotate a list by n elements.\n    '''\n    # O(n) time complexity\n    \n    return lst[n:] + lst[:n]\n    \ndef find_elem_in_list(lst, elem):\n    '''\n    Write a function to find the first occurrence of an element in a list.\n    '''\n    # O(n) time complexity\n    \n    return lst.index(elem)\n    \ndef find_elem_in_rotated_list(lst, elem):\n    '''\n    Write a function to find the first occurrence of an element in a sorted rotated list.\n    You need to return the index of the element.\n    '''\n    # O(n) time complexity\n    \n    return find_nth_element_in_rotated_list(lst, lst.index(elem))\n    \ndef find_nth_element_in_list(lst, n):\n    '''\n    Write a function to find the nth element in a list.\n    You need to return the nth element.\n    '''\n    # O(n) time complexity\n    \n    return lst[n]\n    \ndef sort_lists_by_element(lst1, lst2):\n    '''\n    Write a function to sort a list by its element.\n    '''\n    # O(n) time complexity\n    \n    lst1.sort(key = lambda x: x[1])\n    lst2.sort(key = lambda x: x[1])\n    \n    return [lst1, lst2]\n    \ndef find_most_common_elem(lst):\n    '''\n    Write a function to find the most common element in a list.\n    '''\n    # O(n) time complexity\n    \n    dic = {}\n    \n    for i in lst:\n        dic[i] = dic.get(i, 0) + 1\n    \n    return max(dic.items(), key = lambda x: x[1])[0]\n    \ndef find_most_common_elem_in_rotated_list(lst):\n    '''\n    Write a function to find the most common element in a sorted rotated list.\n    You need to return the index of the elemen"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    output = []\n    for i in nums:\n        output.append(i**n)\n    return output\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    pow_list = []\n    for i in nums:\n        pow_list.append(i**n)\n    return pow_list\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    import math\n    \n    nth_power = []\n    \n    for i in nums:\n        nth_power.append(math.pow(i,n))\n        \n    return nth_power\n    \n    \ndef nth_divisors(nums):\n    '''\n    Write a function to compute the nth power of each number in a list.\n    '''\n    \n    import math\n    \n    nth_divisors = []\n    \n    for i in nums:\n        nth_divisors.append(math.factorial(i))\n        \n    return nth_divisors\n    \n    \ndef unique_nth_divisors(nums):\n    '''\n    Write a function to compute the nth power of each number in a list.\n    '''\n    \n    import math\n    \n    unique_nth_divisors = []\n    \n    for i in nums:\n        nth_divisors = []\n        for j in range(1,int(math.sqrt(i))+1):\n            if i % j == 0:\n                nth_divisors.append(j)\n                nth_divisors.append(i/j)\n        nth_divisors = list(set(nth_divisors))\n        unique_nth_divisors.append(nth_divisors)\n        \n    return unique_nth_divisors\n    \n    \ndef test_function(test_case):\n    output = unique_nth_divisors(test_case[0])\n    expected = test_case[1]\n    if len(output) == len(expected):\n        if len(output) == 0:\n            if output == expected:\n                print(\"Pass\")\n            else:\n                print(\"Fail\")\n    else:\n        print(\"Fail\")\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    \n    "
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    new_string = ''\n    for i in range(len(string)):\n        if ord(string[i]) >= 65 and ord(string[i]) <= 90:\n            new_string += chr(ord(string[i]) - 32)\n        else:\n            new_string += string[i]\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # output = ''\n    # for i in range(len(string)):\n    #     if string[i].isupper():\n    #         output += string[i]\n    #     else:\n    #         output += string[i].upper()\n    # return output\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if not string:\n        return True\n    else:\n        if string.isupper():\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList)<=1:\n        return newList\n    else:\n        newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n        return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    length = len(newList)\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    a = newList[0]\n    b = newList[-1]\n    newList[0] = b\n    newList[-1] = a\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 1:\n        return newList\n    else:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.append(newList[0])\n    newList.append(newList[-1])\n    newList.remove(newList[-1])\n    newList.remove(newList[0])\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    return newList[-1:] + newList[1:len(newList)-1] + newList[:1]\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    a = newList[0]\n    b = newList[-1]\n    newList[0] = b\n    newList[-1] = a\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList)>1:\n        temp=newList[0]\n        newList[0]=newList[len(newList)-1]\n        newList[len(newList)-1]=temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList)<2:\n        return newList\n    newList[0], newList[-1]= newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return r**2 * 3**2 / 4\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (3*math.pi*r**2)/4\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = (r**2)*math.pi/3.0\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r < 0 :\n        return None\n    return 2*math.pi*r*(r-math.sqrt(r*r-r))\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def triangle_area(r):\n        return 3*r**2*(math.sqrt(3)/4)\n    return triangle_area(r)\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14*r**2\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    area = math.pi * r * r / 4\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = math.sqrt(r**2 - (r-1)**2)\n    return a\n    \ndef circle_area(r) : \n    '''\n    Write a python function to find the area of the circle with radius r inscribed in a circle with radius r.\n    '''\n    return math.pi * r**2\n    \ndef largest_inscribed_triangle(r) : \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with radius r.\n    '''\n    return (r**2 - r) / (r - 1)\n    \ndef best_area(r) : \n    '''\n    Write a python function to find the best area of the largest triangle that can be inscribed in a semicircle with radius r.\n    '''\n    return ((r**2 - r) / (r - 1))**2\n    \ndef largest_triangle_in_a_circle(r) : \n    '''\n    Write a python function to find the largest triangle that can be inscribed in a semicircle with radius r.\n    '''\n    return (r**2 - r) / (r - 1)\n    \ndef best_triangle_in_a_circle(r) : \n    '''\n    Write a python function to find the best area of the largest triangle that can be inscribed in a semicircle with radius r.\n    '''\n    return (r**2 - r) / (r - 1)\n    \ndef circle_intersection(r1, r2) :\n    '''\n    Write a python function to find the point of intersection of two circles.\n    '''\n    return math.pi * (r1**2 + r2**2 - 2 * r1 * r2 * math.cos(math.pi / 2)) / (2 * (r1**2 - r2**2))\n    \ndef circle_segment_intersection(r1, r2, p1, p2) : \n    '''\n    Write a python function to find the point of intersection of a circle segment and a circle.\n    '''\n    return math.pi * (r1**2 + r2**2 - 2 * r1 * r2 * math.cos(math.pi / 2)) / (2 * (r1**2 - r2**2))\n    \ndef circle_segment_circle_intersection(r1, r2, p1, p2) : \n    '''\n    Write a python function to find the point of intersection of a circle segment and a circle.\n    '''\n    return math.pi * (r1**2 + r2**2 - 2 * r1 * r2 * math.cos(math.pi / 2)) / (2 * (r1**2 - r2**2))\n    \ndef circle_intersection_area(r1, r2) :\n    '''\n    Write a python function to find the area of the intersection of two circles.\n    '''\n    return math.pi * (r1**2 + r2**2 - 2 * r1 * r2 * math.cos(math.pi / 2)) / (2 * (r1**2 - r2**2))\n    \ndef circle_segment_intersection_area(r1, r2, p1, p2) : \n    '''\n    Write a python function to find the area of the intersection of a circle segment and a circle.\n    '''\n    return math.pi * (r1**2 + r2**2 - 2 * r1 * r2 * math.cos(math.pi / 2)) / (2 * (r1**2 - r2**2))\n    \ndef circle_segment_circle_intersection_area(r1, r2, p1, p2) : \n    '''\n    Write a python function to find the area of the intersection of a circle segment and a circle.\n    '''\n    return math.pi * (r1**2 + r2**2 - 2 * r1 * r2 * math.cos(math.pi / 2)) / (2 * (r1**2 - r2**2))\n    \ndef nearest_intersection(r1, r2, p1, p2) :\n    '''\n    Write a python function to find the point of intersection of a segment and a circle.\n    '''\n    return ((p1[0] - p2[0]) * (r1**2 - r2**2) / (2 * (p1[0] - p2[0]) * (r1**2 + r2**2 - 2 * r1 * r2 * math.cos(math.pi / 2))**0.5) + (p1[1] - p2[1]) * (r1**2 - r2**2) / (2 * (p1[1] - p2[1]) * (r1**2 + r2**2 - 2 * r1 * r2 * math.cos(math.pi / 2))**0.5) + (r1**2 + r2**2 - 2 * r1 * r2 * math.cos(math.pi / 2))**0.5) / 2\n    \ndef nearest_intersection_area(r1, r2, p1, p2) :\n    '''\n    Write a python function to find the area of the intersection of a segment and a circle.\n    '''\n    return math.pi * (r1**2 + r2**2 - 2 * r1 * r2 * math.cos(math.pi / 2)) / (2 * (r1**2 - r2**2))\n    \ndef nearest_intersection_area_point(r1, r2, p1, p2) : \n    '''\n    Write a python function to find the area of the intersection of a segment and a circle.\n    '''\n    return math.pi * (r1**2 + r2**2 - 2 * r1 * r2 * math.cos(math.pi / 2)) / (2 * (r1**2 - r2**2))\n    \ndef circle_area_from_radius(r) : \n    '''\n    Write a python function to find the area of a circle from a radius.\n    '''\n    return math.pi * r**2\n    \ndef circle_area_from_center_and_radius(c, r) : \n    '''\n    Write a python function to find the area of a circle from a center and a radius.\n    '''\n    return math.pi * r**2\n    \ndef radius_from_circle_area(a) : \n    '''\n    Write a python function to find the radius from a circle area.\n    '''\n    return math.sqrt(a / math.pi)\n    \ndef radius_from_circle_area_point(a, p) : \n    '''\n    Write a python function to find the radius from a circle area.\n    '''\n    return math.sqrt(a / math.pi)\n    \ndef circle_area_from_circle_area(a) : \n    '''\n    Write a python function to find the area of a circle from a circle area.\n    '''\n    return a\n    \ndef circle_area_from_radius(r) : \n    '''\n    Write a python function to find the area of a circle from a radius.\n    '''\n    return math.pi * r**2\n    \ndef circle_area_from_center_and_radius(c, r) : \n    '''\n    Write a python function to find the area of a circle from a center and a radius.\n    '''\n    return math.pi * r**2\n    \ndef circle_area_from_circumscribed_triangle(r) : \n    '''\n    Write a python function to find the area of a circle from a circumscribed triangle.\n    '''\n    return (r**2 - r) / (r - 1)\n    \ndef circle_area_from_circumscribed_triangle_point(r, p) : \n    '''\n    Write a python function to find the area of a circle from a circumscribed triangle.\n    '''\n    return (r**2 - r) / (r - 1)\n    \ndef circumscribed_triangle_from_circle_area(a) : \n    '''\n    Write a python function to find the circumscribed triangle from a circle area.\n    '''\n    return (a - 1) / (math.pi)\n    \ndef circumscribed_triangle_from_radius(r) :"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    import math\n    \n    a = r**2\n    b = math.sqrt(r**2 - 1)\n    \n    return (3 * math.pi * r**2 - a - b)/2\n    \nif __name__ == \"__main__\":\n    \n    print \"Area of the largest triangle inscribed in a semicircle with a given radius = \", triangle_area(3)"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r >= 2.5 :\n        return 0.5*r*r\n    else :\n        return (1.25*r*r-0.25*r*r)\n    \ndef area_of_triangle(t) :\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a triangle with vertices a, b, c.\n    '''\n    a, b, c = t\n    s = (a + b + c) / 2\n    return sqrt(s*(s-a)*(s-b)*(s-c))\n    \ndef angle_between_three_points(x1, y1, x2, y2, x3, y3) :\n    '''\n    Write a python function to compute the angle in degrees between three points on a Cartesian plane.\n    '''\n    angle = atan2(y2 - y1, x2 - x1) - atan2(y3 - y1, x3 - x1)\n    return angle / (pi * 2) * 360\n    \ndef find_pythagorean_triple(a, b, c) :\n    '''\n    Write a python function to find the pythagorean triple that satisfies the equation a2 + b2 = c2\n    '''\n    a2, b2, c2 = a**2, b**2, c**2\n    return [a2+b2-c2, a, b, c]\n    \ndef euler_gamma() :\n    '''\n    Write a python function to find the value of \u03b3 (Euler's product) for the following values of \u03c0.\n    '''\n    return (1/sqrt(2))*(1/sqrt(3))\n    \ndef angle_between_a_and_b(a, b, c) :\n    '''\n    Write a python function to compute the angle between the line segment from a to b and the line segment from a to c in degrees.\n    '''\n    return angle_between_three_points(a[0], a[1], b[0], b[1], c[0], c[1])\n    \ndef angle_between_a_and_c(a, b, c) :\n    '''\n    Write a python function to compute the angle between the line segment from a to b and the line segment from a to c in degrees.\n    '''\n    return angle_between_three_points(a[0], a[1], c[0], c[1], b[0], b[1])\n    \ndef angle_between_b_and_c(a, b, c) :\n    '''\n    Write a python function to compute the angle between the line segment from a to b and the line segment from a to c in degrees.\n    '''\n    return angle_between_three_points(b[0], b[1], c[0], c[1], a[0], a[1])\n    \ndef triangle_area_and_centroid(a, b, c) :\n    '''\n    Write a python function to find the area of a triangle and the center of its circumcircle.\n    '''\n    a, b, c = map(float, a), map(float, b), map(float, c)\n    p = sum(a)\n    q = sum(b)\n    r = sum(c)\n    area = (p - q) * (r - q) * (r - p)\n    s = (p + q + r) / 2\n    return area, (p*q*r / (4 * area), s*(p-q)*(r-q)/(4*area), s*(q-p)*(r-p)/(4*area))\n    \ndef right_angle(a, b, c) :\n    '''\n    Write a python function to check if a given triangle is a right triangle or not.\n    '''\n    a, b, c = map(float, a), map(float, b), map(float, c)\n    return (b**2+c**2) == (a**2+b**2)\n    \ndef right_angle_triple(a, b, c) :\n    '''\n    Write a python function to find the right angle triple that satisfies the following:\n    1) a**2 + b**2 = c**2\n    2) a + b + c = 1000\n    '''\n    a, b, c = map(float, a), map(float, b), map(float, c)\n    m = 1000 - sum(a) - sum(b) - sum(c)\n    return [a[0]**2 + a[1]**2 - m, b[0]**2 + b[1]**2 - m, c[0]**2 + c[1]**2 - m]\n    \ndef find_largest_side(sides) :\n    '''\n    Write a python function to find the largest side of a right angle triangle given a list of its sides.\n    '''\n    return max(sides)\n    \ndef circle_area_and_perimeter(r) :\n    '''\n    Write a python function to find the area of a circle and the perimeter of a circle.\n    '''\n    return pi * r**2, 2*pi * r\n    \ndef fahrenheit_to_celsius(fahrenheit) :\n    '''\n    Write a python function to convert the temperature in Celsius to Fahrenheit.\n    '''\n    return (fahrenheit - 32) * (5/9)\n    \ndef celsius_to_fahrenheit(celsius) :\n    '''\n    Write a python function to convert the temperature in Fahrenheit to Celsius.\n    '''\n    return (celsius * 9/5) + 32\n    \ndef average_of_three(a, b, c) :\n    '''\n    Write a python function to find the average of three numbers.\n    '''\n    return (a + b + c) / 3\n    \ndef factorial(n) :\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n <= 1 :\n        return 1\n    else :\n        return n*factorial(n-1)\n    \ndef fibonacci(n) :\n    '''\n    Write a python function to find the nth Fibonacci number.\n    '''\n    if n <= 1 :\n        return n\n    else :\n        return fibonacci(n-1) + fibonacci(n-2)\n    \ndef gcd(a, b) :\n    '''\n    Write a python function to find the greatest common divisor (GCD) of two numbers.\n    '''\n    if a == 0 :\n        return b\n    else :\n        return gcd(b % a, a)\n    \ndef gcd_of_a_list(numbers) :\n    '''\n    Write a python function to find the GCD of a list of numbers.\n    '''\n    return reduce(gcd, numbers)\n    \ndef lcm(a, b) :\n    '''\n    Write a python function to find the lowest common multiple (LCM) of two numbers.\n    '''\n    return a * b / gcd(a, b)\n    \ndef lcm_of_a_list(numbers) :\n    '''\n    Write a python function to find the LCM of a list of numbers.\n    '''\n    return reduce(lcm, numbers)\n    \ndef round_down(a, b) :\n    '''\n    Write a python function to round a number to the nearest multiple of b.\n    '''\n    return (a - (a % b)) / b\n    \ndef nth_digit(n, number) :\n    '''\n    Write a python function to find the nth digit of a number.\n    '''\n    return int(str(number)[n-1])\n    \ndef line_length(a, b) :\n    '''\n    Write a python function to compute the length of a line segment from a to b.\n    '''\n    return sqrt((a[0] - b[0])**2 + (a[1] - b[1])**2)\n    \ndef line_from_length(a, length) :\n    '''\n    Write a python function to compute the point at a given distance along a line from a to b.\n    '''\n    return (a[0] + (b[0] - a[0]) * length"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start>end:\n        return -1\n    elif start==end:\n        if array[start]!=start+1:\n            return start+1\n        else:\n            return -1\n    mid = (start+end)//2\n    if array[mid]==mid+1:\n        return find_First_Missing(array,start,mid)\n    else:\n        return find_First_Missing(array,mid+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if end < start:\n        return 0\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start >= end:\n        return start\n    mid = (start + end) // 2\n    if array[mid] - array[start - 1]!= mid:\n        return find_First_Missing(array,mid + 1,end)\n    else:\n        return find_First_Missing(array,start,mid-1)\n    \nif __name__==\"__main__\":\n    array = [1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array,0,len(array)-1))\n    \n    \n    "
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not array:\n        return 0\n    if end is None:\n        end = len(array)\n    if start == end:\n        return array[start] + 1\n    mid = (start + end) // 2\n    if array[mid] > array[mid + 1]:\n        return array[mid + 1] + 1\n    if array[mid] == array[mid + 1]:\n        return find_First_Missing(array,start,mid)\n    else:\n        return find_First_Missing(array,mid + 1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start>end:\n        return start\n    if array[start]!=start:\n        return array[start]\n    return find_First_Missing(array,start+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if array is None:\n        return None\n    if len(array) == 1:\n        if array[0] == 0:\n            return 1\n        else:\n            return 0\n    if end is None:\n        end = len(array) - 1\n    if end < 0:\n        end += 1\n    if start >= end:\n        return end + 1\n    elif array[start]!= start:\n        return start\n    else:\n        mid = int(start + (end-start)/2)\n        if array[mid] == mid:\n            return find_First_Missing(array,start,mid-1)\n        else:\n            return find_First_Missing(array,mid+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start > end:\n        return -1\n    if start == end:\n        if array[start] == start+1:\n            return start+1\n        else:\n            return -1\n    mid = int((start+end)/2)\n    if array[mid] == mid+1:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start>=end:\n        return None\n    if start==end-1:\n        if array[end]!=end:\n            return array[end]\n        else:\n            return start\n    mid=(start+end)/2\n    if array[mid]==mid:\n        if array[mid-1]!=mid-1:\n            return mid-1\n        else:\n            return find_First_Missing(array,start,mid)\n    else:\n        if array[mid]>mid:\n            return find_First_Missing(array,mid,end)\n        else:\n            return find_First_Missing(array,start,mid)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start >= end:\n        return None\n    if array[start] == start:\n        return start\n    mid = (start + end)//2\n    if array[mid] == mid:\n        return find_First_Missing(array,start,mid)\n    else:\n        return find_First_Missing(array,mid+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start > end:\n        return start\n    if array[start]!=start:\n        return start\n    if array[end]!= end:\n        return end\n    mid = (start + end)/2\n    if array[mid] == mid:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid)\n    \narray = [0,1,2,3,4,5,6,7,8,9]\nprint find_First_Missing(array"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    if len(string) == 0:\n        return \"\"\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char == \" \":\n            new_string += \"%20\"\n        else:\n            new_string += char\n    return new_string\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = string\n    for i in xrange(len(string)):\n        if string[i] == \" \":\n            new_string = new_string.replace(\" \", \"%20\")\n    return new_string\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    res = \"\"\n    for i in string:\n        if i =='':\n            res = res + '%20'\n        else:\n            res = res + i\n    return res\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return ''.join(string.split(' '))\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n    \n    \ndef replace_all_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '_'.\n    '''\n    return string.replace(' ', '_')\n    \n    \ndef replace_in_string(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return''.join(string.split())\n    \n    \ndef replace_in_string_v2(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return ''.join(string.split())\n    \n    \ndef remove_spaces(string):\n    '''\n    Write a function to remove all spaces in the given string.\n    '''\n    return string.replace(' ', '')\n    \n    \ndef remove_leading_spaces(string):\n    '''\n    Write a function to remove leading spaces in the given string.\n    '''\n    return string.lstrip()\n    \n    \ndef remove_trailing_spaces(string):\n    '''\n    Write a function to remove trailing spaces in the given string.\n    '''\n    return string.rstrip()\n    \n    \ndef remove_trailing_zeros(string):\n    '''\n    Write a function to remove trailing zeros in the given string.\n    '''\n    return string.rstrip('0')\n    \n    \ndef remove_duplicate_spaces(string):\n    '''\n    Write a function to remove duplicate spaces in the given string.\n    '''\n    return''.join(string.split())\n    \n    \ndef remove_all_duplicate_spaces(string):\n    '''\n    Write a function to remove all duplicate spaces in the given string.\n    '''\n    return''.join(string.split(' '))\n    \n    \ndef test_replace_spaces():\n    assert replace_spaces('hows are you') == 'hows%20are%20you'\n    assert replace_spaces(' hows are you') == 'hows%20are%20you'\n    assert replace_spaces('how  are you') == 'how%20are%20you'\n    assert replace_spaces('  how  are you') == 'how%20are%20you'\n    assert replace_spaces('   hows   are   you') == 'hows%20are%20you'\n    assert replace_spaces('a') == 'a'\n    assert replace_spaces('   a   ') == 'a'\n    assert replace_spaces('') == ''\n    assert replace_spaces('      ') == ''\n    \n    \ndef test_replace_all_spaces():\n    assert replace_all_spaces('hows are you') == 'hows%20are%20you'\n    assert replace_all_spaces(' hows are you') == 'hows%20are%20you'\n    assert replace_all_spaces('how  are you') == 'how%20are%20you'\n    assert replace_all_spaces('  how  are you') == 'how%20are%20you'\n    assert replace_all_spaces('   hows   are   you') == 'hows%20are%20you'\n    assert replace_all_spaces('a') == 'a'\n    assert replace_all_spaces('   a   ') == 'a'\n    assert replace_all_spaces('') == ''\n    assert replace_all_spaces('      ') == ''\n    \n    \ndef test_replace_in_string():\n    assert replace_in_string('hows are you') == 'hows are you'\n    assert replace_in_string('hows are you') == 'hows are you'\n    assert replace_in_string('how  are you') == 'how are you'\n    assert replace_in_string('  how  are you') == 'how are you'\n    assert replace_in_string('   hows   are   you') == 'hows are you'\n    assert replace_in_string('a') == 'a'\n    assert replace_in_string('   a   ') == 'a'\n    assert replace_in_string('') == ''\n    assert replace_in_string('      ') == ''\n    \n    \ndef test_remove_leading_spaces():\n    assert remove_leading_spaces('hows are you') == 'hows are you'\n    assert remove_leading_spaces('hows are you') == 'hows are you'\n    assert remove_leading_spaces('how  are you') == 'how  are you'\n    assert remove_leading_spaces('  how  are you') == 'how  are you'\n    assert remove_leading_spaces('   hows   are   you') == 'hows   are   you'\n    assert remove_leading_spaces('a') == 'a'\n    assert remove_leading_spaces('   a   ') == 'a'\n    assert remove_leading_spaces('') == ''\n    assert remove_leading_spaces('      ') == ''\n    \n    \ndef test_remove_trailing_spaces():\n    assert remove_trailing_spaces('hows are you') == 'hows are you'\n    assert remove_trailing_spaces('hows are you') == 'hows are you'\n    assert remove_trailing_spaces('how  are you') == 'how  are you'\n    assert remove_trailing_spaces('  how  are you') == 'how are you'\n    assert remove_trailing_spaces('   hows   are   you') == 'hows   are   you'\n    assert remove_trailing_spaces('a') == 'a'\n    assert remove_trailing_spaces('   a   ') == 'a'\n    assert remove_trailing_spaces('') == ''\n    assert remove_trailing_spaces('      ') == ''\n    \n    \ndef test_remove_trailing_zeros():\n    assert remove_trailing_zeros('12345678') == '12345678'\n    assert remove_trailing_zeros('123456789') == '123456789'\n    assert remove_trailing_zeros('12345678900') == '123456789'\n    assert remove_trailing_zeros('1234567890') == '1234567890'\n    assert remove_trailing_zeros('12345678901') == '123456789'\n    assert remove_trailing_zeros('123456789012') == '12345678'\n    assert remove_trailing_zeros('1234567890123') == '123456789'\n    assert remove_trailing_zeros('123456789012345') == '123456789'\n    assert remove_trailing_zeros('1234567890123456789') == '123456789'\n    assert remove_trailing_zeros('123456789012345678900') == '123456789'\n    assert remove_trailing_zeros('1234567890123456789000') == '123456789'\n    assert remove_trailing_zeros('1234567890123456789000000') == '123456789'\n    assert remove_trailing_zeros('12345678901234567890000000') == '123456789'\n    assert remove_trailing_zeros('1234567890123456789000000000') == '123456789'\n    assert remove_trailing_zeros('1234567890123456789000000000000') == '123456789'\n    assert remove_trailing_zeros('1234567890123456789000000000000000') == '123456789'\n    assert remove_trailing_zeros('123456789012345678900000000000000000') == '123456789'\n    assert remove_trailing_zeros('1234567890123456789000000000000000', 10) == '1234567890123456789'\n    assert remove_trailing_zeros('123456789012345678900000000000000000', 10) == '1234567890123456789'\n    assert remove_trailing_zeros('123456789012345678900000000000000000', 11) == '1234567890123456789'"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list1 = []\n    list2 = []\n    for i in list:\n        if i%2==0:\n            list1.append(i)\n        else:\n            list2.append(i)\n    return list1, list2\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list1 = []\n    list2 = []\n    for i in list:\n        if i%2 == 0:\n            list1.append(i)\n        else:\n            list2.append(i)\n    print \"even numbers in the list : \" + str(list1)\n    print \"odd numbers in the list : \" + str(list2)\n    \n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    \n    # List with all the even numbers\n    result = [] \n    for number in list:\n        if number % 2 == 0:\n            result.append(number)\n    return result\n    "
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    odds = []\n    for i in list:\n        if i % 2 == 0:\n            evens.append(i)\n        else:\n            odds.append(i)\n    return evens, odds\n    \ndef Multiply(num1, num2):\n    '''\n    Write a python function to return the product of two numbers.\n    '''\n    return num1 * num2\n    \ndef FindFirstEven(list):\n    '''\n    Write a python function to return the first even number in a list of numbers.\n    '''\n    for i in list:\n        if i % 2 == 0:\n            return i\n    return False\n    \ndef FindFirstOdd(list):\n    '''\n    Write a python function to return the first odd number in a list of numbers.\n    '''\n    for i in list:\n        if i % 2 == 1:\n            return i\n    return False\n    \ndef FindLastEven(list):\n    '''\n    Write a python function to return the last even number in a list of numbers.\n    '''\n    for i in range(len(list)-1, -1, -1):\n        if list[i] % 2 == 0:\n            return list[i]\n    return False\n    \ndef FindLastOdd(list):\n    '''\n    Write a python function to return the last odd number in a list of numbers.\n    '''\n    for i in range(len(list)-1, -1, -1):\n        if list[i] % 2 == 1:\n            return list[i]\n    return False\n    \ndef FindOccurrences(list, num):\n    '''\n    Write a python function to return the number of occurrences of a number in a list of numbers.\n    '''\n    return list.count(num)\n    \ndef FindMedian(list):\n    '''\n    Write a python function to return the median of a list of numbers.\n    '''\n    list.sort()\n    if len(list) % 2 == 1:\n        return list[int(len(list)/2)]\n    else:\n        return (list[int(len(list)/2)] + list[int(len(list)/2)-1]) / 2\n    \ndef FindMode(list):\n    '''\n    Write a python function to return the mode of a list of numbers.\n    '''\n    list.sort()\n    mode = list[0]\n    count = 1\n    for i in range(len(list)-1):\n        if list[i] == list[i+1]:\n            count += 1\n        else:\n            if count > mode:\n                mode = count\n                count = 1\n            else:\n                count = 1\n    if count > mode:\n        mode = count\n    return mode\n    \ndef FindSum(list):\n    '''\n    Write a python function to return the sum of a list of numbers.\n    '''\n    return sum(list)\n    \ndef FindAverage(list):\n    '''\n    Write a python function to return the average of a list of numbers.\n    '''\n    return sum(list) / len(list)\n    \ndef FindMaximum(list):\n    '''\n    Write a python function to return the maximum of a list of numbers.\n    '''\n    return max(list)\n    \ndef FindMinimum(list):\n    '''\n    Write a python function to return the minimum of a list of numbers.\n    '''\n    return min(list)\n    \ndef FindRange(list):\n    '''\n    Write a python function to return the range of a list of numbers.\n    '''\n    return max(list) - min(list)\n    \ndef FindStandardDeviation(list):\n    '''\n    Write a python function to return the standard deviation of a list of numbers.\n    '''\n    mean = FindAverage(list)\n    sum = 0\n    for i in list:\n        sum += (i - mean)**2\n    return (sum / (len(list) - 1)) ** 0.5\n    \ndef FindPercentile(list, percent):\n    '''\n    Write a python function to return the percentile of a list of numbers.\n    '''\n    list.sort()\n    if len(list) == 0:\n        return False\n    if percent > 100 or percent < 0:\n        return False\n    elif percent == 100:\n        return list[-1]\n    else:\n        return list[int(len(list) * percent / 100)]\n    \ndef GetDetails(list):\n    '''\n    Write a python function to return the details of a list of numbers.\n    '''\n    return {'Minimum': FindMinimum(list), 'Maximum': FindMaximum(list), 'Average': FindAverage(list), 'Standard Deviation': FindStandardDeviation(list), 'Range': FindRange(list), 'Median': FindMedian(list), 'Mode': FindMode(list), 'Evens': Split(list)[0], 'Odds': Split(list)[1], 'Sum': FindSum(list), 'Average': FindAverage(list), 'Percentile': FindPercentile(list, 50), 'Mode': FindMode(list), 'Occurrences': FindOccurrences(list, 4)}\n    \ndef FindFirstOdd(list):\n    '''\n    Write a python function to return the first odd number in a list of numbers.\n    '''\n    for i in list:\n        if i % 2 == 1:\n            return i\n    return False\n    \ndef FindLastOdd(list):\n    '''\n    Write a python function to return the last odd number in a list of numbers.\n    '''\n    for i in range(len(list)-1, -1, -1):\n        if list[i] % 2 == 1:\n            return list[i]\n    return False\n    \ndef FindOddRange(list):\n    '''\n    Write a python function to return the range of the difference between the first and last odd numbers in a list of numbers.\n    '''\n    if FindFirstOdd(list) == False or FindLastOdd(list) == False:\n        return False\n    return FindLastOdd(list) - FindFirstOdd(list)\n    \ndef FindOddPercentile(list, percent):\n    '''\n    Write a python function to return the percentile of the difference between the first and last odd numbers in a list of numbers.\n    '''\n    if FindFirstOdd(list) == False or FindLastOdd(list) == False:\n        return False\n    list.sort()\n    if len(list) == 0:\n        return False\n    if percent > 100 or percent < 0:\n        return False\n    elif percent == 100:\n        return FindLastOdd(list) - FindFirstOdd(list)\n    else:\n        return FindLastOdd(list) - FindFirstOdd(list) * (percent / 100)\n    \ndef FindOddAverage(list):\n    '''\n    Write a python function to return the average of the difference between the first and last odd numbers in a list of numbers.\n    '''\n    if FindFirstOdd(list) == False or FindLastOdd(list) == False:\n        return False\n    return FindOddRange(list) / (len(list) - 1)\n    \ndef FindOddSum(list):\n    '''\n    Write a python function to return the sum of the difference between the first and last odd numbers in a list of numbers.\n    '''\n    if FindFirstOdd(list) == False or FindLastOdd(list) == False:\n        return False\n    return FindOddRange(list)\n    \ndef FindOddStandardDeviation(list):\n    '''\n    Write a python function to return the standard deviation of the difference between the first and last odd numbers in a list of numbers.\n    '''\n    if FindFirstOdd(list) == False or FindLastOdd(list) == False:\n        return False\n    mean = FindOddAverage(list)\n    sum = 0\n    for i in list:\n        sum += (i - mean)**2\n    return (sum / (len(list) - 1)) ** 0.5\n    \ndef FindOddMedian(list):\n    '''\n    Write a python function to return the median of the difference between the first and last odd numbers in a list of numbers.\n    '''\n    if FindFirstOdd(list) == False or FindLastOdd(list) == False:\n        return False\n    list.sort()\n    if len(list) == 0:\n        return False"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    for num in list:\n        if num % 2 == 0:\n            print(num)\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    odd = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return [even,odd]\nprint(Split([1,2,3,4,5,6,7,8,9]))\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for i in list:\n        if i%2 == 0:\n            even_numbers.append(i)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    odd = []\n    for i in list:\n        if i%2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even,odd\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for i in list:\n        if i%2 == 0:\n            evens.append(i)\n    return evens\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            even.append(list[i])\n    return even\n    "
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    #extract the x and y coordinates of the location\n    l = list()\n    for i in [x+1, x-1, y+1, y-1]:\n        if i>=0 and i<len(world):\n            l.append((i,y))\n    return l\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [(ele[0] + dx, ele[1] + dy) for dx in range(-1, 2) for dy in range(-1, 2) if (dx, dy)!= (0, 0)]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    x, y = ele\n    return [(x + 1, y), (x, y + 1), (x - 1, y), (x, y - 1)]\n    \n    \ndef bfs(ele, visited, grid, maxi):\n    '''\n    bfs method.\n    '''\n    queue = [(ele, 0)]\n    while len(queue)!= 0:\n        (u, d) = queue.pop(0)\n        if visited[u] == -1:\n            visited[u] = maxi\n            for ele in adjac(u):\n                queue.append((ele, d + 1))\n    return visited\n    \n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    return [\n    \n    (ele[0] - 1, ele[1] - 1), (ele[0] - 1, ele[1]), (ele[0] - 1, ele[1] + 1),\n    (ele[0], ele[1] - 1), (ele[0], ele[1] + 1),\n    (ele[0] + 1, ele[1] - 1), (ele[0] + 1, ele[1]), (ele[0] + 1, ele[1] + 1)\n    \n    ]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    r = ele[0]\n    c = ele[1]\n    adjs = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if (i, j) == (0, 0):\n                continue\n            if r+i >= 0 and c+j >= 0:\n                adjs.append((r+i, c+j))\n    return adjs\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    return [(x-1,y), (x+1,y), (x,y-1), (x,y+1)]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [(ele[0] + delta_i, ele[1] + delta_j) for delta_i, delta_j in deltas \\\n        if (0 <= ele[0] + delta_i < len(a) and 0 <= ele[1] + delta_j < len(a[0]))]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x = ele[0]\n    y = ele[1]\n    for i in [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]:\n        if i not in sub:\n            sub.append(i)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x,y = ele\n    return [(x-1,y),(x,y-1),(x+1,y),(x,y+1)]\n    \ndef bfs(board, start, goal): \n    '''\n    Returns a list of coordinates corresponding to the shortest path between the two points.\n    '''\n    q = []\n    heapq.heappush(q,(0,start))\n    prev = {}\n    while q:\n        d, ele = heapq.heappop(q)\n        if ele == goal:\n            break\n        for adj in adjac(ele):\n            if adj not in prev or prev[adj] > d + 1:\n                prev[adj] = d + 1\n                heapq.heappush(q, (d+1,adj))\n    return prev\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub = sub[:]\n    sub.append(ele)\n    if ele[0] > 0 and (ele[0]-1, ele[1]) not in sub: \n        adjac(ele[0]-1, sub)\n    if ele[0] < 9 and (ele[0]+1, ele[1]) not in sub: \n        adjac(ele[0]+1, sub)\n    if ele[1] > 0 and (ele[0], ele[1]-1) not in sub: \n        adjac(ele[0], ele[1]-1, sub)\n    if ele[1] < 9 and (ele[0], ele[1]+1) not in sub: \n        adjac(ele[0], ele[1]+1, sub)\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    letters = [i for i in text if i.isalpha()]\n    return ''.join(letters).replace(' ', '_')\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_'), text.replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    import re\n    return re.sub(r\"\\s\", \"_\", text)\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    new_text = ''\n    for char in text:\n        if char.isspace():\n            new_text += '_'\n        else:\n            new_text += char\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # return text.replace(' ', '_')\n    # return text.replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    chars = text.replace(' ','_')\n    return chars.replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    temp = [c for c in text]\n    for i, c in enumerate(temp):\n        if c =='':\n            temp[i] = '_'\n        elif c == '_':\n            temp[i] =''\n    return ''.join(temp)\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Your Code Here\n    i = 0\n    j = 0\n    k = 0\n    for i in num_list:\n        if i!= 0:\n            j += 1\n        else:\n            k += 1\n    return num_list[j:k]\n    "
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    num_list.sort(key=lambda x: x == 0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    length = len(num_list)\n    zeroes = 0\n    for i in range(length):\n        if num_list[i] == 0:\n            zeroes += 1\n    #print zeroes\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if not num_list:\n        return []\n    index = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[index] = num_list[i]\n            index += 1\n    for i in range(index,len(num_list)):\n        num_list[i] = 0\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # result = [i for i in num_list if i!= 0]\n    # result.extend([0]*len([i for i in num_list if i == 0]))\n    # return result\n    return [i for i in num_list if i!= 0] + [0] * len([i for i in num_list if i == 0])\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(0,len(num_list)):\n        if num_list[i] == 0:\n            num_list[i] = num_list[len(num_list) - 1]\n            num_list[len(num_list) - 1] = 0\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    #Solution 1\n    zero_list = []\n    for i in num_list:\n        if i == 0:\n            zero_list.append(i)\n    for i in zero_list:\n        num_list.remove(i)\n    num_list.extend(zero_list)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list) - 1] = num_list[len(num_list) - 1], num_list[i]\n            num_list.pop()\n    return num_list\n    \ndef swap_list(num_list):\n    '''\n    Write a python function to swap adjacent elements in the given list.\n    '''\n    for i in range(len(num_list) - 1):\n        num_list[i], num_list[i + 1] = num_list[i + 1], num_list[i]\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(num_list.count(0)):\n        num_list.remove(0)\n        num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for index, item in enumerate(num_list):\n        if item == 0:\n            num_list.pop(index)\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    result = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            result += arr[i] ^ arr[j]\n    return result\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr_sum = 0\n    for i in range(0,n-1) : \n        arr_sum = arr_sum ^ arr[i]\n    return arr_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    result = arr[0]\n    for i in range(1,n) :\n        result = result^arr[i]\n    return result\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr.sort()\n    for i in range(n-1) : \n        if arr[i]!= arr[i+1] : \n            return arr[i]^arr[i+1]\n    return arr[n-1]\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    output = 0\n    for i in range(n) :\n        for j in range(n) :\n            if i!= j :\n                output += arr[i] ^ arr[j]\n    return output\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return sum([x ^ y for x, y in zip(arr, arr[1:])])\n    \nprint pair_xor_Sum([1,3,5,7,9],5)\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    count=0\n    for i in range(n-1) : \n        count += arr[i] ^ arr[i+1]\n    return count\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    total = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            total += (arr[i]^arr[j])\n    return total\n    \ndef remove_duplicates(arr) : \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    n = len(arr)\n    for i in range(n) : \n        for j in range(i+1,n) : \n            if arr[i] == arr[j] : \n                arr[j] = -1\n    temp = 0\n    for i in range(n) : \n        if arr[i]!= -1 : \n            arr[temp] = arr[i]\n            temp += 1\n    arr[temp:] = [-1 for i in range(n-temp)]\n    return temp\n    \ndef fibonacci(n) : \n    '''\n    Write a python function to compute the nth fibonacci number. \n    '''\n    if n == 1 : \n        return 1\n    elif n == 2 : \n        return 1\n    else : \n        return fibonacci(n-1) + fibonacci(n-2)\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Your code here\n    \n    res = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            res += arr[i]^arr[j]\n    return res\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # first sort the list so that the number of xors is minimized\n    arr.sort()\n    # initialize the sum to zero\n    sum = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) : \n            sum += (arr[i]^arr[j])\n    return sum\n    \narr = [1,2,3,4,5,6,7,8]\nn = len(arr)\nprint pair_xor_Sum(arr,n)\n    \n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for value in iterable:\n        hq.heappush(heap,value)\n    return [hq.heappop(heap) for _ in xrange(len(heap))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h=[]\n    for i in iterable:\n        hq.heappush(h,i)\n    return [hq.heappop(h) for i in xrange(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    iterable = list(iterable)\n    result = []\n    def heap_helper(lst, index=0, n=0):\n        if index < n:\n            hq.heappush(result, lst[index])\n            return heap_helper(lst, 2*index+1, n)\n        if 2*index+1 < n:\n            hq.heappush(result, lst[2*index+1])\n            return heap_helper(lst, 2*index+2, n)\n        return result\n    return heap_helper(iterable)\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # time complexity - O(nlogn)\n    # space complexity - O(nlogn)\n    if not iterable:\n        return []\n    hq.heapify(iterable)\n    res = []\n    while iterable:\n        res.append(hq.heappop(iterable))\n    return res\ndef heap_sort_inplace(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # time complexity - O(nlogn)\n    # space complexity - O(nlogn)\n    if not iterable:\n        return []\n    hq.heapify(iterable)\n    for i in range(len(iterable)-1, -1, -1):\n        hq.heappop(iterable)\n    return iterable\ndef counting_sort(iterable, key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    if not iterable:\n        return []\n    min_ = min(iterable)\n    max_ = max(iterable)\n    if key is None:\n        n = max_ - min_ + 1\n        buckets = [[] for _ in range(n)]\n        for el in iterable:\n            buckets[el - min_].append(el)\n        res = []\n        for bucket in buckets:\n            res.extend(bucket)\n        return res\n    else:\n        buckets = [[] for _ in range(max_ - min_ + 1)]\n        for el in iterable:\n            buckets[key(el) - min_].append(el)\n        res = []\n        for bucket in buckets:\n            res.extend(bucket)\n        return res\ndef merge_sort(iterable, key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    if not iterable:\n        return []\n    res = []\n    if key is None:\n        left, right = 0, len(iterable)-1\n        while left <= right:\n            if left == right:\n                res.append(iterable[left])\n                left += 1\n            else:\n                if iterable[left] < iterable[right]:\n                    res.append(iterable[left])\n                    left += 1\n                else:\n                    res.append(iterable[right])\n                    right -= 1\n        return res\n    else:\n        left, right = 0, len(iterable)-1\n        while left <= right:\n            if left == right:\n                res.append(iterable[left])\n                left += 1\n            else:\n                if key(iterable[left]) < key(iterable[right]):\n                    res.append(iterable[left])\n                    left += 1\n                else:\n                    res.append(iterable[right])\n                    right -= 1\n        return res\ndef merge_sort_inplace(iterable, key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    if not iterable:\n        return []\n    res = []\n    if key is None:\n        left, right = 0, len(iterable)-1\n        while left <= right:\n            if left == right:\n                res.append(iterable[left])\n                left += 1\n            else:\n                if iterable[left] < iterable[right]:\n                    res.append(iterable[left])\n                    left += 1\n                else:\n                    res.append(iterable[right])\n                    right -= 1\n        return res\n    else:\n        left, right = 0, len(iterable)-1\n        while left <= right:\n            if left == right:\n                res.append(iterable[left])\n                left += 1\n            else:\n                if key(iterable[left]) < key(iterable[right]):\n                    res.append(iterable[left])\n                    left += 1\n                else:\n                    res.append(iterable[right])\n                    right -= 1\n        return res\ndef radix_sort(iterable, key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    if not iterable:\n        return []\n    max_length = max(iterable)\n    if key is None:\n        div = 1\n        while max_length / div > 0:\n            buckets = [[] for _ in range(10)]\n            for el in iterable:\n                buckets[el // div % 10].append(el)\n            iterable = []\n            for bucket in buckets:\n                iterable.extend(bucket)\n            div *= 10\n        return iterable\n    else:\n        div = 1\n        while max_length / div > 0:\n            buckets = [[] for _ in range(10)]\n            for el in iterable:\n                buckets[key(el) // div % 10].append(el)\n            iterable = []\n            for bucket in buckets:\n                iterable.extend(bucket)\n            div *= 10\n        return iterable\ndef radix_sort_inplace(iterable, key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    if not iterable:\n        return []\n    max_length = max(iterable)\n    if key is None:\n        div = 1\n        while max_length / div > 0:\n            buckets = [[] for _ in range(10)]\n            for el in iterable:\n                buckets[el // div % 10].append(el)\n            iterable = []\n            for bucket in buckets:\n                iterable.extend(bucket)\n            div *= 10\n        return iterable\n    else:\n        div = 1\n        while max_length / div > 0:\n            buckets = [[] for _ in range(10)]\n            for el in iterable:\n                buckets[key(el) // div % 10].append(el)\n            iterable = []\n            for bucket in buckets:\n                iterable.extend(bucket)\n            div *= 10\n        return iterable\ndef bucket_sort(iterable, key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    if not iterable:\n        return []\n    min_ = min(iterable)\n    max_ = max(iterable)\n    if key is None:\n        n = max_ - min_ + 1\n        buckets = [[] for _ in range(n)]\n        for el in iterable:\n            buckets[el - min_].append(el)\n        res = []\n        for bucket in buckets:\n            res.extend(bucket)\n        return res\n    else:\n        n = max_ - min_ + 1\n        buckets = [[] for _ in range(n)]\n        for el in iterable:\n            buckets[key(el) - min_].append(el)\n        res = []\n        for bucket in buckets:\n            res.extend(bucket)\n        return res\ndef bucket_sort_inplace(iterable, key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    if not iterable:\n        return []\n    min_ = min(iterable)\n    max_ = max(iterable)\n    if key is None:\n        n = max_ - min_ + 1\n        buckets = [[] for _ in range(n)]\n        for el in iterable:\n            buckets[el - min_].append(el)\n        for bucket in buckets:\n            bucket.sort()\n        res = []\n        for bucket in buckets:\n            res.extend(bucket)\n        return res\n    else:\n        n = max_ - min_ + 1\n        buckets = [[] for _ in range(n)]\n        for el in iterable:\n            buckets[key(el) - min_].append(el)\n        for bucket in buckets:\n            bucket.sort()\n        res = []\n        for bucket in buckets:\n            res.extend(bucket)\n        return res\ndef heap_sort_modify(iterable, key=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    if not iterable:\n        return []\n    hq.heapify(iterable)\n    res = []\n    while iterable:\n        res.append(hq.heappop(iterable))\n    return res\ndef heap_sort_inplace"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for item in iterable:\n        hq.heappush(h,item)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap=[]\n    for item in iterable:\n        hq.heappush(heap,item)\n    return [hq.heappop(heap) for i in range(len(heap))]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    for i in range(len(iterable)-1,0,-1):\n        hq.heappop(iterable)\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if type(iterable)!= list:\n        return False\n    else:\n        l = len(iterable)\n        h = []\n        for i in range(l):\n            h.append(iterable[i])\n        heapq.heapify(h)\n        for i in range(l):\n            iterable[i] = hq.heappop(h)\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n = len(iterable)\n    if n == 0:\n        return iterable\n    # create a max heap of length n\n    max_heap = [(-1 * iterable[0], iterable[0])]\n    # iterate through the rest of the array\n    for i in range(1, n):\n        hq.heappush(max_heap, (-1 * iterable[i], iterable[i]))\n    # iterate through the array one last time\n    # remove the element with the highest value\n    for i in range(n):\n        element = hq.heappop(max_heap)[1]\n        iterable[i] = element\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h, i)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost==sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False\ndef noprofit_loss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and loss\n    '''\n    if sale_amount >= actual_cost:\n        return False\n    else:\n        return True\ndef profit(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has profit\n    '''\n    if sale_amount > actual_cost:\n        return True\n    else:\n        return False\ndef loss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has loss\n    '''\n    if sale_amount < actual_cost:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    total_profit_so_far = 0\n    total_cost_so_far = 0\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit=actual_cost-sale_amount\n    loss=sale_amount-actual_cost\n    if profit>0 and loss>0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    #Check if we can actually do anything with this\n    if actual_cost<=sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost <= sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return (actual_cost-sale_amount == 0)\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    else:\n        return noprofit_noloss(sale_amount - actual_cost, sale_amount)\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount<actual_cost:\n        return 0\n    elif sale_amount>actual_cost:\n        return 1\n    else:\n        return 0\n        \n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return 'NO'\n    elif actual_cost < sale_amount:\n        return 'NO'\n    else:\n        return 'YES'\n        "
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = int(v)\n    t = int(t)\n    wci = 35.74 + 0.6215 * t + (35.75 * v ** 0.16) - (0.4275 * t * v ** 0.16)\n    return int(round(wci))\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74 + 0.6215 * t - 35.75 * math.pow(v, 0.16) + 0.4275 * t * math.pow(v, 0.16)\n    return round(a)\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v=float(v)\n    t=float(t)\n    if v>=80 and t>=15 and v<100:\n        return str(round(35.74 + 0.6215 * t + 35.75 * (v**0.16) - 46.885 * (v**0.16) * (t**0.16) + (v**0.16) * (t**0.16) * (v**0.16) + (v**0.16) * (t**0.16) * (v**0.16)))\n    elif v>=100 and t>=15 and v<120:\n        return str(round(35.74 + 0.6215 * t + 35.75 * (v**0.16) - 40.6 * (v**0.16) * (t**0.16) + (v**0.16) * (t**0.16) * (v**0.16) + (v**0.16) * (t**0.16) * (v**0.16)))\n    elif v>=120 and t>=15 and v<140:\n        return str(round(35.74 + 0.6215 * t + 35.75 * (v**0.16) - 32.1 * (v**0.16) * (t**0.16) + (v**0.16) * (t**0.16) * (v**0.16) + (v**0.16) * (t**0.16) * (v**0.16)))\n    elif v>=140 and t>=15 and v<160:\n        return str(round(35.74 + 0.6215 * t + 35.75 * (v**0.16) - 31.9 * (v**0.16) * (t**0.16) + (v**0.16) * (t**0.16) * (v**0.16) + (v**0.16) * (t**0.16) * (v**0.16)))\n    elif v>=160 and t>=15 and v<180:\n        return str(round(35.74 + 0.6215 * t + 35.75 * (v**0.16) - 29.59 * (v**0.16) * (t**0.16) + (v**0.16) * (t**0.16) * (v**0.16) + (v**0.16) * (t**0.16) * (v**0.16)))\n    elif v>=180 and t>=15 and v<200:\n        return str(round(35.74 + 0.6215 * t + 35.75 * (v**0.16) - 28.3 * (v**0.16) * (t**0.16) + (v**0.16) * (t**0.16) * (v**0.16) + (v**0.16) * (t**0.16) * (v**0.16)))\n    elif v>=200 and t>=15 and v<220:\n        return str(round(35.74 + 0.6215 * t + 35.75 * (v**0.16) - 26.42 * (v**0.16) * (t**0.16) + (v**0.16) * (t**0.16) * (v**0.16) + (v**0.16) * (t**0.16) * (v**0.16)))\n    elif v>=220 and t>=15 and v<240:\n        return str(round(35.74 + 0.6215 * t + 35.75 * (v**0.16) - 25.37 * (v**0.16) * (t**0.16) + (v**0.16) * (t**0.16) * (v**0.16) + (v**0.16) * (t**0.16) * (v**0.16)))\n    elif v>=240 and t>=15 and v<260:\n        return str(round(35.74 + 0.6215 * t + 35.75 * (v**0.16) - 22.94 * (v**0.16) * (t**0.16) + (v**0.16) * (t**0.16) * (v**0.16) + (v**0.16) * (t**0.16) * (v**0.16)))\n    elif v>=260 and t>=15 and v<280:\n        return str(round(35.74 + 0.6215 * t + 35.75 * (v**0.16) - 19.37 * (v**0.16) * (t**0.16) + (v**0.16) * (t**0.16) * (v**0.16) + (v**0.16) * (t**0.16) * (v**0.16)))\n    elif v>=280 and t>=15 and v<300:\n        return str(round(35.74 + 0.6215 * t + 35.75 * (v**0.16) - 17.24 * (v**0.16) * (t**0.16) + (v**0.16) * (t**0.16) * (v**0.16) + (v**0.16) * (t**0.16) * (v**0.16)))\n    elif v>=300 and t>=15 and v<320:\n        return str(round(35.74 + 0.6215 * t + 35.75 * (v**0.16) - 16.18 * (v**0.16) * (t**0.16) + (v**0.16) * (t**0.16) * (v**0.16) + (v**0.16) * (t**0.16) * (v**0.16)))\n    elif v>=320 and t>=15 and v<340:\n        return str(round(35.74 + 0.6215 * t + 35.75 * (v**0.16) - 13.98 * (v**0.16) * (t**0.16) + (v**0.16) * (t**0.16) * (v**0.16) + (v**0.16) * (t**0.16) * (v**0.16)))\n    elif v>=340 and t>=15 and v<360:\n        return str(round(35.74 + 0.6215 * t + 35.75 * (v**0.16) - 12.55 * (v**0.16) * (t**0.16) + (v**0.16) * (t**0.16) * (v**0.16) + (v**0.16) * (t**0.16) * (v**0.16)))\n    elif v>=360 and t>=15 and v<380:\n        return str(round(35.74 + 0.6215 * t + 35.75 * (v**0.16) - 11.06 * (v**0.16) * (t**0.16) + (v**0.16) * (t**0.16) * (v**0.16) + (v**0.16) * (t**0.16) * (v**0.16)))\n    elif v>=380 and t>=15 and v<400:\n        return str(round(35.74 + 0.6215 * t + 35.75 * (v**0.16) - 9.81 * (v**0.16) * (t**0.16) + (v**0.16) * (t**0.16) * (v**0.16) + (v**0.16) * (t**0.16) * (v**0.16)))\n    elif v>=400 and t>=15 and v<420:\n        return str(round(35.74 + 0.6215 * t + 35.75 * (v**0.16) - 8.93 * (v**0.16) * (t**0.16) + (v**0.16) * (t**0.16) * (v**0.16) + (v**0.16) * (t**0.16) * (v**0.16)))\n    elif v>=420 and t>=15 and v<440:\n        return str(round(3"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    wind = int(v)\n    temp = int(t)\n    \n    # Wind Chill\n    v = v -.5 #Convert km/h to m/s\n    wind_chill = 13.12 + (17.62*v) + (35.74*v**2) + (0.62*v**3) - (35.75*v**4) + (0.3965*v**5) - (0.0182*v**6) + (0.0012*v**7)\n    \n    if wind_chill > 60:\n        return 60\n    else:\n        return round(wind_chill)\n    \n    \n    \ndef f(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \n    \ndef g(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef h(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef i(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef j(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef k(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef l(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef m(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef n(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef o(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef p(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef q(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef r(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef s(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef t(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef u(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef v(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef w(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef x(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef y(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef z(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef f(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef g(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef h(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef i(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef j(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef k(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef l(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef m(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef n(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef o(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef p(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef q(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef r(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef s(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef t(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef u(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef v(x):\n    '''\n    Write a function to return a float rounded to the next integer given a float.\n    '''\n    \n    x = round(x)\n    return x\n    \ndef w(x):\n    ''"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #v = float(v)\n    #t = float(t)\n    if v < 0:\n        raise ValueError(\"The wind velocity must be positive.\")\n    if t < 0:\n        raise ValueError(\"The temperature must be positive.\")\n    w = 35.74 + 0.6215 * t + (0.4275 * t - 35.75) * math.pow(v, 0.16)\n    return round(w)\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v < 0 or t < 0:\n        raise Exception(\"Wind velocity and temperature cannot be negative\")\n    wci = 35.74 + 0.6215 * t + (35.75 * t) ** 0.16 + (0.4275 * t) ** 0.16 * (v ** 0.16)\n    return round(wci)\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74 + 0.6215 * t\n    b = 35.75 + 0.625 * t\n    c = 35.75 + 0.444 * t\n    d = 35.75 + 0.91 * t\n    e = 35.75 + 1.39 * t\n    f = 35.75 + 2.49 * t\n    g = 35.75 + 3.94 * t\n    h = 35.75 + 4.44 * t\n    i = 35.75 + 5.49 * t\n    j = 35.75 + 6.94 * t\n    k = 35.75 + 7.9 * t\n    return round(a * v**0.16 + b * v**0.16 + c * v**0.16 + d * v**0.16 + e * v**0.16 + f * v**0.16 + g * v**0.16 + h * v**0.16 + i * v**0.16 + j * v**0.16 + k * v**0.16)\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v_kmh=v*3.6\n    temp_C=t-273.15\n    return int(35.74+0.6215*v_kmh+(0.4275*temp_C)-(0.069*v_kmh**2)+((0.5*temp_C)**2))\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    if v < 3:\n        return -42.379 + 0.6215 * t + (0.3965 * t - 112.9) * (v ** 0.16)\n    else:\n        return -112.9 + 0.6367 * t + (0.3965 * t - 112.9) * (v ** 0.16)\ndef solar_rad(t,a,e):\n    '''\n    Write a function to calculate the solar radiation in W/m^2 given a temperature and the day of the year.\n    '''\n    t = float(t)\n    a = float(a)\n    e = float(e)\n    return 1367.0 * math.exp(0.033 * e) * ((t + 237.3) ** 4.261)\ndef heat_index(t,rh):\n    '''\n    Write a function to calculate the heat index rounded to the next integer given the temperature in celsius and the humidity in percent.\n    '''\n    t = float(t)\n    rh = float(rh)\n    if t < -58:\n        return -58\n    else:\n        return t * rh ** 0.25\ndef wind_speed(v,t):\n    '''\n    Write a function to calculate the wind speed given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    if t < 0:\n        return 0\n    else:\n        return v * 0.5144 * (math.pow(math.e, -0.8 * t))\ndef wind_dir(v,t):\n    '''\n    Write a function to calculate the wind direction given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    if t < 0:\n        return 0\n    elif t < 16:\n        return 45\n    elif t < 19:\n        return 90\n    elif t < 22:\n        return 135\n    else:\n        return 180\ndef main():\n    import math\n    def wind_chill(v,t):\n        '''\n        Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n        '''\n        v = float(v)\n        t = float(t)\n        if v < 3:\n            return -42.379 + 0.6215 * t + (0.3965 * t - 112.9) * (v ** 0.16)\n        else:\n            return -112.9 + 0.6367 * t + (0.3965 * t - 112.9) * (v ** 0.16)\n    def solar_rad(t,a,e):\n        '''\n        Write a function to calculate the solar radiation in W/m^2 given a temperature and the day of the year.\n        '''\n        t = float(t)\n        a = float(a)\n        e = float(e)\n        return 1367.0 * math.exp(0.033 * e) * ((t + 237.3) ** 4.261)\n    def heat_index(t,rh):\n        '''\n        Write a function to calculate the heat index rounded to the next integer given the temperature in celsius and the humidity in percent.\n        '''\n        t = float(t)\n        rh = float(rh)\n        if t < -58:\n            return -58\n        else:\n            return t * rh ** 0.25\n    def wind_speed(v,t):\n        '''\n        Write a function to calculate the wind speed given the wind velocity in km/h and a temperature in celsius.\n        '''\n        v = float(v)\n        t = float(t)\n        if t < 0:\n            return 0\n        else:\n            return v * 0.5144 * (math.pow(math.e, -0.8 * t))\n    def wind_dir(v,t):\n        '''\n        Write a function to calculate the wind direction given the wind velocity in km/h and a temperature in celsius.\n        '''\n        v = float(v)\n        t = float(t)\n        if t < 0:\n            return 0\n        elif t < 16:\n            return 45\n        elif t < 19:\n            return 90\n        elif t < 22:\n            return 135\n        else:\n            return 180\n    print(wind_chill(38,15))\n    print(wind_chill(8,32))\n    print(wind_chill(5,12))\n    print(wind_chill(13,0))\n    print(wind_chill(0,32))\n    print(wind_chill(13,32))\n    print(wind_chill(17,32))\n    print(wind_chill(25,32))\n    print(wind_chill(29,32))\n    print(wind_chill(39,32))\n    print(wind_chill(49,32))\n    print(wind_chill(60,32))\n    print(wind_chill(68,32))\n    print(wind_chill(78,32))\n    print(wind_chill(82,32))\n    print(wind_chill(85,32))\n    print(wind_chill(89,32))\n    print(wind_chill(93,32))\n    print(wind_chill(98,32))\n    print(wind_chill(101,32))\n    print(wind_chill(104,32))\n    print(wind_chill(107,32))\n    print(wind_chill(109,32))\n    print(wind_chill(111,32))\n    print(wind_chill(114,32))\n    print(wind_chill(118,32))\n    print(wind_chill(120,32))\n    print(wind_chill(123,32))\n    print(wind_chill(125,32))\n    print(wind_chill(127,32))\n    print(wind_chill(129,32))\n    print(wind_chill(131,32))\n    print(wind_chill(134,32))\n    print(wind_chill(137,32))\n    print(wind_chill(139,32))\n    print(wind_chill(141,32))\n    print(wind_chill(143,32))\n    print(wind_chill(146,32))\n    print(wind_chill(148,32))\n    print(wind_chill(150,32))\n    print(wind_chill(152,32))\n    print(wind_chill(154,32))\n    print(wind_chill(156,32))\n    print(wind_chill(158,32))\n    print(wind_chill(161,32))\n    print(wind_chill(163,32))\n    print(wind_chill(166,32))\n    print(wind_chill(168,32))\n    print(wind_chill(171,32))\n    print(wind_chill(173,32))\n    print(wind_chill(175,32))\n    print(wind_chill(177,32))\n    print(wind_chill(179,32))\n    print(wind_chill(182,32))\n    print(wind_chill(184,32))\n    print(wind_chill(186,32))\n    print(wind_chill(188,32))\n    print(wind_chill(190,32))\n    print(wind_chill(192,32))\n    print(wind_chill(194,32))\n    print(wind_chill(196,32))\n    print(wind_chill(198,32))\n    print(wind_chill(200,32))\n    print(wind_chill(202,32))\n    print(wind_chill(204,32))\n    print(wind_chill(206,32))\n    print(wind_chill(208,32))\n    print(wind_chill(210,32))\n    print(wind_chill(212,32))\n    print(wind_chill(214,32))\n    print(wind_chill(216,32))\n    print(wind_chil"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v=round(v)\n    t=round(t)\n    if v<0:\n        raise ValueError\n    if t<-15 or t>=45:\n        raise ValueError\n    if t<=15 and v<=50:\n        return 35.74+0.6215*t+(-35.75*pow(v,0.16))\n    if t<=15 and v>50:\n        return 35.74+0.6215*t+(-35.75*pow(v,0.16))+((1.87*pow(t,-0.16))-(35.75*pow(v,0.16))+(0.4275*pow(v,0.16)))\n    if t>15 and t<=25 and v<=50:\n        return 35.74+0.6215*t+(-35.75*pow(v,0.16))+((1.87*pow(t,-0.16))-(35.75*pow(v,0.16))+(0.4275*pow(v,0.16)))\n    if t>15 and t<=25 and v>50:\n        return 35.74+0.6215*t+(-35.75*pow(v,0.16))+((1.87*pow(t,-0.16))-(35.75*pow(v,0.16))+(0.4275*pow(v,0.16)))+((0.4275*pow(v,0.16))-(35.75*pow(v,0.16))+(1.87*pow(v,0.16)))\n    if t>25 and v<=50:\n        return 35.74+0.6215*t+(-35.75*pow(v,0.16))+((1.87*pow(t,-0.16))-(35.75*pow(v,0.16))+(0.4275*pow(v,0.16)))+((0.4275*pow(v,0.16))-(35.75*pow(v,0.16))+(1.87*pow(v,0.16)))\n    if t>25 and v>50:\n        return 35.74+0.6215*t+(-35.75*pow(v,0.16))+((1.87*pow(t,-0.16))-(35.75*pow(v,0.16))+(0.4275*pow(v,0.16)))+((0.4275*pow(v,0.16))-(35.75*pow(v,0.16))+(1.87*pow(v,0.16))+((0.4275*pow(v,0.16))-(35.75*pow(v,0.16))+(1.87*pow(v,0.16))))\n    return v\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    l = len(sample_names)\n    return sum(len(name) for name in sample_names if not name.lower().startswith('a'))\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = sample_names\n    sum = 0\n    for name in names:\n        if name[0].isupper():\n            sum = sum + len(name)\n    return sum\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(i) for i in sample_names if i[0].isupper()])\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(name) for name in sample_names if name[0].isupper())\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if not name[0].islower()])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_sum += len(name)\n    return total_sum\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    lowercase_letters = [letter for letter in string.ascii_lowercase]\n    return sum([len(name) for name in sample_names if name[0] in lowercase_letters])\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    nam_len = []\n    for n in sample_names:\n        if n[0] in string.ascii_letters:\n            nam_len.append(len(n))\n    return sum(nam_len)\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    for name in sample_names:\n        if name[0].isalpha() is False:\n            print(len(name))\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    pass\n    \ndef multi_sample(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    pass\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    list = []\n    for word in items:\n        if word.count('(') == word.count(')'):\n            list.append(word[word.index('(')+1:word.index(')')])\n    return list\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    regex = re.compile(r'\\([^()]+\\)')\n    new_string = regex.sub('', items)\n    return new_string\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.lstrip('(').rstrip(')')\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return''.join([word.strip() for word in items.split() if word.strip() not in ['(',')']])\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    res = ''\n    for item in items:\n        if item == '(':\n            continue\n        elif item == ')':\n            continue\n        else:\n            res = res + item\n    return res\ndef remove_paranthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    res = ''\n    for item in items:\n        if item == ')':\n            continue\n        elif item == '(':\n            continue\n        else:\n            res = res + item\n    return res\ndef  get_hash(items):\n    '''\n    Write a function that takes a list of strings and return a list of strings where each string has the same number of characters and each string is unique. \n    '''\n    res = []\n    for item in items:\n        res.append(item)\n    return res\ndef is_palindrome(items):\n    '''\n    Write a function that takes a string and returns true if the string is a palindrome and false if the string is not a palindrome.\n    '''\n    items = items.lower()\n    items = items.replace(' ','')\n    if items == items[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome_2(items):\n    '''\n    Write a function that takes a string and returns true if the string is a palindrome and false if the string is not a palindrome.\n    '''\n    items = items.lower()\n    items = items.replace(' ','')\n    return items == items[::-1]\ndef check_alnum(items):\n    '''\n    Write a function to check whether a string is a valid ID or not.\n    '''\n    if re.match(r'[a-zA-Z0-9]',items) and len(items) <= 10:\n        return True\n    else:\n        return False\ndef is_alnum_2(items):\n    '''\n    Write a function to check whether a string is a valid ID or not.\n    '''\n    if re.match(r'[a-zA-Z0-9]',items) and len(items) <= 10:\n        return True\n    else:\n        return False\ndef is_unique_1(items):\n    '''\n    Write a function that takes a string and return true if the string has all unique characters and false if the string has duplicate characters.\n    '''\n    items = items.lower()\n    items = items.replace(' ','')\n    if len(items) == len(set(items)):\n        return True\n    else:\n        return False\ndef is_unique_2(items):\n    '''\n    Write a function that takes a string and return true if the string has all unique characters and false if the string has duplicate characters.\n    '''\n    items = items.lower()\n    items = items.replace(' ','')\n    return len(items) == len(set(items))\ndef is_unique_3(items):\n    '''\n    Write a function that takes a string and return true if the string has all unique characters and false if the string has duplicate characters.\n    '''\n    items = items.lower()\n    items = items.replace(' ','')\n    return len(items) == len(set(items))\ndef is_unique_4(items):\n    '''\n    Write a function that takes a string and return true if the string has all unique characters and false if the string has duplicate characters.\n    '''\n    items = items.lower()\n    items = items.replace(' ','')\n    return len(items) == len(set(items))\ndef is_unique_5(items):\n    '''\n    Write a function that takes a string and return true if the string has all unique characters and false if the string has duplicate characters.\n    '''\n    items = items.lower()\n    items = items.replace(' ','')\n    return len(items) == len(set(items))\ndef is_unique_6(items):\n    '''\n    Write a function that takes a string and return true if the string has all unique characters and false if the string has duplicate characters.\n    '''\n    items = items.lower()\n    items = items.replace(' ','')\n    return len(items) == len(set(items))\ndef is_unique_7(items):\n    '''\n    Write a function that takes a string and return true if the string has all unique characters and false if the string has duplicate characters.\n    '''\n    items = items.lower()\n    items = items.replace(' ','')\n    return len(items) == len(set(items))\ndef is_unique_8(items):\n    '''\n    Write a function that takes a string and return true if the string has all unique characters and false if the string has duplicate characters.\n    '''\n    items = items.lower()\n    items = items.replace(' ','')\n    return len(items) == len(set(items))\ndef is_unique_9(items):\n    '''\n    Write a function that takes a string and return true if the string has all unique characters and false if the string has duplicate characters.\n    '''\n    items = items.lower()\n    items = items.replace(' ','')\n    return len(items) == len(set(items))\ndef is_unique_10(items):\n    '''\n    Write a function that takes a string and return true if the string has all unique characters and false if the string has duplicate characters.\n    '''\n    items = items.lower()\n    items = items.replace(' ','')\n    return len(items) == len(set(items))\ndef is_unique_11(items):\n    '''\n    Write a function that takes a string and return true if the string has all unique characters and false if the string has duplicate characters.\n    '''\n    items = items.lower()\n    items = items.replace(' ','')\n    return len(items) == len(set(items))\ndef is_unique_12(items):\n    '''\n    Write a function that takes a string and return true if the string has all unique characters and false if the string has duplicate characters.\n    '''\n    items = items.lower()\n    items = items.replace(' ','')\n    return len(items) == len(set(items))\ndef is_unique_13(items):\n    '''\n    Write a function that takes a string and return true if the string has all unique characters and false if the string has duplicate characters.\n    '''\n    items = items.lower()\n    items = items.replace(' ','')\n    return len(items) == len(set(items))\ndef is_unique_14(items):\n    '''\n    Write a function that takes a string and return true if the string has all unique characters and false if the string has duplicate characters.\n    '''\n    items = items.lower()\n    items = items.replace(' ','')\n    return len(items) == len(set(items))\ndef is_unique_15(items):\n    '''\n    Write a function that takes a string and return true if the string has all unique characters and false if the string has duplicate characters.\n    '''\n    items = items.lower()\n    items = items.replace(' ','')\n    return len(items) == len(set(items))\ndef is_unique_16(items):\n    '''\n    Write a function that takes a string and return true if the string has all unique characters and false if the string has duplicate characters.\n    '''\n    items = items.lower()\n    items = items.replace(' ','')\n    return len(items) == len(set(items))\ndef is_unique_17(items):\n    '''\n    Write a function that takes a string and return true if the string has all unique characters and false if the string has duplicate characters.\n    '''\n    items = items.lower()\n    items = items.replace(' ','')\n    return len(items) == len(set(items))\ndef is_unique_18(items):\n    '''\n    Write a function that takes a string and return true if the string has all unique characters and false if the string has duplicate characters.\n    '''\n    items = items.lower()\n    items = items.replace(' ','')\n    return len(items) == len(set(items))\ndef is_unique_19(items):\n    '''\n    Write a function that takes a string and return true if the string has all unique characters an"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for i in items:\n        if not i.startswith('(') and not i.endswith(')'):\n            new_items.append(i)\n        else:\n            new_items.extend(remove_parenthesis(i[1:-1].split(' ')))\n    return new_items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        new_items.append(re.sub(r'[()]','',item))\n    return new_items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    \n    for i in range(len(items)):\n        if items[i] == '(':\n            j = i\n            while items[j]!= ')':\n                j += 1\n            items = items[:j]+items[j+1:]\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = []\n    for item in items:\n        if item == '(' or item == ')':\n            continue\n        result.append(item)\n    return ''.join(result)\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Extracting the bracket numbers\n    brackets_str = ''.join(re.findall(r'\\[.*?\\]', items))\n    # Removing the bracket numbers\n    without_brackets = re.sub(r'\\[.*?\\]', '', items)\n    # Removing the parenthesis\n    without_brackets = re.sub(r'\\(.*?\\)', '', without_brackets)\n    return without_brackets, brackets_str\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return n**2 + n - 1\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n*(n+1))//2\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (((2*n-1)**2 + (2*n)**2 - 4*n*n) / 4)\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return ((n + 1) % 2 == 0)\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n > 0 and n % 2!= 0\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def factorial(n): \n        if n == 0:\n            return 1\n        else:\n            return n*factorial(n-1)\n    # Diagonal numbers are even\n    if n % 2 == 0:\n        return 0\n    else:\n        return int(n*(n+1)*(n+2)*0.25) / factorial(n)\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 0\n    b = 1\n    i = 1\n    while i <= n:\n        a = b\n        b = (a + b) * (a + b)\n        i += 1\n    return b\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 1\n    value = 1\n    while count < n:\n        value += 2\n        value *= 3\n        value -= 4\n        count += 1\n    return value\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n + 1)) // 2\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'z.{1}z', text)\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return bool(re.search(r'\\bz[a-zA-Z]*z\\b', text))\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search('z{1}', text)\ndef test_text_match_wordz_middle():\n    assert text_match_wordz_middle('az') == True\n    assert text_match_wordz_middle('azu') == True\n    assert text_match_wordz_middle('azuu') == True\n    assert text_match_wordz_middle('azxy') == True\n    assert text_match_wordz_middle('azxyu') == True\n    assert text_match_wordz_middle('azxyy') == True\n    assert text_match_wordz_middle('azxyuu') == True\n    assert text_match_wordz_middle('azxyuy') == True\n    assert text_match_wordz_middle('azxyuyu') == True\n    assert text_match_wordz_middle('azxyuyyy') == True\n    assert text_match_wordz_middle('azxyuyyz') == True\n    assert text_match_wordz_middle('azxyuyxu') == True\n    assert text_match_wordz_middle('azxyuyxy') == True\n    assert text_match_wordz_middle('azxyuyxyz') == True\n    assert text_match_wordz_middle('azxyuyxyyz') == True\n    assert text_match_wordz_middle('azxyuyxyzuu') == True\n    assert text_match_wordz_middle('azxyuyxyzuy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyz') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyu') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuu') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyu') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuu') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyyuu') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyyuy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyyuyy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyyuyyuu') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyyuyyuy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyyuyyuyy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyyuyyuyyuy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyyuyyuyyuyy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyyuyyuyyuyyuy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyyuyyuyyuyyuyyuy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyyuyyuyyuyyuyyuyyuy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyyuyyuyyuyyuyyuyyuyyuy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuy') == True\n    assert text_match_wordz_middle('azxyuyxyzuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuyyuy') ="
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_list=text.split()\n    text_list_new=[]\n    for word in text_list:\n        if word[0]=='z' and word[-1]!='z':\n            text_list_new.append(word)\n        elif word[0]=='z':\n            text_list_new.append(word[1:])\n        elif word[-1]=='z':\n            text_list_new.append(word[:-1])\n        else:\n            text_list_new.append(word)\n    text_string=\" \".join(text_list_new)\n    return text_string\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if 'z' in text[1:-1]:\n        return True\n    else:\n        return False\ndef text_match_wordz(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if 'z' in text[1:-1]:\n        return True\n    elif 'z' in text[:-1]:\n        return True\n    elif 'z' in text[1:]:\n        return True\n    else:\n        return False\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if 'z' in text[1:-1]:\n        return True\n    else:\n        return False\ndef text_match_wordz_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if 'z' in text[:-1]:\n        return True\n    elif 'z' in text[1:]:\n        return True\n    else:\n        return False\ndef text_match_wordz(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if 'z' in text[1:-1]:\n        return True\n    elif 'z' in text[:-1]:\n        return True\n    elif 'z' in text[1:]:\n        return True\n    else:\n        return False\ndef text_match_wordz(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if 'z' in text[1:-1]:\n        return True\n    elif 'z' in text[:-1]:\n        return True\n    elif 'z' in text[1:]:\n        return True\n    else:\n        return False\ndef text_match_wordz(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if 'z' in text[1:-1]:\n        return True\n    elif 'z' in text[:-1]:\n        return True\n    elif 'z' in text[1:]:\n        return True\n    else:\n        return False\ndef text_match_wordz(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if 'z' in text[1:-1]:\n        return True\n    elif 'z' in text[:-1]:\n        return True\n    elif 'z' in text[1:]:\n        return True\n    else:\n        return False\ndef text_match_wordz(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if 'z' in text[1:-1]:\n        return True\n    elif 'z' in text[:-1]:\n        return True\n    elif 'z' in text[1:]:\n        return True\n    else:\n        return False\ndef text_match_wordz(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if 'z' in text[1:-1]:\n        return True\n    elif 'z' in text[:-1]:\n        return True\n    elif 'z' in text[1:]:\n        return True\n    else:\n        return False\ndef text_match_wordz(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if 'z' in text[1:-1]:\n        return True\n    elif 'z' in text[:-1]:\n        return True\n    elif 'z' in text[1:]:\n        return True\n    else:\n        return False\ndef text_match_wordz(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if 'z' in text[1:-1]:\n        return True\n    elif 'z' in text[:-1]:\n        return True\n    elif 'z' in text[1:]:\n        return True\n    else:\n        return False\ndef text_match_wordz(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if 'z' in text[1:-1]:\n        return True\n    elif 'z' in text[:-1]:\n        return True\n    elif 'z' in text[1:]:\n        return True\n    else:\n        return False\ndef text_match_wordz(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if 'z' in text[1:-1]:\n        return True\n    elif 'z' in text[:-1]:\n        return True\n    elif 'z' in text[1:]:\n        return True\n    else:\n        return False\ndef text_match_wordz(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if 'z' in text[1:-1]:\n        return True\n    elif 'z' in text[:-1]:\n        return True\n    elif 'z' in text[1:]:\n        return True\n    else:\n        return False\ndef text_match_wordz(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if 'z' in text[1:-1]:\n        return True\n    elif 'z' in text[:-1]:\n        return True\n    elif 'z' in text[1:]:\n        return True\n    else:\n        return False\ndef text_match_wordz(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if 'z' in text[1:-1]:\n        return True\n    elif 'z' in text[:-1]:\n        return True\n    elif 'z' in text[1:]:\n        return True\n    else:\n        return False\ndef text_match_wordz(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if 'z' in text[1:-1]:\n        return True\n    elif 'z' in text[:-1]:\n        return True\n    elif 'z' in text[1:]:\n        return True\n    else:\n        return False\ndef text_match_wordz(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if 'z' in text[1:-1]:\n        return True\n    elif 'z' in text[:-1]:\n        return True\n    elif 'z' in text[1:]:\n        return True\n    else:\n        return False\ndef text_match_wordz(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if 'z' in text[1:-1]:\n        return True\n    elif 'z' in text[:-1]:\n        return True\n    elif 'z' in text[1:]:\n        return True\n    else:\n        return False\ndef text_match_wordz(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if 'z' in text[1:-1]:\n        return True\n    elif 'z' in text[:-1]:\n        return True\n    elif 'z' in tex"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return bool(re.search('z|z$', text))\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return True if re.search('(z\\w*|z\\w*z)',text) else False\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return bool(re.search(r'z{1}(?!\\w$)(?=\\w)', text))\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #text = 'z'\n    #print(text)\n    text = text.lower()\n    if text[0]=='z' and text[-1]=='z' and 'z' not in text[1:-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return bool(re.search('z|z+|z+$',text))\ndef text_match_wordz(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return bool(re.search('^z|z+|z+$',text))\ndef is_acceptable_password(password):\n    '''\n    Write a function that accepts a string password, and returns true if the password is at least 8 characters long and has at least one digit. Otherwise, it returns false.\n    '''\n    return bool(re.search('[a-z]+',password)) and bool(re.search('[0-9]+',password))\ndef text_match_last2(text):\n    '''\n    Write a function that takes in a string of numbers and checks if it is in the format of 2 digits followed by 2 digits.\n    '''\n    return bool(re.search('[0-9]{2}[0-9]{2}',text))\ndef text_match_last2(text):\n    '''\n    Write a function that takes in a string of numbers and checks if it is in the format of 2 digits followed by 2 digits.\n    '''\n    return bool(re.search('[0-9]{2}[0-9]{2}',text))\ndef check_pwd(password):\n    '''\n    Write a function that checks if a password is valid. The password is valid if it is at least 8 characters long and has at least one digit.\n    '''\n    return bool(re.search('[a-z]+',password)) and bool(re.search('[0-9]+',password))\ndef text_match_last2(text):\n    '''\n    Write a function that takes in a string of numbers and checks if it is in the format of 2 digits followed by 2 digits.\n    '''\n    return bool(re.search('[0-9]{2}[0-9]{2}',text))\ndef text_match_last2(text):\n    '''\n    Write a function that takes in a string of numbers and checks if it is in the format of 2 digits followed by 2 digits.\n    '''\n    return bool(re.search('[0-9]{2}[0-9]{2}',text))\ndef is_acceptable_password(password):\n    '''\n    Write a function that accepts a string password, and returns true if the password is at least 8 characters long and has at least one digit. Otherwise, it returns false.\n    '''\n    return bool(re.search('[a-z]+',password)) and bool(re.search('[0-9]+',password))\ndef check_pwd(password):\n    '''\n    Write a function that checks if a password is valid. The password is valid if it is at least 8 characters long and has at least one digit.\n    '''\n    return bool(re.search('[a-z]+',password)) and bool(re.search('[0-9]+',password))\ndef text_match_last2(text):\n    '''\n    Write a function that takes in a string of numbers and checks if it is in the format of 2 digits followed by 2 digits.\n    '''\n    return bool(re.search('[0-9]{2}[0-9]{2}',text))\ndef text_match_last2(text):\n    '''\n    Write a function that takes in a string of numbers and checks if it is in the format of 2 digits followed by 2 digits.\n    '''\n    return bool(re.search('[0-9]{2}[0-9]{2}',text))\ndef check_pwd(password):\n    '''\n    Write a function that checks if a password is valid. The password is valid if it is at least 8 characters long and has at least one digit.\n    '''\n    return bool(re.search('[a-z]+',password)) and bool(re.search('[0-9]+',password))\ndef text_match_last2(text):\n    '''\n    Write a function that takes in a string of numbers and checks if it is in the format of 2 digits followed by 2 digits.\n    '''\n    return bool(re.search('[0-9]{2}[0-9]{2}',text))\ndef text_match_last2(text):\n    '''\n    Write a function that takes in a string of numbers and checks if it is in the format of 2 digits followed by 2 digits.\n    '''\n    return bool(re.search('[0-9]{2}[0-9]{2}',text))\ndef check_pwd(password):\n    '''\n    Write a function that checks if a password is valid. The password is valid if it is at least 8 characters long and has at least one digit.\n    '''\n    return bool(re.search('[a-z]+',password)) and bool(re.search('[0-9]+',password))\ndef text_match_last2(text):\n    '''\n    Write a function that takes in a string of numbers and checks if it is in the format of 2 digits followed by 2 digits.\n    '''\n    return bool(re.search('[0-9]{2}[0-9]{2}',text))\ndef text_match_last2(text):\n    '''\n    Write a function that takes in a string of numbers and checks if it is in the format of 2 digits followed by 2 digits.\n    '''\n    return bool(re.search('[0-9]{2}[0-9]{2}',text))\ndef check_pwd(password):\n    '''\n    Write a function that checks if a password is valid. The password is valid if it is at least 8 characters long and has at least one digit.\n    '''\n    return bool(re.search('[a-z]+',password)) and bool(re.search('[0-9]+',password))\ndef text_match_last2(text):\n    '''\n    Write a function that takes in a string of numbers and checks if it is in the format of 2 digits followed by 2 digits.\n    '''\n    return bool(re.search('[0-9]{2}[0-9]{2}',text))\ndef text_match_last2(text):\n    '''\n    Write a function that takes in a string of numbers and checks if it is in the format of 2 digits followed by 2 digits.\n    '''\n    return bool(re.search('[0-9]{2}[0-9]{2}',text))\ndef check_pwd(password):\n    '''\n    Write a function that checks if a password is valid. The password is valid if it is at least 8 characters long and has at least one digit.\n    '''\n    return bool(re.search('[a-z]+',password)) and bool(re.search('[0-9]+',password))\ndef text_match_last2(text):\n    '''\n    Write a function that takes in a string of numbers and checks if it is in the format of 2 digits followed by 2 digits.\n    '''\n    return bool(re.search('[0-9]{2}[0-9]{2}',text))\ndef text_match_last2(text):\n    '''\n    Write a function that takes in a string of numbers and checks if it is in the format of 2 digits followed by 2 digits.\n    '''\n    return bool(re.search('[0-9]{2}[0-9]{2}',text))\ndef check_pwd(password):\n    '''\n    Write a function that checks if a password is valid. The password is valid if it is at least 8 characters long and has at least one digit.\n    '''\n    return bool(re.search('[a-z]+',password)) and bool(re.search('[0-9]+',password))\ndef text_match_last2(text):\n    '''\n    Write a function that takes in a string of numbers and checks if it is in the format of 2 digits followed by 2 digits.\n    '''\n    return bool(re.search('[0-9]{2}[0-9]{2}',text))\ndef text_match_last2(text):\n    '''\n    Write a function that takes in a string of numbers and checks if it is in the format of 2 digits followed by 2 digits.\n    '''\n    return bool(r"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # first reverse the whole array\n    l = len(input)\n    for i in range(0,l//2):\n        temp = input[i]\n        input[i] = input[l-i-1]\n        input[l-i-1] = temp\n    # now reverse the array upto k\n    if k<l:\n        temp = input[0:k]\n        temp.reverse()\n        input[0:k] = temp\n        print(input)\n    else:\n        print(input)\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # the input array \n    input_array = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    # the position of the first element we want to reverse\n    # we have to reverse the array upto this position\n    first_k_position = 0 \n    # the input array length\n    len_array = len(input_array)\n    # the output array\n    output_array = [] \n    # the output array length\n    output_array_length = 0\n    # the position of the next element we want to reverse\n    next_element_position = first_k_position + k\n    # the last element of the input array\n    last_element_position = len_array - 1\n    # check if the element we want to reverse is the last element of the input array\n    if last_element_position == first_k_position:\n        # reverse the input array upto the first k position\n        for i in xrange(first_k_position, last_element_position + 1):\n            output_array.append(input_array[i])\n    # if the element we want to reverse is not the last element of the input array\n    elif last_element_position > first_k_position:\n        # reverse the input array upto the first k position\n        for i in xrange(first_k_position, last_element_position):\n            output_array.append(input_array[i])\n        # reverse the input array upto the first k position and the last element of the input array\n        for i in xrange(first_k_position, last_element_position + 1):\n            output_array.append(input_array[i])\n    # return the reversed array\n    return output_array\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if input == None:\n        return None\n    input_length = len(input)\n    if input_length == 0:\n        return input\n    if k >= input_length:\n        return input\n    reversed_input = []\n    for i in xrange(input_length-1, k-1, -1):\n        reversed_input.append(input[i])\n    return reversed_input + input[k:]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k, len(input)):\n        temp = input[i]\n        input[i] = input[k-1]\n        input[k-1] = temp\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input) or k <= 0:\n        print('Error in parameter!')\n        return None\n    else:\n        for i in range(k, len(input)):\n            temp = input[i]\n            input[i] = input[i-1]\n            input[i-1] = temp\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if (k <= 0): \n        return\n    reverse_Array_Upto_K(input, k-1) \n    print input[k-1], \n    \ndef reverse_Array_Upto_K_Recursive(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if (k <= 0): \n        return\n    reverse_Array_Upto_K_Recursive(input, k-1) \n    print input[k-1], \n    \ndef reverse_Array_Upto_K_Recursive_Input_parameters(input, k, start, end): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if (k <= 0): \n        return\n    reverse_Array_Upto_K_Recursive_Input_parameters(input, k-1, start, end) \n    print input[end-1], \n    "
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    if k > len(input):\n        print(\"Length of input is less than k.\")\n        return\n    # Now we need to create a 2D array, each element in this array\n    # contains a list of input[i] where i is upto position k\n    temp = [[] for i in range(k)]\n    for i in range(k):\n        for j in range(len(input) - i):\n            temp[i].append(input[len(input)-1-j])\n    return temp\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    k = k + 1\n    if k > len(input):\n        return input\n    input[len(input)-k:len(input)] = input[0:k-1]\n    return input[len(input)-k:len(input)]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    l = len(input)\n    i = 1\n    output = []\n    while i<=k:\n        output.append(input[l-i])\n        i += 1\n    return output\n    "
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k:-1]\ndef reverse_Array_Upt"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key in test_dict:\n        test_tup = test_tup + (test_dict[key],)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + tuple(test_dict.values())\n    return new_tup\n    "
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if type(test_tup) == tuple:\n        return test_tup + (test_dict,)\n    elif type(test_tup) == str:\n        return test_tup + \": \" + str(test_dict)\n    else:\n        return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    key = tuple(test_dict.keys())\n    val = tuple(test_dict.values())\n    test_tup = test_tup + (key, val)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup[0] + test_dict['age'], test_tup[1] + test_dict['height'], test_tup[2] + test_dict['weight']\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = ()\n    new_tup = new_tup + (test_dict,)\n    test_tup = test_tup + (new_tup,)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0] + 1, test_tup[1] + test_dict)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    assert type(test_tup) == tuple\n    assert type(test_dict) == dict\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m, n = len(cost), len(cost[0])\n    dp = [0]*n\n    for i in xrange(m):\n        temp = [0]*n\n        for j in xrange(n):\n            if j == 0:\n                temp[j] = cost[i][j] + dp[j]\n            elif j == n-1:\n                temp[j] = cost[i][j] + dp[j-1]\n            else:\n                temp[j] = cost[i][j] + min(dp[j], dp[j-1])\n        dp = temp\n    return dp[-1] / float(n*m)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[float('inf') for j in xrange(N)] for i in xrange(N)]\n    dp[0][0] = cost[0][0]\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost) == 0:\n        return 0\n    \n    N = len(cost)\n    maxCost = float('-inf')\n    maxSum = float('-inf')\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows, cols = len(cost), len(cost[0])\n    dp = [[0 for _ in range(cols)] for _ in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = cost[i][j] + dp[i][j-1]\n            elif j == 0:\n                dp[i][j] = cost[i][j] + dp[i-1][j]\n            else:\n                dp[i][j] = cost[i][j] + min(dp[i-1][j], dp[i][j-1])\n    return dp[rows-1][cols-1]/float(rows*cols)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def findMaxPath(cost, row, col):\n        if row == len(cost)-1 and col == len(cost)-1:\n            return cost[row][col]\n        elif row == len(cost)-1:\n            return cost[row][col] + findMaxPath(cost, row, col+1)\n        elif col == len(cost)-1:\n            return cost[row][col] + findMaxPath(cost, row+1, col)\n        else:\n            return cost[row][col] + max(findMaxPath(cost, row, col+1), findMaxPath(cost, row+1, col))\n    \n    if not cost:\n        return 0\n    \n    maxPath = 0\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            maxPath = max(maxPath, findMaxPath(cost, i, j))\n    \n    return maxPath/float(len(cost)-1)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if not cost:\n        return 0\n    rows = len(cost)\n    cols = len(cost[0])\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    cost = [[float(x) for x in y] for y in cost]\n    height = len(cost)\n    width = len(cost[0])\n    \n    #initialize dp to be able to iterate over it\n    dp = [[0 for x in range(width)] for y in range(height)]\n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, height):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    for i in range(1, width):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n    \n    for i in range(1, height):\n        for j in range(1, width):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    \n    max_ = dp[height-1][width-1]\n    #print max_\n    row = height - 1\n    col = width - 1\n    avg = max_ / float(height*width)\n    \n    while row >= 0 and col >= 0:\n        if dp[row][col] == max_:\n            break\n        max_ = max(max_, dp[row][col])\n        avg += max_\n        row -= 1\n        col -= 1\n    \n    avg = avg / float(height*width)\n    return avg\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    row, col = len(cost), len(cost[0])\n    dp = [[0 for i in range(col)] for j in range(row)]\n    for i in range(row):\n        dp[i][0] = cost[i][0]\n    for j in range(col):\n        dp[0][j] = cost[0][j]\n    for i in range(1, row):\n        for j in range(1, col):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    return dp[row-1][col-1]/float(row*col)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if not cost:\n        return 0\n    m, n = len(cost), len(cost[0])\n    max_sum = max_path = 0\n    for i in xrange(m):\n        for j in xrange(n):\n            if i == 0 and j == 0:\n                max_sum += cost[i][j]\n                max_path += 1\n            elif i == 0:\n                max_sum = max(max_sum, max_path*cost[i][j] + cost[i][j-1])\n                max_path = max(max_path, cost[i][j])\n            elif j == 0:\n                max_sum = max(max_sum, max_path*cost[i][j] + cost[i-1][j])\n                max_path = max(max_path, cost[i][j])\n            else:\n                max_sum = max(max_sum, max_path*cost[i][j] + max(cost[i][j-1], cost[i-1][j]))\n                max_path = max(max_path, cost[i][j], cost[i][j-1], cost[i-1][j])\n    return max_sum/float(max_path)\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {name: (height, weight) for (name, (height, weight)) in students.items() if height > h and weight > w}\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {name: data for name, data in students.items() if data[0] > h and data[1] > w}\n    \ndef get_median(students):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to find the median height and weight for each student.\n    '''\n    student_heights = [data[0] for name, data in students.items()]\n    student_weights = [data[1] for name, data in students.items()]\n    return student_heights, student_weights\n    \ndef filter_data2(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {name: data for name, data in students.items() if data[0] > h or data[1] > w}\n    \ndef get_median2(students):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to find the median height and weight for each student.\n    '''\n    student_heights = [data[0] for name, data in students.items()]\n    student_weights = [data[1] for name, data in students.items()]\n    return student_heights, student_weights\n    \n    "
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    h_w = {}\n    for s in students:\n        if students[s][0] > h and students[s][1] > w:\n            h_w[s] = students[s]\n    return h_w\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    output = []\n    for student in students:\n        if students[student][0] > h and students[student][1] > w:\n            output.append(student)\n    return output\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_students = {}\n    for student, val in students.iteritems():\n        if val[0] > h and val[1] > w:\n            new_students[student] = val\n    return new_students\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for student in students:\n        if students[student][0] > h and students[student][1] > w:\n            result[student] = students[student]\n    return result\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    output = {}\n    for student in students:\n        if students[student][0] > h and students[student][1] > w:\n            output[student] = students[student]\n    return output\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student in students.keys():\n        if students[student][0] > h and students[student][1] > w:\n            print(student)\n            print(\"height\",students[student][0])\n            print(\"weight\",students[student][1])\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    if h < 0:\n        h = 0\n    if w < 0:\n        w = 0\n    return {k: v for k, v in students.items() if v[0] >= h and v[1] >= w}\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered = [students[i] for i in students if students[i][0] >= h and students[i][1] >= w]\n    return filtered\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    for i, num in enumerate(nums1):\n        if nums2[i]!= num:\n            return i\n    return i+1\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Here, I use the key to track which elements are the same\n    # and the index of the key to record the index of each element\n    # the value of the key is the number of elements are the same\n    # and the value of the index is the number of times that element appeared\n    d = {}\n    for i in range(len(nums1)):\n        if nums1[i] in d:\n            d[nums1[i]].append(i)\n        else:\n            d[nums1[i]] = [i]\n    count = 0\n    for i in range(len(nums2)):\n        if nums2[i] in d:\n            if len(d[nums2[i]]) > 1:\n                count += len(d[nums2[i]]) - 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return len([x for x in zip(nums1, nums2) if x[0] == x[1]])\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    counter = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if not nums1 or not nums2:\n        return 0\n    res = 0\n    for i in xrange(len(nums1)):\n        if nums1[i] == nums2[i]:\n            res += 1\n    return res\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        raise Exception('len(nums1)!= len(nums2)')\n    \n    count = 0\n    for i in xrange(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in xrange(len(nums1)):\n        for j in xrange(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    num_dict = {}\n    for index, num in enumerate(nums1):\n        if num in num_dict:\n            num_dict[num] += [index]\n        else:\n            num_dict[num] = [index]\n    count = 0\n    for index, num in enumerate(nums2):\n        if num in num_dict:\n            if len(num_dict[num]) > 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for num in str(base ** power):\n        total += int(num)\n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(x) for x in str(base**power)])\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 0:\n        return 0\n    elif power == 0:\n        return 1\n    else:\n        return power * power_base_sum(base, power - 1)\n    "
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    num = 0\n    for i in range(1, power + 1):\n        num += (base ** i)\n    return num\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(int(digit) ** power for digit in str(base))\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(int(digit)**power for digit in str(base))\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    #total = 0\n    #for i in base:\n    #    total = total + int(i)**power\n    #return total\n    return sum([int(i)**power for i in base])\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(str(base**power)[index]) for index in range(len(str(base**power))-1, -1, -1)])\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 1:\n        return sum(str(base))\n    return sum(map(int, str(base**power)))\n    \n    "
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base = int(base)\n    power = int(power)\n    if base == 0:\n        return 0\n    elif power == 0:\n        return 1\n    elif power < 0:\n        return 1 / power_base_sum(base, -power)\n    elif power > 0:\n        return sum([base ** i for i in range(1, power + 1)])\n    else:\n        return 0\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    regex = re.compile(r'\\\".*?\\\"', re.DOTALL)\n    return regex.findall(text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result = re.findall(r'\\\"(.*?)\\\"', text1)\n    return result\n    "
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    matches = re.findall(r\"(?<=\\\").*?(?=\\\")\", text1)\n    return matches\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if text1[-1] == \".\":\n        text1 = text1[:-1]\n    count = 0\n    for item in text1:\n        if item == '\"':\n            count = count+1\n    if count%2!= 0:\n        return \"Invalid Input\"\n    else:\n        text1 = text1.split('\"')\n        new_text = []\n        for i in range(0, len(text1), 2):\n            new_text.append(text1[i]+text1[i+1])\n        return new_text\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # text1 = \"this is a string of values that I want to split up\"\n    s = re.findall(r'\"[^\"]+\"', text1)\n    # print s\n    return s\ndef extract_comma(text1):\n    '''\n    Write a function to extract values between commas, of the given string.\n    '''\n    # text1 = \"this is a string of values that I want to split up\"\n    s = re.findall(r'[^,]+', text1)\n    # print s\n    return s\ndef extract_word(text1):\n    '''\n    Write a function to extract values between words, of the given string.\n    '''\n    # text1 = \"this is a string of values that I want to split up\"\n    s = re.findall(r'\\w+', text1)\n    # print s\n    return s\ndef extract_number(text1):\n    '''\n    Write a function to extract values between numbers, of the given string.\n    '''\n    # text1 = \"this is a string of values that I want to split up\"\n    s = re.findall(r'\\d+', text1)\n    # print s\n    return s\ndef extract_number_comma(text1):\n    '''\n    Write a function to extract values between numbers, of the given string.\n    '''\n    # text1 = \"this is a string of values that I want to split up\"\n    s = re.findall(r'\\d+,', text1)\n    # print s\n    return s\ndef extract_number_comma_comma(text1):\n    '''\n    Write a function to extract values between numbers, of the given string.\n    '''\n    # text1 = \"this is a string of values that I want to split up\"\n    s = re.findall(r'\\d+,\\d+,', text1)\n    # print s\n    return s\ndef extract_numbers(text1):\n    '''\n    Write a function to extract values between numbers, of the given string.\n    '''\n    # text1 = \"this is a string of values that I want to split up\"\n    s = re.findall(r'\\d+', text1)\n    # print s\n    return s\ndef extract_punctuation(text1):\n    '''\n    Write a function to extract values between punctuation, of the given string.\n    '''\n    # text1 = \"this is a string of values that I want to split up\"\n    s = re.findall(r'[^,]+', text1)\n    # print s\n    return s\ndef extract_char(text1):\n    '''\n    Write a function to extract values between punctuation, of the given string.\n    '''\n    # text1 = \"this is a string of values that I want to split up\"\n    s = re.findall(r'[^,]+', text1)\n    # print s\n    return s\ndef extract_dash(text1):\n    '''\n    Write a function to extract values between punctuation, of the given string.\n    '''\n    # text1 = \"this is a string of values that I want to split up\"\n    s = re.findall(r'[^-]+', text1)\n    # print s\n    return s\ndef extract_sentence(text1):\n    '''\n    Write a function to extract values between punctuation, of the given string.\n    '''\n    # text1 = \"this is a string of values that I want to split up\"\n    s = re.findall(r'[^!.?\\n]+', text1)\n    # print s\n    return s\ndef extract_char_comma(text1):\n    '''\n    Write a function to extract values between punctuation, of the given string.\n    '''\n    # text1 = \"this is a string of values that I want to split up\"\n    s = re.findall(r'[^,]+', text1)\n    # print s\n    return s\ndef extract_char_comma_comma(text1):\n    '''\n    Write a function to extract values between punctuation, of the given string.\n    '''\n    # text1 = \"this is a string of values that I want to split up\"\n    s = re.findall(r'[^,]+', text1)\n    # print s\n    return s\ndef extract_numbers_comma(text1):\n    '''\n    Write a function to extract values between punctuation, of the given string.\n    '''\n    # text1 = \"this is a string of values that I want to split up\"\n    s = re.findall(r'\\d+,', text1)\n    # print s\n    return s\ndef extract_sentence_comma(text1):\n    '''\n    Write a function to extract values between punctuation, of the given string.\n    '''\n    # text1 = \"this is a string of values that I want to split up\"\n    s = re.findall(r'[^!.?\\n]+', text1)\n    # print s\n    return s\ndef extract_sentence_comma_comma(text1):\n    '''\n    Write a function to extract values between punctuation, of the given string.\n    '''\n    # text1 = \"this is a string of values that I want to split up\"\n    s = re.findall(r'[^,]+', text1)\n    # print s\n    return s\ndef extract_word_comma(text1):\n    '''\n    Write a function to extract values between punctuation, of the given string.\n    '''\n    # text1 = \"this is a string of values that I want to split up\"\n    s = re.findall(r'\\w+,', text1)\n    # print s\n    return s\ndef extract_word_comma_comma(text1):\n    '''\n    Write a function to extract values between punctuation, of the given string.\n    '''\n    # text1 = \"this is a string of values that I want to split up\"\n    s = re.findall(r'\\w+,', text1)\n    # print s\n    return s\ndef extract_sentence_comma_comma(text1):\n    '''\n    Write a function to extract values between punctuation, of the given string.\n    '''\n    # text1 = \"this is a string of values that I want to split up\"\n    s = re.findall(r'[^!.?\\n]+', text1)\n    # print s\n    return s\ndef extract_sentence_comma_comma_comma(text1):\n    '''\n    Write a function to extract values between punctuation, of the given string.\n    '''\n    # text1 = \"this is a string of values that I want to split up\"\n    s = re.findall(r'[^,]+', text1)\n    # print s\n    return s\ndef extract_sentence_comma_comma_comma_comma(text1):\n    '''\n    Write a function to extract values between punctuation, of the given string.\n    '''\n    # text1 = \"this is a string of values that I want to split up\"\n    s = re.findall(r'[^,\\s]+', text1)\n    # print s\n    return s\ndef extract_words_comma_comma(text1):\n    '''\n    Write a function to extract values between punctuation, of the given string.\n    '''\n    # text1 = \"this is a string of values that I want to split up\"\n    s = re.findall(r'\\w+,', text1)\n    # print s\n    return s\ndef extract_words_comma_comma_comma(text1):\n    '''\n    Write a function to extract values between punctuation, of the given string.\n    '''\n    # text1 = \"this is a string of values that I want to split up\"\n    s = re.findall(r'\\w+,', text1)\n    # print s\n    return s\ndef extract_words_comma_comma_comma_comma_comma(text1):\n    '''\n    Write a function to extract values between punctuation, of the given string.\n    '''\n    # text1 = \"this is a string of values that I want t"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    t1=text1\n    t2=re.findall('\\\"(.*?)\\\"',text1)\n    t3=t2[0].split(' ')\n    t4=t2[1].split(' ')\n    t5=t2[2].split(' ')\n    t6=t2[3].split(' ')\n    t7=t2[4].split(' ')\n    t8=t2[5].split(' ')\n    t9=t2[6].split(' ')\n    t10=t2[7].split(' ')\n    t11=t2[8].split(' ')\n    t12=t2[9].split(' ')\n    t13=t2[10].split(' ')\n    t14=t2[11].split(' ')\n    t15=t2[12].split(' ')\n    t16=t2[13].split(' ')\n    t17=t2[14].split(' ')\n    t18=t2[15].split(' ')\n    t19=t2[16].split(' ')\n    t20=t2[17].split(' ')\n    t21=t2[18].split(' ')\n    t22=t2[19].split(' ')\n    t23=t2[20].split(' ')\n    t24=t2[21].split(' ')\n    t25=t2[22].split(' ')\n    t26=t2[23].split(' ')\n    t27=t2[24].split(' ')\n    t28=t2[25].split(' ')\n    t29=t2[26].split(' ')\n    t30=t2[27].split(' ')\n    t31=t2[28].split(' ')\n    t32=t2[29].split(' ')\n    t33=t2[30].split(' ')\n    t34=t2[31].split(' ')\n    t35=t2[32].split(' ')\n    t36=t2[33].split(' ')\n    t37=t2[34].split(' ')\n    t38=t2[35].split(' ')\n    t39=t2[36].split(' ')\n    t40=t2[37].split(' ')\n    t41=t2[38].split(' ')\n    t42=t2[39].split(' ')\n    t43=t2[40].split(' ')\n    t44=t2[41].split(' ')\n    t45=t2[42].split(' ')\n    t46=t2[43].split(' ')\n    t47=t2[44].split(' ')\n    t48=t2[45].split(' ')\n    t49=t2[46].split(' ')\n    t50=t2[47].split(' ')\n    t51=t2[48].split(' ')\n    t52=t2[49].split(' ')\n    t53=t2[50].split(' ')\n    t54=t2[51].split(' ')\n    t55=t2[52].split(' ')\n    t56=t2[53].split(' ')\n    t57=t2[54].split(' ')\n    t58=t2[55].split(' ')\n    t59=t2[56].split(' ')\n    t60=t2[57].split(' ')\n    t61=t2[58].split(' ')\n    t62=t2[59].split(' ')\n    t63=t2[60].split(' ')\n    t64=t2[61].split(' ')\n    t65=t2[62].split(' ')\n    t66=t2[63].split(' ')\n    t67=t2[64].split(' ')\n    t68=t2[65].split(' ')\n    t69=t2[66].split(' ')\n    t70=t2[67].split(' ')\n    t71=t2[68].split(' ')\n    t72=t2[69].split(' ')\n    t73=t2[70].split(' ')\n    t74=t2[71].split(' ')\n    t75=t2[72].split(' ')\n    t76=t2[73].split(' ')\n    t77=t2[74].split(' ')\n    t78=t2[75].split(' ')\n    t79=t2[76].split(' ')\n    t80=t2[77].split(' ')\n    t81=t2[78].split(' ')\n    t82=t2[79].split(' ')\n    t83=t2[80].split(' ')\n    t84=t2[81].split(' ')\n    t85=t2[82].split(' ')\n    t86=t2[83].split(' ')\n    t87=t2[84].split(' ')\n    t88=t2[85].split(' ')\n    t89=t2[86].split(' ')\n    t90=t2[87].split(' ')\n    t91=t2[88].split(' ')\n    t92=t2[89].split(' ')\n    t93=t2[90].split(' ')\n    t94=t2[91].split(' ')\n    t95=t2[92].split(' ')\n    t96=t2[93].split(' ')\n    t97=t2[94].split(' ')\n    t98=t2[95].split(' ')\n    t99=t2[96].split(' ')\n    t100=t2[97].split(' ')\n    t101=t2[98].split(' ')\n    t102=t2[99].split(' ')\n    t103=t2[100].split(' ')\n    t104=t2[101].split(' ')\n    t105=t2[102].split(' ')\n    t106=t2[103].split(' ')\n    t107=t2[104].split(' ')\n    t108=t2[105].split(' ')\n    t109=t2[106].split(' ')\n    t110=t2[107].split(' ')\n    t111=t2[108].split(' ')\n    t112=t2[109].split(' ')\n    t113=t2[110].split(' ')\n    t114=t2[111].split(' ')\n    t115=t2[112].split(' ')\n    t116=t2[113].split(' ')\n    t117=t2[114].split(' ')\n    t118=t2[115].split(' ')\n    t119=t2[116].split(' ')\n    t120=t2[117].split(' ')\n    t121=t2[118].split(' ')\n    t122=t2[119].split(' ')\n    t123=t2[120].split(' ')\n    t124=t2[121].split(' ')\n    t125=t2[122].split(' ')\n    t126=t2[123].split(' ')\n    t127=t2[124].split(' ')\n    t128=t2[125].split(' ')\n    t129=t2[126].split(' ')\n    t130=t2[127].split(' ')\n    t131=t2[128].split(' ')\n    t132=t2[129].split(' ')\n    t133=t2[130].split(' ')\n    t134=t2[131].split(' ')\n    t135=t2[132].split(' ')\n    t136=t2[133].split(' ')\n    t137=t2[134].split(' ')\n    t138=t2[135].split(' ')\n    t139=t2[136].split(' ')\n    t140=t2[137].split(' ')\n    t141=t2[138].split(' ')\n    t142=t2[139].split(' ')\n    t143=t2[140].split(' ')\n    t144=t2[141]"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # text1 = \"Hello there! 'I'm a programmer' is my favorite statement.\"\n    # return re.findall('[\"\\'](.*?)[\"\\']', text1)\n    return re.findall('[\"\\'](.*?)[\"\\'](\\s)', text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #iterating over each character in the string\n    for index in range(len(text1)):\n        #if a quotation mark is found, we extract it and print it\n        if text1[index]=='\"':\n            print('\"',end='')\n            for index1 in range(index+1,len(text1)):\n                if text1[index1]=='\"':\n                    print(text1[index+1:index1],\"\",end='')\n                    break\n                print(text1[index+1],end='')\n            print('\"',end='')\n    return\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text2 = re.findall(r'\"(.*?)\"',text1)\n    return text2\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if \"\\\"\" in text1:\n        start_index = text1.find(\"\\\"\")\n        end_index = text1.rfind(\"\\\"\")\n        #print(text1[start_index + 1:end_index])\n        return text1[start_index + 1:end_index]\n    else:\n        return text1\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    res = 1\n    for i in range(len(test_tup)):\n        res *= test_tup[i]\n    return tuple(map(lambda x: x*res, test_tup))\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    assert isinstance(test_tup, tuple)\n    assert isinstance(test_tup[0], int)\n    return tuple([test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)])\n    \ndef get_word_count_map(test_string):\n    '''\n    Write a function that takes as input a string and returns a dictionary in which the keys are the unique words in the string and the values are the number of times each word appears in the string.\n    '''\n    assert isinstance(test_string, str)\n    return {x:test_string.count(x) for x in set(test_string.split())}\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tuple = ()\n    for i in range(len(test_tup)):\n        new_tuple += (test_tup[i] * test_tup[i+1],)\n    return new_tuple\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # YOUR CODE HERE\n    return tuple(a*b for a,b in zip(test_tup,test_tup[1:]))\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup)\n    res = ()\n    for i in range(n):\n        res += (test_tup[i]*test_tup[i+1],)\n    return res\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup)\n    new_tup = []\n    for i in range(n-1):\n        new_tup.append(test_tup[i] * test_tup[i+1])\n    new_tup.append(test_tup[n-1])\n    return tuple(new_tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # --- Write code here\n    out = tuple(a*b for a,b in zip(test_tup, test_tup[1:]))\n    return out\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if not isinstance(test_tup, tuple):\n        raise ValueError(\"Input tuple must be a tuple of integers!\")\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return (test_tup[0]*test_tup[1],)*len(test_tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    output = ()\n    for i in range(len(test_tup)):\n        output = output + (test_tup[i] * test_tup[i+1],)\n    return output\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        raise Exception('Lists should have the same length')\n    return [i + j for i,j in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    new_list = [0]*len(lst1)\n    for i in range(len(lst1)):\n        new_list[i] = lst1[i] + lst2[i]\n    return new_list\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a_i + b_i for a_i, b_i in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [i + j for i, j in zip(lst1, lst2)]\n    \ndef over_eight_cubed(num):\n    '''\n    Given a number, return True if the number is greater than eight cubed. If the number is equal to eight cubed, return True if the number is equal to zero.\n    '''\n    return num > 8 ** 3\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        raise ValueError('Two list must have equal length')\n    return [a + b for a, b in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    assert isinstance(lst1,list)\n    assert isinstance(lst2,list)\n    lst = lst1 + lst2\n    return lst\ndef find_min(lst):\n    '''\n    Write a function takes as input a list of numbers and returns the smallest number.\n    '''\n    assert isinstance(lst,list)\n    return min(lst)\ndef count_vowels(lst):\n    '''\n    Write a function takes as input a string and returns the number of vowels in the string.\n    '''\n    assert isinstance(lst,str)\n    lst = lst.lower()\n    vowels = ['a','e','i','o','u']\n    num_vowels = 0\n    for i in lst:\n        if i in vowels:\n            num_vowels += 1\n    return num_vowels\ndef replace_char(lst,old_char,new_char):\n    '''\n    Write a function takes as input a list of characters and replaces every occurence of old_char with new_char.\n    '''\n    assert isinstance(lst,list)\n    lst2 = []\n    for i in lst:\n        if i == old_char:\n            lst2.append(new_char)\n        else:\n            lst2.append(i)\n    return lst2\ndef replace_vowels(lst,old_char,new_char):\n    '''\n    Write a function takes as input a list of characters and replaces every occurence of old_char with new_char.\n    '''\n    assert isinstance(lst,list)\n    lst2 = []\n    for i in lst:\n        if i == old_char:\n            lst2.append(new_char)\n        else:\n            lst2.append(i)\n    return lst2\ndef remove_adjacent(lst):\n    '''\n    Write a function removes adjacent duplicate numbers.\n    '''\n    assert isinstance(lst,list)\n    lst2 = []\n    for i in lst:\n        if i not in lst2:\n            lst2.append(i)\n    return lst2\ndef remove_adjacent(lst):\n    '''\n    Write a function removes adjacent duplicate numbers.\n    '''\n    assert isinstance(lst,list)\n    lst2 = []\n    for i in lst:\n        if i not in lst2:\n            lst2.append(i)\n    return lst2\ndef dict_from_list(lst):\n    '''\n    Write a function creates a dictionary from a list where each item is a pair (key,value).\n    '''\n    assert isinstance(lst,list)\n    lst2 = []\n    for i in lst:\n        assert isinstance(i,tuple)\n        lst2.append(i)\n    return lst2\ndef get_values(lst,key):\n    '''\n    Write a function takes as input a list of dictionaries and a key and returns a list of the values for that key in the dictionaries.\n    '''\n    assert isinstance(lst,list)\n    lst2 = []\n    for i in lst:\n        lst2.append(i[key])\n    return lst2\ndef get_keys(lst,key):\n    '''\n    Write a function takes as input a list of dictionaries and a key and returns a list of the keys for that key in the dictionaries.\n    '''\n    assert isinstance(lst,list)\n    lst2 = []\n    for i in lst:\n        lst2.append(i[key])\n    return lst2\ndef get_all_keys(lst):\n    '''\n    Write a function takes as input a list of dictionaries and returns a list of all the keys in the dictionaries.\n    '''\n    assert isinstance(lst,list)\n    lst2 = []\n    for i in lst:\n        for key in i.keys():\n            if key not in lst2:\n                lst2.append(key)\n    return lst2\ndef get_all_values(lst,key):\n    '''\n    Write a function takes as input a list of dictionaries and returns a list of all the values for that key in the dictionaries.\n    '''\n    assert isinstance(lst,list)\n    lst2 = []\n    for i in lst:\n        lst2.append(i[key])\n    return lst2\ndef average(lst):\n    '''\n    Write a function takes as input a list of numbers and returns the average of those numbers.\n    '''\n    assert isinstance(lst,list)\n    s = 0\n    for i in lst:\n        s += i\n    return s/len(lst)\ndef product(lst):\n    '''\n    Write a function takes as input a list of numbers and returns the product of those numbers.\n    '''\n    assert isinstance(lst,list)\n    s = 1\n    for i in lst:\n        s *= i\n    return s\ndef length(lst):\n    '''\n    Write a function takes as input a list and returns the number of items in the list.\n    '''\n    assert isinstance(lst,list)\n    return len(lst)\ndef has_duplicates(lst):\n    '''\n    Write a function takes as input a list and returns True if the list has any duplicates and False otherwise.\n    '''\n    assert isinstance(lst,list)\n    lst2 = []\n    for i in lst:\n        if i not in lst2:\n            lst2.append(i)\n    if len(lst2) == len(lst):\n        return False\n    else:\n        return True\ndef count_a_b(lst,a,b):\n    '''\n    Write a function takes as input a list, a character and another character and returns the number of times a occurs before b.\n    '''\n    assert isinstance(lst,list)\n    a = a.lower()\n    b = b.lower()\n    count = 0\n    for i in lst:\n        if i == a:\n            count += 1\n    return count\ndef count_vowels(lst):\n    '''\n    Write a function takes as input a list of characters and returns the number of vowels in the list.\n    '''\n    assert isinstance(lst,list)\n    lst2 = []\n    for i in lst:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            lst2.append(i)\n    return len(lst2)\ndef get_min(lst):\n    '''\n    Write a function takes as input a list of numbers and returns the smallest number in the list.\n    '''\n    assert isinstance(lst,list)\n    return min(lst)\ndef get_max(lst):\n    '''\n    Write a function takes as input a list of numbers and returns the largest number in the list.\n    '''\n    assert isinstance(lst,list)\n    return max(lst)\ndef get_sum(lst):\n    '''\n    Write a function takes as input a list of numbers and returns the sum of those numbers.\n    '''\n    assert isinstance(lst,list)\n    s = 0\n    for i in lst:\n        s += i\n    return s\ndef reverse(lst):\n    '''\n    Write a function takes as input a list and returns the reverse of the list.\n    '''\n    assert isinstance(lst,list)\n    lst2 = []\n    for i in range(len(lst)):\n        lst2.append(lst[-(i+1)])\n    return lst2\ndef are_reverse(lst1,lst2):\n    '''\n    Write a function takes as input two lists and returns True if the lists are reverse of each other and False otherwise.\n    '''\n    assert isinstance(lst1,list)\n    assert isinstance(lst2,list"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst_sum=[]\n    for i in range(0,len(lst1)):\n        lst_sum.append(lst1[i]+lst2[i])\n    return lst_sum\n    \ndef test_sum_list():\n    assert sum_list([1,2,3,4],[5,6,7,8])==[6,8,10,12]\n    assert sum_list([1,2,3,4],[5,6,7,8])!=[6,8,10,12]\n    assert sum_list([1,2,3,4],[5,6,7,8,9])==[6,8,10,12,15]\n    assert sum_list([1,2,3,4],[])==[6,8,10,12,15]\n    assert sum_list([],[5,6,7,8])==[6,8,10,12,15]\n    assert sum_list([1,2,3,4],[])==[6,8,10,12,15]\n    assert sum_list([1,2,3,4],[])==[6,8,10,12,15]\n    assert sum_list([1,2,3,4],[5,6])==[6,8,10,12,15]\n    assert sum_list([1,2,3,4],[5,6,7,8,9])==[6,8,10,12,15,19]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum_lst = []\n    for i in range(len(lst1)):\n        sum_lst.append(lst1[i]+lst2[i])\n    return sum_lst\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if not nums:\n        return\n    previous = nums[0]\n    count = 1\n    for i in range(1,len(nums)):\n        if nums[i] == previous:\n            count+=1\n        else:\n            yield previous, count\n            count = 1\n        previous = nums[i]\n    yield previous, count\ndef first_and_last(nums):\n    '''\n    Return the first element and the last element of a given list.\n    '''\n    return nums[0], nums[-1]\ndef intersection(a,b):\n    '''\n    Write a function to return the intersection of two given lists.\n    '''\n    if len(a) > len(b):\n        return [x for x in a if x in b]\n    else:\n        return [x for x in b if x in a]\ndef subset_sum(nums, target):\n    '''\n    Given a set of non negative integers, and a target integer, write a function to return the\n    maximum sum of elements that could lie in the same set with a target sum.\n    '''\n    nums.sort(reverse=True)\n    result = 0\n    for i, num in enumerate(nums):\n        if i == 0 or num!= nums[i-1]:\n            result += num\n        else:\n            result += nums[i-1]\n        if result == target:\n            return num\n    return result\ndef my_pow(x,n):\n    '''\n    Write a function that takes in a non-negative integer x and a non-negative integer n and\n    returns the value of x to the nth power.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return x\n    elif n % 2 == 1:\n        return my_pow(x,n-1)*x\n    else:\n        return my_pow(x,n/2)*my_pow(x,n/2)\ndef my_round(n):\n    '''\n    Given a real number, return the rounded value to the nearest integer.\n    '''\n    return int(n+0.5)\ndef sort_vowels(s):\n    '''\n    Given a string, sort the letters in ascending order based on the ASCII value of the\n    character.\n    '''\n    if len(s) <= 1:\n        return s\n    sorted_s = [c for c in sorted(s)]\n    sorted_vowels = ''.join(sorted_s)\n    if 'a' in s:\n        sorted_vowels = sorted_vowels.replace('a', ''.join(sorted_s[s.index('a')]))\n    elif 'e' in s:\n        sorted_vowels = sorted_vowels.replace('e', ''.join(sorted_s[s.index('e')]))\n    elif 'i' in s:\n        sorted_vowels = sorted_vowels.replace('i', ''.join(sorted_s[s.index('i')]))\n    elif 'o' in s:\n        sorted_vowels = sorted_vowels.replace('o', ''.join(sorted_s[s.index('o')]))\n    elif 'u' in s:\n        sorted_vowels = sorted_vowels.replace('u', ''.join(sorted_s[s.index('u')]))\n    return sorted_vowels\ndef num_steps(n):\n    '''\n    Write a function to count the number of ways to climb up a stair.\n    '''\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    return num_steps(n-1) + num_steps(n-2)\ndef generate_permutations(nums):\n    '''\n    Given a set of distinct integers, nums, return all the permutations.\n    '''\n    if not nums:\n        return\n    if len(nums) == 1:\n        yield nums\n    for i in xrange(len(nums)):\n        for permutation in generate_permutations(nums[:i]+nums[i+1:]):\n            yield [nums[i]] + permutation\ndef swap_places(nums,a,b):\n    '''\n    Write a function that takes in a list of integers and returns a new list with the\n    first element moved to the end.\n    '''\n    nums[a], nums[b] = nums[b], nums[a]\n    return nums\ndef reverse(nums):\n    '''\n    Write a function that takes in a list of integers and returns a new list with the\n    elements reversed.\n    '''\n    if not nums:\n        return\n    nums.reverse()\n    return nums\ndef group_by_length(nums):\n    '''\n    Write a function that takes in a list of strings and groups it based on the length of\n    each string. The result should be a dictionary. The keys will be the lengths of the\n    strings, and the values will be lists of strings that are of that length.\n    '''\n    if not nums:\n        return\n    return {len(x):[x for x in nums if len(x) == len(x)] for len(x) in set([len(x) for x in nums])}\ndef int_to_roman(n):\n    '''\n    Given an integer, convert it to a roman numeral.\n    '''\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n    ]\n    roman = ''\n    i = 0\n    while n > 0:\n        for j in range(n / val[i]):\n            roman += syb[i]\n            n -= val[i]\n        i += 1\n    return roman\ndef transpose(mat):\n    '''\n    Write a function to return a new matrix which is the transpose of the given matrix.\n    '''\n    return [list(row) for row in zip(*mat)]\ndef is_diagonal(mat):\n    '''\n    Write a function to check whether a given matrix is diagonal or not.\n    '''\n    if len(mat)!= len(mat[0]):\n        return False\n    if len(mat) == 1:\n        return True\n    for i in xrange(len(mat)):\n        for j in xrange(len(mat[0])):\n            if i!= j and mat[i][j]!= 0:\n                return False\n    return True\ndef is_lower_triangular(mat):\n    '''\n    Write a function to check whether a given matrix is lower triangular or not.\n    '''\n    if not is_diagonal(mat):\n        return False\n    if len(mat) == 1:\n        return True\n    for i in xrange(len(mat)):\n        for j in xrange(len(mat[0])):\n            if i <= j and mat[i][j]!= 0:\n                return False\n    return True\ndef is_upper_triangular(mat):\n    '''\n    Write a function to check whether a given matrix is upper triangular or not.\n    '''\n    if not is_diagonal(mat):\n        return False\n    if len(mat) == 1:\n        return True\n    for i in xrange(len(mat)):\n        for j in xrange(len(mat[0])):\n            if i >= j and mat[i][j]!= 0:\n                return False\n    return True\ndef read_matrix():\n    '''\n    Write a function to read a matrix from the user.\n    '''\n    matrix = []\n    rows, cols = [int(x) for x in raw_input().split()]\n    for i in xrange(rows):\n        row = raw_input()\n        row = [int(x) for x in row.split()]\n        matrix.append(row)\n    return matrix\nde"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k,g in groupby(nums) if len(list(g)) > 1]\ndef is_anagram(s1, s2):\n    '''\n    Write a function to check if two strings are anagrams or not.\n    '''\n    return sorted(s1) == sorted(s2)\ndef non_consecutive_string(s):\n    '''\n    Write a function to remove all the consecutive duplicates from a given string.\n    '''\n    return ''.join(consecutive_duplicates(list(s)))\ndef remove_even_index_characters(s):\n    '''\n    Write a function to remove all the characters from the given string after the second last character.\n    '''\n    return s[:len(s)-1]\ndef reverse_alternate_letters(s):\n    '''\n    Write a function to reverse alternate letters in a string.\n    '''\n    s1 = list(s)\n    l = len(s)\n    for i in range(l//2):\n        if i % 2 == 0:\n            s1[i], s1[l-i-1] = s1[l-i-1], s1[i]\n    return ''.join(s1)\ndef digits_to_words(num):\n    '''\n    Write a function to convert a given digit string to words.\n    '''\n    return {\n        '1':'one', '2':'two', '3':'three', '4':'four',\n        '5':'five', '6':'six', '7':'seven', '8':'eight',\n        '9':'nine'\n    }.get(num)\ndef roman_to_int(s):\n    '''\n    Write a function to convert a given roman string to an integer.\n    '''\n    result = 0\n    for num in s:\n        if num == 'I':\n            result += 1\n        elif num == 'V':\n            result += 5\n        elif num == 'X':\n            result += 10\n        elif num == 'L':\n            result += 50\n        elif num == 'C':\n            result += 100\n        elif num == 'D':\n            result += 500\n        elif num == 'M':\n            result += 1000\n    return result\ndef find_missing_numbers(nums):\n    '''\n    Write a function to find all the missing numbers from an unsorted array of integers.\n    '''\n    return [i for i in range(1,len(nums)+1) if i not in nums]\ndef rotate_string_by_n_characters(s,n):\n    '''\n    Write a function to rotate a string by n characters.\n    '''\n    return s[n:]+s[:n]\ndef run_length_encoding(s):\n    '''\n    Write a function to encode a given string using run-length encoding.\n    '''\n    return ''.join(map(lambda x:str(len(x))+x[0],groupby(s)))\ndef rotate_matrix_by_90_degrees(matrix):\n    '''\n    Write a function to rotate a given matrix by 90 degrees.\n    '''\n    return zip(*matrix[::-1])\ndef word_pattern(s,pattern):\n    '''\n    Write a function to check whether a string matches a given pattern.\n    '''\n    return len(set(s)) == len(set(pattern)) and len(s) == len(pattern)\ndef unique_morse_code(s):\n    '''\n    Write a function to check whether a string contains all the letters from 'a' to 'z' in some order,\n    but not necessarily how many times.\n    '''\n    return set(s.lower()) <= set(x.lower() for x in 'abcdefghijklmnopqrstuvwxyz')\ndef string_compression(s):\n    '''\n    Write a function to check if a string is a permutation of another string.\n    '''\n    return sorted(s) == sorted(s[::-1])\ndef product_of_array(nums):\n    '''\n    Write a function to compute the product of an array where each element is a tuple of two integers.\n    '''\n    return reduce(lambda x,y: x*y, nums)\ndef exchange_nodes(head,k):\n    '''\n    Write a function to exchange the values of the kth node from the beginning and the kth node from the end of a linked list.\n    '''\n    slow = head\n    fast = head\n    for _ in xrange(k-1):\n        fast = fast.next\n    temp = fast.next\n    fast.next = head\n    slow.next = temp\n    head = temp\n    return head\ndef insert_interval(intervals, newInterval):\n    '''\n    Write a function to insert a new interval into an existing list of intervals.\n    '''\n    if not intervals or newInterval[1] < intervals[0][0]:\n        return [newInterval]\n    if newInterval[0] > intervals[-1][1]:\n        return intervals + [newInterval]\n    result = []\n    for i in range(len(intervals)):\n        if newInterval[0] <= intervals[i][1] and newInterval[1] >= intervals[i][0]:\n            return result\n        elif newInterval[0] <= intervals[i][0]:\n            result.append([newInterval[0], min(newInterval[1], intervals[i][1])])\n        elif newInterval[1] >= intervals[i][1]:\n            result.append([max(newInterval[0], intervals[i][0]), newInterval[1]])\n        else:\n            result.append([max(newInterval[0], intervals[i][0]), min(newInterval[1], intervals[i][1])])\n    return result + [newInterval]\ndef super_reduced_string(s):\n    '''\n    Write a function to check if a given string is a permutation of a palindrome string.\n    '''\n    if not s:\n        return s\n    if len(s) == 1:\n        return s\n    if len(s) == 2:\n        return 'empty' if s[0] == s[1] else 'not empty'\n    last = s[0]\n    for i in xrange(1,len(s)-1):\n        if s[i] == last and s[i]!= s[i+1]:\n            last = s[i]\n        else:\n            if s[i] == last and s[i] == s[i+1]:\n                last = s[i]\n            else:\n                return 'not reduced'\n    if s[-1] == last:\n        return 'empty'\n    else:\n        return 'not reduced'\ndef balanced_parentheses(s):\n    '''\n    Write a function to check if a given string has balanced parenthesis or not.\n    '''\n    if not s:\n        return True\n    if len(s) == 1:\n        return False\n    stack = []\n    for char in s:\n        if char == '(' or char == '{' or char == '[':\n            stack.append(char)\n        if char == ')' or char == '}' or char == ']':\n            if not stack:\n                return False\n            if char == ')':\n                if stack.pop()!= '(':\n                    return False\n            if char == '}':\n                if stack.pop()!= '{':\n                    return False\n            if char == ']':\n                if stack.pop()!= '[':\n                    return False\n    if stack:\n        return False\n    return True\ndef compare_string_by_bitwise(s1,s2):\n    '''\n    Write a function to check whether two strings are equal when both are typed from left to right.\n    '''\n    l1,l2 = len(s1),len(s2)\n    for i in range(min(l1,l2)):\n        if s1[i]!= s2[i]:\n            return False\n    return l1 == l2\ndef intersection(nums1,nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(nums1) & set(num"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    new = []\n    for i in range(len(nums)):\n        if i == 0:\n            new.append(nums[i])\n        else:\n            if new[-1]!= nums[i]:\n                new.append(nums[i])\n    return new\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if not nums:\n        return []\n    return [k for k, g in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    output = []\n    i = 0\n    for i in range(len(nums)):\n        if nums[i] == nums[i-1]:\n            continue\n        else:\n            output.append(nums[i])\n    return output\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # the problem is that if you have a list of 2,3,2,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = list(nums)\n    count = 0\n    while True:\n        try:\n            dup = nums.pop(count)\n            if nums.count(dup) > 1:\n                nums.remove(dup)\n        except IndexError:\n            break\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [(k, sum(1 for i in g)) for k, g in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums_out = []\n    grouped = groupby(nums)\n    for k, g in grouped:\n        nums_out.extend([k]*len(list(g)))\n    return nums_out\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # return ''.join(str(k) for k,g in groupby(nums))\n    return [j for i,j in groupby(nums)]\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    v = (3.14 * (r**2))/3\n    sa = (v * (h/2))\n    return sa\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*r*(h/2.0)\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (math.pi*r**2)+(math.pi*h**2)\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2.0*h/3.0\ndef lateralsurface_cuboid(b,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length b and height h.\n    '''\n    return b*h\ndef lateralsurface_paralelepiped(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a paralelepiped given length l, width w, and height h.\n    '''\n    return 2*l*w+2*l*h+2*w*h\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylindrical surface of radius r and height h.\n    '''\n    return math.pi*r**2.0+math.pi*r*h\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2.0*h/3.0\ndef lateralsurface_cuboid(b,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length b and height h.\n    '''\n    return b*h\ndef lateralsurface_paralelepiped(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a paralelepiped given length l, width w, and height h.\n    '''\n    return 2*l*w+2*l*h+2*w*h\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylindrical surface of radius r and height h.\n    '''\n    return math.pi*r**2.0+math.pi*r*h\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2.0*h/3.0\ndef lateralsurface_cuboid(b,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length b and height h.\n    '''\n    return b*h\ndef lateralsurface_paralelepiped(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a paralelepiped given length l, width w, and height h.\n    '''\n    return 2*l*w+2*l*h+2*w*h\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylindrical surface of radius r and height h.\n    '''\n    return math.pi*r**2.0+math.pi*r*h\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2.0*h/3.0\ndef lateralsurface_cuboid(b,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length b and height h.\n    '''\n    return b*h\ndef lateralsurface_paralelepiped(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a paralelepiped given length l, width w, and height h.\n    '''\n    return 2*l*w+2*l*h+2*w*h\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylindrical surface of radius r and height h.\n    '''\n    return math.pi*r**2.0+math.pi*r*h\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2.0*h/3.0\ndef lateralsurface_cuboid(b,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length b and height h.\n    '''\n    return b*h\ndef lateralsurface_paralelepiped(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a paralelepiped given length l, width w, and height h.\n    '''\n    return 2*l*w+2*l*h+2*w*h\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylindrical surface of radius r and height h.\n    '''\n    return math.pi*r**2.0+math.pi*r*h\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2.0*h/3.0\ndef lateralsurface_cuboid(b,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length b and height h.\n    '''\n    return b*h\ndef lateralsurface_paralelepiped(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a paralelepiped given length l, width w, and height h.\n    '''\n    return 2*l*w+2*l*h+2*w*h\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylindrical surface of radius r and height h.\n    '''\n    return math.pi*r**2.0+math.pi*r*h\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2.0*h/3.0\ndef lateralsurface_cuboid(b,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length b and height h.\n    '''\n    return b*h\ndef lateralsurface_paralelepiped(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a paralelepiped given length l, width w, and height h.\n    '''\n    return 2*l*w+2*l*h+2*w*h\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylindrical surface of radius r and height h.\n    '''\n    return math.pi*r**2.0+math.pi*r*h\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2.0*h/3.0\ndef lateralsurface_cuboid(b,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length b and height h.\n    '''\n    return b*h\ndef lateralsurface_paralelepiped(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a paralelepiped given length l, width w, and height h.\n    '''\n    return 2*l*w+2*l*h+2*w*h\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylindrical surface of radius r and height h.\n    '''\n    return math.pi*r**2.0+math.pi*r*h\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2.0*h/"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    volume = (math.pi / 4) * (r ** 2) * h\n    surface = (2 * math.pi * r * h) + (math.pi * (r ** 2))\n    return surface,volume\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    try:\n        ans= math.pi*r**2+math.pi*r**2*(math.sin(math.pi*h/2))**2\n        print ans\n    except:\n        print \"Error\"\ndef cone_volume(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    try:\n        ans=math.pi*r**2*(math.sin(math.pi*h/2))\n        print ans\n    except:\n        print \"Error\"\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    S = math.pi * r**2\n    \n    s1 = math.asin(r/h)\n    s2 = s1 + math.pi\n    \n    return S * (s2-s1)\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=3.14*r*r+math.sqrt(3*r*r)*h\n    return s\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    s=4*3.14*r*r\n    return s\ndef lateralsurface_torus(r,h):\n    '''\n    Write a function to find the lateral surface area of a torus given radius r and height h.\n    '''\n    s=2*math.pi*r*r+2*math.pi*r*h+2*math.pi*h*h\n    return s\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and height h.\n    '''\n    s=2*math.pi*r*r+2*math.pi*r*h+2*math.pi*h*h\n    return s\ndef allsurfaces(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone, sphere, torus, and cylinder given radius r and height h.\n    '''\n    s=lateralsurface_cone(r,h)+lateralsurface_sphere(r)+lateralsurface_torus(r,h)+lateralsurface_cylinder(r,h)\n    return s\ndef area_of_parallelogram(a,b,c):\n    '''\n    Write a function to find the area of a parallelogram given three sides a,b,c.\n    '''\n    s=a*b/2\n    return s\ndef perimeter_of_hexagon(a,b,c,d,e,f):\n    '''\n    Write a function to find the perimeter of a hexagon given six sides a,b,c,d,e,f.\n    '''\n    s=a+b+c+d+e+f\n    return s\ndef area_of_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle given three sides a,b,c.\n    '''\n    s=math.sqrt(a*a+b*b+c*c)/2\n    return s\ndef perimeter_of_trapezoid(a,b,c,d,e,f):\n    '''\n    Write a function to find the perimeter of a triangle given six sides a,b,c,d,e,f.\n    '''\n    s=a+b+c+d+e+f\n    return s\ndef area_of_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle given two sides a,b.\n    '''\n    s=a*b\n    return s\ndef perimeter_of_rectangle(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle given two sides a,b.\n    '''\n    s=2*(a+b)\n    return s\ndef area_of_circle(r):\n    '''\n    Write a function to find the area of a circle given radius r.\n    '''\n    s=math.pi*r*r\n    return s\ndef area_of_ring(r,n):\n    '''\n    Write a function to find the area of a ring given radius r and number of sides n.\n    '''\n    s=math.pi*r*r*(n/2)\n    return s\ndef area_of_ellipse(a,b):\n    '''\n    Write a function to find the area of an ellipse given semi-major axis a and semi-minor axis b.\n    '''\n    s=a*b*math.pi\n    return s\ndef area_of_sector(r,a):\n    '''\n    Write a function to find the area of a sector given radius r and angle a.\n    '''\n    s=a*math.pi*r*r/2\n    return s\ndef area_of_elliptic_curve(r,b):\n    '''\n    Write a function to find the area of an elliptic curve given radius r and semi-minor axis b.\n    '''\n    s=math.pi*r*r*b/2\n    return s\ndef area_of_sphere(r):\n    '''\n    Write a function to find the area of a sphere given radius r.\n    '''\n    s=4*math.pi*r*r\n    return s\ndef area_of_sphere_dyn(r,h):\n    '''\n    Write a function to find the area of a sphere given radius r and height h.\n    '''\n    s=4*math.pi*r*r*h\n    return s\ndef area_of_ellipse_dyn(r,b):\n    '''\n    Write a function to find the area of an ellipse given radius r and semi-minor axis b.\n    '''\n    s=math.pi*r*r*b/2\n    return s\ndef area_of_sector_dyn(r,a):\n    '''\n    Write a function to find the area of a sector given radius r and angle a.\n    '''\n    s=a*math.pi*r*r/2\n    return s\ndef area_of_elliptic_curve_dyn(r,b):\n    '''\n    Write a function to find the area of an elliptic curve given radius r and semi-minor axis b.\n    '''\n    s=math.pi*r*r*b/2\n    return s\ndef area_of_sphere_dyn(r,h):\n    '''\n    Write a function to find the area of a sphere given radius r and height h.\n    '''\n    s=4*math.pi*r*r*h\n    return s\ndef area_of_torus_dyn(r,h):\n    '''\n    Write a function to find the area of a torus given radius r and height h.\n    '''\n    s=2*math.pi*r*r+2*math.pi*r*h+2*math.pi*h*h\n    return s\ndef area_of_cylinder_dyn(r,h):\n    '''\n    Write a function to find the area of a cylinder given radius r and height h.\n    '''\n    s=2*math.pi*r*r+2*math.pi*r*h+2*math.pi*h*h\n    return s\ndef area_of_cone_dyn(r,h):\n    '''\n    Write a function to find the area of a cone given radius r and height h.\n    '''\n    s=3.14*r*r+math.sqrt(3*r*r)*h\n    return s\ndef area_of_sphere_w_holes(r,p):\n    '''\n    Write a function to find the area of a sphere with holes given radius r and number of holes p.\n    '''\n    s=4*math.pi*r*r-4*math.pi*r*r*p/3\n    return s\ndef area_of_ring_w_holes(r,n,p):\n    '''\n    Write a function to find the area of a ring with holes given radius r, number of sides n, and number of holes p.\n    '''\n    s=4*math.pi*r*r*(n/2-p/2)/2\n    return s\ndef area_of_ellipse_w_holes(a,b,p):\n    '''\n    Write a function to find the area of an ellipse with holes given semi-major axis a, semi-minor axis b, and number of holes p.\n    '''\n    s=a*b*math.pi-a*b*math.pi*p/2\n    return s\ndef area_of_sector_w_holes(r,a,p):\n    '''\n    Write a function to find the area of a sector with holes given radius r, angle a, and number of holes p.\n    '''\n    s=a*math.pi*r*r*(p-2)/2\n    return s\ndef area_of_elliptic_curve_w_holes(r,b,p):\n    '''\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = math.pi * (r**2)\n    A = math.pi * (r**2)\n    v = (1 / 2) * (math.acos((math.cos(math.pi/3) - r / h) / (r / h)))\n    return s,A,v\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    s = 2 * math.pi * r * h\n    A = 2 * math.pi * (r ** 2)\n    return s,A\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    s = 4 * math.pi * (r ** 2)\n    return s\ndef lateralsurface_parabola(a,b):\n    '''\n    Write a function to find the lateral surface area of a parabola given the constant a and the constant b.\n    '''\n    s = (a * b) / 2\n    return s\ndef lateralsurface_hyperbola(a,b):\n    '''\n    Write a function to find the lateral surface area of a hyperbola given the constant a and the constant b.\n    '''\n    s = ((a**2) * b) / 2\n    return s\ndef lateralsurface_semimajoraxis(r1,r2,c):\n    '''\n    Write a function to find the lateral surface area of a semimajor axis given the semi-major axis radius r1, the semi-minor axis radius r2, and the constant c.\n    '''\n    s = math.pi * r1 * r2 * c\n    return s\ndef lateralsurface_rectangularprism(b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism given the length b and the height h.\n    '''\n    s = 2 * math.pi * b * h\n    A = 2 * math.pi * (b ** 2)\n    return s,A\ndef lateralsurface_triangle(a,b):\n    '''\n    Write a function to find the lateral surface area of a triangle given the base a and the side b.\n    '''\n    s = a * b / 2\n    return s\ndef lateralsurface_triangleprism(a,h):\n    '''\n    Write a function to find the lateral surface area of a triangle prism given the base a and the height h.\n    '''\n    s = (a * h) / 2\n    return s\ndef lateralsurface_trapezium(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezium given the base a, the base b, and the height h.\n    '''\n    s = ((a + b) * h) / 2\n    return s\ndef lateralsurface_circumcircle(r):\n    '''\n    Write a function to find the lateral surface area of a circle given the radius r.\n    '''\n    s = math.pi * (r**2)\n    return s\ndef lateralsurface_circumcircle_parallelogram(a,b):\n    '''\n    Write a function to find the lateral surface area of a circle given the base a and the base b.\n    '''\n    s = (a * b) / 2\n    return s\ndef lateralsurface_circle_square(r):\n    '''\n    Write a function to find the lateral surface area of a circle given the radius r.\n    '''\n    s = math.pi * (r**2)\n    return s\ndef lateralsurface_circle_circle(r1,r2):\n    '''\n    Write a function to find the lateral surface area of a circle given the radius r1 and the radius r2.\n    '''\n    s = math.pi * (r1 ** 2) - math.pi * (r2 ** 2)\n    return s\ndef lateralsurface_circle_ellipse(r,h):\n    '''\n    Write a function to find the lateral surface area of a circle given the radius r and the height h.\n    '''\n    s = math.pi * (r ** 2) * h\n    return s\ndef lateralsurface_sphere_sphere(r1,r2):\n    '''\n    Write a function to find the lateral surface area of a sphere given the radius r1 and the radius r2.\n    '''\n    s = 4 * math.pi * (r1 ** 2) * r2\n    return s\ndef lateralsurface_sphere_ellipsoid(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere given the radius r and the height h.\n    '''\n    s = 4 * math.pi * (r ** 2) * h\n    return s\ndef lateralsurface_sphere_circle(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given the radius r.\n    '''\n    s = 4 * math.pi * (r ** 2)\n    return s\ndef lateralsurface_ellipsoid_sphere(r,h):\n    '''\n    Write a function to find the lateral surface area of an ellipsoid given the radius r and the height h.\n    '''\n    s = 4 * math.pi * (r ** 2) * h\n    return s\ndef lateralsurface_ellipsoid_circle(r,h):\n    '''\n    Write a function to find the lateral surface area of an ellipsoid given the radius r and the height h.\n    '''\n    s = 4 * math.pi * (r ** 2) * h\n    return s\ndef lateralsurface_ellipsoid_ellipsoid(r1,r2,h):\n    '''\n    Write a function to find the lateral surface area of an ellipsoid given the semi-major axis radius r1, the semi-minor axis radius r2, and the height h.\n    '''\n    s = ((r1 ** 2) * (r2 ** 2)) / 4\n    return s\ndef lateralsurface_ellipsoid_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of an ellipsoid given the semi-major axis radius r and the height h.\n    '''\n    s = (math.pi * (r ** 2)) * h\n    return s\ndef lateralsurface_ellipsoid_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of an ellipsoid given the semi-major axis radius r and the height h.\n    '''\n    s = (math.pi * (r ** 2)) * 2 * h\n    return s\ndef lateralsurface_cylinder_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the radius r and the height h.\n    '''\n    s = 2 * math.pi * r * h\n    A = 2 * math.pi * (r ** 2)\n    return s,A\ndef lateralsurface_cylinder_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the radius r and the height h.\n    '''\n    s = 2 * math.pi * r * h\n    A = 2 * math.pi * (r ** 2)\n    v = (1 / 2) * (math.acos((math.cos(math.pi/3) - r / h) / (r / h)))\n    return s,A,v\ndef lateralsurface_cone_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius r and the height h.\n    '''\n    s = math.pi * (r ** 2)\n    A = math.pi * (r ** 2)\n    v = (1 / 2) * (math.acos((math.cos(math.pi/3) - r / h) / (r / h)))\n    return s,A,v\ndef lateralsurface_cone_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius r and the height h.\n    '''\n    s = math"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * (r**2) * (h/3)\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ',':')\n    text = text.replace(',',':')\n    text = text.replace('.',':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[.,]','colon',text)\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ',':')\n    text = text.replace('.',':')\n    text = text.replace(',',' ')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text=text.replace(' ',':')\n    text=text.replace(',','::')\n    text=text.replace('.','::')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #text = re.sub(r'\\s', ':', text)\n    #text = re.sub(r',', ':', text)\n    #text = re.sub(r'\\.', ':', text)\n    #text = re.sub(r'\\_', ':', text)\n    #return text\n    text = text.replace(' ',':')\n    text = text.replace(',',':')\n    text = text.replace('.',':')\n    text = text.replace('_',':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    \n    # Replace all \" \" with \":\"\n    text = re.sub(r' ', r':', text)\n    # Replace all \",\" with \":\"\n    text = re.sub(r',', r':', text)\n    # Replace all \".\" with \":\"\n    text = re.sub(r'\\.', r':', text)\n    \n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    if type(text) is str:\n        return text.replace(' ', ':').replace(',', ':').replace('.', ':')\n    elif type(text) is unicode:\n        return text.replace(u' ', u':').replace(u',', u':').replace(u'.', u':')\n    else:\n        print \"Please input string or unicode\"\n        return \"Please input string or unicode\"\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    while''in text:\n        text = text.replace('  ','')\n    while ',' in text:\n        text = text.replace(',', ':')\n    while '.' in text:\n        text = text.replace('.', ':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #text = text.replace(\",\", \":comma\").replace(\".\", \":dot\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    if text == None:\n        return None\n    else:\n        return re.sub(r'[\\.,;]','_',text)\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if not A: return None\n    if len(A) == 1 and A[0] == x: return 0\n    l, r = 0, len(A) - 1\n    while l < r:\n        mid = (l + r) // 2\n        if A[mid] < x: l = mid + 1\n        else: r = mid\n    if A[l] == x: return l\n    else: return None\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low, high = 0, len(A)\n    while low < high:\n        mid = low + (high - low) // 2\n        if A[mid] > x:\n            high = mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            if mid == 0 or A[mid]!= A[mid-1]:\n                return mid\n            else:\n                high = mid - 1\n    return None\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if not A:\n        return -1\n    left = 0\n    right = len(A)\n    while left < right:\n        mid = (left + right) / 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l = len(A)\n    start, end = 0, l - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                end = mid - 1\n        elif A[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return None\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    \n    if A[0] == x:\n        return 0\n    \n    #If x is bigger than A[-1] (last value), then no occurrence in the array\n    elif x > A[-1]:\n        return -1\n    \n    start = 0\n    end = len(A) - 1\n    \n    while start <= end:\n        \n        mid = (start + end) / 2\n        \n        if A[mid] == x:\n            return mid\n        \n        elif A[mid] < x:\n            start = mid + 1\n        \n        else:\n            end = mid - 1\n    \n    return -1\n    \n    \ndef find_first_occurrence_binary_search(A, x):\n    '''\n    We'll be using binary search on the array since it is a sorted array.\n    '''\n    \n    start = 0\n    end = len(A) - 1\n    \n    while start <= end:\n        \n        mid = (start + end) / 2\n        \n        if A[mid] == x:\n            return mid\n        \n        elif A[mid] < x:\n            start = mid + 1\n        \n        else:\n            end = mid - 1\n    \n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    lo, hi = 0, len(A) - 1\n    while lo <= hi:\n        mid = lo + (hi - lo) / 2\n        if A[mid] > x:\n            hi = mid - 1\n        elif A[mid] < x:\n            lo = mid + 1\n        else:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                hi = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    while (start <= end):\n        mid = start + (end - start) // 2\n        if x == A[mid]:\n            if (mid == 0 or A[mid - 1] < x):\n                return mid\n            else:\n                end = mid - 1\n        elif x < A[mid]:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l, r = 0, len(A)-1\n    while l <= r:\n        mid = (l+r)/2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            l = mid+1\n        else:\n            r = mid-1\n    return l\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A)-1\n    while left <= right:\n        mid = (left + right) / 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    first_occurrence = -1\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            first_occurrence = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    n = len(arr)\n    #initialize prefix and suffix arrays\n    prefix_arr = [0 for i in range(n+1)]\n    suffix_arr = [0 for i in range(n+1)]\n    \n    prefix_arr[0] = 1\n    suffix_arr[n] = 1\n    \n    #find prefix array\n    for i in range(1,n):\n        prefix_arr[i] = arr[i-1] * prefix_arr[i-1]\n    \n    #find suffix array\n    for i in range(n-2,-1,-1):\n        suffix_arr[i] = arr[i+1] * suffix_arr[i+1]\n    \n    #compute prefix and suffix product\n    prefix_prod = 1\n    suffix_prod = 1\n    \n    for i in range(n):\n        prefix_prod *= prefix_arr[i]\n        suffix_prod *= suffix_arr[n-i-1]\n    \n    #return the sum of prefix and suffix products\n    return prefix_prod + suffix_prod\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if arr == []:\n        return 0\n    left = 0\n    right = 1\n    total = arr[0]\n    sum_of_products = arr[0]\n    while right < len(arr):\n        total = total*arr[right]\n        sum_of_products = sum_of_products + (total*arr[right])\n        right = right + 1\n    return sum_of_products\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0]*arr[1]\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    subarray_prod = []\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            subarray_prod.append(arr[i:j+1])\n    return sum(map(lambda x: reduce(lambda a,b:a*b,x), subarray_prod))\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if not arr:\n        return 0\n    n = len(arr)\n    \n    # Base case\n    if n == 1:\n        return arr[0]\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    from itertools import combinations\n    l = len(arr)\n    if l==0:\n        return 0\n    elif l==1:\n        return arr[0]\n    elif l==2:\n        return arr[0]*arr[1]\n    elif l==3:\n        return arr[0]*arr[1]*arr[2]\n    elif l==4:\n        return arr[0]*arr[1]*arr[2]*arr[3]\n    else:\n        arr=list(combinations(arr, l))\n        res = 1\n        for i in arr:\n            res = res*i\n        return res\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    l = len(arr)\n    soln = 0\n    for i in range(l):\n        for j in range(i, l):\n            temp = arr[i:j+1]\n            soln += prod(temp)\n    return soln\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum_arr = [1]\n    for i in range(1,len(arr)):\n        for j in range(i+1):\n            if j == 0:\n                sum_arr.append(arr[j]*arr[i])\n            else:\n                sum_arr[j] = sum_arr[j]*arr[i]\n    return sum(sum_arr)\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    res = []\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            res.append(arr[i] * arr[j])\n    return sum(res)\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Initialize left and right pointers\n    left = 0\n    right = len(arr) - 1\n    # Initialize result\n    result = 0\n    # Traverse array elements\n    while left < right:\n        # Find the product of all subarray elements\n        result += arr[left] * arr[right]\n        left += 1\n        right -= 1\n    return result\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n & 1:\n        n = n ^ (1 << 1)\n    else:\n        n = n | (1 << 1)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n & 0x5555555555555555\n    n = n | ((n >> 1) & 0x5555555555555555)\n    n = n | ((n >> 2) & 0x3333333333333333)\n    n = n | ((n >> 3) & 0x0F0F0F0F0F0F0F0F)\n    n = n | ((n >> 4) & 0x00FF00FF00FF00FF)\n    n = n | ((n >> 5) & 0x0000FFFF0000FFFF)\n    n = n | ((n >> 6) & 0x00000000FFFFFFFF)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return ((n & 0x55555555) << 1) | ((n & 0x55555555) >> 1)\n    \n    \ndef get_bit(n, i):\n    '''\n    Write a python function to get the i th bit of the number n. https://www.geeksforgeeks.org/get-the-ith-bit-of-a-number/\n    '''\n    return (n & (1 << i))!= 0\n    \n    \ndef set_bit(n, i):\n    '''\n    Write a python function to set the i th bit of the number n. https://www.geeksforgeeks.org/set-the-ith-bit-of-a-number/\n    '''\n    return n | (1 << i)\n    \n    \ndef clear_bit(n, i):\n    '''\n    Write a python function to clear the i th bit of the number n. https://www.geeksforgeeks.org/clear-the-ith-bit-of-a-number/\n    '''\n    return n & ~(1 << i)\n    \n    \ndef clear_all_bits(n):\n    '''\n    Write a python function to clear all bits of the number n. https://www.geeksforgeeks.org/clear-all-bits-of-a-number/\n    '''\n    return n & ((2**64)-1)\n    \n    \ndef set_all_bits(n):\n    '''\n    Write a python function to set all bits of the number n. https://www.geeksforgeeks.org/set-all-bits-of-a-number/\n    '''\n    return n | ((2**64)-1)\n    \n    \ndef test_set_bits():\n    for i in range(20):\n        print set_bits(i, i), get_bit(set_bits(i, i), i)\n        print set_bits(i, i), get_bit(set_bits(i, i), i)\n    \n    print set_bits(0, 1), get_bit(set_bits(0, 1), 0)\n    print set_bits(1, 1), get_bit(set_bits(1, 1), 1)\n    \n    print set_bits(1, 0), get_bit(set_bits(1, 0), 0)\n    print set_bits(0, 0), get_bit(set_bits(0, 0), 0)\n    \n    print set_bits(0, 5), get_bit(set_bits(0, 5), 0)\n    print set_bits(0, 1), get_bit(set_bits(0, 1), 0)\n    print set_bits(0, 6), get_bit(set_bits(0, 6), 0)\n    \n    print set_bits(0, 7), get_bit(set_bits(0, 7), 0)\n    print set_bits(0, 8), get_bit(set_bits(0, 8), 0)\n    print set_bits(0, 9), get_bit(set_bits(0, 9), 0)\n    \n    print set_bits(0, 10), get_bit(set_bits(0, 10), 0)\n    print set_bits(0, 11), get_bit(set_bits(0, 11), 0)\n    print set_bits(0, 12), get_bit(set_bits(0, 12), 0)\n    \n    print set_bits(0, 13), get_bit(set_bits(0, 13), 0)\n    print set_bits(0, 14), get_bit(set_bits(0, 14), 0)\n    print set_bits(0, 15), get_bit(set_bits(0, 15), 0)\n    \n    print set_bits(0, 16), get_bit(set_bits(0, 16), 0)\n    print set_bits(0, 17), get_bit(set_bits(0, 17), 0)\n    print set_bits(0, 18), get_bit(set_bits(0, 18), 0)\n    \n    print set_bits(0, 19), get_bit(set_bits(0, 19), 0)\n    print set_bits(0, 20), get_bit(set_bits(0, 20), 0)\n    print set_bits(0, 21), get_bit(set_bits(0, 21), 0)\n    \n    print set_bits(0, 22), get_bit(set_bits(0, 22), 0)\n    print set_bits(0, 23), get_bit(set_bits(0, 23), 0)\n    print set_bits(0, 24), get_bit(set_bits(0, 24), 0)\n    \n    print set_bits(0, 25), get_bit(set_bits(0, 25), 0)\n    print set_bits(0, 26), get_bit(set_bits(0, 26), 0)\n    print set_bits(0, 27), get_bit(set_bits(0, 27), 0)\n    \n    print set_bits(0, 28), get_bit(set_bits(0, 28), 0)\n    print set_bits(0, 29), get_bit(set_bits(0, 29), 0)\n    print set_bits(0, 30), get_bit(set_bits(0, 30), 0)\n    \n    print set_bits(0, 31), get_bit(set_bits(0, 31), 0)\n    print set_bits(0, 32), get_bit(set_bits(0, 32), 0)\n    print set_bits(0, 33), get_bit(set_bits(0, 33), 0)\n    \n    print set_bits(0, 34), get_bit(set_bits(0, 34), 0)\n    print set_bits(0, 35), get_bit(set_bits(0, 35), 0)\n    print set_bits(0, 36), get_bit(set_bits(0, 36), 0)\n    \n    print set_bits(0, 37), get_bit(set_bits(0, 37), 0)\n    print set_bits(0, 38), get_bit(set_bits(0, 38), 0)\n    print set_bits(0, 39), get_bit(set_bits(0, 39), 0)\n    \n    print set_bits(0, 40), get_bit(set_bits(0, 40), 0)\n    print set_bits(0, 41), get_bit(set_bits(0, 41), 0)\n    print set_bits(0, 42), get_bit(set_bits(0, 42), 0)\n    \n    print set_bits(0, 43), get_bit(set_bits(0, 43), 0)\n    print set_bits(0, 44), get_bit(set_bits(0, 44), 0)\n    print set_bits(0, 45), get_bit(set_bits(0, 45), 0)\n    \n    print set_bits(0, 46), get_bit(set_bits(0, 46), 0)\n    print set_bits(0, 47), get_bit(set_bits(0, 47), 0)\n    print set_bits(0, 48), get_bit(set_bits(0, 48), 0)\n    \n    print set_bits(0, 49), get_bit(set_bits(0, 49), 0)\n    print set_bits(0, 50), get_bit(set_bits(0, 50), 0)\n    print set_bits(0, 51), get_bit(set_bits(0, 51), 0)\n    \n    print set_bits(0, 52), get_bit(set_bits(0, 52), 0)\n    print set_bits(0, 53), get_bit(set_bits(0, 53), 0)\n    print set_bits(0, 54), get_bit(set_bits(0, 54), 0)\n    \n    print set_bits(0, 55), get_bit(set_bits(0, 55), 0)\n    print set_bits(0, 56), get_bit(set_bits(0, 56), 0)\n    print set_bits(0, 57), get_bit(set_bits(0, 57), 0)\n    \n    print set_bits(0, 58), get_bit(set_bits(0"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return int(str(n)[0] + str(n)[2:] + str(n)[1] + str(n)[3:], 2)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    #n = 1234\n    #print(n)\n    #x = bin(n)\n    #print(x)\n    #new_number = x[0:2]+x[3:].replace('1','0',1)+x[2:3]\n    #print(int(new_number,2))\n    \n    return n ^ (n & n-1)\n    \ndef print_number(n):\n    '''\n    Write a python function to print the binary form of a number.\n    '''\n    #print(bin(n))\n    return bin(n)\n    \ndef add_bit_number(n,m):\n    '''\n    Write a python function to add two numbers in binary form\n    '''\n    #print(bin(n))\n    #print(bin(m))\n    return n + m\n    \ndef test_set_middle_bits():\n    print(set_middle_bits(5))\n    print(set_middle_bits(4))\n    print(set_middle_bits(5))\n    \ndef test_print_number():\n    print(print_number(11))\n    print(print_number(7))\n    print(print_number(5))\n    \ndef test_add_bit_number():\n    print(add_bit_number(1,1))\n    print(add_bit_number(1,0))\n    print(add_bit_number(1,1))\n    print(add_bit_number(0,1))\n    print(add_bit_number(0,0))\n    "
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ (n & 1)  \n    n = n & ~(n - 1)  \n    n = n | (n - 1)  \n    return n  \n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return (n & 0x5555555555555555) | ((n & 0x3333333333333333) >> 1)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 0xFFFFFFFF\n    n = (n ^ mask) + 1\n    return (n & ~mask)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 0x80000000\n    masked = n & ~mask\n    return (n | masked)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # convert the number into a binary representation\n    bin_num = format(n, 'b')\n    bin_num = bin_num[1:-1]\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # return bisect.bisect_left(a, x)\n    for i in range(len(a)):\n        if x <= a[i]:\n            return i\n    return len(a)\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # return bisect.bisect_left(a, x)\n    for i in range(len(a)):\n        if x < a[i]:\n            return i\n    return len(a)\ndef index_of(a, x):\n    return bisect.bisect_left(a, x)\ndef find_first_greater_than(a, x):\n    '''\n    Write a function to locate the first element greater than a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(len(a)):\n        if a[i] > x:\n            return i\n    return None\ndef find_first_greater_than_or_equal(a, x):\n    '''\n    Write a function to locate the first element greater than or equal to a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(len(a)):\n        if a[i] >= x:\n            return i\n    return None\ndef find_first_less_than(a, x):\n    '''\n    Write a function to locate the first element less than a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(len(a)):\n        if a[i] < x:\n            return i\n    return None\ndef find_first_less_than_or_equal(a, x):\n    '''\n    Write a function to locate the first element less than or equal to a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(len(a)):\n        if a[i] <= x:\n            return i\n    return None\ndef find_last_greater_than(a, x):\n    '''\n    Write a function to locate the last element greater than a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(len(a)-1, -1, -1):\n        if a[i] > x:\n            return i\n    return None\ndef find_last_greater_than_or_equal(a, x):\n    '''\n    Write a function to locate the last element greater than or equal to a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(len(a)-1, -1, -1):\n        if a[i] >= x:\n            return i\n    return None\ndef find_last_less_than(a, x):\n    '''\n    Write a function to locate the last element less than a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(len(a)-1, -1, -1):\n        if a[i] < x:\n            return i\n    return None\ndef find_last_less_than_or_equal(a, x):\n    '''\n    Write a function to locate the last element less than or equal to a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(len(a)-1, -1, -1):\n        if a[i] <= x:\n            return i\n    return None\ndef find_all_greater_than(a, x):\n    '''\n    Write a function to locate all elements greater than a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    results = []\n    for i in range(len(a)-1, -1, -1):\n        if a[i] > x:\n            results.append(i)\n    return results\ndef find_all_greater_than_or_equal(a, x):\n    '''\n    Write a function to locate all elements greater than or equal to a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    results = []\n    for i in range(len(a)-1, -1, -1):\n        if a[i] >= x:\n            results.append(i)\n    return results\ndef find_all_less_than(a, x):\n    '''\n    Write a function to locate all elements less than a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    results = []\n    for i in range(len(a)-1, -1, -1):\n        if a[i] < x:\n            results.append(i)\n    return results\ndef find_all_less_than_or_equal(a, x):\n    '''\n    Write a function to locate all elements less than or equal to a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    results = []\n    for i in range(len(a)-1, -1, -1):\n        if a[i] <= x:\n            results.append(i)\n    return results\ndef find_all_between(a, x1, x2):\n    '''\n    Write a function to locate all elements between a specified value and a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    results = []\n    for i in range(len(a)-1, -1, -1):\n        if x1 <= a[i] and a[i] <= x2:\n            results.append(i)\n    return results\ndef find_all_between_or_equal(a, x1, x2):\n    '''\n    Write a function to locate all elements between a specified value and a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    results = []\n    for i in range(len(a)-1, -1, -1):\n        if x1 <= a[i] and a[i] <= x2:\n            results.append(i)\n    return results\ndef find_all_less_than_or_equal(a"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a)==0 or a[-1]<x:\n        a.append(x)\n        return\n    else:\n        n = len(a)\n        j = n-1\n        while j>0 and a[j-1]>x:\n            a[j],a[j-1] = a[j-1],a[j]\n            j -= 1\n        a.append(x)\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a is None:\n        return\n    i = len(a)-1\n    if a[i] < x:\n        a.append(x)\n    else:\n        while i >= 0 and a[i] > x:\n            i -= 1\n        a.insert(i+1, x)\n    return a\ndef left_insertion_bisect(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a is None:\n        return\n    i = bisect.bisect(a, x)\n    if i == 0 or a[i-1] > x:\n        a.insert(i, x)\n    return a\ndef left_insertion_bisect_insort(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a is None:\n        return\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i] > x:\n        a.insert(i, x)\n    return a\ndef left_insertion_bisect_insort_right(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a is None:\n        return\n    i = bisect.bisect_right(a, x)\n    if i == len(a) or a[i] > x:\n        a.insert(i, x)\n    return a\ndef left_insertion_bisect_insort_right_reverse(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a is None:\n        return\n    i = bisect.bisect_right(a, x)\n    if i == 0 or a[i-1] > x:\n        a.insert(i, x)\n    return a\ndef left_insertion_bisect_insort_left(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a is None:\n        return\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i] > x:\n        a.insert(i, x)\n    return a\ndef left_insertion_bisect_insort_left_reverse(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a is None:\n        return\n    i = bisect.bisect_left(a, x)\n    if i == 0 or a[i-1] > x:\n        a.insert(i, x)\n    return a\ndef left_insertion_bisect_left(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a is None:\n        return\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i] > x:\n        a.insert(i, x)\n    return a\ndef left_insertion_bisect_left_reverse(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a is None:\n        return\n    i = bisect.bisect_left(a, x)\n    if i == 0 or a[i-1] > x:\n        a.insert(i, x)\n    return a\ndef left_insertion_bisect_right(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a is None:\n        return\n    i = bisect.bisect_right(a, x)\n    if i == len(a) or a[i] > x:\n        a.insert(i, x)\n    return a\ndef left_insertion_bisect_right_reverse(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a is None:\n        return\n    i = bisect.bisect_right(a, x)\n    if i == 0 or a[i-1] > x:\n        a.insert(i, x)\n    return a\ndef left_insertion_bisect_right_reverse_bisect(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a is None:\n        return\n    i = bisect.bisect_right(a, x)\n    if i == 0 or a[i-1] > x:\n        a.insert(i, x)\n    return a\ndef left_insertion_bisect_left_reverse(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a is None:\n        return\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i] > x:\n        a.insert(i, x)\n    return a\ndef left_insertion_bisect_left_reverse_bisect(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a is None:\n        return\n    i = bisect.bisect_left(a, x)\n    if i == 0 or a[i-1] > x:\n        a.insert(i, x)\n    return a\ndef left_insertion_bisect_right_reverse_bisect(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www."
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # first get the index of the right most element\n    # this is done by searching for the next greater element that is smaller than x\n    # the index of the right most element is returned\n    # if there is no element greater than x, then x is inserted at index 0\n    # the index is returned\n    # the complexity is O(n)\n    i = bisect.bisect_left(a, x)\n    if a[i] > x:\n        return i\n    return i+1\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i:\n        return i-1\n    else:\n        return -1\ndef left_insertion_recursive(a, x):\n    '''\n    Recursive solution\n    '''\n    if a == []:\n        return -1\n    if a[0] > x:\n        return 0\n    else:\n        return left_insertion_recursive(a[1:], x) + 1\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_right(a, x)\n    if i:\n        return i-1\n    else:\n        return -1\ndef right_insertion_recursive(a, x):\n    '''\n    Recursive solution\n    '''\n    if a == []:\n        return -1\n    if a[-1] < x:\n        return len(a)-1\n    else:\n        return right_insertion_recursive(a[:-1], x) + 1\ndef linear_search(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in xrange(len(a)):\n        if a[i] == x:\n            return i\n    return -1\ndef linear_search_recursive(a, x):\n    '''\n    Recursive solution\n    '''\n    if a == []:\n        return -1\n    if a[0] == x:\n        return 0\n    else:\n        return linear_search_recursive(a[1:], x) + 1\ndef binary_search(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = 0\n    r = len(a) - 1\n    while l <= r:\n        mid = (l + r) / 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return -1\ndef binary_search_recursive(a, x):\n    '''\n    Recursive solution\n    '''\n    if a == []:\n        return -1\n    l = 0\n    r = len(a) - 1\n    if a[l] == x:\n        return l\n    if a[r] == x:\n        return r\n    mid = (l + r) / 2\n    if a[mid] == x:\n        return mid\n    elif a[mid] < x:\n        return binary_search_recursive(a[mid + 1:], x) + mid + 1\n    else:\n        return binary_search_recursive(a[:mid], x)\ndef merge_sort(a):\n    '''\n    Write a function to sort a list of numbers in ascending order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-10.php\n    '''\n    def merge(a, b):\n        if a == []:\n            return b\n        if b == []:\n            return a\n        if a[0] < b[0]:\n            return [a[0]] + merge(a[1:], b)\n        else:\n            return [b[0]] + merge(a, b[1:])\n    if len(a) < 2:\n        return a\n    mid = len(a) / 2\n    return merge(merge_sort(a[:mid]), merge_sort(a[mid:]))\ndef merge_sort_recursive(a):\n    '''\n    Recursive solution\n    '''\n    if len(a) < 2:\n        return a\n    mid = len(a) / 2\n    return merge(merge_sort_recursive(a[:mid]), merge_sort_recursive(a[mid:]))\ndef heapify(a, n, i):\n    '''\n    Write a function to build a heap. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-12.php\n    '''\n    largest = i\n    left = 2*i + 1\n    right = 2*i + 2\n    if left < n and a[i] < a[left]:\n        largest = left\n    if right < n and a[largest] < a[right]:\n        largest = right\n    if largest!= i:\n        a[i], a[largest] = a[largest], a[i]\n        heapify(a, n, largest)\ndef heap_sort(a):\n    '''\n    Write a function to sort a list of numbers in ascending order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-12.php\n    '''\n    n = len(a)\n    for i in xrange(n/2 - 1, -1, -1):\n        heapify(a, n, i)\n    for i in xrange(n-1, 0, -1):\n        a[0], a[i] = a[i], a[0]\n        heapify(a, i, 0)\ndef heap_sort_recursive(a):\n    '''\n    Recursive solution\n    '''\n    n = len(a)\n    for i in xrange(n/2 - 1, -1, -1):\n        heapify_recursive(a, n, i)\n    for i in xrange(n-1, 0, -1):\n        a[0], a[i] = a[i], a[0]\n        heapify_recursive(a, i, 0)\ndef heapify_recursive(a, n, i):\n    '''\n    Recursive solution\n    '''\n    largest = i\n    left = 2*i + 1\n    right = 2*i + 2\n    if left < n and a[i] < a[left]:\n        largest = left\n    if right < n and a[largest] < a[right]:\n        largest = right\n    if largest!= i:\n        a[i], a[largest] = a[largest], a[i]\n        heapify_recursive(a, n, largest)\ndef insertion_sort(a):\n    '''\n    Write a function to sort a list of numbers in ascending order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-12.php\n    '''\n    for i in xrange(1, len(a)):\n        key = a[i]\n        j = i - 1\n        while j >= 0 and key < a[j]:\n            a[j+1] = a[j]\n            j -= 1\n        a[j+1] = key\ndef insertion_sort_recursive(a):\n    '''\n    Recursive solution\n    '''\n    for i in xrange(1, len(a)):\n        key = a[i]\n        j = i - 1\n        while j >= 0 and key < a[j]:\n            a[j+1] = a[j]\n            j -= 1\n        a[j+1] = key\ndef selection_sort(a):\n    '''\n    Write a function to sort a list of numbers in ascending order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = bisect.bisect_left(a, x)\n    print(left)\n    return left\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # find the first element < x\n    i = bisect.bisect_left(a, x)\n    print i\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Case1: If x is not present in the list, then simply insert it\n    if (a[-1] < x):\n        return len(a)\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    idx = bisect.bisect_left(a, x)\n    a.insert(idx, x)\n    return idx\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.search(regex,string)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True\n    return False\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    reg = re.match(regex, string)\n    if reg: \n        print(string, 'is a valid string')\n    else: \n        print(string, 'is not a valid string')\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    result = re.match(regex, string)\n    if result: \n        print 'Yes'\n    else:\n        print 'No'\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.search(regex, string)): \n        print \"String starts with vowel\"\n    else: \n        print \"String starts with consonant\"\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True \n    return False \ncheck_str('b')\ncheck_str('aeiou')\ncheck_str('aeiouAEIOU')\ncheck_str('aeiouaeiou')\ncheck_str('ab')\ncheck_str('ab1')\ncheck_str('ab_1')\ncheck_str('AB_1')\ncheck_str('Ab_1')\ncheck_str('A1')\ncheck_str('AAa_')\ncheck_str('abc')\ncheck_str('ABC_abc')\ncheck_str('abc_abc')\ncheck_str('aBC_abc')\ncheck_str('Abc_abc')\ncheck_str('abcAbc_abc')\ncheck_str('ABCABC_abc')\ncheck_str('ABC_abc_abc')\ncheck_str('ABC_abcABC_abc')\ncheck_str('AbC_abc_abc')\ncheck_str('ABC_abc_AbC_abc')\ncheck_str('AbC_abc_ABC_abc')\ncheck_str('AbC_abc_ABC_abc_abc')\ncheck_str('AbC_abc_ABC_abc_AbC_abc')\ncheck_str('AbC_abc_ABC_abc_AbC_abc_abc')\ncheck_str('AbC_abc_ABC_abc_AbC_abc_abc_AbC_abc')\ncheck_str('AbC_abc_ABC_abc_AbC_abc_abc_AbC_abc_abc')\ncheck_str('AbC_abc_ABC_abc_AbC_abc_abc_AbC_abc_abc_abc')\ncheck_str('AbC_abc_ABC_abc_AbC_abc_abc_AbC_abc_abc_AbC_abc')\ncheck_str('AbC_abc_ABC_abc_AbC_abc_abc_AbC_abc_abc_AbC_abc_AbC_abc_AbC_abc')\ncheck_str('AbC_abc_ABC_abc_AbC_abc_abc_AbC_abc_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc')\ncheck_str('AbC_abc_ABC_abc_AbC_abc_abc_AbC_abc_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc')\ncheck_str('AbC_abc_ABC_abc_AbC_abc_abc_AbC_abc_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc')\ncheck_str('AbC_abc_ABC_abc_AbC_abc_abc_AbC_abc_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc')\ncheck_str('AbC_abc_ABC_abc_AbC_abc_abc_AbC_abc_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc')\ncheck_str('AbC_abc_ABC_abc_AbC_abc_abc_AbC_abc_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc')\ncheck_str('AbC_abc_ABC_abc_AbC_abc_abc_AbC_abc_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc')\ncheck_str('AbC_abc_ABC_abc_AbC_abc_abc_AbC_abc_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc')\ncheck_str('AbC_abc_ABC_abc_AbC_abc_abc_AbC_abc_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc')\ncheck_str('AbC_abc_ABC_abc_AbC_abc_abc_AbC_abc_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc')\ncheck_str('AbC_abc_ABC_abc_AbC_abc_abc_AbC_abc_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc')\ncheck_str('AbC_abc_ABC_abc_AbC_abc_abc_AbC_abc_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc')\ncheck_str('AbC_abc_ABC_abc_AbC_abc_abc_AbC_abc_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc')\ncheck_str('AbC_abc_ABC_abc_AbC_abc_abc_AbC_abc_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc')\ncheck_str('AbC_abc_ABC_abc_AbC_abc_abc_AbC_abc_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc')\ncheck_str('AbC_abc_ABC_abc_AbC_abc_abc_AbC_abc_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc')\ncheck_str('AbC_abc_ABC_abc_AbC_abc_abc_AbC_abc_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc')\ncheck_str('AbC_abc_ABC_abc_AbC_abc_abc_AbC_abc_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc')\ncheck_str('AbC_abc_ABC_abc_AbC_abc_abc_AbC_abc_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc')\ncheck_str('AbC_abc_ABC_abc_AbC_abc_abc_AbC_abc_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc')\ncheck_str('AbC_abc_ABC_abc_AbC_abc_abc_AbC_abc_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc_AbC_abc')\ncheck_str('AbC_abc_ABC_abc_AbC_abc_ab"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex, string))\nprint check_str('aS')\nprint check_str('a')\nprint check_str('aa')\nprint check_str('aas')\nprint check_str('as')\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    global regex\n    if re.match(regex, string): \n        return \"True\"\n    else: \n        return \"False\"\nprint check_str('a')\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex,string) is not None\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        print('True')\n    else:\n        print('False')\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n*(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    #assert(n >= 0)\n    if n == 0:\n        return 1\n    else:\n        return (1.0 * n * geometric_sum(n-1))\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return 1 + (1/n)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (1/n)*geometric_sum(n-1)\n    \n    \nif __name__ == \"__main__\":\n    print geometric_sum(0)\n    print geometric_sum(1)\n    print geometric_sum(2)\n    print geometric_sum(3)\n    print geometric_sum(4)\n    print geometric_sum(5)\n    print geometric_sum(6)\n    print geometric_sum(7)\n    print geometric_sum(8)\n    print geometric_sum(9)\n    print geometric_sum(10)\n    print geometric_sum(11)\n    print geometric_sum(12)\n    print geometric_sum(13)\n    print geometric_sum(14)\n    print geometric_sum(15)\n    print geometric_sum(16)\n    print geometric_sum(17)\n    print geometric_sum(18)\n    print geometric_sum(19)\n    print geometric_sum(20)\n    print geometric_sum(21)\n    print geometric_sum(22)\n    print geometric_sum(23)\n    print geometric_sum(24)\n    print geometric_sum(25)\n    print geometric_sum(26)\n    print geometric_sum(27)\n    print geometric_sum(28)\n    print geometric_sum(29)\n    print geometric_sum(30)\n    print geometric_sum(31)\n    print geometric_sum(32)\n    print geometric_sum(33)\n    print geometric_sum(34)\n    print geometric_sum(35)\n    print geometric_sum(36)\n    print geometric_sum(37)\n    print geometric_sum(38)\n    print geometric_sum(39)\n    print geometric_sum(40)\n    print geometric_sum(41)\n    print geometric_sum(42)\n    print geometric_sum(43)\n    print geometric_sum(44)\n    print geometric_sum(45)\n    print geometric_sum(46)\n    print geometric_sum(47)\n    print geometric_sum(48)\n    print geometric_sum(49)\n    print geometric_sum(50)\n    print geometric_sum(51)\n    print geometric_sum(52)\n    print geometric_sum(53)\n    print geometric_sum(54)\n    print geometric_sum(55)\n    print geometric_sum(56)\n    print geometric_sum(57)\n    print geometric_sum(58)\n    print geometric_sum(59)\n    print geometric_sum(60)\n    print geometric_sum(61)\n    print geometric_sum(62)\n    print geometric_sum(63)\n    print geometric_sum(64)\n    print geometric_sum(65)\n    print geometric_sum(66)\n    print geometric_sum(67)\n    print geometric_sum(68)\n    print geometric_sum(69)\n    print geometric_sum(70)\n    print geometric_sum(71)\n    print geometric_sum(72)\n    print geometric_sum(73)\n    print geometric_sum(74)\n    print geometric_sum(75)\n    print geometric_sum(76)\n    print geometric_sum(77)\n    print geometric_sum(78)\n    print geometric_sum(79)\n    print geometric_sum(80)\n    print geometric_sum(81)\n    print geometric_sum(82)\n    print geometric_sum(83)\n    print geometric_sum(84)\n    print geometric_sum(85)\n    print geometric_sum(86)\n    print geometric_sum(87)\n    print geometric_sum(88)\n    print geometric_sum(89)\n    print geometric_sum(90)\n    print geometric_sum(91)\n    print geometric_sum(92)\n    print geometric_sum(93)\n    print geometric_sum(94)\n    print geometric_sum(95)\n    print geometric_sum(96)\n    print geometric_sum(97)\n    print geometric_sum(98)\n    print geometric_sum(99)\n    print geometric_sum(100)\n    print geometric_sum(101)\n    print geometric_sum(102)\n    print geometric_sum(103)\n    print geometric_sum(104)\n    print geometric_sum(105)\n    print geometric_sum(106)\n    print geometric_sum(107)\n    print geometric_sum(108)\n    print geometric_sum(109)\n    print geometric_sum(110)\n    print geometric_sum(111)\n    print geometric_sum(112)\n    print geometric_sum(113)\n    print geometric_sum(114)\n    print geometric_sum(115)\n    print geometric_sum(116)\n    print geometric_sum(117)\n    print geometric_sum(118)\n    print geometric_sum(119)\n    print geometric_sum(120)\n    print geometric_sum(121)\n    print geometric_sum(122)\n    print geometric_sum(123)\n    print geometric_sum(124)\n    print geometric_sum(125)\n    print geometric_sum(126)\n    print geometric_sum(127)\n    print geometric_sum(128)\n    print geometric_sum(129)\n    print geometric_sum(130)\n    print geometric_sum(131)\n    print geometric_sum(132)\n    print geometric_sum(133)\n    print geometric_sum(134)\n    print geometric_sum(135)\n    print geometric_sum(136)\n    print geometric_sum(137)\n    print geometric_sum(138)\n    print geometric_sum(139)\n    print geometric_sum(140)\n    print geometric_sum(141)\n    print geometric_sum(142)\n    print geometric_sum(143)\n    print geometric_sum(144)\n    print geometric_sum(145)\n    print geometric_sum(146)\n    print geometric_sum(147)\n    print geometric_sum(148)\n    print geometric_sum(149)\n    print geometric_sum(150)\n    print geometric_sum(151)\n    print geometric_sum(152)\n    print geometric_sum(153)\n    print geometric_sum(154)\n    print geometric_sum(155)\n    print geometric_sum(156)\n    print geometric_sum(157)\n    print geometric_sum(158)\n    print geometric_sum(159)\n    print geometric_sum(160)\n    print geometric_sum(161)\n    print geometric_sum(162)\n    print geometric_sum(163)\n    print geometric_sum(164)\n    print geometric_sum(165)\n    print geometric_sum(166)\n    print geometric_sum(167)\n    print geometric_sum(168)\n    print geometric_sum(169)\n    print geometric_sum(170)\n    print geometric_sum(171)\n    print geometric_sum(172)\n    print geometric_sum(173)\n    print geometric_sum(174)\n    print geometric_sum(175)\n    print geometric_sum(176)\n    print geometric_sum(177)\n    print geometric_sum(178)\n    print geometric_sum(179)\n    print geometric_sum(180)\n    print geometric_sum(181)\n    print geometric_sum(182)\n    print geometric_sum(183)\n    print geometric_sum(184)\n    print geometric_sum(185)\n    print geometric_sum(186)\n    print geometric_sum(187)\n    print geometric_sum(188)\n    print geometric_sum(189)\n    print geometric_sum(190)\n    print geometric_sum(191)\n    print geometric_sum(192)\n    print geometric_sum(193)\n    print geometric_sum(194)\n    print geometric_sum(195)\n    print geometric_sum(196)\n    print geometric_sum(197)\n    print geometric_sum(198)\n    print geometric_sum(199)\n    print geometric_sum(200)\n    print geometric_sum(201)\n    print geometric_sum(202)\n    print geometric_sum(203)\n    print geometric_sum(204)\n    print geometric_sum(205)\n    print geometric_sum(206)\n    print geometric_sum(207)\n    print geometric_sum(208)\n    print geometric_sum(209)\n    print geometric_sum(210)\n    print geometric_sum(211)\n    print geometric_sum(212)\n    print geometric_sum(213)\n    print geometric_sum"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n*(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return 1\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    \n    if n == 1:\n        return 1\n    else:\n        return (1/n) * geometric_sum(n-1)\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = 0\n    for i in range(int(math.pow(10,n) -1),int(math.pow(10,n+1)-1)):\n        if(int(math.pow(i,n+1)) % (int(math.pow(10,n+1)) - 1) == 0):\n            index = i\n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1: \n        return 0\n    t = int(math.pow(n,1/3)) \n    i = 1\n    while(1): \n        if i*(i+1)/2 > t: \n            return i-1\n        i += 1\n    return 0\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    x = int(math.ceil(math.log(n,3))) \n    return (x*(x+1))/2\ndef is_triangle(n):\n    '''\n    Write a python function to determine whether a number is a triangular number or not.\n    '''\n    t = (1/2)*n*(n+1)\n    return t == int(t)\ndef find_triangular_number(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    return int(n*(n+1)/2)\ndef find_n_digit_number(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    return int(n*(n+1)/2)\ndef find_largest_triangular_number(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    return int((n-1)*(n+1)*n/2)\ndef find_smallest_triangular_number(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    return int((n+1)*(n+2)/2)\ndef is_pentagonal(n):\n    '''\n    Write a python function to determine whether a number is a pentagonal number or not.\n    '''\n    s = (1 + math.sqrt(1 + 24*n))/6\n    return s == int(s)\ndef find_pentagonal_number(n):\n    '''\n    Write a python function to find the pentagonal number with n digits. https://www.geeksforgeeks.org/pentagonal-number/\n    '''\n    return int((math.sqrt(1+8*n)+1)/4)\ndef find_n_digit_pentagonal_number(n):\n    '''\n    Write a python function to find the pentagonal number with n digits. https://www.geeksforgeeks.org/pentagonal-number/\n    '''\n    return int((math.sqrt(1+8*n)+1)/4)\ndef find_nth_prime(n):\n    '''\n    Write a python function to find the nth prime number. https://www.geeksforgeeks.org/nth-prime-number/\n    '''\n    count = 0\n    k = 2\n    while(count < n):\n        k += 1\n        for j in range(2, k):\n            if(k % j == 0):\n                break\n        else:\n            count += 1\n    return k\ndef is_perfect_square(n):\n    '''\n    Write a python function to determine whether a number is a perfect square number or not.\n    '''\n    s = int(math.sqrt(n))\n    return s*s == n\ndef find_perfect_square_number(n):\n    '''\n    Write a python function to find the square root of a perfect square number. https://www.geeksforgeeks.org/perfect-square-number/\n    '''\n    return int(math.sqrt(n))\ndef find_n_digit_perfect_square_number(n):\n    '''\n    Write a python function to find the square root of a perfect square number with n digits. https://www.geeksforgeeks.org/perfect-square-number/\n    '''\n    return int(math.sqrt(n))\ndef is_circular_prime(n):\n    '''\n    Write a python function to determine whether a number is a circular prime number or not.\n    '''\n    if(is_prime(n) == False):\n        return False\n    s = str(n)\n    for i in range(len(s)):\n        t = s[i:] + s[:i]\n        if(is_prime(int(t)) == False):\n            return False\n    return True\ndef find_circular_prime_number(n):\n    '''\n    Write a python function to find the circular prime number with n digits. https://www.geeksforgeeks.org/circular-prime-number/\n    '''\n    if(is_prime(n) == False):\n        return False\n    s = str(n)\n    for i in range(len(s)):\n        t = s[i:] + s[:i]\n        if(is_prime(int(t)) == False):\n            return False\n    return True\ndef find_n_digit_circular_prime_number(n):\n    '''\n    Write a python function to find the circular prime number with n digits. https://www.geeksforgeeks.org/circular-prime-number/\n    '''\n    if(is_prime(n) == False):\n        return False\n    s = str(n)\n    for i in range(len(s)):\n        t = s[i:] + s[:i]\n        if(is_prime(int(t)) == False):\n            return False\n    return True\ndef is_palindrome(n):\n    '''\n    Write a python function to determine whether a number is a palindrome number or not.\n    '''\n    return str(n) == str(n)[::-1]\ndef find_n_digit_palindrome_number(n):\n    '''\n    Write a python function to find the palindrome number with n digits. https://www.geeksforgeeks.org/palindrome-number/\n    '''\n    if(is_prime(n) == False):\n        return False\n    s = str(n)\n    for i in range(len(s)):\n        t = s[i:] + s[:i]\n        if(is_palindrome(int(t)) == False):\n            return False\n    return True\ndef is_anagram(s1, s2):\n    '''\n    Write a python function to determine whether two strings are anagrams or not.\n    '''\n    s1 = s1.replace(' ', '').lower()\n    s2 = s2.replace(' ', '').lower()\n    for i in range(len(s1)):\n        if(s1[i]!= s2[i]):\n            return False\n    return True\ndef find_anagram_number(s):\n    '''\n    Write a python function to find the anagram number with n digits. https://www.geeksforgeeks.org/anagram-number/\n    '''\n    s = s.replace(' ', '').lower()\n    for i in range(10):\n        if(is_anagram(str(i), s)):\n            return i\ndef is_perfect_power(n):\n    '''\n    Write a python function to determine whether a number is a perfect power number or not.\n    '''\n    return int(math.sqrt(n))**2 == n\ndef find_perfect_power_number(n):\n    '''\n    Write a python function to find the perfect power number with n digits. https://www.geeksforgeeks.org/perfect-power-number/\n    '''\n    s = str(n)\n    s1 = s[:]\n    for i in range(len(s1)):\n        t = s[i:] + s[:i]\n        if(is_perfect_power(int(t)) == True):\n            return int(t)\ndef find_n_digit_perfect_power_number(n):\n    '''\n    Write a python function to find the perfect power number with n digits. https://www.geeksforgeeks.org/perfect-power-number/\n    '''\n    s = str(n)\n    s1 = s[:]\n    for i in range(len(s1)):\n        t = s[i:] + s[:i]\n        if(is_perfect_power(int(t)) == True):\n            return int(t)\ndef is_factorial(n):\n    '''\n    Write a python function to determine whether a number is a factorial number or not.\n    '''\n    return n == "
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if(n == 1): \n        return 0\n    if(n == 2): \n        return 1\n    if(n == 3): \n        return 2\n    if(n == 4): \n        return 3\n    if(n == 5): \n        return 4\n    if(n == 6): \n        return 5\n    if(n == 7): \n        return 6\n    if(n == 8): \n        return 7\n    if(n == 9): \n        return 8\n    if(n == 10): \n        return 9\n    if(n == 11): \n        return 10\n    if(n == 12): \n        return 11\n    if(n == 13): \n        return 12\n    if(n == 14): \n        return 13\n    if(n == 15): \n        return 14\n    return -1\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1:\n        return 0\n    start = (n-1)*(n+1)//2\n    for i in range(start,0,-1):\n        if len(str(i)) == n:\n            return i\n            break\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if (n == 1):\n        return 1\n    else:\n        return 10**(n-1) + 9*find_Index(n-1)\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangle = [int(x) for x in range(0,10)]\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return math.ceil((9.0/5.0)*(pow(10,n)-1))\n    \ndef T(n):\n    '''\n    Write a python function to calculate the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number-python/\n    '''\n    return int(n*(n+1)/2)\n    \ndef find_index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return math.ceil((9.0/5.0)*(pow(10,n)-1))\n    \ndef find_smallest_digit(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if(n==1):\n        return 0\n    smallest_index = 0\n    smallest = 0\n    for i in range(1,n):\n        if (T(i) <= T(n)):\n            if (T(i)<smallest):\n                smallest = T(i)\n                smallest_index = i\n    return smallest_index\n    \ndef sum_of_digits(n):\n    '''\n    Write a python function to find the sum of digits of a number. https://www.geeksforgeeks.org/sum-of-digits-of-a-number/\n    '''\n    s = 0\n    while(n):\n        s += n%10\n        n//=10\n    return s\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    start = int(math.pow(10,n))\n    end = int(math.pow(10,n+1))-1\n    while start <= end:\n        mid = start + (end-start)//2\n        if(math.pow(mid,2) - (mid-1) == 0):\n            return mid\n        elif(math.pow(mid,2) - (mid-1) > 0):\n            end = mid - 1\n        else:\n            start = mid + 1\n    return None\ndef find_Triangular_Number(n): \n    '''\n    Write a python function to find the nth triangular number. https://www.geeksforgeeks.org/nth-triangular-number/\n    '''\n    if(n == 1):\n        return 0\n    n = int(n)\n    tri = 0\n    count = 1\n    while(count <= n):\n        tri += count\n        count += 1\n    return tri\ndef find_Pentagonal_Number(n): \n    '''\n    Write a python function to find the nth pentagonal number. https://www.geeksforgeeks.org/pentagonal-number/\n    '''\n    n = int(n)\n    if(n == 1):\n        return 0\n    pent = 0\n    count = 1\n    while(count <= n):\n        pent += count*(3*count-1)//2\n        count += 1\n    return pent\ndef find_Hexagonal_Number(n): \n    '''\n    Write a python function to find the nth hexagonal number. https://www.geeksforgeeks.org/hexagonal-number/\n    '''\n    n = int(n)\n    if(n == 1):\n        return 0\n    hex = 0\n    count = 1\n    while(count <= n):\n        hex += count*(2*count-1)\n        count += 1\n    return hex\ndef find_Heptagonal_Number(n): \n    '''\n    Write a python function to find the nth heptagonal number. https://www.geeksforgeeks.org/heptagonal-number/\n    '''\n    n = int(n)\n    if(n == 1):\n        return 0\n    hept = 0\n    count = 1\n    while(count <= n):\n        hept += count*(5*count-3)//2\n        count += 1\n    return hept\ndef find_Octagonal_Number(n): \n    '''\n    Write a python function to find the nth octagonal number. https://www.geeksforgeeks.org/octagonal-number/\n    '''\n    n = int(n)\n    if(n == 1):\n        return 0\n    oct = 0\n    count = 1\n    while(count <= n):\n        oct += count*(3*count-2)\n        count += 1\n    return oct\ndef find_Non_Equal_Digits(n): \n    '''\n    Write a python function to find the nth non-equal-digits number. https://www.geeksforgeeks.org/non-equal-digits-number/\n    '''\n    n = int(n)\n    if(n == 1):\n        return 0\n    count = 1\n    rem = n\n    while(rem > 1):\n        rem = rem - count\n        count += 1\n    return count - 1\ndef find_Consecutive_Number(n): \n    '''\n    Write a python function to find the nth consecutive number. https://www.geeksforgeeks.org/consecutive-number/\n    '''\n    n = int(n)\n    if(n == 1):\n        return 1\n    count = 1\n    rem = n\n    while(rem > 1):\n        rem = rem - count\n        count += 1\n    return count\ndef find_Value_Factorial(n): \n    '''\n    Write a python function to find the factorial of a given number. https://www.geeksforgeeks.org/factorial-of-a-number/\n    '''\n    n = int(n)\n    fact = 1\n    count = 1\n    while(count <= n):\n        fact *= count\n        count += 1\n    return fact\ndef find_Reverse_Number(n): \n    '''\n    Write a python function to find the reverse of a given number. https://www.geeksforgeeks.org/reverse-a-number/\n    '''\n    n = int(n)\n    rev = 0\n    while(n!= 0):\n        r = n % 10\n        rev = rev*10 + r\n        n = n//10\n    return rev\ndef find_Permuted_Number(n): \n    '''\n    Write a python function to find the permuted number. https://www.geeksforgeeks.org/permuted-number/\n    '''\n    n = int(n)\n    perm = 0\n    count = 1\n    while(count <= n):\n        perm += find_Factorial(count)\n        count += 1\n    return perm\ndef find_Harmonic_Number(n): \n    '''\n    Write a python function to find the harmonic number. https://www.geeksforgeeks.org/harmonic-number/\n    '''\n    n = int(n)\n    if(n == 0):\n        return 0\n    if(n == 1):\n        return 1\n    sum = 1\n    count = 1\n    while(count <= n):\n        sum += 1/count\n        count += 1\n    return sum\ndef find_Arithmetic_Number(n): \n    '''\n    Write a python function to find the arithmetic number. https://www.geeksforgeeks.org/arithmetic-number/\n    '''\n    n = int(n)\n    if(n == 0):\n        return 0\n    if(n == 1):\n        return 1\n    sqrt = int(math.sqrt(n))\n    if(sqrt*sqrt == n):\n        return sqrt\n    count = 1\n    while(count <= n):\n        if((sqrt+count)**2 == n):\n            return sqrt+count\n        if((sqrt-count)**2 == n):\n            return sqrt-count\n        count += 1\n    return -1\ndef find_Physics_Number(n): \n    '''\n    Write a python function to find the physics number. https://www.geeksforgeeks.org/physics-number/\n    '''\n    n = int(n)\n    if(n == 0):\n        return 0\n    if(n == 1):\n        return 1\n    sum = 1\n    count = 1\n    while(count <= n):\n        sum += ((-1)**count)*(2*count+1)/((2*count+1)*(2*count+2))\n        count += 1\n    return sum\ndef find_Number_Of_Digits(n): \n    '''\n    Write a python function to find the number of digits in a number. https://www.geeksforgeeks.org/number-of-digits-in-a-number/\n    '''\n    n = int(n)\n    if(n == 0):\n        return 0\n    count = 0\n    while(n > 0):\n        n = n//10\n        count += 1\n    return count\ndef find_Power_of_Two(n): \n    '''\n    Write a python function to find the power of two. https://www.geeksforgeeks.org/power-of-two/\n    '''\n    n = int(n)\n    if(n == 0):\n        return 0\n    pow = 1\n    count = 0\n    while(pow <= n):\n        pow *= 2\n        count += 1\n    return count\ndef find_Factorial_of_Number(n): \n    '''\n    Write a python function to find the factorial of a given number. https://www.geeksforgeeks.org/factorial-of-a-number/\n    '''\n    n = int(n)\n    fact = 1\n    count = 1\n    while(count <= n):\n        fact *= count\n        count += 1\n    return fact\ndef find_Fibonacci_Number(n): \n    '''\n    Writ"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    ans = int(math.pow(9,n))\n    return ans \ndef TriangleNumber(n):\n    '''\n    Write a python function to find the triangular number having n digits. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    return int(math.pow(9,n) * ((n)*(n + 1)) / 2)\ndef CountDigits(n):\n    '''\n    Write a python function to count the digits in a given number n. https://www.geeksforgeeks.org/count-digits-in-a-given-number/\n    '''\n    count = 0\n    while(n > 0):\n        n = n / 10\n        count = count + 1\n    return count\ndef FindFactors(n):\n    '''\n    Write a python function to find the factors of a given number n. https://www.geeksforgeeks.org/find-factors-of-a-number-n/\n    '''\n    factors = []\n    if(n == 1):\n        return factors \n    for i in range(1,int(math.sqrt(n))+1):\n        if(n % i == 0):\n            factors.append(i)\n            factors.append(n/i)\n    factors.sort()\n    factors.remove(n)\n    return factors\ndef SumOfDigits(n):\n    '''\n    Write a python function to find the sum of the digits of a given number n. https://www.geeksforgeeks.org/sum-of-digits-of-a-number-n/\n    '''\n    s = 0\n    while(n > 0):\n        s = s + (n%10)\n        n = n / 10\n    return s\ndef IsPrime(n):\n    '''\n    Write a python function to check if a given number n is prime or not. https://www.geeksforgeeks.org/check-if-a-given-number-n-is-prime/\n    '''\n    if(n < 2):\n        return False\n    if(n == 2):\n        return True\n    if(n % 2 == 0):\n        return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if(n % i == 0):\n            return False\n    return True\ndef FindPrimeFactors(n):\n    '''\n    Write a python function to find all the prime factors of a given number n. https://www.geeksforgeeks.org/find-all-prime-factors-of-a-number-n/\n    '''\n    Factors = []\n    while(n > 1):\n        if(IsPrime(n)):\n            Factors.append(n)\n        n = n - 1\n    return Factors\ndef Triangle(n):\n    '''\n    Write a python function to find the sum of the factors of a given number n. https://www.geeksforgeeks.org/find-sum-of-factors-of-a-number-n/\n    '''\n    return int(n * (n + 1) / 2)\ndef PrimeFactors(n):\n    '''\n    Write a python function to find the prime factors of a given number n. https://www.geeksforgeeks.org/find-prime-factors-of-a-number-n/\n    '''\n    Factors = []\n    while(n % 2 == 0):\n        Factors.append(2)\n        n = n / 2\n    for i in range(3,int(math.sqrt(n))+1,2):\n        while(n % i == 0):\n            Factors.append(i)\n            n = n / i\n    if(n > 2):\n        Factors.append(n)\n    return Factors\ndef SumFactors(n):\n    '''\n    Write a python function to find the sum of the factors of a given number n. https://www.geeksforgeeks.org/find-sum-of-factors-of-a-number-n/\n    '''\n    Sum = 1\n    Factors = FindFactors(n)\n    Factors.sort()\n    for i in Factors:\n        Sum = Sum * i\n    return Sum\ndef MaximumSum(n):\n    '''\n    Write a python function to find the maximum sum of the digits of a given number n. https://www.geeksforgeeks.org/maximum-sum-of-digits-of-a-number-n/\n    '''\n    max = 0\n    while(n > 0):\n        i = n % 10\n        if(max < i):\n            max = i\n        n = n / 10\n    return max\ndef FindPairs(n, k):\n    '''\n    Write a python function to find the maximum sum of the digits of a given number n. https://www.geeksforgeeks.org/maximum-sum-of-digits-of-a-number-n/\n    '''\n    s = 0\n    while(n > 0):\n        i = n % 10\n        s = s + i\n        n = n / 10\n    if(s == k):\n        return True\n    else:\n        return False\ndef SmallestFactor(n):\n    '''\n    Write a python function to find the smallest prime factor of a given number n. https://www.geeksforgeeks.org/smallest-prime-factor-of-a-number-n/\n    '''\n    Factors = FindFactors(n)\n    Factors.sort()\n    return Factors[0]\ndef SumFactors2(n):\n    '''\n    Write a python function to find the sum of the factors of a given number n. https://www.geeksforgeeks.org/find-sum-of-factors-of-a-number-n/\n    '''\n    Sum = 1\n    Factors = FindFactors(n)\n    Factors.sort()\n    for i in Factors:\n        Sum = Sum * i\n    return Sum\ndef Permutation(n):\n    '''\n    Write a python function to find the permutation of a given number n. https://www.geeksforgeeks.org/find-permutation-of-a-number-n/\n    '''\n    Factors = FindFactors(n)\n    Factors.sort()\n    for i in Factors:\n        Factors.remove(i)\n    Factors.sort()\n    return Factors\ndef Combination(n):\n    '''\n    Write a python function to find the combination of a given number n. https://www.geeksforgeeks.org/find-combination-of-a-number-n/\n    '''\n    Factors = FindFactors(n)\n    Factors.sort()\n    for i in Factors:\n        Factors.remove(i)\n    Factors.sort()\n    return Factors\ndef FindFactors2(n):\n    '''\n    Write a python function to find the factors of a given number n. https://www.geeksforgeeks.org/find-factors-of-a-number-n/\n    '''\n    Factors = []\n    i = 1\n    while(i <= math.sqrt(n)):\n        if(n % i == 0):\n            Factors.append(i)\n            Factors.append(n/i)\n        i = i + 1\n    Factors.sort()\n    Factors.remove(n)\n    return Factors\ndef IsPandigital(n,k):\n    '''\n    Write a python function to check if a given number n is a Pandigital number. https://www.geeksforgeeks.org/check-if-a-given-number-n-is-pandigital-number/\n    '''\n    count = 0\n    while(n > 0):\n        n = n / 10\n        count = count + 1\n    if(count!= k):\n        return False\n    else:\n        return True\ndef FindPandigital(n,k):\n    '''\n    Write a python function to find the pandigital number of length k with n digits. https://www.geeksforgeeks.org/find-pandigital-number-of-length-k-with-n-digits/\n    '''\n    temp = n \n    count = 0\n    while(temp > 0):\n    "
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[0]: test_tup[1]}\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[0::2],test_tup[1::2]))\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup), 2)}\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict([test_tup[i:i+2] for i in range(0,len(test_tup), 2)])\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {tup[i]: tup[i+1] for i in range(0, len(tup), 2)}\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    \n    my_dict = {}\n    for idx, val in enumerate(test_tup):\n        my_dict[idx] = val\n    return my_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[x]: test_tup[x+1] for x in range(0,len(test_tup), 2)}\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(len(test_tup)):\n        if i%2 == 0:\n            key = test_tup[i]\n        else:\n            val = test_tup[i]\n            test_dict[key] = val\n    return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dictionary = {}\n    for i in range(0, len(test_tup), 2):\n        dictionary[test_tup[i]] = test_tup[i + 1]\n    return dictionary\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if not isinstance(test_tup, tuple):\n        raise TypeError(\"Invalid Input\")\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] :\n        return True\n    return False\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s) - 1) :\n        if s[i]!= s[i + 1] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    \n    l = list(s)\n    \n    d = {}\n    \n    for i in l :\n        \n        if i in d :\n            \n            d[i] += 1\n            \n        else :\n            \n            d[i] = 1\n            \n    for k,v in d.items() :\n        \n        if v == 1 :\n            \n            return True\n            \n        else :\n            \n            return False\n            \n    return True\n    \n    \n    \n    \n    \n    \ndef longest_Alternating_Sequence(s):\n    '''\n    Write a python function to find the longest alternating sequence.\n    '''\n    \n    if len(s) == 0 :\n        \n        return 0\n    \n    elif len(s) == 1 :\n        \n        return 1\n    \n    l = list(s)\n    \n    d = {}\n    \n    for i in l :\n        \n        if i in d :\n            \n            d[i] += 1\n            \n        else :\n            \n            d[i] = 1\n            \n    if len(d) == 1 :\n        \n        return 1\n    \n    d[l[0]] -= 1\n    d[l[-1]] -= 1\n    \n    if d[l[0]] == 1 and d[l[-1]] == 1 :\n        \n        return 2\n    \n    \n    else :\n        \n        return 1 + max(d[l[0]], d[l[-1]])\n    \n    \n    \n    \n    \ndef even_palindrome(s) :\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    \n    if len(s) == 0 :\n        \n        return True\n    \n    elif len(s) == 1 :\n        \n        return True\n    \n    elif len(s) % 2 == 0 :\n        \n        return True\n    \n    elif len(s) % 2!= 0 :\n        \n        return False\n    \n    l = list(s)\n    \n    l = l[:len(l) // 2]\n    \n    rev = l[::-1]\n    \n    if l == rev :\n        \n        return True\n        \n    else :\n        \n        return False\n        \n    \n    \n    \n    \n    \ndef is_palindrome_permutation(s) :\n    '''\n    Write a python function to check whether a string is a permutation of a palindrome or not.\n    '''\n    \n    if len(s) == 0 :\n        \n        return True\n    \n    elif len(s) == 1 :\n        \n        return True\n    \n    elif len(s) % 2 == 0 :\n        \n        return True\n    \n    elif len(s) % 2!= 0 :\n        \n        return False\n    \n    l = list(s)\n    \n    l = l[:len(l) // 2]\n    \n    rev = l[::-1]\n    \n    if l == rev :\n        \n        return True\n        \n    else :\n        \n        return False\n        \n    \n    \n    \n    \n    \ndef is_palindrome(s) :\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    \n    if len(s) == 0 :\n        \n        return True\n    \n    elif len(s) == 1 :\n        \n        return True\n    \n    elif len(s) % 2 == 0 :\n        \n        return True\n    \n    elif len(s) % 2!= 0 :\n        \n        return False\n    \n    l = list(s)\n    \n    l = l[:len(l) // 2]\n    \n    rev = l[::-1]\n    \n    if l == rev :\n        \n        return True\n        \n    else :\n        \n        return False\n        \n    \n    \n    \n    \n    \ndef no_of_longest_palindromes(s):\n    '''\n    Write a python function to find the longest palindrome in a given string.\n    '''\n    \n    if len(s) == 0 :\n        \n        return 0\n    \n    elif len(s) == 1 :\n        \n        return 1\n    \n    elif len(s) % 2 == 0 :\n        \n        return 2\n    \n    elif len(s) % 2!= 0 :\n        \n        return 1\n    \n    l = list(s)\n    \n    d = {}\n    \n    for i in l :\n        \n        if i in d :\n            \n            d[i] += 1\n            \n        else :\n            \n            d[i] = 1\n            \n    if len(d) == 1 :\n        \n        return 1\n    \n    d[l[0]] -= 1\n    d[l[-1]] -= 1\n    \n    if d[l[0]] == 1 and d[l[-1]] == 1 :\n        \n        return 2\n    \n    \n    \n    \n    \n    \ndef no_of_longest_palindromes_rec(s,n):\n    '''\n    Write a python function to find the longest palindrome in a given string.\n    '''\n    \n    if n == 1 :\n        \n        return 1\n    \n    elif len(s) == 0 :\n        \n        return 0\n    \n    elif len(s) == 1 :\n        \n        return 1\n    \n    elif len(s) % 2 == 0 :\n        \n        return 2\n    \n    elif len(s) % 2!= 0 :\n        \n        return 1\n    \n    l = list(s)\n    \n    d = {}\n    \n    for i in l :\n        \n        if i in d :\n            \n            d[i] += 1\n            \n        else :\n            \n            d[i] = 1\n            \n    if len(d) == 1 :\n        \n        return 1\n    \n    d[l[0]] -= 1\n    d[l[-1]] -= 1\n    \n    if d[l[0]] == 1 and d[l[-1]] == 1 :\n        \n        return 2\n    \n    \n    \n    \n    \n    \ndef longest_palindrome_rec(s, n, m) :\n    '''\n    Write a python function to find the longest palindrome in a given string.\n    '''\n    \n    if n == m :\n        \n        return s[n - 1]\n    \n    elif len(s) == 0 :\n        \n        return 0\n    \n    elif len(s) == 1 :\n        \n        return 1\n    \n    elif len(s) % 2 == 0 :\n        \n        return 2\n    \n    elif len(s) % 2!= 0 :\n        \n        return 1\n    \n    l = list(s)\n    \n    d = {}\n    \n    for i in l :\n        \n        if i in d :\n            \n            d[i] += 1\n            \n        else :\n            \n            d[i] = 1\n            \n    if len(d) == 1 :\n        \n        return 1\n    \n    d[l[0]] -= 1\n    d[l[-1]] -= 1\n    \n    if d[l[0]] == 1 and d[l[-1]] == 1 :\n        \n        return 2\n    \n    \n    \n    \n    \ndef longest_palindrome_substr(s, n) :\n    '''\n    Write a python function to find the longest palindrome in a given string.\n    '''\n    \n    if n == 1 :\n        \n        return 1\n    \n    elif len(s) == 0 :\n        \n        return 0\n    \n    elif len(s) == 1 :\n        \n        return 1\n    \n    elif len(s) % 2 == 0 :\n        \n        return 2\n    \n    elif len(s) % 2!= 0 :\n        \n        return 1\n    \n    l = list(s)\n    \n    d = {}\n    \n    for i in l :\n        \n        if i in d :\n            \n            d[i] += 1\n            \n        else :\n            \n            d[i] = 1\n            \n    if len(d) == 1 :\n        \n        return 1\n    \n    d[l["
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Your Code Here\n    return s[0] == s[-1]\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s) - 1) :\n        if s[i]!= s[i + 1] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)-1) :\n        if (s[i]!=s[i+1]) :\n            return False\n    return True\n    \ndef all_Characters_Diff(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)-1) :\n        if (s[i]==s[i+1]) :\n            return False\n    return True\n    \ndef search_an_element(a,x) :\n    '''\n    Write a python function to search an element in a list and return the index of element.\n    '''\n    for i in range(len(a)) :\n        if (a[i]==x) :\n            return i\n    return -1\n    \ndef search_an_element_in_list(a,x) :\n    '''\n    Write a python function to search an element in a list and return the index of element.\n    '''\n    for i in a :\n        if (i==x) :\n            return a.index(i)\n    return -1\n    \ndef search_an_element_in_list_time_complexity(a,x) :\n    '''\n    Write a python function to search an element in a list and return the index of element.\n    '''\n    for i in a :\n        if (i==x) :\n            return a.index(i)\n        return -1\n    \ndef search_an_element_in_list_complexity(a,x) :\n    '''\n    Write a python function to search an element in a list and return the index of element.\n    '''\n    l = len(a)\n    i = 0\n    while (i<l) :\n        if (a[i]==x) :\n            return i\n        i = i + 1\n    return -1\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s = s.upper()\n    for i in range(len(s) - 1) :\n        if s[i]!= s[i + 1] :\n            return 0\n    return 1\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return s.count(s[0]) == len(s)\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4]\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (3 * math.sqrt(3)) / 4 * pow(side, 2)\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return pow(side,2)*(3/4)\n    \ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return pow(side,2)*6\n    \ndef area_cuboid(side_a,side_b,side_c):\n    '''\n    Write a function to caluclate the area of a cuboid.\n    '''\n    return pow(side_a,2)*side_b*side_c\n    \ndef area_prism(side_a,side_b,side_c):\n    '''\n    Write a function to caluclate the area of a prism.\n    '''\n    return pow(side_a,2)*side_b*side_c/2\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (math.sqrt(3)*side**2)/4\ndef area_triangle(side1, side2, side3):\n    '''\n    Write a function to calculate the area of a trianlge.\n    '''\n    s=(side1+side2+side3)/2\n    area=math.sqrt(s*(s-side1)*(s-side2)*(s-side3))\n    return area\ndef area_trapezoid(base1, base2, height):\n    '''\n    Write a function to calculate the area of a trapezoid.\n    '''\n    area=((base1+base2)/2)*height\n    return area\ndef area_parallelogram(base1, base2):\n    '''\n    Write a function to calculate the area of a paralellogram.\n    '''\n    area=(base1*base2)/2\n    return area\ndef area_quadrilateral(side1, side2, side3, side4):\n    '''\n    Write a function to caluclate the area of a quadrilateral.\n    '''\n    area=(side1*side2+side2*side3+side3*side1-side1*side3)/2\n    return area\ndef area_rectangle(side1, side2):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    area=side1*side2\n    return area\ndef area_octogon(side1, side2, side3, side4, side5, side6):\n    '''\n    Write a function to caluclate the area of an octogon.\n    '''\n    area=area_triangle(side1, side2, side3)+area_triangle(side1, side2, side5)+area_triangle(side1, side4, side5)+area_triangle(side2, side3, side4)+area_triangle(side3, side4, side5)+area_triangle(side4, side5, side6)\n    return area\ndef area_icosagon(side1, side2, side3, side4, side5, side6):\n    '''\n    Write a function to caluclate the area of an icosagon.\n    '''\n    area=area_triangle(side1, side2, side3)+area_triangle(side1, side2, side5)+area_triangle(side1, side4, side5)+area_triangle(side2, side3, side4)+area_triangle(side3, side4, side5)+area_triangle(side4, side5, side6)\n    return area\ndef area_rhombus(side1, side2):\n    '''\n    Write a function to calculate the area of a rhombus.\n    '''\n    area=(side1*side2)/2\n    return area\ndef area_kite(side1, side2, side3):\n    '''\n    Write a function to calculate the area of a kite.\n    '''\n    area=((side1+side2)*side3)/4\n    return area\ndef area_right_triangle(side1, side2, side3):\n    '''\n    Write a function to calculate the area of a right triangle.\n    '''\n    area=(side1*side2)/2\n    return area\ndef area_nonagon(side1, side2, side3, side4):\n    '''\n    Write a function to calculate the area of a nonagon.\n    '''\n    area=(area_triangle(side1, side2, side3)+area_triangle(side1, side2, side4)+area_triangle(side1, side3, side4)+area_triangle(side2, side3, side4))/2\n    return area\ndef area_regular_pentagon(side1, side2, side3, side4, side5):\n    '''\n    Write a function to caluclate the area of a regular pentagon.\n    '''\n    area=(area_triangle(side1, side2, side3)+area_triangle(side1, side2, side5)+area_triangle(side1, side4, side5)+area_triangle(side2, side3, side4)+area_triangle(side3, side4, side5))/2\n    return area\ndef area_hemisphere(radius):\n    '''\n    Write a function to caluclate the area of a hemisphere.\n    '''\n    area=(4*math.pi*radius**2)/3\n    return area\ndef area_cylinder(radius1, radius2):\n    '''\n    Write a function to calculate the area of a cylinder.\n    '''\n    area=(2*math.pi*radius1*radius2)+(2*math.pi*radius2*radius1)\n    return area\ndef area_cone(radius1, radius2):\n    '''\n    Write a function to calculate the area of a cone.\n    '''\n    area=(math.pi*radius1*radius2)+(math.pi*radius2*radius1)\n    return area\ndef area_sphere(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    area=4*math.pi*radius**2\n    return area\ndef area_cylinder_sphere(radius1, radius2):\n    '''\n    Write a function to calculate the area of a cylinder and a sphere.\n    '''\n    area=(2*math.pi*radius1*radius2)+(2*math.pi*radius2*radius1)\n    return area\ndef area_sphere_cylinder(radius1, radius2):\n    '''\n    Write a function to calculate the area of a sphere and a cylinder.\n    '''\n    area=(2*math.pi*radius1*radius2)+(2*math.pi*radius2*radius1)\n    return area\ndef area_pyramid(base1, base2, height):\n    '''\n    Write a function to calculate the area of a pyramid.\n    '''\n    area=((base1+base2)/2)*height\n    return area\ndef area_pyramid_rectangle(base1, base2, height):\n    '''\n    Write a function to calculate the area of a pyramid with a rectangle in its base.\n    '''\n    area=((base1+base2)/2)*height\n    return area\ndef area_conical_cylinder(radius1, radius2, height):\n    '''\n    Write a function to calculate the area of a conical cylinder.\n    '''\n    area=(2*math.pi*radius1*radius2*height)+(2*math.pi*radius2*radius1*height)\n    return area\ndef area_parallelepiped(length1, length2, length3, length4, length5, length6):\n    '''\n    Write a function to caluclate the area of a parallelepiped.\n    '''\n    area=(length1*length2*length3+length2*length3*length4+length1*length4*length5+length1*length5*length6+length4*length5*length6)\n    return area\ndef area_spherical_cylinder(radius1, radius2, height):\n    '''\n    Write a function to calculate the area of a spherical cylinder.\n    '''\n    area=(4*math.pi*radius1*radius2*height)+(4*math.pi*radius2*radius1*height)\n    return area\ndef area_spherical_cone(radius1, radius2, height):\n    '''\n    Write a function to calculate the area of a spherical cone.\n    '''\n    area=(math.pi*radius1*radius2*height)+(math.pi*radius2*radius1*height)\n    return area\ndef area_spherical_sphere(radius):\n    '''\n    Write a function to calculate the area of a spherical sphere.\n    '''\n    area=4*math.pi*radius**2\n    return area\ndef area_spherical_cylinder_sphere(radius1, radius2, height):\n    '''\n    Write a function to calculate the area of a spherical cylinder and a spherical sphere.\n    '''\n    area=(4*math.pi*radius1*radius2*height)+(4*math.pi*radius2*radius1*height)\n    return area\ndef area_spherical_cylinder_cylinder(radius1, radius2, height):\n    '"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area=math.sqrt(3)/4*(side*side)\n    return area\n    \ndef volume_tetrahedron(side):\n    '''\n    Write a function to calculate the volume of a tetrahedron.\n    '''\n    volume=area_tetrahedron(side)*side\n    return volume\n    \ndef volume_cube(side):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    volume=side**3\n    return volume\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3**.5)*side**2/4\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/4)*(3*side**2)\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return ((3*((side*side*side)/8)))\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    \n    A = (1/4) * math.sqrt(3) * side**2\n    return A\n    \ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    \n    V = (1/12) * side**3\n    return V\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3.0/4.0)*(side**2)\ndef area_prism(side,height):\n    '''\n    Write a function to caluclate the area of a prism.\n    '''\n    return (1.0/3.0)*(side*height)\ndef area_pyramid(side,height):\n    '''\n    Write a function to caluclate the area of a pyramid.\n    '''\n    return (1.0/3.0)*(side*height)\ndef area_cylinder(radius,height):\n    '''\n    Write a function to caluclate the area of a cylinder.\n    '''\n    return (math.pi*radius**2.0)*height\ndef area_cone(radius,height):\n    '''\n    Write a function to caluclate the area of a cone.\n    '''\n    return math.pi*radius**2.0*height\ndef area_cuboid(side1,side2,side3):\n    '''\n    Write a function to caluclate the area of a cuboid.\n    '''\n    return (side1*side2*side3)\ndef area_sphere(radius):\n    '''\n    Write a function to caluclate the area of a sphere.\n    '''\n    return (4.0/3.0)*(math.pi*radius**3.0)\ndef area_triangle(side1,side2,side3):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    return 0.5*(side1*side2+side2*side3+side1*side3)\ndef area_trapezoid(base1,base2,height):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    return 0.5*(base1+base2)*height\ndef area_kite(side1,side2,side3,side4):\n    '''\n    Write a function to caluclate the area of a kite.\n    '''\n    return 0.5*(side1+side2+side3+side4)\ndef area_rectangle(side1,side2):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    return side1*side2\ndef area_polygon(n,side):\n    '''\n    Write a function to caluclate the area of a polygon.\n    '''\n    return (n*(side**2.0))/4.0\ndef area_spherical_cylinder(radius,height):\n    '''\n    Write a function to caluclate the area of a spherical cylinder.\n    '''\n    return math.pi*radius**2.0*height\ndef area_torus(radius1,radius2):\n    '''\n    Write a function to caluclate the area of a torus.\n    '''\n    return (math.pi*radius1**2.0)*(math.pi*radius2**2.0)\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return (4.0/3.0)*(math.pi*side**3.0)\ndef volume_prism(side,height):\n    '''\n    Write a function to caluclate the volume of a prism.\n    '''\n    return (1.0/3.0)*(math.pi*side*height)\ndef volume_pyramid(side,height):\n    '''\n    Write a function to caluclate the volume of a pyramid.\n    '''\n    return (1.0/3.0)*(math.pi*side*height)\ndef volume_cylinder(radius,height):\n    '''\n    Write a function to caluclate the volume of a cylinder.\n    '''\n    return (math.pi*radius**2.0)*height\ndef volume_cone(radius,height):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    return (math.pi*radius**2.0)*height\ndef volume_cuboid(side1,side2,side3):\n    '''\n    Write a function to caluclate the volume of a cuboid.\n    '''\n    return (side1*side2*side3)\ndef volume_sphere(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return (4.0/3.0)*(math.pi*radius**3.0)\ndef volume_triangle(side1,side2,side3):\n    '''\n    Write a function to caluclate the volume of a triangle.\n    '''\n    return (1.0/6.0)*(side1*side2*side3)\ndef volume_trapezoid(base1,base2,height):\n    '''\n    Write a function to caluclate the volume of a triangle.\n    '''\n    return (1.0/6.0)*(base1+base2)*height\ndef volume_kite(side1,side2,side3,side4):\n    '''\n    Write a function to caluclate the volume of a kite.\n    '''\n    return (1.0/6.0)*(side1+side2+side3+side4)\ndef volume_rectangle(side1,side2):\n    '''\n    Write a function to caluclate the volume of a rectangle.\n    '''\n    return (side1*side2)\ndef volume_polygon(n,side):\n    '''\n    Write a function to caluclate the volume of a polygon.\n    '''\n    return (n*(side**2.0))/4.0\ndef volume_spherical_cylinder(radius,height):\n    '''\n    Write a function to caluclate the volume of a spherical cylinder.\n    '''\n    return (math.pi*radius**2.0*height)\ndef volume_torus(radius1,radius2):\n    '''\n    Write a function to caluclate the volume of a torus.\n    '''\n    return (math.pi*radius1**2.0)*(math.pi*radius2**2.0)\ndef perimeter_tetrahedron(side):\n    '''\n    Write a function to caluclate the perimeter of a tetrahedron.\n    '''\n    return 6.0*side\ndef perimeter_prism(side,height):\n    '''\n    Write a function to caluclate the perimeter of a prism.\n    '''\n    return 12.0*side\ndef perimeter_pyramid(side,height):\n    '''\n    Write a function to caluclate the perimeter of a pyramid.\n    '''\n    return 6.0*side\ndef perimeter_cylinder(radius,height):\n    '''\n    Write a function to caluclate the perimeter of a cylinder.\n    '''\n    return (2.0*math.pi)*radius*height\ndef perimeter_cone(radius,height):\n    '''\n    Write a function to caluclate the perimeter of a cone.\n    '''\n    return (2.0*math.pi)*radius*(height+radius)\ndef perimeter_cuboid(side1,side2,side3):\n    '''\n    Write a function to caluclate the perimeter of a cuboid.\n    '''\n    return (6.0*side1)+(6.0*side2)+(6.0*side3)\ndef perimeter_sphere(radius):\n    '''\n    Write a function to caluclate the perimeter of a sphere.\n    '''\n    return (4.0*math.pi)*radius\ndef perimeter_triangle(side1,side2,side3):\n    '''\n    Write a function to caluclate the perimeter of a triangle.\n    '''\n    return (side1+side2+side3)\ndef perimeter_trapezoid(base1,base2,height):\n    '''\n    Write a function to caluclate the perimeter of a triangle.\n    '''\n    return (base1+base2)*height\ndef perimeter_kite(side1,side2,side3,side4):\n    '''\n    Write a function to caluclate the perimeter of a kite.\n    '''\n    return (side1+side2+side3+side4)\ndef perimeter"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3*side**2)/4\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m == 0:\n        return list\n    elif m > len(list):\n        return rotate_right(list, m % len(list))\n    return list[len(list) - m:] + list[:len(list) - m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m == 0:\n        return list\n    l = len(list)\n    for i in range(m):\n        temp = list[-1]\n        for j in range(l-1, 0, -1):\n            list[j] = list[j-1]\n        list[0] = temp\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        # temp = list[0]\n        # for j in range(n-1):\n        #     list[j] = list[j+1]\n        # list[n-1] = temp\n        list.append(list.pop(0))\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:len(list)] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    if m == 0:\n        return list\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    m %= len(list)\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for ele in test_tup:\n        if ele is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    # using in operator\n    if None in test_tup:\n        print 'None exists'\n    else:\n        print 'None not exists'\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    \n    return None in test_tup\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return True if None in test_tup else False\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    from itertools import combinations_with_replacement\n    print(list(filter(lambda x: all([int(x[i]/int(y)) == x[i]/int(y) for i in range(len(x))]), combinations_with_replacement(list(range(startnum,endnum+1)), len(str(startnum))))))\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def recurse(num):\n        count = 1\n        for x in range(1, len(str(num))):\n            if (num % (10 ** x)) == 0:\n                count += 1\n        if count == len(str(num)):\n            return True\n        else:\n            return False\n    results = [x for x in range(startnum, endnum) if recurse(x)]\n    return results\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def helper(num):\n        digits = [int(x) for x in str(num)]\n        for d in digits:\n            if num % d!= 0:\n                return False\n        return True\n    return list(filter(helper, range(startnum, endnum)))\n    \nprint(divisible_by_digits(999, 9999))\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    def div_digits(num):\n        '''\n        Finds the divisibility of a given number\n        '''\n        # 1.\n        # num = str(num)\n        # sum = 0\n        # for i in num:\n        #     if i in '0123456789':\n        #         sum += 1\n        # return sum\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: not x % int(str(x)[0]), range(startnum, endnum)))\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    divisible = lambda a: all(num % int(x) == 0 for num in str(a) for x in str(a))\n    return [x for x in range(startnum, endnum) if divisible(x)]\n    \nprint(divisible_by_digits(20,21))\nprint(divisible_by_digits(10,99))"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: x % int(str(x)[::-1]) == 0, range(startnum, endnum+1)))\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum,endnum+1):\n        if i % 10 == 0:\n            print(i)\n        else:\n            if all(x % i == 0 for x in range(1, i)):\n                print(i)\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(x % y == 0 for y in range(len(str(x)),0,-1)), range(startnum, endnum)))\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [x for x in range(startnum,endnum+1) if all([x%int(str(d))==0 for d in str(x)])]\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        a = a * math.pi/180\n        return math.pi*r**2 * a\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    elif a > 0:\n        return r * r * math.sin(math.radians(a))\n    else:\n        return r * r * math.sin(math.radians(360-a))\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #if (a >= 0 and a < 180):\n    #    return math.pi * r * (r + math.sqrt(r**2 + (a / 360)**2))\n    #elif (a >= 180 and a < 360):\n    #    return math.pi * r * (r + math.sqrt(r**2 + ((a - 180) / 360)**2))\n    #else:\n    #    return None\n    return math.pi * r**2 * (a / 360)\n    \ndef unit_vector(theta):\n    '''\n    Write a function that computes unit vectors in 3D space. Function should return a list of unit vectors with x, y, z values.\n    '''\n    return [math.cos(theta), math.sin(theta), 0]\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    return (math.pi*r**2*a/360)\ndef radius(r,a):\n    '''\n    Write a function to find the radius of a circle whose area is known. The function takes the radius and angle as inputs. The angle should be in degrees. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    return (r*math.cos(math.radians(a)))\ndef find_area(r,a):\n    '''\n    Write a function that takes the radius and angle as inputs and returns the area of a sector. The angle should be in degrees.\n    '''\n    if a>360:\n        return None\n    return (math.pi*r**2*a/360)\ndef find_radius(r,a):\n    '''\n    Write a function that takes the radius and angle as inputs and returns the radius of a circle whose area is known. The angle should be in degrees.\n    '''\n    if a>360:\n        return None\n    return (r*math.cos(math.radians(a)))\ndef find_area_2(r,a):\n    '''\n    Write a function that takes the radius and angle as inputs and returns the area of a circle whose radius is known. The angle should be in degrees.\n    '''\n    if a>360:\n        return None\n    return (math.pi*r**2*a/360)\ndef find_radius_2(r,a):\n    '''\n    Write a function that takes the radius and angle as inputs and returns the radius of a circle whose area is known. The angle should be in degrees.\n    '''\n    if a>360:\n        return None\n    return (r*math.cos(math.radians(a)))\ndef find_area_3(r,a):\n    '''\n    Write a function that takes the radius and angle as inputs and returns the area of a circle whose radius is known. The angle should be in degrees.\n    '''\n    if a>360:\n        return None\n    return (math.pi*r**2*a/360)\ndef find_radius_3(r,a):\n    '''\n    Write a function that takes the radius and angle as inputs and returns the radius of a circle whose area is known. The angle should be in degrees.\n    '''\n    if a>360:\n        return None\n    return (r*math.cos(math.radians(a)))\ndef find_area_4(r,a):\n    '''\n    Write a function that takes the radius and angle as inputs and returns the area of a circle whose radius is known. The angle should be in degrees.\n    '''\n    if a>360:\n        return None\n    return (math.pi*r**2*a/360)\ndef find_radius_4(r,a):\n    '''\n    Write a function that takes the radius and angle as inputs and returns the radius of a circle whose area is known. The angle should be in degrees.\n    '''\n    if a>360:\n        return None\n    return (r*math.cos(math.radians(a)))\ndef find_area_5(r,a):\n    '''\n    Write a function that takes the radius and angle as inputs and returns the area of a circle whose radius is known. The angle should be in degrees.\n    '''\n    if a>360:\n        return None\n    return (math.pi*r**2*a/360)\ndef find_radius_5(r,a):\n    '''\n    Write a function that takes the radius and angle as inputs and returns the radius of a circle whose area is known. The angle should be in degrees.\n    '''\n    if a>360:\n        return None\n    return (r*math.cos(math.radians(a)))\ndef find_area_6(r,a):\n    '''\n    Write a function that takes the radius and angle as inputs and returns the area of a circle whose radius is known. The angle should be in degrees.\n    '''\n    if a>360:\n        return None\n    return (math.pi*r**2*a/360)\ndef find_radius_6(r,a):\n    '''\n    Write a function that takes the radius and angle as inputs and returns the radius of a circle whose area is known. The angle should be in degrees.\n    '''\n    if a>360:\n        return None\n    return (r*math.cos(math.radians(a)))\ndef find_area_7(r,a):\n    '''\n    Write a function that takes the radius and angle as inputs and returns the area of a circle whose radius is known. The angle should be in degrees.\n    '''\n    if a>360:\n        return None\n    return (math.pi*r**2*a/360)\ndef find_radius_7(r,a):\n    '''\n    Write a function that takes the radius and angle as inputs and returns the radius of a circle whose area is known. The angle should be in degrees.\n    '''\n    if a>360:\n        return None\n    return (r*math.cos(math.radians(a)))\ndef find_area_8(r,a):\n    '''\n    Write a function that takes the radius and angle as inputs and returns the area of a circle whose radius is known. The angle should be in degrees.\n    '''\n    if a>360:\n        return None\n    return (math.pi*r**2*a/360)\ndef find_radius_8(r,a):\n    '''\n    Write a function that takes the radius and angle as inputs and returns the radius of a circle whose area is known. The angle should be in degrees.\n    '''\n    if a>360:\n        return None\n    return (r*math.cos(math.radians(a)))\ndef find_area_9(r,a):\n    '''\n    Write a function that takes the radius and angle as inputs and returns the area of a circle whose radius is known. The angle should be in degrees.\n    '''\n    if a>360:\n        return None\n    return (math.pi*r**2*a/360)\ndef find_radius_9(r,a):\n    '''\n    Write a function that takes the radius and angle as inputs and returns the radius of a circle whose area is known. The angle should be in degrees.\n    '''\n    if a>360:\n        return None\n    return (r*math.cos(math.radians(a)))\ndef find_area_10(r,a):\n    '''\n    Write a function that takes the radius and angle as inputs and returns the area of a circle whose radius is known. The angle should be in degrees.\n    '''\n    if a>360:\n        return None\n    return (math.pi*r**2*a/360)\ndef find_radius_10(r,a):\n    '''\n    Write a function that takes the radius and angle as inputs and returns the radius of a circle whose area is known. The angle should be in degrees.\n    '''\n    if a>360:\n        return None\n    return (r*math.cos(math.radians(a)))\ndef find_area_11(r,a):\n    '''\n    Write a function that takes the radius and angle as inputs and returns the area of a circle whose radius is known. The angle should be in degrees.\n    '''\n    if a>360:\n        return None\n    return (math.pi*r**2*a/360)\ndef find_radius_11(r,a):\n    '''\n    Write a function that takes the radius and angle as inputs and returns the radius of a circle whose area is known. The angle should be in degrees.\n    '''\n    if a>360:\n        return None\n    return (r*math.cos(math.radians(a)))\ndef find_area_12(r,a):\n    '''\n    Write a function that takes the radius and angle as inputs and returns the area of a circle whose radius is known. The angle should be in degrees.\n    '''\n    if a>360:\n        return None\n    return (math.pi*r**2*a/360)\ndef find_radius_12(r,a):\n    '''\n    Write a function that takes the radius and angle as inputs and returns the radius of a circle whose area is known. The angle should be in degrees.\n    '''\n    i"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*r*r*(1-(math.cos(math.radians(a)))**2)\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r == 0:\n        return None\n    if a < 0:\n        a = 360 + a\n    if a > 360:\n        return None\n    return math.pi*r*r*(a/360)\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r<=0:\n        return None\n    a=a/180*math.pi\n    return math.pi*r**2*(1-math.cos(a))\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a = a/180.0*math.pi\n    if a > math.pi:\n        return None\n    else:\n        return r*r*math.sin(a)\n    \ndef test_1():\n    assert(sector_area(4,360)==None)\n    assert(sector_area(4,0)==None)\n    assert(sector_area(4,360.0)==None)\n    assert(sector_area(4,10.0)==None)\n    assert(sector_area(4,-10.0)==None)\n    assert(sector_area(4,11.0)==None)\n    assert(sector_area(4,361.0)==None)\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*r**2*abs(a)/360\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*r**2/2*a\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    n = len(X) + 1\n    m = len(Y) + 1\n    b = len(Z) + 1\n    \n    LCS = [[[0 for i in range(b)] for j in range(m)] for k in range(n)]\n    \n    for i in range(1, n):\n        for j in range(1, m):\n            for k in range(1, b):\n                if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    LCS[i][j][k] = LCS[i - 1][j - 1][k - 1] + 1\n                else:\n                    LCS[i][j][k] = max(LCS[i - 1][j][k], LCS[i][j - 1][k], LCS[i][j][k - 1])\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    l = len(Z)\n    if n<m or m<l:\n        return 0\n    if n==0 or m==0 or l==0:\n        return 0\n    L = [[[None]*(l+1) for i in range(m+1)] for j in range(n+1)]\n    for i in range(n+1):\n        for j in range(m+1):\n            for k in range(l+1):\n                if i==0 or j==0 or k==0:\n                    L[i][j][k] = 0\n                elif X[i-1]==Y[j-1] and X[i-1]==Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    return L[n][m][l]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    L = [[[None]*(n+1) for i in xrange(m+1)] for j in xrange(p+1)]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    dp = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            for k in range(1,o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = 1 + dp[i-1][j-1][k-1]\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k],dp[i][j-1][k],dp[i][j][k-1])\n    return dp[m][n][o]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1]+1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    return L[m][n][o]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    lcs_matrix = [[[0 for _ in range(len(Z) + 1)] for _ in range(len(Y) + 1)] for _ in range(len(X) + 1)]\n    for i in range(len(X) + 1): \n        for j in range(len(Y) + 1): \n            for k in range(len(Z) + 1): \n                if i == 0 or j == 0 or k == 0: \n                    lcs_matrix[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]: \n                    lcs_matrix[i][j][k] = lcs_matrix[i-1][j-1][k-1] + 1\n                else: \n                    lcs_matrix[i][j][k] = max(lcs_matrix[i-1][j][k], lcs_matrix[i][j-1][k], lcs_matrix[i][j][k-1])\n    return lcs_matrix[len(X)][len(Y)][len(Z)]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    l = len(Z)\n    # create a three dimensional array\n    L = [[[None]*(l+1) for i in xrange(m+1)] for j in xrange(n+1)]\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    pass\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    #Find the length of the strings\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    return L[m][n][o]\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r\"([a-zA-Z])([^a-zA-Z])\", r'\\1 \\2', str1)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    string_list = list(str1.split())\n    for item in string_list:\n        if item[0].isupper():\n            item = item +''\n    result = ''.join(string_list)\n    return result\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    newstr = re.sub(r'([A-Z])', r'\\1 ', str1)\n    return newstr.replace(' ', '')\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'\\b([A-Z])',r' \\1',str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    #find all matches of '\\w' followed by a space, then set that to a new list\n    p = re.findall(r'(\\w+) (?=\\w+)', str1)\n    #join the list together to get a string and add a space at the beginning of each word\n    return''.join(p)\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    s = re.sub('([A-Z][a-z]+)', r' \\1', str1)\n    return s\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if str1 == '':\n        return ''\n    s = re.sub(r'([A-Z][a-z]+)([A-Z][a-z]+)', r'\\1 \\2', str1)\n    return s\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    new_str = re.sub('([A-Z][a-z]+)', r' \\1', str1)\n    return new_str\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    start_index = 0\n    output_str = \"\"\n    while start_index < len(str1):\n        if str1[start_index].isupper():\n            start_index += 1\n            continue\n        else:\n            output_str += str1[start_index]\n            start_index += 1\n            if start_index < len(str1):\n                if str1[start_index].isupper():\n                    output_str += \" \"\n                    start_index += 1\n                else:\n                    break\n    return output_str\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # A single word \n    if len(str1) == 1:\n        if str1.isupper():\n            return str1\n        else:\n            return str1 + \" \"\n    # more than one word\n    else:\n        if str1[0].isupper():\n            str1 = str1[0] + \" \" + str1[1:]\n            str1 = str1.replace(\"  \",\" \")\n            return str1\n        else:\n            return str1\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # zip each row of the list\n    return sorted(nums_str, key=lambda x: map(int, re.findall(r'\\d+', x)))\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: list(map(int, re.findall(r'\\d+', x))))\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    nums = sorted(nums_str)\n    \n    return nums\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    pass\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # a map that will hold the sorting\n    numbers = {}\n    # loop over the list of strings\n    for num_str in nums_str:\n        # get a list of all the characters in the string\n        list_of_num = list(num_str)\n        # loop over the list of characters\n        for num in list_of_num:\n            # if we find an alphabet in the list, then we update the numbers map\n            if num.isalpha():\n                numbers[num.lower()] = num_str\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(x) for x in nums_str]\n    nums.sort()\n    return [str(num) for num in nums]\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key = int)\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    #remove space\n    nums_str = [x.replace(\" \", \"\") for x in nums_str]\n    #cast to int\n    nums = [int(x) for x in nums_str]\n    #sort\n    nums.sort()\n    #convert back to strings\n    return [str(x) for x in nums]\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    pass\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: [int(s) for s in x.split()])\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        if (test_list[i][0] == test_tup[0]):\n            test_list[i] = test_tup\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return None\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for elem in test_tup:\n        test_list.append(elem)\n    \n    return\n    \ndef read_file(file_name):\n    '''\n    Read the given file, and return a list of tuples, where each tuple is a line\n    in the file.\n    '''\n    try:\n        infile = open(file_name, 'r')\n    except IOError:\n        print \"Error: unable to open the file\"\n    \n    line_list = []\n    \n    for line in infile:\n        line = line.strip()\n        line_list.append(line)\n    \n    infile.close()\n    \n    return line_list\n    \ndef process_file(file_name):\n    '''\n    Read the given file, and return a list of tuples, where each tuple is a line\n    in the file.\n    '''\n    try:\n        infile = open(file_name, 'r')\n    except IOError:\n        print \"Error: unable to open the file\"\n    \n    line_list = []\n    \n    for line in infile:\n        line = line.strip()\n        line_list.append(line)\n    \n    infile.close()\n    \n    return line_list\n    \ndef tuple_to_list(test_list):\n    '''\n    Write a function to convert a list of tuples to a list of lists.\n    '''\n    new_list = []\n    \n    for line in test_list:\n        new_list.append(line.split())\n    \n    return new_list\n    \ndef dict_to_list(test_list):\n    '''\n    Write a function to convert a list of tuples to a list of lists.\n    '''\n    new_list = []\n    \n    for line in test_list:\n        new_list.append(dict(line))\n    \n    return new_list\n    \ndef print_list(test_list):\n    '''\n    Write a function to print the contents of a list.\n    '''\n    for elem in test_list:\n        print elem\n    \n    return\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # for tup in test_tup:\n    #     test_list.append(tup)\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in test_tup:\n        test_list.append(i)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    parent = i // 2\n    if (arr[i] < arr[parent]):\n        return False\n    elif (parent!= 0 and arr[i] > arr[parent]):\n        return False\n    if (parent!= 0 and arr[i] < arr[parent]):\n        return False\n    if (i!= 0):\n        left = i * 2\n        right = i * 2 + 1\n        if (left < len(arr)):\n            if (arr[left] < arr[i]):\n                return False\n        if (right < len(arr)):\n            if (arr[right] < arr[i]):\n                return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif i == 1:\n        return arr[0] <= arr[1]\n    elif i == len(arr) - 1:\n        return arr[i] < arr[i//2]\n    elif i == len(arr):\n        return True\n    else:\n        return arr[i] < arr[i//2] and arr[i] <= arr[2*i+1] and arr[i] <= arr[2*i+2]\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 1:\n        return True\n    else:\n        left = i * 2\n        right = i * 2 + 1\n        if arr[left] < arr[i]:\n            return False\n        if arr[right] < arr[left]:\n            return False\n        if arr[right] < arr[i]:\n            return False\n        if arr[left] < arr[right]:\n            return check_min_heap_helper(arr, left)\n        else:\n            return check_min_heap_helper(arr, right)\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr is None:\n        return\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left <= len(arr)-1 and arr[i] > arr[left]:\n        return False\n    if right <= len(arr)-1 and arr[i] > arr[right]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = i * 2 + 1\n    right = i * 2 + 2\n    if left <= len(arr) - 1 and arr[left] < arr[i]:\n        return False\n    if right <= len(arr) - 1 and arr[right] < arr[i]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 1:\n        return False\n    if i == 1:\n        return arr[0] < arr[1]\n    if i == 2:\n        return arr[0] < arr[1] and arr[1] < arr[2]\n    return arr[i] < arr[i-1] and arr[i] < arr[i-2] and check_min_heap_helper(arr, i-1)\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    if left < len(arr):\n        if arr[i] > arr[left]:\n            return False\n    \n    if right < len(arr):\n        if arr[i] > arr[right]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if (i < 2):\n        return True\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    #jstlucas = jacobsthal_lucas(n)\n    #jsthal = jacobsthal_rec(n)\n    #print(jsthal, jstlucas)\n    #return jsthal\n    return jacobsthal_rec(n)\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    result = [1]\n    result.append(0)\n    for i in range(2, n+1):\n        result.append(result[i-1] + result[i-2])\n    return result[n]\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    x, y = 1, 1\n    for _ in range(n):\n        x, y = y, x + y\n    return x\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # if n == 0:\n    #     return 0\n    # if n == 1:\n    #     return 1\n    # if n == 2:\n    #     return 1\n    # jacobsthal_num = [1, 1]\n    # for i in range(2, n):\n    #     jacobsthal_num.append(jacobsthal_num[i-1] + jacobsthal_num[i-2])\n    # return jacobsthal_num[-1]\n    return sum([(1 + i) * jacobsthal_num[i] for i in range(n)])\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    result = 1\n    for i in range(1, n+1):\n        result = (result*2) % (1000000007)\n    return result\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    jn = 0\n    j0, j1 = 1, 1\n    for i in range(n):\n        jn = j1 + j0\n        j0, j1 = j1, jn\n    return j1\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: return 0\n    elif n == 1: return 1\n    else: return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # define a list to store jacobsthal numbers\n    list = [0, 1]\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n <= 1: \n        return 1\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    #http://mathworld.wolfram.com/JacobiNumber.html\n    a = 0\n    b = 1\n    n_1 = 0\n    n_2 = 1\n    n_3 = 1\n    n_4 = 2\n    if n <= 1:\n        return 1\n    for i in range(3,n+1):\n        a = b\n        b = n_1\n        n_1 = n_2\n        n_2 = n_3\n        n_3 = n_4\n        n_4 = (a + b)\n    return n_4\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort(key = lambda x : x[1])\n    res = []\n    for i in range(K):\n        res.append(test_list[i])\n    return res\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    result_list = []\n    for i in range(len(test_list)):\n        # temp = sorted(test_list[i], key = lambda x: x[1])\n        temp = sorted(test_list[i], key = lambda x: x[1])\n        temp = temp[:K]\n        result_list.append(temp)\n    return result_list\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    #get min list\n    for i in range(K):\n        min_list.append(min(test_list, key = operator.itemgetter(1)))\n        test_list.remove(min_list[i])\n    return min_list\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    k_dict = {}\n    for tup in test_list:\n        k = tup[1]\n        if k not in k_dict:\n            k_dict[k] = []\n        k_dict[k].append(tup)\n    \n    k_list = list(k_dict.keys())\n    k_list.sort()\n    return k_list[0:K]\n    \n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort(key = lambda x: x[1])\n    return test_list[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K > len(test_list):\n        print 'Invalid K value, K must be less than or equal to'+ str(len(test_list))\n        return\n    min_list = sorted(test_list, key = lambda x : x[1])\n    return min_list[:K]\n    \n    \ndef count_same(test_list, K):\n    '''\n    Write a function to count the number of tuples with the same Kth element. https://www.geeksforgeeks.org/python-count-tuples-with-same-kth-element/ - in this case a verbatim copy of test cases\n    '''\n    if K > len(test_list):\n        print 'Invalid K value, K must be less than or equal to'+ str(len(test_list))\n        return\n    counter = 0\n    for i in range(len(test_list)):\n        if test_list[i][K] == test_list[i][K]:\n            counter += 1\n    return counter\n    \n    \ndef test_min_k():\n    test_list = [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    assert min_k(test_list, 2) == [('a', 4), ('b', 3)]\n    \n    test_list = [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    assert min_k(test_list, 3) == [('a', 4), ('b', 3), ('c', 2)]\n    \n    test_list = [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    assert min_k(test_list, 4) == [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    \n    test_list = [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    assert min_k(test_list, 0) == [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    \n    test_list = [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    assert min_k(test_list, 5) == [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    \n    test_list = [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    assert min_k(test_list, 6) == [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    \n    test_list = [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    assert min_k(test_list, 7) == [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    \n    test_list = [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    assert min_k(test_list, 8) == [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    \n    test_list = [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    assert min_k(test_list, -1) == [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    \n    test_list = [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    assert min_k(test_list, 9) == [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    \n    test_list = [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    assert min_k(test_list, 10) == [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    \n    test_list = [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    assert min_k(test_list, 11) == [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    \n    test_list = [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    assert min_k(test_list, 12) == [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    \n    test_list = [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    assert min_k(test_list, 13) == [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    \n    test_list = [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    assert min_k(test_list, 14) == [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    \n    test_list = [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    assert min_k(test_list, 15) == [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    \n    test_list = [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    assert min_k(test_list, 16) == [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    \n    test_list = [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    assert min_k(test_list, 17) == [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    \n    test_list = [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    assert min_k(test_list, 18) == [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    \n    test_list = [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    assert min_k(test_list, 19) == [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    \n    test_list = [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    assert min_k(test_list, 20) == [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    \n    test_list = [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    assert min_k(test_list, 21) == [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    \n    test_list = [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    assert min_k(test_list, 22) == [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    \n    test_list = [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    assert min_k(test_list, 23) == [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    \n    test_list = [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    assert min_k(test_list, 24) == [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    \n    test_list = [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    assert min_k(test_list, 25) == [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    \n    test_list = [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    assert min_k(test_list, 26) == [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    \n    test_list = "
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    tuple_list = [(1,2,3,4,5),(2,3,4,5,6),(3,4,5,6,7),(4,5,6,7,8),(5,6,7,8,9)]\n    \n    # list of all the elements \n    all_elements = []\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # test_list = [('A',2),('B',3),('C',1),('D',5),('E',3)]\n    # test_list = [('A',3),('B',2),('C',5),('D',1),('E',3)]\n    # test_list = [('A',2),('B',3),('C',1),('D',5),('E',3)]\n    # test_list = [('A',3),('B',2),('C',5),('D',1),('E',3)]\n    # test_list = [('A',2),('B',3),('C',1),('D',5),('E',3)]\n    # test_list = [('A',3),('B',2),('C',5),('D',1),('E',3)]\n    # test_list = [('A',3),('B',2),('C',5),('D',1),('E',3)]\n    # test_list = [('A',2),('B',3),('C',1),('D',5),('E',3)]\n    # test_list = [('A',3),('B',2),('C',5),('D',1),('E',3)]\n    # test_list = [('A',2),('B',3),('C',1),('D',5),('E',3)]\n    # test_list = [('A',3),('B',2),('C',5),('D',1),('E',3)]\n    # test_list = [('A',2),('B',3),('C',1),('D',5),('E',3)]\n    # test_list = [('A',3),('B',2),('C',5),('D',1),('E',3)]\n    # test_list = [('A',2),('B',3),('C',1),('D',5),('E',3)]\n    # test_list = [('A',3),('B',2),('C',5),('D',1),('E',3)]\n    # test_list = [('A',2),('B',3),('C',1),('D',5),('E',3)]\n    # test_list = [('A',3),('B',2),('C',5),('D',1),('E',3)]\n    # test_list = [('A',2),('B',3),('C',1),('D',5),('E',3)]\n    # test_list = [('A',3),('B',2),('C',5),('D',1),('E',3)]\n    # test_list = [('A',2),('B',3),('C',1),('D',5),('E',3)]\n    # test_list = [('A',3),('B',2),('C',5),('D',1),('E',3)]\n    # test_list = [('A',2),('B',3),('C',1),('D',5),('E',3)]\n    # test_list = [('A',3),('B',2),('C',5),('D',1),('E',3)]\n    # test_list = [('A',2),('B',3),('C',1),('D',5),('E',3)]\n    # test_list = [('A',3),('B',2),('C',5),('D',1),('E',3)]\n    # test_list = [('A',2),('B',3),('C',1),('D',5),('E',3)]\n    # test_list = [('A',3),('B',2),('C',5),('D',1),('E',3)]\n    # test_list = [('A',2),('B',3),('C',1),('D',5),('E',3)]\n    # test_list = [('A',3),('B',2),('C',5),('D',1),('E',3)]\n    # test_list = [('A',2),('B',3),('C',1),('D',5),('E',3)]\n    # test_list = [('A',3),('B',2),('C',5),('D',1),('E',3)]\n    # test_list = [('A',2),('B',3),('C',1),('D',5),('E',3)]\n    # test_list = [('A',3),('B',2),('C',5),('D',1),('E',3)]\n    # test_list = [('A',2),('B',3),('C',1),('D',5),('E',3)]\n    # test_list = [('A',3),('B',2),('C',5),('D',1),('E',3)]\n    # test_list = [('A',2),('B',3),('C',1),('D',5),('E',3)]\n    # test_list = [('A',3),('B',2),('C',5),('D',1),('E',3)]\n    # test_list = [('A',2),('B',3),('C',1),('D',5),('E',3)]\n    # test_list = [('A',3),('B',2),('C',5),('D',1),('E',3)]\n    # test_list = [('A',2),('B',3),('C',1),('D',5),('E',3)]\n    # test_list = [('A',3),('B',2),('C',5),('D',1),('E',3)]\n    # test_list = [('A',2),('B',3),('C',1),('D',5),('E',3)]\n    # test_list = [('A',3),('B',2),('C',5),('D',1),('E',3)]\n    # test_list = [('A',2),('B',3),('C',1),('D',5),('E',3)]\n    # test_list = [('A',3),('B',2),('C',5),('D',1),('E',3)]\n    # test_list = [('A',2),('B',3),('C',1),('D',5),('E',3)]\n    # test_list = [('A',3),('B',2),('C',5),('D',1),('E',3)]\n    # test_list = [('A',2),('B',3),('C',1),('D',5),('E',3)]\n    # test_list = [('A',3),('B',2),('C',5),('D',1),('E',3)]\n    # test_list = [('A',2),('B',3),('C',1),('D',5),('E',3)]\n    # test_list = [('A',3),('B',2),('C',5),('D',1),('E',3)]\n    # test_list = [('A',2),('B',3),('C',1),('D',5),('E',3)]\n    # test_list = [('A',3),('B',2),('C',5),('D',1),('E',3)]\n    # test_list = [('A',2),('B',3),('C',1),('D',5),('E',3)]\n    # test_list = [('A',3),('B',2),('C',5),('D',1),('E',3)]\n    # test_list = [('A',2),('B',3),('C',1),('D',5),('E',3)]\n    # test_list = [('A',3),('B',2),('C',5),('D',1),('E',3)]\n    # test_list = [('A',2),('B',3),('C',1),('D',5),('E',3)]\n    # test_list = [('A',3),('B',2),('C',5),('D',1),('E',3)]\n    # test_list = [('A',2),('B',3),('C',1),('D',"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list = list(test_list)\n    # print(test_list)\n    l = len(test_list)\n    for x in range(0, l):\n        for y in range(x+1, l):\n            if test_list[x][1] < test_list[y][1]:\n                temp = test_list[x]\n                test_list[x] = test_list[y]\n                test_list[y] = temp\n    # print(test_list)\n    for i in range(0, K):\n        print(test_list[i])\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    i = 0\n    while (i < K):\n        min = test_list[0][i]\n        j = 0\n        while (j < len(test_list)):\n            if (min > test_list[j][i]):\n                min = test_list[j][i]\n            j = j + 1\n        i = i + 1\n    return min\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    i=0\n    j=0\n    k=0\n    lst=[]\n    for i in l1:\n        for j in l2:\n            for k in l3:\n                if i==j==k:\n                    lst.append(i)\n    return lst\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [x for x in l1 if x in l2 and x in l3]\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [l1[i] for i in range(len(l1)) if l1[i] in l2 and l1[i] in l3]\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [i for i in l1 if i in l2 and i in l3]\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            index_list.append(l1[i])\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [item for item in l1 if item in l2 and item in l3]\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    res = []\n    # Write your code here\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    res.append(l1[i])\n    return res\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    new_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            new_list.append(l1[i])\n    return new_list\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1 = l1[1:]\n    l2 = l2[1:]\n    l3 = l3[1:]\n    \n    l1_index = []\n    for i in l1:\n        l1_index.append(l1.index(i))\n    l2_index = []\n    for i in l2:\n        l2_index.append(l2.index(i))\n    l3_index = []\n    for i in l3:\n        l3_index.append(l3.index(i))\n    \n    common = []\n    for i in range(len(l1)):\n        if l1_index[i] == l2_index[i] and l2_index[i] == l3_index[i]:\n            common.append(l1[i])\n    \n    return common\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    import collections\n    return [l1[i] for i in range(0, len(l1)) if l1[i] in l2 and l1[i] in l3]\n    \ndef remove_duplicate(l):\n    '''\n    Write a function to remove duplicates from a list. You may assume that there are no duplicate values in the list.\n    '''\n    return list(set(l))\n    \ndef find_odd(l):\n    '''\n    Write a function that returns a list of the indices for all the elements in the list that are odd numbers.\n    '''\n    return [i for i in range(0, len(l)) if l[i] % 2!= 0]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = min(numbers)\n    second_smallest = min(n for n in numbers if n!= smallest)\n    return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if numbers == []:\n        return None\n    low = 0\n    for i in range(len(numbers)):\n        if numbers[i] < numbers[low]:\n            low = i\n    second_low = low\n    for i in range(low+1, len(numbers)):\n        if numbers[i] < numbers[second_low]:\n            second_low = i\n    return numbers[second_low]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        raise ValueError('need at least 2 numbers in list')\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    if len(numbers) == 2:\n        return sorted(numbers)[1]\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = sorted(numbers)\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return\n    elif len(numbers) == 2:\n        return min(numbers)\n    elif len(numbers) > 2:\n        numbers.sort()\n        return numbers[1]\n    return\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        if numbers[0] == numbers[1]:\n            return second_smallest(numbers[2:])\n        else:\n            return numbers[0]\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.match('ab+',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab*')\n    if pattern.match(text):\n        return \"Match found\"\n    else:\n        return \"No match found\"\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r\"a+b\", text)\n    return match\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'[ab]*', text)\ndef test_match_zero_one():\n    assert text_match_zero_one(\"aba\") == True\n    assert text_match_zero_one(\"ab\") == True\n    assert text_match_zero_one(\"a\") == True\n    assert text_match_zero_one(\"\") == True\n    assert text_match_zero_one(\"aab\") == False\n    assert text_match_zero_one(\"aabaa\") == True\n    assert text_match_zero_one(\"aababbbbbba\") == False\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # pattern = '^a.*b$'\n    # if re.match(pattern, text):\n    #     print('Match 1')\n    # else:\n    #     print('No match 1')\n    # pattern = '^a.*?b$'\n    # if re.match(pattern, text):\n    #     print('Match 2')\n    # else:\n    #     print('No match 2')\n    # pattern = '^a.*?b$'\n    # if re.match(pattern, text, flags=re.DOTALL):\n    #     print('Match 3')\n    # else:\n    #     print('No match 3')\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a+b')\n    return pattern.match(text)\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'[ab]', text)\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.match(r'.*?ab+.*?', text)\n    print(result)\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab+')\n    match = pattern.match(text)\n    if match:\n        print(match.group())\n    else:\n        print(\"No match\")\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'(a+)(b+)')\n    match = pattern.search(text)\n    if match:\n        print \"Match 1-1 found: {match}\".format(match=match.group())\n    else:\n        print \"No match\"\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Write your code here\n    dict_pairs = {}\n    for str1 in test_list:\n        for str2 in test_list:\n            if str2 == str1[::-1]:\n                dict_pairs[str1] = 1\n    return sum(dict_pairs.values())\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    return sum(1 for a, b in zip(test_list, test_list[::-1]) if a == b)\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    if not test_list:\n        return 0\n    \n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # add your code here\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[j][::-1] == test_list[i]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pairs = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if (test_list[i] == test_list[len(test_list)-1-j]) and (test_list[i]!= test_list[j]):\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # test_list = ['r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', 'e', 'r', 'p', 't', 'e','s', 't', 'r', '"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_pairs = 0\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if (test_list[i] == test_list[j][::-1]):\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    result = 0\n    for s in test_list:\n        result = result + test_list.count(s[::-1])\n    return result\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import Counter\n    list_of_tuples = []\n    for item in list1:\n        list_of_tuples.append(tuple(item))\n    return Counter(list_of_tuples)\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for list1_item in list1:\n        if tuple(list1_item) in sublists:\n            sublists[tuple(list1_item)] += 1\n        else:\n            sublists[tuple(list1_item)] = 1\n    return sublists\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict_of_lists = {}\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict1 = {}\n    for i in list1:\n        if tuple(i) in dict1:\n            dict1[tuple(i)] += 1\n        else:\n            dict1[tuple(i)] = 1\n    return dict1\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    unique_list = {}\n    for element in list1:\n        tuple_element = tuple(element)\n        if tuple_element in unique_list:\n            unique_list[tuple_element] += 1\n        else:\n            unique_list[tuple_element] = 1\n    \n    return unique_list\n    \n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1_2 = []\n    for i in list1:\n        list1_2.append(tuple(i))\n    new_dic = {}\n    for i in list1_2:\n        new_dic[i] = list1_2.count(i)\n    return new_dic\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2 = []\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return(len(list1))\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return [[item] for item in list1]\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for x in list1:\n        l = []\n        for y in x:\n            l.append(y)\n        l = tuple(l)\n        if l in d:\n            d[l] += 1\n        else:\n            d[l] = 1\n    return d\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.count('.')>1:\n        return False\n    elif num[0]=='+' or num[0]=='-':\n        return False\n    elif num.count('.')==1:\n        point_pos=num.find('.')\n        left_pos=point_pos-1\n        while left_pos>=0 and num[left_pos].isdigit():\n            left_pos-=1\n        if left_pos==-1:\n            return False\n        right_pos=point_pos+1\n        while right_pos<len(num) and num[right_pos].isdigit():\n            right_pos+=1\n        return (right_pos-point_pos)<=2\n    else:\n        return True\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    from decimal import Decimal\n    if isinstance(num, Decimal):\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if type(num) == int:\n        return False\n    if len(num) > 2:\n        if num[0] == '-':\n            if num[1] == '0':\n                return False\n        else:\n            for i in range(1, len(num)):\n                if num[i] < '0' or num[i] > '9':\n                    return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if num.count('.') == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num == '.':\n        return True\n    elif num.find('.') == -1:\n        return False\n    else:\n        if num[-2] == '.' and num[-1] == '0':\n            return False\n        elif num[-2] == '.':\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        return True\n    return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if type(num)!= str:\n        return False\n    try:\n        int(num)\n        if len(num) == 10:\n            return True\n    except ValueError:\n        return False\n    return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    n = 0\n    for i in num:\n        n = n*10 + int(i)\n    if n == float(num):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] == arr[j]:\n                return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) <= 1:\n        return False\n    if len(arr) == 2:\n        return arr[0]!= arr[1]\n    return not any(arr[i] == arr[i+1] for i in range(len(arr)-1))\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d=dict()\n    for i in arr:\n        if i in d:\n            d[i]=d[i]+1\n        else:\n            d[i]=1\n    for i in d:\n        if d[i]>1:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    list_size = len(arr)\n    if list_size == 1:\n        return 'yes'\n    if list_size == 0:\n        return 'no'\n    for i in range(list_size):\n        for j in range(list_size):\n            if i!= j:\n                if arr[i] == arr[j]:\n                    return 'no'\n    return 'yes'\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr_set = set()\n    for i in arr:\n        if i in arr_set:\n            return False\n        else:\n            arr_set.add(i)\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) <= 1:\n        return True\n    return arr[0] == arr[1] and unique_Element(arr[1:])\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_elem = set(arr)\n    if len(unique_elem) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)==len(set(arr)):\n        print \"There are no duplicate elements in the list\"\n    else:\n        print \"There are duplicate elements in the list\"\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    dict = {}\n    for i in arr:\n        if i in dict:\n            return False\n        else:\n            dict[i] = 1\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #Solution:\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print(\"It's a 31 day month\")\n    elif monthnum3 == 2:\n        print(\"It's a 28 day month\")\n    else:\n        print(\"It's a 30 day month\")\n        "
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if int(monthnum3)>=1 and int(monthnum3)<=12:\n        if int(monthnum3) in [1,3,5,7,8,10,12]:\n            if int(monthnum3) in [1,3,5,7,8,10,12]:\n                if int(monthnum3) in [1,3,5,7,8,10,12]:\n                    if int(monthnum3) in [1,3,5,7,8,10,12]:\n                        if int(monthnum3) in [1,3,5,7,8,10,12]:\n                            if int(monthnum3) in [1,3,5,7,8,10,12]:\n                                if int(monthnum3) in [1,3,5,7,8,10,12]:\n                                    if int(monthnum3) in [1,3,5,7,8,10,12]:\n                                        if int(monthnum3) in [1,3,5,7,8,10,12]:\n                                            if int(monthnum3) in [1,3,5,7,8,10,12]:\n                                                return True\n                                        else:\n                                            return False\n                                    else:\n                                        return False\n                                else:\n                                    return False\n                            else:\n                                return False\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 12 or monthnum3 < 1:\n        print 'Invalid month number'\n    elif monthnum3 == 1:\n        print 'Number of days in Jan: 31'\n    elif monthnum3 == 2:\n        print 'Number of days in Feb: 28 or 29'\n    elif monthnum3 == 3:\n        print 'Number of days in Mar: 31'\n    elif monthnum3 == 4:\n        print 'Number of days in Apr: 30'\n    elif monthnum3 == 5:\n        print 'Number of days in May: 31'\n    elif monthnum3 == 6:\n        print 'Number of days in Jun: 30'\n    elif monthnum3 == 7:\n        print 'Number of days in Jul: 31'\n    elif monthnum3 == 8:\n        print 'Number of days in Aug: 31'\n    elif monthnum3 == 9:\n        print 'Number of days in Sep: 30'\n    elif monthnum3 == 10:\n        print 'Number of days in Oct: 31'\n    elif monthnum3 == 11:\n        print 'Number of days in Nov: 30'\n    else:\n        print 'Number of days in Dec: 31'\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if (monthnum3 == 1) or (monthnum3 == 3) or (monthnum3 == 5) or (monthnum3 == 7) or (monthnum3 == 8) or (monthnum3 == 10) or (monthnum3 == 12):\n        print \"30 days\"\n    elif (monthnum3 == 2) or (monthnum3 == 4) or (monthnum3 == 6) or (monthnum3 == 9) or (monthnum3 == 11):\n        print \"31 days\"\n    elif (monthnum3 == 2) or (monthnum3 == 4) or (monthnum3 == 6) or (monthnum3 == 9) or (monthnum3 == 11):\n        print \"29 days\"\n    elif (monthnum3 == 2) or (monthnum3 == 4) or (monthnum3 == 6) or (monthnum3 == 9) or (monthnum3 == 11):\n        print \"28 days\"\n    else:\n        print \"Not a valid month\"\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return 30\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return 29\n    return 28\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    # Checking whether the given month number is 30 days or not\n    if monthnum3 == 3 or monthnum3 == 4 or monthnum3 == 5:\n        print \"There are 30 days in month of March\"\n    elif monthnum3 == 6 or monthnum3 == 7 or monthnum3 == 8:\n        print \"There are 30 days in month of June\"\n    elif monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11:\n        print \"There are 30 days in month of September\"\n    elif monthnum3 == 12 or monthnum3 == 1 or monthnum3 == 2:\n        print \"There are 30 days in month of December\"\n    else:\n        print \"Please enter the valid month number\"\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == '2':\n        if year % 400 == 0 or (year % 4 == 0 and year % 100!= 0):\n            print('February has 29 days')\n        else:\n            print('February has 28 days')\n    elif monthnum3 == '4' or monthnum3 == '6' or monthnum3 == '9' or monthnum3 == '11':\n        print('Month has 30 days')\n    else:\n        print('Month has 31 days')\n    return \n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    #monthnum3 = input('Enter the Month Number: ')\n    #monthnum3 = int(monthnum3)\n    #if monthnum3 <= 12 and monthnum3 >= 1:\n    #    print 'Entered Number is between 1 and 12'\n    #    if monthnum3 in [1,3,5,7,8,10,12]:\n    #        print 'Given Month Number contains 30 days'\n    #    elif monthnum3 in [4,6,9,11]:\n    #        print 'Given Month Number contains 31 days'\n    #    else:\n    #        print 'Given Month Number does not contain 30 days'\n    #else:\n    #    print 'Entered Number is not between 1 and 12'\n    if monthnum3 > 12 or monthnum3 < 1:\n        print 'Entered Number is not between 1 and 12'\n    else:\n        if monthnum3 in [1,3,5,7,8,10,12]:\n            print 'Given Month Number contains 30 days'\n        elif monthnum3 in [4,6,9,11]:\n            print 'Given Month Number contains 31 days'\n        else:\n            print 'Given Month Number does not contain 30 days'\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[1]-arr[0]\n    for i in range(1,n):\n        diff = arr[i]-arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    print(arr)\n    min_diff = arr[n-1] - arr[0]\n    for i in range(1,n):\n        diff = arr[i] - arr[0]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr = sorted(arr)\n    diff = arr[1] - arr[0]\n    for i in range(n-1):\n        diff = min(diff, arr[i+1] - arr[i])\n    return diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr = sorted(arr)\n    return arr[-1]-arr[0]\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff=arr[1]-arr[0]\n    for i in range(n-1):\n        for j in range(i+1,n):\n            temp=arr[j]-arr[i]\n            if temp<min_diff:\n                min_diff=temp\n    return min_diff\ndef find_min_diff_1(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff=arr[1]-arr[0]\n    arr.sort()\n    for i in range(n-1):\n        temp=arr[i+1]-arr[i]\n        if temp<min_diff:\n            min_diff=temp\n    return min_diff\ndef find_min_diff_2(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff=arr[1]-arr[0]\n    for i in range(n-1):\n        temp=arr[i+1]-arr[i]\n        if temp<min_diff:\n            min_diff=temp\n    return min_diff\ndef find_min_diff_3(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff=arr[1]-arr[0]\n    for i in range(n-1):\n        temp=arr[i+1]-arr[i]\n        if temp<min_diff:\n            min_diff=temp\n    return min_diff\ndef find_min_diff_4(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff=arr[1]-arr[0]\n    min_diff_pair=[0,0]\n    for i in range(n-1):\n        temp=arr[i+1]-arr[i]\n        if temp<min_diff:\n            min_diff=temp\n            min_diff_pair=[arr[i],arr[i+1]]\n    return min_diff_pair\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    ans = arr[0] + arr[1]\n    for i in range(n-2):\n        ans = min(ans, arr[i+2] - arr[i])\n    return ans\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    \n    # Initialize minimum difference to a large value\n    min_diff = maxsize\n    \n    # Sort the array\n    arr.sort()\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n==1:\n        return arr[0]\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1,n):\n            min_diff = min(min_diff, abs(arr[i] - arr[j]))\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr = sorted(arr)\n    for i in range(n-1):\n        if i < n-2:\n            if arr[i+1] - arr[i] < arr[i+2] - arr[i+1]:\n                return arr[i+2] - arr[i]\n            else:\n                return arr[i+1] - arr[i]\n    return arr[n-1] - arr[n-2]\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    print count\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(str.count(x) for x in set(str))\ndef number_ctr1(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str) - str.count(' ')\ndef number_ctr2(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str.strip())\ndef number_ctr3(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str.replace(' ',''))\ndef number_ctr4(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(map(str.count, '0123456789'))\ndef number_ctr5(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(int(c) for c in str if c.isdigit())\ndef number_ctr6(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(c.isdigit() for c in str)\ndef number_ctr7(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(c.isdigit() for c in str)\ndef number_ctr8(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(map(str.count, '0123456789'))\ndef number_ctr9(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(map(lambda c: c.isdigit(), str))\ndef number_ctr10(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(1 for c in str if c.isdigit())\ndef number_ctr11(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(c.isdigit() for c in str)\ndef number_ctr12(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(c.isdigit() for c in str)\ndef number_ctr13(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(1 for c in str if c.isdigit())\ndef number_ctr14(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(c.isdigit() for c in str)\ndef number_ctr15(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(1 for c in str if c.isdigit())\ndef number_ctr16(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(1 for c in str if c.isdigit())\ndef number_ctr17(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(1 for c in str if c.isdigit())\ndef number_ctr18(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(1 for c in str if c.isdigit())\ndef number_ctr19(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(c.isdigit() for c in str)\ndef number_ctr20(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(c.isdigit() for c in str)\ndef number_ctr21(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(1 for c in str if c.isdigit())\ndef number_ctr22(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(c.isdigit() for c in str)\ndef number_ctr23(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(1 for c in str if c.isdigit())\ndef number_ctr24(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(c.isdigit() for c in str)\ndef number_ctr25(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(1 for c in str if c.isdigit())\ndef number_ctr26(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(1 for c in str if c.isdigit())\ndef number_ctr27(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(1 for c in str if c.isdigit())\ndef number_ctr28(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(1 for c in str if c.isdigit())\ndef number_ctr29(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(c.isdigit() for c in str)\ndef number_ctr30(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(c.isdigit() for c in str)\ndef number_ctr31(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(c.isdigit() for c in str)\ndef number_ctr32(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(1 for c in str if c.isdigit())\ndef number_ctr33(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(1 for c in str if c.isdigit())\ndef number_ctr34(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(c.isdigit() for c in str)\ndef number_ctr35(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(c.isdigit() for c in str)\ndef number_ctr36(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(1 for c in str if c.isdigit())\ndef number_ctr37(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(1 for c in str if c.isdigit())\ndef number_ctr38(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(c.isdigit() for c in str)\ndef number_ctr39(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(c.isdigit() for c in str)\ndef number_ctr40(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(c.isdigit() for c in str)\ndef number_ctr41(str):\n    '''\n    Write a python function to count number of digit"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # count = 0\n    # for char in str:\n    #     if char.isdigit():\n    #         count += 1\n    # return count\n    return len(filter(str.isdigit, str))\n    \n    \ndef convert_to_hex(hex_string):\n    '''\n    Write a python function to convert a string to hex.\n    '''\n    int_value = int(hex_string, 16)\n    hex_value = hex(int_value)\n    return hex_value\n    \n    \ndef add_numbers(num_list):\n    '''\n    Write a python function to add two numbers.\n    '''\n    sum = 0\n    for number in num_list:\n        sum += number\n    return sum\n    \n    \ndef sum_list(nums):\n    '''\n    Write a python function to sum all the numbers in a list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n    \n    \ndef factorial(num):\n    '''\n    Write a python function to find factorial of a number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return num*factorial(num-1)\n    \n    \ndef is_palindrome(str):\n    '''\n    Write a python function to check if a string is a palindrome.\n    '''\n    str_list = [char for char in str]\n    start = 0\n    end = len(str_list)-1\n    while start < end:\n        if str_list[start]!= str_list[end]:\n            return False\n        start += 1\n        end -= 1\n    return True\n    \n    \ndef palindrome_sentence(sentence):\n    '''\n    Write a python function to check if a sentence is palindrome.\n    '''\n    sentence_list = [char for char in sentence]\n    start = 0\n    end = len(sentence_list)-1\n    while start < end:\n        if sentence_list[start]!= sentence_list[end]:\n            return False\n        start += 1\n        end -= 1\n    return True\n    \n    \ndef char_histogram(str):\n    '''\n    Write a python function to count the number of times each character appears in a string.\n    '''\n    char_dict = {}\n    for char in str:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    return char_dict\n    \n    \ndef is_anagram(str1, str2):\n    '''\n    Write a python function to check if two strings are anagrams of each other.\n    '''\n    str1_list = [char for char in str1]\n    str2_list = [char for char in str2]\n    start = 0\n    end = len(str1_list)-1\n    while start < end:\n        if str1_list[start] == str2_list[end]:\n            start += 1\n            end -= 1\n        else:\n            return False\n    return True\n    \n    \ndef is_pangram(str):\n    '''\n    Write a python function to check if a string is a pangram.\n    '''\n    letter_list = [char for char in str]\n    all_letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    for letter in all_letters:\n        if letter not in letter_list:\n            return False\n    return True\n    \n    \ndef longest_word(words):\n    '''\n    Write a python function to find the longest word in a list of words.\n    '''\n    longest = words[0]\n    for word in words:\n        if len(word) > len(longest):\n            longest = word\n    return longest\n    \n    \ndef is_prime(num):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if num == 1:\n        return False\n    if num == 2 or num == 3 or num == 5 or num == 7:\n        return True\n    elif num % 2 == 0 or num % 3 == 0 or num % 5 == 0 or num % 7 == 0:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n    \n    \ndef count_vowels(str):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    count = 0\n    for char in str:\n        if char in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    return count\n    \n    \ndef are_anagrams(str1, str2):\n    '''\n    Write a python function to check if two strings are anagrams of each other.\n    '''\n    str1_list = [char for char in str1]\n    str2_list = [char for char in str2]\n    start = 0\n    end = len(str1_list)-1\n    while start < end:\n        if str1_list[start]!= str2_list[end]:\n            return False\n        start += 1\n        end -= 1\n    return True\n    \n    \ndef is_string_rotated(str1, str2):\n    '''\n    Write a python function to check if a string is rotated to same string.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    for i in range(len(str1)):\n        if str1[i:] + str1[:i] == str2:\n            return True\n    return False\n    \n    \ndef find_rotation(str1, str2):\n    '''\n    Write a python function to find the first occurrence of a substring in a string.\n    '''\n    if str1.count(str2) > 0:\n        return str1.index(str2)\n    else:\n        return -1\n    \n    \ndef get_rotation(str1, str2):\n    '''\n    Write a python function to get the minimum number of times a substring is to be rotated to get a string.\n    '''\n    if len(str1)!= len(str2):\n        return -1\n    count = 0\n    for i in range(len(str1)):\n        if str1[i:] + str1[:i] == str2:\n            return count\n        count += 1\n    return -1\n    \n    \ndef anagram_check(str1, str2):\n    '''\n    Write a python function to check if two strings are anagrams of each other.\n    '''\n    if sorted(str1) == sorted(str2):\n        return True\n    else:\n        return False\n    \n    \ndef longest_substring(str1, str2):\n    '''\n    Write a python function to find the longest common substring between two strings.\n    '''\n    max_len = 0\n    for i in range(len(str1)):\n        for j in range(len(str2)):\n            count = 0\n            while i+count < len(str1) and j+count < len(str2):\n                if str1[i+count] == str2[j+count]:\n                    count += 1\n                else:\n                    break\n            if count > max_len:\n                max_len = count\n    return max_len\n    \n    \ndef check_perm(str1, str2):\n    '''\n    Write a python function to check if two strings are permutations of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    str1_dict = {}\n    str2_dict = {}\n    for char in str1:\n        if char in str1_dict:\n            str1_dict[char] += 1\n        else:\n            str1_dict[char] = 1\n    for char in str2:\n        if char in str2_dict:\n            str2_dict[char] += 1\n        else:\n            str"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for ch in str:\n        if ch.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    lst=[]\n    ctr=0\n    for i in str:\n        if i.isdigit():\n            ctr+=1\n    lst.append(ctr)\n    return lst\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isdigit():\n            count+=1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    print('%d'%len(str))\n    return\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    n = len(str)\n    # initializing sum as 0\n    sum = 0\n    # Calculating sum of digits\n    while n > 0:\n        sum = sum + 1\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isdigit():\n            count+=1\n    return count\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    a = [0]*(n+1)\n    a[1] = 1\n    a[2] = 2\n    for i in range(3,n+1):\n        if a[i] == 0:\n            a[i] = a[i-1] + i\n    return a[n]\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return int(math.pow(10,n)+1)\ndef largest_polite(n):\n    '''\n    Write a function to find the nth largest polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return int(math.pow(10,n)-1)\ndef smallest_polite(n):\n    '''\n    Write a function to find the nth smallest polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return int(math.pow(10,n-1))\ndef binary_search_polite(n):\n    '''\n    Write a function to find the nth polite number using binary search. geeksforgeeks.org/n-th-polite-number/\n    '''\n    low = 0\n    high = math.pow(10,9)\n    while(low<high):\n        mid = (low+high)//2\n        if n<=smallest_polite(mid):\n            high = mid\n        elif n>smallest_polite(mid+1):\n            low = mid+1\n        else:\n            return mid\n    return -1\ndef good_till(n):\n    '''\n    Write a function to find the nth good number. geeksforgeeks.org/n-th-good-number/\n    '''\n    return n*n + (n-1)*(n+1) //2 - 1\ndef best_till(n):\n    '''\n    Write a function to find the nth best number. geeksforgeeks.org/n-th-best-number/\n    '''\n    return int(n*(n+1)//2)\ndef is_good(n):\n    '''\n    Write a function to find whether the given number is good or not. geeksforgeeks.org/nth-number/\n    '''\n    return n*(n+1)//2\ndef is_best(n):\n    '''\n    Write a function to find whether the given number is best or not. geeksforgeeks.org/nth-number/\n    '''\n    return int(n*(3*n-1)//2)\ndef print_polite(low,high):\n    '''\n    Write a function to find the first n polite number in the range (low,high). geeksforgeeks.org/n-th-polite-number/\n    '''\n    while(low!=high):\n        mid = (low+high)//2\n        if n<=is_polite(mid):\n            high = mid\n        elif n>is_polite(mid+1):\n            low = mid+1\n        else:\n            return mid\n    return -1\ndef print_best(low,high):\n    '''\n    Write a function to find the first n best number in the range (low,high). geeksforgeeks.org/n-th-best-number/\n    '''\n    while(low!=high):\n        mid = (low+high)//2\n        if n<=best_till(mid):\n            high = mid\n        elif n>best_till(mid+1):\n            low = mid+1\n        else:\n            return mid\n    return -1\ndef print_good(low,high):\n    '''\n    Write a function to find the first n good number in the range (low,high). geeksforgeeks.org/n-th-good-number/\n    '''\n    while(low!=high):\n        mid = (low+high)//2\n        if n<=good_till(mid):\n            high = mid\n        elif n>good_till(mid+1):\n            low = mid+1\n        else:\n            return mid\n    return -1\ndef print_polite_binary(low,high):\n    '''\n    Write a function to find the first n polite number in the range (low,high). geeksforgeeks.org/n-th-polite-number/\n    '''\n    while(low!=high):\n        mid = (low+high)//2\n        if n<=smallest_polite(mid):\n            high = mid\n        elif n>smallest_polite(mid+1):\n            low = mid+1\n        else:\n            return mid\n    return -1\ndef print_best_binary(low,high):\n    '''\n    Write a function to find the first n best number in the range (low,high). geeksforgeeks.org/n-th-best-number/\n    '''\n    while(low!=high):\n        mid = (low+high)//2\n        if n<=smallest_polite(mid):\n            high = mid\n        elif n>smallest_polite(mid+1):\n            low = mid+1\n        else:\n            return mid\n    return -1\ndef print_good_binary(low,high):\n    '''\n    Write a function to find the first n good number in the range (low,high). geeksforgeeks.org/n-th-good-number/\n    '''\n    while(low!=high):\n        mid = (low+high)//2\n        if n<=best_till(mid):\n            high = mid\n        elif n>best_till(mid+1):\n            low = mid+1\n        else:\n            return mid\n    return -1\ndef print_polite_binary_polite(low,high):\n    '''\n    Write a function to find the first n polite number in the range (low,high). geeksforgeeks.org/n-th-polite-number/\n    '''\n    while(low!=high):\n        mid = (low+high)//2\n        if n<=smallest_polite(mid):\n            high = mid\n        elif n>smallest_polite(mid+1):\n            low = mid+1\n        else:\n            return mid\n    return -1\ndef print_best_binary_polite(low,high):\n    '''\n    Write a function to find the first n best number in the range (low,high). geeksforgeeks.org/n-th-best-number/\n    '''\n    while(low!=high):\n        mid = (low+high)//2\n        if n<=smallest_polite(mid):\n            high = mid\n        elif n>smallest_polite(mid+1):\n            low = mid+1\n        else:\n            return mid\n    return -1\ndef print_good_binary_polite(low,high):\n    '''\n    Write a function to find the first n good number in the range (low,high). geeksforgeeks.org/n-th-good-number/\n    '''\n    while(low!=high):\n        mid = (low+high)//2\n        if n<=good_till(mid):\n            high = mid\n        elif n>good_till(mid+1):\n            low = mid+1\n        else:\n            return mid\n    return -1\ndef print_polite_binary_polite_polite(low,high):\n    '''\n    Write a function to find the first n polite number in the range (low,high). geeksforgeeks.org/n-th-polite-number/\n    '''\n    while(low!=high):\n        mid = (low+high)//2\n        if n<=smallest_polite(mid):\n            high = mid\n        elif n>smallest_polite(mid+1):\n            low = mid+1\n        else:\n            return mid\n    return -1\ndef print_best_binary_polite_polite(low,high):\n    '''\n    Write a function to find the first n best number in the range (low,high). geeksforgeeks.org/n-th-best-number/\n    '''\n    while(low!=high):\n        mid = (low+high)//2\n        if n<=smallest_polite(mid):\n            high = mid\n        elif n>smallest_polite(mid+1):\n            low = mid+1\n        else:\n            return mid\n    return -1\ndef print_good_binary_polite_polite(low,high):\n    '''\n    Write a function t"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    num = 1 \n    polite = []\n    while(len(polite) < n): \n        if num % 2 == 0: \n            polite.append(num)\n        num += 1\n    return polite[-1]\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    p = 0\n    def helper(n,prime,polite):\n        if n == 1:\n            return True\n        if n % 2 == 0:\n            n = n/2\n            if prime:\n                return helper(n,False,False)\n            else:\n                return helper(n,True,True)\n        elif n % 2 == 1:\n            return helper(n,False,False)\n    return helper(n,True,True)\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    nth = 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n%2 == 0:\n        nth = n/2\n    else:\n        nth = (3*n+1)/2\n    return nth\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n % 2 == 0: \n        return n//2\n    else: \n        return 3*n+1\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    p=0\n    a=1\n    b=1\n    #b=2\n    i=1\n    while(n-1):\n        a=a+b\n        b=a+b\n        a=a+b\n        #a=b\n        #b=2*a\n        i=i+1\n        n=n-1\n    print(a,b)\n    a=int(a)\n    b=int(b)\n    return(a)\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 1\n    else:\n        return (5**(n - 1)) - (((5**n) - 1) / 4)\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_2(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return ((2 * n - 1) * (2 * n - 3) + n + 1) % (n - 1)\ndef is_polite_3(n):\n    return 2 * n - 1\ndef is_polite_4(n):\n    return 2 * n - 1\ndef is_polite_5(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_6(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_7(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_8(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_9(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_10(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_11(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_12(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_13(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_14(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_15(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_16(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_17(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_18(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_19(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_20(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_21(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_22(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_23(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_24(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_25(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_26(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_27(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_28(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_29(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_30(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_31(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_32(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_33(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_34(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_35(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_36(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_37(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_38(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_39(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_40(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_41(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_42(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_43(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_44(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_45(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_46(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_47(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_48(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_49(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_50(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_51(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_52(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_53(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_54(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_55(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_56(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_57(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_58(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polite_59(n):\n    return (2 * n - 1) * (2 * n - 3) + n + 1\ndef is_polit"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_numbers = [] \n    polite_numbers.append(1) # starting point \n    polite_numbers.append(2) \n    polite_numbers.append(4) \n    def nth_polite_number(n): \n        if n == 1: \n            return 1 \n        if n == 2: \n            return 2 \n        if n == 3: \n            return 4 \n        p1 = 0 \n        p2 = 1 \n        polite_number = 0 \n        if n == 1: \n            return 1 \n        elif n == 2: \n            return 2 \n        elif n == 3: \n            return 4 \n        while n > 3: \n            p3 = p2 + p1 \n            p1 = p2 \n            p2 = p3 \n            if p3 % 2 == 0: \n                polite_number += p3 \n            if p3 % 2!= 0: \n                polite_number -= p3 \n            n -= 1 \n        return polite_number \n    n = int(input(\"Enter nth polite number:\")) \n    if n == 1: \n        print(\"Polite number:\", polite_numbers[1]) \n    elif n == 2: \n        print(\"Polite number:\", polite_numbers[2]) \n    elif n == 3: \n        print(\"Polite number:\", polite_numbers[3]) \n    else: \n        print(\"Polite number:\", nth_polite_number(n)) \ndef unique_factors(n): \n    '''\n    Write a function to find number of unique factors of a given number.\n    example : \n    input : n = 12\n    output : 4\n    '''\n    factors = [] \n    factors.append(1) \n    for x in range(2, n): \n        if n % x == 0: \n            factors.append(x) \n    return len(factors) \ndef factors(n): \n    '''\n    Write a function to find factors of a given number.\n    example : \n    input : n = 12\n    output : [1, 2, 3, 4, 6, 12]\n    '''\n    factors = [] \n    for x in range(1, n+1): \n        if n % x == 0: \n            factors.append(x) \n    return factors \ndef prime_factors(n): \n    '''\n    Write a function to find prime factors of a given number.\n    example : \n    input : n = 12\n    output : [2, 2, 3]\n    '''\n    factors = [] \n    for x in range(1, n+1): \n        if n % x == 0: \n            factors.append(x) \n    return factors \ndef is_super_prime(n): \n    '''\n    Write a function to find if given number is super prime. \n    super prime numbers are numbers whose sum of the prime factors is equal to the number itself. \n    example: \n    input: n = 12 \n    output: True\n    '''\n    factors = prime_factors(n) \n    if sum(factors) == n: \n        return True \n    else: \n        return False \ndef find_set_of_primes(n): \n    '''\n    Write a function to find prime numbers in a range.\n    example : \n    input : n = 100 \n    output : [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    '''\n    prime_numbers = [] \n    for x in range(2, n): \n        if is_super_prime(x): \n            prime_numbers.append(x) \n    return prime_numbers \ndef find_longest_sub_sequence(n): \n    '''\n    Write a function to find the longest increasing sub sequence of a given number. \n    The sub sequence should not contain duplicate elements. \n    example : \n    input : n = [10, 22, 9, 33, 21, 50, 41, 60, 80]\n    output : [10, 22, 33, 50, 60]\n    '''\n    sub_sequence = [] \n    n = sorted(n) \n    sub_sequence.append(n[0]) \n    for x in range(1, len(n)): \n        if n[x] > n[x-1]: \n            sub_sequence.append(n[x]) \n    return sub_sequence \ndef prime_sum(n): \n    '''\n    Write a function to find the sum of prime numbers. \n    input : n = 12\n    output : 20\n    '''\n    factors = [] \n    for x in range(1, n+1): \n        if n % x == 0: \n            factors.append(x) \n    return sum(factors) \ndef is_truncatable(n): \n    '''\n    Write a function to check if a number is truncatable.\n    example : \n    input : n = 121\n    output : True\n    '''\n    trunc = str(n) \n    if len(trunc) == 1: \n        return False \n    for x in range(1, len(trunc)): \n        if not is_prime(int(trunc[x:])): \n            return False \n    return True \ndef is_prime(n): \n    '''\n    Write a function to find if a given number is prime. \n    example : \n    input : n = 12\n    output : True\n    '''\n    if n > 1: \n        for x in range(2, n): \n            if n % x == 0: \n                return False \n        return True \n    else: \n        return False \ndef pythagorean_triple(a, b): \n    '''\n    Write a function to find the pythagorean triple. \n    a^2 + b^2 = c^2 \n    example : \n    input : a = 3, b = 4\n    output : c = 5\n    '''\n    c = math.sqrt(a**2 + b**2) \n    return c \ndef find_largest_prime_factor(n): \n    '''\n    Write a function to find largest prime factor of a given number. \n    input : n = 12\n    output : 3\n    '''\n    factors = [] \n    for x in range(1, n+1): \n        if n % x == 0: \n            factors.append(x) \n    return max(factors) \ndef find_number_of_divisors(n): \n    '''\n    Write a function to find number of divisors of a given number. \n    example : \n    input : n = 12\n    output : 4\n    '''\n    divisors = [] \n    for x in range(1, n+1): \n        if n % x == 0: \n            divisors.append(x) \n    return len(divisors) \ndef find_number_of_divisors_of_a_set(n): \n    '''\n    Write a function to find number of divisors of a given set of numbers. \n    input : n = [4, 6, 8, 12, 15, 22, 25, 26]\n    output : 8\n    '''\n    divisors = [] \n    for x in n: \n        divisors.append(find_number_of_divisors(x)) \n    return divisors \ndef amicable_numbers(n): \n    '''\n    Write a function to find amicable numbers. \n    amicable numbers are two numbers that sum to each other. \n    example : \n    input : n = 52\n    output : [23, 52]\n    '''\n    amicable_numbers = [] \n    for x in range(1, n+1): \n        if is_truncatable(x): \n            amicable_numbers.append(x) "
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return zip(l1, l1[1:])\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1.sort()\n    print(l1)\n    i = 0\n    j = 0\n    l = []\n    while j < len(l1):\n        l.append((l1[i], l1[j]))\n        i+=1\n        j+=1\n    return l\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    #return [(l1[i], l1[i + 1]) for i in xrange(len(l1) - 1)]\n    return list(zip(l1, l1[1:]))\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)):\n        if i+1 < len(l1):\n            l2.append([l1[i], l1[i+1]])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # map() is a built-in function that applies a function to all the elements in an iterable (list, tuple etc)\n    return list(map(lambda a,b: (a,b), l1, l1[1:]))\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    return zip(l1, l1[1:])\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    out_lst = []\n    for i in range(0, len(l1)):\n        if i == len(l1)-1:\n            break\n        else:\n            out_lst.append([l1[i],l1[i+1]])\n    return out_lst\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)-1):\n        l2.append([l1[i],l1[i+1]])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1) - 1)]\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    \n    if len(arr) < 2:\n        return 0\n    \n    mapping = {}\n    for i in xrange(len(arr)):\n        if arr[i] in mapping:\n            mapping[arr[i]] += 1\n        else:\n            mapping[arr[i]] = 1\n    \n    count = 0\n    for i in xrange(len(arr)):\n        if sum - arr[i] in mapping:\n            count += mapping[sum - arr[i]]\n    \n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if len(arr) == 1:\n        return 1 if arr[0] == sum else 0\n    \n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        if arr[left] + arr[right] == sum:\n            return 1 + get_pairs_count(arr[left+1:right], sum) + get_pairs_count(arr[left:right-1], sum)\n        elif arr[left] + arr[right] < sum:\n            left += 1\n        else:\n            right -= 1\n    return 0\n    \ndef get_pairs_count_index(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if len(arr) == 1:\n        return 1 if arr[0] == sum else 0\n    \n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        if arr[left] + arr[right] == sum:\n            return 1 + get_pairs_count_index(arr[left+1:right], sum) + get_pairs_count_index(arr[left:right-1], sum)\n        elif arr[left] + arr[right] < sum:\n            left += 1\n        else:\n            right -= 1\n    return 0\n    \ndef get_pairs_count_index_binary(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if len(arr) == 1:\n        return 1 if arr[0] == sum else 0\n    \n    arr_sum = [0] * len(arr)\n    arr_sum[0] = 1 if arr[0] == sum else 0\n    \n    for i in range(1, len(arr)):\n        arr_sum[i] = arr_sum[i-1]\n        if arr[i] + arr[i-1] < sum:\n            arr_sum[i] += arr_sum[i-1]\n        elif arr[i] + arr[i-1] == sum:\n            arr_sum[i] += arr_sum[i-1] + 1\n    \n    return arr_sum[-1]\n    \ndef find_pairs(arr, sum):\n    '''\n    Write a python function to find all pairs of elements whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if len(arr) == 1:\n        return [[arr[0]]]\n    \n    left, right = 0, len(arr) - 1\n    \n    result = []\n    \n    while left < right:\n        if arr[left] + arr[right] == sum:\n            result.append([arr[left], arr[right]])\n            left += 1\n            right -= 1\n        elif arr[left] + arr[right] < sum:\n            left += 1\n        else:\n            right -= 1\n    return result\n    \ndef find_pairs_index(arr, sum):\n    '''\n    Write a python function to find all pairs of elements whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if len(arr) == 1:\n        return [[arr[0]]]\n    \n    arr_sum = [0] * len(arr)\n    arr_sum[0] = 1 if arr[0] == sum else 0\n    \n    for i in range(1, len(arr)):\n        arr_sum[i] = arr_sum[i-1]\n        if arr[i] + arr[i-1] < sum:\n            arr_sum[i] += arr_sum[i-1]\n        elif arr[i] + arr[i-1] == sum:\n            arr_sum[i] += arr_sum[i-1] + 1\n    \n    result = []\n    for i in range(len(arr)):\n        if arr_sum[i] > 1:\n            result.append([arr[i], arr[i]])\n    return result\n    \ndef find_pairs_index_binary(arr, sum):\n    '''\n    Write a python function to find all pairs of elements whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if len(arr) == 1:\n        return [[arr[0]]]\n    \n    arr_sum = [0] * len(arr)\n    arr_sum[0] = 1 if arr[0] == sum else 0\n    \n    for i in range(1, len(arr)):\n        arr_sum[i] = arr_sum[i-1]\n        if arr[i] + arr[i-1] < sum:\n            arr_sum[i] += arr_sum[i-1]\n        elif arr[i] + arr[i-1] == sum:\n            arr_sum[i] += arr_sum[i-1] + 1\n    \n    result = []\n    for i in range(len(arr)):\n        if arr_sum[i] > 1:\n            result.append([arr[i], arr[i]])\n    return result\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    return arr.count(sum)\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    arr.sort()\n    index = 0\n    count = 0\n    while index < len(arr) - 1:\n        if arr[index] + arr[index+1] == sum:\n            count += 1\n        index += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    res = 0\n    #sort the list to avoid duplicates\n    arr.sort()\n    #traverse the array, we can either use two for loops or a hash table\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                res += 1\n    return res\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    d = {}\n    for i in arr:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    count = 0\n    for i in d:\n        if sum - i in d:\n            count += d[i] * (d[i] - 1) / 2\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(0, n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    n = len(arr)\n    dp = [[0 for i in range(sum + 1)] for j in range(n + 1)]\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!=j:\n                if arr[i]+arr[j]==sum:\n                    count+=1\n    return count\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1)-set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n    \ndef IntToBinStr(num,bits):\n    '''\n    Write a python function to convert an integer into a binary string of 'bits'\n    bits.\n    '''\n    assert num < 2**bits\n    bin_str = []\n    for i in range(bits):\n        bin_str.append(num%2)\n        num = num//2\n    return bin_str\n    \ndef BinStrToInt(bin_str):\n    '''\n    Write a python function to convert a binary string into an integer.\n    '''\n    assert len(bin_str) < 8\n    num = 0\n    for i,bit in enumerate(bin_str):\n        num += 2**(len(bin_str) - 1 - i)*bit\n    return num\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n    \ndef unique(li):\n    '''\n    Write a python function to get the unique elements in a list.\n    '''\n    return list(set(li))\n    \ndef Convert(string):\n    '''\n    Write a python function to convert a string to an integer.\n    '''\n    return int(string)\n    \ndef Rows(board):\n    '''\n    Write a python function to get the number of rows of a board.\n    '''\n    return len(board)\n    \ndef Columns(board):\n    '''\n    Write a python function to get the number of columns of a board.\n    '''\n    return len(board[0])\n    \ndef Sub_grid(board, row, column):\n    '''\n    Write a python function to get the sub grid of a board.\n    '''\n    for i in range(row, row + 3):\n        for j in range(column, column + 3):\n            print board[i][j],\n    print\n    \ndef Sudoku(board):\n    '''\n    Write a python function to check if a board is a valid sudoku.\n    '''\n    for i in range(0, 9):\n        li = board[i]\n        for j in range(0, 9):\n            if i!= j:\n                if li[j] == li[i]:\n                    return False\n    for i in range(0, 9):\n        li = board[i]\n        for j in range(0, 9):\n            li_dif = Diff(li, board[j])\n            if len(li_dif)!= 0:\n                return False\n    for i in range(0, 3):\n        for j in range(0, 3):\n            li = []\n            for k in range(0, 3):\n                for l in range(0, 3):\n                    li.append(board[3 * i + k][3 * j + l])\n            li_dif = Diff(li, unique(li))\n            if len(li_dif)!= 0:\n                return False\n    return True\n    \ndef Max(board):\n    '''\n    Write a python function to find the maximum element in a list of lists.\n    '''\n    li_max = []\n    for i in board:\n        li_max.append(max(i))\n    return max(li_max)\n    \ndef Min(board):\n    '''\n    Write a python function to find the minimum element in a list of lists.\n    '''\n    li_min = []\n    for i in board:\n        li_min.append(min(i))\n    return min(li_min)\n    \ndef Transpose(board):\n    '''\n    Write a python function to get the transpose of a board.\n    '''\n    li_trans = []\n    for i in range(0, 9):\n        li_trans.append([])\n    for i in range(0, 9):\n        for j in range(0, 9):\n            li_trans[j].append(board[i][j])\n    return li_trans\n    \ndef Sum(board):\n    '''\n    Write a python function to get the sum of a board.\n    '''\n    li_sum = []\n    for i in board:\n        li_sum.append(sum(i))\n    return sum(li_sum)\n    \ndef Main():\n    '''\n    Write a python function to get the sum of a board.\n    '''\n    board = [[3, 9, 1, 2, 8, 4, 7, 6, 5], [8, 5, 3, 4, 7, 6, 9, 1, 2], [4, 6, 2, 8, 1, 7, 5, 3, 9], [6, 4, 7, 9, 2, 3, 5, 8, 1], [5, 8, 1, 3, 4, 6, 2, 7, 9], [7, 9, 3, 5, 1, 8, 6, 2, 4], [1, 2, 6, 8, 7, 9, 4, 5, 3], [2, 8, 7, 5, 9, 6, 1, 4, 3], [9, 6, 4, 2, 3, 5, 7, 1, 8]]\n    print \"Original board: \"\n    for i in board:\n        print i\n    print \"\\n\"\n    print \"Maximum element: \"\n    print Max(board)\n    print \"\\n\"\n    print \"Minimum element: \"\n    print Min(board)\n    print \"\\n\"\n    print \"Transpose of board: \"\n    print Transpose(board)\n    print \"\\n\"\n    print \"Sum of board: \"\n    print Sum(board)\n    print \"\\n\"\n    print \"Difference between two lists: \"\n    print Diff([1, 2, 3], [1, 2, 3, 4, 5])\n    print \"\\n\"\n    print \"Unique elements in a list: \"\n    print unique([1, 2, 3, 1, 2, 4, 5, 5])\n    print \"\\n\"\n    print \"Difference between two lists: \"\n    print Diff([1, 2, 3, 1, 2, 4, 5, 5], [1, 2, 3, 1, 2, 4, 5, 5])\n    print \"\\n\"\n    print \"Sub grid of a board: \"\n    Sub_grid(board, 0, 0)\n    print \"\\n\"\n    print \"Sudoku board: \"\n    Sudoku(board)\n    \nif __name__ == \"__main__\":\n    Main("
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return(list(set(li1)-set(li2)))\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    summ = 0\n    for num in range(n+1) : \n        if (num%2!= 0) : \n            summ += (num**4)\n    return summ \n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    summ = 0\n    for i in range(1, n+1, 2) : \n        summ = summ + (i ** 4)\n    return summ\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # assert (type(n) == int), \"Type must be Integer\"\n    # assert (n > 0), \"Number must be positive\"\n    if n < 0 : \n        return None\n    if n == 0 :\n        return 0\n    return (n * (n + 1) * (2 * n + 1)) / 6\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 0 : \n        return 0\n    return 4 * n**4 + odd_num_sum(n-1)\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # approach 1\n    # return sum([i*i*i for i in range(1, n+1, 2)])\n    # approach 2\n    sum = 0\n    for i in range(1, n+1, 2) : \n        sum += (i*i*i)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # return the sum of nth term\n    # use the formula, f(n) = n + f(n-1)\n    if n == 0 :\n        return 1\n    return n + odd_num_sum(n-1)\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 0 : \n        return 0\n    if n % 2 == 0 : \n        return 0\n    return (3*(n**2)) // 2 + odd_num_sum(n-1)\n    \ndef factorial(n): \n    '''\n    Write a python function to find factorial of a number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_ = 0\n    for i in range(1, n+1, 2) : \n        sum_ = sum_ + (i**4)\n    return sum_\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    res = n*(n+1)*(2*n+1)\n    return res\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for num in range(1, n+1, 2) : \n        sum += (num * num * num * num)\n    return sum\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    brackets = {\n        \")\": \"(\",\n        \"]\": \"[\",\n        \"}\": \"{\"\n    }\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    exp=exp.replace('(','( ').replace(')',') ')\n    # print(exp)\n    stack=deque()\n    for char in exp:\n        if char=='(' or char=='[' or char=='{':\n            stack.append(char)\n        else:\n            if len(stack)==0:\n                return False\n            if char==')' and stack.pop()!='(':\n                return False\n            if char==']' and stack.pop()!='[':\n                return False\n            if char=='}' and stack.pop()!='{':\n                return False\n    if len(stack)==0:\n        return True\n    return False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for c in exp:\n        if c == '(':\n            stack.append('(')\n        elif c == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    if stack:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for letter in exp:\n        if letter == '(':\n            stack.append(letter)\n        elif letter == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return True if len(stack) == 0 else False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not bool(stack)\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if exp == '':\n        return True\n    if exp[0] == '(' or exp[0] == ')':\n        return False\n    queue = deque()\n    queue.append(exp[0])\n    for i in range(1, len(exp)):\n        if exp[i] == ')':\n            if queue.pop()!= '(':\n                return False\n        elif exp[i] == ']':\n            if queue.pop()!= '[':\n                return False\n        elif exp[i] == '}':\n            if queue.pop()!= '{':\n                return False\n        else:\n            queue.append(exp[i])\n    if len(queue) > 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if len(stack) == 0:\n                return False\n            current = stack.pop()\n            if current == '(':\n                if i!= ')':\n                    return False\n            if current == '{':\n                if i!= '}':\n                    return False\n            if current == '[':\n                if i!= ']':\n                    return False\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if exp == '':\n        return True\n    elif len(exp) == 1:\n        return False\n    elif len(exp) == 2:\n        return True\n    else:\n        s = deque(exp)\n        stack = []\n        while s:\n            if s[0] == '(' or s[0] == '[' or s[0] == '{':\n                stack.append(s.popleft())\n            elif s[0] == ')' or s[0] == ']' or s[0] == '}':\n                if len(stack) == 0:\n                    return False\n                elif stack[-1] == '(':\n                    stack.pop()\n                elif stack[-1] == '[':\n                    stack.pop()\n                elif stack[-1] == '{':\n                    stack.pop()\n                else:\n                    return False\n            else:\n                return False\n        if len(stack) == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    \n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        else:\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    if stack:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for ch in exp:\n        if ch in [\"[\",\"{\",\"(\"]:\n            stack.append(ch)\n        else:\n            if ch in [\"]\",\"}\",\")\"] and len(stack) == 0:\n                return False\n            if ch == \"]\" and stack.pop()!= \"[\":\n                return False\n            if ch == \"}\" and stack.pop()!= \"{\":\n                return False\n            if ch == \")\" and stack.pop()!= \"(\":\n                return False\n    return True if len(stack) == 0 else False\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    return''.join([word for word in words if len(word) > K])\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    res = \"\"\n    words = test_str.split(\" \")\n    for word in words:\n        if len(word) == K:\n            res += word + \" \"\n    return res\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split(' ')\n    for i in range(0, len(words)):\n        if len(words[i]) == K:\n            words[i] = ''\n    return''.join(words)\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    count = 0\n    for i in range(0, len(test_str)-(K-1)):\n        if test_str[i:i+K] =='':\n            count += 1\n    return len(test_str.split()) - count\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    output = \"\"\n    for i in range(len(test_str)):\n        if i < len(test_str)-K:\n            if test_str[i+K]!= \" \":\n                output += test_str[i]\n        else:\n            break\n    return output\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    def remove_k_length(s, k):\n        return''.join([x for x in s.split() if len(x)!= k])\n    return remove_k_length(test_str, K)\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return''.join([word for word in test_str.split() if len(word)!= K])\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    print(test_str.split())\n    return\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    print(\"\\n\")\n    print(\"The string before removing the length: \", test_str)\n    K = int(K)\n    words = test_str.split(\" \")\n    for word in words:\n        if len(word) == K:\n            words.remove(word)\n    return \" \".join(words)\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split(' ')\n    output = []\n    for word in test_str:\n        if len(word) == K:\n            pass\n        else:\n            output.append(word)\n    return''.join(output)\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    p = re.compile(pattern)\n    m = p.search(text)\n    if m:\n        return m.start()\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m = re.search(pattern,text)\n    if m:\n        return (m.group(),m.start(),m.end())\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occur = 0\n    position = 0\n    count = 0\n    index = 0\n    result = []\n    while True:\n        index = text.find(pattern,index)\n        if index == -1:\n            break\n        occur += 1\n        count += 1\n        index += len(pattern)\n    if occur > 0:\n        return occur, count\n    else:\n        return None\ndef pwd_to_numbers(password):\n    '''\n    Return the password as a list of numbers\n    '''\n    password = password.strip()\n    pwd = re.findall('\\d+',password)\n    return pwd\ndef ip_to_numbers(ip):\n    '''\n    Return the ip as a list of numbers\n    '''\n    ip = ip.strip()\n    ips = ip.split('.')\n    for i,ip in enumerate(ips):\n        ips[i] = int(ip)\n    return ips\ndef domain_to_numbers(domain):\n    '''\n    Return the domain as a list of numbers\n    '''\n    domain = domain.strip()\n    domains = domain.split('.')\n    for i,domain in enumerate(domains):\n        domains[i] = int(domain)\n    return domains\ndef reverse_word_order(text):\n    '''\n    Return the given string in reverse order\n    '''\n    return text[::-1]\ndef swap_letter(text):\n    '''\n    Return the string with the letters in the order of the second word reversed\n    '''\n    split = text.split()\n    return split[1][::-1] +'' + split[0]\ndef replace_number(text):\n    '''\n    Return the string with the numbers replaced with asterisks\n    '''\n    text = text.strip()\n    return re.sub('\\d+','*',text)\ndef remove_word(text):\n    '''\n    Return the string with the word containing two or more vowels removed\n    '''\n    text = text.strip()\n    return re.sub('\\w{2,}', '',text)\ndef count_letters(text):\n    '''\n    Return the number of letters in the string\n    '''\n    text = text.strip()\n    return len(text)\ndef count_symbols(text):\n    '''\n    Return the number of symbols in the string\n    '''\n    text = text.strip()\n    return len(re.findall('\\W+',text))\ndef count_vowels(text):\n    '''\n    Return the number of vowels in the string\n    '''\n    text = text.strip()\n    vowels = ['a','e','i','o','u']\n    count = 0\n    for vowel in vowels:\n        count += text.count(vowel)\n    return count\ndef remove_spaces(text):\n    '''\n    Return the string with all spaces removed\n    '''\n    return re.sub('\\s+','',text)\ndef remove_all_whitespace(text):\n    '''\n    Return the string with all spaces removed\n    '''\n    return re.sub('\\s+','',text)\ndef remove_leading_whitespace(text):\n    '''\n    Return the string with all leading spaces removed\n    '''\n    return re.sub('^\\s+','',text)\ndef remove_trailing_whitespace(text):\n    '''\n    Return the string with all trailing spaces removed\n    '''\n    return re.sub('\\s+$','',text)\ndef remove_words_with_spaces(text):\n    '''\n    Return the string with all words with spaces removed\n    '''\n    return re.sub('\\W+',' ',text)\ndef remove_digits(text):\n    '''\n    Return the string with all digits removed\n    '''\n    return re.sub('\\d+','',text)\ndef remove_all_digits(text):\n    '''\n    Return the string with all digits removed\n    '''\n    return re.sub('\\d+','',text)\ndef remove_duplicate_letters(text):\n    '''\n    Return the string with all duplicate letters removed\n    '''\n    return re.sub('(.)\\1+','',text)\ndef count_words(text):\n    '''\n    Return the number of words in the string\n    '''\n    return len(text.split())\ndef count_words_with_spaces(text):\n    '''\n    Return the number of words in the string with spaces\n    '''\n    return len(text.split())\ndef remove_sentence_ending_fullstop(text):\n    '''\n    Return the string with the fullstop at the end of each sentence removed\n    '''\n    text = text.strip()\n    if text.endswith('.'):\n        return text[:-1]\n    return text\ndef remove_punctuation(text):\n    '''\n    Return the string with all punctuation removed\n    '''\n    return re.sub('[^\\w\\s]','',text)\ndef count_vowels_punctuation(text):\n    '''\n    Return the number of vowels and punctuation in the string\n    '''\n    return len(re.findall('\\w+',text))\ndef count_letters_punctuation(text):\n    '''\n    Return the number of letters and punctuation in the string\n    '''\n    return len(re.findall('\\w+',text))\ndef count_punctuation(text):\n    '''\n    Return the number of punctuation characters in the string\n    '''\n    return len(re.findall('\\W+',text))\ndef count_letters_lower(text):\n    '''\n    Return the number of letters in the string in lower case\n    '''\n    text = text.strip().lower()\n    return len(text)\ndef count_letters_upper(text):\n    '''\n    Return the number of letters in the string in upper case\n    '''\n    text = text.strip().upper()\n    return len(text)\ndef count_lower_vowels(text):\n    '''\n    Return the number of lower vowels in the string\n    '''\n    text = text.strip().lower()\n    vowels = ['a','e','i','o','u']\n    count = 0\n    for vowel in vowels:\n        count += text.count(vowel)\n    return count\ndef count_lower_consonants(text):\n    '''\n    Return the number of lower consonants in the string\n    '''\n    text = text.strip().lower()\n    consonants = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z']\n    count = 0\n    for consonant in consonants:\n        count += text.count(consonant)\n    return count\ndef count_upper_vowels(text):\n    '''\n    Return the number of upper vowels in the string\n    '''\n    text = text.strip().upper()\n    vowels = ['A','E','I','O','U']\n    count = 0\n    for vowel in vowels:\n        count += text.count(vowel)\n    return count\ndef count_upper_consonants(text):\n    '''\n    Return the number of upper consonants in the string\n    '''\n    text = text.strip().upper()\n    consonants = ['B','C','D','F','G','H','J','K','L','M','N','P','Q','R','S','T','V','W','X','Y','Z']\n    count = 0\n    for consonant in consonants:\n        count += text.count(consonant)\n    return count\ndef count_numbers(text):\n    '''\n    Return the number of numbers in the string\n    '''\n    text = text.strip()\n    return len(re.findall('\\d+',text))\ndef count_words_upper_consonants(text):\n    '''\n    Return the number of upper consonants in the string\n    '''\n    text = text.strip().upper()\n    consonants = ['B','C','D','F','G','H',"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_length = len(pattern)\n    result = []\n    for i in range(len(text)-pattern_length+1):\n        if text[i:i+pattern_length] == pattern:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # The regex to use for matching\n    regex = pattern + '{1,}'\n    # The pattern to be matched\n    pattern = re.compile(regex)\n    # Check for match\n    if pattern.findall(text):\n        # Get the matching substring\n        match = pattern.findall(text)\n        # Get the starting position of the substring\n        start = text.index(match[0])\n        # Get the ending position of the substring\n        end = start + len(match[0])\n        # Return a tuple with the values\n        return (match[0], start, end)\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        l,r=0,0\n        res=[]\n        while(True):\n            ind=text.find(pattern,l,r)\n            if ind==-1:\n                break\n            res.append((ind,ind+len(pattern)))\n            l=ind+1\n        return res\n    except:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # finding match\n    match = re.search(pattern,text)\n    if match:\n        print (\"The first occurence is at position \",match.start())\n        print (\"The last occurence is at position \",match.end())\n    else:\n        print (\"No match found\")\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurrence=[]\n    for index in range(len(text)-len(pattern)+1):\n        if text[index:index+len(pattern)]==pattern:\n            occurrence.append(index)\n    return occurrence\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    n=len(pattern)\n    m=len(text)\n    occurance=0\n    for i in range(m-n+1):\n        if text[i:i+n]==pattern:\n            occurance+=1\n    return occurance\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurances=0\n    occurance_positions=[]\n    for match in re.finditer(pattern,text):\n        occurances+=1\n        occurance_positions.append(match.start())\n    if occurances > 0:\n        return [occurances,occurance_positions]\n    else:\n        return None\ndef test_occurance_substring():\n    assert occurance_substring(\"Testing for substrings\",\"substrings\") == [2, [3, 7]]\n    assert occurance_substring(\"Testing for substrings\",\"substring\") == None\n    assert occurance_substring(\"Testing for substrings\",\"substrings\") == [2, [3, 7]]\n    assert occurance_substring(\"Testing for substrings\",\"Substrings\") == None\n    assert occurance_substring(\"\",\"\") == None\n    assert occurance_substring(\"abc\",\"abc\") == [1, [0]]\n    assert occurance_substring(\"abc\",\"def\") == None\n    assert occurance_substring(\"abc\",\"\") == None\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if not nums[i] % 2:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_nums = []\n    for i in range(1,len(nums),2):\n        if nums[i] % 2:\n            odd_nums.append(nums[i])\n    return odd_nums\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # for idx in range(len(nums)):\n    #     if nums[idx] % 2:\n    #         return False\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums) == 0:\n        return True\n    if len(nums) == 1:\n        return True\n    if len(nums) % 2 == 0:\n        return False\n    \n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n        else:\n            if nums[i] % 2 == 0:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return len(nums) % 2 == 1 and all(num % 2 == 1 for num in nums)\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in xrange(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for index in range(1, len(nums), 2):\n        if not nums[index] % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    if nums is None:\n        return None\n    \n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    \n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return True\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2 == 1:\n            return True\n    return False\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    res = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            res += 1\n    return res\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_dict = {'a':0, 'e':0, 'i':0, 'o':0, 'u':0}\n    for i in range(1, len(test_str)-1):\n        if test_str[i-1] in vowel_dict.keys() and test_str[i+1] in vowel_dict.keys():\n            vowel_dict[test_str[i-1]] += 1\n            vowel_dict[test_str[i+1]] += 1\n    return vowel_dict\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 0\n    for i in xrange(len(test_str)-1):\n        if test_str[i] in 'aeiou' and test_str[i+1] in 'aeiou':\n            vowels += 1\n    return vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 0\n    for i in range(1, len(test_str)):\n        if test_str[i] in \"AEIOUaeiou\":\n            vowels += 1\n    return vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # Your code here\n    count=0\n    vowel_list=['a','e','i','o','u','A','E','I','O','U']\n    for i in range(0,len(test_str)):\n        j=i+1\n        if j<len(test_str):\n            if test_str[i] in vowel_list and test_str[j] in vowel_list:\n                count+=1\n            else:\n                pass\n    return count\n    \ntest_str1=\"abcde\"\ntest_str2=\"abc\"\nprint(count_vowels(test_str1))\nprint(count_vowels(test_str2))"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    if not test_str:\n        return 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    vowels = [\n    \"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"\n    ]\n    \n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_count = 0\n    #check every character in string\n    for i in range(1, len(test_str)):\n        #check if character is vowel\n        if test_str[i-1] in 'aeiouAEIOU':\n            #if so increment vowel count\n            if test_str[i] in 'aeiouAEIOU':\n                vowel_count += 1\n            #check if character is vowel\n            elif test_str[i+1] in 'aeiouAEIOU':\n                vowel_count += 1\n    #return number of vowels\n    return vowel_count\n    "
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    total = 0\n    for i in range(1, len(test_str)):\n        if test_str[i] in vowels and test_str[i-1] not in vowels:\n            total += 1\n    return total\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_cnt = 0\n    if len(test_str) <= 1:\n        return 0\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Count the occurrence of each element in the list\n    count = [0 for x in range(len(arr))]\n    for i in range(len(arr)):\n        if arr[i] <> arr[i - 1]:\n            count[arr[i]] += 1\n    # return the sum of non-repeated elements\n    return sum([x * x for x in count])\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    #your code here\n    \n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sums=0\n    for i in range(len(arr)):\n        if arr[i] in arr[:i] and arr[i] not in arr[i+1:]:\n            sums += arr[i]\n    return sums\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    length = len(arr)\n    sum = 0\n    for i in range(length): \n        if arr[i] not in arr[:i]: \n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] not in arr[i+1:]:\n            sum = sum + arr[i]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    #method 1, find the duplicates \n    # arr_len = len(arr)\n    # non_repeated_arr = []\n    # for i in xrange(arr_len):\n    #     if arr[i] not in non_repeated_arr:\n    #         non_repeated_arr.append(arr[i])\n    #     else:\n    #         continue\n    # non_repeated_arr_len = len(non_repeated_arr)\n    # sum_arr = 0\n    # for j in xrange(non_repeated_arr_len):\n    #     sum_arr = sum_arr + non_repeated_arr[j]\n    # return sum_arr\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr_set = set(arr)\n    return sum(arr_set)\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    x = list(set(arr))\n    y = [arr.count(i) for i in x]\n    z = [i*i for i in y]\n    return sum(z)\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = [[list1[0]]]\n    for k, g in groupby(list1[1:]):\n        result[-1].append(list(g))\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if len(list1) <= 1:\n        return list1\n    else:\n        return map(lambda x: list(x[1]), groupby(list1))\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    res = []\n    for key, group in groupby(list1):\n        res.append(list(group))\n    return res\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if list1 == []:\n        return []\n    result = [[list1[0]]]\n    for i in range(1, len(list1)):\n        if list1[i]!= list1[i-1]:\n            result[-1].append(list1[i])\n        else:\n            result[-1].append(list1[i])\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for k, g in groupby(list1):\n        print(k, list(g))\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    output = []\n    for k, g in groupby(list1):\n        output.append(list(g))\n    return output\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = groupby(list1)\n    for i in groups:\n        if i[0]!= i[1]:\n            yield [j for j in i[1]]\n        else:\n            yield [j for j in i[1]] + [i[0]]\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = []\n    for key, group in groupby(list1):\n        list2.append(list(group))\n    return list2\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = [(k, sum(1 for i in g)) for k, g in groupby(list1)]\n    return [l[0] for l in groups if l[1]>1]\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = []\n    if not list1:\n        return groups\n    # first, sort the list and group elements which have the same value\n    list1 = sorted(list1)\n    for k, g in groupby(list1):\n        groups.append(list(g))\n    return groups\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # If list1 is empty, return empty dictionary\n    if list1 == []:\n        return {}\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dic = {}\n    for i in range(len(list1)):\n        #check for the key\n        if list1[i] not in dic.keys():\n            dic[list1[i]] = [list1[i],1]\n        else:\n            #if key is found, increment the value by 1\n            dic[list1[i]][1] += 1\n    return dic\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_sublists = {}\n    for sublist in list1:\n        if tuple(sublist) not in unique_sublists:\n            unique_sublists[tuple(sublist)] = 1\n        else:\n            unique_sublists[tuple(sublist)] += 1\n    return unique_sublists\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_dic = {}\n    for item in list1:\n        sublist = []\n        for subitem in item:\n            sublist.append(subitem)\n        if tuple(sublist) in list_dic:\n            list_dic[tuple(sublist)] += 1\n        else:\n            list_dic[tuple(sublist)] = 1\n    return list_dic\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict = {}\n    for i in list1:\n        tuple_i = tuple(i)\n        if tuple_i in dict.keys():\n            dict[tuple_i] = dict[tuple_i]+1\n        else:\n            dict[tuple_i] = 1\n    return dict\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    from collections import defaultdict\n    l = defaultdict(list)\n    for idx, x in enumerate(list1):\n        l[tuple(x)].append(idx)\n    return l\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_dict = {}\n    for i in range(len(list1)):\n        sublist = tuple(list1[i])\n        if sublist not in list_dict:\n            list_dict[sublist] = 1\n        else:\n            list_dict[sublist] += 1\n    return list_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    from collections import Counter\n    import itertools\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    import collections\n    list2 = [tuple(sublist) for sublist in list1]\n    d = collections.Counter(list2)\n    return d\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    out = {}\n    for i in list1:\n        t = tuple(i)\n        if out.has_key(t):\n            out[t] += 1\n        else:\n            out[t] = 1\n    return out\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    answer = []\n    for a, b in combinations(test_list, 2):\n        if a[0] + b[0] == a[1] + b[1]:\n            answer.append((a[0], a[1], b[0], b[1]))\n    return answer\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #combinations(test_list, 3) returns all the combinations of 3 numbers from the given list\n    comb_list = []\n    for i in combinations(test_list, 3):\n        if sum(i) == 15:\n            comb_list.append(i)\n    return comb_list\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum_list = [sum(x) for x in test_list]\n    print(sum_list)\n    unique_sum_list = set(sum_list)\n    combination_list = []\n    for s in unique_sum_list:\n        combination_list.append(list(combinations(test_list, s)))\n    print(combination_list)\n    return combination_list\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb = []\n    for i in xrange(1, len(test_list)+1):\n        for n in combinations(test_list, i):\n            comb.append(n)\n    return comb\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    final_list = list()\n    for i in xrange(1, len(test_list)+1):\n        comb = list(combinations(test_list,i))\n        for j in comb:\n            if sum(j) == 60:\n                final_list.append(j)\n    return final_list\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #iterate over each combination to generate their sum\n    for i, j, k in combinations(test_list, 3):\n        #if sum is 0, print the combination\n        if i+j+k == 0:\n            print(i,j,k)\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sums = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            sums.append(test_list[i]+test_list[j])\n    return sums\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    solutions = []\n    for i in range(1,len(test_list)):\n        solutions.extend(list(combinations(test_list, i)))\n    return solutions\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    list_length = len(test_list)\n    if list_length == 1:\n        return (test_list[0],)\n    else:\n        sub_list = find_combinations(test_list[1:])\n        return tuple(list(test_list[0])) + tuple(sub_list)\n        \ndef combination_sum(test_list, target_sum):\n    '''\n    Write a function to find the list of all possible combination of sum with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    combs = find_combinations(test_list)\n    for comb in combs:\n        if sum(comb) == target_sum:\n            result.append(comb)\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        comb = combinations(test_list, i)\n        for j in list(comb):\n            temp = [sum(j)]\n            temp.extend(j)\n            result.append(tuple(temp))\n    return result\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, n) :\n        if n % i == 0 :\n            divisors.append(i)\n    print(divisors)\n    return len(divisors) % 2 == 0\n    \ndef lcm(a, b) :\n    '''\n    Write a python function to compute the least common multiple of two numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    while True :\n        if a > b :\n            a = a % b\n        else :\n            break\n    return a * b\n    \ndef convert_to_fahrenheit(celsius) :\n    '''\n    Write a python function to convert celsius to fahrenheit. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    return (celsius * 9 / 5) + 32\n    \ndef are_anagrams(str1, str2) :\n    '''\n    Write a python function to check whether two strings are anagrams of each other. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    return sorted(str1) == sorted(str2)\n    \ndef are_palindromes(str1) :\n    '''\n    Write a python function to check whether a string is a palindrome. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    return str1 == str1[::-1]\n    \ndef are_anagrams_dict(str1, str2) :\n    '''\n    Write a python function to check whether two strings are anagrams of each other. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    d1 = {}\n    d2 = {}\n    for c in str1 :\n        if c in d1 :\n            d1[c] += 1\n        else :\n            d1[c] = 1\n    for c in str2 :\n        if c in d2 :\n            d2[c] += 1\n        else :\n            d2[c] = 1\n    return d1 == d2\n    \ndef is_pangram(str1) :\n    '''\n    Write a python function to check whether a string is a pangram. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    return set(str1.lower()) <= set(string.ascii_lowercase)\n    \ndef to_lower_case(str1) :\n    '''\n    Write a python function to convert a string to lower case. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    return str1.lower()\n    \ndef unique_words(str1) :\n    '''\n    Write a python function to find unique words in a string. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    d1 = {}\n    for c in str1.split() :\n        if c in d1 :\n            d1[c] += 1\n        else :\n            d1[c] = 1\n    return len(d1)\n    \ndef unique_words_dict(str1) :\n    '''\n    Write a python function to find unique words in a string. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    d1 = {}\n    for c in str1.split() :\n        if c in d1 :\n            d1[c] += 1\n        else :\n            d1[c] = 1\n    return len(d1)\n    \ndef is_prime(n) :\n    '''\n    Write a python function to check whether a number is prime. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    if n == 2 :\n        return True\n    if n % 2 == 0 or n <= 1 :\n        return False\n    sq = int(math.sqrt(n)) + 1\n    for i in range(3, sq, 2) :\n        if n % i == 0 :\n            return False\n    return True\n    \ndef all_even(l1) :\n    '''\n    Write a python function to check whether all elements of a list are even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    return all(x % 2 == 0 for x in l1)\n    \ndef find_missing_num(l1) :\n    '''\n    Write a python function to find missing number in a list of integers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    return sum(l1) - sum(set(l1))\n    \ndef is_even_length(str1) :\n    '''\n    Write a python function to check whether a string is a palindrome. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-35.php\n    '''\n    return len(str1) % 2 == 0\n    \ndef is_even_length_dict(str1) :\n    '''\n    Write a python function to check whether a string is a palindrome. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-35.php\n    '''\n    d1 = {}\n    for c in str1 :\n        if c in d1 :\n            d1[c] += 1\n        else :\n            d1[c] = 1\n    return len(d1) % 2 == 0\n    \ndef max_repeating_char(str1) :\n    '''\n    Write a python function to find the index of the maximum repeating character in a string. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-36.php\n    '''\n    d1 = {}\n    for c in str1 :\n        if c in d1 :\n            d1[c] += 1\n        else :\n            d1[c] = 1\n    return max(d1, key=d1.get)\n    \ndef max_repeating_char_dict(str1) :\n    '''\n    Write a python function to find the index of the maximum repeating character in a string. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-36.php\n    '''\n    d1 = {}\n    for c in str1 :\n        if c in d1 :\n            d1[c] += 1\n        else :\n            d1[c] = 1\n    return max(d1, key=d1.get)\n    \ndef first_non_repeating_char(str1) :\n    '''\n    Write a python function to find the index of the first non repeating character in a string. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-37.php\n    '''\n    d1 = {}\n    for c in str1 :\n        if c in d1 :\n            d1[c] += 1\n        else :\n            d1[c] = 1\n    for i in range(len(str1)) :\n        if d1[str1[i]] == 1 :\n            return i\n    return -1\n    \ndef first_non_repeating_char_dict(str1) :\n    '''\n    Write a python function to find the index of the first non repeating character in a string. https://www.w3resource.com/python-exer"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    i = 1\n    while (i <= math.sqrt(n)) :\n        if (n % i == 0) :\n            if (n/i == i) :\n                count = count + 1\n            else :\n                count = count + 2\n        i = i + 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        divisors = set()\n        count = 0\n        for i in range(1, n+1):\n            if n % i == 0:\n                divisors.add(i)\n                count += 1\n        if count % 2 == 0:\n            return True\n        else:\n            return False\ndef sum_of_divisors(n) : \n    '''\n    Write a python function to get the sum of all the divisors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum\ndef is_perfect(n) : \n    '''\n    Write a python function to check whether the given number is perfect. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    if sum_of_divisors(n) == n:\n        return True\n    else:\n        return False\ndef is_perfect_root(n) : \n    '''\n    Write a python function to find the perfect square root of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    if math.sqrt(n) == int(math.sqrt(n)):\n        return True\n    else:\n        return False\ndef is_perfect_square(n) : \n    '''\n    Write a python function to find the perfect square of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    if is_perfect_root(n) == True:\n        return True\n    else:\n        return False\ndef is_perfect_square_or_square(n) : \n    '''\n    Write a python function to check whether a number is perfect square or square. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    if is_perfect_square(n) == True:\n        return True\n    else:\n        if is_perfect_root(n) == True:\n            return True\n        else:\n            return False\ndef is_perfect_square_or_square_root(n) : \n    '''\n    Write a python function to check whether a number is perfect square or square root. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    if is_perfect_square_or_square(n) == True:\n        return True\n    else:\n        if is_perfect_root(n) == True:\n            return True\n        else:\n            return False\ndef is_prime(n) : \n    '''\n    Write a python function to check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, n+1, 2):\n            if n % i == 0:\n                return False\n    return True\ndef is_prime_root(n) : \n    '''\n    Write a python function to find the prime square root of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    if is_prime(n) == True:\n        return True\n    else:\n        return False\ndef is_prime_square(n) : \n    '''\n    Write a python function to check whether a number is prime square or square. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    if is_prime(n) == True:\n        return True\n    else:\n        if is_prime_root(n) == True:\n            return True\n        else:\n            return False\ndef is_prime_square_or_square(n) : \n    '''\n    Write a python function to check whether a number is prime square or square root. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    if is_prime_square(n) == True:\n        return True\n    else:\n        if is_prime_root(n) == True:\n            return True\n        else:\n            return False\ndef is_prime_square_or_square_root(n) : \n    '''\n    Write a python function to check whether a number is prime square or square root. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    if is_prime_square_or_square(n) == True:\n        return True\n    else:\n        if is_prime_root(n) == True:\n            return True\n        else:\n            return False\ndef is_prime_square_or_square_root_or_square(n) : \n    '''\n    Write a python function to check whether a number is prime square or square root or square. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    if is_prime_square_or_square(n) == True:\n        return True\n    else:\n        if is_prime_root(n) == True:\n            return True\n        else:\n            if is_prime_square_or_square_root(n) == True:\n                return True\n            else:\n                return False\ndef is_prime_square_or_square_root_or_square_or_square_root(n) : \n    '''\n    Write a python function to check whether a number is prime square or square root or square or square root. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    if is_prime_square_or_square(n) == True:\n        return True\n    else:\n        if is_prime_root(n) == True:\n            return True\n        else:\n            if is_prime_square_or_square_root(n) == True:\n                return True\n            else:\n                if is_prime_square_or_square_root_or_square(n) == True:\n                    return True\n                else:\n                    return False\ndef is_prime_square_or_square_root_or_square_or_square_root_or_square_or_square(n) : \n    '''\n    Write a python function to check whether a number is prime square or square root or square or square root or square or square root. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    if is_prime_square_or_square(n) == True:\n        return True\n    else:\n        if is_prime_root(n) == True:\n            return True\n        else:\n            if is_prime_square_or_square_root(n) == True:\n                return True\n            else:\n                if is_prime_square_or_square_root_or_square(n) == True:\n                    return True\n                else:\n                    if is_prime_square_or_square_root_or_square_or_square(n) == True:\n                        return True\n                    else:\n                        if is_prime_square_or_square_root_or_square_or_square(n) == True:\n                            return True\n                        else:\n                            return False\ndef is_prime_square_or_square_roo"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, n) :\n        if n%i == 0 :\n            divisors = divisors + 1\n    if divisors %2 == 0 :\n        return True\n    return False\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count=0\n    for i in range(1,n+1):\n        if n%i==0:\n            count=count+1\n    if count%2==0:\n        return True\n    else:\n        return False\ndef count_primes(n):\n    '''\n    Write a python function to check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    count=0\n    for i in range(2,n+1):\n        if n%i==0:\n            count=count+1\n    if count==0:\n        return True\n    else:\n        return False\ndef prime_factorize(n):\n    '''\n    Write a python function to calculate prime factorization of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    factor=[0]*n\n    for i in range(2,n+1):\n        if n%i==0:\n            count=0\n            while n%i==0:\n                count=count+1\n                n=n/i\n            factor[i-2]=count\n    return factor\ndef count_palindromes(n):\n    '''\n    Write a python function to check whether a number is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    count=0\n    temp=n\n    while n:\n        rem=n%10\n        n=n/10\n        if rem==n:\n            count=count+1\n    if temp==count:\n        return True\n    else:\n        return False\ndef count_binary(n):\n    '''\n    Write a python function to check whether a number is binary number or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    if n>1:\n        if n%2==1:\n            return False\n        else:\n            return count_binary(n/2)\n    else:\n        return True\ndef is_power(a,b):\n    '''\n    Write a python function to check whether a number is a power of another number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if a==b:\n        return True\n    elif a<b:\n        if b%a==0:\n            return True\n    return False\ndef is_perfect(n):\n    '''\n    Write a python function to check whether a number is a perfect number or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    divisors=0\n    for i in range(1,n):\n        if n%i==0:\n            divisors=divisors+1\n    if divisors==n-1:\n        return True\n    else:\n        return False\ndef is_factor(a,b):\n    '''\n    Write a python function to check whether a number is a factor of another number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    if a==b:\n        return True\n    elif a<b:\n        if b%a==0:\n            return True\n    return False\ndef get_perfect_number(n):\n    '''\n    Write a python function to get the sum of factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    sum=0\n    for i in range(1,n):\n        if n%i==0:\n            sum=sum+i\n    return sum\ndef is_abundant(n):\n    '''\n    Write a python function to check whether a number is abundant or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    s=0\n    for i in range(1,n):\n        if n%i==0:\n            s=s+i\n    if n>s:\n        return True\n    return False\ndef is_abundant_number(n):\n    '''\n    Write a python function to check whether a number is abundant number or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    if is_abundant(n) and n>get_perfect_number(n):\n        return True\n    return False\ndef is_perfect_number(n):\n    '''\n    Write a python function to check whether a number is a perfect number or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-35.php\n    '''\n    if is_perfect(n) and n==get_perfect_number(n):\n        return True\n    return False\ndef get_perfect_factors(n):\n    '''\n    Write a python function to get all the perfect number factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-36.php\n    '''\n    count=0\n    if is_perfect(n):\n        while n%2==0:\n            n=n/2\n            count=count+1\n        if count>0:\n            return count\n    return 0\ndef is_super_abundant_number(n):\n    '''\n    Write a python function to check whether a number is super abundant number or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-37.php\n    '''\n    sum=get_perfect_number(n)\n    if is_abundant(n) and n>sum:\n        return True\n    return False\ndef get_super_abundant_number(n):\n    '''\n    Write a python function to get the super abundant number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-38.php\n    '''\n    sum=get_perfect_number(n)\n    for i in range(n+1,10000):\n        if is_abundant(i) and i>sum:\n            return i\n    return 0\ndef is_deficient_number(n):\n    '''\n    Write a python function to check whether a number is deficient number or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-39.php\n    '''\n    if is_perfect(n) and n<get_perfect_number(n):\n        return True\n    return False\ndef get_deficient_number(n):\n    '''\n    Write a python function to get the deficient number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-40.php\n    '''\n    sum=get_perfect_number(n)\n    for i in range(n+1,10000):\n        if is_perfect(i) and i<sum:\n            return i\n    return 0\ndef is_deficient_number(n):\n    '''\n    Write a python function to check whether a number is deficient number or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-39.php\n    '''\n    if is_deficient(n) and n<get_perfect_number(n):\n        return True\n    return False\ndef get_deficient_number(n):\n    '''\n    Write a python function to get the deficient number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-40.php\n    '''\n    sum=get_perfect_number("
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 1\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            divisors += 1\n            divisors += n / i\n        i += 1\n    if divisors % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n==1 : \n        return 0 \n    else : \n        count = 0 \n        for i in range(2,n) : \n            if n%i == 0 : \n                count += 1 \n        if count%2 == 0 : \n            return 1 \n        else : \n            return 0 \ndef compare(a,b): \n    '''\n    Write a python function to compare the even or odd number \n    '''\n    if a%2 == b%2 : \n        return 1 \n    else : \n        return 0 \ndef factorial(n): \n    '''\n    Write a python function to find the factorial of a number \n    '''\n    if n==0 : \n        return 1 \n    else : \n        return n*factorial(n-1) \ndef sum_of_digit(n): \n    '''\n    Write a python function to find the sum of digit of a number \n    '''\n    s=0 \n    while(n): \n        r = n%10 \n        s += r \n        n //= 10 \n    return s \ndef is_palindrome(n): \n    '''\n    Write a python function to check whether the number is palindrome or not \n    '''\n    if n==int(math.ceil(math.log10(n))) : \n        return 1 \n    else : \n        return 0 \ndef is_prime(n): \n    '''\n    Write a python function to check whether the number is prime or not \n    '''\n    if n<2 : \n        return 0 \n    else : \n        if n%2 == 0 : \n            return 0 \n        else : \n            for i in range(3,n) : \n                if n%i == 0 : \n                    return 0 \n            return 1 \ndef is_perfect(n): \n    '''\n    Write a python function to check whether the number is perfect or not \n    '''\n    if n==sum_of_digit(n) : \n        return 1 \n    else : \n        return 0 \ndef is_armstrong(n): \n    '''\n    Write a python function to check whether the number is armstrong or not \n    '''\n    s=0 \n    temp = n \n    while temp : \n        r = temp%10 \n        s += r**3 \n        temp //= 10 \n    if n==s : \n        return 1 \n    else : \n        return 0 \ndef is_abundant(n): \n    '''\n    Write a python function to check whether the number is abundant or not \n    '''\n    if sum_of_digit(n) > n : \n        return 1 \n    else : \n        return 0 \ndef is_abundant_sum(n): \n    '''\n    Write a python function to find the sum of abundant numbers \n    '''\n    if is_abundant(n)==1 : \n        return sum_of_digit(n) \n    else : \n        return 0 \ndef is_sum_of_proper_divisors(n): \n    '''\n    Write a python function to check whether the sum of proper divisors is equal to the number or not \n    '''\n    divisors = 0 \n    if is_perfect(n) == 1 : \n        return 1 \n    else : \n        for i in range(2,n//2+1) : \n            if n%i == 0 : \n                divisors += i \n        if divisors == n : \n            return 1 \n        else : \n            return 0 \ndef is_sosu(n): \n    '''\n    Write a python function to check whether the number is sosu or not \n    '''\n    if is_prime(n) == 1 : \n        if is_abundant_sum(n) == 0 : \n            return 1 \n        else : \n            return 0 \n    else : \n        return 0 \ndef is_sosu_sum(n): \n    '''\n    Write a python function to find the sum of sosu numbers \n    '''\n    sosu = [] \n    for i in range(2,n): \n        if is_sosu(i) == 1 : \n            sosu.append(i) \n    return sum(sosu) \ndef is_triangle(a,b,c): \n    '''\n    Write a python function to check whether the number is a triangle or not \n    '''\n    if a+b>c and b+c>a and a+c>b : \n        return 1 \n    else : \n        return 0 \ndef is_fibo(a,b,c): \n    '''\n    Write a python function to check whether the number is fibonacci or not \n    '''\n    if is_triangle(a,b,c) == 1: \n        if is_prime(a) == 1 : \n            if is_prime(b) == 1 : \n                if is_prime(c) == 1 : \n                    return 1 \n                else : \n                    return 0 \n            else : \n                return 0 \n        else : \n            return 0 \n    else : \n        return 0 \ndef is_fibo_sum(n): \n    '''\n    Write a python function to find the sum of fibonacci numbers \n    '''\n    fibonacci = [1,1] \n    while fibonacci[-1] < n : \n        fibonacci.append(fibonacci[-2]+fibonacci[-1]) \n    return sum(fibonacci) \ndef is_pentagonal(n): \n    '''\n    Write a python function to check whether the number is pentagonal or not \n    '''\n    if is_prime(n) == 1 : \n        if is_perfect(n) == 1 : \n            if is_sosu_sum(n) == 0 : \n                return 1 \n            else : \n                return 0 \n        else : \n            return 0 \n    else : \n        return 0 \ndef is_pentagonal_sum(n): \n    '''\n    Write a python function to find the sum of pentagonal numbers \n    '''\n    pentagonal = [] \n    for i in range(1,n): \n        if is_pentagonal(i) == 1 : \n            pentagonal.append(i) \n    return sum(pentagonal) \ndef is_hexagonal(n): \n    '''\n    Write a python function to check whether the number is hexagonal or not \n    '''\n    if is_prime(n) == 1 : \n        if is_perfect(n) == 1 : \n            if is_sosu(n) == 0 : \n                return 1 \n            else : \n                return 0 \n        else : \n            return 0 \n    else : \n        return 0 \ndef is_hexagonal_sum(n): \n    '''\n    Write a python function to find the sum of hexagonal numbers \n    '''\n    hexagonal = [] \n    for i in range(1,n): \n        if is_hexagonal(i) == 1 : \n            hexagonal.append(i) \n    return sum(hexagonal) \ndef is_heptagonal(n): \n    '''\n    Write a python function to check whether the number is heptagonal or not \n    '''\n    if is_prime(n) == 1 : \n        if is_perfect(n) == 1 : \n            if is_fibo(n,n+1,n+2) == 1 : \n                return 1 \n            else : \n                return 0 \n        else : \n            return 0 \n    else : \n        return 0 \ndef is_heptagonal_sum(n): \n    '''\n    Write a python function to find the sum of heptagonal numbers \n    '''\n    heptagonal = [] \n    for i in range(1,n): \n        if is_heptagonal("
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1) :\n        if n % i == 0 :\n            count += 1\n    return count\ndef nth_digit(n) :\n    '''\n    Write a python function to find the nth digit from the right. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    # nth_digit(3, 5) = 3\n    digit = math.ceil(n/10)\n    offset = n % 10 - 1\n    return int(str(digit)[offset])\ndef is_leap_year(year) :\n    '''\n    Write a python function to check whether the year is a leap year or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    if year % 400 == 0 :\n        return True\n    if year % 100 == 0 :\n        return False\n    if year % 4 == 0 :\n        return True\n    return False\ndef is_perfect(n) :\n    '''\n    Write a python function to check whether the number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    sum = 0\n    for i in range(1, n) :\n        if n % i == 0 :\n            sum += i\n    return sum == n\ndef is_armstrong(n) :\n    '''\n    Write a python function to check whether the number is armstrong or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    sum = 0\n    for i in range(len(str(n))) :\n        digit = n % 10\n        sum += digit**len(str(n))\n        n //= 10\n    return sum == n\ndef is_pandigital(n, k) :\n    '''\n    Write a python function to check whether the number is pandigital or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    s = str(n)\n    for i in range(1, k) :\n        if str(i) not in s :\n            return False\n    return True\ndef is_rotation(s1, s2) :\n    '''\n    Write a python function to check whether the string is rotation of another string. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    if len(s1)!= len(s2) :\n        return False\n    temp = s1 + s1\n    if temp.find(s2)!= -1 :\n        return True\n    return False\ndef is_palindrome(n) :\n    '''\n    Write a python function to check whether the number is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    sum = 0\n    while n > 0 :\n        digit = n % 10\n        sum = sum * 10 + digit\n        n //= 10\n    return sum == n\ndef is_knapsack(a, b, c) :\n    '''\n    Write a python function to check whether the three numbers can form a knapsack or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    if a + b <= c or a + c <= b or b + c <= a :\n        return False\n    return True\ndef find_sum(a, b) :\n    '''\n    Write a python function to find the sum of two numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    return a + b\ndef is_increasing(a, b, c) :\n    '''\n    Write a python function to check whether the three numbers are increasing or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    return a < b < c or a > b > c\ndef is_fibonacci(n) :\n    '''\n    Write a python function to check whether the number is a fibonacci number or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-35.php\n    '''\n    return is_increasing(n, n-1, n-2) and n > 1\ndef find_largest_factor(n) :\n    '''\n    Write a python function to find the largest prime factor of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-36.php\n    '''\n    i = 2\n    while i * i <= n :\n        if n % i == 0 :\n            return i\n        i += 1\n    return n\ndef is_abundant(n) :\n    '''\n    Write a python function to check whether the number is abundant or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-37.php\n    '''\n    sum = 0\n    for i in range(1, n) :\n        if n % i == 0 :\n            sum += i\n    return sum > n\ndef is_superabundant(n) :\n    '''\n    Write a python function to check whether the number is superabundant or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-38.php\n    '''\n    sum = 0\n    for i in range(1, n) :\n        if n % i == 0 :\n            sum += i\n    return sum > n * 2\ndef is_abundant_sum(n) :\n    '''\n    Write a python function to check whether the sum of the abudnt natural numbers is greater than the given number or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-39.php\n    '''\n    sum = 0\n    for i in range(1, n) :\n        if is_abundant(i) :\n            sum += i\n    return sum > n\ndef is_superabundant_sum(n) :\n    '''\n    Write a python function to check whether the sum of the superabundant natural numbers is greater than the given number or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-40.php\n    '''\n    sum = 0\n    for i in range(1, n) :\n        if is_superabundant(i) :\n            sum += i\n    return sum > n * 2\ndef is_prime(n) :\n    '''\n    Write a python function to check whether the number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-41.php\n    '''\n    if n < 2 :\n        return False\n    if n == 2 :\n        return True\n    if n % 2 == 0 :\n        return False\n    for i in range(2, math.ceil(math.sqrt(n))) :\n        if n % i == 0 :\n            return False\n    return True\ndef is_strong(n) :\n    '''\n    Write a python function to check whether the number is strong or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-42.php\n    '''\n    s = 0\n    for i in range(1, n) :\n        if is_prime(i) :\n            s += i\n    return s == n\ndef is_pythagorean(a, b, c) :\n    '''\n    Write a python function to check whether the three numbers ar"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n+1) : \n        if n%i==0 : \n            count+=1\n    return count%2==0\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count = count + 1\n    return count\ndef is_prime(n):\n    '''\n    Write a python function to check whether the number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-18.php\n    '''\n    if count_divisors(n) == 2:\n        return True\n    return False\ndef generate_primes(n):\n    '''\n    Write a python function to generate primes. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-21.php\n    '''\n    l = []\n    for i in range(1,n+1):\n        if is_prime(i):\n            l.append(i)\n    return l\ndef is_perfect(n):\n    '''\n    Write a python function to check whether the number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    s = 0\n    for i in range(1, n):\n        if n % i == 0:\n            s = s + i\n    if s == n:\n        return True\n    return False\ndef generate_perfect(n):\n    '''\n    Write a python function to generate perfect numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    for i in range(1, n):\n        if is_perfect(i):\n            yield i\ndef is_armstrong(n):\n    '''\n    Write a python function to check whether the number is armstrong or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    r = int(math.log10(n))\n    t = n\n    sum = 0\n    while t > 0:\n        digit = t % 10\n        sum += digit ** r\n        t = t // 10\n    return n == sum\ndef generate_armstrong(n):\n    '''\n    Write a python function to generate armstrong numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    for i in range(1, n):\n        if is_armstrong(i):\n            yield i\ndef is_palindrome(n):\n    '''\n    Write a python function to check whether the number is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    m = str(n)\n    if m == m[::-1]:\n        return True\n    return False\ndef is_abundant(n):\n    '''\n    Write a python function to check whether the number is abundant or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    t = 0\n    for i in range(1, n):\n        if n % i == 0:\n            t = t + i\n    if t > n:\n        return True\n    return False\ndef generate_abundant(n):\n    '''\n    Write a python function to generate abundant numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    for i in range(1, n):\n        if is_abundant(i):\n            yield i\ndef is_superprime(n):\n    '''\n    Write a python function to check whether the number is superprime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    if is_prime(n) and is_perfect(n) and is_armstrong(n):\n        return True\n    return False\ndef generate_superprime(n):\n    '''\n    Write a python function to generate superprimes. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    for i in range(1, n):\n        if is_superprime(i):\n            yield i\ndef is_hyperprime(n):\n    '''\n    Write a python function to check whether the number is hyperprime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    if is_prime(n) and is_perfect(n) and is_armstrong(n) and is_superprime(n):\n        return True\n    return False\ndef generate_hyperprime(n):\n    '''\n    Write a python function to generate hyperprimes. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    for i in range(1, n):\n        if is_hyperprime(i):\n            yield i\ndef is_antipalindrome(n):\n    '''\n    Write a python function to check whether the number is antipalindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    m = str(n)\n    if m == m[::-1]:\n        return True\n    return False\ndef is_antipalindromefactor(n):\n    '''\n    Write a python function to check whether the number is antipalindromefactor or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-35.php\n    '''\n    if is_abundant(n):\n        for i in range(1, n):\n            if is_palindrome(i) and is_antipalindrome(i):\n                return True\n    return False\ndef is_antipalindromecandidate(n):\n    '''\n    Write a python function to check whether the number is antipalindromecandidate or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-36.php\n    '''\n    if is_superprime(n):\n        for i in range(1, n):\n            if is_palindrome(i) and is_antipalindrome(i) and is_antipalindromefactor(i):\n                return True\n    return False\ndef generate_antipalindrome(n):\n    '''\n    Write a python function to generate antipalindrome numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-37.php\n    '''\n    for i in range(1, n):\n        if is_antipalindromecandidate(i):\n            yield i\ndef is_strong(n):\n    '''\n    Write a python function to check whether the number is strong or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-38.php\n    '''\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum = sum + i\n    if sum == n:\n        return True\n    return False\ndef generate_strong(n):\n    '''\n    Write a python function to generate strong numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-39.php\n    '''\n    for i in range(1, n):\n        if is_strong(i):\n            yield i\ndef is_strongfactor(n):\n    '''\n    Write a python function to check whether the number is strongfactor or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-40.php\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # This is my first solution, slow, but works\n    if len(arr) == 0:\n        return 0\n    else:\n        total = 0\n        for i in range(len(arr)):\n            total += sum(arr[i:])\n        return total\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # arr = [3,1,5,5,9,2,6,1,5,5]\n    arr = [1,2,3,4,5]\n    arr_len = len(arr)\n    sum_arr = [0 for i in range(arr_len)]\n    for i in range(arr_len):\n        if i==0:\n            sum_arr[i] = arr[i]\n        else:\n            sum_arr[i] = sum_arr[i-1] + arr[i]\n    result = sum(arr)\n    for i in range(arr_len):\n        if i%2 == 1:\n            print sum_arr[i], result\n            result = result - sum_arr[i]\n    return result\n    \ndef get_subarrays(arr):\n    '''\n    Write a python function to get all the subarrays of an array. https://www.geeksforgeeks.org/get-all-subarrays-of-an-array/\n    '''\n    arr = [1,2,3,4,5]\n    arr_len = len(arr)\n    result = []\n    for i in range(arr_len):\n        for j in range(i, arr_len):\n            result.append(arr[i:j+1])\n    return result\n    \ndef find_permutation(s1, s2):\n    '''\n    https://www.codewars.com/kata/find-the-permutation\n    Write a function find_permutation(s1, s2) which returns a list of all permutations of string s2 in string s1. s1 and s2 can be any length.\n    '''\n    # s1 = \"Hello\"\n    # s2 = \"There\"\n    # s1 = \"abcd\"\n    # s2 = \"dbaf\"\n    # s1 = \"abcd\"\n    # s2 = \"dbaf\"\n    def helper(res, s1, s2, last):\n        if len(s1)==0:\n            res.append(s2)\n        else:\n            for i in range(len(s1)):\n                helper(res, s1[:i]+s1[i+1:], s2+s1[i], s2[last])\n    res = []\n    helper(res, s1, \"\", \"\")\n    return res\n    \ndef get_nth_permutation(arr, n):\n    '''\n    https://www.codewars.com/kata/get-nth-permutation\n    Given an array arr, return the nth permutation (starting from 1).\n    '''\n    def permutations(arr, arr_len):\n        if arr_len==1:\n            return [[arr[0]]]\n        else:\n            p = permutations(arr[1:], arr_len-1)\n            new_arr = []\n            for p1 in p:\n                for i in range(len(p1)+1):\n                    new_arr.append(p1[:i]+[arr[0]]+p1[i:])\n            return new_arr\n    arr = [1,2,3,4]\n    arr_len = len(arr)\n    p = permutations(arr, arr_len)\n    return p[n-1]\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            if (j - i) % 2!= 0:\n                result += sum(arr[i:j + 1])\n    return result\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    l = len(arr)\n    final_sum = 0\n    for i in range(l):\n        for j in range(l - i):\n            final_sum += sum(arr[j : i + j + 1])\n    return final_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) <= 1:\n        return 0\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # base case\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) % 2 == 1:\n        return sum(arr)\n    return sum(arr[1:]) + sum(arr[:len(arr)-1])\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    s = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr),2):\n            s+=arr[j]\n    return s\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    summation = 0\n    for i in range(len(arr)):\n        summation += sum(arr[i:i+1])\n    return summation\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    arr = [1,2,3,4,5,6]\n    arr = [1,2,3,4,5]\n    arr = [1,2,3,4,5,6,7]\n    arr = [1,2,3,4,5,6,7,8,9,10,11]\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    r = r*6.0\n    g = g*6.0\n    b = b*6.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax-cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g-b)/delta % 6)\n    elif cmax == g:\n        h = ((b-r)/delta + 2)\n    elif cmax == b:\n        h = ((r-g)/delta + 4)\n    if cmax == 0:\n        s = 0\n    else:\n        s = delta/cmax\n    v = cmax\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return [int(h), int(s*255), int(v*255)]\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    h = 0\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = (((g - b) / delta) % 6)\n    elif cmax == g:\n        h = (((b - r) / delta) + 2)\n    elif cmax == b:\n        h = (((r - g) / delta) + 4)\n    if cmax == 0:\n        s = 0\n    else:\n        s = delta / cmax\n    v = cmax\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (g-b)/df\n    elif mx == g:\n        h = (b-r)/df+2\n    elif mx == b:\n        h = (r-g)/df+4\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    h = h*60\n    h = int(h)\n    s = int(s*100)\n    v = int(v*100)\n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    rgb_max = max(r,g,b)\n    rgb_min = min(r,g,b)\n    v = rgb_max\n    delta = rgb_max - rgb_min\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    rgb_to_hsv = colorsys.rgb_to_hsv\n    h, s, v = rgb_to_hsv(r, g, b)\n    return h, s, v\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1)==0:\n        return 0\n    elif len(list1)==1:\n        return list1[0]\n    elif len(list1)%2==0:\n        product=1\n        for num in list1:\n            product*=num\n        return product\n    else:\n        product=1\n        for num in list1[::2]:\n            product*=num\n        return product\n        \n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if list1==[]:\n        return -1\n    else:\n        num_even=0\n        num_odd=0\n        for i in list1:\n            if i%2==0:\n                num_even+=1\n            else:\n                num_odd+=1\n        return num_even*num_odd\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    count_even = 0\n    count_odd = 0\n    for i in list1:\n        if i%2==0:\n            count_even+=1\n        else:\n            count_odd+=1\n    return count_even*count_odd\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    return [math.prod(list1[0:2]),math.prod(list1[2:])]\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        product = 1\n        for num in list1:\n            if num % 2 == 0:\n                product *= num\n        return product\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    for num in list1:\n        if num % 2 == 0:\n            even *= num\n        else:\n            odd *= num\n    return [even, odd]\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    odd_sum = 0\n    even_sum = 0\n    for i in list1:\n        if i%2 == 0:\n            even_sum += i\n        else:\n            odd_sum += i\n    return odd_sum * even_sum\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            product *= num\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    return [None]\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.strip(\"()\")\n    return tuple(map(int, test_str.split(\",\")))\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.strip('()').split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = []\n    for t in test_str:\n        int_tuple.append(int(t))\n    return tuple(int_tuple)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    num = int(test_str[0])\n    for i in range(1,len(test_str)):\n        num *= int(test_str[i])\n    return num\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    my_tuple = test_str.strip('()').split(',')\n    int_tuple = tuple(map(int, my_tuple))\n    return int_tuple\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_list = test_str.split(',')\n    return tuple(int(item) for item in test_list)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    # split the string\n    list_str = test_str.split(',')\n    \n    # convert each string to integer\n    list_int = []\n    for str in list_str:\n        list_int.append(int(str))\n    \n    # convert to tuple\n    return tuple(list_int)\n    \ndef tuple_int_str(test_int):\n    '''\n    Write a function to convert integer tuple to string tuple.\n    '''\n    \n    # convert to string\n    return str(test_int)\n    \ndef add_str(str1, str2):\n    '''\n    Write a function to add two string together.\n    '''\n    \n    # get the length of str1\n    str_len = len(str1)\n    \n    # get the length of str2\n    str2_len = len(str2)\n    \n    # initialize the result string\n    result_str = ''\n    \n    # add the two strings one by one\n    for i in range(max(str_len, str2_len)):\n        \n        # add '0' to result_str if str1's index i is less than 0\n        if i < 0:\n            result_str += '0'\n        \n        # add str1's index i to result_str\n        elif i < str_len:\n            result_str += str1[i]\n        \n        # add '0' to result_str if str2's index i is less than 0\n        if i < 0:\n            result_str += '0'\n        \n        # add str2's index i to result_str\n        elif i < str2_len:\n            result_str += str2[i]\n    \n    # return the result string\n    return result_str\n    \ndef add_int(num1, num2):\n    '''\n    Write a function to add two integer together.\n    '''\n    \n    # convert to string\n    num1_str = str(num1)\n    num2_str = str(num2)\n    \n    # add two strings\n    str_add = add_str(num1_str, num2_str)\n    \n    # convert back to int\n    return int(str_add)\n    \ndef mult_int(num1, num2):\n    '''\n    Write a function to multiply two integer together.\n    '''\n    \n    # convert to string\n    num1_str = str(num1)\n    num2_str = str(num2)\n    \n    # multiply two strings\n    str_mult = add_str(num1_str, num2_str)\n    \n    # convert back to int\n    return int(str_mult)\n    \ndef tuple_get(test_tuple, index):\n    '''\n    Write a function to get the index-th element in tuple.\n    '''\n    \n    # convert to string\n    num1_str = str(test_tuple)\n    \n    # get the length of the tuple\n    len_tuple = len(test_tuple)\n    \n    # index is less than 0, index must be negative\n    if index < 0:\n        \n        # return None if index is less than 0\n        return None\n    \n    # index is greater than length of tuple, index is out of range\n    elif index >= len_tuple:\n        \n        # return None if index is greater than length of tuple\n        return None\n    \n    # return the index-th element in the tuple\n    else:\n        \n        # return the index-th element in the tuple\n        return test_tuple[index]\n    \ndef tuple_set(test_tuple, index, value):\n    '''\n    Write a function to set the value of the index-th element in tuple to value.\n    '''\n    \n    # convert to string\n    num1_str = str(test_tuple)\n    \n    # get the length of the tuple\n    len_tuple = len(test_tuple)\n    \n    # index is less than 0, index must be negative\n    if index < 0:\n        \n        # return None if index is less than 0\n        return None\n    \n    # index is greater than length of tuple, index is out of range\n    elif index >= len_tuple:\n        \n        # return None if index is greater than length of tuple\n        return None\n    \n    # set the index-th element to value\n    test_tuple[index] = value\n    \n    # convert back to int\n    return tuple(test_tuple)\n    \ndef tuple_del(test_tuple, index):\n    '''\n    Write a function to delete the index-th element in tuple.\n    '''\n    \n    # convert to string\n    num1_str = str(test_tuple)\n    \n    # get the length of the tuple\n    len_tuple = len(test_tuple)\n    \n    # index is less than 0, index must be negative\n    if index < 0:\n        \n        # return None if index is less than 0\n        return None\n    \n    # index is greater than length of tuple, index is out of range\n    elif index >= len_tuple:\n        \n        # return None if index is greater than length of tuple\n        return None\n    \n    # delete the index-th element in the tuple\n    del test_tuple[index]\n    \n    # convert back to int\n    return tuple(test_tuple)\n    \ndef tuple_del_range(test_tuple, start, end):\n    '''\n    Write a function to delete the index-th to the index-th element in tuple.\n    '''\n    \n    # convert to string\n    num1_str = str(test_tuple)\n    \n    # get the length of the tuple\n    len_tuple = len(test_tuple)\n    \n    # index is less than 0, index must be negative\n    if start < 0:\n        \n        # return None if index is less than 0\n        return None\n    \n    # index is greater than length of tuple, index is out of range\n    elif end > len_tuple:\n        \n        # return None if index is greater than length of tuple\n        return None\n    \n    # delete the index-th to the index-th element in the tuple\n    del test_tuple[start:end]\n    \n    # convert back to int\n    return tuple(test_tuple)\n    \ndef tuple_del_value(test_tuple, value):\n    '''\n    Write a function to delete all the tuples in the tuple that contains value.\n    '''\n    \n    # convert to string\n    num1_str = str(test_tuple)\n    \n    # get the length of the tuple\n    len_tuple = len(test_tuple)\n    \n    # initialize the result tuple\n    result_tuple = ()\n    \n    # add the remaining tuples\n    for i in range(len_tuple):\n        \n        # add the tuples to result_tuple\n        if test_tuple[i]!= value:\n            result_tuple += (test_tuple[i],)\n    \n    # convert back to int\n    return tuple(result_tuple)\n    \ndef is_in(test_tuple, value):\n    '''\n    Write a function to test if a tuple contains a value.\n    '''\n    \n    # convert to string\n    num1_str = str(test_tuple)\n    \n    # convert to string\n    num2_str = str(value)\n    \n    # test if num2_str is in num1_str\n    if num2_str in num1_str:\n        \n        # return True if num2_str is in num1_str\n        return True\n    \n    # return False if num2_str is not in num1_str\n    return False\n    \ndef max_int(test_tuple):\n    '''\n    Write a function to get the maximum value in tuple.\n    '''\n    \n    # convert to string\n    num1_str = str(test_tuple)\n    \n    # get the length of the tuple\n    len_tuple = len(test_tuple)\n    \n    # initialize the result to 0\n    result = 0\n    \n    # add the max value of each tuple to result\n    for i in range(len_tuple):\n        \n        # add the max value of the tuple to result\n        if tuple_get(test_tuple"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_list = [int(x) for x in test_str.split(',')]\n    return tuple(tuple_list)\n    \n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    string_list = test_str.split('(')\n    int_tuple = []\n    for i in string_list:\n        integer_num = int(i[:-1])\n        int_tuple.append(integer_num)\n    return tuple(int_tuple)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    numbers = test_str[1:-1].split(',')\n    return tuple([int(x) for x in numbers])\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = len(a)\n    left = 0\n    right = l - 1\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect(a, x)\n    if i == len(a) or a[i] > x:\n        return i\n    else:\n        return i + 1\n    \ndef left_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i] > x:\n        return i\n    else:\n        return i + 1\n    \ndef sort_by_insertion(a, x):\n    '''\n    Write a function to sort an array of integers by the insertion sort.\n    '''\n    for i in range(1, len(a)):\n        key = a[i]\n        j = i\n        while j > 0 and a[j-1] > key:\n            a[j] = a[j-1]\n            j = j - 1\n        a[j] = key\n    return a\n    \ndef bsearch_recursive(a, x, lo, hi):\n    '''\n    Write a function that implements the binary search algorithm.\n    '''\n    mid = (lo + hi) // 2\n    if lo > hi:\n        return -1\n    if a[mid] == x:\n        return mid\n    if a[mid] < x:\n        return bsearch_recursive(a, x, mid + 1, hi)\n    if a[mid] > x:\n        return bsearch_recursive(a, x, lo, mid - 1)\n    \ndef bsearch_iterative(a, x):\n    '''\n    Write a function that implements the binary search algorithm.\n    '''\n    lo = 0\n    hi = len(a)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if a[mid] < x:\n            lo = mid + 1\n        elif a[mid] > x:\n            hi = mid\n        else:\n            return mid\n    return -1\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if x < a[0]:\n        return 0\n    elif x > a[-1]:\n        return len(a)\n    else:\n        i = 0\n        j = len(a)\n        while j > i:\n            m = (i+j)/2\n            if x > a[m]:\n                i = m + 1\n            elif x < a[m]:\n                j = m\n            else:\n                i = m\n    return i\ndef find_nearest(a, x):\n    '''\n    Write a function to find the nearest number to a given value in a list.\n    '''\n    i = bisect.bisect(a, x)\n    if i==0 or i==len(a):\n        return a[0]\n    elif x-a[i-1]<a[i]-x:\n        return a[i-1]\n    else:\n        return a[i]\ndef is_palindrome(s):\n    '''\n    Write a function that takes a string as input and returns True if the string is a palindrome and False if it is not.\n    '''\n    if s==s[::-1]:\n        return True\n    else:\n        return False\ndef reverse_string(s):\n    '''\n    Write a function to reverse a string\n    '''\n    s = s[::-1]\n    return s\ndef is_anagram(s1, s2):\n    '''\n    Write a function to determine if two strings are anagrams of each other.\n    '''\n    if len(s1)==len(s2):\n        for i in range(len(s1)):\n            if s1[i] not in s2:\n                return False\n        return True\n    else:\n        return False\ndef generate_permutations(array):\n    '''\n    Write a function that takes in a string and returns a list of all permutations of that string.\n    '''\n    if len(array)==1:\n        return [array]\n    else:\n        output = []\n        for i in range(len(array)):\n            for j in generate_permutations(array[:i]+array[i+1:]):\n                output.append(array[i]+j)\n        return output\ndef generate_combinations(array, i=0):\n    '''\n    Write a function that takes in a string and returns a list of all combinations of that string.\n    '''\n    if i==len(array):\n        return [[]]\n    else:\n        output = []\n        for j in range(i, len(array)):\n            output += generate_combinations(array, j+1)\n        for k in generate_combinations(array, i+1):\n            output.append([array[i]]+k)\n        return output\ndef generate_binary_strings(n):\n    '''\n    Write a function that takes in a number and returns all binary strings of that length and ending in zero.\n    '''\n    output = []\n    for i in range(2**n):\n        bin_string = bin(i)[2:]\n        if bin_string.endswith('0'):\n            output.append(bin_string)\n    return output\ndef count_balanced_strings(s):\n    '''\n    Write a function that takes in a string and returns the number of balanced strings of that length that end with a left parenthesis.\n    '''\n    if s.count('(')==s.count(')'):\n        return 1\n    else:\n        return 0\ndef sort_tallest_buildings(H):\n    '''\n    Write a function that takes in a list of buildings and returns a list of the indices of the buildings sorted in ascending order by height.\n    '''\n    l = []\n    for i in range(len(H)):\n        l.append((H[i], i))\n    l.sort()\n    return [x for _,x in l]\ndef has_duplicates(a):\n    '''\n    Write a function to return True if any two numbers in a list appear more than once and False if they do not.\n    '''\n    for i in range(len(a)):\n        if a.count(a[i])>1:\n            return True\n    return False\ndef find_duplicates(a):\n    '''\n    Write a function to return the indices of any duplicates in a list.\n    '''\n    output = []\n    for i in range(len(a)):\n        if a.count(a[i])>1:\n            output.append(i)\n    return output\ndef is_anagram(a, b):\n    '''\n    Write a function that takes in two strings and returns True if the strings are anagrams of each other and False otherwise.\n    '''\n    if len(a)==len(b):\n        for i in range(len(a)):\n            if a[i] not in b:\n                return False\n        return True\n    else:\n        return False\ndef validate_parenthesis(string):\n    '''\n    Write a function that takes in a string of parenthesis and determines if the order of the parenthesis is valid.\n    '''\n    stack = []\n    for i in range(len(string)):\n        if string[i]=='(' or string[i]=='{' or string[i]=='[':\n            stack.append(string[i])\n        elif string[i]==')':\n            if stack and stack[-1]=='(':\n                stack.pop()\n            else:\n                return False\n        elif string[i]=='}':\n            if stack and stack[-1]=='{':\n                stack.pop()\n            else:\n                return False\n        elif string[i]==']':\n            if stack and stack[-1]=='[':\n                stack.pop()\n            else:\n                return False\n    if len(stack)==0:\n        return True\n    else:\n        return False\ndef find_max_consecutive_ones(a):\n    '''\n    Write a function that takes in a list of 0s and 1s and returns the maximum number of consecutive 1s in the list.\n    '''\n    output = 0\n    max_count = 0\n    curr_count = 0\n    for i in range(len(a)):\n        if a[i]==1:\n            curr_count += 1\n        else:\n            max_count = max(curr_count, max_count)\n            curr_count = 0\n    return max(max_count, curr_count)\ndef find_sum_of_sorted_subarrays(arr):\n    '''\n    Write a function that takes in an array of n numbers and returns the sum of all of the positive values in the array.\n    '''\n    output = 0\n    start = 0\n    end = 0\n    while end<len(arr):\n        if arr[end]<0:\n            output+=sum(arr[start:end+1])\n            start = end+1\n        else:\n            end+=1\n    output+=sum(arr[start:end+1])\n    return output\ndef reverse_linked_list(head):\n    '''\n    Write a function that takes in a singly-linked list and returns a reverse of that list.\n    '''\n    if head==None or head.next==None:\n        return head\n    output = None\n    while head:\n        next = head.next\n        head.next = output\n        output = head\n        head = next\n    return output\ndef find_lowest_common_ancestor(a, b, c):\n    '''\n    Write a function that takes in three nodes in a binary tree and returns the lowest common ancestor of the three nodes.\n    '''\n    if a==b or a==c or b==c:\n        return a\n    if a.parent!=None and a.parent.val==b.val and a.parent.val==c.val:\n        return a.parent\n    if a.parent!=None and a.parent.val==b.val and a.parent.val==c.val:\n        return a.parent\n    if a.parent!=None and a.parent.val==c.val and a.parent.val==b.val:\n        return a.parent\n    if b.parent!=None and b.parent.val==a.val and b.parent.val==c.val:\n        return "
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = 0\n    while i < len(a) and a[i] < x:\n        i += 1\n    a.insert(i, x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = len(a)-1\n    while i >= 0 and x < a[i]:\n        i -= 1\n    a.insert(i+1, x)\n    return a\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\ndef binary_search(a, x):\n    '''\n    Write a function to locate the leftmost value equal to x in a sorted array.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\ndef binary_search_iter(a, x):\n    '''\n    Write a function to locate the leftmost value equal to x in a sorted array.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\ndef binary_search_right(a, x):\n    '''\n    Write a function to locate the rightmost value equal to x in a sorted array.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\ndef binary_search_right_recursive(a, x, i=0, j=-1):\n    '''\n    Write a function to locate the rightmost value equal to x in a sorted array.\n    '''\n    if i == j:\n        if x == a[i]:\n            return i\n        else:\n            return -1\n    else:\n        mid = (i+j)//2\n        if x == a[mid]:\n            if mid == len(a)-1 or a[mid+1] < x:\n                return mid\n            else:\n                return binary_search_right_recursive(a, x, mid+1, j)\n        elif x > a[mid]:\n            return binary_search_right_recursive(a, x, mid+1, j)\n        else:\n            return binary_search_right_recursive(a, x, i, mid-1)\ndef binary_search_left_recursive(a, x, i=0, j=-1):\n    '''\n    Write a function to locate the leftmost value equal to x in a sorted array.\n    '''\n    if i == j:\n        if x == a[i]:\n            return i\n        else:\n            return -1\n    else:\n        mid = (i+j)//2\n        if x == a[mid]:\n            if mid == 0 or a[mid-1] > x:\n                return mid\n            else:\n                return binary_search_left_recursive(a, x, mid-1, i)\n        elif x > a[mid]:\n            return binary_search_left_recursive(a, x, mid+1, j)\n        else:\n            return binary_search_left_recursive(a, x, i, mid-1)\ndef search_rotated_sorted_array(a, x):\n    '''\n    Write a function to locate the leftmost value equal to x in a sorted array, and return the index if found, otherwise return -1.\n    The array may be rotated.\n    '''\n    i = binary_search_right(a, x)\n    if i == len(a):\n        return -1\n    else:\n        if a[i] == x:\n            return i\n        elif a[i] < x:\n            return i\n        else:\n            return -1\ndef search_rotated_sorted_array_iter(a, x):\n    '''\n    Write a function to locate the leftmost value equal to x in a sorted array, and return the index if found, otherwise return -1.\n    The array may be rotated.\n    '''\n    i = binary_search_right_iter(a, x)\n    if i == len(a):\n        return -1\n    else:\n        if a[i] == x:\n            return i\n        elif a[i] < x:\n            return i\n        else:\n            return -1\ndef search_rotated_sorted_array_recursive(a, x, i=0, j=-1):\n    '''\n    Write a function to locate the leftmost value equal to x in a sorted array, and return the index if found, otherwise return -1.\n    The array may be rotated.\n    '''\n    if i == j:\n        if x == a[i]:\n            return i\n        else:\n            return -1\n    else:\n        mid = (i+j)//2\n        if x == a[mid]:\n            if mid == len(a)-1 or a[mid+1] < x:\n                return mid\n            else:\n                return search_rotated_sorted_array_recursive(a, x, mid+1, j)\n        elif x > a[mid]:\n            return search_rotated_sorted_array_recursive(a, x, mid+1, j)\n        else:\n            return search_rotated_sorted_array_recursive(a, x, i, mid-1)\ndef search_rotated_sorted_array_iter2(a, x, i=0, j=-1):\n    '''\n    Write a function to locate the leftmost value equal to x in a sorted array, and return the index if found, otherwise return -1.\n    The array may be rotated.\n    '''\n    if i == j:\n        if x == a[i]:\n            return i\n        else:\n            return -1\n    else:\n        mid = (i+j)//2\n        if x == a[mid]:\n            if mid == 0 or a[mid-1] < x:\n                return mid\n            else:\n                return search_rotated_sorted_array_iter2(a, x, mid-1, j)\n        elif x > a[mid]:\n            return search_rotated_sorted_array_iter2(a, x, mid+1, j)\n        else:\n            return search_rotated_sorted_array_iter2(a, x, i, mid-1)\ndef search_rotated_sorted_array_iter3(a, x, i=0, j=-1):\n    '''\n    Write a function to locate the leftmost value equal to x in a sorted array, and return the index if found, otherwise return -1.\n    The array may be rotated.\n    '''\n    if i == j:\n        if x == a[i]:\n            return i\n        else:\n            return -1\n    else:\n        mid = (i+j)//2\n        if x == a[mid]:\n            if mid == len(a)-1 or a[mid+1] < x:\n                return mid\n            else:\n                return search_rotated_sorted_array_iter3(a, x, mid+1, j)\n        elif x > a[mid]:\n            return search_rotated_sorted_array_iter3(a, x, mid+1, j)\n        else:\n            return search_rotated_sorted_array_iter3(a, x, i, mid-1)\ndef search_rotated_sorted_array_iter4(a, x):\n    '''\n    Write a function to locate the leftmost value equal to x in a sorted array, and return the index if found, otherwise return -1.\n    The array may be rotated.\n    '''\n    if x == a[0]:\n        return 0\n    else:\n        i = 1\n        j = len(a)-1\n        while i < j:\n            mid = (i+j)//2\n            if x == a[mid]:\n                if mid == 0 or a[mid-1] < x:\n                    return mid\n                else:\n                    j = mid-1\n            elif x > a[mid]:\n                i = mid+1\n            else:\n                j = mid-1\n        if i < len(a) and a[i] == x:\n            return i\n        else:\n            return -1\ndef search_rotated_sorted_array_recursive(a, x, i=0, j=-1):\n    '''\n    Write a function to locate the leftmost value equal to x in a sorted array, and return the index if found, otherwise return -1.\n    The array may be rotated.\n    '''\n    if i == j:\n        if x == a[i]:\n            return i\n        else:\n            return -1\n    else:\n        mid = (i+j)//2\n        if x == a[mid]:\n            if mid == 0 or a[mid-1] < x:\n                return mid\n            else:\n                return search_rotated_sorted_array_recursive(a, x, mid+"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    mid = len(a) // 2\n    if x == a[mid]:\n        return mid\n    if x < a[mid]:\n        if mid == 0:\n            return 0\n        return right_insertion(a[:mid], x)\n    else:\n        return mid + 1 + right_insertion(a[mid + 1:], x)\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    def binary_search(a, x):\n        def binary_search_inner(a, x, left, right):\n            if left > right:\n                return left\n            mid = left + (right - left) // 2\n            if a[mid] == x:\n                return mid\n            elif a[mid] > x:\n                return binary_search_inner(a, x, left, mid - 1)\n            else:\n                return binary_search_inner(a, x, mid + 1, right)\n        if len(a) == 0:\n            return 0\n        if len(a) == 1:\n            return 0 if a[0] > x else 1\n        mid = len(a) // 2\n        if a[mid] > x:\n            return mid + 1 + binary_search_inner(a, x, 0, mid - 1)\n        else:\n            return binary_search_inner(a, x, mid + 1, len(a) - 1)\n    return binary_search(a, x)\ndef binary_search(a, x):\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if a[mid] < x:\n            left = mid + 1\n        elif a[mid] > x:\n            right = mid - 1\n        else:\n            return mid\n    return mid\ndef find_kth(a, k):\n    def binary_search_k(a, k, left, right):\n        if left > right:\n            return left\n        mid = left + (right - left) // 2\n        if a[mid] == k:\n            return mid\n        elif a[mid] > k:\n            return binary_search_k(a, k, left, mid - 1)\n        else:\n            return binary_search_k(a, k, mid + 1, right)\n    if len(a) == 0:\n        return -1\n    return binary_search_k(a, k, 0, len(a) - 1)\ndef find_kth_recursive(a, k):\n    def binary_search_k_recursive(a, k, left, right):\n        if left > right:\n            return left\n        mid = left + (right - left) // 2\n        if a[mid] == k:\n            return mid\n        elif a[mid] > k:\n            return binary_search_k_recursive(a, k, left, mid - 1)\n        else:\n            return binary_search_k_recursive(a, k, mid + 1, right)\n    if len(a) == 0:\n        return -1\n    return binary_search_k_recursive(a, k, 0, len(a) - 1)\ndef find_kth_recursive_lazy(a, k):\n    def binary_search_k_recursive_lazy(a, k, left, right, lazy):\n        if left > right:\n            return left\n        mid = left + (right - left) // 2\n        if a[mid] == k:\n            return mid\n        elif a[mid] > k:\n            return binary_search_k_recursive_lazy(a, k, left, mid - 1, lazy)\n        else:\n            if lazy[mid] == 0:\n                return binary_search_k_recursive_lazy(a, k, mid + 1, right, lazy)\n            else:\n                return binary_search_k_recursive_lazy(a, k, left, mid - 1, lazy)\n    if len(a) == 0:\n        return -1\n    lazy = [0] * (len(a) + 1)\n    return binary_search_k_recursive_lazy(a, k, 0, len(a) - 1, lazy)\ndef find_kth_recursive_lazy_2(a, k):\n    def binary_search_k_recursive_lazy_2(a, k, left, right, lazy):\n        if left > right:\n            return left\n        mid = left + (right - left) // 2\n        if a[mid] == k:\n            return mid\n        elif a[mid] > k:\n            if lazy[mid] == 0:\n                return binary_search_k_recursive_lazy_2(a, k, left, mid - 1, lazy)\n            else:\n                return binary_search_k_recursive_lazy_2(a, k, left, mid - 1, lazy)\n        else:\n            if lazy[mid] == 0:\n                return binary_search_k_recursive_lazy_2(a, k, mid + 1, right, lazy)\n            else:\n                return binary_search_k_recursive_lazy_2(a, k, mid + 1, right, lazy)\n    if len(a) == 0:\n        return -1\n    lazy = [0] * (len(a) + 1)\n    return binary_search_k_recursive_lazy_2(a, k, 0, len(a) - 1, lazy)\ndef find_kth_recursive_lazy_3(a, k):\n    def binary_search_k_recursive_lazy_3(a, k, left, right, lazy):\n        if left > right:\n            return left\n        mid = left + (right - left) // 2\n        if a[mid] == k:\n            return mid\n        elif a[mid] > k:\n            if lazy[mid] == 0:\n                return binary_search_k_recursive_lazy_3(a, k, left, mid - 1, lazy)\n            else:\n                return binary_search_k_recursive_lazy_3(a, k, left, mid - 1, lazy)\n        else:\n            if lazy[mid] == 0:\n                return binary_search_k_recursive_lazy_3(a, k, mid + 1, right, lazy)\n            else:\n                return binary_search_k_recursive_lazy_3(a, k, mid + 1, right, lazy)\n    if len(a) == 0:\n        return -1\n    lazy = [0] * (len(a) + 1)\n    return binary_search_k_recursive_lazy_3(a, k, 0, len(a) - 1, lazy)\ndef find_kth_recursive_lazy_4(a, k):\n    def binary_search_k_recursive_lazy_4(a, k, left, right, lazy):\n        if left > right:\n            return left\n        mid = left + (right - left) // 2\n        if a[mid] == k:\n            return mid\n        elif a[mid] > k:\n            if lazy[mid] == 0:\n                return binary_search_k_recursive_lazy_4(a, k, left, mid - 1, lazy)\n            else:\n                return binary_search_k_recursive_lazy_4(a, k, left, mid - 1, lazy)\n        else:\n            if lazy[mid] == 0:\n                return binary_search_k_recursive_lazy_4(a, k, mid + 1, right, lazy)\n            else:\n                return binary_search_k_recursive_lazy_4(a, k, mid + 1, right, lazy)\n    if len(a) == 0:\n        return -1\n    lazy = [0] * (len(a) + 1)\n    return binary_search_k_recursive_lazy_4(a, k, 0, len(a) - 1, lazy)\ndef find_kth_recursive_lazy_5(a, k):\n    def binary_search_k_recursive_lazy_5(a, k, left, right, lazy):\n        if left > right:\n            return left\n        mid = left + (right - left) // 2\n        if a[mid] == k:\n            return mid\n        elif a[mid] > k:\n            if lazy[mid] == 0:\n                return binary_search_k_recursive_lazy_5(a, k, left, mid - 1, lazy)\n            else:\n                return binary_search_k_recursive_lazy_5(a, k, left, mid - 1, lazy)\n        else:\n            if lazy[mi"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'.*(a(.*?)b).*')\n    result = pattern.match(text)\n    return result\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search('a.*?b.*?b.*?b.*?', text)\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    \n    pattern = 'ab{3}'\n    if re.search(pattern,text):\n        return 'Found a match!'\n    else:\n        return('No match!')\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    if pattern.search(text):\n        return True\n    return False\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    \n    pattern = re.compile(r'.*[ab].{3}.*')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # print(re.search(r'ab{3}', text))\n    return re.search(r'ab{3}', text)\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matches = re.findall('ab{3}', text)\n    return matches\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    result = pattern.search(text)\n    if result:\n        return result.start()\n    else:\n        return -1\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    reg = re.compile(r'ab{3}')\n    result = reg.search(text)\n    return result\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = text.lower()\n    if re.search(\"^a\\w{3}b$\",text):\n        return True\n    else:\n        return False\nprint(text_match_three(\"aabbb\"))\nprint(text_match_three(\"aabab\"))\nprint(text_match_three(\"aabbba\"))\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = test_list.replace(test_str,'')\n    return tuple(new_list.split(','))\n    \ndef main():\n    '''\n    In this test, we will be testing the creation of a new tuple.\n    '''\n    test_list = '((1,2,3),(4,5,6),(7,8,9))'\n    test_str = '('\n    print(new_tuple(test_list, test_str))\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    \n    # test_list = [2, 7, 5, 4, 3]\n    # test_str = 'this,that,the other'\n    \n    print(test_list)\n    \n    t = tuple()\n    \n    for i in test_list:\n        t = t + (i,)\n        \n    print(t)\n    \n    t = t + test_str.split(',')\n    \n    print(t)\n    \n    return t\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list, test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return test_str.replace(',', '').strip('(').strip(')').split(', ')\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    result = tuple(test_list)\n    result = result + (test_str,)\n    return result\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list), tuple(test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    res = []\n    res = res + test_str\n    res = res + test_list\n    res = tuple(res)\n    return res\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # test_str = '(((('\n    # test_list = ['((', '(', '((', '((', '((', '((', '((', '((', '))))'])\n    new_tuple = test_str[2:-2].split('),')\n    result_list = []\n    for i in test_list:\n        if i in new_tuple:\n            index = new_tuple.index(i)\n            result_list.append(new_tuple[index+1])\n        else:\n            result_list.append(i)\n    return tuple(result_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # convert list to string\n    # slice string to create new tuple\n    # return new tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str)\n    new_list = tuple(test_list)\n    new_list = new_list[0:1] + new_tuple + new_list[1:]\n    return new_list\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums) == 0:\n        return True\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # Return true if all elements at even index are even\n    for idx in range(1, len(nums), 2):\n        if nums[idx] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return len(nums) % 2 == 0 and all(i % 2 == 0 for i in range(1, len(nums), 2))\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even = 0\n    for index, number in enumerate(nums):\n        if index % 2 == 0:\n            if number % 2 == 0:\n                even += 1\n    return even\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for idx in range(1,len(nums),2):\n        if nums[idx-1] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return [True if (num % 2 == 0) else False for num in nums]\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    \n    for i in range(0,len(nums),2):\n        if not nums[i]%2:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    n=len(nums)\n    for i in range(0,n):\n        if i%2==0 and nums[i]%2!=0:\n            print('No')\n            return\n    print('Yes')\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n    \nprint even_position([1,2,3,4,5])\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    res = ()\n    for sub in test_tup:\n        if not isinstance(sub, tuple):\n            res += (sub,)\n        else:\n            res += (remove_nested(sub),)\n    return res\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for tup in test_tup:\n        if isinstance(tup, tuple):\n            test_tup.remove(tup)\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup)):\n        if not isinstance(test_tup[i], tuple):\n            new_tup += (test_tup[i],)\n    return new_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if not isinstance(test_tup, tuple):\n        return tuple([test_tup])\n    return tuple([val for val in test_tup if not isinstance(val, tuple)])\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_list = list(test_tup)\n    for i in range(len(test_list)):\n        try:\n            if isinstance(test_list[i], tuple):\n                test_list.pop(i)\n        except TypeError:\n            pass\n    return tuple(test_list)\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    tup1 = test_tup[0]\n    tup2 = test_tup[1]\n    if isinstance(tup1,list):\n        for x in tup1:\n            if isinstance(x,tuple):\n                tup1.remove(x)\n    if isinstance(tup2,list):\n        for x in tup2:\n            if isinstance(x,tuple):\n                tup2.remove(x)\n    return (tup1,tup2)\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for sub_tup in test_tup:\n        if type(sub_tup) is not tuple:\n            return test_tup\n        else:\n            test_tup = sub_tup\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple([v for v in test_tup if not isinstance(v,tuple)])\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    a = test_tup[0]\n    b = test_tup[1]\n    if isinstance(a, tuple):\n        if isinstance(b, tuple):\n            return (remove_nested(a), remove_nested(b))\n        else:\n            return (remove_nested(a),)\n    else:\n        return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    to_remove = []\n    for i,e in enumerate(test_tup):\n        if isinstance(e,tuple):\n            to_remove.append(i)\n    for j in to_remove[::-1]:\n        del test_tup[j]\n    return test_tup\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for x in input_list:\n        if type(x) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for each in input_list:\n        if type(each) == type([]):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return 1 if input_list == [] else len(input_list) + count_list(input_list[:-1])\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    output_list = []\n    count = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) == list:\n            count += 1\n    output_list.append(count)\n    return output_list\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list: \n        if isinstance(item, list): \n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) is list:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    #count = 0\n    #for num in input_list:\n    #    if type(num) == type([]):\n    #        count = count + 1\n    #return count\n    return sum(type(num) == type([] for num in input_list) for num in input_list)\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    if x < arr[0]:\n        return 0\n    if x > arr[-1]:\n        return len(arr)\n    \n    start = 0\n    end = len(arr)\n    \n    while start < end:\n        mid = (start + end) / 2\n        if arr[mid] < x:\n            start = mid + 1\n        elif arr[mid] > x:\n            end = mid\n        else:\n            return mid\n    return start\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = len(arr)\n    if x not in arr:\n        return None\n    for i in range(l):\n        if arr[i] == x:\n            return i\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return arr.index(x) if x in arr else -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    if x==arr[0]:\n        return 0\n    else:\n        return last(arr[1:],x) + 1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr)\n    while i > 0:\n        if arr[i-1] == x:\n            return i-1\n        i = i-1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    arr1 = arr[:]\n    arr1.reverse()\n    for i in xrange(len(arr1)):\n        if arr1[i] == x:\n            return len(arr)-i-1\n    return -1\n    \ndef anagram(str1,str2):\n    '''\n    Write a python function to check whether two strings are anagrams of each other or not.\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    dic1 = {}\n    dic2 = {}\n    for c in str1:\n        if c in dic1:\n            dic1[c] += 1\n        else:\n            dic1[c] = 1\n    for c in str2:\n        if c in dic2:\n            dic2[c] += 1\n        else:\n            dic2[c] = 1\n    if dic1 == dic2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return 0 if arr[0] == x else -1\n    i = n - 1\n    j = n - 1\n    while j >= 0:\n        if arr[j] == x:\n            return j\n        if arr[j] > x:\n            i = j\n        j = j - 1\n    return i\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    size = len(arr)\n    if size==0:\n        return -1\n    if x==arr[size-1]:\n        return size-1\n    lastpos = last(arr,x,0,size-1)\n    return lastpos\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr == None or len(arr) == 0:\n        return -1\n    return len(arr) - bisect.bisect_left(arr,x)\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    \n    def search(arr,x):\n        '''\n        Recursive helper function to find the last position of an element\n        in a sorted array.\n        '''\n        if len(arr)==0:\n            return -1\n        if arr[len(arr)-1]==x:\n            return len(arr)-1\n        if arr[len(arr)-1]<x:\n            return search(arr[1:],x)\n        return search(arr[:len(arr)-1],x)\n        \n    return search(arr,x)\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r'\\ba[^\\db]b\\b')\n    match = regex.search(text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b$')\n    if pattern.search(text):\n        return 'found a match!'\n    else:\n        return 'no match'\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text = text.replace('\"','').replace(\"'\",\"\")\n    pattern = re.compile(r'.*?(?<=a)\\w+.*?(?=b)')\n    return pattern.findall(text)\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab')\n    result = pattern.match(text)\n    if result:\n        print('Found a match!')\n    else:\n        print('Not matched!')\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*$')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_startb_enda(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*b$')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_starta_endb_2nd(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*$')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_starta_endb_2nd_x(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*$')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_starta_endb_3rd(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*$')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_starta_endb_3rd_x(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*$')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_starta_endb_4th(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*$')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_starta_endb_4th_x(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*$')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_starta_endb_5th(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*$')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_starta_endb_5th_x(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*$')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_starta_endb_6th(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*$')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_starta_endb_6th_x(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*$')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_starta_endb_7th(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*$')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_starta_endb_7th_x(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*$')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_starta_endb_8th(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*$')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_starta_endb_8th_x(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*$')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_starta_endb_9th(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*$')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_starta_endb_9th_x(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*$')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_starta_endb_10th(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*$')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_starta_endb_10th_x(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*$')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_starta_endb_11th(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*$')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_starta_endb_11th_x(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*$')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_starta_endb_12th(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*$')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_starta_endb_12th_x(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*$')\n    if pattern.match(text):\n        return True\n    else:\n        return False\ndef text_starta_endb_13th"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b$', re.DOTALL)\n    if pattern.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"a.*?b\"\n    if re.search(pattern, text):\n        print(\"Match found: %s\" % re.search(pattern, text).group())\n    else:\n        print(\"Match not found: %s\" % re.search(pattern, text).group())\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pat = r'a(.*?)b'\n    text = re.search(pat,text)\n    return text.group(1)\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    #two possible patterns\n    #pattern1 = re.compile(r'(a)(.*?b)', re.IGNORECASE)\n    #pattern2 = re.compile(r'(?P<first>a)(.*?b)', re.IGNORECASE)\n    #pattern3 = re.compile(r'(?P<first>a)(.*?b)(?P<last>.*)', re.IGNORECASE)\n    #pattern4 = re.compile(r'(?P<first>a)(.*?b)(?P<last>.*)', re.IGNORECASE)\n    #pattern5 = re.compile(r'(?P<first>a)(.*?b)', re.IGNORECASE)\n    #pattern6 = re.compile(r'(?P<first>a)(.*?b)(?P<last>.*)', re.IGNORECASE)\n    #pattern7 = re.compile(r'(?P<first>a)(.*?b)', re.IGNORECASE)\n    #pattern8 = re.compile(r'(?P<first>a)(.*?b)(?P<last>.*)', re.IGNORECASE)\n    #pattern9 = re.compile(r'(?P<first>a)(.*?b)', re.IGNORECASE)\n    #pattern10 = re.compile(r'(?P<first>a)(.*?b)(?P<last>.*)', re.IGNORECASE)\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b$')\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum = sum + dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for each in dict:\n        sum += dict[each]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum = sum + dict[i]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    if len(dict)==1:\n        return dict.values()[0]\n    else:\n        return dict[list(dict.keys())[0]] + return_sum(dict[list(dict.keys())[0]])\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_all = 0\n    for i in dict:\n        sum_of_all += dict[i]\n    return sum_of_all\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict.keys():\n        sum += dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for k,v in dict.items():\n        sum += v\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return reduce(lambda x,y: x+y, list(filter(lambda z: z%2 == 1, range(n))))\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s=0\n    for i in range(n+1):\n        if i%2!=0:\n            s=s+i\n    return s\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    result = 0\n    for i in range(n):\n        if i % 2!= 0:\n            result = result + i\n    return result\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(range(1,n+1,2))\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([i for i in range(n) if i%2 == 1])\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum=0\n    for i in range(l,r+1):\n        if i%2!=0:\n            sum+=i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if l%2==0:\n        l-=1\n    s=0\n    for i in range(l,r,2):\n        s+=i\n    return s\n    \ndef test_sum_odd():\n    assert 15==sum_odd(5)\n    assert 17==sum_odd(7)\n    assert 10==sum_odd(4)\n    assert 12==sum_odd(2)\n    assert 11==sum_odd(3)\n    assert 25==sum_odd(12)\n    assert 30==sum_odd(13)\n    assert 3==sum_odd(1)\n    assert 4==sum_odd(2)\n    assert 6==sum_odd(3)\n    assert 8==sum_odd(4)\n    assert 11==sum_odd(5)\n    assert 15==sum_odd(6)\n    assert 22==sum_odd(7)\n    assert 29==sum_odd(8)\n    assert 31==sum_odd(9)\n    assert 22==sum_odd(10)\n    assert 27==sum_odd(11)\n    assert 29==sum_odd(12)\n    assert 34==sum_odd(13)\n    assert 22==sum_odd(14)\n    assert 30==sum_odd(15)\n    assert 36==sum_odd(16)\n    assert 22==sum_odd(17)\n    assert 29==sum_odd(18)\n    assert 32==sum_odd(19)\n    assert 22==sum_odd(20)\n    assert 31==sum_odd(21)\n    assert 36==sum_odd(22)\n    assert 35==sum_odd(23)\n    assert 32==sum_odd(24)\n    assert 36==sum_odd(25)\n    assert 35==sum_odd(26)\n    assert 32==sum_odd(27)\n    assert 37==sum_odd(28)\n    assert 35==sum_odd(29)\n    assert 32==sum_odd(30)\n    assert 36==sum_odd(31)\n    assert 37==sum_odd(32)\n    assert 35==sum_odd(33)\n    assert 36==sum_odd(34)\n    assert 34==sum_odd(35)\n    assert 34==sum_odd(36)\n    assert 36==sum_odd(37)\n    assert 36==sum_odd(38)\n    assert 34==sum_odd(39)\n    assert 37==sum_odd(40)\n    assert 36==sum_odd(41)\n    assert 34==sum_odd(42)\n    assert 36==sum_odd(43)\n    assert 35==sum_odd(44)\n    assert 34==sum_odd(45)\n    assert 36==sum_odd(46)\n    assert 37==sum_odd(47)\n    assert 36==sum_odd(48)\n    assert 37==sum_odd(49)\n    assert 36==sum_odd(50)\n    assert 37==sum_odd(51)\n    assert 36==sum_odd(52)\n    assert 37==sum_odd(53)\n    assert 36==sum_odd(54)\n    assert 37==sum_odd(55)\n    assert 36==sum_odd(56)\n    assert 37==sum_odd(57)\n    assert 36==sum_odd(58)\n    assert 37==sum_odd(59)\n    assert 36==sum_odd(60)\n    assert 37==sum_odd(61)\n    assert 36==sum_odd(62)\n    assert 37==sum_odd(61)\n    assert 36==sum_odd(60)\n    assert 37==sum_odd(59)\n    assert 36==sum_odd(58)\n    assert 37==sum_odd(57)\n    assert 36==sum_odd(56)\n    assert 37==sum_odd(55)\n    assert 36==sum_odd(54)\n    assert 37==sum_odd(53)\n    assert 36==sum_odd(52)\n    assert 37==sum_odd(51)\n    assert 36==sum_odd(50)\n    assert 37==sum_odd(49)\n    assert 36==sum_odd(48)\n    assert 37==sum_odd(47)\n    assert 36==sum_odd(46)\n    assert 37==sum_odd(45)\n    assert 36==sum_odd(44)\n    assert 37==sum_odd(43)\n    assert 36==sum_odd(42)\n    assert 37==sum_odd(41)\n    assert 36==sum_odd(40)\n    assert 37==sum_odd(39)\n    assert 36==sum_odd(38)\n    assert 37==sum_odd(37)\n    assert 36==sum_odd(36)\n    assert 37==sum_odd(35)\n    assert 36==sum_odd(34)\n    assert 37==sum_odd(33)\n    assert 36==sum_odd(32)\n    assert 37==sum_odd(31)\n    assert 36==sum_odd(30)\n    assert 37==sum_odd(29)\n    assert 36==sum_odd(28)\n    assert 37==sum_odd(27)\n    assert 36==sum_odd(26)\n    assert 37==sum_odd(25)\n    assert 36==sum_odd(24)\n    assert 37==sum_odd(23)\n    assert 36==sum_odd(22)\n    assert 37==sum_odd(21)\n    assert 36==sum_odd(20)\n    assert 37==sum_odd(19)\n    assert 36==sum_odd(18)\n    assert 37==sum_odd(17)\n    assert 36==sum_odd(16)\n    assert 37==sum_odd(15)\n    assert 36==sum_odd(14)\n    assert 37==sum_odd(13)\n    assert 36==sum_odd(12)\n    assert 37==sum_odd(11)\n    assert 36==sum_odd(10)\n    assert 37==sum_odd(9)\n    assert 36==sum_odd(8)\n    assert 37==sum_odd(7)\n    assert 36==sum_odd(6)\n    assert 37==sum_odd(5)\n    assert 36==sum_odd(4)\n    assert 37==sum_odd(3)\n    assert 36==sum_odd(2)\n    assert 37==sum_odd(1)\n    assert 37==sum_odd(0)\n    assert 37==sum_odd(-1)\n    assert 37==sum_odd(-2)\n    assert 37==sum_odd(-3)\n    assert 37==sum_odd(-4)\n    assert 37==sum_odd(-5)\n    assert 37==sum_odd(-6)\n    assert 37==sum_odd(-7)\n    assert 37==sum_odd(-8)\n    assert 37==sum_odd(-9)\n    assert 37==sum_odd(-10)\n    assert 37==sum_odd(-11)\n    assert 37==sum_odd(-12)\n    assert 37==sum_odd(-13)\n    assert 37==sum_odd(-14)\n    assert 37==sum_odd(-15)\n    assert 37==sum_odd(-16)\n    assert 37==sum_odd(-17)\n    assert 37==sum_odd(-18)\n    assert 37==sum_odd(-19)\n    assert 37==sum_odd(-20)\n    assert 37==sum_odd(-21)\n    assert 37==sum_odd(-22)\n    assert 37==sum_odd(-23)\n    assert 37==sum_odd(-24)\n    assert 37==sum_odd(-25)\n    assert 37==sum_odd(-26)\n    assert 37==sum_odd(-27)\n    assert 37==sum_odd(-28)\n    assert 37==sum_odd(-29)\n    assert 37==sum_odd(-30)\n    assert 37==sum_odd(-31)\n    assert 37==sum_odd(-32)\n    assert 37==sum_odd(-33)\n    assert 37==sum_odd(-34)\n    assert 37==sum_odd(-35)\n    assert 37==sum_odd(-36)\n    assert 37==sum_odd(-37)\n    assert 37==sum_odd(-38)\n    assert 37==sum_odd(-39)\n    assert 37==sum_odd(-40)\n    assert 37==sum_odd(-41)\n    assert 37==sum_odd(-42)\n    assert 37==sum_odd(-43)\n    assert 37==sum_odd(-44)\n    assert 37==sum_odd(-45)\n    assert 37==sum_odd(-46)\n    assert 37==sum_odd(-47"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return n + sum_odd(n-2)\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(range(1, n+1, 2))\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    \n    if n < 1:\n        return 0\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # use reduce to sum up the array.\n    return reduce(lambda a,b: a+b, arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    #for i in arr:\n    #    total += i\n    total = 0\n    for i in arr:\n        total = total + i\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[0] + _sum(arr[1:])\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if type(arr) == list:\n        return sum(arr)\n    else:\n        return 0\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xffffffff\n    return (n << d | n >> (32-d)) & mask\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d)))\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    assert 0<=d<=32, \"d should be in the range [0,32]\"\n    return (n << d)|(n >> (32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n < 1:\n        return n\n    n &= ~(2**d-1)\n    n |= (n<<d)\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d)|(n >> (32 - d))\n    \ndef digsub_xor(s1,s2):\n    '''\n    Write a function that return the xor of two 32 bit numbers.\n    '''\n    return digsub(s1)^digsub(s2)\n    \ndef chxor(s1,s2):\n    '''\n    Write a function that return the xor of two 32 bit chars.\n    '''\n    return (chxor(s1[0],s2[0]) ^ chxor(s1[1],s2[1]) ^ chxor(s1[2],s2[2]) ^ chxor(s1[3],s2[3]))\n    \ndef chmul(c,s):\n    '''\n    Write a function that returns the chmul of two 32 bit chars.\n    '''\n    return (chmul(c[0],s[0])^chmul(c[1],s[1])^chmul(c[2],s[2])^chmul(c[3],s[3]))\n    \ndef chxor_mix(s1,s2):\n    '''\n    Write a function that return the xor of two 32 bit chars.\n    '''\n    s=s1^s2\n    return (chxor(s[0],s[1]) ^ chxor(s[2],s[3]) ^ s[0]^s[1]^s[2]^s[3])\n    \ndef digsub(s):\n    '''\n    Write a function that return the xor of two 32 bit chars.\n    '''\n    return (ord(s[0])^ord(s[1])^ord(s[2])^ord(s[3]))\n    \ndef shuffle(s):\n    '''\n    Write a function that returns the shuffled version of a string.\n    '''\n    return ''.join(random.sample(s,len(s)))\n    \ndef cadd_crypto(s,k):\n    '''\n    Write a function that returns the xor of two strings using sha1 as a key.\n    '''\n    s1=sha1(s).digest()\n    s2=sha1(k).digest()\n    return chmul(s1,s2)[:4]\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    bits = 32\n    new_num = n << d\n    \n    if new_num > 2**bits - 1:\n        new_num -= 2**bits\n    return new_num\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # '''\n    # :param n: 32 bit integer\n    # :param d: bits to rotate\n    # :return: 32 bit integer\n    # '''\n    return (n<<d)|((n & 0xffffffff)>>(32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n ^ (1 << d)\n    return n\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.replace(\" \", \"\")\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','',text)\ndef words(text):\n    return re.findall('[a-z]+',text.lower())\ndef occurrences(word,text):\n    return text.lower().count(word)\ndef different_words(text):\n    '''\n    Write a function that counts the number of words in a string.\n    '''\n    return len(words(text))\ndef letters(text):\n    '''\n    Write a function that takes a string as input, and counts the number of different characters in it.\n    '''\n    return len(set(text))\ndef remove_char(text,c):\n    '''\n    Write a function that takes a string and a character as input, and returns a new string with the character removed.\n    '''\n    return text.replace(c,'')\ndef len_char(text,c):\n    '''\n    Write a function that takes a string and a character as input, and returns the number of characters in the string that are the given character.\n    '''\n    return len(remove_char(text,c))\ndef convert_to_lower(text):\n    '''\n    Write a function that takes a string as input, and returns the same string in lower case.\n    '''\n    return text.lower()\ndef words_length(text):\n    '''\n    Write a function that takes a string as input, and returns the number of words in the string.\n    '''\n    return len(words(text))\ndef count_char_in_string(text,c):\n    '''\n    Write a function that takes a string as input, and returns the number of times the given character c occurs in the string.\n    '''\n    return len_char(text,c)\ndef count_char(text,c):\n    '''\n    Write a function that takes a string and a character as input, and returns the number of times the character c occurs in the string.\n    '''\n    return occurrences(c,text)\ndef count_words(text):\n    '''\n    Write a function that takes a string as input, and returns the number of times the space character is used in the string.\n    '''\n    return words(text).count(' ') + 1\ndef count_words_lower(text):\n    '''\n    Write a function that takes a string as input, and returns the number of times the space character is used in the string, but in lower case.\n    '''\n    return text.lower().count(' ') + 1\ndef count_words_lower_words(text):\n    '''\n    Write a function that takes a string as input, and returns the number of times the space character is used in the string, but also the word 'the', 'in', 'to', and 'for'.\n    '''\n    return words(text).count(' ') + 1 + text.lower().count('the') + text.lower().count('in') + text.lower().count('to') + text.lower().count('for')\ndef count_words_lower_words_2(text):\n    '''\n    Write a function that takes a string as input, and returns the number of times the space character is used in the string, but also the word 'the', 'in', 'to', and 'for'. The function should not count the word the more than once.\n    '''\n    words = re.findall('[a-z]+',text)\n    return sum([1 for word in words if word.lower() == 'the' or word.lower() == 'in' or word.lower() == 'to' or word.lower() == 'for'])\ndef count_words_lower_words_3(text):\n    '''\n    Write a function that takes a string as input, and returns the number of times the space character is used in the string, but also the word 'the', 'in', 'to', and 'for'. The function should not count the word the more than once. The function should not count all words that are not in the list of words given.\n    '''\n    words = re.findall('[a-z]+',text)\n    return sum([1 for word in words if word.lower() == 'the' or word.lower() == 'in' or word.lower() == 'to' or word.lower() == 'for'])\ndef count_words_lower_words_4(text):\n    '''\n    Write a function that takes a string as input, and returns the number of times the space character is used in the string, but also the word 'the', 'in', 'to', and 'for'. The function should not count the word the more than once. The function should not count all words that are not in the list of words given. The list of words should be provided as a string.\n    '''\n    words = re.findall('[a-z]+',text)\n    return sum([1 for word in words if word.lower() == 'the' or word.lower() == 'in' or word.lower() == 'to' or word.lower() == 'for'])\ndef find_word(word,text):\n    '''\n    Write a function that takes a string and a word as input, and returns the number of times the word is used in the string.\n    '''\n    return text.lower().count(word.lower())\ndef find_all_word(word,text):\n    '''\n    Write a function that takes a string and a word as input, and returns the list of all occurrences of the word in the string.\n    '''\n    return re.findall(word.lower(),text.lower())\ndef longest_word(text):\n    '''\n    Write a function that takes a string as input, and returns the length of the longest word in the string.\n    '''\n    return max(words(text),key=len)\ndef letters_count(text):\n    '''\n    Write a function that takes a string as input, and returns the dictionary where the keys are the letters in the string and the values are the number of times the letters occurs in the string.\n    '''\n    return {letter:occurrences(letter,text) for letter in set(text)}\ndef most_common_letter(text):\n    '''\n    Write a function that takes a string as input, and returns the letter that appears the most times in the string.\n    '''\n    return max(letters_count(text).iteritems(),key=lambda x:x[1])[0]\ndef count_char(text,c):\n    '''\n    Write a function that takes a string as input, and returns the number of times the given character occurs in the string.\n    '''\n    return text.count(c)\ndef count_char_lower(text,c):\n    '''\n    Write a function that takes a string as input, and returns the number of times the given character occurs in the string, but in lower case.\n    '''\n    return text.lower().count(c)\ndef count_char_lower_2(text,c):\n    '''\n    Write a function that takes a string as input, and returns the number of times the given character occurs in the string, but in lower case.\n    '''\n    return re.findall('[a-z]+',text).count(c.lower())\ndef count_char_lower_3(text,c):\n    '''\n    Write a function that takes a string as input, and returns the number of times the given character occurs in the string, but in lower case. The function should not count the given character itself.\n    '''\n    return len(re.findall('[a-z]+',text)) - 1 - text.lower().count(c.lower())\ndef most_common_char(text):\n    '''\n    Write a function that takes a string as input, and returns the character that appears the most times in the string.\n    '''\n    return max(letters_count(text).iteritems(),key=lambda x:x[1])[0]\ndef letters_count_2(text):\n    '''\n    Write a function that takes a string as input, and returns a dictionary where the keys are the letters in the string and the values are the number of times the letters occurs in the string.\n    '''\n    return {letter:text.count(letter) for letter in set(text)}\ndef most_common_char_2(text):\n    '''\n    Write a function that takes a string as input, and returns the character that appears the most times in the string.\n    '''\n    return max(letters_count_2(text).iteritems(),key=lambda x:x[1])[0]\ndef most_common_char_3(text):\n    '''\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(' +',' ',text)\n    return text\ndef remove_white_space(text):\n    '''\n    Write a function to remove all white spaces from a string.\n    '''\n    text = text.strip()\n    return text\ndef remove_punc(text):\n    '''\n    Write a function to remove punctuation from a string.\n    '''\n    text = re.sub('[^\\w\\s]','',text)\n    return text\ndef remove_unicode_character(text):\n    '''\n    Write a function to remove all the unicode characters from a string.\n    '''\n    text = re.sub('[\\u0000-\\uFFFF]','',text)\n    return text\ndef remove_spaces(text):\n    '''\n    Write a function to remove all the space from a string.\n    '''\n    text = re.sub(' +',' ',text)\n    return text\ndef remove_all_newlines(text):\n    '''\n    Write a function to remove all the newlines from a string.\n    '''\n    text = re.sub('\\n+',' ',text)\n    return text\ndef remove_all_tabs(text):\n    '''\n    Write a function to remove all tabs from a string.\n    '''\n    text = re.sub('\\t+',' ',text)\n    return text\ndef remove_all_multiple_whitespaces(text):\n    '''\n    Write a function to remove all the multiple whitespaces from a string.\n    '''\n    text = re.sub(' +',' ',text)\n    return text\ndef remove_all_repeated_characters(text):\n    '''\n    Write a function to remove all the repeated characters from a string.\n    '''\n    text = re.sub(r'([a-zA-Z0-9])([a-zA-Z0-9])',r'\\1',text)\n    return text\ndef replace_first_character(text):\n    '''\n    Write a function to replace the first character of a string with another character.\n    '''\n    text = re.sub('^','t',text)\n    return text\ndef remove_punctuation(text):\n    '''\n    Write a function to remove punctuation from a string.\n    '''\n    text = re.sub('[^\\w\\s]','',text)\n    return text\ndef remove_digits(text):\n    '''\n    Write a function to remove digits from a string.\n    '''\n    text = re.sub('[0-9]','',text)\n    return text\ndef remove_emails(text):\n    '''\n    Write a function to remove emails from a string.\n    '''\n    text = re.sub('[\\w\\.-]+@[\\w\\.-]+','',text)\n    return text\ndef remove_dates(text):\n    '''\n    Write a function to remove dates from a string.\n    '''\n    text = re.sub('\\d{1,2}\\/\\d{1,2}\\/\\d{2,4}','',text)\n    return text\ndef remove_non_letters(text):\n    '''\n    Write a function to remove all the non letters from a string.\n    '''\n    text = re.sub('[^a-zA-Z]','',text)\n    return text\ndef remove_all_non_alphanumeric(text):\n    '''\n    Write a function to remove all the non alphanumeric characters from a string.\n    '''\n    text = re.sub('[^\\w\\s]','',text)\n    return text\ndef remove_all_stop_words(text):\n    '''\n    Write a function to remove all the stop words from a string.\n    '''\n    stop_words = ['ourselves','hers','between','yourself','but','again','there','about','once','during',\\\n    'out','very','having','with','they','own','an','be','some','for','do','its','yours','such','into',\\\n    'myself','other','off','is','s','am','or','who','as','from','him','each','the','them','its',\\\n    'where','both','up','out','if','any','such','nor','me','were','her','more','himself','this','down',\\\n    'should','our','their','while','above','both','up','to','ours','had','she','all','no','when','at','any',\\\n    'than','themselves','too','yourselves','have','in','will','on','does','your','now','under','he','you',\\\n    'herself','has','just','where','too','only','myself','which','those','i','after','few','whom','t','be',\\\n    'if','theirs','my','against','a','by','doing','it','how','further','was','here','than']\n    text =''.join([i for i in text.split() if i not in stop_words])\n    return text\ndef remove_stop_words(text):\n    '''\n    Write a function to remove all the stop words from a string.\n    '''\n    stop_words = ['ourselves','hers','between','yourself','but','again','there','about','once','during',\\\n    'out','very','having','with','they','own','an','be','some','for','do','its','yours','such','into',\\\n    'myself','other','off','is','s','am','or','who','as','from','him','each','the','them','its',\\\n    'where','both','up','out','if','any','such','nor','me','were','her','more','himself','this','down',\\\n    'should','our','their','while','above','both','up','to','ours','had','she','all','no','when','at','any',\\\n    'than','themselves','too','yourselves','have','in','will','on','does','your','now','under','he','you',\\\n    'herself','has','just','where','too','only','myself','which','those','i','after','few','whom','t','be',\\\n    'if','theirs','my','against','a','by','doing','it','how','further','was','here','than']\n    text =''.join([i for i in text.split() if i not in stop_words])\n    return text\ndef remove_common_words(text):\n    '''\n    Write a function to remove common words from a string.\n    '''\n    common_words = ['the','of','a','in','at','and','to','you','for','you','we','not','i',\\\n    'it','we','they','he','she','him','his','her','all','have','with','is','or','that','be',\\\n    'have','did','does','had','has','have','this','from','itself','that','have','this','they',\\\n    'the','we','her','he','she','each','we','she','it','they','her','is','is','are','was','were',\\\n    'will','can','be','that','being','is','your','did','its','these','my','your','these','who',\\\n    'is','an','on','it','does','when','there','these','we','you','the','he','she','these','she',\\\n    'that','they','we','this','about','how','was','when','will','your','there','then','these','they',\\\n    'its','these','they','we','these','he','he','she','it','they','this','those','they','their',\\\n    'we','she','they','our','we','we','he','him','his','you','that','its','they','it','these','she',\\\n    'we','we','he','they','he','we','they','we','they','we','he','him','they','she','they','you',\\\n    'those','we','they','we','they','we','we','we','we','she','he','they','you','we','they','she',\\\n    'we','we','we','they','we','they','we','they','we','she','they','they','we','we','we','we',\\\n    'we','we','we','they','they','we','they','they','we','we','we','they','we','they','we','we'"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_2(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_3(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_4(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_5(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_6(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_7(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_8(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_9(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_10(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_11(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_12(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_13(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_14(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_15(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_16(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_17(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_18(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_19(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_20(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_21(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_22(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_23(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_24(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_25(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_26(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_27(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_28(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_29(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_30(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_31(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_32(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_33(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_34(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_35(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_36(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_37(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_38(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_39(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_spaces_40(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\ndef remove_all_space"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    if not isinstance(text, basestring):\n        raise TypeError(\"Expected string\")\n    \n    return re.sub(r'\\s', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return ''.join(text.split())\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    newText = re.sub(r'\\s', '', text)\n    return newText\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.strip()\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    a=0\n    b=0\n    c=0\n    if x==y==z:\n        return 3\n    if x==y:\n        b=1\n    if y==z:\n        b=1\n    if x==z:\n        b=1\n    if a==b==c:\n        return 6\n    if a==b:\n        c=1\n    if b==c:\n        c=1\n    if a==c:\n        c=1\n    return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y and y == z and z == x\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        return 3\n    elif x==y or y==z or z==x:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    t = 0\n    if x == y == z:\n        t = 3\n    elif x == y or x == z or y == z:\n        t = 2\n    return t\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        return 3\n    elif x==y or y==z or x==z:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    numbers=[]\n    numbers.append(x)\n    numbers.append(y)\n    numbers.append(z)\n    numbers.sort()\n    count=0\n    if numbers[0]==numbers[1]==numbers[2]:\n        count+=1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y:\n        return 2\n    elif x == z:\n        return 2\n    elif y == z:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    if n == 1:\n        return 0\n    start = 0\n    end = n-1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if arr[mid] >= arr[0]:\n            start = mid + 1\n        else:\n            end = mid - 1\n    if arr[start] < arr[0]:\n        return start\n    else:\n        return end\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) < 2:\n        return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    mid = int(len(arr)/2)\n    if mid == 0:\n        return 0\n    left, right = arr[:mid], arr[mid:]\n    if left == sorted(left):\n        return 0\n    if right == sorted(right):\n        return 1\n    return count_rotation(left) + count_rotation(right)\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(0, len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    #return abs(len(arr)-len(sorted(arr)))\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    for i in range(1,len(arr)):\n        if arr[i] < arr[i-1]:\n            return i\n    return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] <= arr[(i + 1) % n]:\n            continue\n        else:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    low = 0\n    high = len(arr) - 1\n    count = 0\n    while low <= high:\n        if arr[low] <= arr[high]:\n            return count\n        mid = (low + high) // 2\n        if mid < high and arr[mid] > arr[mid + 1]:\n            count += mid + 1\n            high = mid - 1\n        else:\n            low = mid + 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    arr=arr[::-1]\n    count=0\n    for i in range(len(arr)-1):\n        if arr[i]>arr[i+1]:\n            count+=1\n    return count\n    \ndef rotate(arr,d):\n    '''\n    Write a python function to rotate an array by d positions. https://www.geeksforgeeks.org/rotate-array-left/\n    '''\n    n=len(arr)\n    for i in range(d):\n        temp=arr.pop()\n        arr.insert(0,temp)\n    return arr\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) == 1:\n        return 0\n    start = 0\n    end = len(arr)-1\n    while start <= end:\n        mid = start + (end-start)//2\n        if arr[mid] > arr[mid+1]:\n            return mid+1\n        if arr[mid] < arr[start]:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return 0\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # consider all perfect square numbers <= n \n    i = 1\n    perfect_sqs = []\n    while i*i <= n :\n        perfect_sqs.append(i*i)\n        i += 1\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0:\n        return True\n    x = n\n    y = (x + 1) // 2\n    while y * y!= x:\n        x = y\n        y = (x + 1) // 2\n    if x * x == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # while(n > 1):\n    #     if n % 2 == 0:\n    #         n = n/2\n    #     else:\n    #         return False\n    # return True\n    return n == int(math.sqrt(n))\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    '''\n    Solution:\n    If n is a perfect square (or is a perfect square approximation), then n * n == n^2\n    '''\n    root = math.floor(math.sqrt(n))\n    return root * root == n\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 :\n        return True\n    i = 1\n    while i*i < n :\n        i += 1\n    if i*i == n :\n        return True\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return (n == int(n**0.5)**2)\n    \ndef is_perfect_square_java(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # int i = 0; // will also work\n    i = -1\n    while n > i*i :\n        i = i + 1\n    return i*i == n\n    \ndef is_perfect_square_c(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return n >= 0 and (n == int(n**0.5)**2)\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 :\n        return True\n    if n < 0 :\n        return False\n    if n == 1 :\n        return True\n    if (n & 0x1) :\n        return False\n    return is_perfect_square(n >> 1)\n    \ndef is_power_of_two(n) :\n    '''\n    Write a function to check whether the given number is a power of two or not. https://www.geeksforgeeks.org/check-if-given-number-is-power-of-two-in-c/\n    '''\n    return n > 0 and (n & (n - 1)) == 0\n    \ndef is_power_of_two_2(n) :\n    '''\n    Write a function to check whether the given number is a power of two or not. https://www.geeksforgeeks.org/check-if-given-number-is-power-of-two-in-c/\n    '''\n    return n > 0 and n & (n - 1) == 0 and n!= 1\n    \ndef is_power_of_two_3(n) :\n    '''\n    Write a function to check whether the given number is a power of two or not. https://www.geeksforgeeks.org/check-if-given-number-is-power-of-two-in-c/\n    '''\n    return n > 0 and n & (n - 1) == 0 and n!= 1 and n!= 2\n    \ndef is_power_of_two_4(n) :\n    '''\n    Write a function to check whether the given number is a power of two or not. https://www.geeksforgeeks.org/check-if-given-number-is-power-of-two-in-c/\n    '''\n    return n > 0 and n & (n - 1) == 0 and n!= 1 and n!= 2 and n!= 4\n    \ndef is_power_of_two_5(n) :\n    '''\n    Write a function to check whether the given number is a power of two or not. https://www.geeksforgeeks.org/check-if-given-number-is-power-of-two-in-c/\n    '''\n    return n > 0 and n & (n - 1) == 0 and n!= 1 and n!= 2 and n!= 4 and n!= 8\n    \ndef is_power_of_two_6(n) :\n    '''\n    Write a function to check whether the given number is a power of two or not. https://www.geeksforgeeks.org/check-if-given-number-is-power-of-two-in-c/\n    '''\n    return n > 0 and n & (n - 1) == 0 and n!= 1 and n!= 2 and n!= 4 and n!= 8 and n!= 16\n    \ndef is_power_of_two_7(n) :\n    '''\n    Write a function to check whether the given number is a power of two or not. https://www.geeksforgeeks.org/check-if-given-number-is-power-of-two-in-c/\n    '''\n    return n > 0 and n & (n - 1) == 0 and n!= 1 and n!= 2 and n!= 4 and n!= 8 and n!= 16 and n!= 32\n    \ndef is_power_of_two_8(n) :\n    '''\n    Write a function to check whether the given number is a power of two or not. https://www.geeksforgeeks.org/check-if-given-number-is-power-of-two-in-c/\n    '''\n    return n > 0 and n & (n - 1) == 0 and n!= 1 and n!= 2 and n!= 4 and n!= 8 and n!= 16 and n!= 32 and n!= 64\n    \ndef is_power_of_two_9(n) :\n    '''\n    Write a function to check whether the given number is a power of two or not. https://www.geeksforgeeks.org/check-if-given-number-is-power-of-two-in-c/\n    '''\n    return n > 0 and n & (n - 1) == 0 and n!= 1 and n!= 2 and n!= 4 and n!= 8 and n!= 16 and n!= 32 and n!= 64 and n!= 128\n    \ndef is_power_of_two_10(n) :\n    '''\n    Write a function to check whether the given number is a power of two or not. https://www.geeksforgeeks.org/check-if-given-number-is-power-of-two-in-c/\n    '''\n    return n > 0 and n & (n - 1) == 0 and n!= 1 and n!= 2 and n!= 4 and n!= 8 and n!= 16 and n!= 32 and n!= 64 and n!= 128 and n!= 256\n    \ndef is_power_of_two_11(n) :\n    '''\n    Write a function to check whether the given number is a power of two or not. https://www.geeksforgeeks.org/check-if-given-number-is-power-of-two-in-c/\n    '''\n    return n > 0 and n & (n - 1) == 0 and n!= 1 and n!= 2 and n!= 4 and n!= 8 and n!= 16 and n!= 32 and n!= 64 and n!= 128 and n!= 256 and n!= 512\n    \ndef is_power_of_two_12(n) :\n    '''\n    Write a function to check whether the given number is a power of two or not. https://www.geeksforgeeks.org/check-if-given-number-is-power-of-two-in-c/\n    '''\n    return n > 0 and n & (n - 1) == 0 and n!= 1 and n!= 2 and n!= 4 and n!= 8 and n!= 16 and n!= 32 and n!= 64 and n!= 128 and n!= 256 and n!= 512 and n!= 1024\n    \ndef is_power_of_two_13(n) :\n    '''\n    Write a function to check whether the given number is a power of two or not. https://www.geeksforgeeks.org/check-if-given-number-is-power-of-two-in-c/\n    '''\n    return n > 0 and n & (n - 1) == 0 and n!= 1 and n!= 2 and n!= 4 and n!= 8 and n!= 16 and n!= 32 and n!= 64 and n!= 128 and n!= 256 and n!= 512 and n!= 1024 and n!= 2048\n    \ndef is_power_of_two_14(n) :\n    '''\n    Write a function to check whether the given number is a power of two or not. https://www.geeksforgeeks.org/check-if-given-number-is-power-of-two-in-c/\n    '''\n    return n > 0 and n & (n - 1) == 0 and n!= 1 and n!= 2 and n!= 4 and n!= 8 and n!= 16 and n!= 32 and n!= 64 and n!= 128 and n!= 256 and n!= 512 and n!= 1024 and n!= 2048 and n!= 4096\n    \ndef is_power_of_two_15(n) :\n    '''\n    Write a function to check whether the given number is a power of two or not. https://www.geeksforgeeks.org/check-if-given-number-is-power-of-two-in-c/\n    '''\n    return n > 0 and n & (n - 1) == 0 and n!= 1 and n!= 2 and n!= 4 and n!= 8 and n!= 16 and n!= 32 and n!= 64 and n!= 128 and n!= 256 and n!= 512 and n!= 1024 and n!= 2048 and n!= 4096 and n!= 8192\n    \ndef is_power_of_two_16(n) :\n    '''\n    Write a function to check whether the given number is a power of two or not. https://www.geeksforgeeks.org/check-if-given-number-is-power-of-two-in-c/\n    '''\n    return n > 0 and n & (n - 1) == 0 and n!= 1 and n!= 2 and n!= 4 and n!= 8 and n!= 16 and n!= 32 and n!= 64 and n!= 128 and n!= 256 and n!= 512 and n!= 1024 and "
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n\n    y = 1\n    while x > y :\n        x = n / y\n        y += 1\n    return x == y\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # if n is negative then\n    # return false\n    if n < 0 :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt = n ** 0.5\n    if sqrt - math.floor(sqrt) == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    p = 1\n    for i in arr:\n        p = p * i\n    return p%2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    temp = 1\n    for i in arr:\n        temp *= i\n    if temp % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    n=len(arr)\n    product=1\n    for i in range(n):\n        product=product*arr[i]\n    return product%2==0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    import functools\n    return functools.reduce(lambda x,y: x*y, arr) % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    def multiply_array(arr):\n        '''\n        Takes a list of numbers and returns the product of all numbers.\n        '''\n        return reduce(lambda x,y: x*y, arr)\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    res = 1\n    for num in arr: \n        res *= num\n    if res % 2 == 0: \n        return True\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    arr = sorted(arr)\n    res = 1\n    for i in arr:\n        res = res * i\n    if res % 2 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod = 1\n    for i in arr:\n        prod = prod*i\n    return prod%2 == 0\n    \ndef is_product_odd(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is odd or not.\n    '''\n    prod = 1\n    for i in arr:\n        prod = prod*i\n    return prod%2!= 0\n    \ndef is_palindrome(arr):\n    '''\n    Write a function to check whether the given list is a palindrome or not.\n    '''\n    return arr == arr[::-1]\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum_list = []\n    max_sum = 0\n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if max_sum < current_sum:\n            max_sum = current_sum\n            max_sum_list = lists[i]\n    return max_sum_list\n    \ndef find_largest_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum_list = []\n    max_sum = 0\n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if max_sum < current_sum:\n            max_sum = current_sum\n            max_sum_list = lists[i]\n    return max_sum_list\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max(lists, key=sum)\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    for i in range(len(lists)):\n        max_sum = max(max_sum, sum(lists[i]))\n    return [[x for x in lists[i] if x < max_sum][0] for i in range(len(lists))]\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_sum_list = l\n    return max_sum_list\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # 1. Sort the lists on the basis of second element and call it a as a list of lists\n    # 2. Run a loop from 0 to a-1, and calculate the sum of all elements of the list of lists\n    # 3. If the sum of the elements of the list of lists is greater than the current max sum,\n    # then update the max sum and the list index\n    # 4. Return the list of lists with the highest sum\n    a = sorted(lists,key=lambda x:x[1],reverse=True)\n    max_sum = a[0][1]\n    max_sum_list = a[0]\n    for i in range(len(a)-1):\n        sum_list = a[i+1][1]+a[i][1]\n        if sum_list > max_sum:\n            max_sum = sum_list\n            max_sum_list = a[i+1]\n    return max_sum_list\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    n = len(lists)\n    max_sum = -1\n    result = []\n    for i in range(n):\n        sum = 0\n        for j in lists[i]:\n            sum += j\n        if sum > max_sum:\n            max_sum = sum\n            result = lists[i]\n    return result\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    sums = [0] * len(lists)\n    for i in range(len(lists)):\n        sums[i] = sum(lists[i])\n    return sums.index(max(sums))\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = None\n    best_list = None\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n    max_list = []\n    for l in lists:\n        if sum(l) == max_sum:\n            max_list.append(l)\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # max_sum = []\n    # for list in lists:\n    #     current_sum = sum(list)\n    #     max_sum.append(current_sum)\n    # print(max(max_sum))\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run, cur_run = 0, 0\n    for i in test_str:\n        if i.isupper():\n            cur_run += 1\n            max_run = max(max_run, cur_run)\n        else:\n            cur_run = 0\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run_lower = 0\n    max_run_upper = 0\n    for i in range(0, len(test_str)):\n        if test_str[i].isupper():\n            max_run_upper += 1\n        else:\n            if max_run_lower > max_run_upper:\n                max_run_upper = max_run_lower\n            max_run_lower = 0\n    if max_run_lower > max_run_upper:\n        max_run_upper = max_run_lower\n    return max_run_upper\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    l_max, r_max = 0, 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            r_max += 1\n        else:\n            r_max = 0\n        l_max = max(l_max, r_max)\n    return l_max\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # Starting from 0 to len(test_str)\n    max_run = 0\n    for i in range(len(test_str)):\n        # Count of uppercase chars is found\n        count = 0\n        for j in range(i, len(test_str)):\n            if test_str[j].isupper():\n                count += 1\n            # If count of uppercase chars is found in\n            # range i to j, then update max_run\n            if count > max_run:\n                max_run = count\n                \n    return max_run\n    "
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if not test_str:\n        return 0\n    \n    max_run = 0\n    temp_run = 0\n    for i, val in enumerate(test_str):\n        if val.isupper():\n            temp_run += 1\n        else:\n            max_run = max(max_run, temp_run)\n            temp_run = 0\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize a empty list\n    l = []\n    # iterate over the string\n    for i in test_str:\n        # if it is uppercase, add it to the list\n        if i.isupper():\n            l.append(i)\n    # sort the list\n    l.sort()\n    # return the length of the list\n    return len(l)\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_len = 1\n    cur_len = 1\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            cur_len += 1\n        else:\n            max_len = max(max_len, cur_len)\n            cur_len = 1\n    return max(max_len, cur_len)\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    from collections import deque\n    max_run = 0\n    deq = deque()\n    deq.append(test_str[0])\n    for i in range(1,len(test_str)):\n        if test_str[i] >= test_str[i-1]:\n            deq.append(test_str[i])\n        else:\n            while len(deq) > 0:\n                if test_str[i] >= test_str[i-1]:\n                    break\n                else:\n                    deq.popleft()\n            if len(deq) == 0:\n                deq.append(test_str[i])\n    for i in range(len(deq)):\n        run = 0\n        for j in range(i,len(deq)):\n            if deq[j] <= test_str[j]:\n                run+=1\n            else:\n                break\n        if run > max_run:\n            max_run = run\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    curr_run = 0\n    for c in test_str:\n        if c.isupper():\n            curr_run += 1\n            max_run = max(max_run, curr_run)\n        else:\n            curr_run = 0\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    i = 0\n    j = 0\n    max_run = 0\n    while i < len(test_str):\n        if test_str[i].isupper():\n            j += 1\n        else:\n            if j > max_run:\n                max_run = j\n            j = 0\n        i += 1\n    if j > max_run:\n        max_run = j\n    return max_run\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n    return 0\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num%2==1:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2 == 1:\n            return i\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n    return None\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if tup.count(K) > 0:\n            return True\n    return False\n    \n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    \n    if len(test_tup) == 0:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return all(x[K] == test_tup[K] for x in test_tup)\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    #print(test_tup)\n    if test_tup[K] == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k,(t1,t2) = test_tup\n    if k!= K:\n        return True\n    if t1 == 1 and t2 == 1:\n        return True\n    if t1 == 1 and t2!= 1:\n        return True\n    if t1!= 1 and t2 == 1:\n        return True\n    if t1!= 1 and t2!= 1:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return K in test_tup\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] == K:\n        return True\n    elif test_tup[1] == K:\n        return True\n    elif test_tup[2] == K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[K] == None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # test_tup is a tuple of tuples, we need to check if the first\n    # tuple is equal to the given K or not.\n    t = test_tup[0]\n    if t == K:\n        return True\n    return False\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            result_list.append(False)\n        elif test_tup1[i] < test_tup2[i]:\n            result_list.append(True)\n        else:\n            result_list.append(False)\n    return result_list\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    def check(x, y):\n        return x < y\n    return check(*test_tup2)\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup1[i] > test_tup2[i]:\n            print 'False'\n            return False\n    print 'True'\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all(x < y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    sorted_tup = sorted(test_tup1)\n    for i in range(len(test_tup2)):\n        if sorted_tup[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all(map(lambda t: t1 < t2 for t1,t2 in zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    pass\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return [test_tup2[x] < test_tup1[x] for x in range(len(test_tup1))]\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    \n    for i in range(0,len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return True\n        else:\n            return False\n"
    }
]